// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/iminterfaceprotobufs/infoserver/userserver.proto

/*
Package infoserver is a generated protocol buffer package.

It is generated from these files:

	gitlab.chatserver.im/interfaceprobuf/iminterfaceprotobufs/infoserver/userserver.proto

It has these top-level messages:

	GetUserInfoByIdReq
	GetUserInfoByIdArrReq
	UserInfoArray
	UserInfo
	GetUserExpireByIdReq
	GetUserExpireByIdResult
	GetUserByphone
	GetUserInfoResult
	GetUserInfoByIdArrResult
	GetUserByUsername
	UpdatePhotoInfoReq
	GetPhotoInfoReq
	UpdateUserPhotoResult
	GetUserPhotoResult
	UpdateUserProfileReq
	UpdateUserProfileResult
	StatusReq
	StatusResult
	UpdateExpireReq
	UpdateExpireResult
	UserClusterChange
	UserClusterChangeResult
	UpdateuserNameReq
	UpdateuserNameResult
	CheckPhoneRegisterReq
	CheckPhoneRegisterResult
	DeleteAccountByIdReq
	DelAccountResult
	BotUpdateInfo
	BotUpdateInfoResult
	DelContactReq
	DelContactResult
	ContactIdHash
	DelContactArrReq
	CmdResetUserContactsReq
	CmdResetUserContactsResult
	DelContactArrResult
	ContatsGetContactsReq
	ContactInfo
	ContatsGetContactsResult
	PhoneBookContact
	ContactsImportPhoneContactsReq
	ImportContact
	PopularContact
	ContactsImportPhoneContactsResult
	AddRelationIdInfo
	DelRelationIdInfo
	AddRelationIdInfoResult
	DelRelationIdInfoResult
	BlockeduserReq
	BlockeduserResult
	ContactUnblockedReq
	ContactsGetBlockedReq
	Blockeduser
	ContactsGetBlockedResult
	SystemWhiteUser
	StoreSysWhiteUserReq
	StoreSysWhiteUserResult
	UpdateSystemWhiteUserLevelReq
	UpdateSystemWhiteUserLevelResult
	GetSysWhiteUserReq
	GetSysWhiteUserResult
	GetSysWhiteUserArrReq
	GetSysWhiteUserArrResult
	DelSysWhiteUserReq
	DelSysWhiteUserResult
	UserDc
	GetAllDcReq
	SetPrivacyReq
	SetPrivacyResult
	GetPrivacyReq
	CheckPrivacyReq
	CheckPrivacyResult
	GetPrivacyResult
	StoreShopStickerSetReq
	StoreShopStickerSetResult
	StoreShopStickerSetDocumentsReq
	StoreShopStickerSetDocumentsResult
	DeleteStickerSetReq
	DeleteStickerSetResult
	StickerSetInfo
	GetStickerSetInfoReq
	GetStickerSetInfoResult
	StickerPackDocumentBase
	StickerPackDocumentInfo
	StoreStickerPackDcReq
	StoreStickerPackDcResult
	StoreStickerPackDcArrReq
	StoreStickerPackDcArrResult
	GetStickerSetPackDcInfosReq
	GetStickerSetPackDcInfosResult
	AddOrDeleteFaveSticerReq
	AddOrDeleteFaveSticerResult
	GetFavedStickersReq
	GetFavedStickersResult
	StickerPack
	StoreUserStickerSetReq
	StoreUserStickerSetResult
	UpdateUserStickerSetDisabledReq
	UpdateUserStickerSetDisabledResult
	UpdateUserStickerSetOrderReq
	UpdateUserStickerSetOrderResult
	UpdateUserStickerSetInstallArReq
	UpdateUserStickerSetInstallArResult
	DeleteuserStickerReq
	DeleteuserStickerResult
	UserStickerInfo
	UserStickerInfoArr
	StickerSetInfoArr
	GetuserAllStickersReq
	GetuserAllStickersResult
	GetAllStickerSetsReq
	GetAllStickerSetsResult
	DeleteStickerPackDocumentReq
	DeleteStickerPackDocumentResult
	GetAuthorStickerSetReq
	GetAuthorStickerSetResult
	GetAuthorAllStickerSetReq
	GetAuthorAllStickerSetResult
	AuthorStickerSet
	CountAuthorAllStickerSetReq
	CountAuthorAllStickerSetResult
	UserGifInfoArr
	UserSaveGifInfo
	SaveUserGifReq
	SaveUserGifResult
	DelUserGifReq
	DelUserGifResult
	GetUserGifsReq
	GetUserGifsResult
	CheckUserIsBlockedReq
	CheckUserIsBlockedResult
	RegisterUserInfo
	UpdateUserInfoResult
	CheckUserAccessHashValidReq
	CheckUserAccessHashValidResult
	RegisterUserInfoReq
	RegisterUserInfoResult
	GetNotifySettingsReq
	GetNotifySettingsResult
	UpdateNotifySettingsReq
	UpdateNotifySettingsResult
	GetContactsStatusReq
	UserStaus
	GetContactsStatusResult
	UpdateBotPicRequest
	UpdateBotPicResult
	GetAllProxyConfigReq
	ProxyAddr
	GetAllProxyConfigResult
	CheckUserNameOccupiedReq
	CheckUserNameOccupiedResult
	GetUserGpsReq
	GetUserGpsResult
	CheckSelfIsContactReq
	CheckSelfIsContactResult
	UpdateSwitchReq
	UpdateSwitchResult
	GetSwitchStatusReq
	GetSwitchStatusResult
	UGetUsersChatsReq
	UGetUsersChatsResult
	UpdateBotInfoSuppReq
	UpdateBotInfoSuppResult
	DeleteUserUsernameReq
	DeleteUserUsernameResult
	UpdateUserLocationReq
	UpdateUserLocationResult
	UpdateUserGrenderReq
	UpdateUserGrenderResult
	UpdateUserEmailReq
	UpdateUserEmailResult
	UploadContactsReq
	UploadContactsResult
	ApplyContactReq
	ApplyContactResult
	GetAppliedContactsReq
	GetAppliedContactsResult
	Applied
	VerifyContactReq
	VerifyContactResult
	DeleteAppliedContactReq
	DeleteAppliedContactResult
	SearchUserByPhoneReq
	SearchUserByPhoneResult
*/
package infoserver

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import pbcomm "gitlab.chatserver.im/interfaceprobuf/pbcomm"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ReErrCode int32

const (
	ReErrCode_Success          ReErrCode = 0
	ReErrCode_DBError          ReErrCode = 1
	ReErrCode_InternalError    ReErrCode = 2
	ReErrCode_NotExist         ReErrCode = 3
	ReErrCode_UserNameOccupied ReErrCode = 4
	ReErrCode_Register         ReErrCode = 5
	ReErrCode_Unregister       ReErrCode = 6
	ReErrCode_NotModify        ReErrCode = 7
	ReErrCode_Blocked          ReErrCode = 8
	ReErrCode_UnBlocked        ReErrCode = 9
	ReErrCode_Valid            ReErrCode = 10
	ReErrCode_UnValid          ReErrCode = 11
	ReErrCode_Failed           ReErrCode = 12
	ReErrCode_HashNotSuccess   ReErrCode = 13
	ReErrCode_UsernameNotEmpty ReErrCode = 14
	ReErrCode_VipOnly          ReErrCode = 15
)

var ReErrCode_name = map[int32]string{
	0:  "Success",
	1:  "DBError",
	2:  "InternalError",
	3:  "NotExist",
	4:  "UserNameOccupied",
	5:  "Register",
	6:  "Unregister",
	7:  "NotModify",
	8:  "Blocked",
	9:  "UnBlocked",
	10: "Valid",
	11: "UnValid",
	12: "Failed",
	13: "HashNotSuccess",
	14: "UsernameNotEmpty",
	15: "VipOnly",
}
var ReErrCode_value = map[string]int32{
	"Success":          0,
	"DBError":          1,
	"InternalError":    2,
	"NotExist":         3,
	"UserNameOccupied": 4,
	"Register":         5,
	"Unregister":       6,
	"NotModify":        7,
	"Blocked":          8,
	"UnBlocked":        9,
	"Valid":            10,
	"UnValid":          11,
	"Failed":           12,
	"HashNotSuccess":   13,
	"UsernameNotEmpty": 14,
	"VipOnly":          15,
}

func (x ReErrCode) String() string {
	return proto.EnumName(ReErrCode_name, int32(x))
}
func (ReErrCode) EnumDescriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{0} }

// user switch type
type Switch int32

const (
	Switch_Unused             Switch = 0
	Switch_UsernameSearch     Switch = 1
	Switch_UnreadIncludeMuted Switch = 2
	Switch_DisableMultiSignIn Switch = 3
)

var Switch_name = map[int32]string{
	0: "Unused",
	1: "UsernameSearch",
	2: "UnreadIncludeMuted",
	3: "DisableMultiSignIn",
}
var Switch_value = map[string]int32{
	"Unused":             0,
	"UsernameSearch":     1,
	"UnreadIncludeMuted": 2,
	"DisableMultiSignIn": 3,
}

func (x Switch) String() string {
	return proto.EnumName(Switch_name, int32(x))
}
func (Switch) EnumDescriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{1} }

type UChatResultCode int32

const (
	UChatResultCode_Chat_RPC_OK                     UChatResultCode = 0
	UChatResultCode_Chat_ADDUSER3549_EXP            UChatResultCode = 4000
	UChatResultCode_Chat_User_Priavcay              UChatResultCode = 4001
	UChatResultCode_Chat_To_User_Blocked            UChatResultCode = 4002
	UChatResultCode_Chat_User_Blocked               UChatResultCode = 4003
	UChatResultCode_Chat_REPEAT_CREAT               UChatResultCode = 4004
	UChatResultCode_Chat_REPEAT_ADD_USER            UChatResultCode = 4005
	UChatResultCode_Chat_EXCEED_CREATE_MAXNUM       UChatResultCode = 4006
	UChatResultCode_Chat_EXCEED_TODAY_CREATE_MAXNUM UChatResultCode = 4007
	UChatResultCode_Chat_EXCEED_ADD_USER_MAXNUM     UChatResultCode = 4008
	UChatResultCode_Chat_PROHIBIT_ADD_GROUP         UChatResultCode = 4009
	UChatResultCode_Chat_ADMINLEVEL_EXCEPTION       UChatResultCode = 4010
	UChatResultCode_Chat_ALREADYLEFT_EXCEPTION      UChatResultCode = 4011
	UChatResultCode_Chat_GROUP_DISBAND              UChatResultCode = 4012
	UChatResultCode_Chat_GROUP_KICKED               UChatResultCode = 4013
	UChatResultCode_Chat_HOURS_ADD_USER_MAXNUM      UChatResultCode = 4114
	UChatResultCode_Chat_ONCE_ADD_USER_MAXNUM       UChatResultCode = 4115
	//
	UChatResultCode_Chat_UNKNOWN               UChatResultCode = 4100
	UChatResultCode_Chat_PARAMETER_EXCEPTION   UChatResultCode = 4101
	UChatResultCode_Chat_LOGIC_EXCEPTION       UChatResultCode = 4102
	UChatResultCode_Chat_REDIS_EXCEPTION       UChatResultCode = 4103
	UChatResultCode_Chat_DB_EXCEPTION          UChatResultCode = 4104
	UChatResultCode_Chat_AllocId_EXCEPTION     UChatResultCode = 4105
	UChatResultCode_Chat_CallGetUser_EXCEPTION UChatResultCode = 4106
	UChatResultCode_Chat_DB_NORECORD           UChatResultCode = 4107
	UChatResultCode_Chat_Group_NORECORD        UChatResultCode = 4108
)

var UChatResultCode_name = map[int32]string{
	0:    "Chat_RPC_OK",
	4000: "Chat_ADDUSER3549_EXP",
	4001: "Chat_User_Priavcay",
	4002: "Chat_To_User_Blocked",
	4003: "Chat_User_Blocked",
	4004: "Chat_REPEAT_CREAT",
	4005: "Chat_REPEAT_ADD_USER",
	4006: "Chat_EXCEED_CREATE_MAXNUM",
	4007: "Chat_EXCEED_TODAY_CREATE_MAXNUM",
	4008: "Chat_EXCEED_ADD_USER_MAXNUM",
	4009: "Chat_PROHIBIT_ADD_GROUP",
	4010: "Chat_ADMINLEVEL_EXCEPTION",
	4011: "Chat_ALREADYLEFT_EXCEPTION",
	4012: "Chat_GROUP_DISBAND",
	4013: "Chat_GROUP_KICKED",
	4114: "Chat_HOURS_ADD_USER_MAXNUM",
	4115: "Chat_ONCE_ADD_USER_MAXNUM",
	4100: "Chat_UNKNOWN",
	4101: "Chat_PARAMETER_EXCEPTION",
	4102: "Chat_LOGIC_EXCEPTION",
	4103: "Chat_REDIS_EXCEPTION",
	4104: "Chat_DB_EXCEPTION",
	4105: "Chat_AllocId_EXCEPTION",
	4106: "Chat_CallGetUser_EXCEPTION",
	4107: "Chat_DB_NORECORD",
	4108: "Chat_Group_NORECORD",
}
var UChatResultCode_value = map[string]int32{
	"Chat_RPC_OK":                     0,
	"Chat_ADDUSER3549_EXP":            4000,
	"Chat_User_Priavcay":              4001,
	"Chat_To_User_Blocked":            4002,
	"Chat_User_Blocked":               4003,
	"Chat_REPEAT_CREAT":               4004,
	"Chat_REPEAT_ADD_USER":            4005,
	"Chat_EXCEED_CREATE_MAXNUM":       4006,
	"Chat_EXCEED_TODAY_CREATE_MAXNUM": 4007,
	"Chat_EXCEED_ADD_USER_MAXNUM":     4008,
	"Chat_PROHIBIT_ADD_GROUP":         4009,
	"Chat_ADMINLEVEL_EXCEPTION":       4010,
	"Chat_ALREADYLEFT_EXCEPTION":      4011,
	"Chat_GROUP_DISBAND":              4012,
	"Chat_GROUP_KICKED":               4013,
	"Chat_HOURS_ADD_USER_MAXNUM":      4114,
	"Chat_ONCE_ADD_USER_MAXNUM":       4115,
	"Chat_UNKNOWN":                    4100,
	"Chat_PARAMETER_EXCEPTION":        4101,
	"Chat_LOGIC_EXCEPTION":            4102,
	"Chat_REDIS_EXCEPTION":            4103,
	"Chat_DB_EXCEPTION":               4104,
	"Chat_AllocId_EXCEPTION":          4105,
	"Chat_CallGetUser_EXCEPTION":      4106,
	"Chat_DB_NORECORD":                4107,
	"Chat_Group_NORECORD":             4108,
}

func (x UChatResultCode) String() string {
	return proto.EnumName(UChatResultCode_name, int32(x))
}
func (UChatResultCode) EnumDescriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{2} }

type UpdateSwitchResult_ResultCode int32

const (
	UpdateSwitchResult_Success       UpdateSwitchResult_ResultCode = 0
	UpdateSwitchResult_InternalError UpdateSwitchResult_ResultCode = 1
)

var UpdateSwitchResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var UpdateSwitchResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x UpdateSwitchResult_ResultCode) String() string {
	return proto.EnumName(UpdateSwitchResult_ResultCode_name, int32(x))
}
func (UpdateSwitchResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{157, 0}
}

type GetSwitchStatusResult_ResultCode int32

const (
	GetSwitchStatusResult_Success       GetSwitchStatusResult_ResultCode = 0
	GetSwitchStatusResult_InternalError GetSwitchStatusResult_ResultCode = 1
)

var GetSwitchStatusResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var GetSwitchStatusResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x GetSwitchStatusResult_ResultCode) String() string {
	return proto.EnumName(GetSwitchStatusResult_ResultCode_name, int32(x))
}
func (GetSwitchStatusResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{159, 0}
}

type DeleteUserUsernameResult_Code int32

const (
	DeleteUserUsernameResult_Success          DeleteUserUsernameResult_Code = 0
	DeleteUserUsernameResult_PermissionDenied DeleteUserUsernameResult_Code = 1
	DeleteUserUsernameResult_UsernameNotExist DeleteUserUsernameResult_Code = 2
	DeleteUserUsernameResult_InvalidUsername  DeleteUserUsernameResult_Code = 3
	DeleteUserUsernameResult_UserIsBot        DeleteUserUsernameResult_Code = 4
	DeleteUserUsernameResult_UsernameOccupied DeleteUserUsernameResult_Code = 5
	DeleteUserUsernameResult_InternalError    DeleteUserUsernameResult_Code = 6
)

var DeleteUserUsernameResult_Code_name = map[int32]string{
	0: "Success",
	1: "PermissionDenied",
	2: "UsernameNotExist",
	3: "InvalidUsername",
	4: "UserIsBot",
	5: "UsernameOccupied",
	6: "InternalError",
}
var DeleteUserUsernameResult_Code_value = map[string]int32{
	"Success":          0,
	"PermissionDenied": 1,
	"UsernameNotExist": 2,
	"InvalidUsername":  3,
	"UserIsBot":        4,
	"UsernameOccupied": 5,
	"InternalError":    6,
}

func (x DeleteUserUsernameResult_Code) String() string {
	return proto.EnumName(DeleteUserUsernameResult_Code_name, int32(x))
}
func (DeleteUserUsernameResult_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{165, 0}
}

// 根据用户id获取用户ID
type GetUserInfoByIdReq struct {
	SelfId int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	UserId int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetUserInfoByIdReq) Reset()                    { *m = GetUserInfoByIdReq{} }
func (m *GetUserInfoByIdReq) String() string            { return proto.CompactTextString(m) }
func (*GetUserInfoByIdReq) ProtoMessage()               {}
func (*GetUserInfoByIdReq) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{0} }

func (m *GetUserInfoByIdReq) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *GetUserInfoByIdReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetUserInfoByIdReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type GetUserInfoByIdArrReq struct {
	SelfId  int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	UserIds []int32       `protobuf:"varint,2,rep,packed,name=user_ids,json=userIds" json:"user_ids,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetUserInfoByIdArrReq) Reset()                    { *m = GetUserInfoByIdArrReq{} }
func (m *GetUserInfoByIdArrReq) String() string            { return proto.CompactTextString(m) }
func (*GetUserInfoByIdArrReq) ProtoMessage()               {}
func (*GetUserInfoByIdArrReq) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{1} }

func (m *GetUserInfoByIdArrReq) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *GetUserInfoByIdArrReq) GetUserIds() []int32 {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func (m *GetUserInfoByIdArrReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 用户信息数组
type UserInfoArray struct {
	Userin []*UserInfo `protobuf:"bytes,1,rep,name=userin" json:"userin,omitempty"`
}

func (m *UserInfoArray) Reset()                    { *m = UserInfoArray{} }
func (m *UserInfoArray) String() string            { return proto.CompactTextString(m) }
func (*UserInfoArray) ProtoMessage()               {}
func (*UserInfoArray) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{2} }

func (m *UserInfoArray) GetUserin() []*UserInfo {
	if m != nil {
		return m.Userin
	}
	return nil
}

// 查询出来的用户基础信息（self 、contact、 mutual_contact 需要在逻辑中判断 ）
type UserInfo struct {
	UserId               int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccessHash           int64  `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	FirstName            string `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName             string `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Username             string `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	Phone                string `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`
	Status               int32  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	LastLogout           int32  `protobuf:"varint,8,opt,name=last_logout,json=lastLogout,proto3" json:"last_logout,omitempty"`
	ClusterRegion        int32  `protobuf:"varint,9,opt,name=cluster_region,json=clusterRegion,proto3" json:"cluster_region,omitempty"`
	FontRgb              string `protobuf:"bytes,10,opt,name=font_rgb,json=fontRgb,proto3" json:"font_rgb,omitempty"`
	CountryCode          string `protobuf:"bytes,11,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	Photo                string `protobuf:"bytes,12,opt,name=photo,proto3" json:"photo,omitempty"`
	BotInfoVersion       int32  `protobuf:"varint,13,opt,name=bot_info_version,json=botInfoVersion,proto3" json:"bot_info_version,omitempty"`
	BotInlinePlaceholder string `protobuf:"bytes,14,opt,name=bot_inline_placeholder,json=botInlinePlaceholder,proto3" json:"bot_inline_placeholder,omitempty"`
	RestrictionReason    string `protobuf:"bytes,15,opt,name=restriction_reason,json=restrictionReason,proto3" json:"restriction_reason,omitempty"`
	LangCode             string `protobuf:"bytes,16,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	LocalPhone           string `protobuf:"bytes,17,opt,name=local_phone,json=localPhone,proto3" json:"local_phone,omitempty"`
	Deleted              bool   `protobuf:"varint,18,opt,name=deleted,proto3" json:"deleted,omitempty"`
	Bot                  bool   `protobuf:"varint,19,opt,name=bot,proto3" json:"bot,omitempty"`
	BotChatHistory       bool   `protobuf:"varint,20,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNochats           bool   `protobuf:"varint,21,opt,name=bot_nochats,json=botNochats,proto3" json:"bot_nochats,omitempty"`
	Verified             bool   `protobuf:"varint,22,opt,name=verified,proto3" json:"verified,omitempty"`
	Restricted           bool   `protobuf:"varint,23,opt,name=restricted,proto3" json:"restricted,omitempty"`
	Min                  bool   `protobuf:"varint,24,opt,name=min,proto3" json:"min,omitempty"`
	BotInlineGeo         bool   `protobuf:"varint,25,opt,name=bot_inline_geo,json=botInlineGeo,proto3" json:"bot_inline_geo,omitempty"`
	Self                 bool   `protobuf:"varint,26,opt,name=self,proto3" json:"self,omitempty"`
	Contact              bool   `protobuf:"varint,27,opt,name=contact,proto3" json:"contact,omitempty"`
	MutalContact         bool   `protobuf:"varint,28,opt,name=mutal_contact,json=mutalContact,proto3" json:"mutal_contact,omitempty"`
	StarMark             bool   `protobuf:"varint,29,opt,name=star_mark,json=starMark,proto3" json:"star_mark,omitempty"`
	ShowContactPhone     bool   `protobuf:"varint,30,opt,name=show_contact_phone,json=showContactPhone,proto3" json:"show_contact_phone,omitempty"`
	GroupId              int32  `protobuf:"varint,31,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{3} }

func (m *UserInfo) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserInfo) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *UserInfo) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *UserInfo) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *UserInfo) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UserInfo) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *UserInfo) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *UserInfo) GetLastLogout() int32 {
	if m != nil {
		return m.LastLogout
	}
	return 0
}

func (m *UserInfo) GetClusterRegion() int32 {
	if m != nil {
		return m.ClusterRegion
	}
	return 0
}

func (m *UserInfo) GetFontRgb() string {
	if m != nil {
		return m.FontRgb
	}
	return ""
}

func (m *UserInfo) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *UserInfo) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *UserInfo) GetBotInfoVersion() int32 {
	if m != nil {
		return m.BotInfoVersion
	}
	return 0
}

func (m *UserInfo) GetBotInlinePlaceholder() string {
	if m != nil {
		return m.BotInlinePlaceholder
	}
	return ""
}

func (m *UserInfo) GetRestrictionReason() string {
	if m != nil {
		return m.RestrictionReason
	}
	return ""
}

func (m *UserInfo) GetLangCode() string {
	if m != nil {
		return m.LangCode
	}
	return ""
}

func (m *UserInfo) GetLocalPhone() string {
	if m != nil {
		return m.LocalPhone
	}
	return ""
}

func (m *UserInfo) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

func (m *UserInfo) GetBot() bool {
	if m != nil {
		return m.Bot
	}
	return false
}

func (m *UserInfo) GetBotChatHistory() bool {
	if m != nil {
		return m.BotChatHistory
	}
	return false
}

func (m *UserInfo) GetBotNochats() bool {
	if m != nil {
		return m.BotNochats
	}
	return false
}

func (m *UserInfo) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

func (m *UserInfo) GetRestricted() bool {
	if m != nil {
		return m.Restricted
	}
	return false
}

func (m *UserInfo) GetMin() bool {
	if m != nil {
		return m.Min
	}
	return false
}

func (m *UserInfo) GetBotInlineGeo() bool {
	if m != nil {
		return m.BotInlineGeo
	}
	return false
}

func (m *UserInfo) GetSelf() bool {
	if m != nil {
		return m.Self
	}
	return false
}

func (m *UserInfo) GetContact() bool {
	if m != nil {
		return m.Contact
	}
	return false
}

func (m *UserInfo) GetMutalContact() bool {
	if m != nil {
		return m.MutalContact
	}
	return false
}

func (m *UserInfo) GetStarMark() bool {
	if m != nil {
		return m.StarMark
	}
	return false
}

func (m *UserInfo) GetShowContactPhone() bool {
	if m != nil {
		return m.ShowContactPhone
	}
	return false
}

func (m *UserInfo) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

// 根据用户id获取用户销毁时间
type GetUserExpireByIdReq struct {
	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetUserExpireByIdReq) Reset()                    { *m = GetUserExpireByIdReq{} }
func (m *GetUserExpireByIdReq) String() string            { return proto.CompactTextString(m) }
func (*GetUserExpireByIdReq) ProtoMessage()               {}
func (*GetUserExpireByIdReq) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{4} }

func (m *GetUserExpireByIdReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetUserExpireByIdReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 获取用户账号销毁时间返回
type GetUserExpireByIdResult struct {
	Expire    int32     `protobuf:"varint,1,opt,name=expire,proto3" json:"expire,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *GetUserExpireByIdResult) Reset()         { *m = GetUserExpireByIdResult{} }
func (m *GetUserExpireByIdResult) String() string { return proto.CompactTextString(m) }
func (*GetUserExpireByIdResult) ProtoMessage()    {}
func (*GetUserExpireByIdResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{5}
}

func (m *GetUserExpireByIdResult) GetExpire() int32 {
	if m != nil {
		return m.Expire
	}
	return 0
}

func (m *GetUserExpireByIdResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 根据用户电话号码来获取用户信息
type GetUserByphone struct {
	Phone string        `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	Debug *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetUserByphone) Reset()                    { *m = GetUserByphone{} }
func (m *GetUserByphone) String() string            { return proto.CompactTextString(m) }
func (*GetUserByphone) ProtoMessage()               {}
func (*GetUserByphone) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{6} }

func (m *GetUserByphone) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *GetUserByphone) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 获取用户基本信息的返回结果
type GetUserInfoResult struct {
	Uinfo     *UserInfo `protobuf:"bytes,1,opt,name=Uinfo" json:"Uinfo,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *GetUserInfoResult) Reset()                    { *m = GetUserInfoResult{} }
func (m *GetUserInfoResult) String() string            { return proto.CompactTextString(m) }
func (*GetUserInfoResult) ProtoMessage()               {}
func (*GetUserInfoResult) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{7} }

func (m *GetUserInfoResult) GetUinfo() *UserInfo {
	if m != nil {
		return m.Uinfo
	}
	return nil
}

func (m *GetUserInfoResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

type GetUserInfoByIdArrResult struct {
	Uinfo     []*UserInfo `protobuf:"bytes,1,rep,name=Uinfo" json:"Uinfo,omitempty"`
	Errorcode ReErrCode   `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *GetUserInfoByIdArrResult) Reset()         { *m = GetUserInfoByIdArrResult{} }
func (m *GetUserInfoByIdArrResult) String() string { return proto.CompactTextString(m) }
func (*GetUserInfoByIdArrResult) ProtoMessage()    {}
func (*GetUserInfoByIdArrResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{8}
}

func (m *GetUserInfoByIdArrResult) GetUinfo() []*UserInfo {
	if m != nil {
		return m.Uinfo
	}
	return nil
}

func (m *GetUserInfoByIdArrResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 根据用户userName来获取用户基本信息
type GetUserByUsername struct {
	SelfId   int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	Username string        `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Debug    *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetUserByUsername) Reset()                    { *m = GetUserByUsername{} }
func (m *GetUserByUsername) String() string            { return proto.CompactTextString(m) }
func (*GetUserByUsername) ProtoMessage()               {}
func (*GetUserByUsername) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{9} }

func (m *GetUserByUsername) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *GetUserByUsername) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *GetUserByUsername) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 更新用户头像请求
type UpdatePhotoInfoReq struct {
	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Photo  string        `protobuf:"bytes,2,opt,name=photo,proto3" json:"photo,omitempty"`
	KeyId  int64         `protobuf:"varint,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *UpdatePhotoInfoReq) Reset()                    { *m = UpdatePhotoInfoReq{} }
func (m *UpdatePhotoInfoReq) String() string            { return proto.CompactTextString(m) }
func (*UpdatePhotoInfoReq) ProtoMessage()               {}
func (*UpdatePhotoInfoReq) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{10} }

func (m *UpdatePhotoInfoReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdatePhotoInfoReq) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *UpdatePhotoInfoReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *UpdatePhotoInfoReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type GetPhotoInfoReq struct {
	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetPhotoInfoReq) Reset()                    { *m = GetPhotoInfoReq{} }
func (m *GetPhotoInfoReq) String() string            { return proto.CompactTextString(m) }
func (*GetPhotoInfoReq) ProtoMessage()               {}
func (*GetPhotoInfoReq) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{11} }

func (m *GetPhotoInfoReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetPhotoInfoReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 更新用户头像的返回
type UpdateUserPhotoResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *UpdateUserPhotoResult) Reset()         { *m = UpdateUserPhotoResult{} }
func (m *UpdateUserPhotoResult) String() string { return proto.CompactTextString(m) }
func (*UpdateUserPhotoResult) ProtoMessage()    {}
func (*UpdateUserPhotoResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{12}
}

func (m *UpdateUserPhotoResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

type GetUserPhotoResult struct {
	Photo     string    `protobuf:"bytes,1,opt,name=Photo,proto3" json:"Photo,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *GetUserPhotoResult) Reset()                    { *m = GetUserPhotoResult{} }
func (m *GetUserPhotoResult) String() string            { return proto.CompactTextString(m) }
func (*GetUserPhotoResult) ProtoMessage()               {}
func (*GetUserPhotoResult) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{13} }

func (m *GetUserPhotoResult) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *GetUserPhotoResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 更新用户信息
type UpdateUserProfileReq struct {
	UserId    int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Flags     int32         `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	FirstName string        `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string        `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	About     string        `protobuf:"bytes,5,opt,name=about,proto3" json:"about,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug" json:"debug,omitempty"`
}

func (m *UpdateUserProfileReq) Reset()                    { *m = UpdateUserProfileReq{} }
func (m *UpdateUserProfileReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserProfileReq) ProtoMessage()               {}
func (*UpdateUserProfileReq) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{14} }

func (m *UpdateUserProfileReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateUserProfileReq) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *UpdateUserProfileReq) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *UpdateUserProfileReq) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *UpdateUserProfileReq) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *UpdateUserProfileReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 更新用户昵称等的返回结果
type UpdateUserProfileResult struct {
	Uinfo     *UserInfo `protobuf:"bytes,1,opt,name=Uinfo" json:"Uinfo,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *UpdateUserProfileResult) Reset()         { *m = UpdateUserProfileResult{} }
func (m *UpdateUserProfileResult) String() string { return proto.CompactTextString(m) }
func (*UpdateUserProfileResult) ProtoMessage()    {}
func (*UpdateUserProfileResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{15}
}

func (m *UpdateUserProfileResult) GetUinfo() *UserInfo {
	if m != nil {
		return m.Uinfo
	}
	return nil
}

func (m *UpdateUserProfileResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 用户在线状态的更新
type StatusReq struct {
	SelfId    int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	KeyId     int64         `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Status    bool          `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Offline   int32         `protobuf:"varint,4,opt,name=offline,proto3" json:"offline,omitempty"`
	Longitude float64       `protobuf:"fixed64,5,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Latitude  float64       `protobuf:"fixed64,6,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug" json:"debug,omitempty"`
}

func (m *StatusReq) Reset()                    { *m = StatusReq{} }
func (m *StatusReq) String() string            { return proto.CompactTextString(m) }
func (*StatusReq) ProtoMessage()               {}
func (*StatusReq) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{16} }

func (m *StatusReq) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *StatusReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *StatusReq) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *StatusReq) GetOffline() int32 {
	if m != nil {
		return m.Offline
	}
	return 0
}

func (m *StatusReq) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *StatusReq) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *StatusReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 用户在线状态的结果
type StatusResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *StatusResult) Reset()                    { *m = StatusResult{} }
func (m *StatusResult) String() string            { return proto.CompactTextString(m) }
func (*StatusResult) ProtoMessage()               {}
func (*StatusResult) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{17} }

func (m *StatusResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 用户销毁时间的设置
type UpdateExpireReq struct {
	SelfId int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	Expire int32         `protobuf:"varint,2,opt,name=expire,proto3" json:"expire,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *UpdateExpireReq) Reset()                    { *m = UpdateExpireReq{} }
func (m *UpdateExpireReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateExpireReq) ProtoMessage()               {}
func (*UpdateExpireReq) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{18} }

func (m *UpdateExpireReq) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *UpdateExpireReq) GetExpire() int32 {
	if m != nil {
		return m.Expire
	}
	return 0
}

func (m *UpdateExpireReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 设置账号销毁时间的返回结果
type UpdateExpireResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *UpdateExpireResult) Reset()                    { *m = UpdateExpireResult{} }
func (m *UpdateExpireResult) String() string            { return proto.CompactTextString(m) }
func (*UpdateExpireResult) ProtoMessage()               {}
func (*UpdateExpireResult) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{19} }

func (m *UpdateExpireResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 用户dc的迁移
type UserClusterChange struct {
	SelfId    int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	ClusterId int32         `protobuf:"varint,2,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	FromIp    string        `protobuf:"bytes,4,opt,name=from_ip,json=fromIp,proto3" json:"from_ip,omitempty"`
	FromId    int32         `protobuf:"varint,5,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug" json:"debug,omitempty"`
}

func (m *UserClusterChange) Reset()                    { *m = UserClusterChange{} }
func (m *UserClusterChange) String() string            { return proto.CompactTextString(m) }
func (*UserClusterChange) ProtoMessage()               {}
func (*UserClusterChange) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{20} }

func (m *UserClusterChange) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *UserClusterChange) GetClusterId() int32 {
	if m != nil {
		return m.ClusterId
	}
	return 0
}

func (m *UserClusterChange) GetFromIp() string {
	if m != nil {
		return m.FromIp
	}
	return ""
}

func (m *UserClusterChange) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *UserClusterChange) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 用户域的迁移结果
type UserClusterChangeResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *UserClusterChangeResult) Reset()         { *m = UserClusterChangeResult{} }
func (m *UserClusterChangeResult) String() string { return proto.CompactTextString(m) }
func (*UserClusterChangeResult) ProtoMessage()    {}
func (*UserClusterChangeResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{21}
}

func (m *UserClusterChangeResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 更新用户的username的请求
type UpdateuserNameReq struct {
	UserId   int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName string        `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	Debug    *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
	KeyId    int64         `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (m *UpdateuserNameReq) Reset()                    { *m = UpdateuserNameReq{} }
func (m *UpdateuserNameReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateuserNameReq) ProtoMessage()               {}
func (*UpdateuserNameReq) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{22} }

func (m *UpdateuserNameReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateuserNameReq) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *UpdateuserNameReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *UpdateuserNameReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

// 更新用户的username的返回结果
type UpdateuserNameResult struct {
	Uinfo     *UserInfo `protobuf:"bytes,1,opt,name=Uinfo" json:"Uinfo,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *UpdateuserNameResult) Reset()                    { *m = UpdateuserNameResult{} }
func (m *UpdateuserNameResult) String() string            { return proto.CompactTextString(m) }
func (*UpdateuserNameResult) ProtoMessage()               {}
func (*UpdateuserNameResult) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{23} }

func (m *UpdateuserNameResult) GetUinfo() *UserInfo {
	if m != nil {
		return m.Uinfo
	}
	return nil
}

func (m *UpdateuserNameResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 检查电话号码是否已经注册
type CheckPhoneRegisterReq struct {
	Phone string        `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	Debug *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
}

func (m *CheckPhoneRegisterReq) Reset()         { *m = CheckPhoneRegisterReq{} }
func (m *CheckPhoneRegisterReq) String() string { return proto.CompactTextString(m) }
func (*CheckPhoneRegisterReq) ProtoMessage()    {}
func (*CheckPhoneRegisterReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{24}
}

func (m *CheckPhoneRegisterReq) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *CheckPhoneRegisterReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 检查电话号码是否已经注册的返回结果
type CheckPhoneRegisterResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *CheckPhoneRegisterResult) Reset()         { *m = CheckPhoneRegisterResult{} }
func (m *CheckPhoneRegisterResult) String() string { return proto.CompactTextString(m) }
func (*CheckPhoneRegisterResult) ProtoMessage()    {}
func (*CheckPhoneRegisterResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{25}
}

func (m *CheckPhoneRegisterResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 删除账号的请求
type DeleteAccountByIdReq struct {
	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DelId  int32         `protobuf:"varint,2,opt,name=del_id,json=delId,proto3" json:"del_id,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *DeleteAccountByIdReq) Reset()                    { *m = DeleteAccountByIdReq{} }
func (m *DeleteAccountByIdReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteAccountByIdReq) ProtoMessage()               {}
func (*DeleteAccountByIdReq) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{26} }

func (m *DeleteAccountByIdReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DeleteAccountByIdReq) GetDelId() int32 {
	if m != nil {
		return m.DelId
	}
	return 0
}

func (m *DeleteAccountByIdReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 删除账号的返回结果
type DelAccountResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *DelAccountResult) Reset()                    { *m = DelAccountResult{} }
func (m *DelAccountResult) String() string            { return proto.CompactTextString(m) }
func (*DelAccountResult) ProtoMessage()               {}
func (*DelAccountResult) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{27} }

func (m *DelAccountResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 机器人基础信息更改
type BotUpdateInfo struct {
	UserId         int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BotInfoVersion int32         `protobuf:"varint,2,opt,name=bot_info_version,json=botInfoVersion,proto3" json:"bot_info_version,omitempty"`
	BotChatHistory bool          `protobuf:"varint,3,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNoChat      bool          `protobuf:"varint,4,opt,name=bot_no_chat,json=botNoChat,proto3" json:"bot_no_chat,omitempty"`
	Debug          *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *BotUpdateInfo) Reset()                    { *m = BotUpdateInfo{} }
func (m *BotUpdateInfo) String() string            { return proto.CompactTextString(m) }
func (*BotUpdateInfo) ProtoMessage()               {}
func (*BotUpdateInfo) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{28} }

func (m *BotUpdateInfo) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *BotUpdateInfo) GetBotInfoVersion() int32 {
	if m != nil {
		return m.BotInfoVersion
	}
	return 0
}

func (m *BotUpdateInfo) GetBotChatHistory() bool {
	if m != nil {
		return m.BotChatHistory
	}
	return false
}

func (m *BotUpdateInfo) GetBotNoChat() bool {
	if m != nil {
		return m.BotNoChat
	}
	return false
}

func (m *BotUpdateInfo) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 机器人更改信息的返回结果
type BotUpdateInfoResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *BotUpdateInfoResult) Reset()                    { *m = BotUpdateInfoResult{} }
func (m *BotUpdateInfoResult) String() string            { return proto.CompactTextString(m) }
func (*BotUpdateInfoResult) ProtoMessage()               {}
func (*BotUpdateInfoResult) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{29} }

func (m *BotUpdateInfoResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 删除单个联系人的请求
type DelContactReq struct {
	// 联系人的基本信息
	UserId     int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ContactId  int32         `protobuf:"varint,2,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	AccessHash int64         `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	KeyId      int64         `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *DelContactReq) Reset()                    { *m = DelContactReq{} }
func (m *DelContactReq) String() string            { return proto.CompactTextString(m) }
func (*DelContactReq) ProtoMessage()               {}
func (*DelContactReq) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{30} }

func (m *DelContactReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DelContactReq) GetContactId() int32 {
	if m != nil {
		return m.ContactId
	}
	return 0
}

func (m *DelContactReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *DelContactReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *DelContactReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 删除联系人的返回结果
type DelContactResult struct {
	Uinfo     *UserInfo `protobuf:"bytes,1,opt,name=Uinfo" json:"Uinfo,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *DelContactResult) Reset()                    { *m = DelContactResult{} }
func (m *DelContactResult) String() string            { return proto.CompactTextString(m) }
func (*DelContactResult) ProtoMessage()               {}
func (*DelContactResult) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{31} }

func (m *DelContactResult) GetUinfo() *UserInfo {
	if m != nil {
		return m.Uinfo
	}
	return nil
}

func (m *DelContactResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 需要删除联系人的信息
type ContactIdHash struct {
	ContactId  int32 `protobuf:"varint,1,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	AccessHash int64 `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
}

func (m *ContactIdHash) Reset()                    { *m = ContactIdHash{} }
func (m *ContactIdHash) String() string            { return proto.CompactTextString(m) }
func (*ContactIdHash) ProtoMessage()               {}
func (*ContactIdHash) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{32} }

func (m *ContactIdHash) GetContactId() int32 {
	if m != nil {
		return m.ContactId
	}
	return 0
}

func (m *ContactIdHash) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

// 批量删除用户的联系人
type DelContactArrReq struct {
	UserId       int32            `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ContactidArr []*ContactIdHash `protobuf:"bytes,2,rep,name=contactidArr" json:"contactidArr,omitempty"`
	KeyId        int64            `protobuf:"varint,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Debug        *pbcomm.Debug    `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *DelContactArrReq) Reset()                    { *m = DelContactArrReq{} }
func (m *DelContactArrReq) String() string            { return proto.CompactTextString(m) }
func (*DelContactArrReq) ProtoMessage()               {}
func (*DelContactArrReq) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{33} }

func (m *DelContactArrReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DelContactArrReq) GetContactidArr() []*ContactIdHash {
	if m != nil {
		return m.ContactidArr
	}
	return nil
}

func (m *DelContactArrReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *DelContactArrReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 重置user联系人信息
type CmdResetUserContactsReq struct {
	AmdinId     int32  `protobuf:"varint,1,opt,name=amdin_id,json=amdinId,proto3" json:"amdin_id,omitempty"`
	PhoneNumber string `protobuf:"bytes,2,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
}

func (m *CmdResetUserContactsReq) Reset()         { *m = CmdResetUserContactsReq{} }
func (m *CmdResetUserContactsReq) String() string { return proto.CompactTextString(m) }
func (*CmdResetUserContactsReq) ProtoMessage()    {}
func (*CmdResetUserContactsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{34}
}

func (m *CmdResetUserContactsReq) GetAmdinId() int32 {
	if m != nil {
		return m.AmdinId
	}
	return 0
}

func (m *CmdResetUserContactsReq) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

type CmdResetUserContactsResult struct {
	CurrentContactIds []int32 `protobuf:"varint,1,rep,packed,name=current_contact_ids,json=currentContactIds" json:"current_contact_ids,omitempty"`
}

func (m *CmdResetUserContactsResult) Reset()         { *m = CmdResetUserContactsResult{} }
func (m *CmdResetUserContactsResult) String() string { return proto.CompactTextString(m) }
func (*CmdResetUserContactsResult) ProtoMessage()    {}
func (*CmdResetUserContactsResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{35}
}

func (m *CmdResetUserContactsResult) GetCurrentContactIds() []int32 {
	if m != nil {
		return m.CurrentContactIds
	}
	return nil
}

// 批量删除用户的联系人的返回
type DelContactArrResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *DelContactArrResult) Reset()                    { *m = DelContactArrResult{} }
func (m *DelContactArrResult) String() string            { return proto.CompactTextString(m) }
func (*DelContactArrResult) ProtoMessage()               {}
func (*DelContactArrResult) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{36} }

func (m *DelContactArrResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 获取用户联系人列表的请求
type ContatsGetContactsReq struct {
	UserId      int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	KeyId       int64         `protobuf:"varint,2,opt,name=keyId,proto3" json:"keyId,omitempty"`
	Contacthash string        `protobuf:"bytes,3,opt,name=contacthash,proto3" json:"contacthash,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ContatsGetContactsReq) Reset()         { *m = ContatsGetContactsReq{} }
func (m *ContatsGetContactsReq) String() string { return proto.CompactTextString(m) }
func (*ContatsGetContactsReq) ProtoMessage()    {}
func (*ContatsGetContactsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{37}
}

func (m *ContatsGetContactsReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ContatsGetContactsReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *ContatsGetContactsReq) GetContacthash() string {
	if m != nil {
		return m.Contacthash
	}
	return ""
}

func (m *ContatsGetContactsReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 联系人的基本信息
type ContactInfo struct {
	UserId          int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ContactId       int32  `protobuf:"varint,2,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	FirstName       string `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName        string `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	IsSelfContacted bool   `protobuf:"varint,5,opt,name=is_self_contacted,json=isSelfContacted,proto3" json:"is_self_contacted,omitempty"`
	SelfIsContacted bool   `protobuf:"varint,6,opt,name=self_is_contacted,json=selfIsContacted,proto3" json:"self_is_contacted,omitempty"`
	StarMark        bool   `protobuf:"varint,7,opt,name=star_mark,json=starMark,proto3" json:"star_mark,omitempty"`
	HasPhone        bool   `protobuf:"varint,8,opt,name=has_phone,json=hasPhone,proto3" json:"has_phone,omitempty"`
}

func (m *ContactInfo) Reset()                    { *m = ContactInfo{} }
func (m *ContactInfo) String() string            { return proto.CompactTextString(m) }
func (*ContactInfo) ProtoMessage()               {}
func (*ContactInfo) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{38} }

func (m *ContactInfo) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ContactInfo) GetContactId() int32 {
	if m != nil {
		return m.ContactId
	}
	return 0
}

func (m *ContactInfo) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *ContactInfo) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *ContactInfo) GetIsSelfContacted() bool {
	if m != nil {
		return m.IsSelfContacted
	}
	return false
}

func (m *ContactInfo) GetSelfIsContacted() bool {
	if m != nil {
		return m.SelfIsContacted
	}
	return false
}

func (m *ContactInfo) GetStarMark() bool {
	if m != nil {
		return m.StarMark
	}
	return false
}

func (m *ContactInfo) GetHasPhone() bool {
	if m != nil {
		return m.HasPhone
	}
	return false
}

// 用户联系人列表获取的返回
type ContatsGetContactsResult struct {
	ContactArr  []*ContactInfo `protobuf:"bytes,1,rep,name=contactArr" json:"contactArr,omitempty"`
	UserInfoArr []*UserInfo    `protobuf:"bytes,2,rep,name=userInfoArr" json:"userInfoArr,omitempty"`
	Errorcode   ReErrCode      `protobuf:"varint,3,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *ContatsGetContactsResult) Reset()         { *m = ContatsGetContactsResult{} }
func (m *ContatsGetContactsResult) String() string { return proto.CompactTextString(m) }
func (*ContatsGetContactsResult) ProtoMessage()    {}
func (*ContatsGetContactsResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{39}
}

func (m *ContatsGetContactsResult) GetContactArr() []*ContactInfo {
	if m != nil {
		return m.ContactArr
	}
	return nil
}

func (m *ContatsGetContactsResult) GetUserInfoArr() []*UserInfo {
	if m != nil {
		return m.UserInfoArr
	}
	return nil
}

func (m *ContatsGetContactsResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 电话本联系人信息
type PhoneBookContact struct {
	ClientId  int64  `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Phone     string `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
	FirstName string `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
}

func (m *PhoneBookContact) Reset()                    { *m = PhoneBookContact{} }
func (m *PhoneBookContact) String() string            { return proto.CompactTextString(m) }
func (*PhoneBookContact) ProtoMessage()               {}
func (*PhoneBookContact) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{40} }

func (m *PhoneBookContact) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *PhoneBookContact) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *PhoneBookContact) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *PhoneBookContact) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

// 导入\添加联系人的请求包
type ContactsImportPhoneContactsReq struct {
	KeyId           int64               `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId          int32               `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PhoneContactArr []*PhoneBookContact `protobuf:"bytes,3,rep,name=phoneContactArr" json:"phoneContactArr,omitempty"`
	Debug           *pbcomm.Debug       `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ContactsImportPhoneContactsReq) Reset()         { *m = ContactsImportPhoneContactsReq{} }
func (m *ContactsImportPhoneContactsReq) String() string { return proto.CompactTextString(m) }
func (*ContactsImportPhoneContactsReq) ProtoMessage()    {}
func (*ContactsImportPhoneContactsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{41}
}

func (m *ContactsImportPhoneContactsReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *ContactsImportPhoneContactsReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ContactsImportPhoneContactsReq) GetPhoneContactArr() []*PhoneBookContact {
	if m != nil {
		return m.PhoneContactArr
	}
	return nil
}

func (m *ContactsImportPhoneContactsReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 导入联系人详细信息
type ImportContact struct {
	UserId   int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ClientId int64 `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (m *ImportContact) Reset()                    { *m = ImportContact{} }
func (m *ImportContact) String() string            { return proto.CompactTextString(m) }
func (*ImportContact) ProtoMessage()               {}
func (*ImportContact) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{42} }

func (m *ImportContact) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ImportContact) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

type PopularContact struct {
	ClientId  int64 `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Importers int32 `protobuf:"varint,2,opt,name=importers,proto3" json:"importers,omitempty"`
}

func (m *PopularContact) Reset()                    { *m = PopularContact{} }
func (m *PopularContact) String() string            { return proto.CompactTextString(m) }
func (*PopularContact) ProtoMessage()               {}
func (*PopularContact) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{43} }

func (m *PopularContact) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *PopularContact) GetImporters() int32 {
	if m != nil {
		return m.Importers
	}
	return 0
}

// 导入联系人的返回结果
type ContactsImportPhoneContactsResult struct {
	ImContactDetail []*ImportContact  `protobuf:"bytes,1,rep,name=imContactDetail" json:"imContactDetail,omitempty"`
	UserInfoArr     []*UserInfo       `protobuf:"bytes,2,rep,name=userInfoArr" json:"userInfoArr,omitempty"`
	PopuContact     []*PopularContact `protobuf:"bytes,3,rep,name=PopuContact" json:"PopuContact,omitempty"`
	Errorcode       ReErrCode         `protobuf:"varint,4,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *ContactsImportPhoneContactsResult) Reset()         { *m = ContactsImportPhoneContactsResult{} }
func (m *ContactsImportPhoneContactsResult) String() string { return proto.CompactTextString(m) }
func (*ContactsImportPhoneContactsResult) ProtoMessage()    {}
func (*ContactsImportPhoneContactsResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{44}
}

func (m *ContactsImportPhoneContactsResult) GetImContactDetail() []*ImportContact {
	if m != nil {
		return m.ImContactDetail
	}
	return nil
}

func (m *ContactsImportPhoneContactsResult) GetUserInfoArr() []*UserInfo {
	if m != nil {
		return m.UserInfoArr
	}
	return nil
}

func (m *ContactsImportPhoneContactsResult) GetPopuContact() []*PopularContact {
	if m != nil {
		return m.PopuContact
	}
	return nil
}

func (m *ContactsImportPhoneContactsResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 关联用户ｉＤ结构
type AddRelationIdInfo struct {
	UserId     int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RelationId int32         `protobuf:"varint,2,opt,name=relation_id,json=relationId,proto3" json:"relation_id,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *AddRelationIdInfo) Reset()                    { *m = AddRelationIdInfo{} }
func (m *AddRelationIdInfo) String() string            { return proto.CompactTextString(m) }
func (*AddRelationIdInfo) ProtoMessage()               {}
func (*AddRelationIdInfo) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{45} }

func (m *AddRelationIdInfo) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *AddRelationIdInfo) GetRelationId() int32 {
	if m != nil {
		return m.RelationId
	}
	return 0
}

func (m *AddRelationIdInfo) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 解除用户关联的
type DelRelationIdInfo struct {
	UserId     int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RelationId int32         `protobuf:"varint,2,opt,name=relation_id,json=relationId,proto3" json:"relation_id,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *DelRelationIdInfo) Reset()                    { *m = DelRelationIdInfo{} }
func (m *DelRelationIdInfo) String() string            { return proto.CompactTextString(m) }
func (*DelRelationIdInfo) ProtoMessage()               {}
func (*DelRelationIdInfo) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{46} }

func (m *DelRelationIdInfo) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DelRelationIdInfo) GetRelationId() int32 {
	if m != nil {
		return m.RelationId
	}
	return 0
}

func (m *DelRelationIdInfo) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 关联用户用户关系的返回
type AddRelationIdInfoResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *AddRelationIdInfoResult) Reset()         { *m = AddRelationIdInfoResult{} }
func (m *AddRelationIdInfoResult) String() string { return proto.CompactTextString(m) }
func (*AddRelationIdInfoResult) ProtoMessage()    {}
func (*AddRelationIdInfoResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{47}
}

func (m *AddRelationIdInfoResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 解除用户用户关系的返回
type DelRelationIdInfoResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *DelRelationIdInfoResult) Reset()         { *m = DelRelationIdInfoResult{} }
func (m *DelRelationIdInfoResult) String() string { return proto.CompactTextString(m) }
func (*DelRelationIdInfoResult) ProtoMessage()    {}
func (*DelRelationIdInfoResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{48}
}

func (m *DelRelationIdInfoResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 拉黑用户的请求
type BlockeduserReq struct {
	UserId     int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BlockedId  int32         `protobuf:"varint,2,opt,name=blocked_id,json=blockedId,proto3" json:"blocked_id,omitempty"`
	AccessHash int64         `protobuf:"varint,3,opt,name=Access_hash,json=AccessHash,proto3" json:"Access_hash,omitempty"`
	KeyId      int64         `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *BlockeduserReq) Reset()                    { *m = BlockeduserReq{} }
func (m *BlockeduserReq) String() string            { return proto.CompactTextString(m) }
func (*BlockeduserReq) ProtoMessage()               {}
func (*BlockeduserReq) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{49} }

func (m *BlockeduserReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *BlockeduserReq) GetBlockedId() int32 {
	if m != nil {
		return m.BlockedId
	}
	return 0
}

func (m *BlockeduserReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *BlockeduserReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *BlockeduserReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 拉黑用户的返回
type BlockeduserResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *BlockeduserResult) Reset()                    { *m = BlockeduserResult{} }
func (m *BlockeduserResult) String() string            { return proto.CompactTextString(m) }
func (*BlockeduserResult) ProtoMessage()               {}
func (*BlockeduserResult) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{50} }

func (m *BlockeduserResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 将用户从黑明单中移除的请求
type ContactUnblockedReq struct {
	UserId     int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BlockedId  int32         `protobuf:"varint,2,opt,name=blocked_id,json=blockedId,proto3" json:"blocked_id,omitempty"`
	AccessHash int64         `protobuf:"varint,3,opt,name=Access_hash,json=AccessHash,proto3" json:"Access_hash,omitempty"`
	KeyId      int64         `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *ContactUnblockedReq) Reset()                    { *m = ContactUnblockedReq{} }
func (m *ContactUnblockedReq) String() string            { return proto.CompactTextString(m) }
func (*ContactUnblockedReq) ProtoMessage()               {}
func (*ContactUnblockedReq) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{51} }

func (m *ContactUnblockedReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ContactUnblockedReq) GetBlockedId() int32 {
	if m != nil {
		return m.BlockedId
	}
	return 0
}

func (m *ContactUnblockedReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ContactUnblockedReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *ContactUnblockedReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 获取黑明单列表
type ContactsGetBlockedReq struct {
	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *ContactsGetBlockedReq) Reset()         { *m = ContactsGetBlockedReq{} }
func (m *ContactsGetBlockedReq) String() string { return proto.CompactTextString(m) }
func (*ContactsGetBlockedReq) ProtoMessage()    {}
func (*ContactsGetBlockedReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{52}
}

func (m *ContactsGetBlockedReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ContactsGetBlockedReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 黑名单用户的信息
type Blockeduser struct {
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Date   int32 `protobuf:"varint,2,opt,name=date,proto3" json:"date,omitempty"`
}

func (m *Blockeduser) Reset()                    { *m = Blockeduser{} }
func (m *Blockeduser) String() string            { return proto.CompactTextString(m) }
func (*Blockeduser) ProtoMessage()               {}
func (*Blockeduser) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{53} }

func (m *Blockeduser) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Blockeduser) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

// 获取黑明单列表的返回
type ContactsGetBlockedResult struct {
	Blockeduser []int32     `protobuf:"varint,1,rep,packed,name=blockeduser" json:"blockeduser,omitempty"`
	InfoArr     []*UserInfo `protobuf:"bytes,2,rep,name=InfoArr" json:"InfoArr,omitempty"`
	Errorcode   ReErrCode   `protobuf:"varint,3,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *ContactsGetBlockedResult) Reset()         { *m = ContactsGetBlockedResult{} }
func (m *ContactsGetBlockedResult) String() string { return proto.CompactTextString(m) }
func (*ContactsGetBlockedResult) ProtoMessage()    {}
func (*ContactsGetBlockedResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{54}
}

func (m *ContactsGetBlockedResult) GetBlockeduser() []int32 {
	if m != nil {
		return m.Blockeduser
	}
	return nil
}

func (m *ContactsGetBlockedResult) GetInfoArr() []*UserInfo {
	if m != nil {
		return m.InfoArr
	}
	return nil
}

func (m *ContactsGetBlockedResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 系统白名单的基础信息
type SystemWhiteUser struct {
	UserId  int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Level   int32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Proby   int32 `protobuf:"varint,3,opt,name=proby,proto3" json:"proby,omitempty"`
	IsWhite bool  `protobuf:"varint,4,opt,name=is_white,json=isWhite,proto3" json:"is_white,omitempty"`
}

func (m *SystemWhiteUser) Reset()                    { *m = SystemWhiteUser{} }
func (m *SystemWhiteUser) String() string            { return proto.CompactTextString(m) }
func (*SystemWhiteUser) ProtoMessage()               {}
func (*SystemWhiteUser) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{55} }

func (m *SystemWhiteUser) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SystemWhiteUser) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *SystemWhiteUser) GetProby() int32 {
	if m != nil {
		return m.Proby
	}
	return 0
}

func (m *SystemWhiteUser) GetIsWhite() bool {
	if m != nil {
		return m.IsWhite
	}
	return false
}

// 存储系统白名单的请求
type StoreSysWhiteUserReq struct {
	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Level  int32         `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Proby  int32         `protobuf:"varint,3,opt,name=proby,proto3" json:"proby,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *StoreSysWhiteUserReq) Reset()                    { *m = StoreSysWhiteUserReq{} }
func (m *StoreSysWhiteUserReq) String() string            { return proto.CompactTextString(m) }
func (*StoreSysWhiteUserReq) ProtoMessage()               {}
func (*StoreSysWhiteUserReq) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{56} }

func (m *StoreSysWhiteUserReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *StoreSysWhiteUserReq) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *StoreSysWhiteUserReq) GetProby() int32 {
	if m != nil {
		return m.Proby
	}
	return 0
}

func (m *StoreSysWhiteUserReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 存储系统白名单的返回结果
type StoreSysWhiteUserResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *StoreSysWhiteUserResult) Reset()         { *m = StoreSysWhiteUserResult{} }
func (m *StoreSysWhiteUserResult) String() string { return proto.CompactTextString(m) }
func (*StoreSysWhiteUserResult) ProtoMessage()    {}
func (*StoreSysWhiteUserResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{57}
}

func (m *StoreSysWhiteUserResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 更新用户系统白名单的请求
type UpdateSystemWhiteUserLevelReq struct {
	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Level  int32         `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Proby  int32         `protobuf:"varint,3,opt,name=proby,proto3" json:"proby,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *UpdateSystemWhiteUserLevelReq) Reset()         { *m = UpdateSystemWhiteUserLevelReq{} }
func (m *UpdateSystemWhiteUserLevelReq) String() string { return proto.CompactTextString(m) }
func (*UpdateSystemWhiteUserLevelReq) ProtoMessage()    {}
func (*UpdateSystemWhiteUserLevelReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{58}
}

func (m *UpdateSystemWhiteUserLevelReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateSystemWhiteUserLevelReq) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *UpdateSystemWhiteUserLevelReq) GetProby() int32 {
	if m != nil {
		return m.Proby
	}
	return 0
}

func (m *UpdateSystemWhiteUserLevelReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 更新用户系统白名单的返回结果
type UpdateSystemWhiteUserLevelResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *UpdateSystemWhiteUserLevelResult) Reset()         { *m = UpdateSystemWhiteUserLevelResult{} }
func (m *UpdateSystemWhiteUserLevelResult) String() string { return proto.CompactTextString(m) }
func (*UpdateSystemWhiteUserLevelResult) ProtoMessage()    {}
func (*UpdateSystemWhiteUserLevelResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{59}
}

func (m *UpdateSystemWhiteUserLevelResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 获取系统白名单权限
type GetSysWhiteUserReq struct {
	UserId int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetSysWhiteUserReq) Reset()                    { *m = GetSysWhiteUserReq{} }
func (m *GetSysWhiteUserReq) String() string            { return proto.CompactTextString(m) }
func (*GetSysWhiteUserReq) ProtoMessage()               {}
func (*GetSysWhiteUserReq) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{60} }

func (m *GetSysWhiteUserReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetSysWhiteUserReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 获取系统白名单权限结果
type GetSysWhiteUserResult struct {
	SysWhiteInfo *SystemWhiteUser `protobuf:"bytes,1,opt,name=sysWhiteInfo" json:"sysWhiteInfo,omitempty"`
	Errorcode    ReErrCode        `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *GetSysWhiteUserResult) Reset()         { *m = GetSysWhiteUserResult{} }
func (m *GetSysWhiteUserResult) String() string { return proto.CompactTextString(m) }
func (*GetSysWhiteUserResult) ProtoMessage()    {}
func (*GetSysWhiteUserResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{61}
}

func (m *GetSysWhiteUserResult) GetSysWhiteInfo() *SystemWhiteUser {
	if m != nil {
		return m.SysWhiteInfo
	}
	return nil
}

func (m *GetSysWhiteUserResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 获取系统所有白名单请求
type GetSysWhiteUserArrReq struct {
	Debug *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetSysWhiteUserArrReq) Reset()         { *m = GetSysWhiteUserArrReq{} }
func (m *GetSysWhiteUserArrReq) String() string { return proto.CompactTextString(m) }
func (*GetSysWhiteUserArrReq) ProtoMessage()    {}
func (*GetSysWhiteUserArrReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{62}
}

func (m *GetSysWhiteUserArrReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 获取系统所有白名单返回
type GetSysWhiteUserArrResult struct {
	SysWhiteInfoArr []*SystemWhiteUser `protobuf:"bytes,1,rep,name=sysWhiteInfoArr" json:"sysWhiteInfoArr,omitempty"`
	Errorcode       ReErrCode          `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *GetSysWhiteUserArrResult) Reset()         { *m = GetSysWhiteUserArrResult{} }
func (m *GetSysWhiteUserArrResult) String() string { return proto.CompactTextString(m) }
func (*GetSysWhiteUserArrResult) ProtoMessage()    {}
func (*GetSysWhiteUserArrResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{63}
}

func (m *GetSysWhiteUserArrResult) GetSysWhiteInfoArr() []*SystemWhiteUser {
	if m != nil {
		return m.SysWhiteInfoArr
	}
	return nil
}

func (m *GetSysWhiteUserArrResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 删除系统白名单用户的请求
type DelSysWhiteUserReq struct {
	UserId  int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	ProUser int32         `protobuf:"varint,2,opt,name=ProUser,proto3" json:"ProUser,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *DelSysWhiteUserReq) Reset()                    { *m = DelSysWhiteUserReq{} }
func (m *DelSysWhiteUserReq) String() string            { return proto.CompactTextString(m) }
func (*DelSysWhiteUserReq) ProtoMessage()               {}
func (*DelSysWhiteUserReq) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{64} }

func (m *DelSysWhiteUserReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DelSysWhiteUserReq) GetProUser() int32 {
	if m != nil {
		return m.ProUser
	}
	return 0
}

func (m *DelSysWhiteUserReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 删除系统白名单用户的返回结果
type DelSysWhiteUserResult struct {
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *DelSysWhiteUserResult) Reset()         { *m = DelSysWhiteUserResult{} }
func (m *DelSysWhiteUserResult) String() string { return proto.CompactTextString(m) }
func (*DelSysWhiteUserResult) ProtoMessage()    {}
func (*DelSysWhiteUserResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{65}
}

func (m *DelSysWhiteUserResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// user的ＤＣ的信息
type UserDc struct {
	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DcId   int32         `protobuf:"varint,2,opt,name=dc_id,json=dcId,proto3" json:"dc_id,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *UserDc) Reset()                    { *m = UserDc{} }
func (m *UserDc) String() string            { return proto.CompactTextString(m) }
func (*UserDc) ProtoMessage()               {}
func (*UserDc) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{66} }

func (m *UserDc) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserDc) GetDcId() int32 {
	if m != nil {
		return m.DcId
	}
	return 0
}

func (m *UserDc) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 拉取所有用户的DC的请求
type GetAllDcReq struct {
	Debug *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetAllDcReq) Reset()                    { *m = GetAllDcReq{} }
func (m *GetAllDcReq) String() string            { return proto.CompactTextString(m) }
func (*GetAllDcReq) ProtoMessage()               {}
func (*GetAllDcReq) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{67} }

func (m *GetAllDcReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 设置隐私选项的接口的请求
type SetPrivacyReq struct {
	UserId         int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PrivacyType    int32         `protobuf:"varint,2,opt,name=privacy_type,json=privacyType,proto3" json:"privacy_type,omitempty"`
	Range          int32         `protobuf:"varint,3,opt,name=range,proto3" json:"range,omitempty"`
	AlwaysDisallow []int32       `protobuf:"varint,4,rep,packed,name=always_disallow,json=alwaysDisallow" json:"always_disallow,omitempty"`
	AlwaysAllow    []int32       `protobuf:"varint,5,rep,packed,name=always_allow,json=alwaysAllow" json:"always_allow,omitempty"`
	Ip             string        `protobuf:"bytes,6,opt,name=ip,proto3" json:"ip,omitempty"`
	KeyId          int64         `protobuf:"varint,7,opt,name=keyId,proto3" json:"keyId,omitempty"`
	SessionId      int64         `protobuf:"varint,8,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Phone          string        `protobuf:"bytes,9,opt,name=phone,proto3" json:"phone,omitempty"`
	Debug          *pbcomm.Debug `protobuf:"bytes,10,opt,name=debug" json:"debug,omitempty"`
}

func (m *SetPrivacyReq) Reset()                    { *m = SetPrivacyReq{} }
func (m *SetPrivacyReq) String() string            { return proto.CompactTextString(m) }
func (*SetPrivacyReq) ProtoMessage()               {}
func (*SetPrivacyReq) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{68} }

func (m *SetPrivacyReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SetPrivacyReq) GetPrivacyType() int32 {
	if m != nil {
		return m.PrivacyType
	}
	return 0
}

func (m *SetPrivacyReq) GetRange() int32 {
	if m != nil {
		return m.Range
	}
	return 0
}

func (m *SetPrivacyReq) GetAlwaysDisallow() []int32 {
	if m != nil {
		return m.AlwaysDisallow
	}
	return nil
}

func (m *SetPrivacyReq) GetAlwaysAllow() []int32 {
	if m != nil {
		return m.AlwaysAllow
	}
	return nil
}

func (m *SetPrivacyReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *SetPrivacyReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *SetPrivacyReq) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *SetPrivacyReq) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *SetPrivacyReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 设置隐私选项的接口的返回
type SetPrivacyResult struct {
	UinfoArr  []*UserInfo `protobuf:"bytes,1,rep,name=UinfoArr" json:"UinfoArr,omitempty"`
	Errorcode ReErrCode   `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *SetPrivacyResult) Reset()                    { *m = SetPrivacyResult{} }
func (m *SetPrivacyResult) String() string            { return proto.CompactTextString(m) }
func (*SetPrivacyResult) ProtoMessage()               {}
func (*SetPrivacyResult) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{69} }

func (m *SetPrivacyResult) GetUinfoArr() []*UserInfo {
	if m != nil {
		return m.UinfoArr
	}
	return nil
}

func (m *SetPrivacyResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 获取隐私选项的接口
type GetPrivacyReq struct {
	UserId      int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PrivacyType int32         `protobuf:"varint,2,opt,name=privacy_type,json=privacyType,proto3" json:"privacy_type,omitempty"`
	KeyId       int64         `protobuf:"varint,3,opt,name=keyId,proto3" json:"keyId,omitempty"`
	SessionId   int64         `protobuf:"varint,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Ip          string        `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip,omitempty"`
	Phone       string        `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetPrivacyReq) Reset()                    { *m = GetPrivacyReq{} }
func (m *GetPrivacyReq) String() string            { return proto.CompactTextString(m) }
func (*GetPrivacyReq) ProtoMessage()               {}
func (*GetPrivacyReq) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{70} }

func (m *GetPrivacyReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetPrivacyReq) GetPrivacyType() int32 {
	if m != nil {
		return m.PrivacyType
	}
	return 0
}

func (m *GetPrivacyReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *GetPrivacyReq) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *GetPrivacyReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *GetPrivacyReq) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *GetPrivacyReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 检查相应的隐私设置是否被允许的请求接口
type CheckPrivacyReq struct {
	SelfId      int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	UserId      int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PrivacyType int32         `protobuf:"varint,3,opt,name=privacy_type,json=privacyType,proto3" json:"privacy_type,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *CheckPrivacyReq) Reset()                    { *m = CheckPrivacyReq{} }
func (m *CheckPrivacyReq) String() string            { return proto.CompactTextString(m) }
func (*CheckPrivacyReq) ProtoMessage()               {}
func (*CheckPrivacyReq) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{71} }

func (m *CheckPrivacyReq) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *CheckPrivacyReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CheckPrivacyReq) GetPrivacyType() int32 {
	if m != nil {
		return m.PrivacyType
	}
	return 0
}

func (m *CheckPrivacyReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 检查相应的隐私设置是否被允许的请求返回
type CheckPrivacyResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *CheckPrivacyResult) Reset()                    { *m = CheckPrivacyResult{} }
func (m *CheckPrivacyResult) String() string            { return proto.CompactTextString(m) }
func (*CheckPrivacyResult) ProtoMessage()               {}
func (*CheckPrivacyResult) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{72} }

func (m *CheckPrivacyResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 隐私选项获取的结果
type GetPrivacyResult struct {
	Range          int32       `protobuf:"varint,1,opt,name=range,proto3" json:"range,omitempty"`
	AlwaysDisallow []int32     `protobuf:"varint,2,rep,packed,name=always_disallow,json=alwaysDisallow" json:"always_disallow,omitempty"`
	AlwaysAllow    []int32     `protobuf:"varint,3,rep,packed,name=always_allow,json=alwaysAllow" json:"always_allow,omitempty"`
	UserInfos      []*UserInfo `protobuf:"bytes,4,rep,name=userInfos" json:"userInfos,omitempty"`
	Errorcode      ReErrCode   `protobuf:"varint,5,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *GetPrivacyResult) Reset()                    { *m = GetPrivacyResult{} }
func (m *GetPrivacyResult) String() string            { return proto.CompactTextString(m) }
func (*GetPrivacyResult) ProtoMessage()               {}
func (*GetPrivacyResult) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{73} }

func (m *GetPrivacyResult) GetRange() int32 {
	if m != nil {
		return m.Range
	}
	return 0
}

func (m *GetPrivacyResult) GetAlwaysDisallow() []int32 {
	if m != nil {
		return m.AlwaysDisallow
	}
	return nil
}

func (m *GetPrivacyResult) GetAlwaysAllow() []int32 {
	if m != nil {
		return m.AlwaysAllow
	}
	return nil
}

func (m *GetPrivacyResult) GetUserInfos() []*UserInfo {
	if m != nil {
		return m.UserInfos
	}
	return nil
}

func (m *GetPrivacyResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 存储sticker 集合概要的请求参数
type StoreShopStickerSetReq struct {
	AccessHash int64         `protobuf:"varint,1,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Free       bool          `protobuf:"varint,2,opt,name=free,proto3" json:"free,omitempty"`
	Official   bool          `protobuf:"varint,3,opt,name=official,proto3" json:"official,omitempty"`
	Masks      bool          `protobuf:"varint,4,opt,name=masks,proto3" json:"masks,omitempty"`
	Title      string        `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	ShortName  string        `protobuf:"bytes,6,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Count      int32         `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`
	Hash       int64         `protobuf:"varint,8,opt,name=hash,proto3" json:"hash,omitempty"`
	Emoticon   string        `protobuf:"bytes,9,opt,name=emoticon,proto3" json:"emoticon,omitempty"`
	Documents  []int32       `protobuf:"varint,10,rep,packed,name=documents" json:"documents,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,11,opt,name=debug" json:"debug,omitempty"`
	UserId     int32         `protobuf:"varint,12,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *StoreShopStickerSetReq) Reset()         { *m = StoreShopStickerSetReq{} }
func (m *StoreShopStickerSetReq) String() string { return proto.CompactTextString(m) }
func (*StoreShopStickerSetReq) ProtoMessage()    {}
func (*StoreShopStickerSetReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{74}
}

func (m *StoreShopStickerSetReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *StoreShopStickerSetReq) GetFree() bool {
	if m != nil {
		return m.Free
	}
	return false
}

func (m *StoreShopStickerSetReq) GetOfficial() bool {
	if m != nil {
		return m.Official
	}
	return false
}

func (m *StoreShopStickerSetReq) GetMasks() bool {
	if m != nil {
		return m.Masks
	}
	return false
}

func (m *StoreShopStickerSetReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *StoreShopStickerSetReq) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *StoreShopStickerSetReq) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *StoreShopStickerSetReq) GetHash() int64 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *StoreShopStickerSetReq) GetEmoticon() string {
	if m != nil {
		return m.Emoticon
	}
	return ""
}

func (m *StoreShopStickerSetReq) GetDocuments() []int32 {
	if m != nil {
		return m.Documents
	}
	return nil
}

func (m *StoreShopStickerSetReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *StoreShopStickerSetReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// 存储sticker 集合概要的返回
type StoreShopStickerSetResult struct {
	Id        int32     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *StoreShopStickerSetResult) Reset()         { *m = StoreShopStickerSetResult{} }
func (m *StoreShopStickerSetResult) String() string { return proto.CompactTextString(m) }
func (*StoreShopStickerSetResult) ProtoMessage()    {}
func (*StoreShopStickerSetResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{75}
}

func (m *StoreShopStickerSetResult) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *StoreShopStickerSetResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 存储sticker 集合概要 Documents请求
type StoreShopStickerSetDocumentsReq struct {
	Id        int32         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Documents []int32       `protobuf:"varint,2,rep,packed,name=documents" json:"documents,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *StoreShopStickerSetDocumentsReq) Reset()         { *m = StoreShopStickerSetDocumentsReq{} }
func (m *StoreShopStickerSetDocumentsReq) String() string { return proto.CompactTextString(m) }
func (*StoreShopStickerSetDocumentsReq) ProtoMessage()    {}
func (*StoreShopStickerSetDocumentsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{76}
}

func (m *StoreShopStickerSetDocumentsReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *StoreShopStickerSetDocumentsReq) GetDocuments() []int32 {
	if m != nil {
		return m.Documents
	}
	return nil
}

func (m *StoreShopStickerSetDocumentsReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 存储sticker 集合概要 Documents返回结果
type StoreShopStickerSetDocumentsResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *StoreShopStickerSetDocumentsResult) Reset()         { *m = StoreShopStickerSetDocumentsResult{} }
func (m *StoreShopStickerSetDocumentsResult) String() string { return proto.CompactTextString(m) }
func (*StoreShopStickerSetDocumentsResult) ProtoMessage()    {}
func (*StoreShopStickerSetDocumentsResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{77}
}

func (m *StoreShopStickerSetDocumentsResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 删除sticker商城的请求
type DeleteStickerSetReq struct {
	StickerId int32         `protobuf:"varint,1,opt,name=stickerId,proto3" json:"stickerId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
	UserId    int32         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *DeleteStickerSetReq) Reset()                    { *m = DeleteStickerSetReq{} }
func (m *DeleteStickerSetReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteStickerSetReq) ProtoMessage()               {}
func (*DeleteStickerSetReq) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{78} }

func (m *DeleteStickerSetReq) GetStickerId() int32 {
	if m != nil {
		return m.StickerId
	}
	return 0
}

func (m *DeleteStickerSetReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *DeleteStickerSetReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// 删除sticker商城的返回
type DeleteStickerSetResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *DeleteStickerSetResult) Reset()         { *m = DeleteStickerSetResult{} }
func (m *DeleteStickerSetResult) String() string { return proto.CompactTextString(m) }
func (*DeleteStickerSetResult) ProtoMessage()    {}
func (*DeleteStickerSetResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{79}
}

func (m *DeleteStickerSetResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// sticker set 的基础信息
type StickerSetInfo struct {
	Id         int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AccessHash int64   `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Free       bool    `protobuf:"varint,3,opt,name=free,proto3" json:"free,omitempty"`
	Official   bool    `protobuf:"varint,4,opt,name=official,proto3" json:"official,omitempty"`
	Masks      bool    `protobuf:"varint,5,opt,name=masks,proto3" json:"masks,omitempty"`
	Title      string  `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	ShortName  string  `protobuf:"bytes,7,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Count      int32   `protobuf:"varint,8,opt,name=count,proto3" json:"count,omitempty"`
	Hash       int64   `protobuf:"varint,9,opt,name=hash,proto3" json:"hash,omitempty"`
	Emoticon   string  `protobuf:"bytes,10,opt,name=emoticon,proto3" json:"emoticon,omitempty"`
	Documents  []int32 `protobuf:"varint,11,rep,packed,name=documents" json:"documents,omitempty"`
}

func (m *StickerSetInfo) Reset()                    { *m = StickerSetInfo{} }
func (m *StickerSetInfo) String() string            { return proto.CompactTextString(m) }
func (*StickerSetInfo) ProtoMessage()               {}
func (*StickerSetInfo) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{80} }

func (m *StickerSetInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *StickerSetInfo) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *StickerSetInfo) GetFree() bool {
	if m != nil {
		return m.Free
	}
	return false
}

func (m *StickerSetInfo) GetOfficial() bool {
	if m != nil {
		return m.Official
	}
	return false
}

func (m *StickerSetInfo) GetMasks() bool {
	if m != nil {
		return m.Masks
	}
	return false
}

func (m *StickerSetInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *StickerSetInfo) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *StickerSetInfo) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *StickerSetInfo) GetHash() int64 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *StickerSetInfo) GetEmoticon() string {
	if m != nil {
		return m.Emoticon
	}
	return ""
}

func (m *StickerSetInfo) GetDocuments() []int32 {
	if m != nil {
		return m.Documents
	}
	return nil
}

// 获取指定的sticker集合的请求
type GetStickerSetInfoReq struct {
	Id        int32         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ShortName string        `protobuf:"bytes,2,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	IsId      bool          `protobuf:"varint,3,opt,name=is_id,json=isId,proto3" json:"is_id,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetStickerSetInfoReq) Reset()                    { *m = GetStickerSetInfoReq{} }
func (m *GetStickerSetInfoReq) String() string            { return proto.CompactTextString(m) }
func (*GetStickerSetInfoReq) ProtoMessage()               {}
func (*GetStickerSetInfoReq) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{81} }

func (m *GetStickerSetInfoReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetStickerSetInfoReq) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *GetStickerSetInfoReq) GetIsId() bool {
	if m != nil {
		return m.IsId
	}
	return false
}

func (m *GetStickerSetInfoReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// //获取指定的sticker集合的返回
type GetStickerSetInfoResult struct {
	StickerSetInfo *StickerSetInfo `protobuf:"bytes,1,opt,name=stickerSetInfo" json:"stickerSetInfo,omitempty"`
	Errorcode      ReErrCode       `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *GetStickerSetInfoResult) Reset()         { *m = GetStickerSetInfoResult{} }
func (m *GetStickerSetInfoResult) String() string { return proto.CompactTextString(m) }
func (*GetStickerSetInfoResult) ProtoMessage()    {}
func (*GetStickerSetInfoResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{82}
}

func (m *GetStickerSetInfoResult) GetStickerSetInfo() *StickerSetInfo {
	if m != nil {
		return m.StickerSetInfo
	}
	return nil
}

func (m *GetStickerSetInfoResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// sticker集合里面具体内容
// 存储单个sticker内容请求
type StickerPackDocumentBase struct {
	AttributesStikerSetId         int64  `protobuf:"varint,1,opt,name=attributes_stiker_set_id,json=attributesStikerSetId,proto3" json:"attributes_stiker_set_id,omitempty"`
	DocumentId                    uint64 `protobuf:"varint,2,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	AccessHash                    int64  `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	MimeType                      string `protobuf:"bytes,4,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	Size_                         int32  `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	Thumb                         string `protobuf:"bytes,6,opt,name=thumb,proto3" json:"thumb,omitempty"`
	DcId                          int32  `protobuf:"varint,7,opt,name=dc_id,json=dcId,proto3" json:"dc_id,omitempty"`
	Date                          int32  `protobuf:"varint,8,opt,name=date,proto3" json:"date,omitempty"`
	AttributesImageSizeW          int32  `protobuf:"varint,9,opt,name=attributes_image_size_w,json=attributesImageSizeW,proto3" json:"attributes_image_size_w,omitempty"`
	AttributesImageSizeH          int32  `protobuf:"varint,10,opt,name=attributes_image_size_h,json=attributesImageSizeH,proto3" json:"attributes_image_size_h,omitempty"`
	AttributesStikerAlt           string `protobuf:"bytes,11,opt,name=attributes_stiker_alt,json=attributesStikerAlt,proto3" json:"attributes_stiker_alt,omitempty"`
	AttributesStikerSetAccessHash int64  `protobuf:"varint,12,opt,name=attributes_stiker_set_access_hash,json=attributesStikerSetAccessHash,proto3" json:"attributes_stiker_set_access_hash,omitempty"`
	AttributesFileName            string `protobuf:"bytes,13,opt,name=attributes_file_name,json=attributesFileName,proto3" json:"attributes_file_name,omitempty"`
}

func (m *StickerPackDocumentBase) Reset()         { *m = StickerPackDocumentBase{} }
func (m *StickerPackDocumentBase) String() string { return proto.CompactTextString(m) }
func (*StickerPackDocumentBase) ProtoMessage()    {}
func (*StickerPackDocumentBase) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{83}
}

func (m *StickerPackDocumentBase) GetAttributesStikerSetId() int64 {
	if m != nil {
		return m.AttributesStikerSetId
	}
	return 0
}

func (m *StickerPackDocumentBase) GetDocumentId() uint64 {
	if m != nil {
		return m.DocumentId
	}
	return 0
}

func (m *StickerPackDocumentBase) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *StickerPackDocumentBase) GetMimeType() string {
	if m != nil {
		return m.MimeType
	}
	return ""
}

func (m *StickerPackDocumentBase) GetSize_() int32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *StickerPackDocumentBase) GetThumb() string {
	if m != nil {
		return m.Thumb
	}
	return ""
}

func (m *StickerPackDocumentBase) GetDcId() int32 {
	if m != nil {
		return m.DcId
	}
	return 0
}

func (m *StickerPackDocumentBase) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *StickerPackDocumentBase) GetAttributesImageSizeW() int32 {
	if m != nil {
		return m.AttributesImageSizeW
	}
	return 0
}

func (m *StickerPackDocumentBase) GetAttributesImageSizeH() int32 {
	if m != nil {
		return m.AttributesImageSizeH
	}
	return 0
}

func (m *StickerPackDocumentBase) GetAttributesStikerAlt() string {
	if m != nil {
		return m.AttributesStikerAlt
	}
	return ""
}

func (m *StickerPackDocumentBase) GetAttributesStikerSetAccessHash() int64 {
	if m != nil {
		return m.AttributesStikerSetAccessHash
	}
	return 0
}

func (m *StickerPackDocumentBase) GetAttributesFileName() string {
	if m != nil {
		return m.AttributesFileName
	}
	return ""
}

type StickerPackDocumentInfo struct {
	Id       int32                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	InfoBase *StickerPackDocumentBase `protobuf:"bytes,2,opt,name=infoBase" json:"infoBase,omitempty"`
}

func (m *StickerPackDocumentInfo) Reset()         { *m = StickerPackDocumentInfo{} }
func (m *StickerPackDocumentInfo) String() string { return proto.CompactTextString(m) }
func (*StickerPackDocumentInfo) ProtoMessage()    {}
func (*StickerPackDocumentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{84}
}

func (m *StickerPackDocumentInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *StickerPackDocumentInfo) GetInfoBase() *StickerPackDocumentBase {
	if m != nil {
		return m.InfoBase
	}
	return nil
}

// 存储sticker文档的请求
type StoreStickerPackDcReq struct {
	Stickpackbase *StickerPackDocumentBase `protobuf:"bytes,1,opt,name=stickpackbase" json:"stickpackbase,omitempty"`
	Debug         *pbcomm.Debug            `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
}

func (m *StoreStickerPackDcReq) Reset()         { *m = StoreStickerPackDcReq{} }
func (m *StoreStickerPackDcReq) String() string { return proto.CompactTextString(m) }
func (*StoreStickerPackDcReq) ProtoMessage()    {}
func (*StoreStickerPackDcReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{85}
}

func (m *StoreStickerPackDcReq) GetStickpackbase() *StickerPackDocumentBase {
	if m != nil {
		return m.Stickpackbase
	}
	return nil
}

func (m *StoreStickerPackDcReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 存储sticker文档的返回
type StoreStickerPackDcResult struct {
	Id        int32     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *StoreStickerPackDcResult) Reset()         { *m = StoreStickerPackDcResult{} }
func (m *StoreStickerPackDcResult) String() string { return proto.CompactTextString(m) }
func (*StoreStickerPackDcResult) ProtoMessage()    {}
func (*StoreStickerPackDcResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{86}
}

func (m *StoreStickerPackDcResult) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *StoreStickerPackDcResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 批量导入sticker的请求
type StoreStickerPackDcArrReq struct {
	StPDB []*StickerPackDocumentBase `protobuf:"bytes,1,rep,name=StPDB" json:"StPDB,omitempty"`
	Debug *pbcomm.Debug              `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
}

func (m *StoreStickerPackDcArrReq) Reset()         { *m = StoreStickerPackDcArrReq{} }
func (m *StoreStickerPackDcArrReq) String() string { return proto.CompactTextString(m) }
func (*StoreStickerPackDcArrReq) ProtoMessage()    {}
func (*StoreStickerPackDcArrReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{87}
}

func (m *StoreStickerPackDcArrReq) GetStPDB() []*StickerPackDocumentBase {
	if m != nil {
		return m.StPDB
	}
	return nil
}

func (m *StoreStickerPackDcArrReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 批量导入sticker的返回
type StoreStickerPackDcArrResult struct {
	IdArr     []int32   `protobuf:"varint,1,rep,packed,name=idArr" json:"idArr,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *StoreStickerPackDcArrResult) Reset()         { *m = StoreStickerPackDcArrResult{} }
func (m *StoreStickerPackDcArrResult) String() string { return proto.CompactTextString(m) }
func (*StoreStickerPackDcArrResult) ProtoMessage()    {}
func (*StoreStickerPackDcArrResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{88}
}

func (m *StoreStickerPackDcArrResult) GetIdArr() []int32 {
	if m != nil {
		return m.IdArr
	}
	return nil
}

func (m *StoreStickerPackDcArrResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 获取一个sticker下面的所有贴图信息的请求
type GetStickerSetPackDcInfosReq struct {
	Id    int32         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Debug *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetStickerSetPackDcInfosReq) Reset()         { *m = GetStickerSetPackDcInfosReq{} }
func (m *GetStickerSetPackDcInfosReq) String() string { return proto.CompactTextString(m) }
func (*GetStickerSetPackDcInfosReq) ProtoMessage()    {}
func (*GetStickerSetPackDcInfosReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{89}
}

func (m *GetStickerSetPackDcInfosReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetStickerSetPackDcInfosReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 获取一个sticker下面的所有贴图信息的返回
type GetStickerSetPackDcInfosResult struct {
	StPDcInfo []*StickerPackDocumentInfo `protobuf:"bytes,1,rep,name=StPDcInfo" json:"StPDcInfo,omitempty"`
}

func (m *GetStickerSetPackDcInfosResult) Reset()         { *m = GetStickerSetPackDcInfosResult{} }
func (m *GetStickerSetPackDcInfosResult) String() string { return proto.CompactTextString(m) }
func (*GetStickerSetPackDcInfosResult) ProtoMessage()    {}
func (*GetStickerSetPackDcInfosResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{90}
}

func (m *GetStickerSetPackDcInfosResult) GetStPDcInfo() []*StickerPackDocumentInfo {
	if m != nil {
		return m.StPDcInfo
	}
	return nil
}

// 添加喜欢的sticker 请求
type AddOrDeleteFaveSticerReq struct {
	UserId    int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	StickerId int64         `protobuf:"varint,2,opt,name=StickerId,proto3" json:"StickerId,omitempty"`
	Unfave    bool          `protobuf:"varint,3,opt,name=Unfave,proto3" json:"Unfave,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *AddOrDeleteFaveSticerReq) Reset()         { *m = AddOrDeleteFaveSticerReq{} }
func (m *AddOrDeleteFaveSticerReq) String() string { return proto.CompactTextString(m) }
func (*AddOrDeleteFaveSticerReq) ProtoMessage()    {}
func (*AddOrDeleteFaveSticerReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{91}
}

func (m *AddOrDeleteFaveSticerReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *AddOrDeleteFaveSticerReq) GetStickerId() int64 {
	if m != nil {
		return m.StickerId
	}
	return 0
}

func (m *AddOrDeleteFaveSticerReq) GetUnfave() bool {
	if m != nil {
		return m.Unfave
	}
	return false
}

func (m *AddOrDeleteFaveSticerReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 添加喜欢的sticker 返回
type AddOrDeleteFaveSticerResult struct {
	ErrorCode ReErrCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=infoserver.ReErrCode" json:"ErrorCode,omitempty"`
}

func (m *AddOrDeleteFaveSticerResult) Reset()         { *m = AddOrDeleteFaveSticerResult{} }
func (m *AddOrDeleteFaveSticerResult) String() string { return proto.CompactTextString(m) }
func (*AddOrDeleteFaveSticerResult) ProtoMessage()    {}
func (*AddOrDeleteFaveSticerResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{92}
}

func (m *AddOrDeleteFaveSticerResult) GetErrorCode() ReErrCode {
	if m != nil {
		return m.ErrorCode
	}
	return ReErrCode_Success
}

// 获取已经添加的的喜爱单个贴图 请求
type GetFavedStickersReq struct {
	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Hash   int32         `protobuf:"varint,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetFavedStickersReq) Reset()                    { *m = GetFavedStickersReq{} }
func (m *GetFavedStickersReq) String() string            { return proto.CompactTextString(m) }
func (*GetFavedStickersReq) ProtoMessage()               {}
func (*GetFavedStickersReq) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{93} }

func (m *GetFavedStickersReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetFavedStickersReq) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *GetFavedStickersReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 获取已经添加的的喜爱单个贴图 返回
type GetFavedStickersResult struct {
	Hash      int32                      `protobuf:"varint,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Packs     []*StickerPack             `protobuf:"bytes,2,rep,name=packs" json:"packs,omitempty"`
	Stickers  []*StickerPackDocumentBase `protobuf:"bytes,3,rep,name=stickers" json:"stickers,omitempty"`
	ErrorCode ReErrCode                  `protobuf:"varint,4,opt,name=ErrorCode,proto3,enum=infoserver.ReErrCode" json:"ErrorCode,omitempty"`
}

func (m *GetFavedStickersResult) Reset()         { *m = GetFavedStickersResult{} }
func (m *GetFavedStickersResult) String() string { return proto.CompactTextString(m) }
func (*GetFavedStickersResult) ProtoMessage()    {}
func (*GetFavedStickersResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{94}
}

func (m *GetFavedStickersResult) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *GetFavedStickersResult) GetPacks() []*StickerPack {
	if m != nil {
		return m.Packs
	}
	return nil
}

func (m *GetFavedStickersResult) GetStickers() []*StickerPackDocumentBase {
	if m != nil {
		return m.Stickers
	}
	return nil
}

func (m *GetFavedStickersResult) GetErrorCode() ReErrCode {
	if m != nil {
		return m.ErrorCode
	}
	return ReErrCode_Success
}

type StickerPack struct {
	Emoticon   string `protobuf:"bytes,1,opt,name=Emoticon,proto3" json:"Emoticon,omitempty"`
	DocumentId int64  `protobuf:"varint,2,opt,name=DocumentId,proto3" json:"DocumentId,omitempty"`
}

func (m *StickerPack) Reset()                    { *m = StickerPack{} }
func (m *StickerPack) String() string            { return proto.CompactTextString(m) }
func (*StickerPack) ProtoMessage()               {}
func (*StickerPack) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{95} }

func (m *StickerPack) GetEmoticon() string {
	if m != nil {
		return m.Emoticon
	}
	return ""
}

func (m *StickerPack) GetDocumentId() int64 {
	if m != nil {
		return m.DocumentId
	}
	return 0
}

// 用户安装sticker集合的请求
type StoreUserStickerSetReq struct {
	UserId       int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StickersetId int32         `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	Installed    bool          `protobuf:"varint,3,opt,name=installed,proto3" json:"installed,omitempty"`
	Disabled     bool          `protobuf:"varint,4,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Order        int32         `protobuf:"varint,5,opt,name=order,proto3" json:"order,omitempty"`
	Archived     bool          `protobuf:"varint,6,opt,name=archived,proto3" json:"archived,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug" json:"debug,omitempty"`
}

func (m *StoreUserStickerSetReq) Reset()         { *m = StoreUserStickerSetReq{} }
func (m *StoreUserStickerSetReq) String() string { return proto.CompactTextString(m) }
func (*StoreUserStickerSetReq) ProtoMessage()    {}
func (*StoreUserStickerSetReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{96}
}

func (m *StoreUserStickerSetReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *StoreUserStickerSetReq) GetStickersetId() int32 {
	if m != nil {
		return m.StickersetId
	}
	return 0
}

func (m *StoreUserStickerSetReq) GetInstalled() bool {
	if m != nil {
		return m.Installed
	}
	return false
}

func (m *StoreUserStickerSetReq) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *StoreUserStickerSetReq) GetOrder() int32 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *StoreUserStickerSetReq) GetArchived() bool {
	if m != nil {
		return m.Archived
	}
	return false
}

func (m *StoreUserStickerSetReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 用户安装sticker集合的返回
type StoreUserStickerSetResult struct {
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *StoreUserStickerSetResult) Reset()         { *m = StoreUserStickerSetResult{} }
func (m *StoreUserStickerSetResult) String() string { return proto.CompactTextString(m) }
func (*StoreUserStickerSetResult) ProtoMessage()    {}
func (*StoreUserStickerSetResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{97}
}

func (m *StoreUserStickerSetResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 更新用户stickerdisable请求
type UpdateUserStickerSetDisabledReq struct {
	UserId       int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StickersetId int32         `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	Disabled     bool          `protobuf:"varint,4,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *UpdateUserStickerSetDisabledReq) Reset()         { *m = UpdateUserStickerSetDisabledReq{} }
func (m *UpdateUserStickerSetDisabledReq) String() string { return proto.CompactTextString(m) }
func (*UpdateUserStickerSetDisabledReq) ProtoMessage()    {}
func (*UpdateUserStickerSetDisabledReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{98}
}

func (m *UpdateUserStickerSetDisabledReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateUserStickerSetDisabledReq) GetStickersetId() int32 {
	if m != nil {
		return m.StickersetId
	}
	return 0
}

func (m *UpdateUserStickerSetDisabledReq) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *UpdateUserStickerSetDisabledReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 更新用户stickerdisable结果
type UpdateUserStickerSetDisabledResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *UpdateUserStickerSetDisabledResult) Reset()         { *m = UpdateUserStickerSetDisabledResult{} }
func (m *UpdateUserStickerSetDisabledResult) String() string { return proto.CompactTextString(m) }
func (*UpdateUserStickerSetDisabledResult) ProtoMessage()    {}
func (*UpdateUserStickerSetDisabledResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{99}
}

func (m *UpdateUserStickerSetDisabledResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 更新用户的Sticker的顺序
type UpdateUserStickerSetOrderReq struct {
	UserId       int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StickersetId int32         `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	Order        int32         `protobuf:"varint,3,opt,name=order,proto3" json:"order,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *UpdateUserStickerSetOrderReq) Reset()         { *m = UpdateUserStickerSetOrderReq{} }
func (m *UpdateUserStickerSetOrderReq) String() string { return proto.CompactTextString(m) }
func (*UpdateUserStickerSetOrderReq) ProtoMessage()    {}
func (*UpdateUserStickerSetOrderReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{100}
}

func (m *UpdateUserStickerSetOrderReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateUserStickerSetOrderReq) GetStickersetId() int32 {
	if m != nil {
		return m.StickersetId
	}
	return 0
}

func (m *UpdateUserStickerSetOrderReq) GetOrder() int32 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *UpdateUserStickerSetOrderReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 更新用户的Sticker的顺序返回
type UpdateUserStickerSetOrderResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *UpdateUserStickerSetOrderResult) Reset()         { *m = UpdateUserStickerSetOrderResult{} }
func (m *UpdateUserStickerSetOrderResult) String() string { return proto.CompactTextString(m) }
func (*UpdateUserStickerSetOrderResult) ProtoMessage()    {}
func (*UpdateUserStickerSetOrderResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{101}
}

func (m *UpdateUserStickerSetOrderResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 更新用户的Sticker install和archived
type UpdateUserStickerSetInstallArReq struct {
	UserId       int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StickersetId int32         `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	Archived     bool          `protobuf:"varint,3,opt,name=archived,proto3" json:"archived,omitempty"`
	Installed    bool          `protobuf:"varint,4,opt,name=installed,proto3" json:"installed,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *UpdateUserStickerSetInstallArReq) Reset()         { *m = UpdateUserStickerSetInstallArReq{} }
func (m *UpdateUserStickerSetInstallArReq) String() string { return proto.CompactTextString(m) }
func (*UpdateUserStickerSetInstallArReq) ProtoMessage()    {}
func (*UpdateUserStickerSetInstallArReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{102}
}

func (m *UpdateUserStickerSetInstallArReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateUserStickerSetInstallArReq) GetStickersetId() int32 {
	if m != nil {
		return m.StickersetId
	}
	return 0
}

func (m *UpdateUserStickerSetInstallArReq) GetArchived() bool {
	if m != nil {
		return m.Archived
	}
	return false
}

func (m *UpdateUserStickerSetInstallArReq) GetInstalled() bool {
	if m != nil {
		return m.Installed
	}
	return false
}

func (m *UpdateUserStickerSetInstallArReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 更新用户的Sticker install和archived的返回
type UpdateUserStickerSetInstallArResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *UpdateUserStickerSetInstallArResult) Reset()         { *m = UpdateUserStickerSetInstallArResult{} }
func (m *UpdateUserStickerSetInstallArResult) String() string { return proto.CompactTextString(m) }
func (*UpdateUserStickerSetInstallArResult) ProtoMessage()    {}
func (*UpdateUserStickerSetInstallArResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{103}
}

func (m *UpdateUserStickerSetInstallArResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 删除sticker的请求
type DeleteuserStickerReq struct {
	UserId       int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StickersetId int32         `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *DeleteuserStickerReq) Reset()         { *m = DeleteuserStickerReq{} }
func (m *DeleteuserStickerReq) String() string { return proto.CompactTextString(m) }
func (*DeleteuserStickerReq) ProtoMessage()    {}
func (*DeleteuserStickerReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{104}
}

func (m *DeleteuserStickerReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DeleteuserStickerReq) GetStickersetId() int32 {
	if m != nil {
		return m.StickersetId
	}
	return 0
}

func (m *DeleteuserStickerReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 删除sticker的返回
type DeleteuserStickerResult struct {
	UserId       int32     `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StickersetId int32     `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	Errorcode    ReErrCode `protobuf:"varint,3,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *DeleteuserStickerResult) Reset()         { *m = DeleteuserStickerResult{} }
func (m *DeleteuserStickerResult) String() string { return proto.CompactTextString(m) }
func (*DeleteuserStickerResult) ProtoMessage()    {}
func (*DeleteuserStickerResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{105}
}

func (m *DeleteuserStickerResult) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DeleteuserStickerResult) GetStickersetId() int32 {
	if m != nil {
		return m.StickersetId
	}
	return 0
}

func (m *DeleteuserStickerResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 用户Sticker的信息
type UserStickerInfo struct {
	StickersetId int32   `protobuf:"varint,1,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	Installed    bool    `protobuf:"varint,2,opt,name=installed,proto3" json:"installed,omitempty"`
	Disabled     bool    `protobuf:"varint,3,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Order        int32   `protobuf:"varint,4,opt,name=order,proto3" json:"order,omitempty"`
	AccessHash   int64   `protobuf:"varint,5,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Free         bool    `protobuf:"varint,6,opt,name=free,proto3" json:"free,omitempty"`
	Official     bool    `protobuf:"varint,7,opt,name=official,proto3" json:"official,omitempty"`
	Archived     bool    `protobuf:"varint,8,opt,name=archived,proto3" json:"archived,omitempty"`
	Masks        bool    `protobuf:"varint,9,opt,name=masks,proto3" json:"masks,omitempty"`
	Title        string  `protobuf:"bytes,10,opt,name=title,proto3" json:"title,omitempty"`
	ShortName    string  `protobuf:"bytes,11,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Count        int32   `protobuf:"varint,12,opt,name=count,proto3" json:"count,omitempty"`
	Hash         int64   `protobuf:"varint,13,opt,name=hash,proto3" json:"hash,omitempty"`
	Emotico      string  `protobuf:"bytes,14,opt,name=emotico,proto3" json:"emotico,omitempty"`
	Documents    []int32 `protobuf:"varint,15,rep,packed,name=documents" json:"documents,omitempty"`
}

func (m *UserStickerInfo) Reset()                    { *m = UserStickerInfo{} }
func (m *UserStickerInfo) String() string            { return proto.CompactTextString(m) }
func (*UserStickerInfo) ProtoMessage()               {}
func (*UserStickerInfo) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{106} }

func (m *UserStickerInfo) GetStickersetId() int32 {
	if m != nil {
		return m.StickersetId
	}
	return 0
}

func (m *UserStickerInfo) GetInstalled() bool {
	if m != nil {
		return m.Installed
	}
	return false
}

func (m *UserStickerInfo) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *UserStickerInfo) GetOrder() int32 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *UserStickerInfo) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *UserStickerInfo) GetFree() bool {
	if m != nil {
		return m.Free
	}
	return false
}

func (m *UserStickerInfo) GetOfficial() bool {
	if m != nil {
		return m.Official
	}
	return false
}

func (m *UserStickerInfo) GetArchived() bool {
	if m != nil {
		return m.Archived
	}
	return false
}

func (m *UserStickerInfo) GetMasks() bool {
	if m != nil {
		return m.Masks
	}
	return false
}

func (m *UserStickerInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *UserStickerInfo) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *UserStickerInfo) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *UserStickerInfo) GetHash() int64 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *UserStickerInfo) GetEmotico() string {
	if m != nil {
		return m.Emotico
	}
	return ""
}

func (m *UserStickerInfo) GetDocuments() []int32 {
	if m != nil {
		return m.Documents
	}
	return nil
}

// 获取的sticker信息的列表
type UserStickerInfoArr struct {
	StickerInfo []*UserStickerInfo `protobuf:"bytes,1,rep,name=stickerInfo" json:"stickerInfo,omitempty"`
}

func (m *UserStickerInfoArr) Reset()                    { *m = UserStickerInfoArr{} }
func (m *UserStickerInfoArr) String() string            { return proto.CompactTextString(m) }
func (*UserStickerInfoArr) ProtoMessage()               {}
func (*UserStickerInfoArr) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{107} }

func (m *UserStickerInfoArr) GetStickerInfo() []*UserStickerInfo {
	if m != nil {
		return m.StickerInfo
	}
	return nil
}

// 获取的sticker集合的所有信息
type StickerSetInfoArr struct {
	StickerInfo []*StickerSetInfo `protobuf:"bytes,1,rep,name=stickerInfo" json:"stickerInfo,omitempty"`
}

func (m *StickerSetInfoArr) Reset()                    { *m = StickerSetInfoArr{} }
func (m *StickerSetInfoArr) String() string            { return proto.CompactTextString(m) }
func (*StickerSetInfoArr) ProtoMessage()               {}
func (*StickerSetInfoArr) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{108} }

func (m *StickerSetInfoArr) GetStickerInfo() []*StickerSetInfo {
	if m != nil {
		return m.StickerInfo
	}
	return nil
}

// 获取用户的所有的贴图请求
type GetuserAllStickersReq struct {
	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetuserAllStickersReq) Reset()         { *m = GetuserAllStickersReq{} }
func (m *GetuserAllStickersReq) String() string { return proto.CompactTextString(m) }
func (*GetuserAllStickersReq) ProtoMessage()    {}
func (*GetuserAllStickersReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{109}
}

func (m *GetuserAllStickersReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetuserAllStickersReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 获取用户的所有的贴图的返回
type GetuserAllStickersResult struct {
	StickerInfoArr []*UserStickerInfo `protobuf:"bytes,1,rep,name=stickerInfoArr" json:"stickerInfoArr,omitempty"`
	Errorcode      ReErrCode          `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *GetuserAllStickersResult) Reset()         { *m = GetuserAllStickersResult{} }
func (m *GetuserAllStickersResult) String() string { return proto.CompactTextString(m) }
func (*GetuserAllStickersResult) ProtoMessage()    {}
func (*GetuserAllStickersResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{110}
}

func (m *GetuserAllStickersResult) GetStickerInfoArr() []*UserStickerInfo {
	if m != nil {
		return m.StickerInfoArr
	}
	return nil
}

func (m *GetuserAllStickersResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 获取所有sticker集合信息
type GetAllStickerSetsReq struct {
	Debug *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetAllStickerSetsReq) Reset()         { *m = GetAllStickerSetsReq{} }
func (m *GetAllStickerSetsReq) String() string { return proto.CompactTextString(m) }
func (*GetAllStickerSetsReq) ProtoMessage()    {}
func (*GetAllStickerSetsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{111}
}

func (m *GetAllStickerSetsReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 获取所有sticker集合信息的返回
type GetAllStickerSetsResult struct {
	StickerInfoArr []*StickerSetInfo `protobuf:"bytes,1,rep,name=stickerInfoArr" json:"stickerInfoArr,omitempty"`
	Errorcode      ReErrCode         `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *GetAllStickerSetsResult) Reset()         { *m = GetAllStickerSetsResult{} }
func (m *GetAllStickerSetsResult) String() string { return proto.CompactTextString(m) }
func (*GetAllStickerSetsResult) ProtoMessage()    {}
func (*GetAllStickerSetsResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{112}
}

func (m *GetAllStickerSetsResult) GetStickerInfoArr() []*StickerSetInfo {
	if m != nil {
		return m.StickerInfoArr
	}
	return nil
}

func (m *GetAllStickerSetsResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 删除单个sticker
type DeleteStickerPackDocumentReq struct {
	Id           int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StickersetId int64 `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
}

func (m *DeleteStickerPackDocumentReq) Reset()         { *m = DeleteStickerPackDocumentReq{} }
func (m *DeleteStickerPackDocumentReq) String() string { return proto.CompactTextString(m) }
func (*DeleteStickerPackDocumentReq) ProtoMessage()    {}
func (*DeleteStickerPackDocumentReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{113}
}

func (m *DeleteStickerPackDocumentReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DeleteStickerPackDocumentReq) GetStickersetId() int64 {
	if m != nil {
		return m.StickersetId
	}
	return 0
}

// 删除单个sticker返回
type DeleteStickerPackDocumentResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *DeleteStickerPackDocumentResult) Reset()         { *m = DeleteStickerPackDocumentResult{} }
func (m *DeleteStickerPackDocumentResult) String() string { return proto.CompactTextString(m) }
func (*DeleteStickerPackDocumentResult) ProtoMessage()    {}
func (*DeleteStickerPackDocumentResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{114}
}

func (m *DeleteStickerPackDocumentResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 获取作者sticker
type GetAuthorStickerSetReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SetId  int64 `protobuf:"varint,2,opt,name=set_id,json=setId,proto3" json:"set_id,omitempty"`
}

func (m *GetAuthorStickerSetReq) Reset()         { *m = GetAuthorStickerSetReq{} }
func (m *GetAuthorStickerSetReq) String() string { return proto.CompactTextString(m) }
func (*GetAuthorStickerSetReq) ProtoMessage()    {}
func (*GetAuthorStickerSetReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{115}
}

func (m *GetAuthorStickerSetReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetAuthorStickerSetReq) GetSetId() int64 {
	if m != nil {
		return m.SetId
	}
	return 0
}

// 获取作者sticker返回
type GetAuthorStickerSetResult struct {
	ErrorCode ReErrCode         `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=infoserver.ReErrCode" json:"ErrorCode,omitempty"`
	Set       *AuthorStickerSet `protobuf:"bytes,2,opt,name=set" json:"set,omitempty"`
}

func (m *GetAuthorStickerSetResult) Reset()         { *m = GetAuthorStickerSetResult{} }
func (m *GetAuthorStickerSetResult) String() string { return proto.CompactTextString(m) }
func (*GetAuthorStickerSetResult) ProtoMessage()    {}
func (*GetAuthorStickerSetResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{116}
}

func (m *GetAuthorStickerSetResult) GetErrorCode() ReErrCode {
	if m != nil {
		return m.ErrorCode
	}
	return ReErrCode_Success
}

func (m *GetAuthorStickerSetResult) GetSet() *AuthorStickerSet {
	if m != nil {
		return m.Set
	}
	return nil
}

// 获取作者所有sticker
type GetAuthorAllStickerSetReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *GetAuthorAllStickerSetReq) Reset()         { *m = GetAuthorAllStickerSetReq{} }
func (m *GetAuthorAllStickerSetReq) String() string { return proto.CompactTextString(m) }
func (*GetAuthorAllStickerSetReq) ProtoMessage()    {}
func (*GetAuthorAllStickerSetReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{117}
}

func (m *GetAuthorAllStickerSetReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// 获取作者所有sticker返回
type GetAuthorAllStickerSetResult struct {
	ErrorCode ReErrCode           `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=infoserver.ReErrCode" json:"ErrorCode,omitempty"`
	Sets      []*AuthorStickerSet `protobuf:"bytes,2,rep,name=sets" json:"sets,omitempty"`
}

func (m *GetAuthorAllStickerSetResult) Reset()         { *m = GetAuthorAllStickerSetResult{} }
func (m *GetAuthorAllStickerSetResult) String() string { return proto.CompactTextString(m) }
func (*GetAuthorAllStickerSetResult) ProtoMessage()    {}
func (*GetAuthorAllStickerSetResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{118}
}

func (m *GetAuthorAllStickerSetResult) GetErrorCode() ReErrCode {
	if m != nil {
		return m.ErrorCode
	}
	return ReErrCode_Success
}

func (m *GetAuthorAllStickerSetResult) GetSets() []*AuthorStickerSet {
	if m != nil {
		return m.Sets
	}
	return nil
}

// 结构体AuthorStickerSet
type AuthorStickerSet struct {
	UserId       int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StickersetId int64  `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	ShortName    string `protobuf:"bytes,3,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Archived     bool   `protobuf:"varint,4,opt,name=archived,proto3" json:"archived,omitempty"`
	Installed    bool   `protobuf:"varint,5,opt,name=installed,proto3" json:"installed,omitempty"`
	Disabled     bool   `protobuf:"varint,6,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Ordered      int32  `protobuf:"varint,7,opt,name=ordered,proto3" json:"ordered,omitempty"`
	Created      int32  `protobuf:"varint,8,opt,name=created,proto3" json:"created,omitempty"`
	Updated      int32  `protobuf:"varint,9,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (m *AuthorStickerSet) Reset()                    { *m = AuthorStickerSet{} }
func (m *AuthorStickerSet) String() string            { return proto.CompactTextString(m) }
func (*AuthorStickerSet) ProtoMessage()               {}
func (*AuthorStickerSet) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{119} }

func (m *AuthorStickerSet) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *AuthorStickerSet) GetStickersetId() int64 {
	if m != nil {
		return m.StickersetId
	}
	return 0
}

func (m *AuthorStickerSet) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *AuthorStickerSet) GetArchived() bool {
	if m != nil {
		return m.Archived
	}
	return false
}

func (m *AuthorStickerSet) GetInstalled() bool {
	if m != nil {
		return m.Installed
	}
	return false
}

func (m *AuthorStickerSet) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *AuthorStickerSet) GetOrdered() int32 {
	if m != nil {
		return m.Ordered
	}
	return 0
}

func (m *AuthorStickerSet) GetCreated() int32 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *AuthorStickerSet) GetUpdated() int32 {
	if m != nil {
		return m.Updated
	}
	return 0
}

// 统计sticker数量
type CountAuthorAllStickerSetReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *CountAuthorAllStickerSetReq) Reset()         { *m = CountAuthorAllStickerSetReq{} }
func (m *CountAuthorAllStickerSetReq) String() string { return proto.CompactTextString(m) }
func (*CountAuthorAllStickerSetReq) ProtoMessage()    {}
func (*CountAuthorAllStickerSetReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{120}
}

func (m *CountAuthorAllStickerSetReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// 统计拥有sticker数量返回
type CountAuthorAllStickerSetResult struct {
	ErrorCode ReErrCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=infoserver.ReErrCode" json:"ErrorCode,omitempty"`
	Count     int64     `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *CountAuthorAllStickerSetResult) Reset()         { *m = CountAuthorAllStickerSetResult{} }
func (m *CountAuthorAllStickerSetResult) String() string { return proto.CompactTextString(m) }
func (*CountAuthorAllStickerSetResult) ProtoMessage()    {}
func (*CountAuthorAllStickerSetResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{121}
}

func (m *CountAuthorAllStickerSetResult) GetErrorCode() ReErrCode {
	if m != nil {
		return m.ErrorCode
	}
	return ReErrCode_Success
}

func (m *CountAuthorAllStickerSetResult) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

// 用户gif的动态图集合
type UserGifInfoArr struct {
	GifArr []*UserSaveGifInfo `protobuf:"bytes,1,rep,name=gif_arr,json=gifArr" json:"gif_arr,omitempty"`
}

func (m *UserGifInfoArr) Reset()                    { *m = UserGifInfoArr{} }
func (m *UserGifInfoArr) String() string            { return proto.CompactTextString(m) }
func (*UserGifInfoArr) ProtoMessage()               {}
func (*UserGifInfoArr) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{122} }

func (m *UserGifInfoArr) GetGifArr() []*UserSaveGifInfo {
	if m != nil {
		return m.GifArr
	}
	return nil
}

// 保存用户动态图的请求
type UserSaveGifInfo struct {
	UserId  int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GifId   string `protobuf:"bytes,2,opt,name=gif_id,json=gifId,proto3" json:"gif_id,omitempty"`
	Fid     uint64 `protobuf:"varint,3,opt,name=fid,proto3" json:"fid,omitempty"`
	GitHash int64  `protobuf:"varint,4,opt,name=git_hash,json=gitHash,proto3" json:"git_hash,omitempty"`
}

func (m *UserSaveGifInfo) Reset()                    { *m = UserSaveGifInfo{} }
func (m *UserSaveGifInfo) String() string            { return proto.CompactTextString(m) }
func (*UserSaveGifInfo) ProtoMessage()               {}
func (*UserSaveGifInfo) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{123} }

func (m *UserSaveGifInfo) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserSaveGifInfo) GetGifId() string {
	if m != nil {
		return m.GifId
	}
	return ""
}

func (m *UserSaveGifInfo) GetFid() uint64 {
	if m != nil {
		return m.Fid
	}
	return 0
}

func (m *UserSaveGifInfo) GetGitHash() int64 {
	if m != nil {
		return m.GitHash
	}
	return 0
}

// 保存gif动态图的请求
type SaveUserGifReq struct {
	UserId  int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GifId   string        `protobuf:"bytes,2,opt,name=gif_id,json=gifId,proto3" json:"gif_id,omitempty"`
	Fid     uint64        `protobuf:"varint,3,opt,name=fid,proto3" json:"fid,omitempty"`
	GitHash int64         `protobuf:"varint,4,opt,name=git_hash,json=gitHash,proto3" json:"git_hash,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *SaveUserGifReq) Reset()                    { *m = SaveUserGifReq{} }
func (m *SaveUserGifReq) String() string            { return proto.CompactTextString(m) }
func (*SaveUserGifReq) ProtoMessage()               {}
func (*SaveUserGifReq) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{124} }

func (m *SaveUserGifReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SaveUserGifReq) GetGifId() string {
	if m != nil {
		return m.GifId
	}
	return ""
}

func (m *SaveUserGifReq) GetFid() uint64 {
	if m != nil {
		return m.Fid
	}
	return 0
}

func (m *SaveUserGifReq) GetGitHash() int64 {
	if m != nil {
		return m.GitHash
	}
	return 0
}

func (m *SaveUserGifReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 保存gif动态图的请求返回
type SaveUserGifResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *SaveUserGifResult) Reset()                    { *m = SaveUserGifResult{} }
func (m *SaveUserGifResult) String() string            { return proto.CompactTextString(m) }
func (*SaveUserGifResult) ProtoMessage()               {}
func (*SaveUserGifResult) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{125} }

func (m *SaveUserGifResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 删除动态图的请求
type DelUserGifReq struct {
	UserId  int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Fid     uint64        `protobuf:"varint,3,opt,name=fid,proto3" json:"fid,omitempty"`
	GitHash int64         `protobuf:"varint,4,opt,name=git_hash,json=gitHash,proto3" json:"git_hash,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *DelUserGifReq) Reset()                    { *m = DelUserGifReq{} }
func (m *DelUserGifReq) String() string            { return proto.CompactTextString(m) }
func (*DelUserGifReq) ProtoMessage()               {}
func (*DelUserGifReq) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{126} }

func (m *DelUserGifReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DelUserGifReq) GetFid() uint64 {
	if m != nil {
		return m.Fid
	}
	return 0
}

func (m *DelUserGifReq) GetGitHash() int64 {
	if m != nil {
		return m.GitHash
	}
	return 0
}

func (m *DelUserGifReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 删除动态图的返回
type DelUserGifResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *DelUserGifResult) Reset()                    { *m = DelUserGifResult{} }
func (m *DelUserGifResult) String() string            { return proto.CompactTextString(m) }
func (*DelUserGifResult) ProtoMessage()               {}
func (*DelUserGifResult) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{127} }

func (m *DelUserGifResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 获取用户的gifs
type GetUserGifsReq struct {
	UserId int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Hash   int32         `protobuf:"varint,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetUserGifsReq) Reset()                    { *m = GetUserGifsReq{} }
func (m *GetUserGifsReq) String() string            { return proto.CompactTextString(m) }
func (*GetUserGifsReq) ProtoMessage()               {}
func (*GetUserGifsReq) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{128} }

func (m *GetUserGifsReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetUserGifsReq) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *GetUserGifsReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 获取用户的gifs返回
type GetUserGifsResult struct {
	UserId    int32              `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Hash      int32              `protobuf:"varint,2,opt,name=hash,proto3" json:"hash,omitempty"`
	GifArr    []*UserSaveGifInfo `protobuf:"bytes,3,rep,name=gif_arr,json=gifArr" json:"gif_arr,omitempty"`
	Errorcode ReErrCode          `protobuf:"varint,4,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *GetUserGifsResult) Reset()                    { *m = GetUserGifsResult{} }
func (m *GetUserGifsResult) String() string            { return proto.CompactTextString(m) }
func (*GetUserGifsResult) ProtoMessage()               {}
func (*GetUserGifsResult) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{129} }

func (m *GetUserGifsResult) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetUserGifsResult) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *GetUserGifsResult) GetGifArr() []*UserSaveGifInfo {
	if m != nil {
		return m.GifArr
	}
	return nil
}

func (m *GetUserGifsResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 检测用户是否是黑名单的请求
type CheckUserIsBlockedReq struct {
	SelfId int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	UserId int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *CheckUserIsBlockedReq) Reset()         { *m = CheckUserIsBlockedReq{} }
func (m *CheckUserIsBlockedReq) String() string { return proto.CompactTextString(m) }
func (*CheckUserIsBlockedReq) ProtoMessage()    {}
func (*CheckUserIsBlockedReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{130}
}

func (m *CheckUserIsBlockedReq) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *CheckUserIsBlockedReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CheckUserIsBlockedReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 检测用户黑名单的返回
type CheckUserIsBlockedResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *CheckUserIsBlockedResult) Reset()         { *m = CheckUserIsBlockedResult{} }
func (m *CheckUserIsBlockedResult) String() string { return proto.CompactTextString(m) }
func (*CheckUserIsBlockedResult) ProtoMessage()    {}
func (*CheckUserIsBlockedResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{131}
}

func (m *CheckUserIsBlockedResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 注册用户请求的基础信息
type RegisterUserInfo struct {
	UserId         int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccessHash     int64  `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Phone          string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	CountryCode    string `protobuf:"bytes,4,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	LocalPhone     string `protobuf:"bytes,5,opt,name=local_phone,json=localPhone,proto3" json:"local_phone,omitempty"`
	FirstName      string `protobuf:"bytes,6,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName       string `protobuf:"bytes,7,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	IsBot          bool   `protobuf:"varint,8,opt,name=is_bot,json=isBot,proto3" json:"is_bot,omitempty"`
	BotInfoVersion int32  `protobuf:"varint,9,opt,name=bot_info_version,json=botInfoVersion,proto3" json:"bot_info_version,omitempty"`
	BotChatHistory bool   `protobuf:"varint,10,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNoChats     bool   `protobuf:"varint,11,opt,name=bot_no_chats,json=botNoChats,proto3" json:"bot_no_chats,omitempty"`
}

func (m *RegisterUserInfo) Reset()                    { *m = RegisterUserInfo{} }
func (m *RegisterUserInfo) String() string            { return proto.CompactTextString(m) }
func (*RegisterUserInfo) ProtoMessage()               {}
func (*RegisterUserInfo) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{132} }

func (m *RegisterUserInfo) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *RegisterUserInfo) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *RegisterUserInfo) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *RegisterUserInfo) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *RegisterUserInfo) GetLocalPhone() string {
	if m != nil {
		return m.LocalPhone
	}
	return ""
}

func (m *RegisterUserInfo) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *RegisterUserInfo) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *RegisterUserInfo) GetIsBot() bool {
	if m != nil {
		return m.IsBot
	}
	return false
}

func (m *RegisterUserInfo) GetBotInfoVersion() int32 {
	if m != nil {
		return m.BotInfoVersion
	}
	return 0
}

func (m *RegisterUserInfo) GetBotChatHistory() bool {
	if m != nil {
		return m.BotChatHistory
	}
	return false
}

func (m *RegisterUserInfo) GetBotNoChats() bool {
	if m != nil {
		return m.BotNoChats
	}
	return false
}

// 更新用户信息返回
type UpdateUserInfoResult struct {
	Uinfo     *UserInfo `protobuf:"bytes,1,opt,name=uinfo" json:"uinfo,omitempty"`
	ErrorCode int32     `protobuf:"varint,2,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Result    bool      `protobuf:"varint,3,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (m *UpdateUserInfoResult) Reset()         { *m = UpdateUserInfoResult{} }
func (m *UpdateUserInfoResult) String() string { return proto.CompactTextString(m) }
func (*UpdateUserInfoResult) ProtoMessage()    {}
func (*UpdateUserInfoResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{133}
}

func (m *UpdateUserInfoResult) GetUinfo() *UserInfo {
	if m != nil {
		return m.Uinfo
	}
	return nil
}

func (m *UpdateUserInfoResult) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *UpdateUserInfoResult) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// 检测用户哈希值是否合法请求参数
type CheckUserAccessHashValidReq struct {
	UserId     int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	AccessHash int64         `protobuf:"varint,2,opt,name=AccessHash,proto3" json:"AccessHash,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *CheckUserAccessHashValidReq) Reset()         { *m = CheckUserAccessHashValidReq{} }
func (m *CheckUserAccessHashValidReq) String() string { return proto.CompactTextString(m) }
func (*CheckUserAccessHashValidReq) ProtoMessage()    {}
func (*CheckUserAccessHashValidReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{134}
}

func (m *CheckUserAccessHashValidReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CheckUserAccessHashValidReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *CheckUserAccessHashValidReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 检测用户哈希值是否合法返回结构
type CheckUserAccessHashValidResult struct {
	IsValid   bool      `protobuf:"varint,1,opt,name=isValid,proto3" json:"isValid,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *CheckUserAccessHashValidResult) Reset()         { *m = CheckUserAccessHashValidResult{} }
func (m *CheckUserAccessHashValidResult) String() string { return proto.CompactTextString(m) }
func (*CheckUserAccessHashValidResult) ProtoMessage()    {}
func (*CheckUserAccessHashValidResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{135}
}

func (m *CheckUserAccessHashValidResult) GetIsValid() bool {
	if m != nil {
		return m.IsValid
	}
	return false
}

func (m *CheckUserAccessHashValidResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 注册指定用户的请求
type RegisterUserInfoReq struct {
	UserId         int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccessHash     int64         `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	PhoneNumber    string        `protobuf:"bytes,3,opt,name=PhoneNumber,proto3" json:"PhoneNumber,omitempty"`
	FirstName      string        `protobuf:"bytes,4,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	LastName       string        `protobuf:"bytes,5,opt,name=LastName,proto3" json:"LastName,omitempty"`
	IsBot          bool          `protobuf:"varint,6,opt,name=is_bot,json=isBot,proto3" json:"is_bot,omitempty"`
	BotInfoVersion int32         `protobuf:"varint,7,opt,name=bot_info_version,json=botInfoVersion,proto3" json:"bot_info_version,omitempty"`
	BotChatHistory bool          `protobuf:"varint,8,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNoChats     bool          `protobuf:"varint,9,opt,name=bot_no_chats,json=botNoChats,proto3" json:"bot_no_chats,omitempty"`
	Debug          *pbcomm.Debug `protobuf:"bytes,10,opt,name=debug" json:"debug,omitempty"`
}

func (m *RegisterUserInfoReq) Reset()                    { *m = RegisterUserInfoReq{} }
func (m *RegisterUserInfoReq) String() string            { return proto.CompactTextString(m) }
func (*RegisterUserInfoReq) ProtoMessage()               {}
func (*RegisterUserInfoReq) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{136} }

func (m *RegisterUserInfoReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *RegisterUserInfoReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *RegisterUserInfoReq) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *RegisterUserInfoReq) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *RegisterUserInfoReq) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *RegisterUserInfoReq) GetIsBot() bool {
	if m != nil {
		return m.IsBot
	}
	return false
}

func (m *RegisterUserInfoReq) GetBotInfoVersion() int32 {
	if m != nil {
		return m.BotInfoVersion
	}
	return 0
}

func (m *RegisterUserInfoReq) GetBotChatHistory() bool {
	if m != nil {
		return m.BotChatHistory
	}
	return false
}

func (m *RegisterUserInfoReq) GetBotNoChats() bool {
	if m != nil {
		return m.BotNoChats
	}
	return false
}

func (m *RegisterUserInfoReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 注册指定用户的请求
type RegisterUserInfoResult struct {
	Uinfo     *UserInfo `protobuf:"bytes,1,opt,name=uinfo" json:"uinfo,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *RegisterUserInfoResult) Reset()         { *m = RegisterUserInfoResult{} }
func (m *RegisterUserInfoResult) String() string { return proto.CompactTextString(m) }
func (*RegisterUserInfoResult) ProtoMessage()    {}
func (*RegisterUserInfoResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{137}
}

func (m *RegisterUserInfoResult) GetUinfo() *UserInfo {
	if m != nil {
		return m.Uinfo
	}
	return nil
}

func (m *RegisterUserInfoResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 获取音效设置
type GetNotifySettingsReq struct {
	FromId  int32         `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	ReqType int32         `protobuf:"varint,2,opt,name=req_type,json=reqType,proto3" json:"req_type,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetNotifySettingsReq) Reset()         { *m = GetNotifySettingsReq{} }
func (m *GetNotifySettingsReq) String() string { return proto.CompactTextString(m) }
func (*GetNotifySettingsReq) ProtoMessage()    {}
func (*GetNotifySettingsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{138}
}

func (m *GetNotifySettingsReq) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *GetNotifySettingsReq) GetReqType() int32 {
	if m != nil {
		return m.ReqType
	}
	return 0
}

func (m *GetNotifySettingsReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 音效设置返回
type GetNotifySettingsResult struct {
	ShowPreviews bool      `protobuf:"varint,1,opt,name=Show_previews,json=ShowPreviews,proto3" json:"Show_previews,omitempty"`
	Silent       bool      `protobuf:"varint,2,opt,name=Silent,proto3" json:"Silent,omitempty"`
	MuteUntil    int32     `protobuf:"varint,3,opt,name=Mute_until,json=MuteUntil,proto3" json:"Mute_until,omitempty"`
	Sound        string    `protobuf:"bytes,4,opt,name=Sound,proto3" json:"Sound,omitempty"`
	Errorcode    ReErrCode `protobuf:"varint,5,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *GetNotifySettingsResult) Reset()         { *m = GetNotifySettingsResult{} }
func (m *GetNotifySettingsResult) String() string { return proto.CompactTextString(m) }
func (*GetNotifySettingsResult) ProtoMessage()    {}
func (*GetNotifySettingsResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{139}
}

func (m *GetNotifySettingsResult) GetShowPreviews() bool {
	if m != nil {
		return m.ShowPreviews
	}
	return false
}

func (m *GetNotifySettingsResult) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *GetNotifySettingsResult) GetMuteUntil() int32 {
	if m != nil {
		return m.MuteUntil
	}
	return 0
}

func (m *GetNotifySettingsResult) GetSound() string {
	if m != nil {
		return m.Sound
	}
	return ""
}

func (m *GetNotifySettingsResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 更新音效设置
type UpdateNotifySettingsReq struct {
	FromId       int32         `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	ReqType      int32         `protobuf:"varint,2,opt,name=req_type,json=reqType,proto3" json:"req_type,omitempty"`
	ShowPreviews bool          `protobuf:"varint,3,opt,name=Show_previews,json=ShowPreviews,proto3" json:"Show_previews,omitempty"`
	Silent       bool          `protobuf:"varint,4,opt,name=Silent,proto3" json:"Silent,omitempty"`
	MuteUntil    int32         `protobuf:"varint,5,opt,name=Mute_until,json=MuteUntil,proto3" json:"Mute_until,omitempty"`
	Sound        string        `protobuf:"bytes,6,opt,name=Sound,proto3" json:"Sound,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug" json:"debug,omitempty"`
}

func (m *UpdateNotifySettingsReq) Reset()         { *m = UpdateNotifySettingsReq{} }
func (m *UpdateNotifySettingsReq) String() string { return proto.CompactTextString(m) }
func (*UpdateNotifySettingsReq) ProtoMessage()    {}
func (*UpdateNotifySettingsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{140}
}

func (m *UpdateNotifySettingsReq) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *UpdateNotifySettingsReq) GetReqType() int32 {
	if m != nil {
		return m.ReqType
	}
	return 0
}

func (m *UpdateNotifySettingsReq) GetShowPreviews() bool {
	if m != nil {
		return m.ShowPreviews
	}
	return false
}

func (m *UpdateNotifySettingsReq) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *UpdateNotifySettingsReq) GetMuteUntil() int32 {
	if m != nil {
		return m.MuteUntil
	}
	return 0
}

func (m *UpdateNotifySettingsReq) GetSound() string {
	if m != nil {
		return m.Sound
	}
	return ""
}

func (m *UpdateNotifySettingsReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 更新音效
type UpdateNotifySettingsResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *UpdateNotifySettingsResult) Reset()         { *m = UpdateNotifySettingsResult{} }
func (m *UpdateNotifySettingsResult) String() string { return proto.CompactTextString(m) }
func (*UpdateNotifySettingsResult) ProtoMessage()    {}
func (*UpdateNotifySettingsResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{141}
}

func (m *UpdateNotifySettingsResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 获取自己所有联系人的在线状态请求
type GetContactsStatusReq struct {
	SelfId int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetContactsStatusReq) Reset()         { *m = GetContactsStatusReq{} }
func (m *GetContactsStatusReq) String() string { return proto.CompactTextString(m) }
func (*GetContactsStatusReq) ProtoMessage()    {}
func (*GetContactsStatusReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{142}
}

func (m *GetContactsStatusReq) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *GetContactsStatusReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 联系人的在线状态
type UserStaus struct {
	UserId      int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Status      int32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	OfflineTime int32 `protobuf:"varint,3,opt,name=offline_time,json=offlineTime,proto3" json:"offline_time,omitempty"`
}

func (m *UserStaus) Reset()                    { *m = UserStaus{} }
func (m *UserStaus) String() string            { return proto.CompactTextString(m) }
func (*UserStaus) ProtoMessage()               {}
func (*UserStaus) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{143} }

func (m *UserStaus) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserStaus) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *UserStaus) GetOfflineTime() int32 {
	if m != nil {
		return m.OfflineTime
	}
	return 0
}

// 获取自己所有联系人的在线状态返回
type GetContactsStatusResult struct {
	ContactStatusArr []*UserStaus `protobuf:"bytes,1,rep,name=contactStatusArr" json:"contactStatusArr,omitempty"`
	Errorcode        ReErrCode    `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *GetContactsStatusResult) Reset()         { *m = GetContactsStatusResult{} }
func (m *GetContactsStatusResult) String() string { return proto.CompactTextString(m) }
func (*GetContactsStatusResult) ProtoMessage()    {}
func (*GetContactsStatusResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{144}
}

func (m *GetContactsStatusResult) GetContactStatusArr() []*UserStaus {
	if m != nil {
		return m.ContactStatusArr
	}
	return nil
}

func (m *GetContactsStatusResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 更新机器人头像请求
type UpdateBotPicRequest struct {
	BotId int32         `protobuf:"varint,1,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	Photo []byte        `protobuf:"bytes,2,opt,name=photo,proto3" json:"photo,omitempty"`
	Debug *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *UpdateBotPicRequest) Reset()                    { *m = UpdateBotPicRequest{} }
func (m *UpdateBotPicRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateBotPicRequest) ProtoMessage()               {}
func (*UpdateBotPicRequest) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{145} }

func (m *UpdateBotPicRequest) GetBotId() int32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *UpdateBotPicRequest) GetPhoto() []byte {
	if m != nil {
		return m.Photo
	}
	return nil
}

func (m *UpdateBotPicRequest) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type UpdateBotPicResult struct {
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *UpdateBotPicResult) Reset()                    { *m = UpdateBotPicResult{} }
func (m *UpdateBotPicResult) String() string            { return proto.CompactTextString(m) }
func (*UpdateBotPicResult) ProtoMessage()               {}
func (*UpdateBotPicResult) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{146} }

func (m *UpdateBotPicResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 获取所有代理的IP和端口请求
type GetAllProxyConfigReq struct {
	Debug *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetAllProxyConfigReq) Reset()         { *m = GetAllProxyConfigReq{} }
func (m *GetAllProxyConfigReq) String() string { return proto.CompactTextString(m) }
func (*GetAllProxyConfigReq) ProtoMessage()    {}
func (*GetAllProxyConfigReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{147}
}

func (m *GetAllProxyConfigReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 代理的配置的地址结构
type ProxyAddr struct {
	Ip      string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	InnerIp string `protobuf:"bytes,2,opt,name=innerIp,proto3" json:"innerIp,omitempty"`
	Port    int32  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (m *ProxyAddr) Reset()                    { *m = ProxyAddr{} }
func (m *ProxyAddr) String() string            { return proto.CompactTextString(m) }
func (*ProxyAddr) ProtoMessage()               {}
func (*ProxyAddr) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{148} }

func (m *ProxyAddr) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *ProxyAddr) GetInnerIp() string {
	if m != nil {
		return m.InnerIp
	}
	return ""
}

func (m *ProxyAddr) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// 获取所有代理的IP和端口返回结构
type GetAllProxyConfigResult struct {
	Addrs     []*ProxyAddr `protobuf:"bytes,1,rep,name=addrs" json:"addrs,omitempty"`
	Errorcode ReErrCode    `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *GetAllProxyConfigResult) Reset()         { *m = GetAllProxyConfigResult{} }
func (m *GetAllProxyConfigResult) String() string { return proto.CompactTextString(m) }
func (*GetAllProxyConfigResult) ProtoMessage()    {}
func (*GetAllProxyConfigResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{149}
}

func (m *GetAllProxyConfigResult) GetAddrs() []*ProxyAddr {
	if m != nil {
		return m.Addrs
	}
	return nil
}

func (m *GetAllProxyConfigResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 检查用户名是否经被占用请求
type CheckUserNameOccupiedReq struct {
	Userid   int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	UserName string        `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Debug    *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *CheckUserNameOccupiedReq) Reset()         { *m = CheckUserNameOccupiedReq{} }
func (m *CheckUserNameOccupiedReq) String() string { return proto.CompactTextString(m) }
func (*CheckUserNameOccupiedReq) ProtoMessage()    {}
func (*CheckUserNameOccupiedReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{150}
}

func (m *CheckUserNameOccupiedReq) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *CheckUserNameOccupiedReq) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *CheckUserNameOccupiedReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 检查用户名是否经被占用返回结果
type CheckUserNameOccupiedResult struct {
	Occpuy bool `protobuf:"varint,1,opt,name=occpuy,proto3" json:"occpuy,omitempty"`
}

func (m *CheckUserNameOccupiedResult) Reset()         { *m = CheckUserNameOccupiedResult{} }
func (m *CheckUserNameOccupiedResult) String() string { return proto.CompactTextString(m) }
func (*CheckUserNameOccupiedResult) ProtoMessage()    {}
func (*CheckUserNameOccupiedResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{151}
}

func (m *CheckUserNameOccupiedResult) GetOccpuy() bool {
	if m != nil {
		return m.Occpuy
	}
	return false
}

// 获取用户最新的GPS的请求
type GetUserGpsReq struct {
	Userid int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetUserGpsReq) Reset()                    { *m = GetUserGpsReq{} }
func (m *GetUserGpsReq) String() string            { return proto.CompactTextString(m) }
func (*GetUserGpsReq) ProtoMessage()               {}
func (*GetUserGpsReq) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{152} }

func (m *GetUserGpsReq) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *GetUserGpsReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 获取用户的GPS的请求
type GetUserGpsResult struct {
	Latitude     float64   `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude    float64   `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	DeviceModule string    `protobuf:"bytes,3,opt,name=device_module,json=deviceModule,proto3" json:"device_module,omitempty"`
	Timestamp    int32     `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Errorcode    ReErrCode `protobuf:"varint,5,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *GetUserGpsResult) Reset()                    { *m = GetUserGpsResult{} }
func (m *GetUserGpsResult) String() string            { return proto.CompactTextString(m) }
func (*GetUserGpsResult) ProtoMessage()               {}
func (*GetUserGpsResult) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{153} }

func (m *GetUserGpsResult) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *GetUserGpsResult) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *GetUserGpsResult) GetDeviceModule() string {
	if m != nil {
		return m.DeviceModule
	}
	return ""
}

func (m *GetUserGpsResult) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *GetUserGpsResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 检测是否是自己是否是对方的联系人
type CheckSelfIsContactReq struct {
	SelfId int32         `protobuf:"varint,1,opt,name=selfId,proto3" json:"selfId,omitempty"`
	UserId int32         `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *CheckSelfIsContactReq) Reset()         { *m = CheckSelfIsContactReq{} }
func (m *CheckSelfIsContactReq) String() string { return proto.CompactTextString(m) }
func (*CheckSelfIsContactReq) ProtoMessage()    {}
func (*CheckSelfIsContactReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{154}
}

func (m *CheckSelfIsContactReq) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *CheckSelfIsContactReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CheckSelfIsContactReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 检测是否是自己是否是对方的联系人的返回结果
type CheckSelfIsContactResult struct {
	SelfIsContact bool      `protobuf:"varint,1,opt,name=SelfIsContact,proto3" json:"SelfIsContact,omitempty"`
	Errorcode     ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *CheckSelfIsContactResult) Reset()         { *m = CheckSelfIsContactResult{} }
func (m *CheckSelfIsContactResult) String() string { return proto.CompactTextString(m) }
func (*CheckSelfIsContactResult) ProtoMessage()    {}
func (*CheckSelfIsContactResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{155}
}

func (m *CheckSelfIsContactResult) GetSelfIsContact() bool {
	if m != nil {
		return m.SelfIsContact
	}
	return false
}

func (m *CheckSelfIsContactResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// update switch setting
type UpdateSwitchReq struct {
	UserId int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Switch Switch `protobuf:"varint,2,opt,name=switch,proto3,enum=infoserver.Switch" json:"switch,omitempty"`
	OnOff  bool   `protobuf:"varint,3,opt,name=on_off,json=onOff,proto3" json:"on_off,omitempty"`
}

func (m *UpdateSwitchReq) Reset()                    { *m = UpdateSwitchReq{} }
func (m *UpdateSwitchReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateSwitchReq) ProtoMessage()               {}
func (*UpdateSwitchReq) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{156} }

func (m *UpdateSwitchReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateSwitchReq) GetSwitch() Switch {
	if m != nil {
		return m.Switch
	}
	return Switch_Unused
}

func (m *UpdateSwitchReq) GetOnOff() bool {
	if m != nil {
		return m.OnOff
	}
	return false
}

type UpdateSwitchResult struct {
	Code UpdateSwitchResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.UpdateSwitchResult_ResultCode" json:"code,omitempty"`
}

func (m *UpdateSwitchResult) Reset()                    { *m = UpdateSwitchResult{} }
func (m *UpdateSwitchResult) String() string            { return proto.CompactTextString(m) }
func (*UpdateSwitchResult) ProtoMessage()               {}
func (*UpdateSwitchResult) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{157} }

func (m *UpdateSwitchResult) GetCode() UpdateSwitchResult_ResultCode {
	if m != nil {
		return m.Code
	}
	return UpdateSwitchResult_Success
}

// get switch setting
type GetSwitchStatusReq struct {
	UserId int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Switch Switch `protobuf:"varint,2,opt,name=switch,proto3,enum=infoserver.Switch" json:"switch,omitempty"`
}

func (m *GetSwitchStatusReq) Reset()                    { *m = GetSwitchStatusReq{} }
func (m *GetSwitchStatusReq) String() string            { return proto.CompactTextString(m) }
func (*GetSwitchStatusReq) ProtoMessage()               {}
func (*GetSwitchStatusReq) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{158} }

func (m *GetSwitchStatusReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetSwitchStatusReq) GetSwitch() Switch {
	if m != nil {
		return m.Switch
	}
	return Switch_Unused
}

type GetSwitchStatusResult struct {
	OnOff bool                             `protobuf:"varint,1,opt,name=on_off,json=onOff,proto3" json:"on_off,omitempty"`
	Code  GetSwitchStatusResult_ResultCode `protobuf:"varint,2,opt,name=code,proto3,enum=infoserver.GetSwitchStatusResult_ResultCode" json:"code,omitempty"`
}

func (m *GetSwitchStatusResult) Reset()         { *m = GetSwitchStatusResult{} }
func (m *GetSwitchStatusResult) String() string { return proto.CompactTextString(m) }
func (*GetSwitchStatusResult) ProtoMessage()    {}
func (*GetSwitchStatusResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{159}
}

func (m *GetSwitchStatusResult) GetOnOff() bool {
	if m != nil {
		return m.OnOff
	}
	return false
}

func (m *GetSwitchStatusResult) GetCode() GetSwitchStatusResult_ResultCode {
	if m != nil {
		return m.Code
	}
	return GetSwitchStatusResult_Success
}

// 获取用户信息、群、超级群信息的请求
type UGetUsersChatsReq struct {
	Userid        int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Users         []int32       `protobuf:"varint,2,rep,packed,name=users" json:"users,omitempty"`
	Chatid        []int32       `protobuf:"varint,3,rep,packed,name=chatid" json:"chatid,omitempty"`
	Channelid     []int32       `protobuf:"varint,4,rep,packed,name=channelid" json:"channelid,omitempty"`
	ProtocolLayer int32         `protobuf:"varint,5,opt,name=protocol_layer,json=protocolLayer,proto3" json:"protocol_layer,omitempty"`
	Dlog          *pbcomm.Debug `protobuf:"bytes,6,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *UGetUsersChatsReq) Reset()                    { *m = UGetUsersChatsReq{} }
func (m *UGetUsersChatsReq) String() string            { return proto.CompactTextString(m) }
func (*UGetUsersChatsReq) ProtoMessage()               {}
func (*UGetUsersChatsReq) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{160} }

func (m *UGetUsersChatsReq) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *UGetUsersChatsReq) GetUsers() []int32 {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *UGetUsersChatsReq) GetChatid() []int32 {
	if m != nil {
		return m.Chatid
	}
	return nil
}

func (m *UGetUsersChatsReq) GetChannelid() []int32 {
	if m != nil {
		return m.Channelid
	}
	return nil
}

func (m *UGetUsersChatsReq) GetProtocolLayer() int32 {
	if m != nil {
		return m.ProtocolLayer
	}
	return 0
}

func (m *UGetUsersChatsReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 获取用户信息、群、超级群信息的返回
type UGetUsersChatsResult struct {
	// repeated ChannelInfoBase channels = 1;
	// repeated GetChatInfoResp chats = 3;
	Channels   [][]byte        `protobuf:"bytes,1,rep,name=channels" json:"channels,omitempty"`
	Users      *UserInfoArray  `protobuf:"bytes,2,opt,name=users" json:"users,omitempty"`
	Chats      [][]byte        `protobuf:"bytes,3,rep,name=chats" json:"chats,omitempty"`
	NoChats    []int32         `protobuf:"varint,4,rep,packed,name=no_chats,json=noChats" json:"no_chats,omitempty"`
	NoChans    []int32         `protobuf:"varint,5,rep,packed,name=no_chans,json=noChans" json:"no_chans,omitempty"`
	Resultcode UChatResultCode `protobuf:"varint,6,opt,name=resultcode,proto3,enum=infoserver.UChatResultCode" json:"resultcode,omitempty"`
}

func (m *UGetUsersChatsResult) Reset()         { *m = UGetUsersChatsResult{} }
func (m *UGetUsersChatsResult) String() string { return proto.CompactTextString(m) }
func (*UGetUsersChatsResult) ProtoMessage()    {}
func (*UGetUsersChatsResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{161}
}

func (m *UGetUsersChatsResult) GetChannels() [][]byte {
	if m != nil {
		return m.Channels
	}
	return nil
}

func (m *UGetUsersChatsResult) GetUsers() *UserInfoArray {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *UGetUsersChatsResult) GetChats() [][]byte {
	if m != nil {
		return m.Chats
	}
	return nil
}

func (m *UGetUsersChatsResult) GetNoChats() []int32 {
	if m != nil {
		return m.NoChats
	}
	return nil
}

func (m *UGetUsersChatsResult) GetNoChans() []int32 {
	if m != nil {
		return m.NoChans
	}
	return nil
}

func (m *UGetUsersChatsResult) GetResultcode() UChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return UChatResultCode_Chat_RPC_OK
}

type UpdateBotInfoSuppReq struct {
	UserId      int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Placeholder string        `protobuf:"bytes,2,opt,name=Placeholder,proto3" json:"Placeholder,omitempty"`
	Geo         bool          `protobuf:"varint,3,opt,name=geo,proto3" json:"geo,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *UpdateBotInfoSuppReq) Reset()         { *m = UpdateBotInfoSuppReq{} }
func (m *UpdateBotInfoSuppReq) String() string { return proto.CompactTextString(m) }
func (*UpdateBotInfoSuppReq) ProtoMessage()    {}
func (*UpdateBotInfoSuppReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{162}
}

func (m *UpdateBotInfoSuppReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateBotInfoSuppReq) GetPlaceholder() string {
	if m != nil {
		return m.Placeholder
	}
	return ""
}

func (m *UpdateBotInfoSuppReq) GetGeo() bool {
	if m != nil {
		return m.Geo
	}
	return false
}

func (m *UpdateBotInfoSuppReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type UpdateBotInfoSuppResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *UpdateBotInfoSuppResult) Reset()         { *m = UpdateBotInfoSuppResult{} }
func (m *UpdateBotInfoSuppResult) String() string { return proto.CompactTextString(m) }
func (*UpdateBotInfoSuppResult) ProtoMessage()    {}
func (*UpdateBotInfoSuppResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{163}
}

func (m *UpdateBotInfoSuppResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

type DeleteUserUsernameReq struct {
	AdminId     int32         `protobuf:"varint,1,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`
	Username    string        `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	ForceDelete bool          `protobuf:"varint,3,opt,name=force_delete,json=forceDelete,proto3" json:"force_delete,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *DeleteUserUsernameReq) Reset()         { *m = DeleteUserUsernameReq{} }
func (m *DeleteUserUsernameReq) String() string { return proto.CompactTextString(m) }
func (*DeleteUserUsernameReq) ProtoMessage()    {}
func (*DeleteUserUsernameReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{164}
}

func (m *DeleteUserUsernameReq) GetAdminId() int32 {
	if m != nil {
		return m.AdminId
	}
	return 0
}

func (m *DeleteUserUsernameReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *DeleteUserUsernameReq) GetForceDelete() bool {
	if m != nil {
		return m.ForceDelete
	}
	return false
}

func (m *DeleteUserUsernameReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type DeleteUserUsernameResult struct {
	Code                 DeleteUserUsernameResult_Code `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.DeleteUserUsernameResult_Code" json:"code,omitempty"`
	InternalErrorMessage string                        `protobuf:"bytes,2,opt,name=internal_error_message,json=internalErrorMessage,proto3" json:"internal_error_message,omitempty"`
	OwnerId              int32                         `protobuf:"varint,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
}

func (m *DeleteUserUsernameResult) Reset()         { *m = DeleteUserUsernameResult{} }
func (m *DeleteUserUsernameResult) String() string { return proto.CompactTextString(m) }
func (*DeleteUserUsernameResult) ProtoMessage()    {}
func (*DeleteUserUsernameResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{165}
}

func (m *DeleteUserUsernameResult) GetCode() DeleteUserUsernameResult_Code {
	if m != nil {
		return m.Code
	}
	return DeleteUserUsernameResult_Success
}

func (m *DeleteUserUsernameResult) GetInternalErrorMessage() string {
	if m != nil {
		return m.InternalErrorMessage
	}
	return ""
}

func (m *DeleteUserUsernameResult) GetOwnerId() int32 {
	if m != nil {
		return m.OwnerId
	}
	return 0
}

type UpdateUserLocationReq struct {
	UserId  int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Country string        `protobuf:"bytes,2,opt,name=Country,proto3" json:"Country,omitempty"`
	City    string        `protobuf:"bytes,3,opt,name=City,proto3" json:"City,omitempty"`
	Detail  string        `protobuf:"bytes,4,opt,name=Detail,proto3" json:"Detail,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *UpdateUserLocationReq) Reset()         { *m = UpdateUserLocationReq{} }
func (m *UpdateUserLocationReq) String() string { return proto.CompactTextString(m) }
func (*UpdateUserLocationReq) ProtoMessage()    {}
func (*UpdateUserLocationReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{166}
}

func (m *UpdateUserLocationReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateUserLocationReq) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *UpdateUserLocationReq) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *UpdateUserLocationReq) GetDetail() string {
	if m != nil {
		return m.Detail
	}
	return ""
}

func (m *UpdateUserLocationReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type UpdateUserLocationResult struct {
	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=Reason,proto3" json:"Reason,omitempty"`
}

func (m *UpdateUserLocationResult) Reset()         { *m = UpdateUserLocationResult{} }
func (m *UpdateUserLocationResult) String() string { return proto.CompactTextString(m) }
func (*UpdateUserLocationResult) ProtoMessage()    {}
func (*UpdateUserLocationResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{167}
}

func (m *UpdateUserLocationResult) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *UpdateUserLocationResult) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type UpdateUserGrenderReq struct {
	UserId  int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Grender int32         `protobuf:"varint,2,opt,name=Grender,proto3" json:"Grender,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *UpdateUserGrenderReq) Reset()         { *m = UpdateUserGrenderReq{} }
func (m *UpdateUserGrenderReq) String() string { return proto.CompactTextString(m) }
func (*UpdateUserGrenderReq) ProtoMessage()    {}
func (*UpdateUserGrenderReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{168}
}

func (m *UpdateUserGrenderReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateUserGrenderReq) GetGrender() int32 {
	if m != nil {
		return m.Grender
	}
	return 0
}

func (m *UpdateUserGrenderReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type UpdateUserGrenderResult struct {
	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=Reason,proto3" json:"Reason,omitempty"`
}

func (m *UpdateUserGrenderResult) Reset()         { *m = UpdateUserGrenderResult{} }
func (m *UpdateUserGrenderResult) String() string { return proto.CompactTextString(m) }
func (*UpdateUserGrenderResult) ProtoMessage()    {}
func (*UpdateUserGrenderResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{169}
}

func (m *UpdateUserGrenderResult) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *UpdateUserGrenderResult) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type UpdateUserEmailReq struct {
	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Email  string        `protobuf:"bytes,2,opt,name=Email,proto3" json:"Email,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *UpdateUserEmailReq) Reset()                    { *m = UpdateUserEmailReq{} }
func (m *UpdateUserEmailReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserEmailReq) ProtoMessage()               {}
func (*UpdateUserEmailReq) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{170} }

func (m *UpdateUserEmailReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateUserEmailReq) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UpdateUserEmailReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type UpdateUserEmailResult struct {
	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=Reason,proto3" json:"Reason,omitempty"`
}

func (m *UpdateUserEmailResult) Reset()         { *m = UpdateUserEmailResult{} }
func (m *UpdateUserEmailResult) String() string { return proto.CompactTextString(m) }
func (*UpdateUserEmailResult) ProtoMessage()    {}
func (*UpdateUserEmailResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{171}
}

func (m *UpdateUserEmailResult) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *UpdateUserEmailResult) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type UploadContactsReq struct {
	KeyId           int64               `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId          int32               `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PhoneContactArr []*PhoneBookContact `protobuf:"bytes,3,rep,name=phoneContactArr" json:"phoneContactArr,omitempty"`
}

func (m *UploadContactsReq) Reset()                    { *m = UploadContactsReq{} }
func (m *UploadContactsReq) String() string            { return proto.CompactTextString(m) }
func (*UploadContactsReq) ProtoMessage()               {}
func (*UploadContactsReq) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{172} }

func (m *UploadContactsReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *UploadContactsReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UploadContactsReq) GetPhoneContactArr() []*PhoneBookContact {
	if m != nil {
		return m.PhoneContactArr
	}
	return nil
}

type UploadContactsResult struct {
	Error   bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *UploadContactsResult) Reset()         { *m = UploadContactsResult{} }
func (m *UploadContactsResult) String() string { return proto.CompactTextString(m) }
func (*UploadContactsResult) ProtoMessage()    {}
func (*UploadContactsResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{173}
}

func (m *UploadContactsResult) GetError() bool {
	if m != nil {
		return m.Error
	}
	return false
}

func (m *UploadContactsResult) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ApplyContactReq struct {
	UserId      int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ApplyUserId int32  `protobuf:"varint,2,opt,name=apply_user_id,json=applyUserId,proto3" json:"apply_user_id,omitempty"`
	WithMessage string `protobuf:"bytes,3,opt,name=with_message,json=withMessage,proto3" json:"with_message,omitempty"`
}

func (m *ApplyContactReq) Reset()                    { *m = ApplyContactReq{} }
func (m *ApplyContactReq) String() string            { return proto.CompactTextString(m) }
func (*ApplyContactReq) ProtoMessage()               {}
func (*ApplyContactReq) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{174} }

func (m *ApplyContactReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ApplyContactReq) GetApplyUserId() int32 {
	if m != nil {
		return m.ApplyUserId
	}
	return 0
}

func (m *ApplyContactReq) GetWithMessage() string {
	if m != nil {
		return m.WithMessage
	}
	return ""
}

type ApplyContactResult struct {
	Error   bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *ApplyContactResult) Reset()                    { *m = ApplyContactResult{} }
func (m *ApplyContactResult) String() string            { return proto.CompactTextString(m) }
func (*ApplyContactResult) ProtoMessage()               {}
func (*ApplyContactResult) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{175} }

func (m *ApplyContactResult) GetError() bool {
	if m != nil {
		return m.Error
	}
	return false
}

func (m *ApplyContactResult) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetAppliedContactsReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *GetAppliedContactsReq) Reset()         { *m = GetAppliedContactsReq{} }
func (m *GetAppliedContactsReq) String() string { return proto.CompactTextString(m) }
func (*GetAppliedContactsReq) ProtoMessage()    {}
func (*GetAppliedContactsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{176}
}

func (m *GetAppliedContactsReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GetAppliedContactsResult struct {
	Error      bool       `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Message    string     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	AppliedArr []*Applied `protobuf:"bytes,3,rep,name=applied_arr,json=appliedArr" json:"applied_arr,omitempty"`
}

func (m *GetAppliedContactsResult) Reset()         { *m = GetAppliedContactsResult{} }
func (m *GetAppliedContactsResult) String() string { return proto.CompactTextString(m) }
func (*GetAppliedContactsResult) ProtoMessage()    {}
func (*GetAppliedContactsResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{177}
}

func (m *GetAppliedContactsResult) GetError() bool {
	if m != nil {
		return m.Error
	}
	return false
}

func (m *GetAppliedContactsResult) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *GetAppliedContactsResult) GetAppliedArr() []*Applied {
	if m != nil {
		return m.AppliedArr
	}
	return nil
}

type Applied struct {
	Id          int64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId      int32     `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ApplyUser   *UserInfo `protobuf:"bytes,3,opt,name=apply_user,json=applyUser" json:"apply_user,omitempty"`
	WithMessage string    `protobuf:"bytes,4,opt,name=with_message,json=withMessage,proto3" json:"with_message,omitempty"`
	Status      int32     `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	Flag        int32     `protobuf:"varint,6,opt,name=flag,proto3" json:"flag,omitempty"`
	Gender      int32     `protobuf:"varint,7,opt,name=gender,proto3" json:"gender,omitempty"`
	Email       string    `protobuf:"bytes,8,opt,name=email,proto3" json:"email,omitempty"`
	Country     string    `protobuf:"bytes,9,opt,name=Country,proto3" json:"Country,omitempty"`
	City        string    `protobuf:"bytes,10,opt,name=City,proto3" json:"City,omitempty"`
	Detail      string    `protobuf:"bytes,11,opt,name=Detail,proto3" json:"Detail,omitempty"`
}

func (m *Applied) Reset()                    { *m = Applied{} }
func (m *Applied) String() string            { return proto.CompactTextString(m) }
func (*Applied) ProtoMessage()               {}
func (*Applied) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{178} }

func (m *Applied) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Applied) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Applied) GetApplyUser() *UserInfo {
	if m != nil {
		return m.ApplyUser
	}
	return nil
}

func (m *Applied) GetWithMessage() string {
	if m != nil {
		return m.WithMessage
	}
	return ""
}

func (m *Applied) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Applied) GetFlag() int32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (m *Applied) GetGender() int32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *Applied) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Applied) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Applied) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Applied) GetDetail() string {
	if m != nil {
		return m.Detail
	}
	return ""
}

type VerifyContactReq struct {
	Id           int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	VerifyUserId int32 `protobuf:"varint,3,opt,name=verify_user_id,json=verifyUserId,proto3" json:"verify_user_id,omitempty"`
	Status       int32 `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *VerifyContactReq) Reset()                    { *m = VerifyContactReq{} }
func (m *VerifyContactReq) String() string            { return proto.CompactTextString(m) }
func (*VerifyContactReq) ProtoMessage()               {}
func (*VerifyContactReq) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{179} }

func (m *VerifyContactReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *VerifyContactReq) GetVerifyUserId() int32 {
	if m != nil {
		return m.VerifyUserId
	}
	return 0
}

func (m *VerifyContactReq) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type VerifyContactResult struct {
	Error   bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *VerifyContactResult) Reset()                    { *m = VerifyContactResult{} }
func (m *VerifyContactResult) String() string            { return proto.CompactTextString(m) }
func (*VerifyContactResult) ProtoMessage()               {}
func (*VerifyContactResult) Descriptor() ([]byte, []int) { return fileDescriptorUserserver, []int{180} }

func (m *VerifyContactResult) GetError() bool {
	if m != nil {
		return m.Error
	}
	return false
}

func (m *VerifyContactResult) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DeleteAppliedContactReq struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *DeleteAppliedContactReq) Reset()         { *m = DeleteAppliedContactReq{} }
func (m *DeleteAppliedContactReq) String() string { return proto.CompactTextString(m) }
func (*DeleteAppliedContactReq) ProtoMessage()    {}
func (*DeleteAppliedContactReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{181}
}

func (m *DeleteAppliedContactReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteAppliedContactResult struct {
	Error   bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *DeleteAppliedContactResult) Reset()         { *m = DeleteAppliedContactResult{} }
func (m *DeleteAppliedContactResult) String() string { return proto.CompactTextString(m) }
func (*DeleteAppliedContactResult) ProtoMessage()    {}
func (*DeleteAppliedContactResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{182}
}

func (m *DeleteAppliedContactResult) GetError() bool {
	if m != nil {
		return m.Error
	}
	return false
}

func (m *DeleteAppliedContactResult) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SearchUserByPhoneReq struct {
	Phone string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (m *SearchUserByPhoneReq) Reset()         { *m = SearchUserByPhoneReq{} }
func (m *SearchUserByPhoneReq) String() string { return proto.CompactTextString(m) }
func (*SearchUserByPhoneReq) ProtoMessage()    {}
func (*SearchUserByPhoneReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{183}
}

func (m *SearchUserByPhoneReq) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

type SearchUserByPhoneResult struct {
	UserInfo *UserInfo `protobuf:"bytes,1,opt,name=user_info,json=userInfo" json:"user_info,omitempty"`
	Gender   int32     `protobuf:"varint,2,opt,name=gender,proto3" json:"gender,omitempty"`
	Email    string    `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Country  string    `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
	City     string    `protobuf:"bytes,5,opt,name=City,proto3" json:"City,omitempty"`
	Detail   string    `protobuf:"bytes,6,opt,name=Detail,proto3" json:"Detail,omitempty"`
}

func (m *SearchUserByPhoneResult) Reset()         { *m = SearchUserByPhoneResult{} }
func (m *SearchUserByPhoneResult) String() string { return proto.CompactTextString(m) }
func (*SearchUserByPhoneResult) ProtoMessage()    {}
func (*SearchUserByPhoneResult) Descriptor() ([]byte, []int) {
	return fileDescriptorUserserver, []int{184}
}

func (m *SearchUserByPhoneResult) GetUserInfo() *UserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

func (m *SearchUserByPhoneResult) GetGender() int32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *SearchUserByPhoneResult) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *SearchUserByPhoneResult) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *SearchUserByPhoneResult) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *SearchUserByPhoneResult) GetDetail() string {
	if m != nil {
		return m.Detail
	}
	return ""
}

func init() {
	proto.RegisterType((*GetUserInfoByIdReq)(nil), "infoserver.GetUserInfoByIdReq")
	proto.RegisterType((*GetUserInfoByIdArrReq)(nil), "infoserver.GetUserInfoByIdArrReq")
	proto.RegisterType((*UserInfoArray)(nil), "infoserver.UserInfoArray")
	proto.RegisterType((*UserInfo)(nil), "infoserver.userInfo")
	proto.RegisterType((*GetUserExpireByIdReq)(nil), "infoserver.GetUserExpireByIdReq")
	proto.RegisterType((*GetUserExpireByIdResult)(nil), "infoserver.GetUserExpireByIdResult")
	proto.RegisterType((*GetUserByphone)(nil), "infoserver.GetUserByphone")
	proto.RegisterType((*GetUserInfoResult)(nil), "infoserver.GetUserInfoResult")
	proto.RegisterType((*GetUserInfoByIdArrResult)(nil), "infoserver.GetUserInfoByIdArrResult")
	proto.RegisterType((*GetUserByUsername)(nil), "infoserver.GetUserByUsername")
	proto.RegisterType((*UpdatePhotoInfoReq)(nil), "infoserver.updatePhotoInfoReq")
	proto.RegisterType((*GetPhotoInfoReq)(nil), "infoserver.GetPhotoInfoReq")
	proto.RegisterType((*UpdateUserPhotoResult)(nil), "infoserver.UpdateUserPhotoResult")
	proto.RegisterType((*GetUserPhotoResult)(nil), "infoserver.GetUserPhotoResult")
	proto.RegisterType((*UpdateUserProfileReq)(nil), "infoserver.UpdateUserProfileReq")
	proto.RegisterType((*UpdateUserProfileResult)(nil), "infoserver.UpdateUserProfileResult")
	proto.RegisterType((*StatusReq)(nil), "infoserver.StatusReq")
	proto.RegisterType((*StatusResult)(nil), "infoserver.StatusResult")
	proto.RegisterType((*UpdateExpireReq)(nil), "infoserver.UpdateExpireReq")
	proto.RegisterType((*UpdateExpireResult)(nil), "infoserver.UpdateExpireResult")
	proto.RegisterType((*UserClusterChange)(nil), "infoserver.UserClusterChange")
	proto.RegisterType((*UserClusterChangeResult)(nil), "infoserver.UserClusterChangeResult")
	proto.RegisterType((*UpdateuserNameReq)(nil), "infoserver.UpdateuserNameReq")
	proto.RegisterType((*UpdateuserNameResult)(nil), "infoserver.UpdateuserNameResult")
	proto.RegisterType((*CheckPhoneRegisterReq)(nil), "infoserver.CheckPhoneRegisterReq")
	proto.RegisterType((*CheckPhoneRegisterResult)(nil), "infoserver.CheckPhoneRegisterResult")
	proto.RegisterType((*DeleteAccountByIdReq)(nil), "infoserver.DeleteAccountByIdReq")
	proto.RegisterType((*DelAccountResult)(nil), "infoserver.DelAccountResult")
	proto.RegisterType((*BotUpdateInfo)(nil), "infoserver.BotUpdateInfo")
	proto.RegisterType((*BotUpdateInfoResult)(nil), "infoserver.BotUpdateInfoResult")
	proto.RegisterType((*DelContactReq)(nil), "infoserver.DelContactReq")
	proto.RegisterType((*DelContactResult)(nil), "infoserver.DelContactResult")
	proto.RegisterType((*ContactIdHash)(nil), "infoserver.ContactIdHash")
	proto.RegisterType((*DelContactArrReq)(nil), "infoserver.DelContactArrReq")
	proto.RegisterType((*CmdResetUserContactsReq)(nil), "infoserver.CmdResetUserContactsReq")
	proto.RegisterType((*CmdResetUserContactsResult)(nil), "infoserver.CmdResetUserContactsResult")
	proto.RegisterType((*DelContactArrResult)(nil), "infoserver.DelContactArrResult")
	proto.RegisterType((*ContatsGetContactsReq)(nil), "infoserver.ContatsGetContactsReq")
	proto.RegisterType((*ContactInfo)(nil), "infoserver.contactInfo")
	proto.RegisterType((*ContatsGetContactsResult)(nil), "infoserver.ContatsGetContactsResult")
	proto.RegisterType((*PhoneBookContact)(nil), "infoserver.PhoneBookContact")
	proto.RegisterType((*ContactsImportPhoneContactsReq)(nil), "infoserver.ContactsImportPhoneContactsReq")
	proto.RegisterType((*ImportContact)(nil), "infoserver.ImportContact")
	proto.RegisterType((*PopularContact)(nil), "infoserver.PopularContact")
	proto.RegisterType((*ContactsImportPhoneContactsResult)(nil), "infoserver.ContactsImportPhoneContactsResult")
	proto.RegisterType((*AddRelationIdInfo)(nil), "infoserver.AddRelationIdInfo")
	proto.RegisterType((*DelRelationIdInfo)(nil), "infoserver.DelRelationIdInfo")
	proto.RegisterType((*AddRelationIdInfoResult)(nil), "infoserver.AddRelationIdInfoResult")
	proto.RegisterType((*DelRelationIdInfoResult)(nil), "infoserver.DelRelationIdInfoResult")
	proto.RegisterType((*BlockeduserReq)(nil), "infoserver.BlockeduserReq")
	proto.RegisterType((*BlockeduserResult)(nil), "infoserver.BlockeduserResult")
	proto.RegisterType((*ContactUnblockedReq)(nil), "infoserver.ContactUnblockedReq")
	proto.RegisterType((*ContactsGetBlockedReq)(nil), "infoserver.ContactsGetBlockedReq")
	proto.RegisterType((*Blockeduser)(nil), "infoserver.blockeduser")
	proto.RegisterType((*ContactsGetBlockedResult)(nil), "infoserver.ContactsGetBlockedResult")
	proto.RegisterType((*SystemWhiteUser)(nil), "infoserver.SystemWhiteUser")
	proto.RegisterType((*StoreSysWhiteUserReq)(nil), "infoserver.StoreSysWhiteUserReq")
	proto.RegisterType((*StoreSysWhiteUserResult)(nil), "infoserver.StoreSysWhiteUserResult")
	proto.RegisterType((*UpdateSystemWhiteUserLevelReq)(nil), "infoserver.UpdateSystemWhiteUserLevelReq")
	proto.RegisterType((*UpdateSystemWhiteUserLevelResult)(nil), "infoserver.UpdateSystemWhiteUserLevelResult")
	proto.RegisterType((*GetSysWhiteUserReq)(nil), "infoserver.GetSysWhiteUserReq")
	proto.RegisterType((*GetSysWhiteUserResult)(nil), "infoserver.GetSysWhiteUserResult")
	proto.RegisterType((*GetSysWhiteUserArrReq)(nil), "infoserver.GetSysWhiteUserArrReq")
	proto.RegisterType((*GetSysWhiteUserArrResult)(nil), "infoserver.GetSysWhiteUserArrResult")
	proto.RegisterType((*DelSysWhiteUserReq)(nil), "infoserver.DelSysWhiteUserReq")
	proto.RegisterType((*DelSysWhiteUserResult)(nil), "infoserver.DelSysWhiteUserResult")
	proto.RegisterType((*UserDc)(nil), "infoserver.UserDc")
	proto.RegisterType((*GetAllDcReq)(nil), "infoserver.GetAllDcReq")
	proto.RegisterType((*SetPrivacyReq)(nil), "infoserver.SetPrivacyReq")
	proto.RegisterType((*SetPrivacyResult)(nil), "infoserver.SetPrivacyResult")
	proto.RegisterType((*GetPrivacyReq)(nil), "infoserver.GetPrivacyReq")
	proto.RegisterType((*CheckPrivacyReq)(nil), "infoserver.CheckPrivacyReq")
	proto.RegisterType((*CheckPrivacyResult)(nil), "infoserver.CheckPrivacyResult")
	proto.RegisterType((*GetPrivacyResult)(nil), "infoserver.GetPrivacyResult")
	proto.RegisterType((*StoreShopStickerSetReq)(nil), "infoserver.StoreShopStickerSetReq")
	proto.RegisterType((*StoreShopStickerSetResult)(nil), "infoserver.StoreShopStickerSetResult")
	proto.RegisterType((*StoreShopStickerSetDocumentsReq)(nil), "infoserver.StoreShopStickerSetDocumentsReq")
	proto.RegisterType((*StoreShopStickerSetDocumentsResult)(nil), "infoserver.StoreShopStickerSetDocumentsResult")
	proto.RegisterType((*DeleteStickerSetReq)(nil), "infoserver.DeleteStickerSetReq")
	proto.RegisterType((*DeleteStickerSetResult)(nil), "infoserver.DeleteStickerSetResult")
	proto.RegisterType((*StickerSetInfo)(nil), "infoserver.StickerSetInfo")
	proto.RegisterType((*GetStickerSetInfoReq)(nil), "infoserver.GetStickerSetInfoReq")
	proto.RegisterType((*GetStickerSetInfoResult)(nil), "infoserver.GetStickerSetInfoResult")
	proto.RegisterType((*StickerPackDocumentBase)(nil), "infoserver.StickerPackDocumentBase")
	proto.RegisterType((*StickerPackDocumentInfo)(nil), "infoserver.StickerPackDocumentInfo")
	proto.RegisterType((*StoreStickerPackDcReq)(nil), "infoserver.StoreStickerPackDcReq")
	proto.RegisterType((*StoreStickerPackDcResult)(nil), "infoserver.StoreStickerPackDcResult")
	proto.RegisterType((*StoreStickerPackDcArrReq)(nil), "infoserver.StoreStickerPackDcArrReq")
	proto.RegisterType((*StoreStickerPackDcArrResult)(nil), "infoserver.StoreStickerPackDcArrResult")
	proto.RegisterType((*GetStickerSetPackDcInfosReq)(nil), "infoserver.GetStickerSetPackDcInfosReq")
	proto.RegisterType((*GetStickerSetPackDcInfosResult)(nil), "infoserver.GetStickerSetPackDcInfosResult")
	proto.RegisterType((*AddOrDeleteFaveSticerReq)(nil), "infoserver.AddOrDeleteFaveSticerReq")
	proto.RegisterType((*AddOrDeleteFaveSticerResult)(nil), "infoserver.AddOrDeleteFaveSticerResult")
	proto.RegisterType((*GetFavedStickersReq)(nil), "infoserver.GetFavedStickersReq")
	proto.RegisterType((*GetFavedStickersResult)(nil), "infoserver.GetFavedStickersResult")
	proto.RegisterType((*StickerPack)(nil), "infoserver.StickerPack")
	proto.RegisterType((*StoreUserStickerSetReq)(nil), "infoserver.StoreUserStickerSetReq")
	proto.RegisterType((*StoreUserStickerSetResult)(nil), "infoserver.StoreUserStickerSetResult")
	proto.RegisterType((*UpdateUserStickerSetDisabledReq)(nil), "infoserver.UpdateUserStickerSetDisabledReq")
	proto.RegisterType((*UpdateUserStickerSetDisabledResult)(nil), "infoserver.UpdateUserStickerSetDisabledResult")
	proto.RegisterType((*UpdateUserStickerSetOrderReq)(nil), "infoserver.UpdateUserStickerSetOrderReq")
	proto.RegisterType((*UpdateUserStickerSetOrderResult)(nil), "infoserver.UpdateUserStickerSetOrderResult")
	proto.RegisterType((*UpdateUserStickerSetInstallArReq)(nil), "infoserver.UpdateUserStickerSetInstallArReq")
	proto.RegisterType((*UpdateUserStickerSetInstallArResult)(nil), "infoserver.UpdateUserStickerSetInstallArResult")
	proto.RegisterType((*DeleteuserStickerReq)(nil), "infoserver.DeleteuserStickerReq")
	proto.RegisterType((*DeleteuserStickerResult)(nil), "infoserver.DeleteuserStickerResult")
	proto.RegisterType((*UserStickerInfo)(nil), "infoserver.UserStickerInfo")
	proto.RegisterType((*UserStickerInfoArr)(nil), "infoserver.UserStickerInfoArr")
	proto.RegisterType((*StickerSetInfoArr)(nil), "infoserver.StickerSetInfoArr")
	proto.RegisterType((*GetuserAllStickersReq)(nil), "infoserver.GetuserAllStickersReq")
	proto.RegisterType((*GetuserAllStickersResult)(nil), "infoserver.GetuserAllStickersResult")
	proto.RegisterType((*GetAllStickerSetsReq)(nil), "infoserver.GetAllStickerSetsReq")
	proto.RegisterType((*GetAllStickerSetsResult)(nil), "infoserver.GetAllStickerSetsResult")
	proto.RegisterType((*DeleteStickerPackDocumentReq)(nil), "infoserver.DeleteStickerPackDocumentReq")
	proto.RegisterType((*DeleteStickerPackDocumentResult)(nil), "infoserver.DeleteStickerPackDocumentResult")
	proto.RegisterType((*GetAuthorStickerSetReq)(nil), "infoserver.GetAuthorStickerSetReq")
	proto.RegisterType((*GetAuthorStickerSetResult)(nil), "infoserver.GetAuthorStickerSetResult")
	proto.RegisterType((*GetAuthorAllStickerSetReq)(nil), "infoserver.GetAuthorAllStickerSetReq")
	proto.RegisterType((*GetAuthorAllStickerSetResult)(nil), "infoserver.GetAuthorAllStickerSetResult")
	proto.RegisterType((*AuthorStickerSet)(nil), "infoserver.AuthorStickerSet")
	proto.RegisterType((*CountAuthorAllStickerSetReq)(nil), "infoserver.CountAuthorAllStickerSetReq")
	proto.RegisterType((*CountAuthorAllStickerSetResult)(nil), "infoserver.CountAuthorAllStickerSetResult")
	proto.RegisterType((*UserGifInfoArr)(nil), "infoserver.userGifInfoArr")
	proto.RegisterType((*UserSaveGifInfo)(nil), "infoserver.userSaveGifInfo")
	proto.RegisterType((*SaveUserGifReq)(nil), "infoserver.SaveUserGifReq")
	proto.RegisterType((*SaveUserGifResult)(nil), "infoserver.SaveUserGifResult")
	proto.RegisterType((*DelUserGifReq)(nil), "infoserver.DelUserGifReq")
	proto.RegisterType((*DelUserGifResult)(nil), "infoserver.DelUserGifResult")
	proto.RegisterType((*GetUserGifsReq)(nil), "infoserver.GetUserGifsReq")
	proto.RegisterType((*GetUserGifsResult)(nil), "infoserver.GetUserGifsResult")
	proto.RegisterType((*CheckUserIsBlockedReq)(nil), "infoserver.CheckUserIsBlockedReq")
	proto.RegisterType((*CheckUserIsBlockedResult)(nil), "infoserver.CheckUserIsBlockedResult")
	proto.RegisterType((*RegisterUserInfo)(nil), "infoserver.registerUserInfo")
	proto.RegisterType((*UpdateUserInfoResult)(nil), "infoserver.UpdateUserInfoResult")
	proto.RegisterType((*CheckUserAccessHashValidReq)(nil), "infoserver.checkUserAccessHashValidReq")
	proto.RegisterType((*CheckUserAccessHashValidResult)(nil), "infoserver.checkUserAccessHashValidResult")
	proto.RegisterType((*RegisterUserInfoReq)(nil), "infoserver.RegisterUserInfoReq")
	proto.RegisterType((*RegisterUserInfoResult)(nil), "infoserver.RegisterUserInfoResult")
	proto.RegisterType((*GetNotifySettingsReq)(nil), "infoserver.GetNotifySettingsReq")
	proto.RegisterType((*GetNotifySettingsResult)(nil), "infoserver.GetNotifySettingsResult")
	proto.RegisterType((*UpdateNotifySettingsReq)(nil), "infoserver.UpdateNotifySettingsReq")
	proto.RegisterType((*UpdateNotifySettingsResult)(nil), "infoserver.UpdateNotifySettingsResult")
	proto.RegisterType((*GetContactsStatusReq)(nil), "infoserver.GetContactsStatusReq")
	proto.RegisterType((*UserStaus)(nil), "infoserver.UserStaus")
	proto.RegisterType((*GetContactsStatusResult)(nil), "infoserver.GetContactsStatusResult")
	proto.RegisterType((*UpdateBotPicRequest)(nil), "infoserver.UpdateBotPicRequest")
	proto.RegisterType((*UpdateBotPicResult)(nil), "infoserver.UpdateBotPicResult")
	proto.RegisterType((*GetAllProxyConfigReq)(nil), "infoserver.GetAllProxyConfigReq")
	proto.RegisterType((*ProxyAddr)(nil), "infoserver.ProxyAddr")
	proto.RegisterType((*GetAllProxyConfigResult)(nil), "infoserver.GetAllProxyConfigResult")
	proto.RegisterType((*CheckUserNameOccupiedReq)(nil), "infoserver.CheckUserNameOccupiedReq")
	proto.RegisterType((*CheckUserNameOccupiedResult)(nil), "infoserver.CheckUserNameOccupiedResult")
	proto.RegisterType((*GetUserGpsReq)(nil), "infoserver.GetUserGpsReq")
	proto.RegisterType((*GetUserGpsResult)(nil), "infoserver.GetUserGpsResult")
	proto.RegisterType((*CheckSelfIsContactReq)(nil), "infoserver.CheckSelfIsContactReq")
	proto.RegisterType((*CheckSelfIsContactResult)(nil), "infoserver.CheckSelfIsContactResult")
	proto.RegisterType((*UpdateSwitchReq)(nil), "infoserver.UpdateSwitchReq")
	proto.RegisterType((*UpdateSwitchResult)(nil), "infoserver.UpdateSwitchResult")
	proto.RegisterType((*GetSwitchStatusReq)(nil), "infoserver.GetSwitchStatusReq")
	proto.RegisterType((*GetSwitchStatusResult)(nil), "infoserver.GetSwitchStatusResult")
	proto.RegisterType((*UGetUsersChatsReq)(nil), "infoserver.UGetUsersChatsReq")
	proto.RegisterType((*UGetUsersChatsResult)(nil), "infoserver.UGetUsersChatsResult")
	proto.RegisterType((*UpdateBotInfoSuppReq)(nil), "infoserver.UpdateBotInfoSuppReq")
	proto.RegisterType((*UpdateBotInfoSuppResult)(nil), "infoserver.UpdateBotInfoSuppResult")
	proto.RegisterType((*DeleteUserUsernameReq)(nil), "infoserver.DeleteUserUsernameReq")
	proto.RegisterType((*DeleteUserUsernameResult)(nil), "infoserver.DeleteUserUsernameResult")
	proto.RegisterType((*UpdateUserLocationReq)(nil), "infoserver.UpdateUserLocationReq")
	proto.RegisterType((*UpdateUserLocationResult)(nil), "infoserver.UpdateUserLocationResult")
	proto.RegisterType((*UpdateUserGrenderReq)(nil), "infoserver.UpdateUserGrenderReq")
	proto.RegisterType((*UpdateUserGrenderResult)(nil), "infoserver.UpdateUserGrenderResult")
	proto.RegisterType((*UpdateUserEmailReq)(nil), "infoserver.UpdateUserEmailReq")
	proto.RegisterType((*UpdateUserEmailResult)(nil), "infoserver.UpdateUserEmailResult")
	proto.RegisterType((*UploadContactsReq)(nil), "infoserver.UploadContactsReq")
	proto.RegisterType((*UploadContactsResult)(nil), "infoserver.UploadContactsResult")
	proto.RegisterType((*ApplyContactReq)(nil), "infoserver.ApplyContactReq")
	proto.RegisterType((*ApplyContactResult)(nil), "infoserver.ApplyContactResult")
	proto.RegisterType((*GetAppliedContactsReq)(nil), "infoserver.GetAppliedContactsReq")
	proto.RegisterType((*GetAppliedContactsResult)(nil), "infoserver.GetAppliedContactsResult")
	proto.RegisterType((*Applied)(nil), "infoserver.Applied")
	proto.RegisterType((*VerifyContactReq)(nil), "infoserver.VerifyContactReq")
	proto.RegisterType((*VerifyContactResult)(nil), "infoserver.VerifyContactResult")
	proto.RegisterType((*DeleteAppliedContactReq)(nil), "infoserver.DeleteAppliedContactReq")
	proto.RegisterType((*DeleteAppliedContactResult)(nil), "infoserver.DeleteAppliedContactResult")
	proto.RegisterType((*SearchUserByPhoneReq)(nil), "infoserver.SearchUserByPhoneReq")
	proto.RegisterType((*SearchUserByPhoneResult)(nil), "infoserver.SearchUserByPhoneResult")
	proto.RegisterEnum("infoserver.ReErrCode", ReErrCode_name, ReErrCode_value)
	proto.RegisterEnum("infoserver.Switch", Switch_name, Switch_value)
	proto.RegisterEnum("infoserver.UChatResultCode", UChatResultCode_name, UChatResultCode_value)
	proto.RegisterEnum("infoserver.UpdateSwitchResult_ResultCode", UpdateSwitchResult_ResultCode_name, UpdateSwitchResult_ResultCode_value)
	proto.RegisterEnum("infoserver.GetSwitchStatusResult_ResultCode", GetSwitchStatusResult_ResultCode_name, GetSwitchStatusResult_ResultCode_value)
	proto.RegisterEnum("infoserver.DeleteUserUsernameResult_Code", DeleteUserUsernameResult_Code_name, DeleteUserUsernameResult_Code_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserServerService service

type UserServerServiceClient interface {
	// 注册指定用户的接口()
	RegisterUserInfo(ctx context.Context, in *RegisterUserInfoReq, opts ...grpc.CallOption) (*RegisterUserInfoResult, error)
	// 获取用户信息
	GetUserInfoById(ctx context.Context, in *GetUserInfoByIdReq, opts ...grpc.CallOption) (*GetUserInfoResult, error)
	GetUserInfoByIdArr(ctx context.Context, in *GetUserInfoByIdArrReq, opts ...grpc.CallOption) (*GetUserInfoByIdArrResult, error)
	// 获取账号的销毁时间f
	GetUserExpierById(ctx context.Context, in *GetUserExpireByIdReq, opts ...grpc.CallOption) (*GetUserExpireByIdResult, error)
	// 通过用户电话号码获取用户基本信息
	GetUserInfoByPhone(ctx context.Context, in *GetUserByphone, opts ...grpc.CallOption) (*GetUserInfoResult, error)
	// 通过username获取用户基本信息
	GetUserInfoByUsername(ctx context.Context, in *GetUserByUsername, opts ...grpc.CallOption) (*GetUserInfoResult, error)
	// 更新用户头像
	UpdateUserPhoto(ctx context.Context, in *UpdatePhotoInfoReq, opts ...grpc.CallOption) (*UpdateUserPhotoResult, error)
	// 获取用户头像
	GetUserPhoto(ctx context.Context, in *GetPhotoInfoReq, opts ...grpc.CallOption) (*GetUserPhotoResult, error)
	// 更新用户名称和about
	UpdateUserProfile(ctx context.Context, in *UpdateUserProfileReq, opts ...grpc.CallOption) (*UpdateUserProfileResult, error)
	// 更新用户用户status
	UpdateUserStatus(ctx context.Context, in *StatusReq, opts ...grpc.CallOption) (*StatusResult, error)
	// update user online status
	UpdateUserStatusV2(ctx context.Context, in *StatusReq, opts ...grpc.CallOption) (*StatusResult, error)
	// 设置用户账号销毁时间
	UpdateUserExpire(ctx context.Context, in *UpdateExpireReq, opts ...grpc.CallOption) (*UpdateExpireResult, error)
	// 用户DC的迁移
	UpdateUserCluster(ctx context.Context, in *UserClusterChange, opts ...grpc.CallOption) (*UserClusterChangeResult, error)
	// 更新用户的username
	UpdateUserName(ctx context.Context, in *UpdateuserNameReq, opts ...grpc.CallOption) (*UpdateuserNameResult, error)
	// 校验用户名称是否被占用
	CheckUserNameOccupied(ctx context.Context, in *CheckUserNameOccupiedReq, opts ...grpc.CallOption) (*CheckUserNameOccupiedResult, error)
	// 检查电话号码是否已经注册
	CheckPhoneRegister(ctx context.Context, in *CheckPhoneRegisterReq, opts ...grpc.CallOption) (*CheckPhoneRegisterResult, error)
	// 账号(标记删除)
	DeleteUserInfoById(ctx context.Context, in *DeleteAccountByIdReq, opts ...grpc.CallOption) (*DelAccountResult, error)
	// 更新机器人相关信息
	UpdateBotInfo(ctx context.Context, in *BotUpdateInfo, opts ...grpc.CallOption) (*BotUpdateInfoResult, error)
	// 更新机器人头像
	UpdateBotPic(ctx context.Context, in *UpdateBotPicRequest, opts ...grpc.CallOption) (*UpdateBotPicResult, error)
	// 检测用户哈希是否合法
	CheckUserAccessHashValid(ctx context.Context, in *CheckUserAccessHashValidReq, opts ...grpc.CallOption) (*CheckUserAccessHashValidResult, error)
	// ********************************联系人的相关接口
	// 删除单个联系人的接口
	ContactsDelContact(ctx context.Context, in *DelContactReq, opts ...grpc.CallOption) (*DelContactResult, error)
	// 批量删除用户联系人的接口
	ContactsDelContactsArr(ctx context.Context, in *DelContactArrReq, opts ...grpc.CallOption) (*DelContactArrResult, error)
	// 重置用户联系人信息，删除所有联系人
	CmdResetUserContacts(ctx context.Context, in *CmdResetUserContactsReq, opts ...grpc.CallOption) (*CmdResetUserContactsResult, error)
	// 获取用户联系人列表
	ContactsGetContacts(ctx context.Context, in *ContatsGetContactsReq, opts ...grpc.CallOption) (*ContatsGetContactsResult, error)
	// 批量导入联系人的操作(具体业务逻辑在用户服务来实现)
	ImportContacts(ctx context.Context, in *ContactsImportPhoneContactsReq, opts ...grpc.CallOption) (*ContactsImportPhoneContactsResult, error)
	// 获取自己所有联系人的在线状态
	GetContactsStatus(ctx context.Context, in *GetContactsStatusReq, opts ...grpc.CallOption) (*GetContactsStatusResult, error)
	// 检测自己是否是对方的联系人
	CheckSelfIsContact(ctx context.Context, in *CheckSelfIsContactReq, opts ...grpc.CallOption) (*CheckSelfIsContactResult, error)
	// ************用户关联表 用户在线状态的更新*******************
	// 创建dialog的增加用户关系（单聊）
	DialogUserRelation(ctx context.Context, in *AddRelationIdInfo, opts ...grpc.CallOption) (*AddRelationIdInfoResult, error)
	// 删除dialog的剔除用户关系
	DelDialogUserRelation(ctx context.Context, in *DelRelationIdInfo, opts ...grpc.CallOption) (*DelRelationIdInfoResult, error)
	// **********用户黑名单的管理 ***************
	// 拉黑用户
	BlockedUser(ctx context.Context, in *BlockeduserReq, opts ...grpc.CallOption) (*BlockeduserResult, error)
	// 移除拉黑的用户
	ContactUnBlockedUser(ctx context.Context, in *ContactUnblockedReq, opts ...grpc.CallOption) (*BlockeduserResult, error)
	// 获取用户的黑明单列表
	ContactsGetBlocked(ctx context.Context, in *ContactsGetBlockedReq, opts ...grpc.CallOption) (*ContactsGetBlockedResult, error)
	// 检测用户是否是黑名单
	CheckUserIsBlocked(ctx context.Context, in *CheckUserIsBlockedReq, opts ...grpc.CallOption) (*CheckUserIsBlockedResult, error)
	// ***********系统白名单的相关操作和管理*******************
	// 存储白名单
	StoreSystemWhiteUser(ctx context.Context, in *StoreSysWhiteUserReq, opts ...grpc.CallOption) (*StoreSysWhiteUserResult, error)
	// 更新用户白名单的级别
	UpdateSystemWhiteUserLevel(ctx context.Context, in *UpdateSystemWhiteUserLevelReq, opts ...grpc.CallOption) (*UpdateSystemWhiteUserLevelResult, error)
	// 获取指定的白名单人信息
	GetSysWhiteUser(ctx context.Context, in *GetSysWhiteUserReq, opts ...grpc.CallOption) (*GetSysWhiteUserResult, error)
	// 获取白名单列表 )
	GetSysWhiteUserArr(ctx context.Context, in *GetSysWhiteUserArrReq, opts ...grpc.CallOption) (*GetSysWhiteUserArrResult, error)
	// 移除指定的白名单人
	DelSysWhiteUser(ctx context.Context, in *DelSysWhiteUserReq, opts ...grpc.CallOption) (*DelSysWhiteUserResult, error)
	// 拉取所有用户的DC
	GetAllUserDc(ctx context.Context, in *GetAllDcReq, opts ...grpc.CallOption) (UserServerService_GetAllUserDcClient, error)
	// ************************* 有关隐私选项设置的接口们 ****************************************
	// 设置隐私选项的接口
	SetUserPrivacy(ctx context.Context, in *SetPrivacyReq, opts ...grpc.CallOption) (*SetPrivacyResult, error)
	// 获取隐私选项的接口
	GetUserPrivacy(ctx context.Context, in *GetPrivacyReq, opts ...grpc.CallOption) (*GetPrivacyResult, error)
	// 检测用户的隐私选项
	CheckUserPrivacy(ctx context.Context, in *CheckPrivacyReq, opts ...grpc.CallOption) (*CheckPrivacyResult, error)
	// ************************* 有关sticker的设置和获取 ****************************************
	// 存储sticker集合的概要
	StoreStickerSet(ctx context.Context, in *StoreShopStickerSetReq, opts ...grpc.CallOption) (*StoreShopStickerSetResult, error)
	// 存储sickerSet 的documents
	StoreStickerSetDocument(ctx context.Context, in *StoreShopStickerSetDocumentsReq, opts ...grpc.CallOption) (*StoreShopStickerSetDocumentsResult, error)
	// 删除指定的sticker集合
	DeleteShopStickerSet(ctx context.Context, in *DeleteStickerSetReq, opts ...grpc.CallOption) (*DeleteStickerSetResult, error)
	// 获取指定的sticker集合
	GetStickerSetInfo(ctx context.Context, in *GetStickerSetInfoReq, opts ...grpc.CallOption) (*StickerSetInfo, error)
	// 存储stickerSet下面的单个贴图
	StoreStickerPackDc(ctx context.Context, in *StoreStickerPackDcReq, opts ...grpc.CallOption) (*StoreStickerPackDcResult, error)
	// 批量导入sticker
	StoreStickerPackDcArr(ctx context.Context, in *StoreStickerPackDcArrReq, opts ...grpc.CallOption) (*StoreStickerPackDcArrResult, error)
	// 获取一个sticker下面的所有贴图信息
	GetStickerSetPackDcInfos(ctx context.Context, in *GetStickerSetPackDcInfosReq, opts ...grpc.CallOption) (*GetStickerSetPackDcInfosResult, error)
	// 添加或者取消喜欢的sticker unfave = true: 取消喜欢 unfave = false: 添加为喜欢
	AddOrDeleteFaveSticer(ctx context.Context, in *AddOrDeleteFaveSticerReq, opts ...grpc.CallOption) (*AddOrDeleteFaveSticerResult, error)
	// 获取已经添加的的喜爱单个贴图集合
	GetFavedStickers(ctx context.Context, in *GetFavedStickersReq, opts ...grpc.CallOption) (*GetFavedStickersResult, error)
	// ***************用户安装sticker的操作*******
	StoreUserStickerSet(ctx context.Context, in *StoreUserStickerSetReq, opts ...grpc.CallOption) (*StoreUserStickerSetResult, error)
	// 更新sticker的用户禁用状态
	UpdateUserStickerDisable(ctx context.Context, in *UpdateUserStickerSetDisabledReq, opts ...grpc.CallOption) (*UpdateUserStickerSetDisabledResult, error)
	// 更新sticker的order
	UpdateUserStickerOrder(ctx context.Context, in *UpdateUserStickerSetOrderReq, opts ...grpc.CallOption) (*UpdateUserStickerSetOrderResult, error)
	// 更新sticker的installed和archived
	UpdateUserStickerInstallArchived(ctx context.Context, in *UpdateUserStickerSetInstallArReq, opts ...grpc.CallOption) (*UpdateUserStickerSetInstallArResult, error)
	// 删除用户指定的Sticker
	DeleteUserSticker(ctx context.Context, in *DeleteuserStickerReq, opts ...grpc.CallOption) (*DeleteuserStickerResult, error)
	// 获取用户sticker集合信息
	GetuserAllStickers(ctx context.Context, in *GetuserAllStickersReq, opts ...grpc.CallOption) (*GetuserAllStickersResult, error)
	// 获取所有sticker集合信息
	GetAllStickerSets(ctx context.Context, in *GetAllStickerSetsReq, opts ...grpc.CallOption) (*GetAllStickerSetsResult, error)
	// 删除指定sticker包的单个sticker
	DeleteStickerPackDocument(ctx context.Context, in *DeleteStickerPackDocumentReq, opts ...grpc.CallOption) (*DeleteStickerPackDocumentResult, error)
	// 根据setId查询作者的sticker
	GetAuthorStickerSet(ctx context.Context, in *GetAuthorStickerSetReq, opts ...grpc.CallOption) (*GetAuthorStickerSetResult, error)
	// 查询作者所有的sticker
	GetAuthorAllStickerSet(ctx context.Context, in *GetAuthorAllStickerSetReq, opts ...grpc.CallOption) (*GetAuthorAllStickerSetResult, error)
	// 计算作者拥有sticker数量
	CountAuthorAllStickerSet(ctx context.Context, in *CountAuthorAllStickerSetReq, opts ...grpc.CallOption) (*CountAuthorAllStickerSetResult, error)
	// ********************用户动态图的接口们 *********
	// 保存gif动态图
	SaveUserGif(ctx context.Context, in *SaveUserGifReq, opts ...grpc.CallOption) (*SaveUserGifResult, error)
	// 删除动态图
	DelUserGif(ctx context.Context, in *DelUserGifReq, opts ...grpc.CallOption) (*DelUserGifResult, error)
	// 获取用户的gifs
	GetUserGifs(ctx context.Context, in *GetUserGifsReq, opts ...grpc.CallOption) (*GetUserGifsResult, error)
	// ********************推送音效等设置 *****************
	// 获取音效设置
	GetNotifySettings(ctx context.Context, in *GetNotifySettingsReq, opts ...grpc.CallOption) (*GetNotifySettingsResult, error)
	// 更新音效设置
	UpdateNotifySettings(ctx context.Context, in *UpdateNotifySettingsReq, opts ...grpc.CallOption) (*UpdateNotifySettingsResult, error)
	// ********************代理配置的获取 *****************
	// 获取所有的代理的配置们
	GetAllProxyConfig(ctx context.Context, in *GetAllProxyConfigReq, opts ...grpc.CallOption) (*GetAllProxyConfigResult, error)
	// ********* 用户相关的GPS *********
	GetUserGps(ctx context.Context, in *GetUserGpsReq, opts ...grpc.CallOption) (*GetUserGpsResult, error)
	// ********* switches ****************
	UpdateSwitch(ctx context.Context, in *UpdateSwitchReq, opts ...grpc.CallOption) (*UpdateSwitchResult, error)
	GetSwitchStatus(ctx context.Context, in *GetSwitchStatusReq, opts ...grpc.CallOption) (*GetSwitchStatusResult, error)
	// ****************** only for  simple chat *************************
	UpdateUserGrender(ctx context.Context, in *UpdateUserGrenderReq, opts ...grpc.CallOption) (*UpdateUserGrenderResult, error)
	UpdateUserEmail(ctx context.Context, in *UpdateUserEmailReq, opts ...grpc.CallOption) (*UpdateUserEmailResult, error)
	UpdateUserLocation(ctx context.Context, in *UpdateUserLocationReq, opts ...grpc.CallOption) (*UpdateUserLocationResult, error)
	// 上传保存联系人
	UploadContacts(ctx context.Context, in *UploadContactsReq, opts ...grpc.CallOption) (*UploadContactsResult, error)
	// 联系人申请
	ApplyContact(ctx context.Context, in *ApplyContactReq, opts ...grpc.CallOption) (*ApplyContactResult, error)
	// 确认添加申请
	VerifyContact(ctx context.Context, in *VerifyContactReq, opts ...grpc.CallOption) (*VerifyContactResult, error)
	// 获取被添加用户申请列表
	GetAppliedContacts(ctx context.Context, in *GetAppliedContactsReq, opts ...grpc.CallOption) (*GetAppliedContactsResult, error)
	// 删除单个申请列表
	DeleteAppliedContact(ctx context.Context, in *DeleteAppliedContactReq, opts ...grpc.CallOption) (*DeleteAppliedContactResult, error)
	// 联系人搜索用户
	SearchUserByPhone(ctx context.Context, in *SearchUserByPhoneReq, opts ...grpc.CallOption) (*SearchUserByPhoneResult, error)
	// delete username
	DeleteUserUsername(ctx context.Context, in *DeleteUserUsernameReq, opts ...grpc.CallOption) (*DeleteUserUsernameResult, error)
	// 补充 更新机器人相关信息
	UpdateBotInfoSupp(ctx context.Context, in *UpdateBotInfoSuppReq, opts ...grpc.CallOption) (*UpdateBotInfoSuppResult, error)
	UGetUsersChats(ctx context.Context, in *UGetUsersChatsReq, opts ...grpc.CallOption) (*UGetUsersChatsResult, error)
}

type userServerServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServerServiceClient(cc *grpc.ClientConn) UserServerServiceClient {
	return &userServerServiceClient{cc}
}

func (c *userServerServiceClient) RegisterUserInfo(ctx context.Context, in *RegisterUserInfoReq, opts ...grpc.CallOption) (*RegisterUserInfoResult, error) {
	out := new(RegisterUserInfoResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/RegisterUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserInfoById(ctx context.Context, in *GetUserInfoByIdReq, opts ...grpc.CallOption) (*GetUserInfoResult, error) {
	out := new(GetUserInfoResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/GetUserInfoById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserInfoByIdArr(ctx context.Context, in *GetUserInfoByIdArrReq, opts ...grpc.CallOption) (*GetUserInfoByIdArrResult, error) {
	out := new(GetUserInfoByIdArrResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/GetUserInfoByIdArr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserExpierById(ctx context.Context, in *GetUserExpireByIdReq, opts ...grpc.CallOption) (*GetUserExpireByIdResult, error) {
	out := new(GetUserExpireByIdResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/GetUserExpierById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserInfoByPhone(ctx context.Context, in *GetUserByphone, opts ...grpc.CallOption) (*GetUserInfoResult, error) {
	out := new(GetUserInfoResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/GetUserInfoByPhone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserInfoByUsername(ctx context.Context, in *GetUserByUsername, opts ...grpc.CallOption) (*GetUserInfoResult, error) {
	out := new(GetUserInfoResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/GetUserInfoByUsername", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserPhoto(ctx context.Context, in *UpdatePhotoInfoReq, opts ...grpc.CallOption) (*UpdateUserPhotoResult, error) {
	out := new(UpdateUserPhotoResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/UpdateUserPhoto", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserPhoto(ctx context.Context, in *GetPhotoInfoReq, opts ...grpc.CallOption) (*GetUserPhotoResult, error) {
	out := new(GetUserPhotoResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/GetUserPhoto", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserProfile(ctx context.Context, in *UpdateUserProfileReq, opts ...grpc.CallOption) (*UpdateUserProfileResult, error) {
	out := new(UpdateUserProfileResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/UpdateUserProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserStatus(ctx context.Context, in *StatusReq, opts ...grpc.CallOption) (*StatusResult, error) {
	out := new(StatusResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/UpdateUserStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserStatusV2(ctx context.Context, in *StatusReq, opts ...grpc.CallOption) (*StatusResult, error) {
	out := new(StatusResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/UpdateUserStatusV2", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserExpire(ctx context.Context, in *UpdateExpireReq, opts ...grpc.CallOption) (*UpdateExpireResult, error) {
	out := new(UpdateExpireResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/UpdateUserExpire", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserCluster(ctx context.Context, in *UserClusterChange, opts ...grpc.CallOption) (*UserClusterChangeResult, error) {
	out := new(UserClusterChangeResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/UpdateUserCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserName(ctx context.Context, in *UpdateuserNameReq, opts ...grpc.CallOption) (*UpdateuserNameResult, error) {
	out := new(UpdateuserNameResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/UpdateUserName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckUserNameOccupied(ctx context.Context, in *CheckUserNameOccupiedReq, opts ...grpc.CallOption) (*CheckUserNameOccupiedResult, error) {
	out := new(CheckUserNameOccupiedResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/CheckUserNameOccupied", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckPhoneRegister(ctx context.Context, in *CheckPhoneRegisterReq, opts ...grpc.CallOption) (*CheckPhoneRegisterResult, error) {
	out := new(CheckPhoneRegisterResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/CheckPhoneRegister", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DeleteUserInfoById(ctx context.Context, in *DeleteAccountByIdReq, opts ...grpc.CallOption) (*DelAccountResult, error) {
	out := new(DelAccountResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/DeleteUserInfoById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateBotInfo(ctx context.Context, in *BotUpdateInfo, opts ...grpc.CallOption) (*BotUpdateInfoResult, error) {
	out := new(BotUpdateInfoResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/UpdateBotInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateBotPic(ctx context.Context, in *UpdateBotPicRequest, opts ...grpc.CallOption) (*UpdateBotPicResult, error) {
	out := new(UpdateBotPicResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/UpdateBotPic", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckUserAccessHashValid(ctx context.Context, in *CheckUserAccessHashValidReq, opts ...grpc.CallOption) (*CheckUserAccessHashValidResult, error) {
	out := new(CheckUserAccessHashValidResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/checkUserAccessHashValid", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ContactsDelContact(ctx context.Context, in *DelContactReq, opts ...grpc.CallOption) (*DelContactResult, error) {
	out := new(DelContactResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/ContactsDelContact", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ContactsDelContactsArr(ctx context.Context, in *DelContactArrReq, opts ...grpc.CallOption) (*DelContactArrResult, error) {
	out := new(DelContactArrResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/ContactsDelContactsArr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CmdResetUserContacts(ctx context.Context, in *CmdResetUserContactsReq, opts ...grpc.CallOption) (*CmdResetUserContactsResult, error) {
	out := new(CmdResetUserContactsResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/CmdResetUserContacts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ContactsGetContacts(ctx context.Context, in *ContatsGetContactsReq, opts ...grpc.CallOption) (*ContatsGetContactsResult, error) {
	out := new(ContatsGetContactsResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/ContactsGetContacts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ImportContacts(ctx context.Context, in *ContactsImportPhoneContactsReq, opts ...grpc.CallOption) (*ContactsImportPhoneContactsResult, error) {
	out := new(ContactsImportPhoneContactsResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/ImportContacts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetContactsStatus(ctx context.Context, in *GetContactsStatusReq, opts ...grpc.CallOption) (*GetContactsStatusResult, error) {
	out := new(GetContactsStatusResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/GetContactsStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckSelfIsContact(ctx context.Context, in *CheckSelfIsContactReq, opts ...grpc.CallOption) (*CheckSelfIsContactResult, error) {
	out := new(CheckSelfIsContactResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/CheckSelfIsContact", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DialogUserRelation(ctx context.Context, in *AddRelationIdInfo, opts ...grpc.CallOption) (*AddRelationIdInfoResult, error) {
	out := new(AddRelationIdInfoResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/DialogUserRelation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DelDialogUserRelation(ctx context.Context, in *DelRelationIdInfo, opts ...grpc.CallOption) (*DelRelationIdInfoResult, error) {
	out := new(DelRelationIdInfoResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/DelDialogUserRelation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) BlockedUser(ctx context.Context, in *BlockeduserReq, opts ...grpc.CallOption) (*BlockeduserResult, error) {
	out := new(BlockeduserResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/BlockedUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ContactUnBlockedUser(ctx context.Context, in *ContactUnblockedReq, opts ...grpc.CallOption) (*BlockeduserResult, error) {
	out := new(BlockeduserResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/ContactUnBlockedUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ContactsGetBlocked(ctx context.Context, in *ContactsGetBlockedReq, opts ...grpc.CallOption) (*ContactsGetBlockedResult, error) {
	out := new(ContactsGetBlockedResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/ContactsGetBlocked", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckUserIsBlocked(ctx context.Context, in *CheckUserIsBlockedReq, opts ...grpc.CallOption) (*CheckUserIsBlockedResult, error) {
	out := new(CheckUserIsBlockedResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/CheckUserIsBlocked", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) StoreSystemWhiteUser(ctx context.Context, in *StoreSysWhiteUserReq, opts ...grpc.CallOption) (*StoreSysWhiteUserResult, error) {
	out := new(StoreSysWhiteUserResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/StoreSystemWhiteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateSystemWhiteUserLevel(ctx context.Context, in *UpdateSystemWhiteUserLevelReq, opts ...grpc.CallOption) (*UpdateSystemWhiteUserLevelResult, error) {
	out := new(UpdateSystemWhiteUserLevelResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/UpdateSystemWhiteUserLevel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetSysWhiteUser(ctx context.Context, in *GetSysWhiteUserReq, opts ...grpc.CallOption) (*GetSysWhiteUserResult, error) {
	out := new(GetSysWhiteUserResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/GetSysWhiteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetSysWhiteUserArr(ctx context.Context, in *GetSysWhiteUserArrReq, opts ...grpc.CallOption) (*GetSysWhiteUserArrResult, error) {
	out := new(GetSysWhiteUserArrResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/GetSysWhiteUserArr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DelSysWhiteUser(ctx context.Context, in *DelSysWhiteUserReq, opts ...grpc.CallOption) (*DelSysWhiteUserResult, error) {
	out := new(DelSysWhiteUserResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/DelSysWhiteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetAllUserDc(ctx context.Context, in *GetAllDcReq, opts ...grpc.CallOption) (UserServerService_GetAllUserDcClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_UserServerService_serviceDesc.Streams[0], c.cc, "/infoserver.UserServerService/GetAllUserDc", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServerServiceGetAllUserDcClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserServerService_GetAllUserDcClient interface {
	Recv() (*UserDc, error)
	grpc.ClientStream
}

type userServerServiceGetAllUserDcClient struct {
	grpc.ClientStream
}

func (x *userServerServiceGetAllUserDcClient) Recv() (*UserDc, error) {
	m := new(UserDc)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServerServiceClient) SetUserPrivacy(ctx context.Context, in *SetPrivacyReq, opts ...grpc.CallOption) (*SetPrivacyResult, error) {
	out := new(SetPrivacyResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/SetUserPrivacy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserPrivacy(ctx context.Context, in *GetPrivacyReq, opts ...grpc.CallOption) (*GetPrivacyResult, error) {
	out := new(GetPrivacyResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/GetUserPrivacy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckUserPrivacy(ctx context.Context, in *CheckPrivacyReq, opts ...grpc.CallOption) (*CheckPrivacyResult, error) {
	out := new(CheckPrivacyResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/CheckUserPrivacy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) StoreStickerSet(ctx context.Context, in *StoreShopStickerSetReq, opts ...grpc.CallOption) (*StoreShopStickerSetResult, error) {
	out := new(StoreShopStickerSetResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/StoreStickerSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) StoreStickerSetDocument(ctx context.Context, in *StoreShopStickerSetDocumentsReq, opts ...grpc.CallOption) (*StoreShopStickerSetDocumentsResult, error) {
	out := new(StoreShopStickerSetDocumentsResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/StoreStickerSetDocument", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DeleteShopStickerSet(ctx context.Context, in *DeleteStickerSetReq, opts ...grpc.CallOption) (*DeleteStickerSetResult, error) {
	out := new(DeleteStickerSetResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/DeleteShopStickerSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetStickerSetInfo(ctx context.Context, in *GetStickerSetInfoReq, opts ...grpc.CallOption) (*StickerSetInfo, error) {
	out := new(StickerSetInfo)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/GetStickerSetInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) StoreStickerPackDc(ctx context.Context, in *StoreStickerPackDcReq, opts ...grpc.CallOption) (*StoreStickerPackDcResult, error) {
	out := new(StoreStickerPackDcResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/StoreStickerPackDc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) StoreStickerPackDcArr(ctx context.Context, in *StoreStickerPackDcArrReq, opts ...grpc.CallOption) (*StoreStickerPackDcArrResult, error) {
	out := new(StoreStickerPackDcArrResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/StoreStickerPackDcArr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetStickerSetPackDcInfos(ctx context.Context, in *GetStickerSetPackDcInfosReq, opts ...grpc.CallOption) (*GetStickerSetPackDcInfosResult, error) {
	out := new(GetStickerSetPackDcInfosResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/GetStickerSetPackDcInfos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) AddOrDeleteFaveSticer(ctx context.Context, in *AddOrDeleteFaveSticerReq, opts ...grpc.CallOption) (*AddOrDeleteFaveSticerResult, error) {
	out := new(AddOrDeleteFaveSticerResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/AddOrDeleteFaveSticer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetFavedStickers(ctx context.Context, in *GetFavedStickersReq, opts ...grpc.CallOption) (*GetFavedStickersResult, error) {
	out := new(GetFavedStickersResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/GetFavedStickers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) StoreUserStickerSet(ctx context.Context, in *StoreUserStickerSetReq, opts ...grpc.CallOption) (*StoreUserStickerSetResult, error) {
	out := new(StoreUserStickerSetResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/StoreUserStickerSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserStickerDisable(ctx context.Context, in *UpdateUserStickerSetDisabledReq, opts ...grpc.CallOption) (*UpdateUserStickerSetDisabledResult, error) {
	out := new(UpdateUserStickerSetDisabledResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/UpdateUserStickerDisable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserStickerOrder(ctx context.Context, in *UpdateUserStickerSetOrderReq, opts ...grpc.CallOption) (*UpdateUserStickerSetOrderResult, error) {
	out := new(UpdateUserStickerSetOrderResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/UpdateUserStickerOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserStickerInstallArchived(ctx context.Context, in *UpdateUserStickerSetInstallArReq, opts ...grpc.CallOption) (*UpdateUserStickerSetInstallArResult, error) {
	out := new(UpdateUserStickerSetInstallArResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/UpdateUserStickerInstallArchived", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DeleteUserSticker(ctx context.Context, in *DeleteuserStickerReq, opts ...grpc.CallOption) (*DeleteuserStickerResult, error) {
	out := new(DeleteuserStickerResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/DeleteUserSticker", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetuserAllStickers(ctx context.Context, in *GetuserAllStickersReq, opts ...grpc.CallOption) (*GetuserAllStickersResult, error) {
	out := new(GetuserAllStickersResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/GetuserAllStickers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetAllStickerSets(ctx context.Context, in *GetAllStickerSetsReq, opts ...grpc.CallOption) (*GetAllStickerSetsResult, error) {
	out := new(GetAllStickerSetsResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/GetAllStickerSets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DeleteStickerPackDocument(ctx context.Context, in *DeleteStickerPackDocumentReq, opts ...grpc.CallOption) (*DeleteStickerPackDocumentResult, error) {
	out := new(DeleteStickerPackDocumentResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/DeleteStickerPackDocument", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetAuthorStickerSet(ctx context.Context, in *GetAuthorStickerSetReq, opts ...grpc.CallOption) (*GetAuthorStickerSetResult, error) {
	out := new(GetAuthorStickerSetResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/GetAuthorStickerSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetAuthorAllStickerSet(ctx context.Context, in *GetAuthorAllStickerSetReq, opts ...grpc.CallOption) (*GetAuthorAllStickerSetResult, error) {
	out := new(GetAuthorAllStickerSetResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/GetAuthorAllStickerSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CountAuthorAllStickerSet(ctx context.Context, in *CountAuthorAllStickerSetReq, opts ...grpc.CallOption) (*CountAuthorAllStickerSetResult, error) {
	out := new(CountAuthorAllStickerSetResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/CountAuthorAllStickerSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) SaveUserGif(ctx context.Context, in *SaveUserGifReq, opts ...grpc.CallOption) (*SaveUserGifResult, error) {
	out := new(SaveUserGifResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/SaveUserGif", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DelUserGif(ctx context.Context, in *DelUserGifReq, opts ...grpc.CallOption) (*DelUserGifResult, error) {
	out := new(DelUserGifResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/DelUserGif", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserGifs(ctx context.Context, in *GetUserGifsReq, opts ...grpc.CallOption) (*GetUserGifsResult, error) {
	out := new(GetUserGifsResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/GetUserGifs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetNotifySettings(ctx context.Context, in *GetNotifySettingsReq, opts ...grpc.CallOption) (*GetNotifySettingsResult, error) {
	out := new(GetNotifySettingsResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/GetNotifySettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateNotifySettings(ctx context.Context, in *UpdateNotifySettingsReq, opts ...grpc.CallOption) (*UpdateNotifySettingsResult, error) {
	out := new(UpdateNotifySettingsResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/UpdateNotifySettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetAllProxyConfig(ctx context.Context, in *GetAllProxyConfigReq, opts ...grpc.CallOption) (*GetAllProxyConfigResult, error) {
	out := new(GetAllProxyConfigResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/GetAllProxyConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserGps(ctx context.Context, in *GetUserGpsReq, opts ...grpc.CallOption) (*GetUserGpsResult, error) {
	out := new(GetUserGpsResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/GetUserGps", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateSwitch(ctx context.Context, in *UpdateSwitchReq, opts ...grpc.CallOption) (*UpdateSwitchResult, error) {
	out := new(UpdateSwitchResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/UpdateSwitch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetSwitchStatus(ctx context.Context, in *GetSwitchStatusReq, opts ...grpc.CallOption) (*GetSwitchStatusResult, error) {
	out := new(GetSwitchStatusResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/GetSwitchStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserGrender(ctx context.Context, in *UpdateUserGrenderReq, opts ...grpc.CallOption) (*UpdateUserGrenderResult, error) {
	out := new(UpdateUserGrenderResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/UpdateUserGrender", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserEmail(ctx context.Context, in *UpdateUserEmailReq, opts ...grpc.CallOption) (*UpdateUserEmailResult, error) {
	out := new(UpdateUserEmailResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/UpdateUserEmail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserLocation(ctx context.Context, in *UpdateUserLocationReq, opts ...grpc.CallOption) (*UpdateUserLocationResult, error) {
	out := new(UpdateUserLocationResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/UpdateUserLocation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UploadContacts(ctx context.Context, in *UploadContactsReq, opts ...grpc.CallOption) (*UploadContactsResult, error) {
	out := new(UploadContactsResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/UploadContacts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ApplyContact(ctx context.Context, in *ApplyContactReq, opts ...grpc.CallOption) (*ApplyContactResult, error) {
	out := new(ApplyContactResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/ApplyContact", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) VerifyContact(ctx context.Context, in *VerifyContactReq, opts ...grpc.CallOption) (*VerifyContactResult, error) {
	out := new(VerifyContactResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/VerifyContact", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetAppliedContacts(ctx context.Context, in *GetAppliedContactsReq, opts ...grpc.CallOption) (*GetAppliedContactsResult, error) {
	out := new(GetAppliedContactsResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/GetAppliedContacts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DeleteAppliedContact(ctx context.Context, in *DeleteAppliedContactReq, opts ...grpc.CallOption) (*DeleteAppliedContactResult, error) {
	out := new(DeleteAppliedContactResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/DeleteAppliedContact", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) SearchUserByPhone(ctx context.Context, in *SearchUserByPhoneReq, opts ...grpc.CallOption) (*SearchUserByPhoneResult, error) {
	out := new(SearchUserByPhoneResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/SearchUserByPhone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DeleteUserUsername(ctx context.Context, in *DeleteUserUsernameReq, opts ...grpc.CallOption) (*DeleteUserUsernameResult, error) {
	out := new(DeleteUserUsernameResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/DeleteUserUsername", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateBotInfoSupp(ctx context.Context, in *UpdateBotInfoSuppReq, opts ...grpc.CallOption) (*UpdateBotInfoSuppResult, error) {
	out := new(UpdateBotInfoSuppResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/UpdateBotInfoSupp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UGetUsersChats(ctx context.Context, in *UGetUsersChatsReq, opts ...grpc.CallOption) (*UGetUsersChatsResult, error) {
	out := new(UGetUsersChatsResult)
	err := grpc.Invoke(ctx, "/infoserver.UserServerService/UGetUsersChats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserServerService service

type UserServerServiceServer interface {
	// 注册指定用户的接口()
	RegisterUserInfo(context.Context, *RegisterUserInfoReq) (*RegisterUserInfoResult, error)
	// 获取用户信息
	GetUserInfoById(context.Context, *GetUserInfoByIdReq) (*GetUserInfoResult, error)
	GetUserInfoByIdArr(context.Context, *GetUserInfoByIdArrReq) (*GetUserInfoByIdArrResult, error)
	// 获取账号的销毁时间f
	GetUserExpierById(context.Context, *GetUserExpireByIdReq) (*GetUserExpireByIdResult, error)
	// 通过用户电话号码获取用户基本信息
	GetUserInfoByPhone(context.Context, *GetUserByphone) (*GetUserInfoResult, error)
	// 通过username获取用户基本信息
	GetUserInfoByUsername(context.Context, *GetUserByUsername) (*GetUserInfoResult, error)
	// 更新用户头像
	UpdateUserPhoto(context.Context, *UpdatePhotoInfoReq) (*UpdateUserPhotoResult, error)
	// 获取用户头像
	GetUserPhoto(context.Context, *GetPhotoInfoReq) (*GetUserPhotoResult, error)
	// 更新用户名称和about
	UpdateUserProfile(context.Context, *UpdateUserProfileReq) (*UpdateUserProfileResult, error)
	// 更新用户用户status
	UpdateUserStatus(context.Context, *StatusReq) (*StatusResult, error)
	// update user online status
	UpdateUserStatusV2(context.Context, *StatusReq) (*StatusResult, error)
	// 设置用户账号销毁时间
	UpdateUserExpire(context.Context, *UpdateExpireReq) (*UpdateExpireResult, error)
	// 用户DC的迁移
	UpdateUserCluster(context.Context, *UserClusterChange) (*UserClusterChangeResult, error)
	// 更新用户的username
	UpdateUserName(context.Context, *UpdateuserNameReq) (*UpdateuserNameResult, error)
	// 校验用户名称是否被占用
	CheckUserNameOccupied(context.Context, *CheckUserNameOccupiedReq) (*CheckUserNameOccupiedResult, error)
	// 检查电话号码是否已经注册
	CheckPhoneRegister(context.Context, *CheckPhoneRegisterReq) (*CheckPhoneRegisterResult, error)
	// 账号(标记删除)
	DeleteUserInfoById(context.Context, *DeleteAccountByIdReq) (*DelAccountResult, error)
	// 更新机器人相关信息
	UpdateBotInfo(context.Context, *BotUpdateInfo) (*BotUpdateInfoResult, error)
	// 更新机器人头像
	UpdateBotPic(context.Context, *UpdateBotPicRequest) (*UpdateBotPicResult, error)
	// 检测用户哈希是否合法
	CheckUserAccessHashValid(context.Context, *CheckUserAccessHashValidReq) (*CheckUserAccessHashValidResult, error)
	// ********************************联系人的相关接口
	// 删除单个联系人的接口
	ContactsDelContact(context.Context, *DelContactReq) (*DelContactResult, error)
	// 批量删除用户联系人的接口
	ContactsDelContactsArr(context.Context, *DelContactArrReq) (*DelContactArrResult, error)
	// 重置用户联系人信息，删除所有联系人
	CmdResetUserContacts(context.Context, *CmdResetUserContactsReq) (*CmdResetUserContactsResult, error)
	// 获取用户联系人列表
	ContactsGetContacts(context.Context, *ContatsGetContactsReq) (*ContatsGetContactsResult, error)
	// 批量导入联系人的操作(具体业务逻辑在用户服务来实现)
	ImportContacts(context.Context, *ContactsImportPhoneContactsReq) (*ContactsImportPhoneContactsResult, error)
	// 获取自己所有联系人的在线状态
	GetContactsStatus(context.Context, *GetContactsStatusReq) (*GetContactsStatusResult, error)
	// 检测自己是否是对方的联系人
	CheckSelfIsContact(context.Context, *CheckSelfIsContactReq) (*CheckSelfIsContactResult, error)
	// ************用户关联表 用户在线状态的更新*******************
	// 创建dialog的增加用户关系（单聊）
	DialogUserRelation(context.Context, *AddRelationIdInfo) (*AddRelationIdInfoResult, error)
	// 删除dialog的剔除用户关系
	DelDialogUserRelation(context.Context, *DelRelationIdInfo) (*DelRelationIdInfoResult, error)
	// **********用户黑名单的管理 ***************
	// 拉黑用户
	BlockedUser(context.Context, *BlockeduserReq) (*BlockeduserResult, error)
	// 移除拉黑的用户
	ContactUnBlockedUser(context.Context, *ContactUnblockedReq) (*BlockeduserResult, error)
	// 获取用户的黑明单列表
	ContactsGetBlocked(context.Context, *ContactsGetBlockedReq) (*ContactsGetBlockedResult, error)
	// 检测用户是否是黑名单
	CheckUserIsBlocked(context.Context, *CheckUserIsBlockedReq) (*CheckUserIsBlockedResult, error)
	// ***********系统白名单的相关操作和管理*******************
	// 存储白名单
	StoreSystemWhiteUser(context.Context, *StoreSysWhiteUserReq) (*StoreSysWhiteUserResult, error)
	// 更新用户白名单的级别
	UpdateSystemWhiteUserLevel(context.Context, *UpdateSystemWhiteUserLevelReq) (*UpdateSystemWhiteUserLevelResult, error)
	// 获取指定的白名单人信息
	GetSysWhiteUser(context.Context, *GetSysWhiteUserReq) (*GetSysWhiteUserResult, error)
	// 获取白名单列表 )
	GetSysWhiteUserArr(context.Context, *GetSysWhiteUserArrReq) (*GetSysWhiteUserArrResult, error)
	// 移除指定的白名单人
	DelSysWhiteUser(context.Context, *DelSysWhiteUserReq) (*DelSysWhiteUserResult, error)
	// 拉取所有用户的DC
	GetAllUserDc(*GetAllDcReq, UserServerService_GetAllUserDcServer) error
	// ************************* 有关隐私选项设置的接口们 ****************************************
	// 设置隐私选项的接口
	SetUserPrivacy(context.Context, *SetPrivacyReq) (*SetPrivacyResult, error)
	// 获取隐私选项的接口
	GetUserPrivacy(context.Context, *GetPrivacyReq) (*GetPrivacyResult, error)
	// 检测用户的隐私选项
	CheckUserPrivacy(context.Context, *CheckPrivacyReq) (*CheckPrivacyResult, error)
	// ************************* 有关sticker的设置和获取 ****************************************
	// 存储sticker集合的概要
	StoreStickerSet(context.Context, *StoreShopStickerSetReq) (*StoreShopStickerSetResult, error)
	// 存储sickerSet 的documents
	StoreStickerSetDocument(context.Context, *StoreShopStickerSetDocumentsReq) (*StoreShopStickerSetDocumentsResult, error)
	// 删除指定的sticker集合
	DeleteShopStickerSet(context.Context, *DeleteStickerSetReq) (*DeleteStickerSetResult, error)
	// 获取指定的sticker集合
	GetStickerSetInfo(context.Context, *GetStickerSetInfoReq) (*StickerSetInfo, error)
	// 存储stickerSet下面的单个贴图
	StoreStickerPackDc(context.Context, *StoreStickerPackDcReq) (*StoreStickerPackDcResult, error)
	// 批量导入sticker
	StoreStickerPackDcArr(context.Context, *StoreStickerPackDcArrReq) (*StoreStickerPackDcArrResult, error)
	// 获取一个sticker下面的所有贴图信息
	GetStickerSetPackDcInfos(context.Context, *GetStickerSetPackDcInfosReq) (*GetStickerSetPackDcInfosResult, error)
	// 添加或者取消喜欢的sticker unfave = true: 取消喜欢 unfave = false: 添加为喜欢
	AddOrDeleteFaveSticer(context.Context, *AddOrDeleteFaveSticerReq) (*AddOrDeleteFaveSticerResult, error)
	// 获取已经添加的的喜爱单个贴图集合
	GetFavedStickers(context.Context, *GetFavedStickersReq) (*GetFavedStickersResult, error)
	// ***************用户安装sticker的操作*******
	StoreUserStickerSet(context.Context, *StoreUserStickerSetReq) (*StoreUserStickerSetResult, error)
	// 更新sticker的用户禁用状态
	UpdateUserStickerDisable(context.Context, *UpdateUserStickerSetDisabledReq) (*UpdateUserStickerSetDisabledResult, error)
	// 更新sticker的order
	UpdateUserStickerOrder(context.Context, *UpdateUserStickerSetOrderReq) (*UpdateUserStickerSetOrderResult, error)
	// 更新sticker的installed和archived
	UpdateUserStickerInstallArchived(context.Context, *UpdateUserStickerSetInstallArReq) (*UpdateUserStickerSetInstallArResult, error)
	// 删除用户指定的Sticker
	DeleteUserSticker(context.Context, *DeleteuserStickerReq) (*DeleteuserStickerResult, error)
	// 获取用户sticker集合信息
	GetuserAllStickers(context.Context, *GetuserAllStickersReq) (*GetuserAllStickersResult, error)
	// 获取所有sticker集合信息
	GetAllStickerSets(context.Context, *GetAllStickerSetsReq) (*GetAllStickerSetsResult, error)
	// 删除指定sticker包的单个sticker
	DeleteStickerPackDocument(context.Context, *DeleteStickerPackDocumentReq) (*DeleteStickerPackDocumentResult, error)
	// 根据setId查询作者的sticker
	GetAuthorStickerSet(context.Context, *GetAuthorStickerSetReq) (*GetAuthorStickerSetResult, error)
	// 查询作者所有的sticker
	GetAuthorAllStickerSet(context.Context, *GetAuthorAllStickerSetReq) (*GetAuthorAllStickerSetResult, error)
	// 计算作者拥有sticker数量
	CountAuthorAllStickerSet(context.Context, *CountAuthorAllStickerSetReq) (*CountAuthorAllStickerSetResult, error)
	// ********************用户动态图的接口们 *********
	// 保存gif动态图
	SaveUserGif(context.Context, *SaveUserGifReq) (*SaveUserGifResult, error)
	// 删除动态图
	DelUserGif(context.Context, *DelUserGifReq) (*DelUserGifResult, error)
	// 获取用户的gifs
	GetUserGifs(context.Context, *GetUserGifsReq) (*GetUserGifsResult, error)
	// ********************推送音效等设置 *****************
	// 获取音效设置
	GetNotifySettings(context.Context, *GetNotifySettingsReq) (*GetNotifySettingsResult, error)
	// 更新音效设置
	UpdateNotifySettings(context.Context, *UpdateNotifySettingsReq) (*UpdateNotifySettingsResult, error)
	// ********************代理配置的获取 *****************
	// 获取所有的代理的配置们
	GetAllProxyConfig(context.Context, *GetAllProxyConfigReq) (*GetAllProxyConfigResult, error)
	// ********* 用户相关的GPS *********
	GetUserGps(context.Context, *GetUserGpsReq) (*GetUserGpsResult, error)
	// ********* switches ****************
	UpdateSwitch(context.Context, *UpdateSwitchReq) (*UpdateSwitchResult, error)
	GetSwitchStatus(context.Context, *GetSwitchStatusReq) (*GetSwitchStatusResult, error)
	// ****************** only for  simple chat *************************
	UpdateUserGrender(context.Context, *UpdateUserGrenderReq) (*UpdateUserGrenderResult, error)
	UpdateUserEmail(context.Context, *UpdateUserEmailReq) (*UpdateUserEmailResult, error)
	UpdateUserLocation(context.Context, *UpdateUserLocationReq) (*UpdateUserLocationResult, error)
	// 上传保存联系人
	UploadContacts(context.Context, *UploadContactsReq) (*UploadContactsResult, error)
	// 联系人申请
	ApplyContact(context.Context, *ApplyContactReq) (*ApplyContactResult, error)
	// 确认添加申请
	VerifyContact(context.Context, *VerifyContactReq) (*VerifyContactResult, error)
	// 获取被添加用户申请列表
	GetAppliedContacts(context.Context, *GetAppliedContactsReq) (*GetAppliedContactsResult, error)
	// 删除单个申请列表
	DeleteAppliedContact(context.Context, *DeleteAppliedContactReq) (*DeleteAppliedContactResult, error)
	// 联系人搜索用户
	SearchUserByPhone(context.Context, *SearchUserByPhoneReq) (*SearchUserByPhoneResult, error)
	// delete username
	DeleteUserUsername(context.Context, *DeleteUserUsernameReq) (*DeleteUserUsernameResult, error)
	// 补充 更新机器人相关信息
	UpdateBotInfoSupp(context.Context, *UpdateBotInfoSuppReq) (*UpdateBotInfoSuppResult, error)
	UGetUsersChats(context.Context, *UGetUsersChatsReq) (*UGetUsersChatsResult, error)
}

func RegisterUserServerServiceServer(s *grpc.Server, srv UserServerServiceServer) {
	s.RegisterService(&_UserServerService_serviceDesc, srv)
}

func _UserServerService_RegisterUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).RegisterUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/RegisterUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).RegisterUserInfo(ctx, req.(*RegisterUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetUserInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserInfoById(ctx, req.(*GetUserInfoByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserInfoByIdArr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoByIdArrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserInfoByIdArr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetUserInfoByIdArr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserInfoByIdArr(ctx, req.(*GetUserInfoByIdArrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserExpierById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserExpireByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserExpierById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetUserExpierById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserExpierById(ctx, req.(*GetUserExpireByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserInfoByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByphone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserInfoByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetUserInfoByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserInfoByPhone(ctx, req.(*GetUserByphone))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserInfoByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserInfoByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetUserInfoByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserInfoByUsername(ctx, req.(*GetUserByUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePhotoInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UpdateUserPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserPhoto(ctx, req.(*UpdatePhotoInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPhotoInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetUserPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserPhoto(ctx, req.(*GetPhotoInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UpdateUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserProfile(ctx, req.(*UpdateUserProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UpdateUserStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserStatus(ctx, req.(*StatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserStatusV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserStatusV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UpdateUserStatusV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserStatusV2(ctx, req.(*StatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserExpire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExpireReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserExpire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UpdateUserExpire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserExpire(ctx, req.(*UpdateExpireReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserClusterChange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UpdateUserCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserCluster(ctx, req.(*UserClusterChange))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateuserNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UpdateUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserName(ctx, req.(*UpdateuserNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckUserNameOccupied_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserNameOccupiedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckUserNameOccupied(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/CheckUserNameOccupied",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckUserNameOccupied(ctx, req.(*CheckUserNameOccupiedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckPhoneRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPhoneRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckPhoneRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/CheckPhoneRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckPhoneRegister(ctx, req.(*CheckPhoneRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DeleteUserInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DeleteUserInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/DeleteUserInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DeleteUserInfoById(ctx, req.(*DeleteAccountByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateBotInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotUpdateInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateBotInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UpdateBotInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateBotInfo(ctx, req.(*BotUpdateInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateBotPic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBotPicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateBotPic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UpdateBotPic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateBotPic(ctx, req.(*UpdateBotPicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckUserAccessHashValid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserAccessHashValidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckUserAccessHashValid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/CheckUserAccessHashValid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckUserAccessHashValid(ctx, req.(*CheckUserAccessHashValidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ContactsDelContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ContactsDelContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/ContactsDelContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ContactsDelContact(ctx, req.(*DelContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ContactsDelContactsArr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelContactArrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ContactsDelContactsArr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/ContactsDelContactsArr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ContactsDelContactsArr(ctx, req.(*DelContactArrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CmdResetUserContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdResetUserContactsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CmdResetUserContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/CmdResetUserContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CmdResetUserContacts(ctx, req.(*CmdResetUserContactsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ContactsGetContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContatsGetContactsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ContactsGetContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/ContactsGetContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ContactsGetContacts(ctx, req.(*ContatsGetContactsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ImportContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactsImportPhoneContactsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ImportContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/ImportContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ImportContacts(ctx, req.(*ContactsImportPhoneContactsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetContactsStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactsStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetContactsStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetContactsStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetContactsStatus(ctx, req.(*GetContactsStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckSelfIsContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSelfIsContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckSelfIsContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/CheckSelfIsContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckSelfIsContact(ctx, req.(*CheckSelfIsContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DialogUserRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRelationIdInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DialogUserRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/DialogUserRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DialogUserRelation(ctx, req.(*AddRelationIdInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DelDialogUserRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRelationIdInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DelDialogUserRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/DelDialogUserRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DelDialogUserRelation(ctx, req.(*DelRelationIdInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_BlockedUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockeduserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).BlockedUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/BlockedUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).BlockedUser(ctx, req.(*BlockeduserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ContactUnBlockedUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactUnblockedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ContactUnBlockedUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/ContactUnBlockedUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ContactUnBlockedUser(ctx, req.(*ContactUnblockedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ContactsGetBlocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactsGetBlockedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ContactsGetBlocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/ContactsGetBlocked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ContactsGetBlocked(ctx, req.(*ContactsGetBlockedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckUserIsBlocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserIsBlockedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckUserIsBlocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/CheckUserIsBlocked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckUserIsBlocked(ctx, req.(*CheckUserIsBlockedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_StoreSystemWhiteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreSysWhiteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).StoreSystemWhiteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/StoreSystemWhiteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).StoreSystemWhiteUser(ctx, req.(*StoreSysWhiteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateSystemWhiteUserLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSystemWhiteUserLevelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateSystemWhiteUserLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UpdateSystemWhiteUserLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateSystemWhiteUserLevel(ctx, req.(*UpdateSystemWhiteUserLevelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetSysWhiteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSysWhiteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetSysWhiteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetSysWhiteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetSysWhiteUser(ctx, req.(*GetSysWhiteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetSysWhiteUserArr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSysWhiteUserArrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetSysWhiteUserArr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetSysWhiteUserArr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetSysWhiteUserArr(ctx, req.(*GetSysWhiteUserArrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DelSysWhiteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSysWhiteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DelSysWhiteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/DelSysWhiteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DelSysWhiteUser(ctx, req.(*DelSysWhiteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetAllUserDc_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllDcReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServerServiceServer).GetAllUserDc(m, &userServerServiceGetAllUserDcServer{stream})
}

type UserServerService_GetAllUserDcServer interface {
	Send(*UserDc) error
	grpc.ServerStream
}

type userServerServiceGetAllUserDcServer struct {
	grpc.ServerStream
}

func (x *userServerServiceGetAllUserDcServer) Send(m *UserDc) error {
	return x.ServerStream.SendMsg(m)
}

func _UserServerService_SetUserPrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPrivacyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).SetUserPrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/SetUserPrivacy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).SetUserPrivacy(ctx, req.(*SetPrivacyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserPrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrivacyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserPrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetUserPrivacy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserPrivacy(ctx, req.(*GetPrivacyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckUserPrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPrivacyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckUserPrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/CheckUserPrivacy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckUserPrivacy(ctx, req.(*CheckPrivacyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_StoreStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreShopStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).StoreStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/StoreStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).StoreStickerSet(ctx, req.(*StoreShopStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_StoreStickerSetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreShopStickerSetDocumentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).StoreStickerSetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/StoreStickerSetDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).StoreStickerSetDocument(ctx, req.(*StoreShopStickerSetDocumentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DeleteShopStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DeleteShopStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/DeleteShopStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DeleteShopStickerSet(ctx, req.(*DeleteStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetStickerSetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStickerSetInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetStickerSetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetStickerSetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetStickerSetInfo(ctx, req.(*GetStickerSetInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_StoreStickerPackDc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreStickerPackDcReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).StoreStickerPackDc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/StoreStickerPackDc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).StoreStickerPackDc(ctx, req.(*StoreStickerPackDcReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_StoreStickerPackDcArr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreStickerPackDcArrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).StoreStickerPackDcArr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/StoreStickerPackDcArr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).StoreStickerPackDcArr(ctx, req.(*StoreStickerPackDcArrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetStickerSetPackDcInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStickerSetPackDcInfosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetStickerSetPackDcInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetStickerSetPackDcInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetStickerSetPackDcInfos(ctx, req.(*GetStickerSetPackDcInfosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_AddOrDeleteFaveSticer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrDeleteFaveSticerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).AddOrDeleteFaveSticer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/AddOrDeleteFaveSticer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).AddOrDeleteFaveSticer(ctx, req.(*AddOrDeleteFaveSticerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetFavedStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFavedStickersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetFavedStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetFavedStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetFavedStickers(ctx, req.(*GetFavedStickersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_StoreUserStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreUserStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).StoreUserStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/StoreUserStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).StoreUserStickerSet(ctx, req.(*StoreUserStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserStickerDisable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserStickerSetDisabledReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserStickerDisable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UpdateUserStickerDisable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserStickerDisable(ctx, req.(*UpdateUserStickerSetDisabledReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserStickerOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserStickerSetOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserStickerOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UpdateUserStickerOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserStickerOrder(ctx, req.(*UpdateUserStickerSetOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserStickerInstallArchived_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserStickerSetInstallArReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserStickerInstallArchived(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UpdateUserStickerInstallArchived",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserStickerInstallArchived(ctx, req.(*UpdateUserStickerSetInstallArReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DeleteUserSticker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteuserStickerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DeleteUserSticker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/DeleteUserSticker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DeleteUserSticker(ctx, req.(*DeleteuserStickerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetuserAllStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetuserAllStickersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetuserAllStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetuserAllStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetuserAllStickers(ctx, req.(*GetuserAllStickersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetAllStickerSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllStickerSetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetAllStickerSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetAllStickerSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetAllStickerSets(ctx, req.(*GetAllStickerSetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DeleteStickerPackDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStickerPackDocumentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DeleteStickerPackDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/DeleteStickerPackDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DeleteStickerPackDocument(ctx, req.(*DeleteStickerPackDocumentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetAuthorStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetAuthorStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetAuthorStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetAuthorStickerSet(ctx, req.(*GetAuthorStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetAuthorAllStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorAllStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetAuthorAllStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetAuthorAllStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetAuthorAllStickerSet(ctx, req.(*GetAuthorAllStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CountAuthorAllStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAuthorAllStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CountAuthorAllStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/CountAuthorAllStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CountAuthorAllStickerSet(ctx, req.(*CountAuthorAllStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_SaveUserGif_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveUserGifReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).SaveUserGif(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/SaveUserGif",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).SaveUserGif(ctx, req.(*SaveUserGifReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DelUserGif_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUserGifReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DelUserGif(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/DelUserGif",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DelUserGif(ctx, req.(*DelUserGifReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserGifs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserGifsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserGifs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetUserGifs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserGifs(ctx, req.(*GetUserGifsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetNotifySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotifySettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetNotifySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetNotifySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetNotifySettings(ctx, req.(*GetNotifySettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateNotifySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotifySettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateNotifySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UpdateNotifySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateNotifySettings(ctx, req.(*UpdateNotifySettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetAllProxyConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllProxyConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetAllProxyConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetAllProxyConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetAllProxyConfig(ctx, req.(*GetAllProxyConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserGps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserGpsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserGps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetUserGps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserGps(ctx, req.(*GetUserGpsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSwitchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UpdateSwitch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateSwitch(ctx, req.(*UpdateSwitchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetSwitchStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSwitchStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetSwitchStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetSwitchStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetSwitchStatus(ctx, req.(*GetSwitchStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserGrender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserGrenderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserGrender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UpdateUserGrender",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserGrender(ctx, req.(*UpdateUserGrenderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UpdateUserEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserEmail(ctx, req.(*UpdateUserEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserLocationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UpdateUserLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserLocation(ctx, req.(*UpdateUserLocationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UploadContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadContactsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UploadContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UploadContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UploadContacts(ctx, req.(*UploadContactsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ApplyContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ApplyContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/ApplyContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ApplyContact(ctx, req.(*ApplyContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_VerifyContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).VerifyContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/VerifyContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).VerifyContact(ctx, req.(*VerifyContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetAppliedContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppliedContactsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetAppliedContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetAppliedContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetAppliedContacts(ctx, req.(*GetAppliedContactsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DeleteAppliedContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppliedContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DeleteAppliedContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/DeleteAppliedContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DeleteAppliedContact(ctx, req.(*DeleteAppliedContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_SearchUserByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserByPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).SearchUserByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/SearchUserByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).SearchUserByPhone(ctx, req.(*SearchUserByPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DeleteUserUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserUsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DeleteUserUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/DeleteUserUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DeleteUserUsername(ctx, req.(*DeleteUserUsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateBotInfoSupp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBotInfoSuppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateBotInfoSupp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UpdateBotInfoSupp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateBotInfoSupp(ctx, req.(*UpdateBotInfoSuppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UGetUsersChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UGetUsersChatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UGetUsersChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UGetUsersChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UGetUsersChats(ctx, req.(*UGetUsersChatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "infoserver.UserServerService",
	HandlerType: (*UserServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUserInfo",
			Handler:    _UserServerService_RegisterUserInfo_Handler,
		},
		{
			MethodName: "GetUserInfoById",
			Handler:    _UserServerService_GetUserInfoById_Handler,
		},
		{
			MethodName: "GetUserInfoByIdArr",
			Handler:    _UserServerService_GetUserInfoByIdArr_Handler,
		},
		{
			MethodName: "GetUserExpierById",
			Handler:    _UserServerService_GetUserExpierById_Handler,
		},
		{
			MethodName: "GetUserInfoByPhone",
			Handler:    _UserServerService_GetUserInfoByPhone_Handler,
		},
		{
			MethodName: "GetUserInfoByUsername",
			Handler:    _UserServerService_GetUserInfoByUsername_Handler,
		},
		{
			MethodName: "UpdateUserPhoto",
			Handler:    _UserServerService_UpdateUserPhoto_Handler,
		},
		{
			MethodName: "GetUserPhoto",
			Handler:    _UserServerService_GetUserPhoto_Handler,
		},
		{
			MethodName: "UpdateUserProfile",
			Handler:    _UserServerService_UpdateUserProfile_Handler,
		},
		{
			MethodName: "UpdateUserStatus",
			Handler:    _UserServerService_UpdateUserStatus_Handler,
		},
		{
			MethodName: "UpdateUserStatusV2",
			Handler:    _UserServerService_UpdateUserStatusV2_Handler,
		},
		{
			MethodName: "UpdateUserExpire",
			Handler:    _UserServerService_UpdateUserExpire_Handler,
		},
		{
			MethodName: "UpdateUserCluster",
			Handler:    _UserServerService_UpdateUserCluster_Handler,
		},
		{
			MethodName: "UpdateUserName",
			Handler:    _UserServerService_UpdateUserName_Handler,
		},
		{
			MethodName: "CheckUserNameOccupied",
			Handler:    _UserServerService_CheckUserNameOccupied_Handler,
		},
		{
			MethodName: "CheckPhoneRegister",
			Handler:    _UserServerService_CheckPhoneRegister_Handler,
		},
		{
			MethodName: "DeleteUserInfoById",
			Handler:    _UserServerService_DeleteUserInfoById_Handler,
		},
		{
			MethodName: "UpdateBotInfo",
			Handler:    _UserServerService_UpdateBotInfo_Handler,
		},
		{
			MethodName: "UpdateBotPic",
			Handler:    _UserServerService_UpdateBotPic_Handler,
		},
		{
			MethodName: "checkUserAccessHashValid",
			Handler:    _UserServerService_CheckUserAccessHashValid_Handler,
		},
		{
			MethodName: "ContactsDelContact",
			Handler:    _UserServerService_ContactsDelContact_Handler,
		},
		{
			MethodName: "ContactsDelContactsArr",
			Handler:    _UserServerService_ContactsDelContactsArr_Handler,
		},
		{
			MethodName: "CmdResetUserContacts",
			Handler:    _UserServerService_CmdResetUserContacts_Handler,
		},
		{
			MethodName: "ContactsGetContacts",
			Handler:    _UserServerService_ContactsGetContacts_Handler,
		},
		{
			MethodName: "ImportContacts",
			Handler:    _UserServerService_ImportContacts_Handler,
		},
		{
			MethodName: "GetContactsStatus",
			Handler:    _UserServerService_GetContactsStatus_Handler,
		},
		{
			MethodName: "CheckSelfIsContact",
			Handler:    _UserServerService_CheckSelfIsContact_Handler,
		},
		{
			MethodName: "DialogUserRelation",
			Handler:    _UserServerService_DialogUserRelation_Handler,
		},
		{
			MethodName: "DelDialogUserRelation",
			Handler:    _UserServerService_DelDialogUserRelation_Handler,
		},
		{
			MethodName: "BlockedUser",
			Handler:    _UserServerService_BlockedUser_Handler,
		},
		{
			MethodName: "ContactUnBlockedUser",
			Handler:    _UserServerService_ContactUnBlockedUser_Handler,
		},
		{
			MethodName: "ContactsGetBlocked",
			Handler:    _UserServerService_ContactsGetBlocked_Handler,
		},
		{
			MethodName: "CheckUserIsBlocked",
			Handler:    _UserServerService_CheckUserIsBlocked_Handler,
		},
		{
			MethodName: "StoreSystemWhiteUser",
			Handler:    _UserServerService_StoreSystemWhiteUser_Handler,
		},
		{
			MethodName: "UpdateSystemWhiteUserLevel",
			Handler:    _UserServerService_UpdateSystemWhiteUserLevel_Handler,
		},
		{
			MethodName: "GetSysWhiteUser",
			Handler:    _UserServerService_GetSysWhiteUser_Handler,
		},
		{
			MethodName: "GetSysWhiteUserArr",
			Handler:    _UserServerService_GetSysWhiteUserArr_Handler,
		},
		{
			MethodName: "DelSysWhiteUser",
			Handler:    _UserServerService_DelSysWhiteUser_Handler,
		},
		{
			MethodName: "SetUserPrivacy",
			Handler:    _UserServerService_SetUserPrivacy_Handler,
		},
		{
			MethodName: "GetUserPrivacy",
			Handler:    _UserServerService_GetUserPrivacy_Handler,
		},
		{
			MethodName: "CheckUserPrivacy",
			Handler:    _UserServerService_CheckUserPrivacy_Handler,
		},
		{
			MethodName: "StoreStickerSet",
			Handler:    _UserServerService_StoreStickerSet_Handler,
		},
		{
			MethodName: "StoreStickerSetDocument",
			Handler:    _UserServerService_StoreStickerSetDocument_Handler,
		},
		{
			MethodName: "DeleteShopStickerSet",
			Handler:    _UserServerService_DeleteShopStickerSet_Handler,
		},
		{
			MethodName: "GetStickerSetInfo",
			Handler:    _UserServerService_GetStickerSetInfo_Handler,
		},
		{
			MethodName: "StoreStickerPackDc",
			Handler:    _UserServerService_StoreStickerPackDc_Handler,
		},
		{
			MethodName: "StoreStickerPackDcArr",
			Handler:    _UserServerService_StoreStickerPackDcArr_Handler,
		},
		{
			MethodName: "GetStickerSetPackDcInfos",
			Handler:    _UserServerService_GetStickerSetPackDcInfos_Handler,
		},
		{
			MethodName: "AddOrDeleteFaveSticer",
			Handler:    _UserServerService_AddOrDeleteFaveSticer_Handler,
		},
		{
			MethodName: "GetFavedStickers",
			Handler:    _UserServerService_GetFavedStickers_Handler,
		},
		{
			MethodName: "StoreUserStickerSet",
			Handler:    _UserServerService_StoreUserStickerSet_Handler,
		},
		{
			MethodName: "UpdateUserStickerDisable",
			Handler:    _UserServerService_UpdateUserStickerDisable_Handler,
		},
		{
			MethodName: "UpdateUserStickerOrder",
			Handler:    _UserServerService_UpdateUserStickerOrder_Handler,
		},
		{
			MethodName: "UpdateUserStickerInstallArchived",
			Handler:    _UserServerService_UpdateUserStickerInstallArchived_Handler,
		},
		{
			MethodName: "DeleteUserSticker",
			Handler:    _UserServerService_DeleteUserSticker_Handler,
		},
		{
			MethodName: "GetuserAllStickers",
			Handler:    _UserServerService_GetuserAllStickers_Handler,
		},
		{
			MethodName: "GetAllStickerSets",
			Handler:    _UserServerService_GetAllStickerSets_Handler,
		},
		{
			MethodName: "DeleteStickerPackDocument",
			Handler:    _UserServerService_DeleteStickerPackDocument_Handler,
		},
		{
			MethodName: "GetAuthorStickerSet",
			Handler:    _UserServerService_GetAuthorStickerSet_Handler,
		},
		{
			MethodName: "GetAuthorAllStickerSet",
			Handler:    _UserServerService_GetAuthorAllStickerSet_Handler,
		},
		{
			MethodName: "CountAuthorAllStickerSet",
			Handler:    _UserServerService_CountAuthorAllStickerSet_Handler,
		},
		{
			MethodName: "SaveUserGif",
			Handler:    _UserServerService_SaveUserGif_Handler,
		},
		{
			MethodName: "DelUserGif",
			Handler:    _UserServerService_DelUserGif_Handler,
		},
		{
			MethodName: "GetUserGifs",
			Handler:    _UserServerService_GetUserGifs_Handler,
		},
		{
			MethodName: "GetNotifySettings",
			Handler:    _UserServerService_GetNotifySettings_Handler,
		},
		{
			MethodName: "UpdateNotifySettings",
			Handler:    _UserServerService_UpdateNotifySettings_Handler,
		},
		{
			MethodName: "GetAllProxyConfig",
			Handler:    _UserServerService_GetAllProxyConfig_Handler,
		},
		{
			MethodName: "GetUserGps",
			Handler:    _UserServerService_GetUserGps_Handler,
		},
		{
			MethodName: "UpdateSwitch",
			Handler:    _UserServerService_UpdateSwitch_Handler,
		},
		{
			MethodName: "GetSwitchStatus",
			Handler:    _UserServerService_GetSwitchStatus_Handler,
		},
		{
			MethodName: "UpdateUserGrender",
			Handler:    _UserServerService_UpdateUserGrender_Handler,
		},
		{
			MethodName: "UpdateUserEmail",
			Handler:    _UserServerService_UpdateUserEmail_Handler,
		},
		{
			MethodName: "UpdateUserLocation",
			Handler:    _UserServerService_UpdateUserLocation_Handler,
		},
		{
			MethodName: "UploadContacts",
			Handler:    _UserServerService_UploadContacts_Handler,
		},
		{
			MethodName: "ApplyContact",
			Handler:    _UserServerService_ApplyContact_Handler,
		},
		{
			MethodName: "VerifyContact",
			Handler:    _UserServerService_VerifyContact_Handler,
		},
		{
			MethodName: "GetAppliedContacts",
			Handler:    _UserServerService_GetAppliedContacts_Handler,
		},
		{
			MethodName: "DeleteAppliedContact",
			Handler:    _UserServerService_DeleteAppliedContact_Handler,
		},
		{
			MethodName: "SearchUserByPhone",
			Handler:    _UserServerService_SearchUserByPhone_Handler,
		},
		{
			MethodName: "DeleteUserUsername",
			Handler:    _UserServerService_DeleteUserUsername_Handler,
		},
		{
			MethodName: "UpdateBotInfoSupp",
			Handler:    _UserServerService_UpdateBotInfoSupp_Handler,
		},
		{
			MethodName: "UGetUsersChats",
			Handler:    _UserServerService_UGetUsersChats_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllUserDc",
			Handler:       _UserServerService_GetAllUserDc_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/iminterfaceprotobufs/infoserver/userserver.proto",
}

func (m *GetUserInfoByIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserInfoByIdReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.SelfId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n1, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *GetUserInfoByIdArrReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserInfoByIdArrReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.SelfId))
	}
	if len(m.UserIds) > 0 {
		dAtA3 := make([]byte, len(m.UserIds)*10)
		var j2 int
		for _, num1 := range m.UserIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n4, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *UserInfoArray) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfoArray) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userin) > 0 {
		for _, msg := range m.Userin {
			dAtA[i] = 0xa
			i++
			i = encodeVarintUserserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.AccessHash))
	}
	if len(m.FirstName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.FirstName)))
		i += copy(dAtA[i:], m.FirstName)
	}
	if len(m.LastName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.LastName)))
		i += copy(dAtA[i:], m.LastName)
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if m.Status != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Status))
	}
	if m.LastLogout != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.LastLogout))
	}
	if m.ClusterRegion != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.ClusterRegion))
	}
	if len(m.FontRgb) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.FontRgb)))
		i += copy(dAtA[i:], m.FontRgb)
	}
	if len(m.CountryCode) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.CountryCode)))
		i += copy(dAtA[i:], m.CountryCode)
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.BotInfoVersion != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.BotInfoVersion))
	}
	if len(m.BotInlinePlaceholder) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.BotInlinePlaceholder)))
		i += copy(dAtA[i:], m.BotInlinePlaceholder)
	}
	if len(m.RestrictionReason) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.RestrictionReason)))
		i += copy(dAtA[i:], m.RestrictionReason)
	}
	if len(m.LangCode) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.LangCode)))
		i += copy(dAtA[i:], m.LangCode)
	}
	if len(m.LocalPhone) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.LocalPhone)))
		i += copy(dAtA[i:], m.LocalPhone)
	}
	if m.Deleted {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		if m.Deleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Bot {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		if m.Bot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BotChatHistory {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		if m.BotChatHistory {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BotNochats {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		if m.BotNochats {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Verified {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		if m.Verified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Restricted {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		if m.Restricted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Min {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		if m.Min {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BotInlineGeo {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		if m.BotInlineGeo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Self {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		if m.Self {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Contact {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		if m.Contact {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MutalContact {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		if m.MutalContact {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.StarMark {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		if m.StarMark {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ShowContactPhone {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		if m.ShowContactPhone {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.GroupId != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.GroupId))
	}
	return i, nil
}

func (m *GetUserExpireByIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserExpireByIdReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n5, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *GetUserExpireByIdResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserExpireByIdResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Expire != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Expire))
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetUserByphone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserByphone) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Phone) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n6, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *GetUserInfoResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserInfoResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uinfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Uinfo.Size()))
		n7, err := m.Uinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetUserInfoByIdArrResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserInfoByIdArrResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uinfo) > 0 {
		for _, msg := range m.Uinfo {
			dAtA[i] = 0xa
			i++
			i = encodeVarintUserserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetUserByUsername) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserByUsername) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.SelfId))
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n8, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *UpdatePhotoInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePhotoInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.KeyId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n9, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *GetPhotoInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPhotoInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n10, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *UpdateUserPhotoResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserPhotoResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetUserPhotoResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserPhotoResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Photo) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *UpdateUserProfileReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserProfileReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Flags))
	}
	if len(m.FirstName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.FirstName)))
		i += copy(dAtA[i:], m.FirstName)
	}
	if len(m.LastName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.LastName)))
		i += copy(dAtA[i:], m.LastName)
	}
	if len(m.About) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.About)))
		i += copy(dAtA[i:], m.About)
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n11, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *UpdateUserProfileResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserProfileResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uinfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Uinfo.Size()))
		n12, err := m.Uinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *StatusReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.SelfId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.KeyId))
	}
	if m.Status {
		dAtA[i] = 0x18
		i++
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Offline != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Offline))
	}
	if m.Longitude != 0 {
		dAtA[i] = 0x29
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Longitude))))
		i += 8
	}
	if m.Latitude != 0 {
		dAtA[i] = 0x31
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Latitude))))
		i += 8
	}
	if m.Debug != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n13, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *StatusResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *UpdateExpireReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateExpireReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.SelfId))
	}
	if m.Expire != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Expire))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n14, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *UpdateExpireResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateExpireResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *UserClusterChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserClusterChange) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.SelfId))
	}
	if m.ClusterId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.ClusterId))
	}
	if len(m.FromIp) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.FromIp)))
		i += copy(dAtA[i:], m.FromIp)
	}
	if m.FromId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.FromId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n15, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}

func (m *UserClusterChangeResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserClusterChangeResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *UpdateuserNameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateuserNameReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.UserName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.UserName)))
		i += copy(dAtA[i:], m.UserName)
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n16, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.KeyId))
	}
	return i, nil
}

func (m *UpdateuserNameResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateuserNameResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uinfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Uinfo.Size()))
		n17, err := m.Uinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *CheckPhoneRegisterReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckPhoneRegisterReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Phone) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n18, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}

func (m *CheckPhoneRegisterResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckPhoneRegisterResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *DeleteAccountByIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAccountByIdReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.DelId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.DelId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n19, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}

func (m *DelAccountResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelAccountResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *BotUpdateInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BotUpdateInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.BotInfoVersion != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.BotInfoVersion))
	}
	if m.BotChatHistory {
		dAtA[i] = 0x18
		i++
		if m.BotChatHistory {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BotNoChat {
		dAtA[i] = 0x20
		i++
		if m.BotNoChat {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n20, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}

func (m *BotUpdateInfoResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BotUpdateInfoResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *DelContactReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelContactReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.ContactId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.ContactId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.KeyId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n21, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}

func (m *DelContactResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelContactResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uinfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Uinfo.Size()))
		n22, err := m.Uinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *ContactIdHash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactIdHash) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ContactId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.ContactId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.AccessHash))
	}
	return i, nil
}

func (m *DelContactArrReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelContactArrReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.ContactidArr) > 0 {
		for _, msg := range m.ContactidArr {
			dAtA[i] = 0x12
			i++
			i = encodeVarintUserserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.KeyId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n23, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}

func (m *CmdResetUserContactsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmdResetUserContactsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AmdinId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.AmdinId))
	}
	if len(m.PhoneNumber) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.PhoneNumber)))
		i += copy(dAtA[i:], m.PhoneNumber)
	}
	return i, nil
}

func (m *CmdResetUserContactsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmdResetUserContactsResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CurrentContactIds) > 0 {
		dAtA25 := make([]byte, len(m.CurrentContactIds)*10)
		var j24 int
		for _, num1 := range m.CurrentContactIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA25[j24] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j24++
			}
			dAtA25[j24] = uint8(num)
			j24++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(j24))
		i += copy(dAtA[i:], dAtA25[:j24])
	}
	return i, nil
}

func (m *DelContactArrResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelContactArrResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *ContatsGetContactsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContatsGetContactsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.KeyId))
	}
	if len(m.Contacthash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Contacthash)))
		i += copy(dAtA[i:], m.Contacthash)
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n26, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}

func (m *ContactInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.ContactId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.ContactId))
	}
	if len(m.FirstName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.FirstName)))
		i += copy(dAtA[i:], m.FirstName)
	}
	if len(m.LastName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.LastName)))
		i += copy(dAtA[i:], m.LastName)
	}
	if m.IsSelfContacted {
		dAtA[i] = 0x28
		i++
		if m.IsSelfContacted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SelfIsContacted {
		dAtA[i] = 0x30
		i++
		if m.SelfIsContacted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.StarMark {
		dAtA[i] = 0x38
		i++
		if m.StarMark {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HasPhone {
		dAtA[i] = 0x40
		i++
		if m.HasPhone {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ContatsGetContactsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContatsGetContactsResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ContactArr) > 0 {
		for _, msg := range m.ContactArr {
			dAtA[i] = 0xa
			i++
			i = encodeVarintUserserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.UserInfoArr) > 0 {
		for _, msg := range m.UserInfoArr {
			dAtA[i] = 0x12
			i++
			i = encodeVarintUserserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *PhoneBookContact) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneBookContact) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ClientId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.ClientId))
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if len(m.FirstName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.FirstName)))
		i += copy(dAtA[i:], m.FirstName)
	}
	if len(m.LastName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.LastName)))
		i += copy(dAtA[i:], m.LastName)
	}
	return i, nil
}

func (m *ContactsImportPhoneContactsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsImportPhoneContactsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.PhoneContactArr) > 0 {
		for _, msg := range m.PhoneContactArr {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintUserserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n27, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}

func (m *ImportContact) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImportContact) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.ClientId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.ClientId))
	}
	return i, nil
}

func (m *PopularContact) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PopularContact) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ClientId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.ClientId))
	}
	if m.Importers != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Importers))
	}
	return i, nil
}

func (m *ContactsImportPhoneContactsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsImportPhoneContactsResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ImContactDetail) > 0 {
		for _, msg := range m.ImContactDetail {
			dAtA[i] = 0xa
			i++
			i = encodeVarintUserserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.UserInfoArr) > 0 {
		for _, msg := range m.UserInfoArr {
			dAtA[i] = 0x12
			i++
			i = encodeVarintUserserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PopuContact) > 0 {
		for _, msg := range m.PopuContact {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintUserserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *AddRelationIdInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddRelationIdInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.RelationId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.RelationId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n28, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}

func (m *DelRelationIdInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelRelationIdInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.RelationId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.RelationId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n29, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}

func (m *AddRelationIdInfoResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddRelationIdInfoResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *DelRelationIdInfoResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelRelationIdInfoResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *BlockeduserReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockeduserReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.BlockedId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.BlockedId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.KeyId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n30, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}

func (m *BlockeduserResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockeduserResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *ContactUnblockedReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactUnblockedReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.BlockedId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.BlockedId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.KeyId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n31, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}

func (m *ContactsGetBlockedReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsGetBlockedReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n32, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}

func (m *Blockeduser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Blockeduser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.Date != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Date))
	}
	return i, nil
}

func (m *ContactsGetBlockedResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsGetBlockedResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Blockeduser) > 0 {
		dAtA34 := make([]byte, len(m.Blockeduser)*10)
		var j33 int
		for _, num1 := range m.Blockeduser {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA34[j33] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j33++
			}
			dAtA34[j33] = uint8(num)
			j33++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(j33))
		i += copy(dAtA[i:], dAtA34[:j33])
	}
	if len(m.InfoArr) > 0 {
		for _, msg := range m.InfoArr {
			dAtA[i] = 0x12
			i++
			i = encodeVarintUserserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *SystemWhiteUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemWhiteUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Level))
	}
	if m.Proby != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Proby))
	}
	if m.IsWhite {
		dAtA[i] = 0x20
		i++
		if m.IsWhite {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *StoreSysWhiteUserReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreSysWhiteUserReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Level))
	}
	if m.Proby != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Proby))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n35, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	return i, nil
}

func (m *StoreSysWhiteUserResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreSysWhiteUserResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *UpdateSystemWhiteUserLevelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSystemWhiteUserLevelReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Level))
	}
	if m.Proby != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Proby))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n36, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	return i, nil
}

func (m *UpdateSystemWhiteUserLevelResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSystemWhiteUserLevelResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetSysWhiteUserReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSysWhiteUserReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n37, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	return i, nil
}

func (m *GetSysWhiteUserResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSysWhiteUserResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SysWhiteInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.SysWhiteInfo.Size()))
		n38, err := m.SysWhiteInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetSysWhiteUserArrReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSysWhiteUserArrReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n39, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	return i, nil
}

func (m *GetSysWhiteUserArrResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSysWhiteUserArrResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SysWhiteInfoArr) > 0 {
		for _, msg := range m.SysWhiteInfoArr {
			dAtA[i] = 0xa
			i++
			i = encodeVarintUserserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *DelSysWhiteUserReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelSysWhiteUserReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.ProUser != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.ProUser))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n40, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	return i, nil
}

func (m *DelSysWhiteUserResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelSysWhiteUserResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *UserDc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserDc) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.DcId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.DcId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n41, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	return i, nil
}

func (m *GetAllDcReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllDcReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n42, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	return i, nil
}

func (m *SetPrivacyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetPrivacyReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.PrivacyType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.PrivacyType))
	}
	if m.Range != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Range))
	}
	if len(m.AlwaysDisallow) > 0 {
		dAtA44 := make([]byte, len(m.AlwaysDisallow)*10)
		var j43 int
		for _, num1 := range m.AlwaysDisallow {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA44[j43] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j43++
			}
			dAtA44[j43] = uint8(num)
			j43++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(j43))
		i += copy(dAtA[i:], dAtA44[:j43])
	}
	if len(m.AlwaysAllow) > 0 {
		dAtA46 := make([]byte, len(m.AlwaysAllow)*10)
		var j45 int
		for _, num1 := range m.AlwaysAllow {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA46[j45] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j45++
			}
			dAtA46[j45] = uint8(num)
			j45++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(j45))
		i += copy(dAtA[i:], dAtA46[:j45])
	}
	if len(m.Ip) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.KeyId))
	}
	if m.SessionId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.SessionId))
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if m.Debug != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n47, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	return i, nil
}

func (m *SetPrivacyResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetPrivacyResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UinfoArr) > 0 {
		for _, msg := range m.UinfoArr {
			dAtA[i] = 0xa
			i++
			i = encodeVarintUserserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetPrivacyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPrivacyReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.PrivacyType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.PrivacyType))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.KeyId))
	}
	if m.SessionId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.SessionId))
	}
	if len(m.Ip) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if m.Debug != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n48, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	return i, nil
}

func (m *CheckPrivacyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckPrivacyReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.SelfId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.PrivacyType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.PrivacyType))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n49, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n49
	}
	return i, nil
}

func (m *CheckPrivacyResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckPrivacyResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetPrivacyResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPrivacyResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Range != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Range))
	}
	if len(m.AlwaysDisallow) > 0 {
		dAtA51 := make([]byte, len(m.AlwaysDisallow)*10)
		var j50 int
		for _, num1 := range m.AlwaysDisallow {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA51[j50] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j50++
			}
			dAtA51[j50] = uint8(num)
			j50++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(j50))
		i += copy(dAtA[i:], dAtA51[:j50])
	}
	if len(m.AlwaysAllow) > 0 {
		dAtA53 := make([]byte, len(m.AlwaysAllow)*10)
		var j52 int
		for _, num1 := range m.AlwaysAllow {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA53[j52] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j52++
			}
			dAtA53[j52] = uint8(num)
			j52++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(j52))
		i += copy(dAtA[i:], dAtA53[:j52])
	}
	if len(m.UserInfos) > 0 {
		for _, msg := range m.UserInfos {
			dAtA[i] = 0x22
			i++
			i = encodeVarintUserserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *StoreShopStickerSetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreShopStickerSetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AccessHash != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.Free {
		dAtA[i] = 0x10
		i++
		if m.Free {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Official {
		dAtA[i] = 0x18
		i++
		if m.Official {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Masks {
		dAtA[i] = 0x20
		i++
		if m.Masks {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.ShortName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.ShortName)))
		i += copy(dAtA[i:], m.ShortName)
	}
	if m.Count != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Count))
	}
	if m.Hash != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Hash))
	}
	if len(m.Emoticon) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Emoticon)))
		i += copy(dAtA[i:], m.Emoticon)
	}
	if len(m.Documents) > 0 {
		dAtA55 := make([]byte, len(m.Documents)*10)
		var j54 int
		for _, num1 := range m.Documents {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA55[j54] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j54++
			}
			dAtA55[j54] = uint8(num)
			j54++
		}
		dAtA[i] = 0x52
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(j54))
		i += copy(dAtA[i:], dAtA55[:j54])
	}
	if m.Debug != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n56, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n56
	}
	if m.UserId != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *StoreShopStickerSetResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreShopStickerSetResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Id))
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *StoreShopStickerSetDocumentsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreShopStickerSetDocumentsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Id))
	}
	if len(m.Documents) > 0 {
		dAtA58 := make([]byte, len(m.Documents)*10)
		var j57 int
		for _, num1 := range m.Documents {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA58[j57] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j57++
			}
			dAtA58[j57] = uint8(num)
			j57++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(j57))
		i += copy(dAtA[i:], dAtA58[:j57])
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n59, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n59
	}
	return i, nil
}

func (m *StoreShopStickerSetDocumentsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreShopStickerSetDocumentsResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *DeleteStickerSetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteStickerSetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StickerId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.StickerId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n60, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n60
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *DeleteStickerSetResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteStickerSetResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *StickerSetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StickerSetInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Id))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.Free {
		dAtA[i] = 0x18
		i++
		if m.Free {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Official {
		dAtA[i] = 0x20
		i++
		if m.Official {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Masks {
		dAtA[i] = 0x28
		i++
		if m.Masks {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.ShortName) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.ShortName)))
		i += copy(dAtA[i:], m.ShortName)
	}
	if m.Count != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Count))
	}
	if m.Hash != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Hash))
	}
	if len(m.Emoticon) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Emoticon)))
		i += copy(dAtA[i:], m.Emoticon)
	}
	if len(m.Documents) > 0 {
		dAtA62 := make([]byte, len(m.Documents)*10)
		var j61 int
		for _, num1 := range m.Documents {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA62[j61] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j61++
			}
			dAtA62[j61] = uint8(num)
			j61++
		}
		dAtA[i] = 0x5a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(j61))
		i += copy(dAtA[i:], dAtA62[:j61])
	}
	return i, nil
}

func (m *GetStickerSetInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStickerSetInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Id))
	}
	if len(m.ShortName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.ShortName)))
		i += copy(dAtA[i:], m.ShortName)
	}
	if m.IsId {
		dAtA[i] = 0x18
		i++
		if m.IsId {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n63, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n63
	}
	return i, nil
}

func (m *GetStickerSetInfoResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStickerSetInfoResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StickerSetInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.StickerSetInfo.Size()))
		n64, err := m.StickerSetInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n64
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *StickerPackDocumentBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StickerPackDocumentBase) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AttributesStikerSetId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.AttributesStikerSetId))
	}
	if m.DocumentId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.DocumentId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.AccessHash))
	}
	if len(m.MimeType) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.MimeType)))
		i += copy(dAtA[i:], m.MimeType)
	}
	if m.Size_ != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Size_))
	}
	if len(m.Thumb) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Thumb)))
		i += copy(dAtA[i:], m.Thumb)
	}
	if m.DcId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.DcId))
	}
	if m.Date != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Date))
	}
	if m.AttributesImageSizeW != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.AttributesImageSizeW))
	}
	if m.AttributesImageSizeH != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.AttributesImageSizeH))
	}
	if len(m.AttributesStikerAlt) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.AttributesStikerAlt)))
		i += copy(dAtA[i:], m.AttributesStikerAlt)
	}
	if m.AttributesStikerSetAccessHash != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.AttributesStikerSetAccessHash))
	}
	if len(m.AttributesFileName) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.AttributesFileName)))
		i += copy(dAtA[i:], m.AttributesFileName)
	}
	return i, nil
}

func (m *StickerPackDocumentInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StickerPackDocumentInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Id))
	}
	if m.InfoBase != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.InfoBase.Size()))
		n65, err := m.InfoBase.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n65
	}
	return i, nil
}

func (m *StoreStickerPackDcReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreStickerPackDcReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Stickpackbase != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Stickpackbase.Size()))
		n66, err := m.Stickpackbase.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n66
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n67, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n67
	}
	return i, nil
}

func (m *StoreStickerPackDcResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreStickerPackDcResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Id))
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *StoreStickerPackDcArrReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreStickerPackDcArrReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StPDB) > 0 {
		for _, msg := range m.StPDB {
			dAtA[i] = 0xa
			i++
			i = encodeVarintUserserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n68, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n68
	}
	return i, nil
}

func (m *StoreStickerPackDcArrResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreStickerPackDcArrResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.IdArr) > 0 {
		dAtA70 := make([]byte, len(m.IdArr)*10)
		var j69 int
		for _, num1 := range m.IdArr {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA70[j69] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j69++
			}
			dAtA70[j69] = uint8(num)
			j69++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(j69))
		i += copy(dAtA[i:], dAtA70[:j69])
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetStickerSetPackDcInfosReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStickerSetPackDcInfosReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Id))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n71, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n71
	}
	return i, nil
}

func (m *GetStickerSetPackDcInfosResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStickerSetPackDcInfosResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StPDcInfo) > 0 {
		for _, msg := range m.StPDcInfo {
			dAtA[i] = 0xa
			i++
			i = encodeVarintUserserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AddOrDeleteFaveSticerReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddOrDeleteFaveSticerReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.StickerId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.StickerId))
	}
	if m.Unfave {
		dAtA[i] = 0x18
		i++
		if m.Unfave {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n72, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n72
	}
	return i, nil
}

func (m *AddOrDeleteFaveSticerResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddOrDeleteFaveSticerResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *GetFavedStickersReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFavedStickersReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.Hash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Hash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n73, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n73
	}
	return i, nil
}

func (m *GetFavedStickersResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFavedStickersResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hash != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Hash))
	}
	if len(m.Packs) > 0 {
		for _, msg := range m.Packs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintUserserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Stickers) > 0 {
		for _, msg := range m.Stickers {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintUserserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *StickerPack) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StickerPack) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Emoticon) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Emoticon)))
		i += copy(dAtA[i:], m.Emoticon)
	}
	if m.DocumentId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.DocumentId))
	}
	return i, nil
}

func (m *StoreUserStickerSetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreUserStickerSetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.StickersetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.StickersetId))
	}
	if m.Installed {
		dAtA[i] = 0x18
		i++
		if m.Installed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Disabled {
		dAtA[i] = 0x20
		i++
		if m.Disabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Order != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Order))
	}
	if m.Archived {
		dAtA[i] = 0x30
		i++
		if m.Archived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Debug != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n74, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n74
	}
	return i, nil
}

func (m *StoreUserStickerSetResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreUserStickerSetResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *UpdateUserStickerSetDisabledReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserStickerSetDisabledReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.StickersetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.StickersetId))
	}
	if m.Disabled {
		dAtA[i] = 0x20
		i++
		if m.Disabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n75, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n75
	}
	return i, nil
}

func (m *UpdateUserStickerSetDisabledResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserStickerSetDisabledResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *UpdateUserStickerSetOrderReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserStickerSetOrderReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.StickersetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.StickersetId))
	}
	if m.Order != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Order))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n76, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n76
	}
	return i, nil
}

func (m *UpdateUserStickerSetOrderResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserStickerSetOrderResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *UpdateUserStickerSetInstallArReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserStickerSetInstallArReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.StickersetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.StickersetId))
	}
	if m.Archived {
		dAtA[i] = 0x18
		i++
		if m.Archived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Installed {
		dAtA[i] = 0x20
		i++
		if m.Installed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n77, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n77
	}
	return i, nil
}

func (m *UpdateUserStickerSetInstallArResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserStickerSetInstallArResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *DeleteuserStickerReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteuserStickerReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.StickersetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.StickersetId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n78, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n78
	}
	return i, nil
}

func (m *DeleteuserStickerResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteuserStickerResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.StickersetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.StickersetId))
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *UserStickerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserStickerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StickersetId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.StickersetId))
	}
	if m.Installed {
		dAtA[i] = 0x10
		i++
		if m.Installed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Disabled {
		dAtA[i] = 0x18
		i++
		if m.Disabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Order != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Order))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.Free {
		dAtA[i] = 0x30
		i++
		if m.Free {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Official {
		dAtA[i] = 0x38
		i++
		if m.Official {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Archived {
		dAtA[i] = 0x40
		i++
		if m.Archived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Masks {
		dAtA[i] = 0x48
		i++
		if m.Masks {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.ShortName) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.ShortName)))
		i += copy(dAtA[i:], m.ShortName)
	}
	if m.Count != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Count))
	}
	if m.Hash != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Hash))
	}
	if len(m.Emotico) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Emotico)))
		i += copy(dAtA[i:], m.Emotico)
	}
	if len(m.Documents) > 0 {
		dAtA80 := make([]byte, len(m.Documents)*10)
		var j79 int
		for _, num1 := range m.Documents {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA80[j79] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j79++
			}
			dAtA80[j79] = uint8(num)
			j79++
		}
		dAtA[i] = 0x7a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(j79))
		i += copy(dAtA[i:], dAtA80[:j79])
	}
	return i, nil
}

func (m *UserStickerInfoArr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserStickerInfoArr) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StickerInfo) > 0 {
		for _, msg := range m.StickerInfo {
			dAtA[i] = 0xa
			i++
			i = encodeVarintUserserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *StickerSetInfoArr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StickerSetInfoArr) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StickerInfo) > 0 {
		for _, msg := range m.StickerInfo {
			dAtA[i] = 0xa
			i++
			i = encodeVarintUserserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetuserAllStickersReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetuserAllStickersReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n81, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n81
	}
	return i, nil
}

func (m *GetuserAllStickersResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetuserAllStickersResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StickerInfoArr) > 0 {
		for _, msg := range m.StickerInfoArr {
			dAtA[i] = 0xa
			i++
			i = encodeVarintUserserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetAllStickerSetsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllStickerSetsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n82, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n82
	}
	return i, nil
}

func (m *GetAllStickerSetsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllStickerSetsResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StickerInfoArr) > 0 {
		for _, msg := range m.StickerInfoArr {
			dAtA[i] = 0xa
			i++
			i = encodeVarintUserserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *DeleteStickerPackDocumentReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteStickerPackDocumentReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Id))
	}
	if m.StickersetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.StickersetId))
	}
	return i, nil
}

func (m *DeleteStickerPackDocumentResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteStickerPackDocumentResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetAuthorStickerSetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuthorStickerSetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.SetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.SetId))
	}
	return i, nil
}

func (m *GetAuthorStickerSetResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuthorStickerSetResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Set != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Set.Size()))
		n83, err := m.Set.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n83
	}
	return i, nil
}

func (m *GetAuthorAllStickerSetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuthorAllStickerSetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *GetAuthorAllStickerSetResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuthorAllStickerSetResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.Sets) > 0 {
		for _, msg := range m.Sets {
			dAtA[i] = 0x12
			i++
			i = encodeVarintUserserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AuthorStickerSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorStickerSet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.StickersetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.StickersetId))
	}
	if len(m.ShortName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.ShortName)))
		i += copy(dAtA[i:], m.ShortName)
	}
	if m.Archived {
		dAtA[i] = 0x20
		i++
		if m.Archived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Installed {
		dAtA[i] = 0x28
		i++
		if m.Installed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Disabled {
		dAtA[i] = 0x30
		i++
		if m.Disabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Ordered != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Ordered))
	}
	if m.Created != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Created))
	}
	if m.Updated != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Updated))
	}
	return i, nil
}

func (m *CountAuthorAllStickerSetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountAuthorAllStickerSetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *CountAuthorAllStickerSetResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountAuthorAllStickerSetResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *UserGifInfoArr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserGifInfoArr) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GifArr) > 0 {
		for _, msg := range m.GifArr {
			dAtA[i] = 0xa
			i++
			i = encodeVarintUserserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UserSaveGifInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserSaveGifInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.GifId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.GifId)))
		i += copy(dAtA[i:], m.GifId)
	}
	if m.Fid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Fid))
	}
	if m.GitHash != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.GitHash))
	}
	return i, nil
}

func (m *SaveUserGifReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveUserGifReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.GifId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.GifId)))
		i += copy(dAtA[i:], m.GifId)
	}
	if m.Fid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Fid))
	}
	if m.GitHash != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.GitHash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n84, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n84
	}
	return i, nil
}

func (m *SaveUserGifResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveUserGifResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *DelUserGifReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelUserGifReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.Fid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Fid))
	}
	if m.GitHash != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.GitHash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n85, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n85
	}
	return i, nil
}

func (m *DelUserGifResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelUserGifResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetUserGifsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserGifsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.Hash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Hash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n86, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n86
	}
	return i, nil
}

func (m *GetUserGifsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserGifsResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.Hash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Hash))
	}
	if len(m.GifArr) > 0 {
		for _, msg := range m.GifArr {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintUserserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *CheckUserIsBlockedReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckUserIsBlockedReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.SelfId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n87, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n87
	}
	return i, nil
}

func (m *CheckUserIsBlockedResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckUserIsBlockedResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *RegisterUserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterUserInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.AccessHash))
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if len(m.CountryCode) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.CountryCode)))
		i += copy(dAtA[i:], m.CountryCode)
	}
	if len(m.LocalPhone) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.LocalPhone)))
		i += copy(dAtA[i:], m.LocalPhone)
	}
	if len(m.FirstName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.FirstName)))
		i += copy(dAtA[i:], m.FirstName)
	}
	if len(m.LastName) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.LastName)))
		i += copy(dAtA[i:], m.LastName)
	}
	if m.IsBot {
		dAtA[i] = 0x40
		i++
		if m.IsBot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BotInfoVersion != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.BotInfoVersion))
	}
	if m.BotChatHistory {
		dAtA[i] = 0x50
		i++
		if m.BotChatHistory {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BotNoChats {
		dAtA[i] = 0x58
		i++
		if m.BotNoChats {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *UpdateUserInfoResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserInfoResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uinfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Uinfo.Size()))
		n88, err := m.Uinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n88
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Result {
		dAtA[i] = 0x18
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CheckUserAccessHashValidReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckUserAccessHashValidReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n89, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n89
	}
	return i, nil
}

func (m *CheckUserAccessHashValidResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckUserAccessHashValidResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsValid {
		dAtA[i] = 0x8
		i++
		if m.IsValid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *RegisterUserInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterUserInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.AccessHash))
	}
	if len(m.PhoneNumber) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.PhoneNumber)))
		i += copy(dAtA[i:], m.PhoneNumber)
	}
	if len(m.FirstName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.FirstName)))
		i += copy(dAtA[i:], m.FirstName)
	}
	if len(m.LastName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.LastName)))
		i += copy(dAtA[i:], m.LastName)
	}
	if m.IsBot {
		dAtA[i] = 0x30
		i++
		if m.IsBot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BotInfoVersion != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.BotInfoVersion))
	}
	if m.BotChatHistory {
		dAtA[i] = 0x40
		i++
		if m.BotChatHistory {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BotNoChats {
		dAtA[i] = 0x48
		i++
		if m.BotNoChats {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Debug != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n90, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n90
	}
	return i, nil
}

func (m *RegisterUserInfoResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterUserInfoResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uinfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Uinfo.Size()))
		n91, err := m.Uinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n91
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetNotifySettingsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNotifySettingsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.FromId))
	}
	if m.ReqType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.ReqType))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n92, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n92
	}
	return i, nil
}

func (m *GetNotifySettingsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNotifySettingsResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShowPreviews {
		dAtA[i] = 0x8
		i++
		if m.ShowPreviews {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Silent {
		dAtA[i] = 0x10
		i++
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MuteUntil != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.MuteUntil))
	}
	if len(m.Sound) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Sound)))
		i += copy(dAtA[i:], m.Sound)
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *UpdateNotifySettingsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateNotifySettingsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.FromId))
	}
	if m.ReqType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.ReqType))
	}
	if m.ShowPreviews {
		dAtA[i] = 0x18
		i++
		if m.ShowPreviews {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Silent {
		dAtA[i] = 0x20
		i++
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MuteUntil != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.MuteUntil))
	}
	if len(m.Sound) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Sound)))
		i += copy(dAtA[i:], m.Sound)
	}
	if m.Debug != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n93, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n93
	}
	return i, nil
}

func (m *UpdateNotifySettingsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateNotifySettingsResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetContactsStatusReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetContactsStatusReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.SelfId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n94, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n94
	}
	return i, nil
}

func (m *UserStaus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserStaus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.Status != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Status))
	}
	if m.OfflineTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.OfflineTime))
	}
	return i, nil
}

func (m *GetContactsStatusResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetContactsStatusResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ContactStatusArr) > 0 {
		for _, msg := range m.ContactStatusArr {
			dAtA[i] = 0xa
			i++
			i = encodeVarintUserserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *UpdateBotPicRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBotPicRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BotId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.BotId))
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n95, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n95
	}
	return i, nil
}

func (m *UpdateBotPicResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBotPicResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetAllProxyConfigReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllProxyConfigReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n96, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n96
	}
	return i, nil
}

func (m *ProxyAddr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyAddr) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if len(m.InnerIp) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.InnerIp)))
		i += copy(dAtA[i:], m.InnerIp)
	}
	if m.Port != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Port))
	}
	return i, nil
}

func (m *GetAllProxyConfigResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllProxyConfigResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Addrs) > 0 {
		for _, msg := range m.Addrs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintUserserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *CheckUserNameOccupiedReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckUserNameOccupiedReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Userid))
	}
	if len(m.UserName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.UserName)))
		i += copy(dAtA[i:], m.UserName)
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n97, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n97
	}
	return i, nil
}

func (m *CheckUserNameOccupiedResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckUserNameOccupiedResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Occpuy {
		dAtA[i] = 0x8
		i++
		if m.Occpuy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GetUserGpsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserGpsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Userid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n98, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n98
	}
	return i, nil
}

func (m *GetUserGpsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserGpsResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Latitude != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Latitude))))
		i += 8
	}
	if m.Longitude != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Longitude))))
		i += 8
	}
	if len(m.DeviceModule) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.DeviceModule)))
		i += copy(dAtA[i:], m.DeviceModule)
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Timestamp))
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *CheckSelfIsContactReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckSelfIsContactReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.SelfId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n99, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n99
	}
	return i, nil
}

func (m *CheckSelfIsContactResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckSelfIsContactResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfIsContact {
		dAtA[i] = 0x8
		i++
		if m.SelfIsContact {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *UpdateSwitchReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSwitchReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.Switch != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Switch))
	}
	if m.OnOff {
		dAtA[i] = 0x18
		i++
		if m.OnOff {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *UpdateSwitchResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSwitchResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *GetSwitchStatusReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSwitchStatusReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.Switch != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Switch))
	}
	return i, nil
}

func (m *GetSwitchStatusResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSwitchStatusResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OnOff {
		dAtA[i] = 0x8
		i++
		if m.OnOff {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Code != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *UGetUsersChatsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UGetUsersChatsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Userid))
	}
	if len(m.Users) > 0 {
		dAtA101 := make([]byte, len(m.Users)*10)
		var j100 int
		for _, num1 := range m.Users {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA101[j100] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j100++
			}
			dAtA101[j100] = uint8(num)
			j100++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(j100))
		i += copy(dAtA[i:], dAtA101[:j100])
	}
	if len(m.Chatid) > 0 {
		dAtA103 := make([]byte, len(m.Chatid)*10)
		var j102 int
		for _, num1 := range m.Chatid {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA103[j102] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j102++
			}
			dAtA103[j102] = uint8(num)
			j102++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(j102))
		i += copy(dAtA[i:], dAtA103[:j102])
	}
	if len(m.Channelid) > 0 {
		dAtA105 := make([]byte, len(m.Channelid)*10)
		var j104 int
		for _, num1 := range m.Channelid {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA105[j104] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j104++
			}
			dAtA105[j104] = uint8(num)
			j104++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(j104))
		i += copy(dAtA[i:], dAtA105[:j104])
	}
	if m.ProtocolLayer != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.ProtocolLayer))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Dlog.Size()))
		n106, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n106
	}
	return i, nil
}

func (m *UGetUsersChatsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UGetUsersChatsResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Channels) > 0 {
		for _, b := range m.Channels {
			dAtA[i] = 0xa
			i++
			i = encodeVarintUserserver(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.Users != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Users.Size()))
		n107, err := m.Users.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n107
	}
	if len(m.Chats) > 0 {
		for _, b := range m.Chats {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintUserserver(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.NoChats) > 0 {
		dAtA109 := make([]byte, len(m.NoChats)*10)
		var j108 int
		for _, num1 := range m.NoChats {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA109[j108] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j108++
			}
			dAtA109[j108] = uint8(num)
			j108++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(j108))
		i += copy(dAtA[i:], dAtA109[:j108])
	}
	if len(m.NoChans) > 0 {
		dAtA111 := make([]byte, len(m.NoChans)*10)
		var j110 int
		for _, num1 := range m.NoChans {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA111[j110] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j110++
			}
			dAtA111[j110] = uint8(num)
			j110++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(j110))
		i += copy(dAtA[i:], dAtA111[:j110])
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *UpdateBotInfoSuppReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBotInfoSuppReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.Placeholder) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Placeholder)))
		i += copy(dAtA[i:], m.Placeholder)
	}
	if m.Geo {
		dAtA[i] = 0x18
		i++
		if m.Geo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n112, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n112
	}
	return i, nil
}

func (m *UpdateBotInfoSuppResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBotInfoSuppResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *DeleteUserUsernameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteUserUsernameReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AdminId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.AdminId))
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if m.ForceDelete {
		dAtA[i] = 0x18
		i++
		if m.ForceDelete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n113, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n113
	}
	return i, nil
}

func (m *DeleteUserUsernameResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteUserUsernameResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Code))
	}
	if len(m.InternalErrorMessage) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.InternalErrorMessage)))
		i += copy(dAtA[i:], m.InternalErrorMessage)
	}
	if m.OwnerId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.OwnerId))
	}
	return i, nil
}

func (m *UpdateUserLocationReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserLocationReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.Country) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Country)))
		i += copy(dAtA[i:], m.Country)
	}
	if len(m.City) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.City)))
		i += copy(dAtA[i:], m.City)
	}
	if len(m.Detail) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Detail)))
		i += copy(dAtA[i:], m.Detail)
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n114, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n114
	}
	return i, nil
}

func (m *UpdateUserLocationResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserLocationResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	return i, nil
}

func (m *UpdateUserGrenderReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserGrenderReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.Grender != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Grender))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n115, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n115
	}
	return i, nil
}

func (m *UpdateUserGrenderResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserGrenderResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	return i, nil
}

func (m *UpdateUserEmailReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserEmailReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Debug.Size()))
		n116, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n116
	}
	return i, nil
}

func (m *UpdateUserEmailResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserEmailResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	return i, nil
}

func (m *UploadContactsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadContactsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.PhoneContactArr) > 0 {
		for _, msg := range m.PhoneContactArr {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintUserserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UploadContactsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadContactsResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error {
		dAtA[i] = 0x8
		i++
		if m.Error {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *ApplyContactReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyContactReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.ApplyUserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.ApplyUserId))
	}
	if len(m.WithMessage) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.WithMessage)))
		i += copy(dAtA[i:], m.WithMessage)
	}
	return i, nil
}

func (m *ApplyContactResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyContactResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error {
		dAtA[i] = 0x8
		i++
		if m.Error {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *GetAppliedContactsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAppliedContactsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *GetAppliedContactsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAppliedContactsResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error {
		dAtA[i] = 0x8
		i++
		if m.Error {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.AppliedArr) > 0 {
		for _, msg := range m.AppliedArr {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintUserserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Applied) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Applied) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Id))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserId))
	}
	if m.ApplyUser != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.ApplyUser.Size()))
		n117, err := m.ApplyUser.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n117
	}
	if len(m.WithMessage) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.WithMessage)))
		i += copy(dAtA[i:], m.WithMessage)
	}
	if m.Status != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Status))
	}
	if m.Flag != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Flag))
	}
	if m.Gender != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Gender))
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.Country) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Country)))
		i += copy(dAtA[i:], m.Country)
	}
	if len(m.City) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.City)))
		i += copy(dAtA[i:], m.City)
	}
	if len(m.Detail) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Detail)))
		i += copy(dAtA[i:], m.Detail)
	}
	return i, nil
}

func (m *VerifyContactReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyContactReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Id))
	}
	if m.VerifyUserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.VerifyUserId))
	}
	if m.Status != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func (m *VerifyContactResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyContactResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error {
		dAtA[i] = 0x8
		i++
		if m.Error {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *DeleteAppliedContactReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAppliedContactReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *DeleteAppliedContactResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAppliedContactResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error {
		dAtA[i] = 0x8
		i++
		if m.Error {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *SearchUserByPhoneReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchUserByPhoneReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Phone) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	return i, nil
}

func (m *SearchUserByPhoneResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchUserByPhoneResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.UserInfo.Size()))
		n118, err := m.UserInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n118
	}
	if m.Gender != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(m.Gender))
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.Country) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Country)))
		i += copy(dAtA[i:], m.Country)
	}
	if len(m.City) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.City)))
		i += copy(dAtA[i:], m.City)
	}
	if len(m.Detail) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintUserserver(dAtA, i, uint64(len(m.Detail)))
		i += copy(dAtA[i:], m.Detail)
	}
	return i, nil
}

func encodeVarintUserserver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetUserInfoByIdReq) Size() (n int) {
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovUserserver(uint64(m.SelfId))
	}
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *GetUserInfoByIdArrReq) Size() (n int) {
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovUserserver(uint64(m.SelfId))
	}
	if len(m.UserIds) > 0 {
		l = 0
		for _, e := range m.UserIds {
			l += sovUserserver(uint64(e))
		}
		n += 1 + sovUserserver(uint64(l)) + l
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *UserInfoArray) Size() (n int) {
	var l int
	_ = l
	if len(m.Userin) > 0 {
		for _, e := range m.Userin {
			l = e.Size()
			n += 1 + l + sovUserserver(uint64(l))
		}
	}
	return n
}

func (m *UserInfo) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovUserserver(uint64(m.AccessHash))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovUserserver(uint64(m.Status))
	}
	if m.LastLogout != 0 {
		n += 1 + sovUserserver(uint64(m.LastLogout))
	}
	if m.ClusterRegion != 0 {
		n += 1 + sovUserserver(uint64(m.ClusterRegion))
	}
	l = len(m.FontRgb)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.BotInfoVersion != 0 {
		n += 1 + sovUserserver(uint64(m.BotInfoVersion))
	}
	l = len(m.BotInlinePlaceholder)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	l = len(m.RestrictionReason)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	l = len(m.LangCode)
	if l > 0 {
		n += 2 + l + sovUserserver(uint64(l))
	}
	l = len(m.LocalPhone)
	if l > 0 {
		n += 2 + l + sovUserserver(uint64(l))
	}
	if m.Deleted {
		n += 3
	}
	if m.Bot {
		n += 3
	}
	if m.BotChatHistory {
		n += 3
	}
	if m.BotNochats {
		n += 3
	}
	if m.Verified {
		n += 3
	}
	if m.Restricted {
		n += 3
	}
	if m.Min {
		n += 3
	}
	if m.BotInlineGeo {
		n += 3
	}
	if m.Self {
		n += 3
	}
	if m.Contact {
		n += 3
	}
	if m.MutalContact {
		n += 3
	}
	if m.StarMark {
		n += 3
	}
	if m.ShowContactPhone {
		n += 3
	}
	if m.GroupId != 0 {
		n += 2 + sovUserserver(uint64(m.GroupId))
	}
	return n
}

func (m *GetUserExpireByIdReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *GetUserExpireByIdResult) Size() (n int) {
	var l int
	_ = l
	if m.Expire != 0 {
		n += 1 + sovUserserver(uint64(m.Expire))
	}
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetUserByphone) Size() (n int) {
	var l int
	_ = l
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *GetUserInfoResult) Size() (n int) {
	var l int
	_ = l
	if m.Uinfo != nil {
		l = m.Uinfo.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetUserInfoByIdArrResult) Size() (n int) {
	var l int
	_ = l
	if len(m.Uinfo) > 0 {
		for _, e := range m.Uinfo {
			l = e.Size()
			n += 1 + l + sovUserserver(uint64(l))
		}
	}
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetUserByUsername) Size() (n int) {
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovUserserver(uint64(m.SelfId))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *UpdatePhotoInfoReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.KeyId != 0 {
		n += 1 + sovUserserver(uint64(m.KeyId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *GetPhotoInfoReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *UpdateUserPhotoResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetUserPhotoResult) Size() (n int) {
	var l int
	_ = l
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *UpdateUserProfileReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.Flags != 0 {
		n += 1 + sovUserserver(uint64(m.Flags))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *UpdateUserProfileResult) Size() (n int) {
	var l int
	_ = l
	if m.Uinfo != nil {
		l = m.Uinfo.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *StatusReq) Size() (n int) {
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovUserserver(uint64(m.SelfId))
	}
	if m.KeyId != 0 {
		n += 1 + sovUserserver(uint64(m.KeyId))
	}
	if m.Status {
		n += 2
	}
	if m.Offline != 0 {
		n += 1 + sovUserserver(uint64(m.Offline))
	}
	if m.Longitude != 0 {
		n += 9
	}
	if m.Latitude != 0 {
		n += 9
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *StatusResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *UpdateExpireReq) Size() (n int) {
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovUserserver(uint64(m.SelfId))
	}
	if m.Expire != 0 {
		n += 1 + sovUserserver(uint64(m.Expire))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *UpdateExpireResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *UserClusterChange) Size() (n int) {
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovUserserver(uint64(m.SelfId))
	}
	if m.ClusterId != 0 {
		n += 1 + sovUserserver(uint64(m.ClusterId))
	}
	l = len(m.FromIp)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.FromId != 0 {
		n += 1 + sovUserserver(uint64(m.FromId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *UserClusterChangeResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *UpdateuserNameReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.KeyId != 0 {
		n += 1 + sovUserserver(uint64(m.KeyId))
	}
	return n
}

func (m *UpdateuserNameResult) Size() (n int) {
	var l int
	_ = l
	if m.Uinfo != nil {
		l = m.Uinfo.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *CheckPhoneRegisterReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *CheckPhoneRegisterResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *DeleteAccountByIdReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.DelId != 0 {
		n += 1 + sovUserserver(uint64(m.DelId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *DelAccountResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *BotUpdateInfo) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.BotInfoVersion != 0 {
		n += 1 + sovUserserver(uint64(m.BotInfoVersion))
	}
	if m.BotChatHistory {
		n += 2
	}
	if m.BotNoChat {
		n += 2
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *BotUpdateInfoResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *DelContactReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.ContactId != 0 {
		n += 1 + sovUserserver(uint64(m.ContactId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovUserserver(uint64(m.AccessHash))
	}
	if m.KeyId != 0 {
		n += 1 + sovUserserver(uint64(m.KeyId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *DelContactResult) Size() (n int) {
	var l int
	_ = l
	if m.Uinfo != nil {
		l = m.Uinfo.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *ContactIdHash) Size() (n int) {
	var l int
	_ = l
	if m.ContactId != 0 {
		n += 1 + sovUserserver(uint64(m.ContactId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovUserserver(uint64(m.AccessHash))
	}
	return n
}

func (m *DelContactArrReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if len(m.ContactidArr) > 0 {
		for _, e := range m.ContactidArr {
			l = e.Size()
			n += 1 + l + sovUserserver(uint64(l))
		}
	}
	if m.KeyId != 0 {
		n += 1 + sovUserserver(uint64(m.KeyId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *CmdResetUserContactsReq) Size() (n int) {
	var l int
	_ = l
	if m.AmdinId != 0 {
		n += 1 + sovUserserver(uint64(m.AmdinId))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *CmdResetUserContactsResult) Size() (n int) {
	var l int
	_ = l
	if len(m.CurrentContactIds) > 0 {
		l = 0
		for _, e := range m.CurrentContactIds {
			l += sovUserserver(uint64(e))
		}
		n += 1 + sovUserserver(uint64(l)) + l
	}
	return n
}

func (m *DelContactArrResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *ContatsGetContactsReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.KeyId != 0 {
		n += 1 + sovUserserver(uint64(m.KeyId))
	}
	l = len(m.Contacthash)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *ContactInfo) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.ContactId != 0 {
		n += 1 + sovUserserver(uint64(m.ContactId))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.IsSelfContacted {
		n += 2
	}
	if m.SelfIsContacted {
		n += 2
	}
	if m.StarMark {
		n += 2
	}
	if m.HasPhone {
		n += 2
	}
	return n
}

func (m *ContatsGetContactsResult) Size() (n int) {
	var l int
	_ = l
	if len(m.ContactArr) > 0 {
		for _, e := range m.ContactArr {
			l = e.Size()
			n += 1 + l + sovUserserver(uint64(l))
		}
	}
	if len(m.UserInfoArr) > 0 {
		for _, e := range m.UserInfoArr {
			l = e.Size()
			n += 1 + l + sovUserserver(uint64(l))
		}
	}
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *PhoneBookContact) Size() (n int) {
	var l int
	_ = l
	if m.ClientId != 0 {
		n += 1 + sovUserserver(uint64(m.ClientId))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *ContactsImportPhoneContactsReq) Size() (n int) {
	var l int
	_ = l
	if m.KeyId != 0 {
		n += 1 + sovUserserver(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if len(m.PhoneContactArr) > 0 {
		for _, e := range m.PhoneContactArr {
			l = e.Size()
			n += 1 + l + sovUserserver(uint64(l))
		}
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *ImportContact) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.ClientId != 0 {
		n += 1 + sovUserserver(uint64(m.ClientId))
	}
	return n
}

func (m *PopularContact) Size() (n int) {
	var l int
	_ = l
	if m.ClientId != 0 {
		n += 1 + sovUserserver(uint64(m.ClientId))
	}
	if m.Importers != 0 {
		n += 1 + sovUserserver(uint64(m.Importers))
	}
	return n
}

func (m *ContactsImportPhoneContactsResult) Size() (n int) {
	var l int
	_ = l
	if len(m.ImContactDetail) > 0 {
		for _, e := range m.ImContactDetail {
			l = e.Size()
			n += 1 + l + sovUserserver(uint64(l))
		}
	}
	if len(m.UserInfoArr) > 0 {
		for _, e := range m.UserInfoArr {
			l = e.Size()
			n += 1 + l + sovUserserver(uint64(l))
		}
	}
	if len(m.PopuContact) > 0 {
		for _, e := range m.PopuContact {
			l = e.Size()
			n += 1 + l + sovUserserver(uint64(l))
		}
	}
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *AddRelationIdInfo) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.RelationId != 0 {
		n += 1 + sovUserserver(uint64(m.RelationId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *DelRelationIdInfo) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.RelationId != 0 {
		n += 1 + sovUserserver(uint64(m.RelationId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *AddRelationIdInfoResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *DelRelationIdInfoResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *BlockeduserReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.BlockedId != 0 {
		n += 1 + sovUserserver(uint64(m.BlockedId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovUserserver(uint64(m.AccessHash))
	}
	if m.KeyId != 0 {
		n += 1 + sovUserserver(uint64(m.KeyId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *BlockeduserResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *ContactUnblockedReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.BlockedId != 0 {
		n += 1 + sovUserserver(uint64(m.BlockedId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovUserserver(uint64(m.AccessHash))
	}
	if m.KeyId != 0 {
		n += 1 + sovUserserver(uint64(m.KeyId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *ContactsGetBlockedReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *Blockeduser) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.Date != 0 {
		n += 1 + sovUserserver(uint64(m.Date))
	}
	return n
}

func (m *ContactsGetBlockedResult) Size() (n int) {
	var l int
	_ = l
	if len(m.Blockeduser) > 0 {
		l = 0
		for _, e := range m.Blockeduser {
			l += sovUserserver(uint64(e))
		}
		n += 1 + sovUserserver(uint64(l)) + l
	}
	if len(m.InfoArr) > 0 {
		for _, e := range m.InfoArr {
			l = e.Size()
			n += 1 + l + sovUserserver(uint64(l))
		}
	}
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *SystemWhiteUser) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.Level != 0 {
		n += 1 + sovUserserver(uint64(m.Level))
	}
	if m.Proby != 0 {
		n += 1 + sovUserserver(uint64(m.Proby))
	}
	if m.IsWhite {
		n += 2
	}
	return n
}

func (m *StoreSysWhiteUserReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.Level != 0 {
		n += 1 + sovUserserver(uint64(m.Level))
	}
	if m.Proby != 0 {
		n += 1 + sovUserserver(uint64(m.Proby))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *StoreSysWhiteUserResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *UpdateSystemWhiteUserLevelReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.Level != 0 {
		n += 1 + sovUserserver(uint64(m.Level))
	}
	if m.Proby != 0 {
		n += 1 + sovUserserver(uint64(m.Proby))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *UpdateSystemWhiteUserLevelResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetSysWhiteUserReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *GetSysWhiteUserResult) Size() (n int) {
	var l int
	_ = l
	if m.SysWhiteInfo != nil {
		l = m.SysWhiteInfo.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetSysWhiteUserArrReq) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *GetSysWhiteUserArrResult) Size() (n int) {
	var l int
	_ = l
	if len(m.SysWhiteInfoArr) > 0 {
		for _, e := range m.SysWhiteInfoArr {
			l = e.Size()
			n += 1 + l + sovUserserver(uint64(l))
		}
	}
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *DelSysWhiteUserReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.ProUser != 0 {
		n += 1 + sovUserserver(uint64(m.ProUser))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *DelSysWhiteUserResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *UserDc) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.DcId != 0 {
		n += 1 + sovUserserver(uint64(m.DcId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *GetAllDcReq) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *SetPrivacyReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.PrivacyType != 0 {
		n += 1 + sovUserserver(uint64(m.PrivacyType))
	}
	if m.Range != 0 {
		n += 1 + sovUserserver(uint64(m.Range))
	}
	if len(m.AlwaysDisallow) > 0 {
		l = 0
		for _, e := range m.AlwaysDisallow {
			l += sovUserserver(uint64(e))
		}
		n += 1 + sovUserserver(uint64(l)) + l
	}
	if len(m.AlwaysAllow) > 0 {
		l = 0
		for _, e := range m.AlwaysAllow {
			l += sovUserserver(uint64(e))
		}
		n += 1 + sovUserserver(uint64(l)) + l
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.KeyId != 0 {
		n += 1 + sovUserserver(uint64(m.KeyId))
	}
	if m.SessionId != 0 {
		n += 1 + sovUserserver(uint64(m.SessionId))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *SetPrivacyResult) Size() (n int) {
	var l int
	_ = l
	if len(m.UinfoArr) > 0 {
		for _, e := range m.UinfoArr {
			l = e.Size()
			n += 1 + l + sovUserserver(uint64(l))
		}
	}
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetPrivacyReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.PrivacyType != 0 {
		n += 1 + sovUserserver(uint64(m.PrivacyType))
	}
	if m.KeyId != 0 {
		n += 1 + sovUserserver(uint64(m.KeyId))
	}
	if m.SessionId != 0 {
		n += 1 + sovUserserver(uint64(m.SessionId))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *CheckPrivacyReq) Size() (n int) {
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovUserserver(uint64(m.SelfId))
	}
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.PrivacyType != 0 {
		n += 1 + sovUserserver(uint64(m.PrivacyType))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *CheckPrivacyResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetPrivacyResult) Size() (n int) {
	var l int
	_ = l
	if m.Range != 0 {
		n += 1 + sovUserserver(uint64(m.Range))
	}
	if len(m.AlwaysDisallow) > 0 {
		l = 0
		for _, e := range m.AlwaysDisallow {
			l += sovUserserver(uint64(e))
		}
		n += 1 + sovUserserver(uint64(l)) + l
	}
	if len(m.AlwaysAllow) > 0 {
		l = 0
		for _, e := range m.AlwaysAllow {
			l += sovUserserver(uint64(e))
		}
		n += 1 + sovUserserver(uint64(l)) + l
	}
	if len(m.UserInfos) > 0 {
		for _, e := range m.UserInfos {
			l = e.Size()
			n += 1 + l + sovUserserver(uint64(l))
		}
	}
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *StoreShopStickerSetReq) Size() (n int) {
	var l int
	_ = l
	if m.AccessHash != 0 {
		n += 1 + sovUserserver(uint64(m.AccessHash))
	}
	if m.Free {
		n += 2
	}
	if m.Official {
		n += 2
	}
	if m.Masks {
		n += 2
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	l = len(m.ShortName)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovUserserver(uint64(m.Count))
	}
	if m.Hash != 0 {
		n += 1 + sovUserserver(uint64(m.Hash))
	}
	l = len(m.Emoticon)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if len(m.Documents) > 0 {
		l = 0
		for _, e := range m.Documents {
			l += sovUserserver(uint64(e))
		}
		n += 1 + sovUserserver(uint64(l)) + l
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	return n
}

func (m *StoreShopStickerSetResult) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovUserserver(uint64(m.Id))
	}
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *StoreShopStickerSetDocumentsReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovUserserver(uint64(m.Id))
	}
	if len(m.Documents) > 0 {
		l = 0
		for _, e := range m.Documents {
			l += sovUserserver(uint64(e))
		}
		n += 1 + sovUserserver(uint64(l)) + l
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *StoreShopStickerSetDocumentsResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *DeleteStickerSetReq) Size() (n int) {
	var l int
	_ = l
	if m.StickerId != 0 {
		n += 1 + sovUserserver(uint64(m.StickerId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	return n
}

func (m *DeleteStickerSetResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *StickerSetInfo) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovUserserver(uint64(m.Id))
	}
	if m.AccessHash != 0 {
		n += 1 + sovUserserver(uint64(m.AccessHash))
	}
	if m.Free {
		n += 2
	}
	if m.Official {
		n += 2
	}
	if m.Masks {
		n += 2
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	l = len(m.ShortName)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovUserserver(uint64(m.Count))
	}
	if m.Hash != 0 {
		n += 1 + sovUserserver(uint64(m.Hash))
	}
	l = len(m.Emoticon)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if len(m.Documents) > 0 {
		l = 0
		for _, e := range m.Documents {
			l += sovUserserver(uint64(e))
		}
		n += 1 + sovUserserver(uint64(l)) + l
	}
	return n
}

func (m *GetStickerSetInfoReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovUserserver(uint64(m.Id))
	}
	l = len(m.ShortName)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.IsId {
		n += 2
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *GetStickerSetInfoResult) Size() (n int) {
	var l int
	_ = l
	if m.StickerSetInfo != nil {
		l = m.StickerSetInfo.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *StickerPackDocumentBase) Size() (n int) {
	var l int
	_ = l
	if m.AttributesStikerSetId != 0 {
		n += 1 + sovUserserver(uint64(m.AttributesStikerSetId))
	}
	if m.DocumentId != 0 {
		n += 1 + sovUserserver(uint64(m.DocumentId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovUserserver(uint64(m.AccessHash))
	}
	l = len(m.MimeType)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovUserserver(uint64(m.Size_))
	}
	l = len(m.Thumb)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.DcId != 0 {
		n += 1 + sovUserserver(uint64(m.DcId))
	}
	if m.Date != 0 {
		n += 1 + sovUserserver(uint64(m.Date))
	}
	if m.AttributesImageSizeW != 0 {
		n += 1 + sovUserserver(uint64(m.AttributesImageSizeW))
	}
	if m.AttributesImageSizeH != 0 {
		n += 1 + sovUserserver(uint64(m.AttributesImageSizeH))
	}
	l = len(m.AttributesStikerAlt)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.AttributesStikerSetAccessHash != 0 {
		n += 1 + sovUserserver(uint64(m.AttributesStikerSetAccessHash))
	}
	l = len(m.AttributesFileName)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *StickerPackDocumentInfo) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovUserserver(uint64(m.Id))
	}
	if m.InfoBase != nil {
		l = m.InfoBase.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *StoreStickerPackDcReq) Size() (n int) {
	var l int
	_ = l
	if m.Stickpackbase != nil {
		l = m.Stickpackbase.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *StoreStickerPackDcResult) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovUserserver(uint64(m.Id))
	}
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *StoreStickerPackDcArrReq) Size() (n int) {
	var l int
	_ = l
	if len(m.StPDB) > 0 {
		for _, e := range m.StPDB {
			l = e.Size()
			n += 1 + l + sovUserserver(uint64(l))
		}
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *StoreStickerPackDcArrResult) Size() (n int) {
	var l int
	_ = l
	if len(m.IdArr) > 0 {
		l = 0
		for _, e := range m.IdArr {
			l += sovUserserver(uint64(e))
		}
		n += 1 + sovUserserver(uint64(l)) + l
	}
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetStickerSetPackDcInfosReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovUserserver(uint64(m.Id))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *GetStickerSetPackDcInfosResult) Size() (n int) {
	var l int
	_ = l
	if len(m.StPDcInfo) > 0 {
		for _, e := range m.StPDcInfo {
			l = e.Size()
			n += 1 + l + sovUserserver(uint64(l))
		}
	}
	return n
}

func (m *AddOrDeleteFaveSticerReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.StickerId != 0 {
		n += 1 + sovUserserver(uint64(m.StickerId))
	}
	if m.Unfave {
		n += 2
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *AddOrDeleteFaveSticerResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovUserserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *GetFavedStickersReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.Hash != 0 {
		n += 1 + sovUserserver(uint64(m.Hash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *GetFavedStickersResult) Size() (n int) {
	var l int
	_ = l
	if m.Hash != 0 {
		n += 1 + sovUserserver(uint64(m.Hash))
	}
	if len(m.Packs) > 0 {
		for _, e := range m.Packs {
			l = e.Size()
			n += 1 + l + sovUserserver(uint64(l))
		}
	}
	if len(m.Stickers) > 0 {
		for _, e := range m.Stickers {
			l = e.Size()
			n += 1 + l + sovUserserver(uint64(l))
		}
	}
	if m.ErrorCode != 0 {
		n += 1 + sovUserserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *StickerPack) Size() (n int) {
	var l int
	_ = l
	l = len(m.Emoticon)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.DocumentId != 0 {
		n += 1 + sovUserserver(uint64(m.DocumentId))
	}
	return n
}

func (m *StoreUserStickerSetReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.StickersetId != 0 {
		n += 1 + sovUserserver(uint64(m.StickersetId))
	}
	if m.Installed {
		n += 2
	}
	if m.Disabled {
		n += 2
	}
	if m.Order != 0 {
		n += 1 + sovUserserver(uint64(m.Order))
	}
	if m.Archived {
		n += 2
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *StoreUserStickerSetResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *UpdateUserStickerSetDisabledReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.StickersetId != 0 {
		n += 1 + sovUserserver(uint64(m.StickersetId))
	}
	if m.Disabled {
		n += 2
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *UpdateUserStickerSetDisabledResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *UpdateUserStickerSetOrderReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.StickersetId != 0 {
		n += 1 + sovUserserver(uint64(m.StickersetId))
	}
	if m.Order != 0 {
		n += 1 + sovUserserver(uint64(m.Order))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *UpdateUserStickerSetOrderResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *UpdateUserStickerSetInstallArReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.StickersetId != 0 {
		n += 1 + sovUserserver(uint64(m.StickersetId))
	}
	if m.Archived {
		n += 2
	}
	if m.Installed {
		n += 2
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *UpdateUserStickerSetInstallArResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *DeleteuserStickerReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.StickersetId != 0 {
		n += 1 + sovUserserver(uint64(m.StickersetId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *DeleteuserStickerResult) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.StickersetId != 0 {
		n += 1 + sovUserserver(uint64(m.StickersetId))
	}
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *UserStickerInfo) Size() (n int) {
	var l int
	_ = l
	if m.StickersetId != 0 {
		n += 1 + sovUserserver(uint64(m.StickersetId))
	}
	if m.Installed {
		n += 2
	}
	if m.Disabled {
		n += 2
	}
	if m.Order != 0 {
		n += 1 + sovUserserver(uint64(m.Order))
	}
	if m.AccessHash != 0 {
		n += 1 + sovUserserver(uint64(m.AccessHash))
	}
	if m.Free {
		n += 2
	}
	if m.Official {
		n += 2
	}
	if m.Archived {
		n += 2
	}
	if m.Masks {
		n += 2
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	l = len(m.ShortName)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovUserserver(uint64(m.Count))
	}
	if m.Hash != 0 {
		n += 1 + sovUserserver(uint64(m.Hash))
	}
	l = len(m.Emotico)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if len(m.Documents) > 0 {
		l = 0
		for _, e := range m.Documents {
			l += sovUserserver(uint64(e))
		}
		n += 1 + sovUserserver(uint64(l)) + l
	}
	return n
}

func (m *UserStickerInfoArr) Size() (n int) {
	var l int
	_ = l
	if len(m.StickerInfo) > 0 {
		for _, e := range m.StickerInfo {
			l = e.Size()
			n += 1 + l + sovUserserver(uint64(l))
		}
	}
	return n
}

func (m *StickerSetInfoArr) Size() (n int) {
	var l int
	_ = l
	if len(m.StickerInfo) > 0 {
		for _, e := range m.StickerInfo {
			l = e.Size()
			n += 1 + l + sovUserserver(uint64(l))
		}
	}
	return n
}

func (m *GetuserAllStickersReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *GetuserAllStickersResult) Size() (n int) {
	var l int
	_ = l
	if len(m.StickerInfoArr) > 0 {
		for _, e := range m.StickerInfoArr {
			l = e.Size()
			n += 1 + l + sovUserserver(uint64(l))
		}
	}
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetAllStickerSetsReq) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *GetAllStickerSetsResult) Size() (n int) {
	var l int
	_ = l
	if len(m.StickerInfoArr) > 0 {
		for _, e := range m.StickerInfoArr {
			l = e.Size()
			n += 1 + l + sovUserserver(uint64(l))
		}
	}
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *DeleteStickerPackDocumentReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovUserserver(uint64(m.Id))
	}
	if m.StickersetId != 0 {
		n += 1 + sovUserserver(uint64(m.StickersetId))
	}
	return n
}

func (m *DeleteStickerPackDocumentResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetAuthorStickerSetReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.SetId != 0 {
		n += 1 + sovUserserver(uint64(m.SetId))
	}
	return n
}

func (m *GetAuthorStickerSetResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovUserserver(uint64(m.ErrorCode))
	}
	if m.Set != nil {
		l = m.Set.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *GetAuthorAllStickerSetReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	return n
}

func (m *GetAuthorAllStickerSetResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovUserserver(uint64(m.ErrorCode))
	}
	if len(m.Sets) > 0 {
		for _, e := range m.Sets {
			l = e.Size()
			n += 1 + l + sovUserserver(uint64(l))
		}
	}
	return n
}

func (m *AuthorStickerSet) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.StickersetId != 0 {
		n += 1 + sovUserserver(uint64(m.StickersetId))
	}
	l = len(m.ShortName)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.Archived {
		n += 2
	}
	if m.Installed {
		n += 2
	}
	if m.Disabled {
		n += 2
	}
	if m.Ordered != 0 {
		n += 1 + sovUserserver(uint64(m.Ordered))
	}
	if m.Created != 0 {
		n += 1 + sovUserserver(uint64(m.Created))
	}
	if m.Updated != 0 {
		n += 1 + sovUserserver(uint64(m.Updated))
	}
	return n
}

func (m *CountAuthorAllStickerSetReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	return n
}

func (m *CountAuthorAllStickerSetResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovUserserver(uint64(m.ErrorCode))
	}
	if m.Count != 0 {
		n += 1 + sovUserserver(uint64(m.Count))
	}
	return n
}

func (m *UserGifInfoArr) Size() (n int) {
	var l int
	_ = l
	if len(m.GifArr) > 0 {
		for _, e := range m.GifArr {
			l = e.Size()
			n += 1 + l + sovUserserver(uint64(l))
		}
	}
	return n
}

func (m *UserSaveGifInfo) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	l = len(m.GifId)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.Fid != 0 {
		n += 1 + sovUserserver(uint64(m.Fid))
	}
	if m.GitHash != 0 {
		n += 1 + sovUserserver(uint64(m.GitHash))
	}
	return n
}

func (m *SaveUserGifReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	l = len(m.GifId)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.Fid != 0 {
		n += 1 + sovUserserver(uint64(m.Fid))
	}
	if m.GitHash != 0 {
		n += 1 + sovUserserver(uint64(m.GitHash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *SaveUserGifResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *DelUserGifReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.Fid != 0 {
		n += 1 + sovUserserver(uint64(m.Fid))
	}
	if m.GitHash != 0 {
		n += 1 + sovUserserver(uint64(m.GitHash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *DelUserGifResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetUserGifsReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.Hash != 0 {
		n += 1 + sovUserserver(uint64(m.Hash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *GetUserGifsResult) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.Hash != 0 {
		n += 1 + sovUserserver(uint64(m.Hash))
	}
	if len(m.GifArr) > 0 {
		for _, e := range m.GifArr {
			l = e.Size()
			n += 1 + l + sovUserserver(uint64(l))
		}
	}
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *CheckUserIsBlockedReq) Size() (n int) {
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovUserserver(uint64(m.SelfId))
	}
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *CheckUserIsBlockedResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *RegisterUserInfo) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovUserserver(uint64(m.AccessHash))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	l = len(m.LocalPhone)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.IsBot {
		n += 2
	}
	if m.BotInfoVersion != 0 {
		n += 1 + sovUserserver(uint64(m.BotInfoVersion))
	}
	if m.BotChatHistory {
		n += 2
	}
	if m.BotNoChats {
		n += 2
	}
	return n
}

func (m *UpdateUserInfoResult) Size() (n int) {
	var l int
	_ = l
	if m.Uinfo != nil {
		l = m.Uinfo.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovUserserver(uint64(m.ErrorCode))
	}
	if m.Result {
		n += 2
	}
	return n
}

func (m *CheckUserAccessHashValidReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovUserserver(uint64(m.AccessHash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *CheckUserAccessHashValidResult) Size() (n int) {
	var l int
	_ = l
	if m.IsValid {
		n += 2
	}
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *RegisterUserInfoReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovUserserver(uint64(m.AccessHash))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.IsBot {
		n += 2
	}
	if m.BotInfoVersion != 0 {
		n += 1 + sovUserserver(uint64(m.BotInfoVersion))
	}
	if m.BotChatHistory {
		n += 2
	}
	if m.BotNoChats {
		n += 2
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *RegisterUserInfoResult) Size() (n int) {
	var l int
	_ = l
	if m.Uinfo != nil {
		l = m.Uinfo.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetNotifySettingsReq) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovUserserver(uint64(m.FromId))
	}
	if m.ReqType != 0 {
		n += 1 + sovUserserver(uint64(m.ReqType))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *GetNotifySettingsResult) Size() (n int) {
	var l int
	_ = l
	if m.ShowPreviews {
		n += 2
	}
	if m.Silent {
		n += 2
	}
	if m.MuteUntil != 0 {
		n += 1 + sovUserserver(uint64(m.MuteUntil))
	}
	l = len(m.Sound)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *UpdateNotifySettingsReq) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovUserserver(uint64(m.FromId))
	}
	if m.ReqType != 0 {
		n += 1 + sovUserserver(uint64(m.ReqType))
	}
	if m.ShowPreviews {
		n += 2
	}
	if m.Silent {
		n += 2
	}
	if m.MuteUntil != 0 {
		n += 1 + sovUserserver(uint64(m.MuteUntil))
	}
	l = len(m.Sound)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *UpdateNotifySettingsResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetContactsStatusReq) Size() (n int) {
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovUserserver(uint64(m.SelfId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *UserStaus) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.Status != 0 {
		n += 1 + sovUserserver(uint64(m.Status))
	}
	if m.OfflineTime != 0 {
		n += 1 + sovUserserver(uint64(m.OfflineTime))
	}
	return n
}

func (m *GetContactsStatusResult) Size() (n int) {
	var l int
	_ = l
	if len(m.ContactStatusArr) > 0 {
		for _, e := range m.ContactStatusArr {
			l = e.Size()
			n += 1 + l + sovUserserver(uint64(l))
		}
	}
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *UpdateBotPicRequest) Size() (n int) {
	var l int
	_ = l
	if m.BotId != 0 {
		n += 1 + sovUserserver(uint64(m.BotId))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *UpdateBotPicResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetAllProxyConfigReq) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *ProxyAddr) Size() (n int) {
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	l = len(m.InnerIp)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovUserserver(uint64(m.Port))
	}
	return n
}

func (m *GetAllProxyConfigResult) Size() (n int) {
	var l int
	_ = l
	if len(m.Addrs) > 0 {
		for _, e := range m.Addrs {
			l = e.Size()
			n += 1 + l + sovUserserver(uint64(l))
		}
	}
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *CheckUserNameOccupiedReq) Size() (n int) {
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovUserserver(uint64(m.Userid))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *CheckUserNameOccupiedResult) Size() (n int) {
	var l int
	_ = l
	if m.Occpuy {
		n += 2
	}
	return n
}

func (m *GetUserGpsReq) Size() (n int) {
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovUserserver(uint64(m.Userid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *GetUserGpsResult) Size() (n int) {
	var l int
	_ = l
	if m.Latitude != 0 {
		n += 9
	}
	if m.Longitude != 0 {
		n += 9
	}
	l = len(m.DeviceModule)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovUserserver(uint64(m.Timestamp))
	}
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *CheckSelfIsContactReq) Size() (n int) {
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovUserserver(uint64(m.SelfId))
	}
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *CheckSelfIsContactResult) Size() (n int) {
	var l int
	_ = l
	if m.SelfIsContact {
		n += 2
	}
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *UpdateSwitchReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.Switch != 0 {
		n += 1 + sovUserserver(uint64(m.Switch))
	}
	if m.OnOff {
		n += 2
	}
	return n
}

func (m *UpdateSwitchResult) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovUserserver(uint64(m.Code))
	}
	return n
}

func (m *GetSwitchStatusReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.Switch != 0 {
		n += 1 + sovUserserver(uint64(m.Switch))
	}
	return n
}

func (m *GetSwitchStatusResult) Size() (n int) {
	var l int
	_ = l
	if m.OnOff {
		n += 2
	}
	if m.Code != 0 {
		n += 1 + sovUserserver(uint64(m.Code))
	}
	return n
}

func (m *UGetUsersChatsReq) Size() (n int) {
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovUserserver(uint64(m.Userid))
	}
	if len(m.Users) > 0 {
		l = 0
		for _, e := range m.Users {
			l += sovUserserver(uint64(e))
		}
		n += 1 + sovUserserver(uint64(l)) + l
	}
	if len(m.Chatid) > 0 {
		l = 0
		for _, e := range m.Chatid {
			l += sovUserserver(uint64(e))
		}
		n += 1 + sovUserserver(uint64(l)) + l
	}
	if len(m.Channelid) > 0 {
		l = 0
		for _, e := range m.Channelid {
			l += sovUserserver(uint64(e))
		}
		n += 1 + sovUserserver(uint64(l)) + l
	}
	if m.ProtocolLayer != 0 {
		n += 1 + sovUserserver(uint64(m.ProtocolLayer))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *UGetUsersChatsResult) Size() (n int) {
	var l int
	_ = l
	if len(m.Channels) > 0 {
		for _, b := range m.Channels {
			l = len(b)
			n += 1 + l + sovUserserver(uint64(l))
		}
	}
	if m.Users != nil {
		l = m.Users.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	if len(m.Chats) > 0 {
		for _, b := range m.Chats {
			l = len(b)
			n += 1 + l + sovUserserver(uint64(l))
		}
	}
	if len(m.NoChats) > 0 {
		l = 0
		for _, e := range m.NoChats {
			l += sovUserserver(uint64(e))
		}
		n += 1 + sovUserserver(uint64(l)) + l
	}
	if len(m.NoChans) > 0 {
		l = 0
		for _, e := range m.NoChans {
			l += sovUserserver(uint64(e))
		}
		n += 1 + sovUserserver(uint64(l)) + l
	}
	if m.Resultcode != 0 {
		n += 1 + sovUserserver(uint64(m.Resultcode))
	}
	return n
}

func (m *UpdateBotInfoSuppReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	l = len(m.Placeholder)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.Geo {
		n += 2
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *UpdateBotInfoSuppResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovUserserver(uint64(m.Errorcode))
	}
	return n
}

func (m *DeleteUserUsernameReq) Size() (n int) {
	var l int
	_ = l
	if m.AdminId != 0 {
		n += 1 + sovUserserver(uint64(m.AdminId))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.ForceDelete {
		n += 2
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *DeleteUserUsernameResult) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovUserserver(uint64(m.Code))
	}
	l = len(m.InternalErrorMessage)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.OwnerId != 0 {
		n += 1 + sovUserserver(uint64(m.OwnerId))
	}
	return n
}

func (m *UpdateUserLocationReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	l = len(m.Detail)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *UpdateUserLocationResult) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *UpdateUserGrenderReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.Grender != 0 {
		n += 1 + sovUserserver(uint64(m.Grender))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *UpdateUserGrenderResult) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *UpdateUserEmailReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *UpdateUserEmailResult) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *UploadContactsReq) Size() (n int) {
	var l int
	_ = l
	if m.KeyId != 0 {
		n += 1 + sovUserserver(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if len(m.PhoneContactArr) > 0 {
		for _, e := range m.PhoneContactArr {
			l = e.Size()
			n += 1 + l + sovUserserver(uint64(l))
		}
	}
	return n
}

func (m *UploadContactsResult) Size() (n int) {
	var l int
	_ = l
	if m.Error {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *ApplyContactReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.ApplyUserId != 0 {
		n += 1 + sovUserserver(uint64(m.ApplyUserId))
	}
	l = len(m.WithMessage)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *ApplyContactResult) Size() (n int) {
	var l int
	_ = l
	if m.Error {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *GetAppliedContactsReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	return n
}

func (m *GetAppliedContactsResult) Size() (n int) {
	var l int
	_ = l
	if m.Error {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if len(m.AppliedArr) > 0 {
		for _, e := range m.AppliedArr {
			l = e.Size()
			n += 1 + l + sovUserserver(uint64(l))
		}
	}
	return n
}

func (m *Applied) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovUserserver(uint64(m.Id))
	}
	if m.UserId != 0 {
		n += 1 + sovUserserver(uint64(m.UserId))
	}
	if m.ApplyUser != nil {
		l = m.ApplyUser.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	l = len(m.WithMessage)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovUserserver(uint64(m.Status))
	}
	if m.Flag != 0 {
		n += 1 + sovUserserver(uint64(m.Flag))
	}
	if m.Gender != 0 {
		n += 1 + sovUserserver(uint64(m.Gender))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	l = len(m.Detail)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *VerifyContactReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovUserserver(uint64(m.Id))
	}
	if m.VerifyUserId != 0 {
		n += 1 + sovUserserver(uint64(m.VerifyUserId))
	}
	if m.Status != 0 {
		n += 1 + sovUserserver(uint64(m.Status))
	}
	return n
}

func (m *VerifyContactResult) Size() (n int) {
	var l int
	_ = l
	if m.Error {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *DeleteAppliedContactReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovUserserver(uint64(m.Id))
	}
	return n
}

func (m *DeleteAppliedContactResult) Size() (n int) {
	var l int
	_ = l
	if m.Error {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *SearchUserByPhoneReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func (m *SearchUserByPhoneResult) Size() (n int) {
	var l int
	_ = l
	if m.UserInfo != nil {
		l = m.UserInfo.Size()
		n += 1 + l + sovUserserver(uint64(l))
	}
	if m.Gender != 0 {
		n += 1 + sovUserserver(uint64(m.Gender))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	l = len(m.Detail)
	if l > 0 {
		n += 1 + l + sovUserserver(uint64(l))
	}
	return n
}

func sovUserserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozUserserver(x uint64) (n int) {
	return sovUserserver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetUserInfoByIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserInfoByIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserInfoByIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserInfoByIdArrReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserInfoByIdArrReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserInfoByIdArrReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIds = append(m.UserIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUserserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUserserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIds = append(m.UserIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIds", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfoArray) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfoArray: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfoArray: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userin = append(m.Userin, &UserInfo{})
			if err := m.Userin[len(m.Userin)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: userInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: userInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLogout", wireType)
			}
			m.LastLogout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastLogout |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterRegion", wireType)
			}
			m.ClusterRegion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterRegion |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FontRgb", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FontRgb = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotInfoVersion", wireType)
			}
			m.BotInfoVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotInfoVersion |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotInlinePlaceholder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BotInlinePlaceholder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestrictionReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RestrictionReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LangCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = bool(v != 0)
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bot = bool(v != 0)
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotChatHistory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotChatHistory = bool(v != 0)
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotNochats", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotNochats = bool(v != 0)
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verified = bool(v != 0)
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Restricted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Restricted = bool(v != 0)
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Min = bool(v != 0)
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotInlineGeo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotInlineGeo = bool(v != 0)
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Self", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Self = bool(v != 0)
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contact", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Contact = bool(v != 0)
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MutalContact", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MutalContact = bool(v != 0)
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StarMark", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StarMark = bool(v != 0)
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowContactPhone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowContactPhone = bool(v != 0)
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserExpireByIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserExpireByIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserExpireByIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserExpireByIdResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserExpireByIdResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserExpireByIdResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			m.Expire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expire |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserByphone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserByphone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserByphone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserInfoResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserInfoResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserInfoResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uinfo == nil {
				m.Uinfo = &UserInfo{}
			}
			if err := m.Uinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserInfoByIdArrResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserInfoByIdArrResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserInfoByIdArrResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uinfo = append(m.Uinfo, &UserInfo{})
			if err := m.Uinfo[len(m.Uinfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserByUsername) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserByUsername: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserByUsername: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePhotoInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: updatePhotoInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: updatePhotoInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPhotoInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPhotoInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPhotoInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserPhotoResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserPhotoResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserPhotoResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserPhotoResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserPhotoResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserPhotoResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserProfileReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserProfileReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserProfileReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserProfileResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserProfileResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserProfileResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uinfo == nil {
				m.Uinfo = &UserInfo{}
			}
			if err := m.Uinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offline", wireType)
			}
			m.Offline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offline |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Longitude = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Latitude = float64(math.Float64frombits(v))
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateExpireReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateExpireReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateExpireReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			m.Expire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expire |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateExpireResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateExpireResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateExpireResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserClusterChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserClusterChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserClusterChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			m.ClusterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserClusterChangeResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserClusterChangeResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserClusterChangeResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateuserNameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateuserNameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateuserNameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateuserNameResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateuserNameResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateuserNameResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uinfo == nil {
				m.Uinfo = &UserInfo{}
			}
			if err := m.Uinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckPhoneRegisterReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckPhoneRegisterReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckPhoneRegisterReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckPhoneRegisterResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckPhoneRegisterResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckPhoneRegisterResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAccountByIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAccountByIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAccountByIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelId", wireType)
			}
			m.DelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelAccountResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelAccountResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelAccountResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BotUpdateInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BotUpdateInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BotUpdateInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotInfoVersion", wireType)
			}
			m.BotInfoVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotInfoVersion |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotChatHistory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotChatHistory = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotNoChat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotNoChat = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BotUpdateInfoResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BotUpdateInfoResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BotUpdateInfoResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelContactReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelContactReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelContactReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactId", wireType)
			}
			m.ContactId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContactId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelContactResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelContactResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelContactResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uinfo == nil {
				m.Uinfo = &UserInfo{}
			}
			if err := m.Uinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactIdHash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactIdHash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactIdHash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactId", wireType)
			}
			m.ContactId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContactId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelContactArrReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelContactArrReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelContactArrReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactidArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactidArr = append(m.ContactidArr, &ContactIdHash{})
			if err := m.ContactidArr[len(m.ContactidArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CmdResetUserContactsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmdResetUserContactsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmdResetUserContactsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmdinId", wireType)
			}
			m.AmdinId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AmdinId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CmdResetUserContactsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmdResetUserContactsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmdResetUserContactsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CurrentContactIds = append(m.CurrentContactIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUserserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUserserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CurrentContactIds = append(m.CurrentContactIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentContactIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelContactArrResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelContactArrResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelContactArrResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContatsGetContactsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContatsGetContactsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContatsGetContactsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contacthash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contacthash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: contactInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: contactInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactId", wireType)
			}
			m.ContactId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContactId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSelfContacted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSelfContacted = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfIsContacted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SelfIsContacted = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StarMark", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StarMark = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasPhone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasPhone = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContatsGetContactsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContatsGetContactsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContatsGetContactsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactArr = append(m.ContactArr, &ContactInfo{})
			if err := m.ContactArr[len(m.ContactArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfoArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserInfoArr = append(m.UserInfoArr, &UserInfo{})
			if err := m.UserInfoArr[len(m.UserInfoArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneBookContact) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneBookContact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneBookContact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			m.ClientId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsImportPhoneContactsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsImportPhoneContactsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsImportPhoneContactsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneContactArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneContactArr = append(m.PhoneContactArr, &PhoneBookContact{})
			if err := m.PhoneContactArr[len(m.PhoneContactArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImportContact) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImportContact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImportContact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			m.ClientId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PopularContact) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PopularContact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PopularContact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			m.ClientId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Importers", wireType)
			}
			m.Importers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Importers |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsImportPhoneContactsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsImportPhoneContactsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsImportPhoneContactsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImContactDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImContactDetail = append(m.ImContactDetail, &ImportContact{})
			if err := m.ImContactDetail[len(m.ImContactDetail)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfoArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserInfoArr = append(m.UserInfoArr, &UserInfo{})
			if err := m.UserInfoArr[len(m.UserInfoArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PopuContact", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PopuContact = append(m.PopuContact, &PopularContact{})
			if err := m.PopuContact[len(m.PopuContact)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddRelationIdInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddRelationIdInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddRelationIdInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelationId", wireType)
			}
			m.RelationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelationId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelRelationIdInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelRelationIdInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelRelationIdInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelationId", wireType)
			}
			m.RelationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelationId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddRelationIdInfoResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddRelationIdInfoResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddRelationIdInfoResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelRelationIdInfoResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelRelationIdInfoResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelRelationIdInfoResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockeduserReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockeduserReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockeduserReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedId", wireType)
			}
			m.BlockedId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockedId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockeduserResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockeduserResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockeduserResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactUnblockedReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactUnblockedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactUnblockedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedId", wireType)
			}
			m.BlockedId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockedId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsGetBlockedReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsGetBlockedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsGetBlockedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Blockeduser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: blockeduser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: blockeduser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsGetBlockedResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsGetBlockedResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsGetBlockedResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Blockeduser = append(m.Blockeduser, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUserserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUserserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Blockeduser = append(m.Blockeduser, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Blockeduser", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfoArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InfoArr = append(m.InfoArr, &UserInfo{})
			if err := m.InfoArr[len(m.InfoArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemWhiteUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemWhiteUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemWhiteUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proby", wireType)
			}
			m.Proby = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Proby |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWhite", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsWhite = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreSysWhiteUserReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreSysWhiteUserReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreSysWhiteUserReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proby", wireType)
			}
			m.Proby = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Proby |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreSysWhiteUserResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreSysWhiteUserResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreSysWhiteUserResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSystemWhiteUserLevelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSystemWhiteUserLevelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSystemWhiteUserLevelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proby", wireType)
			}
			m.Proby = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Proby |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSystemWhiteUserLevelResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSystemWhiteUserLevelResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSystemWhiteUserLevelResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSysWhiteUserReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSysWhiteUserReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSysWhiteUserReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSysWhiteUserResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSysWhiteUserResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSysWhiteUserResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SysWhiteInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SysWhiteInfo == nil {
				m.SysWhiteInfo = &SystemWhiteUser{}
			}
			if err := m.SysWhiteInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSysWhiteUserArrReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSysWhiteUserArrReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSysWhiteUserArrReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSysWhiteUserArrResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSysWhiteUserArrResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSysWhiteUserArrResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SysWhiteInfoArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SysWhiteInfoArr = append(m.SysWhiteInfoArr, &SystemWhiteUser{})
			if err := m.SysWhiteInfoArr[len(m.SysWhiteInfoArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelSysWhiteUserReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelSysWhiteUserReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelSysWhiteUserReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProUser", wireType)
			}
			m.ProUser = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProUser |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelSysWhiteUserResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelSysWhiteUserResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelSysWhiteUserResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserDc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserDc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserDc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcId", wireType)
			}
			m.DcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DcId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllDcReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllDcReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllDcReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetPrivacyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetPrivacyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetPrivacyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivacyType", wireType)
			}
			m.PrivacyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrivacyType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			m.Range = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Range |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AlwaysDisallow = append(m.AlwaysDisallow, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUserserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUserserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AlwaysDisallow = append(m.AlwaysDisallow, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AlwaysDisallow", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AlwaysAllow = append(m.AlwaysAllow, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUserserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUserserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AlwaysAllow = append(m.AlwaysAllow, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AlwaysAllow", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetPrivacyResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetPrivacyResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetPrivacyResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UinfoArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UinfoArr = append(m.UinfoArr, &UserInfo{})
			if err := m.UinfoArr[len(m.UinfoArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPrivacyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPrivacyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPrivacyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivacyType", wireType)
			}
			m.PrivacyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrivacyType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckPrivacyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckPrivacyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckPrivacyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivacyType", wireType)
			}
			m.PrivacyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrivacyType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckPrivacyResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckPrivacyResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckPrivacyResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPrivacyResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPrivacyResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPrivacyResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			m.Range = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Range |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AlwaysDisallow = append(m.AlwaysDisallow, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUserserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUserserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AlwaysDisallow = append(m.AlwaysDisallow, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AlwaysDisallow", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AlwaysAllow = append(m.AlwaysAllow, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUserserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUserserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AlwaysAllow = append(m.AlwaysAllow, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AlwaysAllow", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserInfos = append(m.UserInfos, &UserInfo{})
			if err := m.UserInfos[len(m.UserInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreShopStickerSetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreShopStickerSetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreShopStickerSetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Free", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Free = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Official", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Official = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Masks", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Masks = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Emoticon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Emoticon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Documents = append(m.Documents, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUserserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUserserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Documents = append(m.Documents, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Documents", wireType)
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreShopStickerSetResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreShopStickerSetResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreShopStickerSetResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreShopStickerSetDocumentsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreShopStickerSetDocumentsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreShopStickerSetDocumentsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Documents = append(m.Documents, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUserserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUserserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Documents = append(m.Documents, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Documents", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreShopStickerSetDocumentsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreShopStickerSetDocumentsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreShopStickerSetDocumentsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteStickerSetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteStickerSetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteStickerSetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickerId", wireType)
			}
			m.StickerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StickerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteStickerSetResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteStickerSetResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteStickerSetResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StickerSetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StickerSetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StickerSetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Free", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Free = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Official", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Official = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Masks", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Masks = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Emoticon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Emoticon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Documents = append(m.Documents, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUserserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUserserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Documents = append(m.Documents, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Documents", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStickerSetInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStickerSetInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStickerSetInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsId", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsId = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStickerSetInfoResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStickerSetInfoResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStickerSetInfoResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickerSetInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StickerSetInfo == nil {
				m.StickerSetInfo = &StickerSetInfo{}
			}
			if err := m.StickerSetInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StickerPackDocumentBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StickerPackDocumentBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StickerPackDocumentBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributesStikerSetId", wireType)
			}
			m.AttributesStikerSetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttributesStikerSetId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocumentId", wireType)
			}
			m.DocumentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DocumentId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MimeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MimeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thumb", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Thumb = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcId", wireType)
			}
			m.DcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DcId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributesImageSizeW", wireType)
			}
			m.AttributesImageSizeW = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttributesImageSizeW |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributesImageSizeH", wireType)
			}
			m.AttributesImageSizeH = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttributesImageSizeH |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributesStikerAlt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttributesStikerAlt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributesStikerSetAccessHash", wireType)
			}
			m.AttributesStikerSetAccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttributesStikerSetAccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributesFileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttributesFileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StickerPackDocumentInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StickerPackDocumentInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StickerPackDocumentInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfoBase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InfoBase == nil {
				m.InfoBase = &StickerPackDocumentBase{}
			}
			if err := m.InfoBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreStickerPackDcReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreStickerPackDcReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreStickerPackDcReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stickpackbase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stickpackbase == nil {
				m.Stickpackbase = &StickerPackDocumentBase{}
			}
			if err := m.Stickpackbase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreStickerPackDcResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreStickerPackDcResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreStickerPackDcResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreStickerPackDcArrReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreStickerPackDcArrReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreStickerPackDcArrReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StPDB", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StPDB = append(m.StPDB, &StickerPackDocumentBase{})
			if err := m.StPDB[len(m.StPDB)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreStickerPackDcArrResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreStickerPackDcArrResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreStickerPackDcArrResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IdArr = append(m.IdArr, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUserserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUserserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IdArr = append(m.IdArr, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IdArr", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStickerSetPackDcInfosReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStickerSetPackDcInfosReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStickerSetPackDcInfosReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStickerSetPackDcInfosResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStickerSetPackDcInfosResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStickerSetPackDcInfosResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StPDcInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StPDcInfo = append(m.StPDcInfo, &StickerPackDocumentInfo{})
			if err := m.StPDcInfo[len(m.StPDcInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddOrDeleteFaveSticerReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddOrDeleteFaveSticerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddOrDeleteFaveSticerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickerId", wireType)
			}
			m.StickerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StickerId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unfave", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Unfave = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddOrDeleteFaveSticerResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddOrDeleteFaveSticerResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddOrDeleteFaveSticerResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFavedStickersReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFavedStickersReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFavedStickersReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFavedStickersResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFavedStickersResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFavedStickersResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Packs = append(m.Packs, &StickerPack{})
			if err := m.Packs[len(m.Packs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stickers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stickers = append(m.Stickers, &StickerPackDocumentBase{})
			if err := m.Stickers[len(m.Stickers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StickerPack) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StickerPack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StickerPack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Emoticon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Emoticon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocumentId", wireType)
			}
			m.DocumentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DocumentId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreUserStickerSetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreUserStickerSetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreUserStickerSetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickersetId", wireType)
			}
			m.StickersetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StickersetId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Installed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Installed = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disabled = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Archived = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreUserStickerSetResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreUserStickerSetResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreUserStickerSetResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserStickerSetDisabledReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserStickerSetDisabledReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserStickerSetDisabledReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickersetId", wireType)
			}
			m.StickersetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StickersetId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disabled = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserStickerSetDisabledResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserStickerSetDisabledResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserStickerSetDisabledResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserStickerSetOrderReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserStickerSetOrderReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserStickerSetOrderReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickersetId", wireType)
			}
			m.StickersetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StickersetId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserStickerSetOrderResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserStickerSetOrderResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserStickerSetOrderResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserStickerSetInstallArReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserStickerSetInstallArReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserStickerSetInstallArReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickersetId", wireType)
			}
			m.StickersetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StickersetId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Archived = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Installed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Installed = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserStickerSetInstallArResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserStickerSetInstallArResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserStickerSetInstallArResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteuserStickerReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteuserStickerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteuserStickerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickersetId", wireType)
			}
			m.StickersetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StickersetId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteuserStickerResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteuserStickerResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteuserStickerResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickersetId", wireType)
			}
			m.StickersetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StickersetId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserStickerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserStickerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserStickerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickersetId", wireType)
			}
			m.StickersetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StickersetId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Installed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Installed = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disabled = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Free", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Free = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Official", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Official = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Archived = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Masks", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Masks = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Emotico", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Emotico = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Documents = append(m.Documents, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUserserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUserserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Documents = append(m.Documents, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Documents", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserStickerInfoArr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserStickerInfoArr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserStickerInfoArr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StickerInfo = append(m.StickerInfo, &UserStickerInfo{})
			if err := m.StickerInfo[len(m.StickerInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StickerSetInfoArr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StickerSetInfoArr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StickerSetInfoArr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StickerInfo = append(m.StickerInfo, &StickerSetInfo{})
			if err := m.StickerInfo[len(m.StickerInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetuserAllStickersReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetuserAllStickersReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetuserAllStickersReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetuserAllStickersResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetuserAllStickersResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetuserAllStickersResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickerInfoArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StickerInfoArr = append(m.StickerInfoArr, &UserStickerInfo{})
			if err := m.StickerInfoArr[len(m.StickerInfoArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllStickerSetsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllStickerSetsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllStickerSetsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllStickerSetsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllStickerSetsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllStickerSetsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickerInfoArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StickerInfoArr = append(m.StickerInfoArr, &StickerSetInfo{})
			if err := m.StickerInfoArr[len(m.StickerInfoArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteStickerPackDocumentReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteStickerPackDocumentReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteStickerPackDocumentReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickersetId", wireType)
			}
			m.StickersetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StickersetId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteStickerPackDocumentResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteStickerPackDocumentResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteStickerPackDocumentResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuthorStickerSetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuthorStickerSetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuthorStickerSetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetId", wireType)
			}
			m.SetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuthorStickerSetResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuthorStickerSetResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuthorStickerSetResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Set", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Set == nil {
				m.Set = &AuthorStickerSet{}
			}
			if err := m.Set.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuthorAllStickerSetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuthorAllStickerSetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuthorAllStickerSetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuthorAllStickerSetResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuthorAllStickerSetResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuthorAllStickerSetResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sets = append(m.Sets, &AuthorStickerSet{})
			if err := m.Sets[len(m.Sets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthorStickerSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthorStickerSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthorStickerSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickersetId", wireType)
			}
			m.StickersetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StickersetId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Archived = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Installed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Installed = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disabled = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ordered", wireType)
			}
			m.Ordered = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ordered |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			m.Updated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Updated |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountAuthorAllStickerSetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountAuthorAllStickerSetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountAuthorAllStickerSetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountAuthorAllStickerSetResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountAuthorAllStickerSetResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountAuthorAllStickerSetResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserGifInfoArr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: userGifInfoArr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: userGifInfoArr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GifArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GifArr = append(m.GifArr, &UserSaveGifInfo{})
			if err := m.GifArr[len(m.GifArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserSaveGifInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: userSaveGifInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: userSaveGifInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GifId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GifId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GitHash", wireType)
			}
			m.GitHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GitHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveUserGifReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveUserGifReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveUserGifReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GifId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GifId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GitHash", wireType)
			}
			m.GitHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GitHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveUserGifResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveUserGifResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveUserGifResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelUserGifReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelUserGifReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelUserGifReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GitHash", wireType)
			}
			m.GitHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GitHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelUserGifResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelUserGifResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelUserGifResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserGifsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserGifsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserGifsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserGifsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserGifsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserGifsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GifArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GifArr = append(m.GifArr, &UserSaveGifInfo{})
			if err := m.GifArr[len(m.GifArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckUserIsBlockedReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckUserIsBlockedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckUserIsBlockedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckUserIsBlockedResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckUserIsBlockedResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckUserIsBlockedResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterUserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: registerUserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: registerUserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBot = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotInfoVersion", wireType)
			}
			m.BotInfoVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotInfoVersion |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotChatHistory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotChatHistory = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotNoChats", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotNoChats = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserInfoResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserInfoResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserInfoResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uinfo == nil {
				m.Uinfo = &UserInfo{}
			}
			if err := m.Uinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckUserAccessHashValidReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: checkUserAccessHashValidReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: checkUserAccessHashValidReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckUserAccessHashValidResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: checkUserAccessHashValidResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: checkUserAccessHashValidResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsValid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsValid = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterUserInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterUserInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterUserInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBot = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotInfoVersion", wireType)
			}
			m.BotInfoVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotInfoVersion |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotChatHistory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotChatHistory = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotNoChats", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotNoChats = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterUserInfoResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterUserInfoResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterUserInfoResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uinfo == nil {
				m.Uinfo = &UserInfo{}
			}
			if err := m.Uinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNotifySettingsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNotifySettingsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNotifySettingsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqType", wireType)
			}
			m.ReqType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNotifySettingsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNotifySettingsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNotifySettingsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowPreviews", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowPreviews = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MuteUntil", wireType)
			}
			m.MuteUntil = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MuteUntil |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sound", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sound = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateNotifySettingsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateNotifySettingsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateNotifySettingsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqType", wireType)
			}
			m.ReqType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowPreviews", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowPreviews = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MuteUntil", wireType)
			}
			m.MuteUntil = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MuteUntil |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sound", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sound = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateNotifySettingsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateNotifySettingsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateNotifySettingsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetContactsStatusReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetContactsStatusReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetContactsStatusReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserStaus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserStaus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserStaus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineTime", wireType)
			}
			m.OfflineTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OfflineTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetContactsStatusResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetContactsStatusResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetContactsStatusResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactStatusArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactStatusArr = append(m.ContactStatusArr, &UserStaus{})
			if err := m.ContactStatusArr[len(m.ContactStatusArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBotPicRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBotPicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBotPicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotId", wireType)
			}
			m.BotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = append(m.Photo[:0], dAtA[iNdEx:postIndex]...)
			if m.Photo == nil {
				m.Photo = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBotPicResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBotPicResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBotPicResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllProxyConfigReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllProxyConfigReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllProxyConfigReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyAddr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyAddr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyAddr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InnerIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InnerIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllProxyConfigResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllProxyConfigResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllProxyConfigResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addrs = append(m.Addrs, &ProxyAddr{})
			if err := m.Addrs[len(m.Addrs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckUserNameOccupiedReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckUserNameOccupiedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckUserNameOccupiedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckUserNameOccupiedResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckUserNameOccupiedResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckUserNameOccupiedResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Occpuy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Occpuy = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserGpsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserGpsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserGpsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserGpsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserGpsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserGpsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Latitude = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Longitude = float64(math.Float64frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceModule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceModule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckSelfIsContactReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckSelfIsContactReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckSelfIsContactReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckSelfIsContactResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckSelfIsContactResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckSelfIsContactResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfIsContact", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SelfIsContact = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSwitchReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSwitchReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSwitchReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Switch", wireType)
			}
			m.Switch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Switch |= (Switch(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnOff", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OnOff = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSwitchResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSwitchResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSwitchResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (UpdateSwitchResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSwitchStatusReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSwitchStatusReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSwitchStatusReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Switch", wireType)
			}
			m.Switch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Switch |= (Switch(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSwitchStatusResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSwitchStatusResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSwitchStatusResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnOff", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OnOff = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (GetSwitchStatusResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UGetUsersChatsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UGetUsersChatsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UGetUsersChatsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Users = append(m.Users, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUserserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUserserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Users = append(m.Users, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Chatid = append(m.Chatid, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUserserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUserserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Chatid = append(m.Chatid, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Chatid", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Channelid = append(m.Channelid, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUserserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUserserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Channelid = append(m.Channelid, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Channelid", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolLayer", wireType)
			}
			m.ProtocolLayer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProtocolLayer |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UGetUsersChatsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UGetUsersChatsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UGetUsersChatsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channels", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channels = append(m.Channels, make([]byte, postIndex-iNdEx))
			copy(m.Channels[len(m.Channels)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Users == nil {
				m.Users = &UserInfoArray{}
			}
			if err := m.Users.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chats", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chats = append(m.Chats, make([]byte, postIndex-iNdEx))
			copy(m.Chats[len(m.Chats)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NoChats = append(m.NoChats, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUserserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUserserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NoChats = append(m.NoChats, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChats", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NoChans = append(m.NoChans, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUserserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUserserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NoChans = append(m.NoChans, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChans", wireType)
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (UChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBotInfoSuppReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBotInfoSuppReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBotInfoSuppReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Placeholder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Placeholder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Geo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Geo = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBotInfoSuppResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBotInfoSuppResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBotInfoSuppResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteUserUsernameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteUserUsernameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteUserUsernameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminId", wireType)
			}
			m.AdminId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceDelete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForceDelete = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteUserUsernameResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteUserUsernameResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteUserUsernameResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (DeleteUserUsernameResult_Code(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			m.OwnerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserLocationReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserLocationReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserLocationReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Detail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserLocationResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserLocationResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserLocationResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserGrenderReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserGrenderReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserGrenderReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grender", wireType)
			}
			m.Grender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Grender |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserGrenderResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserGrenderResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserGrenderResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserEmailReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserEmailReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserEmailReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserEmailResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserEmailResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserEmailResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadContactsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadContactsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadContactsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneContactArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneContactArr = append(m.PhoneContactArr, &PhoneBookContact{})
			if err := m.PhoneContactArr[len(m.PhoneContactArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadContactsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadContactsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadContactsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Error = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyContactReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyContactReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyContactReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyUserId", wireType)
			}
			m.ApplyUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplyUserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyContactResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyContactResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyContactResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Error = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAppliedContactsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAppliedContactsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAppliedContactsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAppliedContactsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAppliedContactsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAppliedContactsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Error = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppliedArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppliedArr = append(m.AppliedArr, &Applied{})
			if err := m.AppliedArr[len(m.AppliedArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Applied) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Applied: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Applied: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApplyUser == nil {
				m.ApplyUser = &UserInfo{}
			}
			if err := m.ApplyUser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Detail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyContactReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyContactReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyContactReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifyUserId", wireType)
			}
			m.VerifyUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VerifyUserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyContactResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyContactResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyContactResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Error = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAppliedContactReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAppliedContactReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAppliedContactReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAppliedContactResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAppliedContactResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAppliedContactResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Error = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchUserByPhoneReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchUserByPhoneReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchUserByPhoneReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchUserByPhoneResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchUserByPhoneResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchUserByPhoneResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserInfo == nil {
				m.UserInfo = &UserInfo{}
			}
			if err := m.UserInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Detail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUserserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUserserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthUserserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUserserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUserserver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUserserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUserserver   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/iminterfaceprotobufs/infoserver/userserver.proto", fileDescriptorUserserver)
}

var fileDescriptorUserserver = []byte{
	// 7759 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x7d, 0x5d, 0x6f, 0x1c, 0xd9,
	0x95, 0x18, 0xab, 0x3f, 0xd8, 0xec, 0xc3, 0xaf, 0xd6, 0x15, 0x29, 0xb5, 0x9a, 0x12, 0x49, 0x95,
	0xc6, 0xb6, 0x2c, 0x8f, 0x35, 0x13, 0xcd, 0xd8, 0x86, 0x63, 0x0f, 0x1c, 0x7e, 0x89, 0x6a, 0x8b,
	0x22, 0x39, 0xd5, 0xa2, 0x66, 0xc6, 0x71, 0xd2, 0x2e, 0x76, 0xdf, 0x26, 0x2b, 0xac, 0xee, 0x6a,
	0x55, 0x55, 0x4b, 0xc3, 0xf1, 0x83, 0xc7, 0x88, 0x1d, 0xc7, 0xf1, 0xf8, 0x21, 0x76, 0xe0, 0x00,
	0x79, 0x08, 0xc6, 0x8e, 0xed, 0x24, 0x93, 0xf8, 0x07, 0x04, 0xc8, 0x62, 0x6d, 0x60, 0x1f, 0x16,
	0xd8, 0x7d, 0xd8, 0x7d, 0x59, 0x3f, 0x19, 0x58, 0x18, 0x06, 0xf6, 0x65, 0x81, 0xfd, 0x0b, 0x8b,
	0xfb, 0x55, 0x75, 0x6f, 0x7d, 0x75, 0x4d, 0x73, 0x3c, 0xf0, 0x8b, 0xd4, 0xf7, 0xa3, 0xce, 0xbd,
	0xe7, 0xdc, 0x73, 0xcf, 0x3d, 0xe7, 0xdc, 0x73, 0x0f, 0xe1, 0xf0, 0xc4, 0xf2, 0x6d, 0xf3, 0xf8,
	0x6e, 0xe7, 0xd4, 0xf4, 0x3d, 0xec, 0x3e, 0xc3, 0xee, 0x5d, 0xab, 0xff, 0x92, 0x35, 0xf0, 0xb1,
	0xdb, 0x33, 0x3b, 0x78, 0xe8, 0x3a, 0xc7, 0xa3, 0xde, 0x4b, 0x43, 0xc7, 0x37, 0x7d, 0x67, 0xe8,
	0x3a, 0x3e, 0x29, 0x7a, 0x2f, 0x59, 0x83, 0x9e, 0xc3, 0x7a, 0xbf, 0x34, 0xf2, 0xb0, 0xcb, 0x3f,
	0xa4, 0xed, 0x08, 0xc2, 0xc6, 0xc6, 0x97, 0x92, 0xa1, 0xf7, 0x63, 0x00, 0x87, 0xc7, 0x1d, 0xa7,
	0xdf, 0xe7, 0xff, 0x31, 0x40, 0xfa, 0x19, 0xa0, 0x5d, 0xec, 0x1f, 0x79, 0xd8, 0x6d, 0x0e, 0x7a,
	0xce, 0xe6, 0x79, 0xb3, 0x6b, 0xe0, 0xa7, 0xe8, 0x2a, 0x54, 0x3c, 0x6c, 0xf7, 0xda, 0x56, 0xb7,
	0xae, 0xad, 0x6b, 0xb7, 0xcb, 0xc6, 0x34, 0x29, 0x36, 0xbb, 0xa4, 0x81, 0xcc, 0x85, 0x34, 0x14,
	0x58, 0x03, 0x29, 0x36, 0xbb, 0xe8, 0x16, 0x94, 0xbb, 0xf8, 0x78, 0x74, 0x52, 0x2f, 0xae, 0x6b,
	0xb7, 0x67, 0xef, 0xcd, 0xdf, 0xe5, 0xa3, 0x6c, 0x93, 0x4a, 0x83, 0xb5, 0xe9, 0x43, 0x58, 0x8e,
	0x0c, 0xb6, 0xe1, 0xba, 0x99, 0xe3, 0x5d, 0x83, 0x19, 0x3e, 0x9e, 0x57, 0x2f, 0xac, 0x17, 0x6f,
	0x97, 0x8d, 0x0a, 0x1b, 0xd0, 0xcb, 0x37, 0xe2, 0x6b, 0x30, 0x2f, 0x86, 0xdb, 0x70, 0x5d, 0xf3,
	0x1c, 0xbd, 0x08, 0x74, 0xc6, 0xd6, 0xa0, 0xae, 0xad, 0x17, 0x6f, 0xcf, 0xde, 0x5b, 0xba, 0x1b,
	0x52, 0xf2, 0xee, 0x88, 0x77, 0x35, 0x78, 0x1f, 0xfd, 0xb7, 0x15, 0x36, 0x3e, 0xa9, 0x94, 0x71,
	0xd7, 0x14, 0xdc, 0xd7, 0x60, 0xd6, 0xec, 0x74, 0xb0, 0xe7, 0xb5, 0x4f, 0x4d, 0xef, 0x94, 0x12,
	0xa6, 0x68, 0x00, 0xab, 0x7a, 0x60, 0x7a, 0xa7, 0xe8, 0x06, 0x40, 0xcf, 0x72, 0x3d, 0xbf, 0x3d,
	0x30, 0xfb, 0x98, 0xce, 0xb7, 0x6a, 0x54, 0x69, 0xcd, 0xbe, 0xd9, 0xc7, 0x68, 0x05, 0xaa, 0xb6,
	0x29, 0x5a, 0x4b, 0xb4, 0x75, 0x86, 0x54, 0xd0, 0xc6, 0x06, 0x9b, 0x01, 0x6d, 0x2b, 0xb3, 0x36,
	0x51, 0x46, 0x4b, 0x50, 0x1e, 0x9e, 0x3a, 0x03, 0x5c, 0x9f, 0xa6, 0x0d, 0xac, 0x80, 0xae, 0xc0,
	0xb4, 0xe7, 0x9b, 0xfe, 0xc8, 0xab, 0x57, 0x38, 0x2d, 0x69, 0x89, 0x4c, 0x93, 0x0e, 0x63, 0x3b,
	0x27, 0xce, 0xc8, 0xaf, 0xcf, 0xd0, 0x46, 0x20, 0x55, 0x7b, 0xb4, 0x06, 0x7d, 0x02, 0x16, 0x3a,
	0xf6, 0xc8, 0xf3, 0xb1, 0xdb, 0x76, 0xf1, 0x89, 0xe5, 0x0c, 0xea, 0x55, 0xda, 0x67, 0x9e, 0xd7,
	0x1a, 0xb4, 0x92, 0xac, 0x49, 0xcf, 0x19, 0xf8, 0x6d, 0xf7, 0xe4, 0xb8, 0x0e, 0x74, 0xe0, 0x0a,
	0x29, 0x1b, 0x27, 0xc7, 0xe8, 0x26, 0xcc, 0x75, 0x9c, 0xd1, 0xc0, 0x77, 0xcf, 0xdb, 0x1d, 0xa7,
	0x8b, 0xeb, 0xb3, 0xb4, 0x79, 0x96, 0xd7, 0x6d, 0x39, 0x5d, 0x31, 0x67, 0xdf, 0xa9, 0xcf, 0x05,
	0x73, 0xf6, 0x1d, 0x74, 0x1b, 0x6a, 0xc7, 0x8e, 0xdf, 0x26, 0x6b, 0xd1, 0x7e, 0x86, 0x5d, 0x8f,
	0x0c, 0x3e, 0x4f, 0x07, 0x5f, 0x38, 0x76, 0x7c, 0x42, 0xfe, 0x27, 0xac, 0x16, 0xbd, 0x0a, 0x57,
	0x58, 0x4f, 0xdb, 0x1a, 0xe0, 0xf6, 0xd0, 0x36, 0x3b, 0xf8, 0xd4, 0xb1, 0xbb, 0xd8, 0xad, 0x2f,
	0x50, 0x80, 0x4b, 0xb4, 0x3f, 0x69, 0x3c, 0x0c, 0xdb, 0xd0, 0x67, 0x01, 0xb9, 0xd8, 0xf3, 0x5d,
	0xab, 0xe3, 0x5b, 0xce, 0xa0, 0xed, 0x62, 0xd3, 0x73, 0x06, 0xf5, 0x45, 0xfa, 0xc5, 0x25, 0xa9,
	0xc5, 0xa0, 0x0d, 0x6c, 0x45, 0x06, 0x27, 0x0c, 0x89, 0x9a, 0x58, 0x91, 0xc1, 0x09, 0xc5, 0x80,
	0xd0, 0xd1, 0xe9, 0x98, 0x76, 0x9b, 0xd1, 0xfe, 0x12, 0x6d, 0x06, 0x5a, 0x75, 0x48, 0x17, 0xa0,
	0x0e, 0x95, 0x2e, 0xb6, 0xb1, 0x8f, 0xbb, 0x75, 0xb4, 0xae, 0xdd, 0x9e, 0x31, 0x44, 0x11, 0xd5,
	0xa0, 0x78, 0xec, 0xf8, 0xf5, 0xcb, 0xb4, 0x96, 0xfc, 0x14, 0x88, 0x93, 0xbd, 0xdb, 0x3e, 0xb5,
	0x3c, 0xdf, 0x71, 0xcf, 0xeb, 0x4b, 0xb4, 0x99, 0x20, 0xbe, 0x75, 0x6a, 0xfa, 0x0f, 0x58, 0x2d,
	0x19, 0x96, 0xf4, 0x1c, 0x38, 0x74, 0x9f, 0xd7, 0x97, 0x69, 0x27, 0x38, 0x76, 0xfc, 0x7d, 0x56,
	0x43, 0x38, 0xe5, 0x19, 0x76, 0xad, 0x9e, 0x85, 0xbb, 0xf5, 0x2b, 0xb4, 0x35, 0x28, 0xa3, 0x55,
	0x00, 0x81, 0x25, 0xee, 0xd6, 0xaf, 0xb2, 0x6f, 0xc3, 0x1a, 0x32, 0xb1, 0xbe, 0x35, 0xa8, 0xd7,
	0xd9, 0xc4, 0xfa, 0xd6, 0x00, 0xbd, 0x00, 0x0b, 0x12, 0x9d, 0x4f, 0xb0, 0x53, 0xbf, 0x46, 0x1b,
	0xe7, 0x02, 0xfa, 0xee, 0x62, 0x07, 0x21, 0x28, 0x91, 0x9d, 0x5a, 0x6f, 0xd0, 0x36, 0xfa, 0x9b,
	0xa0, 0xdf, 0x71, 0x06, 0xbe, 0xd9, 0xf1, 0xeb, 0x2b, 0x0c, 0x7d, 0x5e, 0x44, 0xb7, 0x60, 0xbe,
	0x3f, 0xf2, 0x4d, 0xbb, 0x2d, 0xda, 0xaf, 0x33, 0x90, 0xb4, 0x72, 0x8b, 0x77, 0x5a, 0x81, 0xaa,
	0xe7, 0x9b, 0x6e, 0xbb, 0x6f, 0xba, 0x67, 0xf5, 0x1b, 0x0c, 0x0f, 0x52, 0xf1, 0xc8, 0x74, 0xcf,
	0xd0, 0x8b, 0x80, 0xbc, 0x53, 0xe7, 0xb9, 0x00, 0xc0, 0x97, 0x60, 0x95, 0xf6, 0xaa, 0x91, 0x16,
	0x0e, 0x85, 0x2d, 0xc4, 0x35, 0x98, 0x39, 0x71, 0x9d, 0xd1, 0x90, 0x6c, 0xd9, 0x35, 0xca, 0x4d,
	0x15, 0x5a, 0x6e, 0x76, 0xf5, 0xc7, 0xb0, 0xc4, 0x45, 0xd1, 0xce, 0xdb, 0x43, 0xcb, 0xc5, 0x92,
	0xe4, 0x4b, 0xde, 0xe4, 0x81, 0xb8, 0x29, 0x64, 0x88, 0x9b, 0x1e, 0x5c, 0x4d, 0x80, 0xea, 0x8d,
	0x6c, 0x9f, 0xec, 0x4a, 0x4c, 0xeb, 0x04, 0x5c, 0x56, 0x42, 0xaf, 0x40, 0x75, 0xc7, 0x75, 0x1d,
	0x97, 0xb2, 0x1a, 0x81, 0xbd, 0x70, 0x6f, 0x59, 0x96, 0x49, 0x06, 0xde, 0x71, 0x5d, 0xc2, 0x77,
	0x46, 0xd8, 0x4f, 0x7f, 0x08, 0x0b, 0x7c, 0x9c, 0xcd, 0x73, 0xb6, 0xe9, 0x03, 0x51, 0xa0, 0xc9,
	0xa2, 0x20, 0xd7, 0xa4, 0x7d, 0xb8, 0x24, 0x49, 0x65, 0x3e, 0xdd, 0x3b, 0x50, 0x3e, 0x22, 0xb3,
	0xa0, 0xf0, 0xd2, 0xc4, 0x24, 0xeb, 0x32, 0x19, 0x0a, 0xdf, 0x84, 0x7a, 0xd2, 0x59, 0x10, 0x1d,
	0xbc, 0xf8, 0x47, 0x19, 0xbc, 0x1f, 0xa0, 0xbc, 0x79, 0x7e, 0x24, 0xa4, 0x69, 0xea, 0x21, 0x24,
	0x8b, 0xe0, 0x42, 0x44, 0x04, 0xe7, 0x3a, 0x85, 0xbe, 0x05, 0x68, 0x34, 0xec, 0x9a, 0x3e, 0x3e,
	0x24, 0xc2, 0x8e, 0x51, 0x39, 0x83, 0xd5, 0x02, 0x11, 0x59, 0x90, 0x45, 0xe4, 0x32, 0x4c, 0x9f,
	0xe1, 0x73, 0xd2, 0xbb, 0x48, 0x0f, 0x98, 0xf2, 0x19, 0x3e, 0x97, 0xf9, 0xb2, 0x94, 0x31, 0x81,
	0x03, 0x58, 0xdc, 0xc5, 0x7e, 0xbe, 0xd1, 0x73, 0x01, 0xdc, 0x83, 0xe5, 0x23, 0x8a, 0x11, 0xa1,
	0x1e, 0x85, 0xcb, 0x97, 0x4e, 0x59, 0x0e, 0x2d, 0xe7, 0x72, 0xb4, 0x03, 0x25, 0x44, 0x06, 0xb5,
	0x04, 0x65, 0x5a, 0x14, 0x2c, 0x4d, 0x0b, 0x93, 0xad, 0xf7, 0xff, 0xd7, 0x60, 0x49, 0x9a, 0xaf,
	0xeb, 0xf4, 0x2c, 0x1b, 0x8f, 0x5b, 0x83, 0x9e, 0x6d, 0x9e, 0x78, 0x5c, 0xcd, 0x61, 0x85, 0x0b,
	0x1d, 0xe4, 0x4b, 0x50, 0x36, 0x8f, 0xc9, 0xc1, 0xcb, 0x4e, 0x71, 0x56, 0x08, 0xa9, 0x3d, 0x9d,
	0x41, 0xed, 0x77, 0xe0, 0x6a, 0xc2, 0xec, 0x3f, 0x9e, 0x7d, 0xfa, 0xd7, 0x1a, 0x54, 0x5b, 0x54,
	0x81, 0xc8, 0x54, 0xd4, 0x42, 0xee, 0x2c, 0xc8, 0xdc, 0x19, 0xea, 0x22, 0x45, 0x2a, 0xa3, 0x85,
	0x2e, 0x52, 0x87, 0x8a, 0xd3, 0xeb, 0x91, 0x53, 0x84, 0xd2, 0xa9, 0x6c, 0x88, 0x22, 0xba, 0x0e,
	0x55, 0xdb, 0x19, 0x9c, 0x58, 0xfe, 0xa8, 0xcb, 0x14, 0x1e, 0xcd, 0x08, 0x2b, 0xc8, 0x56, 0xb4,
	0x4d, 0x9f, 0x35, 0x4e, 0xd3, 0xc6, 0xa0, 0x1c, 0x92, 0xb2, 0x92, 0x41, 0xca, 0x2d, 0x98, 0x13,
	0xd8, 0x4c, 0xce, 0xaf, 0x27, 0xb0, 0xc8, 0xd6, 0x83, 0x49, 0xf9, 0x4c, 0xc2, 0x84, 0x72, 0xbf,
	0xa0, 0xc8, 0xfd, 0x5c, 0x82, 0xa3, 0x09, 0x48, 0x1d, 0x68, 0xf2, 0x39, 0xff, 0x54, 0x83, 0x4b,
	0x84, 0x7d, 0xb6, 0x98, 0x2e, 0xb7, 0x75, 0x6a, 0x0e, 0x4e, 0x32, 0x64, 0xde, 0x75, 0xa8, 0x72,
	0xad, 0xaf, 0x29, 0x54, 0xfd, 0xb0, 0x82, 0x7c, 0xd6, 0x73, 0x9d, 0x7e, 0xdb, 0x1a, 0x72, 0x36,
	0x9f, 0x26, 0xc5, 0xe6, 0x30, 0x6c, 0xe8, 0xd2, 0xb5, 0x2b, 0xf3, 0x86, 0x6e, 0x3e, 0x3e, 0xdf,
	0x87, 0xab, 0xb1, 0x29, 0x5e, 0x04, 0xe7, 0xef, 0x10, 0x9c, 0x29, 0xfd, 0xc8, 0x56, 0x20, 0xbb,
	0x30, 0x73, 0xcf, 0x73, 0x39, 0xbf, 0x1f, 0x91, 0xf3, 0xfb, 0x79, 0xe5, 0xbc, 0xb4, 0x09, 0x4a,
	0xd2, 0x26, 0xd0, 0x9f, 0x0b, 0xe1, 0x13, 0xce, 0xe2, 0xe3, 0xd9, 0xbb, 0x06, 0x2c, 0x6f, 0x9d,
	0xe2, 0xce, 0x19, 0xd5, 0x86, 0x88, 0xf6, 0xce, 0xb4, 0xf8, 0xa7, 0x17, 0xd1, 0x16, 0x0e, 0xa0,
	0x9e, 0x04, 0x73, 0xf2, 0x45, 0x3a, 0x83, 0xa5, 0x6d, 0xaa, 0x1e, 0x6f, 0x74, 0xa8, 0x9d, 0x30,
	0x56, 0x13, 0x5b, 0x86, 0xe9, 0x2e, 0xb6, 0x43, 0x13, 0xb4, 0xdc, 0xc5, 0x76, 0x5e, 0x0b, 0x74,
	0x17, 0x6a, 0xdb, 0xd8, 0xe6, 0x23, 0x5d, 0x64, 0xd6, 0xbf, 0xd1, 0x60, 0x7e, 0xd3, 0xf1, 0xd9,
	0xba, 0x66, 0x9b, 0x87, 0x49, 0xb6, 0x4d, 0x21, 0xd1, 0xb6, 0x49, 0x32, 0x06, 0x8a, 0x89, 0xc6,
	0xc0, 0xaa, 0x30, 0x06, 0x68, 0x67, 0xca, 0x6e, 0x33, 0x46, 0x95, 0x1a, 0x03, 0xa4, 0x5b, 0x48,
	0x8c, 0x72, 0x06, 0x31, 0xbe, 0x0a, 0x97, 0x15, 0x14, 0x2e, 0x42, 0x8f, 0x9f, 0x6b, 0x30, 0xbf,
	0x8d, 0x85, 0x12, 0x9f, 0xb9, 0x7e, 0x37, 0x00, 0x84, 0xfa, 0x6e, 0x85, 0xb2, 0x85, 0xd5, 0xc4,
	0xad, 0xe9, 0x62, 0xcc, 0x9a, 0x4e, 0xde, 0x65, 0xf9, 0x50, 0xf6, 0xe8, 0xfa, 0x07, 0xb3, 0xfc,
	0x78, 0xb6, 0xe1, 0x01, 0xcc, 0x6f, 0x09, 0xf4, 0x84, 0x3f, 0x40, 0xa2, 0x80, 0x36, 0x86, 0x02,
	0x31, 0x7f, 0x82, 0xfe, 0x4b, 0x4d, 0x46, 0x23, 0xf4, 0xa1, 0x24, 0xd3, 0xfb, 0x35, 0x62, 0x94,
	0xd3, 0x9e, 0x16, 0xd1, 0xb1, 0xa9, 0x1f, 0x65, 0xf6, 0xde, 0x35, 0x79, 0xda, 0xca, 0xf4, 0x0c,
	0xa5, 0xfb, 0x85, 0xf4, 0xce, 0x37, 0xe0, 0xea, 0x56, 0x9f, 0x58, 0x40, 0x4c, 0xbb, 0xe3, 0xc3,
	0x50, 0x4d, 0xe2, 0x1a, 0xcc, 0x98, 0xfd, 0xae, 0x35, 0x08, 0xe7, 0x5b, 0xa1, 0xe5, 0x66, 0x17,
	0xdd, 0x84, 0x39, 0x2a, 0x90, 0xda, 0x83, 0x51, 0xff, 0x18, 0xbb, 0x5c, 0x16, 0xcf, 0xd2, 0xba,
	0x7d, 0x5a, 0xa5, 0xef, 0x41, 0x23, 0x19, 0x30, 0x5d, 0xd1, 0xbb, 0x70, 0xb9, 0x33, 0x72, 0x5d,
	0x3c, 0xf0, 0xdb, 0x21, 0x9d, 0x3d, 0x6a, 0x4d, 0x94, 0x8d, 0x4b, 0xbc, 0x29, 0xc0, 0xd9, 0x23,
	0x1b, 0x21, 0x42, 0xce, 0xc9, 0x37, 0xc2, 0x7b, 0x1a, 0x2c, 0x53, 0x48, 0xbe, 0xb7, 0x8b, 0x7d,
	0x19, 0xe3, 0x2b, 0xc0, 0x57, 0x24, 0xae, 0x6a, 0x52, 0x92, 0xaa, 0x9a, 0xd3, 0x3a, 0xcc, 0xf2,
	0xb9, 0x07, 0xdb, 0x80, 0x7a, 0x52, 0x82, 0xaa, 0x7c, 0x2b, 0xf0, 0xe3, 0x42, 0x00, 0x27, 0x5b,
	0x4a, 0x8d, 0xd9, 0x95, 0x17, 0xd1, 0x7c, 0xef, 0xc0, 0x25, 0xcb, 0x6b, 0x53, 0x3d, 0x83, 0x03,
	0xc4, 0x4c, 0x3d, 0x98, 0x31, 0x16, 0x2d, 0xaf, 0x85, 0xed, 0xde, 0x96, 0xa8, 0x26, 0x7d, 0x99,
	0x42, 0xe2, 0x49, 0x7d, 0xa7, 0x59, 0x5f, 0xaa, 0x9a, 0x78, 0x61, 0x5f, 0xc5, 0x53, 0x50, 0x89,
	0x78, 0x0a, 0x56, 0xa0, 0x7a, 0x6a, 0x7a, 0xdc, 0x41, 0x30, 0xc3, 0x1a, 0x4f, 0x4d, 0x8f, 0x1e,
	0x5b, 0xfa, 0xaf, 0x35, 0xa8, 0x27, 0x2d, 0x12, 0x5d, 0xf6, 0x2f, 0x04, 0x94, 0x20, 0xbb, 0x85,
	0x99, 0xa0, 0x57, 0xe5, 0x75, 0x97, 0xe8, 0x69, 0x48, 0x5d, 0xd1, 0xe7, 0x61, 0x76, 0x14, 0x3a,
	0x1b, 0xf9, 0x3e, 0x4b, 0x16, 0x27, 0x72, 0x47, 0x95, 0xcf, 0x8a, 0x39, 0xf9, 0xec, 0xdb, 0x1a,
	0xd4, 0x28, 0x32, 0x9b, 0x8e, 0x73, 0x26, 0xf9, 0x4e, 0x3a, 0xb6, 0x45, 0xf8, 0x9e, 0xaf, 0x6f,
	0xd1, 0x98, 0x61, 0x15, 0x81, 0x59, 0x39, 0xc0, 0x92, 0x59, 0x39, 0xc0, 0x17, 0x59, 0x58, 0xfd,
	0xcf, 0x34, 0x58, 0x15, 0xc4, 0x6b, 0xf6, 0x87, 0x8e, 0xcb, 0xfc, 0x2e, 0x32, 0xd3, 0x87, 0xd2,
	0x43, 0x93, 0xb9, 0x3b, 0xd5, 0x8f, 0x7c, 0x1f, 0x16, 0x87, 0x12, 0x0c, 0x42, 0xc7, 0x22, 0xa5,
	0xe3, 0x75, 0x99, 0x22, 0x51, 0xc4, 0x8d, 0xe8, 0x47, 0xf9, 0x36, 0xc7, 0x0e, 0xcc, 0xb3, 0x69,
	0x0b, 0xfa, 0xa5, 0xee, 0x0e, 0x85, 0xb0, 0x05, 0x95, 0xb0, 0xfa, 0x43, 0x58, 0x38, 0x74, 0x86,
	0x23, 0xdb, 0x74, 0x73, 0xad, 0xc3, 0x75, 0xa8, 0x5a, 0x74, 0x54, 0xec, 0x0a, 0xf3, 0x32, 0xac,
	0x20, 0x1b, 0xf6, 0x66, 0x26, 0x4d, 0x29, 0x8f, 0x6e, 0xc1, 0xa2, 0xd5, 0xe7, 0x75, 0xdb, 0xd8,
	0x37, 0x2d, 0x9b, 0x33, 0xaa, 0x22, 0xd6, 0x15, 0xe4, 0x8c, 0xe8, 0x17, 0x13, 0xf3, 0xeb, 0x97,
	0x61, 0x96, 0xe0, 0xcb, 0x81, 0xf1, 0xf5, 0x69, 0x28, 0xeb, 0xa3, 0x90, 0xc3, 0x90, 0xbb, 0xab,
	0xdc, 0x5e, 0xca, 0xc9, 0xed, 0x2e, 0x5c, 0xda, 0xe8, 0x76, 0x0d, 0x4c, 0x8c, 0x3d, 0x67, 0xd0,
	0xec, 0x8e, 0x75, 0xc8, 0xbb, 0xbc, 0x6b, 0xc8, 0x61, 0xe0, 0x06, 0x5f, 0xe7, 0xd3, 0x15, 0x5d,
	0xb8, 0xb4, 0x8d, 0xed, 0x8f, 0x77, 0xcc, 0x7d, 0xb8, 0x1a, 0xc3, 0xf3, 0x22, 0xa7, 0xd1, 0x3e,
	0x5c, 0x8d, 0xe1, 0x70, 0x11, 0x78, 0xbf, 0xd0, 0x60, 0x61, 0xd3, 0x76, 0x3a, 0x67, 0xb8, 0x4b,
	0xf0, 0x1e, 0xa7, 0xe7, 0x1d, 0xb3, 0xae, 0xd2, 0x89, 0xc2, 0x6b, 0x18, 0xc1, 0x36, 0xe2, 0x7a,
	0xde, 0xc6, 0x47, 0xa3, 0xe7, 0x3d, 0x80, 0x4b, 0xca, 0x34, 0x27, 0xc7, 0xf8, 0x03, 0x0d, 0x2e,
	0x73, 0xd6, 0x3d, 0x1a, 0xf0, 0xd9, 0xff, 0xc9, 0xa2, 0x7d, 0xc4, 0x75, 0x8f, 0x0e, 0x3d, 0xd7,
	0x36, 0x73, 0xcc, 0x36, 0x17, 0xd8, 0x7f, 0x09, 0xb3, 0xc7, 0x21, 0x35, 0xd3, 0x81, 0x21, 0x28,
	0x11, 0x5b, 0x82, 0x23, 0x4d, 0x7f, 0xeb, 0x3f, 0x15, 0x47, 0x6d, 0x64, 0x4e, 0x74, 0x45, 0xd6,
	0x15, 0xc0, 0x5c, 0x41, 0x53, 0xc6, 0xba, 0x0b, 0x95, 0x3c, 0xf2, 0xa9, 0x72, 0xa1, 0xb3, 0xf4,
	0x29, 0x2c, 0xb6, 0xce, 0x3d, 0x1f, 0xf7, 0xdf, 0x38, 0xb5, 0x98, 0x93, 0x2d, 0xd3, 0x31, 0x68,
	0xe3, 0x67, 0xd8, 0x16, 0xc6, 0x27, 0x2d, 0xd0, 0xb3, 0xd5, 0x75, 0x8e, 0x99, 0xb9, 0x56, 0x36,
	0x58, 0x81, 0xe8, 0xb8, 0x96, 0xd7, 0x7e, 0x4e, 0x80, 0x72, 0x13, 0xad, 0x62, 0x79, 0x74, 0x0c,
	0xfd, 0x5d, 0x0d, 0x96, 0x5a, 0xbe, 0xe3, 0xe2, 0xd6, 0xb9, 0x17, 0x8c, 0x3a, 0xce, 0x23, 0x99,
	0x7b, 0xe0, 0x5c, 0xa7, 0xdf, 0x3e, 0x5c, 0x4d, 0x98, 0xc1, 0xe4, 0x3b, 0xe5, 0xfb, 0x1a, 0xdc,
	0x60, 0xc6, 0x64, 0x84, 0x98, 0x7b, 0x64, 0xa6, 0x1f, 0x2f, 0x6e, 0x6f, 0xc0, 0x7a, 0xd6, 0x54,
	0x26, 0x47, 0xf2, 0x75, 0xea, 0xaa, 0x8e, 0x2e, 0x5a, 0x9a, 0x6a, 0x9f, 0xcb, 0xa3, 0xf2, 0x43,
	0x8d, 0x5e, 0x8b, 0x27, 0x2c, 0xc3, 0x57, 0x60, 0xce, 0xe3, 0xb5, 0xcd, 0xd0, 0x40, 0x5d, 0x91,
	0x27, 0x19, 0xc1, 0xcf, 0x50, 0x3e, 0x98, 0xcc, 0x5c, 0xfd, 0x72, 0x6c, 0x3a, 0xdc, 0xc2, 0x0c,
	0xb0, 0xd1, 0x32, 0xb0, 0xf9, 0x89, 0x46, 0x2f, 0x76, 0x62, 0x9f, 0x53, 0x84, 0x76, 0x60, 0x51,
	0x9e, 0x5f, 0xa8, 0x5f, 0x67, 0xe2, 0x14, 0xfd, 0x66, 0x32, 0xb4, 0xce, 0x00, 0x6d, 0x63, 0x3b,
	0xef, 0xca, 0xd5, 0xa1, 0x72, 0xe8, 0x3a, 0xa4, 0x17, 0xe7, 0x49, 0x51, 0xcc, 0x77, 0x8e, 0xef,
	0xc1, 0x72, 0x6c, 0xb0, 0x38, 0xd3, 0xe5, 0x9d, 0xfa, 0xbf, 0x86, 0x69, 0x02, 0x62, 0xbb, 0x93,
	0xbe, 0x83, 0x2e, 0x43, 0xb9, 0xdb, 0x09, 0x0f, 0x9c, 0x52, 0xb7, 0x93, 0x57, 0xe5, 0xb8, 0x07,
	0xb3, 0xbb, 0xd8, 0xdf, 0xb0, 0xed, 0xed, 0x4e, 0xee, 0x45, 0xfe, 0x55, 0x01, 0xe6, 0x5b, 0xd8,
	0x3f, 0x74, 0xad, 0x67, 0x66, 0xe7, 0x3c, 0x73, 0x6b, 0x13, 0x63, 0x9e, 0x75, 0x6b, 0xfb, 0xe7,
	0x43, 0x71, 0x36, 0xcc, 0xf2, 0xba, 0xc7, 0xe7, 0x43, 0x7a, 0x33, 0xe2, 0x9a, 0x83, 0x13, 0x2c,
	0xf6, 0x39, 0x2d, 0xa0, 0x4f, 0xc1, 0xa2, 0x69, 0x3f, 0x37, 0xcf, 0xbd, 0x76, 0xd7, 0xf2, 0x4c,
	0xdb, 0x76, 0x9e, 0xd7, 0x4b, 0xf4, 0x7c, 0x58, 0x60, 0xd5, 0xdb, 0xbc, 0x96, 0x8c, 0xc0, 0x3b,
	0xb2, 0x5e, 0x65, 0x76, 0x8a, 0xb0, 0xba, 0x0d, 0xda, 0x65, 0x01, 0x0a, 0xd6, 0x90, 0x47, 0x49,
	0x14, 0xac, 0x61, 0x68, 0x72, 0x57, 0xe4, 0x23, 0xf6, 0x06, 0x80, 0x87, 0x3d, 0x8f, 0x6b, 0x70,
	0x33, 0xb4, 0xa9, 0xca, 0x6b, 0x64, 0xfb, 0xa9, 0x9a, 0xe8, 0x34, 0x85, 0x0c, 0x7a, 0x9d, 0x43,
	0x4d, 0x26, 0x17, 0xe5, 0x84, 0x97, 0x61, 0x86, 0xfa, 0x94, 0xc2, 0x4d, 0x90, 0x7c, 0xb4, 0x05,
	0xbd, 0x26, 0xe3, 0x9d, 0xbf, 0xd2, 0x60, 0x7e, 0xf7, 0xa3, 0x5c, 0x2a, 0x46, 0xb8, 0x62, 0x3a,
	0xe1, 0x4a, 0x51, 0xc2, 0x31, 0xea, 0x97, 0x65, 0xea, 0x27, 0x84, 0xad, 0xe4, 0xba, 0xbe, 0xf9,
	0x81, 0x06, 0x8b, 0xcc, 0xfd, 0xac, 0xe0, 0xf3, 0x21, 0x83, 0x95, 0xa2, 0x88, 0x16, 0xe3, 0x88,
	0xe6, 0x3a, 0x65, 0x9a, 0x80, 0xd4, 0xc9, 0x4c, 0x7e, 0xae, 0xfc, 0x4e, 0x83, 0xda, 0x6e, 0x94,
	0x45, 0x82, 0x8d, 0xa1, 0x8d, 0xd9, 0x18, 0x85, 0x5c, 0x1b, 0xa3, 0x18, 0xdf, 0x18, 0xf7, 0xa0,
	0x2a, 0x18, 0xcd, 0xa3, 0xdb, 0x2b, 0x8d, 0x0b, 0xc3, 0x6e, 0x2a, 0x7e, 0xe5, 0x9c, 0xf8, 0xfd,
	0x5d, 0x01, 0xae, 0x30, 0x6d, 0xe3, 0xd4, 0x19, 0xb6, 0x7c, 0xab, 0x73, 0x86, 0xdd, 0x16, 0xa6,
	0x8e, 0xe2, 0x88, 0xbb, 0x53, 0x8b, 0x39, 0x7c, 0x11, 0x94, 0x7a, 0x2e, 0x66, 0xfc, 0x38, 0x63,
	0xd0, 0xdf, 0xa8, 0x01, 0x33, 0x4e, 0xaf, 0x67, 0x75, 0x2c, 0xd3, 0xe6, 0x2e, 0xf2, 0xa0, 0x4c,
	0xc8, 0xd6, 0x37, 0xbd, 0x33, 0x8f, 0xeb, 0x5c, 0xac, 0x40, 0x6a, 0x7d, 0xcb, 0xb7, 0x45, 0x14,
	0x15, 0x2b, 0x50, 0xd6, 0x3d, 0x75, 0x5c, 0xee, 0xe0, 0x60, 0x0c, 0x59, 0xa5, 0x35, 0xe2, 0xd2,
	0x96, 0x5e, 0x15, 0xf0, 0x50, 0x2a, 0x56, 0x20, 0x13, 0xa2, 0x53, 0x65, 0x22, 0x82, 0xfe, 0x26,
	0x13, 0xc2, 0x7d, 0xc7, 0xb7, 0x3a, 0x3c, 0x6c, 0xaa, 0x6a, 0x04, 0x65, 0x62, 0xf1, 0x77, 0x9d,
	0xce, 0xa8, 0x8f, 0x07, 0xbe, 0x57, 0x07, 0xba, 0x0a, 0x61, 0x45, 0xc8, 0x6a, 0xb3, 0x19, 0x57,
	0x4b, 0x12, 0x2f, 0xcf, 0xc9, 0xbc, 0xac, 0x7f, 0x03, 0xae, 0x25, 0xd2, 0x95, 0x32, 0x10, 0xd9,
	0x79, 0x62, 0x57, 0x14, 0xac, 0xee, 0x64, 0x12, 0xc4, 0x87, 0xb5, 0x84, 0x11, 0xb6, 0xc5, 0xfc,
	0xc9, 0x12, 0x46, 0xc7, 0x51, 0x10, 0x2e, 0xa4, 0x22, 0x9c, 0x75, 0x2c, 0xbd, 0x05, 0x7a, 0xf6,
	0xa8, 0x93, 0xef, 0xb5, 0xa7, 0xd4, 0xdd, 0x8b, 0x7d, 0xac, 0xf2, 0xe1, 0x75, 0xa8, 0x7a, 0xac,
	0x22, 0xd0, 0x06, 0xc2, 0x8a, 0x5c, 0xaa, 0x9c, 0xbc, 0x4a, 0x45, 0x65, 0x95, 0x1e, 0xc1, 0x95,
	0xf8, 0x90, 0x93, 0x63, 0xf0, 0x7e, 0x01, 0x16, 0x42, 0x48, 0x54, 0xd5, 0x8b, 0x2e, 0xc1, 0xd8,
	0xa0, 0x44, 0xb1, 0xab, 0x8a, 0x29, 0xbb, 0xaa, 0x94, 0xb6, 0xab, 0xca, 0x89, 0xbb, 0x6a, 0x3a,
	0x7d, 0x57, 0x55, 0x52, 0x77, 0xd5, 0x4c, 0xd2, 0xae, 0xaa, 0xa6, 0xec, 0x2a, 0xc8, 0xda, 0x55,
	0xb3, 0x11, 0x26, 0xd3, 0xbf, 0x45, 0x03, 0xbc, 0x54, 0x22, 0x25, 0xb1, 0xaa, 0x3a, 0xd5, 0x42,
	0x74, 0xaa, 0x97, 0xa1, 0x6c, 0x79, 0x62, 0x3d, 0x67, 0x8c, 0x92, 0xe5, 0xe5, 0xbd, 0xfb, 0xf8,
	0x91, 0x46, 0x83, 0xc1, 0xa2, 0x33, 0xa0, 0x8b, 0xbe, 0x09, 0x0b, 0x9e, 0x52, 0xcf, 0xb5, 0x2d,
	0xc5, 0x89, 0x16, 0xf9, 0x32, 0xf2, 0xc5, 0x64, 0x7b, 0xf9, 0x67, 0x25, 0x62, 0xf4, 0x51, 0x38,
	0x87, 0x66, 0xe7, 0x4c, 0x6c, 0xa7, 0x4d, 0xd3, 0xc3, 0xe8, 0x0b, 0x50, 0x37, 0x7d, 0xdf, 0xb5,
	0x8e, 0x47, 0x3e, 0xf6, 0xda, 0x9e, 0x6f, 0x9d, 0x61, 0xb7, 0xed, 0x61, 0xc9, 0x87, 0xb9, 0x1c,
	0xb6, 0xb7, 0x68, 0x33, 0x99, 0x0b, 0x65, 0x35, 0x41, 0x77, 0x71, 0xd6, 0x96, 0x0c, 0x10, 0x55,
	0x79, 0xae, 0xf4, 0x56, 0xa0, 0xda, 0xb7, 0xfa, 0x98, 0x9d, 0xc6, 0xdc, 0xcb, 0x4c, 0x2a, 0xe8,
	0x51, 0x8c, 0xa0, 0xe4, 0x59, 0xef, 0x60, 0x1e, 0x50, 0x40, 0x7f, 0x53, 0xb6, 0x3b, 0x1d, 0xf5,
	0x8f, 0x03, 0xb6, 0x23, 0x85, 0x50, 0x09, 0xae, 0x48, 0x4a, 0xb0, 0x70, 0x4a, 0xcc, 0x84, 0x4e,
	0x09, 0xf4, 0x39, 0xb8, 0x2a, 0xa1, 0x6a, 0xf5, 0xcd, 0x13, 0xdc, 0x26, 0x70, 0xdb, 0xcf, 0x79,
	0xc8, 0xeb, 0x52, 0xd8, 0xdc, 0x24, 0xad, 0x2d, 0xeb, 0x1d, 0xfc, 0x46, 0xfa, 0x67, 0xa7, 0x94,
	0x39, 0x93, 0x3f, 0x7b, 0x80, 0xee, 0xc1, 0x72, 0x9c, 0xb0, 0xa6, 0xed, 0xf3, 0xf0, 0xd8, 0xcb,
	0x51, 0xaa, 0x6e, 0xd8, 0x3e, 0x7a, 0x00, 0x37, 0x93, 0x17, 0x43, 0x26, 0xe4, 0x1c, 0x25, 0xe4,
	0x8d, 0x84, 0x55, 0x91, 0xfc, 0x49, 0x2f, 0x83, 0x34, 0xab, 0x76, 0xcf, 0xb2, 0x31, 0x63, 0xf5,
	0x79, 0x3a, 0x38, 0x0a, 0xdb, 0xee, 0x5b, 0x36, 0xa6, 0x6e, 0xfd, 0x7f, 0x97, 0xc8, 0x23, 0x89,
	0x52, 0xe6, 0x2b, 0x30, 0x43, 0x58, 0x8e, 0xf0, 0x0f, 0x17, 0x8c, 0xb7, 0x12, 0x58, 0x38, 0xca,
	0x6a, 0x46, 0xf0, 0x91, 0xfe, 0x3d, 0x0d, 0x96, 0x99, 0x9c, 0x97, 0xba, 0x52, 0x43, 0xa4, 0x09,
	0xf3, 0x94, 0xe3, 0x87, 0x66, 0xe7, 0xec, 0x98, 0xc0, 0xd7, 0xf2, 0xc3, 0x57, 0xbf, 0xcc, 0x67,
	0x86, 0xb7, 0xa1, 0x9e, 0x34, 0x91, 0x8f, 0xee, 0x1c, 0x7d, 0x27, 0x69, 0x00, 0x6e, 0x5a, 0x7f,
	0x11, 0xca, 0x2d, 0xff, 0x70, 0x7b, 0x93, 0x5b, 0x02, 0xb9, 0x90, 0x64, 0x5f, 0xe4, 0x43, 0xee,
	0x14, 0x56, 0x52, 0xc6, 0x16, 0x8a, 0x26, 0xbb, 0x1b, 0x66, 0x1e, 0x38, 0x56, 0x98, 0x34, 0xe6,
	0x64, 0x45, 0x91, 0x7a, 0x6c, 0x28, 0xaa, 0x39, 0x26, 0x89, 0xdf, 0x5c, 0xb3, 0xef, 0xc0, 0x6a,
	0x3a, 0x4c, 0x8a, 0xc0, 0x06, 0x54, 0x09, 0x35, 0x3a, 0xcd, 0x30, 0x6a, 0x74, 0x1c, 0x0d, 0x99,
	0x5a, 0x1b, 0x7c, 0xa5, 0xff, 0x50, 0x83, 0xfa, 0x46, 0xb7, 0x7b, 0xe0, 0xb2, 0x83, 0xfa, 0xbe,
	0xf9, 0x8c, 0x52, 0x2b, 0x70, 0x13, 0x1c, 0x29, 0x6e, 0x02, 0x56, 0x22, 0x67, 0x50, 0x2b, 0xd0,
	0x19, 0xd8, 0x19, 0x1b, 0x56, 0xd0, 0xaf, 0x06, 0x3d, 0xf3, 0x99, 0x38, 0x64, 0x79, 0x29, 0xdf,
	0xf9, 0x61, 0xc0, 0x4a, 0xca, 0x74, 0x14, 0xbd, 0x61, 0x2b, 0xa7, 0xde, 0x40, 0x7e, 0xea, 0x3d,
	0xb8, 0xbc, 0x8b, 0x7d, 0x02, 0xab, 0xcb, 0x67, 0xe9, 0x65, 0x61, 0x87, 0xa0, 0xf4, 0x40, 0x28,
	0x0f, 0x65, 0x83, 0xfe, 0xce, 0xa7, 0xbc, 0xfd, 0xad, 0x06, 0x57, 0xe2, 0x03, 0xd1, 0x79, 0x0b,
	0x98, 0x9a, 0x04, 0xf3, 0xb3, 0x50, 0x26, 0x7b, 0xd5, 0xe3, 0x2e, 0xde, 0xab, 0x29, 0x2b, 0x67,
	0xb0, 0x5e, 0x44, 0xe8, 0xf0, 0xb3, 0xd0, 0xe3, 0x97, 0x4f, 0xf9, 0x84, 0x8e, 0xf8, 0x48, 0xa5,
	0x5d, 0x29, 0x27, 0xed, 0x9a, 0x30, 0x2b, 0x41, 0x26, 0x9a, 0xc9, 0x8e, 0xd0, 0x4c, 0x58, 0x14,
	0x55, 0x50, 0x46, 0xab, 0x00, 0x01, 0x97, 0x09, 0xb6, 0x90, 0x6a, 0xf4, 0x7f, 0xd0, 0xb8, 0x31,
	0x44, 0xe8, 0xac, 0x2a, 0xa1, 0x19, 0x8e, 0xfa, 0x79, 0x31, 0x7f, 0x2c, 0x5d, 0xd1, 0xcf, 0x85,
	0x95, 0xfc, 0x6a, 0x71, 0xe0, 0xf9, 0xa6, 0x6d, 0x63, 0xa1, 0xb1, 0x84, 0x15, 0x64, 0xca, 0xc4,
	0x62, 0x3c, 0x26, 0x8d, 0x5c, 0xbb, 0x13, 0x65, 0x22, 0x01, 0x1c, 0xb7, 0x8b, 0x5d, 0x7e, 0xca,
	0xb2, 0x02, 0xf9, 0xc2, 0x74, 0x3b, 0xa7, 0xd6, 0xb3, 0xe0, 0x12, 0x3e, 0x28, 0xe7, 0xb3, 0xd7,
	0x0f, 0xb9, 0x75, 0x12, 0x45, 0x74, 0x72, 0x5f, 0xd8, 0xfb, 0x1a, 0xac, 0x85, 0xc1, 0xb0, 0x92,
	0x65, 0xc0, 0x31, 0xb9, 0x38, 0x11, 0xb3, 0xc8, 0x94, 0xeb, 0xba, 0xe4, 0x2d, 0xd0, 0xb3, 0x67,
	0x38, 0xb9, 0xe2, 0xff, 0x5f, 0x35, 0xb8, 0x9e, 0x04, 0xfb, 0x80, 0x2c, 0xd7, 0xc5, 0x51, 0x0f,
	0xb8, 0xa0, 0x28, 0x73, 0x41, 0x2e, 0x71, 0xf5, 0x24, 0x79, 0x59, 0xf8, 0xc4, 0x26, 0xc7, 0xf8,
	0xcf, 0x35, 0xe1, 0xca, 0x57, 0x01, 0x37, 0x19, 0x5b, 0x6f, 0xb8, 0x1f, 0xc9, 0x82, 0x07, 0x5c,
	0x5e, 0x8c, 0x70, 0xb9, 0xb2, 0xa3, 0x4a, 0xd1, 0x1d, 0x95, 0x8b, 0x1d, 0xbe, 0x06, 0xb7, 0xc6,
	0x20, 0x30, 0x39, 0x75, 0xce, 0x45, 0xf0, 0xe4, 0x28, 0x84, 0x7d, 0x71, 0x82, 0xe4, 0x92, 0xf1,
	0xef, 0x69, 0xf4, 0x6e, 0x39, 0x3a, 0x36, 0xc5, 0xe5, 0x62, 0xc3, 0x4f, 0x74, 0x87, 0xf7, 0x7e,
	0x11, 0x16, 0x25, 0x02, 0x53, 0x6d, 0x35, 0x36, 0x9a, 0x36, 0x4e, 0x66, 0x16, 0xb2, 0x64, 0x66,
	0x31, 0x4d, 0x66, 0x96, 0xe4, 0xdd, 0x12, 0x31, 0x76, 0xca, 0xa9, 0x86, 0xf7, 0x74, 0x8a, 0xe1,
	0x5d, 0x89, 0x18, 0xde, 0x32, 0x7b, 0xce, 0x44, 0xd8, 0x33, 0x30, 0xca, 0xab, 0x89, 0x46, 0x39,
	0xa4, 0x1b, 0xe5, 0xb3, 0xa9, 0x46, 0xf9, 0x5c, 0x92, 0x51, 0x3e, 0x2f, 0x19, 0xe5, 0x75, 0xa8,
	0x70, 0x23, 0x9c, 0xbf, 0xb9, 0x13, 0x45, 0xd5, 0x24, 0x5f, 0x8c, 0x9a, 0xe4, 0x2d, 0x40, 0x91,
	0x15, 0x22, 0x5a, 0xe6, 0x6b, 0x30, 0xeb, 0x85, 0x35, 0x49, 0xf7, 0x41, 0x91, 0x8f, 0x0c, 0xb9,
	0xbf, 0xfe, 0x3a, 0x5c, 0x52, 0x0d, 0x65, 0x1e, 0xa1, 0x12, 0x87, 0x99, 0x65, 0x5c, 0x2b, 0x20,
	0x8f, 0xe8, 0x05, 0x18, 0xe1, 0xd8, 0x0d, 0xdb, 0x96, 0xf5, 0xa4, 0x8b, 0x3d, 0x0e, 0xfb, 0x2f,
	0xec, 0x66, 0x2c, 0x06, 0x97, 0x07, 0xf4, 0x2c, 0x78, 0x0a, 0x5d, 0xf2, 0x10, 0x22, 0xf2, 0xc9,
	0x64, 0x07, 0xea, 0x97, 0xa8, 0xa3, 0x24, 0x9c, 0x51, 0x0b, 0x33, 0x9f, 0x5e, 0xae, 0x8b, 0x20,
	0xee, 0xe4, 0x88, 0x7e, 0x1d, 0x71, 0x72, 0xa8, 0x28, 0xe5, 0x71, 0x72, 0x5c, 0x08, 0xa3, 0x16,
	0x5c, 0x57, 0x9c, 0x6d, 0xb2, 0x26, 0x98, 0x6c, 0x83, 0x24, 0x08, 0xa5, 0xa2, 0x2a, 0x26, 0xc8,
	0xf9, 0x96, 0x01, 0x74, 0x72, 0x09, 0xfe, 0x80, 0x6a, 0xca, 0x1b, 0x23, 0xff, 0xd4, 0xc9, 0xab,
	0x0a, 0x2e, 0xc3, 0xb4, 0x32, 0xd1, 0x32, 0x9b, 0xe1, 0xbb, 0x1a, 0x5c, 0x4b, 0x04, 0x35, 0xb1,
	0xbd, 0x80, 0xee, 0x42, 0xd1, 0xc3, 0x3e, 0xe7, 0x6a, 0x25, 0x02, 0x2f, 0x36, 0x0a, 0xe9, 0xa8,
	0xbf, 0x2a, 0xcd, 0x40, 0xe1, 0x89, 0x2c, 0x7c, 0xf4, 0xef, 0x6a, 0x70, 0x3d, 0xed, 0xb3, 0xc9,
	0xe7, 0xfe, 0x32, 0x94, 0x3c, 0xec, 0x0b, 0x9b, 0x22, 0x7b, 0xf2, 0xb4, 0xa7, 0xfe, 0xe3, 0x02,
	0xd4, 0xa2, 0x4d, 0x1f, 0xf2, 0x28, 0x8b, 0x70, 0x4d, 0x44, 0xe6, 0x16, 0xa3, 0x32, 0x57, 0x16,
	0xed, 0xa5, 0x2c, 0xcd, 0xa3, 0x9c, 0x75, 0x2e, 0x4d, 0x47, 0xce, 0xa5, 0x3a, 0x54, 0xe8, 0x51,
	0x84, 0x85, 0x23, 0x4c, 0x14, 0xe9, 0xd3, 0x5c, 0x17, 0x9b, 0x3e, 0x3f, 0x49, 0xca, 0x86, 0x28,
	0x92, 0x16, 0xf6, 0x44, 0xb1, 0xcb, 0x3d, 0x60, 0xa2, 0xa8, 0x7f, 0x1e, 0x56, 0xb6, 0xc8, 0x51,
	0xf0, 0x61, 0x57, 0xf5, 0x0c, 0x56, 0xd3, 0xbf, 0x9b, 0x7c, 0x59, 0x83, 0x63, 0x8a, 0xf3, 0x3e,
	0x2d, 0xe8, 0xf7, 0x61, 0x81, 0x0c, 0xbb, 0x6b, 0xf5, 0x84, 0xe4, 0x78, 0x15, 0x2a, 0x27, 0x56,
	0xaf, 0x6d, 0x26, 0x4b, 0x52, 0xaa, 0xb2, 0x98, 0xcf, 0x30, 0xff, 0xc0, 0x98, 0x3e, 0xb1, 0x7a,
	0x1b, 0xae, 0xab, 0x0f, 0x60, 0x31, 0xd2, 0x94, 0xb9, 0x0d, 0xc9, 0x08, 0x7c, 0xe5, 0xab, 0x46,
	0xf9, 0xc4, 0xea, 0x35, 0xe9, 0x53, 0xea, 0x1e, 0xf7, 0x17, 0x97, 0x0c, 0xf2, 0x93, 0x3e, 0x43,
	0xb6, 0x7c, 0xa6, 0x0e, 0xb0, 0xcb, 0xd1, 0xca, 0x89, 0xe5, 0xd3, 0x48, 0xfe, 0x1f, 0x69, 0xb0,
	0x40, 0x06, 0x3b, 0x62, 0x93, 0x1f, 0xb7, 0xed, 0x2f, 0x3a, 0x5e, 0xee, 0xe0, 0x39, 0x65, 0x4e,
	0x93, 0x0b, 0xb7, 0x77, 0xe8, 0xa3, 0x90, 0x3c, 0xc8, 0x7d, 0xf4, 0x58, 0xb0, 0xa7, 0x3e, 0x1f,
	0x01, 0x12, 0x66, 0xf0, 0xd8, 0x7a, 0xd7, 0xea, 0x65, 0x46, 0xf2, 0x0b, 0x65, 0x89, 0xfb, 0x4b,
	0x4e, 0x73, 0xfb, 0x4b, 0x3e, 0xd0, 0x82, 0x07, 0xc9, 0x6c, 0x0c, 0xf1, 0x64, 0x3c, 0xf7, 0x30,
	0x12, 0xbb, 0x17, 0x73, 0xb3, 0xfb, 0x64, 0xb1, 0xb8, 0x03, 0xfe, 0xaa, 0x8c, 0x3a, 0x89, 0x3c,
	0x35, 0xc8, 0xf0, 0x8f, 0x91, 0x35, 0x44, 0xbc, 0x38, 0x8b, 0x8c, 0x37, 0xf9, 0x82, 0xfe, 0x53,
	0x01, 0x6a, 0x2e, 0x7f, 0xb9, 0x76, 0x74, 0xf1, 0xec, 0x1e, 0x41, 0x38, 0x43, 0x51, 0x0e, 0x67,
	0x88, 0xa6, 0xc2, 0x28, 0xc5, 0x53, 0x61, 0x44, 0x12, 0x49, 0x94, 0x63, 0x89, 0x24, 0xd4, 0xd8,
	0xfc, 0xe9, 0xcc, 0xd8, 0xfc, 0x4a, 0xe4, 0xd1, 0xc5, 0x32, 0x4c, 0x5b, 0x5e, 0xfb, 0xd8, 0xf1,
	0xb9, 0xcd, 0x50, 0xb6, 0xbc, 0xcd, 0x30, 0xdf, 0x84, 0xf2, 0x18, 0xad, 0x9a, 0xfb, 0x31, 0x1a,
	0x24, 0x3e, 0x46, 0x5b, 0x87, 0x39, 0xe9, 0x31, 0x9a, 0x47, 0x4d, 0x0b, 0x91, 0x9a, 0x82, 0xf4,
	0xf3, 0xf4, 0xb7, 0xe5, 0xe7, 0xd7, 0x6a, 0x96, 0x81, 0xd1, 0xf8, 0xa7, 0x57, 0xb4, 0x0b, 0x39,
	0x0f, 0xc3, 0xd3, 0x82, 0x87, 0xd5, 0x86, 0xc7, 0xc2, 0x15, 0x98, 0x66, 0x30, 0x85, 0xab, 0x95,
	0x95, 0xf4, 0x77, 0x60, 0xa5, 0x23, 0x98, 0x27, 0xbc, 0x14, 0x79, 0x62, 0xda, 0x56, 0x37, 0xcb,
	0xf3, 0xb9, 0x0a, 0x52, 0x48, 0xae, 0x58, 0x73, 0xe9, 0x52, 0x25, 0x17, 0xe3, 0x3a, 0xb0, 0x9a,
	0x3e, 0x36, 0xc5, 0xbf, 0x0e, 0x15, 0xcb, 0xa3, 0x15, 0x74, 0x7c, 0x1a, 0x1f, 0x4a, 0x8b, 0x93,
	0x29, 0xbe, 0xbf, 0x2b, 0xc0, 0x65, 0x23, 0xc2, 0xd8, 0x99, 0x52, 0x77, 0x2c, 0x6f, 0xaf, 0xc3,
	0xec, 0x61, 0xf8, 0xec, 0x4a, 0xbc, 0x42, 0x92, 0xaa, 0xc8, 0xb2, 0xdc, 0x17, 0x1c, 0xc9, 0x99,
	0x3c, 0xac, 0x20, 0x6a, 0xca, 0x1e, 0xe7, 0x48, 0x91, 0xbd, 0x66, 0x2f, 0xce, 0xa1, 0xd3, 0xe3,
	0x38, 0xb4, 0x92, 0x9b, 0x43, 0x67, 0x72, 0x71, 0x68, 0x35, 0xca, 0xa1, 0x79, 0xc3, 0xb8, 0xae,
	0xc4, 0xc9, 0xfb, 0xa1, 0x19, 0x79, 0xa2, 0xa5, 0x75, 0xa8, 0x95, 0xb6, 0xef, 0xf8, 0x56, 0xef,
	0xbc, 0x85, 0x7d, 0xdf, 0x1a, 0x9c, 0x08, 0x93, 0x54, 0x3c, 0xb8, 0xd6, 0x94, 0x07, 0xd7, 0xd7,
	0x60, 0xc6, 0xc5, 0x4f, 0xe5, 0x40, 0xae, 0x8a, 0x8b, 0x9f, 0xaa, 0xb1, 0x4d, 0x59, 0xcc, 0xfb,
	0x6b, 0x66, 0xd9, 0x45, 0x47, 0xa4, 0xd8, 0xde, 0x82, 0xf9, 0xd6, 0xa9, 0xf3, 0xbc, 0x3d, 0x74,
	0xf1, 0x33, 0x0b, 0x3f, 0xf7, 0x38, 0xf3, 0xce, 0x91, 0xca, 0x43, 0x5e, 0x47, 0xb6, 0x56, 0xcb,
	0xb2, 0x31, 0xd7, 0xd4, 0x66, 0x0c, 0x5e, 0x22, 0x42, 0xed, 0xd1, 0xc8, 0xc7, 0xed, 0xd1, 0xc0,
	0xb7, 0x6c, 0xee, 0x68, 0xac, 0x92, 0x9a, 0x23, 0x52, 0x41, 0xa4, 0x69, 0xcb, 0x19, 0x0d, 0xba,
	0x9c, 0x97, 0x58, 0x61, 0xb2, 0x98, 0xa3, 0x3f, 0x68, 0x22, 0x6f, 0xc2, 0x47, 0x45, 0xb7, 0x08,
	0xda, 0xc5, 0x4c, 0xb4, 0x4b, 0x19, 0x68, 0x97, 0x53, 0xd1, 0x9e, 0x96, 0xd1, 0xce, 0xe5, 0x63,
	0x7f, 0x1d, 0x1a, 0xc9, 0x58, 0x4e, 0x7e, 0x42, 0xb2, 0xec, 0x38, 0x22, 0x6c, 0x3f, 0x47, 0xfa,
	0x87, 0x9c, 0x37, 0xac, 0x55, 0xe6, 0xc1, 0x30, 0x47, 0x5e, 0xba, 0x4c, 0x0a, 0x53, 0x46, 0x14,
	0x94, 0xf4, 0x55, 0x37, 0x61, 0x8e, 0xe7, 0x88, 0x68, 0xfb, 0x56, 0x3f, 0x08, 0xda, 0xe3, 0x75,
	0x8f, 0xad, 0x3e, 0xd6, 0xff, 0x33, 0xe3, 0xd9, 0xe8, 0xbc, 0xf9, 0x0d, 0x61, 0x8d, 0x3f, 0xd5,
	0x63, 0xd5, 0xa1, 0x3f, 0x62, 0x39, 0xee, 0x62, 0x31, 0x47, 0x9e, 0x11, 0xeb, 0x3e, 0xd9, 0xc6,
	0x3d, 0x81, 0xcb, 0x6c, 0x75, 0x36, 0x1d, 0xff, 0xd0, 0xea, 0x18, 0xf8, 0xe9, 0x08, 0x7b, 0x3e,
	0x11, 0x7e, 0x54, 0xca, 0x09, 0xec, 0xcb, 0x44, 0xb6, 0x45, 0x52, 0xbf, 0xcc, 0x89, 0xd4, 0x2f,
	0x1f, 0x2e, 0x57, 0x84, 0x18, 0x68, 0xf2, 0x3b, 0x96, 0xc0, 0x25, 0x74, 0xe8, 0x3a, 0x6f, 0x9f,
	0x6f, 0x39, 0x83, 0x9e, 0x75, 0x92, 0xdb, 0x25, 0xd4, 0x84, 0x2a, 0xfd, 0x6c, 0xa3, 0xdb, 0x75,
	0x79, 0xe8, 0xa7, 0x16, 0x84, 0x7e, 0x92, 0x03, 0x6f, 0x30, 0xc0, 0x6e, 0x73, 0xc8, 0x8d, 0x18,
	0x51, 0x24, 0x4a, 0xed, 0xd0, 0x71, 0x7d, 0xbe, 0xac, 0xf4, 0xb7, 0xfe, 0x4d, 0xe1, 0x5c, 0x52,
	0xe6, 0x41, 0xf1, 0xfa, 0x0c, 0x94, 0xcd, 0x6e, 0xd7, 0xf5, 0x92, 0xd6, 0x30, 0x18, 0xde, 0x60,
	0x7d, 0x26, 0x0d, 0x7b, 0x0b, 0xd5, 0x4e, 0x72, 0x5e, 0x1d, 0x74, 0x3a, 0xa3, 0xa1, 0x85, 0xbb,
	0x92, 0x01, 0xa0, 0xf2, 0xae, 0x45, 0x9f, 0x09, 0x52, 0xa6, 0x1e, 0x4c, 0x9a, 0x42, 0x42, 0xff,
	0x1c, 0xac, 0xa4, 0x8c, 0x2a, 0x4c, 0x02, 0xa7, 0xd3, 0x19, 0x8e, 0xce, 0xb9, 0xc8, 0xe5, 0x25,
	0x7d, 0x8f, 0x06, 0xf9, 0x52, 0xfb, 0x61, 0xe8, 0x65, 0xcd, 0x30, 0xd7, 0x46, 0xfd, 0x0b, 0x16,
	0x8c, 0x1a, 0x80, 0xa3, 0x43, 0xcb, 0xa9, 0x57, 0xb4, 0x48, 0xea, 0x15, 0x25, 0x69, 0x4b, 0x21,
	0x9a, 0xb4, 0xe5, 0x16, 0xcc, 0x77, 0xf1, 0x33, 0xab, 0x83, 0xdb, 0x7d, 0xa7, 0x3b, 0xb2, 0x85,
	0xa2, 0x3c, 0xc7, 0x2a, 0x1f, 0xd1, 0x3a, 0x02, 0x82, 0x6c, 0x6b, 0xcf, 0x37, 0xfb, 0x43, 0xee,
	0x50, 0x0f, 0x2b, 0x26, 0x93, 0xff, 0x36, 0x37, 0x54, 0x5a, 0xf2, 0xbb, 0x61, 0x4e, 0x1c, 0x26,
	0xb7, 0xe2, 0xb9, 0x5a, 0xb8, 0xc1, 0x35, 0x81, 0x99, 0x32, 0xe2, 0xfc, 0x12, 0x19, 0x8d, 0xd2,
	0xee, 0x05, 0x98, 0x57, 0xaa, 0xf9, 0xea, 0xa9, 0x95, 0x93, 0xa6, 0xb2, 0xe2, 0xb9, 0x68, 0x5a,
	0xcf, 0x2d, 0xbf, 0x73, 0x9a, 0xa9, 0xee, 0xdd, 0x81, 0x69, 0x8f, 0xf6, 0xe2, 0xd0, 0x91, 0xe2,
	0x89, 0x65, 0xdf, 0xf3, 0x1e, 0x44, 0x40, 0x39, 0x83, 0xb6, 0xd3, 0xeb, 0xf1, 0x53, 0xae, 0xec,
	0x0c, 0x0e, 0x7a, 0x3d, 0xfd, 0xdb, 0x9a, 0x10, 0x33, 0x62, 0x3c, 0x8a, 0xe0, 0x6b, 0x50, 0x92,
	0x0e, 0x98, 0x4f, 0x2b, 0x12, 0x35, 0xd6, 0xfb, 0x2e, 0xfb, 0x8f, 0x62, 0x42, 0x3f, 0xd3, 0x5f,
	0x04, 0x08, 0xeb, 0xd0, 0x2c, 0x54, 0x5a, 0x23, 0xaa, 0x83, 0xd6, 0xa6, 0xd0, 0x25, 0x98, 0x6f,
	0x0e, 0x7c, 0xec, 0x0e, 0x4c, 0x9b, 0x22, 0x5d, 0xd3, 0xf4, 0xb7, 0xd8, 0x1b, 0x1c, 0x0a, 0x51,
	0x39, 0x9b, 0x2e, 0x8c, 0xb5, 0xfe, 0xdf, 0xf9, 0x5b, 0x1c, 0x05, 0x36, 0xc5, 0x30, 0xa4, 0x87,
	0x26, 0xd1, 0x03, 0xfd, 0x2b, 0x8e, 0x38, 0x03, 0xfd, 0xa2, 0x0c, 0x3a, 0x11, 0xce, 0x45, 0x71,
	0xff, 0x8d, 0x06, 0x97, 0x8e, 0xf8, 0xde, 0xf4, 0xa8, 0xea, 0x9a, 0xb5, 0xdb, 0x97, 0xa0, 0x4c,
	0x53, 0x87, 0xf2, 0x18, 0x5c, 0x56, 0x20, 0xbd, 0x89, 0x1a, 0x4c, 0xdd, 0x2d, 0xa4, 0x9a, 0x97,
	0x68, 0xce, 0x9f, 0x53, 0x73, 0x30, 0xc0, 0x36, 0x8d, 0xe2, 0xa7, 0xb7, 0x37, 0x41, 0x05, 0xfa,
	0x04, 0x2c, 0xd0, 0x94, 0xa1, 0x1d, 0xc7, 0x6e, 0xdb, 0xe6, 0x79, 0x10, 0x2a, 0x30, 0x2f, 0x6a,
	0xf7, 0x48, 0x25, 0xba, 0x09, 0xa5, 0x6d, 0xdb, 0x49, 0xc9, 0xf3, 0x43, 0x9b, 0xf4, 0x7f, 0xd4,
	0x60, 0x29, 0x8a, 0x83, 0x10, 0x31, 0x7c, 0x3c, 0x26, 0xd7, 0xe7, 0x8c, 0xa0, 0x8c, 0x5e, 0x0a,
	0x51, 0xd1, 0xa2, 0xef, 0x9c, 0x95, 0x14, 0x9f, 0x02, 0xcb, 0x25, 0x28, 0x33, 0x65, 0xbf, 0x48,
	0x21, 0xb1, 0x02, 0x51, 0xef, 0x02, 0x2b, 0x80, 0xa1, 0x58, 0x19, 0x70, 0x13, 0x20, 0x68, 0x1a,
	0x78, 0xfc, 0x0d, 0x09, 0x6b, 0x1a, 0x78, 0xe8, 0x4b, 0x34, 0x7d, 0xe2, 0xc8, 0xf6, 0xe9, 0x5a,
	0x4f, 0xd3, 0xb5, 0x56, 0x6f, 0x66, 0x08, 0x08, 0x69, 0x69, 0xa5, 0xee, 0xfa, 0xf7, 0x82, 0xe4,
	0x63, 0x9b, 0xcc, 0x7e, 0x69, 0x8d, 0x86, 0xc3, 0x2c, 0xe3, 0x93, 0x18, 0x5d, 0x52, 0x5e, 0x4b,
	0x9e, 0xfe, 0x42, 0x4e, 0x67, 0x59, 0x83, 0xe2, 0x09, 0x76, 0xf8, 0xce, 0x24, 0x3f, 0x73, 0xbf,
	0xf8, 0x4b, 0x98, 0xc8, 0xe4, 0x6a, 0xe2, 0x4f, 0x34, 0xfa, 0xcc, 0x09, 0x33, 0xbb, 0x5e, 0x24,
	0xd2, 0x13, 0xd9, 0x3d, 0xba, 0x7d, 0x35, 0xbb, 0x07, 0x29, 0x8f, 0xc9, 0xa6, 0x77, 0x13, 0xe6,
	0x7a, 0x8e, 0xdb, 0xc1, 0x6d, 0x96, 0x30, 0x93, 0x23, 0x38, 0x4b, 0xeb, 0xd8, 0x40, 0xf9, 0x10,
	0xfd, 0x7f, 0x05, 0xa8, 0x27, 0x4d, 0x6c, 0x9c, 0xac, 0x4a, 0xfb, 0xe6, 0x6e, 0xb8, 0x5f, 0xd1,
	0xab, 0x70, 0xc5, 0xe2, 0x9b, 0xb2, 0x8d, 0x09, 0x29, 0xda, 0x7d, 0xec, 0x79, 0xe6, 0x89, 0xc0,
	0x66, 0xc9, 0x92, 0xb7, 0xec, 0x23, 0xd6, 0x46, 0x08, 0xe2, 0x3c, 0x1f, 0xc8, 0xa1, 0xe1, 0x15,
	0x5a, 0x6e, 0x76, 0xf5, 0xf7, 0x34, 0x28, 0xc5, 0xf7, 0xfe, 0x12, 0xd4, 0x0e, 0xb1, 0xdb, 0xb7,
	0xe8, 0x23, 0x9a, 0x6d, 0x3c, 0xb0, 0x70, 0xb7, 0xa6, 0x91, 0x5a, 0x31, 0xb3, 0x7d, 0xc7, 0xdf,
	0x79, 0xdb, 0xf2, 0xfc, 0x5a, 0x01, 0x5d, 0x86, 0xc5, 0xe6, 0xe0, 0x99, 0x69, 0x5b, 0x5d, 0xd1,
	0x58, 0x2b, 0xa2, 0x79, 0xa6, 0x6d, 0x37, 0x89, 0x51, 0x5d, 0x2b, 0xc9, 0x5f, 0x0a, 0x9d, 0xa2,
	0x56, 0x8e, 0x4b, 0x98, 0x69, 0xfd, 0xbf, 0x69, 0x72, 0x6e, 0xbf, 0x3d, 0xa7, 0x63, 0xb2, 0xc4,
	0xa8, 0xe9, 0xfc, 0x5a, 0x87, 0xca, 0x16, 0x73, 0x6b, 0x09, 0xa5, 0x8e, 0x17, 0x89, 0x52, 0xb7,
	0x65, 0xf9, 0xe7, 0xfc, 0xc0, 0xa7, 0xbf, 0x09, 0x14, 0x9e, 0xb1, 0x80, 0xa7, 0x0e, 0xe3, 0xd9,
	0x08, 0x72, 0x39, 0x75, 0xf7, 0xa0, 0x9e, 0x34, 0x37, 0xe1, 0x4c, 0xe1, 0xe4, 0x13, 0xce, 0x14,
	0x5e, 0x64, 0xce, 0x21, 0x9a, 0xf1, 0x95, 0xcd, 0x8f, 0x97, 0xf4, 0xbe, 0xec, 0x96, 0xda, 0x75,
	0xf1, 0xa0, 0x9b, 0x1d, 0xed, 0x57, 0x87, 0x0a, 0xef, 0x25, 0x4c, 0x43, 0x5e, 0xcc, 0xa7, 0x21,
	0x3c, 0x94, 0xd3, 0xf8, 0x05, 0xc3, 0x4d, 0x38, 0xf7, 0x13, 0x71, 0x0e, 0xd3, 0x6c, 0xa3, 0x7d,
	0xd3, 0xb2, 0xb3, 0x66, 0xbe, 0x04, 0x65, 0xda, 0x47, 0x5c, 0x1d, 0xd0, 0x42, 0x5e, 0xbb, 0x62,
	0x39, 0x36, 0xd0, 0x84, 0x73, 0xfe, 0x01, 0xcd, 0xc7, 0x66, 0x3b, 0x66, 0xf7, 0x4f, 0x20, 0x45,
	0x88, 0x7e, 0x9f, 0xac, 0xbe, 0x3a, 0x19, 0x11, 0x0c, 0x4b, 0xf7, 0xb5, 0x38, 0xe8, 0x69, 0x81,
	0x60, 0xab, 0xee, 0x73, 0x51, 0xd4, 0x9f, 0xc2, 0xe2, 0xc6, 0x70, 0x68, 0x9f, 0xe7, 0xc9, 0x7d,
	0xa5, 0xc3, 0xbc, 0x49, 0xfa, 0xb6, 0x55, 0xd4, 0x66, 0x69, 0xe5, 0x51, 0xf0, 0x3a, 0xed, 0xb9,
	0xe5, 0x9f, 0x06, 0x62, 0x85, 0x3b, 0xdd, 0x48, 0x1d, 0x97, 0x26, 0xfa, 0x36, 0x20, 0x75, 0xc8,
	0x89, 0x26, 0xfe, 0x32, 0xd5, 0x75, 0x08, 0x20, 0x0b, 0x2b, 0x2b, 0x92, 0x7a, 0xa7, 0xf7, 0x2e,
	0x0b, 0x61, 0x88, 0x7d, 0x32, 0xc9, 0xf0, 0xe8, 0x55, 0xa0, 0x68, 0x5b, 0xb8, 0x2b, 0x5d, 0x5b,
	0x5c, 0x56, 0xee, 0x69, 0x59, 0xb3, 0x01, 0xbc, 0x1f, 0x59, 0xb5, 0x0f, 0x0a, 0x50, 0xe1, 0xf5,
	0xd2, 0x45, 0x7e, 0x91, 0x5e, 0xe4, 0xa7, 0xb2, 0xcc, 0x2b, 0x00, 0x21, 0xd9, 0x39, 0xb7, 0xa7,
	0xbc, 0x73, 0x0b, 0x56, 0x22, 0xb6, 0x0e, 0xa5, 0xd8, 0x3a, 0x48, 0xbe, 0x8a, 0xb2, 0xe2, 0xab,
	0x40, 0x50, 0xea, 0xd9, 0x26, 0x53, 0x82, 0xca, 0x06, 0xfd, 0x4d, 0xfa, 0x9e, 0x30, 0xd9, 0xc1,
	0xd3, 0x72, 0xb3, 0x12, 0x25, 0x1b, 0xdd, 0x9a, 0x33, 0x6c, 0x6b, 0xd2, 0x82, 0x2c, 0x53, 0xab,
	0xc9, 0x32, 0x15, 0x12, 0x65, 0xea, 0xac, 0x2c, 0x53, 0xf5, 0x6f, 0x40, 0xed, 0x09, 0x76, 0xad,
	0x9e, 0xcc, 0x9b, 0x51, 0xa2, 0xbd, 0x00, 0x0b, 0x34, 0x4d, 0x74, 0xc8, 0x93, 0xec, 0x7c, 0x9a,
	0x63, 0xb5, 0x47, 0x51, 0xaf, 0x4c, 0x49, 0xc6, 0x54, 0xdf, 0x81, 0xcb, 0x91, 0x11, 0x26, 0x62,
	0xc5, 0x4f, 0x8b, 0x58, 0x32, 0x95, 0xb5, 0x12, 0xe6, 0xab, 0xef, 0x41, 0x23, 0xb9, 0xeb, 0x44,
	0x03, 0xbf, 0x08, 0x4b, 0x2d, 0x6c, 0xba, 0x9d, 0x53, 0x96, 0x0c, 0x98, 0x67, 0x35, 0x4c, 0xc9,
	0x90, 0x48, 0x9d, 0xa2, 0x09, 0xdd, 0xe9, 0xc8, 0xff, 0x82, 0xdb, 0xfe, 0x63, 0xdd, 0xc0, 0x61,
	0x46, 0xf9, 0x90, 0x25, 0x0a, 0xc9, 0x2c, 0x51, 0x8c, 0xb0, 0x04, 0xbf, 0x3d, 0xe2, 0xac, 0x28,
	0x8a, 0x01, 0x4b, 0x94, 0x13, 0x59, 0x62, 0x5a, 0x66, 0x89, 0x3b, 0xef, 0x16, 0xa0, 0x1a, 0x28,
	0x73, 0xaa, 0xca, 0x31, 0x0b, 0x95, 0xed, 0x4d, 0x6e, 0x68, 0xc4, 0x35, 0x83, 0x02, 0x9a, 0x83,
	0x99, 0x40, 0xe9, 0x28, 0x0a, 0x85, 0x42, 0x76, 0x52, 0xd4, 0x4a, 0xa4, 0x8f, 0x70, 0x91, 0xd7,
	0xca, 0x68, 0x01, 0xe0, 0x68, 0x20, 0xae, 0xda, 0x6a, 0xd3, 0x44, 0x27, 0xd9, 0x77, 0xfc, 0x47,
	0x4e, 0xd7, 0xea, 0x9d, 0xd7, 0x2a, 0x64, 0x40, 0x7e, 0x9d, 0x57, 0x9b, 0xa1, 0xfa, 0xca, 0x40,
	0x14, 0xab, 0xa8, 0x0a, 0x65, 0x7a, 0x13, 0x52, 0x03, 0xd2, 0xed, 0x68, 0xc0, 0x0a, 0xb3, 0x08,
	0x60, 0xfa, 0xbe, 0x69, 0xd9, 0xb8, 0x5b, 0x9b, 0x43, 0x08, 0x16, 0x1e, 0x98, 0xde, 0xe9, 0xbe,
	0xe3, 0x0b, 0x24, 0xe6, 0xa3, 0x1a, 0x52, 0x7f, 0xe8, 0x9f, 0xd7, 0x16, 0x08, 0x88, 0x27, 0xd6,
	0xf0, 0x60, 0x60, 0x9f, 0xd7, 0x16, 0xef, 0xbc, 0x09, 0xd3, 0xcc, 0x30, 0x23, 0xc0, 0x8e, 0x06,
	0x23, 0x0f, 0x77, 0x6b, 0x53, 0x04, 0x98, 0xf8, 0x90, 0x2d, 0x71, 0x4d, 0x43, 0x57, 0x00, 0x91,
	0xf9, 0x9b, 0xdd, 0xe6, 0xa0, 0x63, 0x8f, 0xba, 0xf8, 0xd1, 0xc8, 0xc7, 0xdd, 0x5a, 0x81, 0xd4,
	0xf3, 0x68, 0xde, 0x47, 0x23, 0xdb, 0xb7, 0x5a, 0xd6, 0xc9, 0xa0, 0x39, 0xa8, 0x15, 0xef, 0xfc,
	0xa1, 0x0c, 0x8b, 0x11, 0x53, 0x00, 0x2d, 0xc2, 0x2c, 0xa9, 0x69, 0x1b, 0x87, 0x5b, 0xed, 0x83,
	0x87, 0xb5, 0x29, 0x74, 0x0d, 0x96, 0x68, 0xc5, 0xc6, 0xf6, 0xf6, 0x51, 0x6b, 0xc7, 0x78, 0xe5,
	0x73, 0xaf, 0x7e, 0xb1, 0xbd, 0xf3, 0xe6, 0x61, 0xed, 0xfd, 0x35, 0x74, 0x15, 0x10, 0x6d, 0x22,
	0x13, 0x69, 0x1f, 0xba, 0x96, 0xf9, 0xac, 0x63, 0x9e, 0xd7, 0x7e, 0xba, 0x16, 0x7c, 0xf3, 0xd8,
	0x61, 0x6d, 0x82, 0x4e, 0x3f, 0x5b, 0x43, 0x57, 0xe0, 0x52, 0xf8, 0x8d, 0xa8, 0xff, 0x1f, 0x61,
	0xbd, 0xb1, 0x73, 0xb8, 0xb3, 0xf1, 0xb8, 0xbd, 0x65, 0xec, 0x6c, 0x3c, 0xae, 0xfd, 0x3c, 0x04,
	0xc5, 0xeb, 0x37, 0xb6, 0xb7, 0xdb, 0x64, 0x1a, 0xb5, 0x5f, 0xac, 0xa1, 0x55, 0xb8, 0x46, 0x9b,
	0x76, 0xde, 0xdc, 0xda, 0xd9, 0xd9, 0x66, 0x9f, 0xec, 0xb4, 0x1f, 0x6d, 0xbc, 0xb9, 0x7f, 0xf4,
	0xa8, 0xf6, 0xcb, 0x35, 0xf4, 0x02, 0xac, 0xc9, 0xed, 0x8f, 0x0f, 0xb6, 0x37, 0xde, 0x8a, 0xf4,
	0xfa, 0x9f, 0x6b, 0x68, 0x1d, 0x56, 0xe4, 0x5e, 0x62, 0x00, 0xd1, 0xe3, 0x7f, 0xad, 0xa1, 0xeb,
	0x70, 0x95, 0xf6, 0x38, 0x34, 0x0e, 0x1e, 0x34, 0x37, 0x9b, 0x6c, 0x12, 0xbb, 0xc6, 0xc1, 0xd1,
	0x61, 0xed, 0x7f, 0x87, 0xb3, 0xd8, 0xd8, 0x7e, 0xd4, 0xdc, 0xdf, 0xdb, 0x79, 0xb2, 0xb3, 0x47,
	0x41, 0x1d, 0x3e, 0x6e, 0x1e, 0xec, 0xd7, 0x3e, 0x58, 0x43, 0x6b, 0xd0, 0x60, 0xed, 0x7b, 0xc6,
	0xce, 0xc6, 0xf6, 0x5b, 0x7b, 0x3b, 0xf7, 0x1f, 0x4b, 0x1d, 0xfe, 0x4f, 0x48, 0x45, 0x0a, 0xb1,
	0xbd, 0xdd, 0x6c, 0x6d, 0x6e, 0xec, 0x6f, 0xd7, 0xfe, 0x6f, 0x48, 0x12, 0xd6, 0xf0, 0xb0, 0xb9,
	0xf5, 0x70, 0x67, 0xbb, 0xf6, 0xab, 0x10, 0xe2, 0x83, 0x83, 0x23, 0xa3, 0x15, 0x9b, 0xf0, 0x8f,
	0xd6, 0x83, 0x29, 0x1d, 0xec, 0x6f, 0xed, 0xc4, 0xda, 0x7f, 0xbc, 0x8e, 0x2e, 0xc1, 0x1c, 0x5b,
	0x83, 0xfd, 0x87, 0xfb, 0x07, 0x6f, 0xec, 0xd7, 0xbe, 0xb3, 0x8e, 0x6e, 0x40, 0x9d, 0xe1, 0xb8,
	0x61, 0x6c, 0x3c, 0xda, 0x79, 0xbc, 0x63, 0x48, 0x73, 0xfc, 0xee, 0x7a, 0xb0, 0x0a, 0x7b, 0x07,
	0xbb, 0xcd, 0x2d, 0xa9, 0xe9, 0x3f, 0xac, 0x4b, 0x0b, 0xb4, 0xdd, 0x6c, 0x49, 0x4d, 0xdf, 0x5b,
	0x0f, 0x10, 0xd8, 0xde, 0x94, 0xea, 0xff, 0xe3, 0x3a, 0x5a, 0x81, 0x2b, 0x8c, 0x24, 0xb6, 0xed,
	0x74, 0x9a, 0x5d, 0xa9, 0xf1, 0xfb, 0xeb, 0x01, 0x76, 0x5b, 0xa6, 0x6d, 0x73, 0xab, 0x5b, 0xea,
	0xf0, 0x9f, 0xd6, 0xd1, 0x32, 0xd4, 0x04, 0xd4, 0xfd, 0x03, 0x63, 0x67, 0xeb, 0xc0, 0xd8, 0xae,
	0xfd, 0x60, 0x1d, 0xd5, 0xe1, 0x32, 0xa3, 0x16, 0x4d, 0xa1, 0x1f, 0xb4, 0xbc, 0xb7, 0x7e, 0xef,
	0xb7, 0x5f, 0x66, 0xb9, 0x84, 0x5b, 0x54, 0xb2, 0x91, 0x7f, 0xad, 0x0e, 0x46, 0x6f, 0x41, 0x2d,
	0x7a, 0x3b, 0x86, 0xd6, 0x54, 0x1b, 0x32, 0x76, 0x35, 0xd9, 0xd0, 0xb3, 0x3b, 0xd0, 0x3b, 0xdc,
	0x29, 0x64, 0xd0, 0xfc, 0xe5, 0x72, 0xb2, 0x78, 0xb4, 0x1a, 0x71, 0xb5, 0x44, 0xfe, 0x84, 0x49,
	0xe3, 0x46, 0x4a, 0x7b, 0x00, 0xb3, 0x1d, 0xfb, 0xcb, 0x27, 0x1b, 0xae, 0x8b, 0x6e, 0x66, 0x80,
	0x65, 0x6f, 0xb5, 0x1a, 0x2f, 0x8c, 0xeb, 0xc2, 0x07, 0xf8, 0x7a, 0x10, 0xd3, 0xb1, 0xf3, 0xf6,
	0xd0, 0x22, 0xc7, 0x05, 0xb1, 0xed, 0x13, 0x3e, 0x56, 0xfe, 0x02, 0x41, 0xe3, 0xd6, 0x98, 0x1e,
	0x1c, 0xfa, 0xeb, 0x91, 0xe9, 0xb3, 0x88, 0x81, 0x46, 0xc2, 0xc7, 0xfc, 0x4f, 0x04, 0x8c, 0xa7,
	0xc8, 0x1b, 0x91, 0x3f, 0xcf, 0x12, 0x64, 0xc6, 0xbf, 0x91, 0x08, 0x55, 0x34, 0x8f, 0x07, 0xfc,
	0x44, 0xf8, 0x28, 0x83, 0x14, 0xef, 0xea, 0xf2, 0xc5, 0x93, 0xe3, 0x37, 0x6e, 0xc6, 0x5d, 0x88,
	0x91, 0xfc, 0xf0, 0xfa, 0x14, 0x7a, 0x04, 0x73, 0x72, 0xde, 0x78, 0xb4, 0x12, 0x99, 0x88, 0x02,
	0x31, 0x89, 0x61, 0x54, 0x70, 0x5f, 0x17, 0xd9, 0xa2, 0xa5, 0x34, 0xeb, 0xea, 0x82, 0x25, 0xe5,
	0x90, 0x57, 0x17, 0x2c, 0x25, 0x4f, 0xbb, 0x3e, 0x85, 0x76, 0xa0, 0x26, 0x3f, 0x03, 0xa0, 0x7a,
	0xe2, 0xb2, 0x1a, 0x0a, 0xcb, 0x5d, 0x99, 0x8d, 0x7a, 0x52, 0x35, 0x07, 0xb3, 0x2b, 0xdb, 0x7d,
	0xac, 0xed, 0xc9, 0xbd, 0x49, 0x00, 0xbd, 0x2e, 0xcf, 0x87, 0x31, 0x98, 0x4a, 0xc0, 0x48, 0x8a,
	0x73, 0x95, 0x80, 0xf1, 0xb4, 0xe4, 0xfa, 0x14, 0x7a, 0x4b, 0x26, 0x20, 0xcf, 0xe2, 0xad, 0x32,
	0x4f, 0x2c, 0xbd, 0x77, 0x84, 0x7a, 0xc9, 0xd9, 0xbf, 0xf5, 0x29, 0xd4, 0x82, 0x85, 0x10, 0xf4,
	0x7e, 0x8c, 0x29, 0x63, 0x59, 0xbe, 0x1b, 0xeb, 0x59, 0xcd, 0x1c, 0xe8, 0xa9, 0x14, 0xc9, 0x24,
	0xeb, 0x31, 0x48, 0xd9, 0xe2, 0x69, 0xb7, 0x40, 0x8d, 0x4f, 0xe5, 0xe8, 0x15, 0x0a, 0x9b, 0x78,
	0xd6, 0x6c, 0x55, 0xd8, 0x24, 0x66, 0xea, 0x6e, 0xbc, 0x30, 0xae, 0x4b, 0xb0, 0xc5, 0x50, 0xe8,
	0xbc, 0x0a, 0x84, 0xe4, 0x7a, 0xdc, 0xb9, 0xa5, 0x66, 0xd9, 0x6e, 0x5c, 0x8f, 0xf4, 0x50, 0x52,
	0x63, 0xd3, 0x2d, 0x36, 0xaf, 0xb8, 0x0c, 0x91, 0xe2, 0x78, 0x55, 0xd2, 0x47, 0x37, 0xd6, 0x52,
	0x9b, 0x24, 0xa6, 0x9b, 0x93, 0x2f, 0x29, 0xd5, 0xf3, 0x21, 0xe1, 0x9e, 0x34, 0x89, 0xe9, 0xe4,
	0xfb, 0x4d, 0x7d, 0x0a, 0x3d, 0x85, 0x7a, 0x5a, 0x94, 0x0d, 0x52, 0x56, 0x28, 0x23, 0x0e, 0xa8,
	0x71, 0x27, 0x5f, 0x47, 0x3e, 0xe4, 0x01, 0x20, 0x61, 0xfb, 0x86, 0x79, 0x83, 0x55, 0xca, 0x28,
	0xb9, 0xb0, 0x63, 0x54, 0x56, 0x6c, 0x16, 0xba, 0x71, 0xae, 0xc4, 0x01, 0xd2, 0x3b, 0xe7, 0x94,
	0x2f, 0xf9, 0x51, 0xb4, 0x96, 0xd1, 0xca, 0x41, 0x63, 0x58, 0x4a, 0xca, 0x94, 0x8c, 0x94, 0x7d,
	0x97, 0x92, 0xa4, 0xb9, 0xf1, 0xc9, 0xf1, 0x9d, 0xf8, 0x30, 0xdf, 0x08, 0xb2, 0x24, 0xca, 0x19,
	0x75, 0x23, 0x1c, 0x9e, 0x94, 0x16, 0x39, 0xc2, 0xe1, 0x29, 0x49, 0x79, 0xf5, 0x29, 0xd4, 0x87,
	0x05, 0x25, 0x9f, 0xa9, 0x87, 0xee, 0x24, 0xa4, 0xb0, 0x4e, 0xc9, 0x43, 0xdb, 0xf8, 0x6c, 0xee,
	0xbe, 0xca, 0xe9, 0xad, 0x86, 0x12, 0xc4, 0x4e, 0xef, 0x58, 0x84, 0x44, 0xec, 0xf4, 0x4e, 0x8a,
	0x45, 0x90, 0xe4, 0x81, 0x7a, 0x01, 0x18, 0x97, 0x07, 0xd1, 0xab, 0xcb, 0x04, 0x79, 0x90, 0x70,
	0xdf, 0xa8, 0x4f, 0xa1, 0xaf, 0x11, 0x0b, 0xc5, 0xb4, 0x9d, 0x13, 0x96, 0x7b, 0x8c, 0xe5, 0xff,
	0x54, 0x65, 0x66, 0x2c, 0xd1, 0xa8, 0x3a, 0xf9, 0x94, 0x3c, 0xa4, 0xfa, 0x14, 0xfa, 0x37, 0xd4,
	0xeb, 0x3f, 0x0e, 0x7c, 0x2c, 0xef, 0xa8, 0x0a, 0x3e, 0x25, 0x2d, 0xa9, 0x3e, 0x85, 0xbe, 0x0a,
	0xb3, 0xdc, 0x8c, 0xa1, 0x6e, 0x18, 0x45, 0xa5, 0x51, 0x73, 0x8f, 0xaa, 0x9a, 0x47, 0x2c, 0xe1,
	0xa7, 0x3e, 0x85, 0xde, 0x84, 0xa5, 0x20, 0x79, 0xa7, 0x0c, 0x74, 0x2d, 0x81, 0x1d, 0xe4, 0xf4,
	0x9e, 0xe3, 0x21, 0xb7, 0x43, 0x19, 0x10, 0xa6, 0xb5, 0x4c, 0xe0, 0xf7, 0x68, 0x2a, 0xce, 0x04,
	0x7e, 0x4f, 0xc8, 0x8c, 0x29, 0xb1, 0x88, 0x12, 0xf6, 0x9a, 0xc0, 0x22, 0xd1, 0x30, 0xdc, 0xc6,
	0x0b, 0xe3, 0xba, 0x04, 0x03, 0x04, 0x19, 0x28, 0x95, 0xd4, 0x97, 0xeb, 0xaa, 0xd2, 0x10, 0xcf,
	0x51, 0xd9, 0xb8, 0x35, 0xa6, 0x07, 0x1f, 0xe0, 0xb9, 0x08, 0x4c, 0x4a, 0x4a, 0xc2, 0x88, 0x92,
	0x2e, 0x89, 0x93, 0xf3, 0x46, 0x36, 0x5e, 0xcc, 0xdb, 0x35, 0xd4, 0x37, 0x23, 0x29, 0x08, 0x63,
	0xe6, 0x42, 0x14, 0xa5, 0x9b, 0x99, 0xed, 0x8a, 0xc9, 0x10, 0x49, 0x6d, 0x88, 0xb2, 0x3e, 0x4d,
	0x31, 0x19, 0x12, 0xb3, 0x23, 0xb2, 0x89, 0x47, 0xd2, 0x06, 0xaa, 0x13, 0x8f, 0x27, 0x30, 0x54,
	0x27, 0x9e, 0x98, 0x73, 0x50, 0x9f, 0x42, 0x5f, 0xa1, 0x8a, 0xf2, 0x86, 0x6d, 0x8b, 0x34, 0x82,
	0x91, 0xf9, 0x88, 0xec, 0x7f, 0x0d, 0x14, 0xd5, 0xc6, 0xb6, 0x3b, 0xfa, 0xd4, 0xcb, 0x1a, 0x7a,
	0x08, 0x0b, 0x2d, 0xae, 0x32, 0xb3, 0x0c, 0x65, 0xea, 0x69, 0xa7, 0xe4, 0x02, 0x54, 0x4f, 0xbb,
	0x68, 0xde, 0x3b, 0x7d, 0x0a, 0x85, 0x7f, 0xbd, 0x2c, 0x11, 0xd8, 0x6e, 0x3a, 0xb0, 0xdd, 0x38,
	0xb0, 0xd7, 0x89, 0xf1, 0xca, 0x79, 0x5c, 0x80, 0x5b, 0x89, 0x2b, 0x4d, 0x21, 0xc0, 0xd5, 0xf4,
	0x46, 0x0e, 0xf2, 0xdf, 0xc2, 0xa2, 0x9c, 0x2c, 0xa3, 0x85, 0x7d, 0xa4, 0xc7, 0x39, 0x3e, 0x9a,
	0xc7, 0xac, 0xf1, 0x89, 0xb1, 0x7d, 0x38, 0xfc, 0xb7, 0x45, 0xe2, 0xd5, 0x58, 0x5a, 0x2b, 0xf4,
	0x99, 0x31, 0x30, 0xe4, 0xac, 0x5b, 0x8d, 0xbb, 0xf9, 0x3b, 0x07, 0x92, 0x9b, 0x3f, 0x17, 0x56,
	0x3b, 0xa2, 0xb5, 0xb8, 0x9e, 0xa8, 0xe2, 0xa6, 0x67, 0x77, 0x08, 0x94, 0xf4, 0x4b, 0xb1, 0x8c,
	0x47, 0xb1, 0x33, 0x33, 0x96, 0x92, 0xa9, 0x91, 0xf1, 0x20, 0x90, 0x6d, 0xba, 0x78, 0xea, 0x12,
	0x75, 0xd3, 0x25, 0x26, 0x90, 0x51, 0x37, 0x5d, 0x5a, 0x6a, 0x17, 0x66, 0x05, 0x24, 0xe6, 0x46,
	0x41, 0x63, 0x00, 0xf0, 0xbd, 0xfd, 0xa9, 0x1c, 0xbd, 0x42, 0x55, 0x35, 0x2d, 0x8f, 0x89, 0xaa,
	0xaa, 0x66, 0x64, 0x50, 0x51, 0x55, 0xd5, 0xec, 0xb4, 0x28, 0x0c, 0xb9, 0xc4, 0x2c, 0x22, 0x2a,
	0x72, 0x69, 0x79, 0x4f, 0x54, 0xe4, 0x32, 0xd2, 0x91, 0x50, 0x1d, 0xb6, 0x16, 0x4d, 0xf9, 0xa1,
	0xf2, 0x55, 0x42, 0xe6, 0x11, 0x95, 0xaf, 0x92, 0x33, 0x86, 0xe8, 0x53, 0xe8, 0x18, 0x2e, 0x27,
	0x64, 0x91, 0x48, 0xd8, 0x94, 0xb1, 0x7c, 0x1a, 0x09, 0x9b, 0x32, 0x29, 0x15, 0x85, 0x3e, 0x85,
	0xce, 0xe5, 0x9b, 0x65, 0xde, 0xce, 0x7d, 0xbc, 0xea, 0xae, 0x1c, 0x93, 0x7c, 0x42, 0xdd, 0x95,
	0xe3, 0xf3, 0x40, 0x50, 0xb6, 0xb8, 0x12, 0xeb, 0x47, 0xf3, 0x26, 0xa0, 0xdb, 0xe3, 0x60, 0x89,
	0xbc, 0x0f, 0x8d, 0xcf, 0xe4, 0xec, 0xc9, 0x87, 0xfc, 0xf7, 0x49, 0x59, 0x15, 0x82, 0x8c, 0x04,
	0xfc, 0x05, 0xe2, 0x8b, 0xe3, 0x60, 0xca, 0x39, 0x18, 0x1a, 0x2f, 0x7d, 0x88, 0xde, 0xa1, 0x8e,
	0x1d, 0x1a, 0xad, 0xbc, 0x63, 0x92, 0xcd, 0xaa, 0x26, 0x37, 0x88, 0xe9, 0x91, 0x49, 0x29, 0x08,
	0x82, 0xd3, 0x3a, 0xf2, 0xdc, 0x3a, 0x76, 0x5a, 0xc7, 0x9f, 0x79, 0xc7, 0x4e, 0xeb, 0xc4, 0x17,
	0xdb, 0x81, 0x89, 0xa0, 0xbe, 0x7d, 0x8e, 0x89, 0xbb, 0xd8, 0xc3, 0xea, 0x98, 0x89, 0x90, 0xf4,
	0x78, 0x5a, 0x9f, 0x42, 0x3e, 0x5c, 0x4b, 0x7d, 0x70, 0xac, 0x32, 0x46, 0xd6, 0x63, 0x67, 0x95,
	0x31, 0xc6, 0xbc, 0x60, 0x66, 0x5b, 0x2d, 0xe1, 0x0d, 0x31, 0x8a, 0xee, 0xd3, 0x84, 0xf7, 0xca,
	0xea, 0x56, 0x4b, 0x7d, 0x88, 0xac, 0x4f, 0xa1, 0x33, 0xe9, 0xc9, 0xb3, 0x82, 0x3c, 0x4a, 0x06,
	0x11, 0x7d, 0x73, 0xda, 0xb8, 0x9d, 0xa7, 0x5b, 0x28, 0x73, 0xd3, 0x9e, 0xa1, 0xaa, 0x32, 0x37,
	0xe3, 0x91, 0x6b, 0xe3, 0x4e, 0xbe, 0x8e, 0xa1, 0x01, 0x23, 0xbd, 0x9f, 0x54, 0x0d, 0x18, 0xf5,
	0xb1, 0xa7, 0x6a, 0x66, 0xc4, 0x1e, 0x5d, 0x52, 0x77, 0x1f, 0x84, 0xaf, 0x18, 0x63, 0x2e, 0x06,
	0x09, 0xd2, 0xf5, 0xb4, 0xa6, 0x70, 0x52, 0xd2, 0x0b, 0xc3, 0x44, 0x47, 0x31, 0x7f, 0xde, 0x98,
	0xe8, 0xcf, 0x0d, 0x9f, 0x25, 0x06, 0x8c, 0xaf, 0x3e, 0x37, 0x88, 0x31, 0x7e, 0xec, 0xcd, 0x45,
	0x8c, 0xf1, 0x93, 0xde, 0x2b, 0x30, 0x8f, 0x45, 0xd2, 0x7b, 0x06, 0x94, 0xe0, 0x67, 0x8d, 0x8f,
	0xf1, 0xc9, 0xf1, 0x9d, 0xa2, 0xbb, 0x57, 0x0a, 0x2e, 0x4f, 0xda, 0xbd, 0x6a, 0x0c, 0x7c, 0xd2,
	0xee, 0x8d, 0x45, 0xa7, 0xb3, 0x75, 0x0b, 0x23, 0xa8, 0x63, 0xfa, 0x6d, 0x18, 0xa8, 0x1d, 0xd3,
	0x6f, 0x95, 0xa0, 0x6b, 0xe6, 0xe3, 0x96, 0x23, 0x68, 0x93, 0x5c, 0xb4, 0x41, 0xe4, 0x6f, 0x92,
	0xb7, 0x4c, 0x0e, 0xbc, 0x0d, 0x4d, 0x23, 0x29, 0x2e, 0x35, 0x6e, 0x1a, 0xa9, 0x81, 0xb5, 0x71,
	0xd3, 0x28, 0x16, 0xd4, 0x1a, 0xf5, 0x9d, 0x8b, 0xa8, 0xa8, 0x14, 0xdf, 0x79, 0x18, 0x69, 0x95,
	0xe6, 0x3b, 0x57, 0x82, 0xa3, 0xa2, 0x17, 0x08, 0x2c, 0x76, 0x69, 0x35, 0xf9, 0x4b, 0x11, 0x09,
	0x95, 0x76, 0x81, 0x20, 0x05, 0x30, 0xb1, 0x23, 0x22, 0x1e, 0x4e, 0x86, 0x52, 0x3e, 0x95, 0x42,
	0xe1, 0xd4, 0x23, 0x22, 0x2d, 0x22, 0x4d, 0xb8, 0xad, 0xe5, 0x18, 0xa3, 0xa8, 0xdb, 0x3a, 0x12,
	0x0c, 0x15, 0x75, 0x5b, 0xc7, 0xc3, 0x93, 0x18, 0x4b, 0xc8, 0xd1, 0x3f, 0x2a, 0x4b, 0x44, 0x42,
	0x91, 0x54, 0x96, 0x88, 0x07, 0x0d, 0xe9, 0x53, 0xe8, 0x10, 0xe6, 0x95, 0x10, 0x0e, 0xd5, 0xe7,
	0x18, 0x8d, 0x1f, 0x51, 0x7d, 0x8e, 0x09, 0xb1, 0x1f, 0xc1, 0xc9, 0x1b, 0x89, 0x12, 0x8a, 0x9d,
	0xbc, 0xf1, 0xc0, 0xa3, 0xd8, 0xc9, 0x9b, 0x18, 0x68, 0xc4, 0x44, 0x44, 0x52, 0x0c, 0x08, 0x4a,
	0xd0, 0x0c, 0x62, 0x01, 0x25, 0xaa, 0x88, 0x48, 0x0f, 0x25, 0x61, 0x4c, 0x1d, 0x8b, 0xf6, 0x88,
	0xb8, 0x47, 0x12, 0x62, 0x47, 0x22, 0xee, 0x91, 0xe4, 0x70, 0x11, 0x46, 0xa5, 0x78, 0xbc, 0x29,
	0xba, 0x39, 0x2e, 0x1e, 0x35, 0x42, 0xa5, 0xb4, 0x90, 0x55, 0x79, 0x4f, 0x4a, 0xe1, 0xbe, 0x49,
	0x7b, 0x52, 0x0d, 0x4b, 0x4e, 0xda, 0x93, 0xb1, 0x78, 0x61, 0xce, 0xda, 0x4a, 0x10, 0x77, 0x84,
	0xb5, 0xa3, 0x41, 0xea, 0x11, 0xd6, 0x4e, 0x88, 0xff, 0xd6, 0xa7, 0x36, 0xe7, 0xfe, 0xf2, 0xf7,
	0xab, 0xda, 0xdf, 0xfc, 0x7e, 0x55, 0xfb, 0xfb, 0xdf, 0xaf, 0x6a, 0xc7, 0xd3, 0x34, 0xb4, 0xfc,
	0x95, 0x7f, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x23, 0xdf, 0x5e, 0xcb, 0x40, 0x83, 0x00, 0x00,
}
