//协议文件用途:  操作和获取用户基础信息和用户的联系人信息、黑名单列表信息
//作者：lxl
//日期: 2017/6/22
//版本：0.0.1
//修改日期：
//修改日志：

// protoc --gogofast_out=plugins=grpc:. ./gitlab.chatserver.im/interfaceprobuf/iminterfaceprotobufs/infoserver/userserver.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: userserver.proto

package infoserver

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	pbcomm "interfaceprobuf/iminterfaceprotobufs/infoserver/pbcomm"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReErrCode int32

const (
	ReErrCode_Success          ReErrCode = 0  //成功
	ReErrCode_DBError          ReErrCode = 1  //数据库错误
	ReErrCode_InternalError    ReErrCode = 2  //内部其他错误
	ReErrCode_NotExist         ReErrCode = 3  //用户不存在
	ReErrCode_UserNameOccupied ReErrCode = 4  //用户名已占用
	ReErrCode_Register         ReErrCode = 5  //已经注册
	ReErrCode_Unregister       ReErrCode = 6  //用户注册
	ReErrCode_NotModify        ReErrCode = 7  //联系人没有变化
	ReErrCode_Blocked          ReErrCode = 8  //是黑名单
	ReErrCode_UnBlocked        ReErrCode = 9  //不是黑明单
	ReErrCode_Valid            ReErrCode = 10 //隐私选项等可用的返回
	ReErrCode_UnValid          ReErrCode = 11 //隐私选项校验失败的情况
	ReErrCode_Failed           ReErrCode = 12 //失败
	ReErrCode_HashNotSuccess   ReErrCode = 13 //用户哈希值不合法
	ReErrCode_UsernameNotEmpty ReErrCode = 14 // user already has username
	ReErrCode_VipOnly          ReErrCode = 15
)

// Enum value maps for ReErrCode.
var (
	ReErrCode_name = map[int32]string{
		0:  "Success",
		1:  "DBError",
		2:  "InternalError",
		3:  "NotExist",
		4:  "UserNameOccupied",
		5:  "Register",
		6:  "Unregister",
		7:  "NotModify",
		8:  "Blocked",
		9:  "UnBlocked",
		10: "Valid",
		11: "UnValid",
		12: "Failed",
		13: "HashNotSuccess",
		14: "UsernameNotEmpty",
		15: "VipOnly",
	}
	ReErrCode_value = map[string]int32{
		"Success":          0,
		"DBError":          1,
		"InternalError":    2,
		"NotExist":         3,
		"UserNameOccupied": 4,
		"Register":         5,
		"Unregister":       6,
		"NotModify":        7,
		"Blocked":          8,
		"UnBlocked":        9,
		"Valid":            10,
		"UnValid":          11,
		"Failed":           12,
		"HashNotSuccess":   13,
		"UsernameNotEmpty": 14,
		"VipOnly":          15,
	}
)

func (x ReErrCode) Enum() *ReErrCode {
	p := new(ReErrCode)
	*p = x
	return p
}

func (x ReErrCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReErrCode) Descriptor() protoreflect.EnumDescriptor {
	return file_userserver_proto_enumTypes[0].Descriptor()
}

func (ReErrCode) Type() protoreflect.EnumType {
	return &file_userserver_proto_enumTypes[0]
}

func (x ReErrCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReErrCode.Descriptor instead.
func (ReErrCode) EnumDescriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{0}
}

// user switch type
type Switch int32

const (
	Switch_Unused             Switch = 0
	Switch_UsernameSearch     Switch = 1
	Switch_UnreadIncludeMuted Switch = 2
	Switch_DisableMultiSignIn Switch = 3
)

// Enum value maps for Switch.
var (
	Switch_name = map[int32]string{
		0: "Unused",
		1: "UsernameSearch",
		2: "UnreadIncludeMuted",
		3: "DisableMultiSignIn",
	}
	Switch_value = map[string]int32{
		"Unused":             0,
		"UsernameSearch":     1,
		"UnreadIncludeMuted": 2,
		"DisableMultiSignIn": 3,
	}
)

func (x Switch) Enum() *Switch {
	p := new(Switch)
	*p = x
	return p
}

func (x Switch) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Switch) Descriptor() protoreflect.EnumDescriptor {
	return file_userserver_proto_enumTypes[1].Descriptor()
}

func (Switch) Type() protoreflect.EnumType {
	return &file_userserver_proto_enumTypes[1]
}

func (x Switch) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Switch.Descriptor instead.
func (Switch) EnumDescriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{1}
}

type UpdateSwitchResult_ResultCode int32

const (
	UpdateSwitchResult_Success       UpdateSwitchResult_ResultCode = 0
	UpdateSwitchResult_InternalError UpdateSwitchResult_ResultCode = 1
)

// Enum value maps for UpdateSwitchResult_ResultCode.
var (
	UpdateSwitchResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	UpdateSwitchResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x UpdateSwitchResult_ResultCode) Enum() *UpdateSwitchResult_ResultCode {
	p := new(UpdateSwitchResult_ResultCode)
	*p = x
	return p
}

func (x UpdateSwitchResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateSwitchResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_userserver_proto_enumTypes[2].Descriptor()
}

func (UpdateSwitchResult_ResultCode) Type() protoreflect.EnumType {
	return &file_userserver_proto_enumTypes[2]
}

func (x UpdateSwitchResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateSwitchResult_ResultCode.Descriptor instead.
func (UpdateSwitchResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{157, 0}
}

type GetSwitchStatusResult_ResultCode int32

const (
	GetSwitchStatusResult_Success       GetSwitchStatusResult_ResultCode = 0
	GetSwitchStatusResult_InternalError GetSwitchStatusResult_ResultCode = 1
)

// Enum value maps for GetSwitchStatusResult_ResultCode.
var (
	GetSwitchStatusResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	GetSwitchStatusResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x GetSwitchStatusResult_ResultCode) Enum() *GetSwitchStatusResult_ResultCode {
	p := new(GetSwitchStatusResult_ResultCode)
	*p = x
	return p
}

func (x GetSwitchStatusResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetSwitchStatusResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_userserver_proto_enumTypes[3].Descriptor()
}

func (GetSwitchStatusResult_ResultCode) Type() protoreflect.EnumType {
	return &file_userserver_proto_enumTypes[3]
}

func (x GetSwitchStatusResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetSwitchStatusResult_ResultCode.Descriptor instead.
func (GetSwitchStatusResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{159, 0}
}

type DeleteUserUsernameResult_Code int32

const (
	DeleteUserUsernameResult_Success          DeleteUserUsernameResult_Code = 0
	DeleteUserUsernameResult_PermissionDenied DeleteUserUsernameResult_Code = 1 // 权限不够
	DeleteUserUsernameResult_UsernameNotExist DeleteUserUsernameResult_Code = 2 // 用户名不存在
	DeleteUserUsernameResult_InvalidUsername  DeleteUserUsernameResult_Code = 3 // 无效的用户名
	DeleteUserUsernameResult_UserIsBot        DeleteUserUsernameResult_Code = 4 // 用户为bot
	DeleteUserUsernameResult_UsernameOccupied DeleteUserUsernameResult_Code = 5 // 用户名使用中，需要设置force_delete强制删除
	DeleteUserUsernameResult_InternalError    DeleteUserUsernameResult_Code = 6 // 内部错误，错误信息保存在internal_error_message字段
)

// Enum value maps for DeleteUserUsernameResult_Code.
var (
	DeleteUserUsernameResult_Code_name = map[int32]string{
		0: "Success",
		1: "PermissionDenied",
		2: "UsernameNotExist",
		3: "InvalidUsername",
		4: "UserIsBot",
		5: "UsernameOccupied",
		6: "InternalError",
	}
	DeleteUserUsernameResult_Code_value = map[string]int32{
		"Success":          0,
		"PermissionDenied": 1,
		"UsernameNotExist": 2,
		"InvalidUsername":  3,
		"UserIsBot":        4,
		"UsernameOccupied": 5,
		"InternalError":    6,
	}
)

func (x DeleteUserUsernameResult_Code) Enum() *DeleteUserUsernameResult_Code {
	p := new(DeleteUserUsernameResult_Code)
	*p = x
	return p
}

func (x DeleteUserUsernameResult_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeleteUserUsernameResult_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_userserver_proto_enumTypes[4].Descriptor()
}

func (DeleteUserUsernameResult_Code) Type() protoreflect.EnumType {
	return &file_userserver_proto_enumTypes[4]
}

func (x DeleteUserUsernameResult_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeleteUserUsernameResult_Code.Descriptor instead.
func (DeleteUserUsernameResult_Code) EnumDescriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{165, 0}
}

// 根据用户id获取用户ID
type GetUserInfoByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"` //自己的用户ＩＤ
	UserId int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //需要获取的用户ID
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetUserInfoByIdReq) Reset() {
	*x = GetUserInfoByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoByIdReq) ProtoMessage() {}

func (x *GetUserInfoByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoByIdReq.ProtoReflect.Descriptor instead.
func (*GetUserInfoByIdReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{0}
}

func (x *GetUserInfoByIdReq) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *GetUserInfoByIdReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetUserInfoByIdReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type GetUserInfoByIdArrReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId  int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`           //自己的用户ＩＤ
	UserIds []int32       `protobuf:"varint,2,rep,packed,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"` //需要获取的用户ID
	Debug   *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetUserInfoByIdArrReq) Reset() {
	*x = GetUserInfoByIdArrReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoByIdArrReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoByIdArrReq) ProtoMessage() {}

func (x *GetUserInfoByIdArrReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoByIdArrReq.ProtoReflect.Descriptor instead.
func (*GetUserInfoByIdArrReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{1}
}

func (x *GetUserInfoByIdArrReq) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *GetUserInfoByIdArrReq) GetUserIds() []int32 {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *GetUserInfoByIdArrReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 用户信息数组
type UserInfoArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userin []*UserInfo `protobuf:"bytes,1,rep,name=userin,proto3" json:"userin,omitempty"`
}

func (x *UserInfoArray) Reset() {
	*x = UserInfoArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoArray) ProtoMessage() {}

func (x *UserInfoArray) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoArray.ProtoReflect.Descriptor instead.
func (*UserInfoArray) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{2}
}

func (x *UserInfoArray) GetUserin() []*UserInfo {
	if x != nil {
		return x.Userin
	}
	return nil
}

// 查询出来的用户基础信息（self 、contact、 mutual_contact 需要在逻辑中判断 ）
type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId               int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户的id
	AccessHash           int64  `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	FirstName            string `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName             string `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Username             string `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	Phone                string `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`                                                              //用户的电话号码
	Status               int32  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`                                                           //是否在线的标识	0 代表不在线 1代表在线
	LastLogout           int32  `protobuf:"varint,8,opt,name=last_logout,json=lastLogout,proto3" json:"last_logout,omitempty"`                                 //最后在线时间
	ClusterRegion        int32  `protobuf:"varint,9,opt,name=cluster_region,json=clusterRegion,proto3" json:"cluster_region,omitempty"`                        // 用户所在的dc
	FontRgb              string `protobuf:"bytes,10,opt,name=font_rgb,json=fontRgb,proto3" json:"font_rgb,omitempty"`                                          //用户的特色字体颜色（扩展使用） {0,0,0}
	CountryCode          string `protobuf:"bytes,11,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`                              //用户的国家码
	Photo                string `protobuf:"bytes,12,opt,name=photo,proto3" json:"photo,omitempty"`                                                             //用户头像为json格式
	BotInfoVersion       int32  `protobuf:"varint,13,opt,name=bot_info_version,json=botInfoVersion,proto3" json:"bot_info_version,omitempty"`                  //机器人version
	BotInlinePlaceholder string `protobuf:"bytes,14,opt,name=bot_inline_placeholder,json=botInlinePlaceholder,proto3" json:"bot_inline_placeholder,omitempty"` //机器人相关
	RestrictionReason    string `protobuf:"bytes,15,opt,name=restriction_reason,json=restrictionReason,proto3" json:"restriction_reason,omitempty"`
	LangCode             string `protobuf:"bytes,16,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"` //国家语言代码
	LocalPhone           string `protobuf:"bytes,17,opt,name=local_phone,json=localPhone,proto3" json:"local_phone,omitempty"`
	Deleted              bool   `protobuf:"varint,18,opt,name=deleted,proto3" json:"deleted,omitempty"`
	Bot                  bool   `protobuf:"varint,19,opt,name=bot,proto3" json:"bot,omitempty"`
	BotChatHistory       bool   `protobuf:"varint,20,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNochats           bool   `protobuf:"varint,21,opt,name=bot_nochats,json=botNochats,proto3" json:"bot_nochats,omitempty"`
	Verified             bool   `protobuf:"varint,22,opt,name=verified,proto3" json:"verified,omitempty"`
	Restricted           bool   `protobuf:"varint,23,opt,name=restricted,proto3" json:"restricted,omitempty"`
	Min                  bool   `protobuf:"varint,24,opt,name=min,proto3" json:"min,omitempty"`
	BotInlineGeo         bool   `protobuf:"varint,25,opt,name=bot_inline_geo,json=botInlineGeo,proto3" json:"bot_inline_geo,omitempty"`
	Self                 bool   `protobuf:"varint,26,opt,name=self,proto3" json:"self,omitempty"`                                                   //是否是自己
	Contact              bool   `protobuf:"varint,27,opt,name=contact,proto3" json:"contact,omitempty"`                                             //是否是自己联系人
	MutalContact         bool   `protobuf:"varint,28,opt,name=mutal_contact,json=mutalContact,proto3" json:"mutal_contact,omitempty"`               //是否是双向联系人
	StarMark             bool   `protobuf:"varint,29,opt,name=star_mark,json=starMark,proto3" json:"star_mark,omitempty"`                           // 是否星标联系人
	ShowContactPhone     bool   `protobuf:"varint,30,opt,name=show_contact_phone,json=showContactPhone,proto3" json:"show_contact_phone,omitempty"` //是否显示联系人手机
	GroupId              int32  `protobuf:"varint,31,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`                              // 组
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{3}
}

func (x *UserInfo) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserInfo) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *UserInfo) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *UserInfo) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *UserInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserInfo) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UserInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserInfo) GetLastLogout() int32 {
	if x != nil {
		return x.LastLogout
	}
	return 0
}

func (x *UserInfo) GetClusterRegion() int32 {
	if x != nil {
		return x.ClusterRegion
	}
	return 0
}

func (x *UserInfo) GetFontRgb() string {
	if x != nil {
		return x.FontRgb
	}
	return ""
}

func (x *UserInfo) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *UserInfo) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

func (x *UserInfo) GetBotInfoVersion() int32 {
	if x != nil {
		return x.BotInfoVersion
	}
	return 0
}

func (x *UserInfo) GetBotInlinePlaceholder() string {
	if x != nil {
		return x.BotInlinePlaceholder
	}
	return ""
}

func (x *UserInfo) GetRestrictionReason() string {
	if x != nil {
		return x.RestrictionReason
	}
	return ""
}

func (x *UserInfo) GetLangCode() string {
	if x != nil {
		return x.LangCode
	}
	return ""
}

func (x *UserInfo) GetLocalPhone() string {
	if x != nil {
		return x.LocalPhone
	}
	return ""
}

func (x *UserInfo) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *UserInfo) GetBot() bool {
	if x != nil {
		return x.Bot
	}
	return false
}

func (x *UserInfo) GetBotChatHistory() bool {
	if x != nil {
		return x.BotChatHistory
	}
	return false
}

func (x *UserInfo) GetBotNochats() bool {
	if x != nil {
		return x.BotNochats
	}
	return false
}

func (x *UserInfo) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *UserInfo) GetRestricted() bool {
	if x != nil {
		return x.Restricted
	}
	return false
}

func (x *UserInfo) GetMin() bool {
	if x != nil {
		return x.Min
	}
	return false
}

func (x *UserInfo) GetBotInlineGeo() bool {
	if x != nil {
		return x.BotInlineGeo
	}
	return false
}

func (x *UserInfo) GetSelf() bool {
	if x != nil {
		return x.Self
	}
	return false
}

func (x *UserInfo) GetContact() bool {
	if x != nil {
		return x.Contact
	}
	return false
}

func (x *UserInfo) GetMutalContact() bool {
	if x != nil {
		return x.MutalContact
	}
	return false
}

func (x *UserInfo) GetStarMark() bool {
	if x != nil {
		return x.StarMark
	}
	return false
}

func (x *UserInfo) GetShowContactPhone() bool {
	if x != nil {
		return x.ShowContactPhone
	}
	return false
}

func (x *UserInfo) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

// 根据用户id获取用户销毁时间
type GetUserExpireByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //需要获取的用户ID
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetUserExpireByIdReq) Reset() {
	*x = GetUserExpireByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserExpireByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserExpireByIdReq) ProtoMessage() {}

func (x *GetUserExpireByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserExpireByIdReq.ProtoReflect.Descriptor instead.
func (*GetUserExpireByIdReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{4}
}

func (x *GetUserExpireByIdReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetUserExpireByIdReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 获取用户账号销毁时间返回
type GetUserExpireByIdResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expire    int32     `protobuf:"varint,1,opt,name=expire,proto3" json:"expire,omitempty"`                                 //账号销毁时间
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *GetUserExpireByIdResult) Reset() {
	*x = GetUserExpireByIdResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserExpireByIdResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserExpireByIdResult) ProtoMessage() {}

func (x *GetUserExpireByIdResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserExpireByIdResult.ProtoReflect.Descriptor instead.
func (*GetUserExpireByIdResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{5}
}

func (x *GetUserExpireByIdResult) GetExpire() int32 {
	if x != nil {
		return x.Expire
	}
	return 0
}

func (x *GetUserExpireByIdResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 根据用户电话号码来获取用户信息
type GetUserByphone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone string        `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	Debug *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetUserByphone) Reset() {
	*x = GetUserByphone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserByphone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserByphone) ProtoMessage() {}

func (x *GetUserByphone) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserByphone.ProtoReflect.Descriptor instead.
func (*GetUserByphone) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{6}
}

func (x *GetUserByphone) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *GetUserByphone) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 获取用户基本信息的返回结果
type GetUserInfoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uinfo     *UserInfo `protobuf:"bytes,1,opt,name=Uinfo,proto3" json:"Uinfo,omitempty"`                                    ///用户的基本信息
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *GetUserInfoResult) Reset() {
	*x = GetUserInfoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoResult) ProtoMessage() {}

func (x *GetUserInfoResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoResult.ProtoReflect.Descriptor instead.
func (*GetUserInfoResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{7}
}

func (x *GetUserInfoResult) GetUinfo() *UserInfo {
	if x != nil {
		return x.Uinfo
	}
	return nil
}

func (x *GetUserInfoResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

type GetUserInfoByIdArrResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uinfo     []*UserInfo `protobuf:"bytes,1,rep,name=Uinfo,proto3" json:"Uinfo,omitempty"`                                    ///用户的基本信息
	Errorcode ReErrCode   `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *GetUserInfoByIdArrResult) Reset() {
	*x = GetUserInfoByIdArrResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoByIdArrResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoByIdArrResult) ProtoMessage() {}

func (x *GetUserInfoByIdArrResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoByIdArrResult.ProtoReflect.Descriptor instead.
func (*GetUserInfoByIdArrResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{8}
}

func (x *GetUserInfoByIdArrResult) GetUinfo() []*UserInfo {
	if x != nil {
		return x.Uinfo
	}
	return nil
}

func (x *GetUserInfoByIdArrResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 根据用户userName来获取用户基本信息
type GetUserByUsername struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId   int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	Username string        `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Debug    *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetUserByUsername) Reset() {
	*x = GetUserByUsername{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserByUsername) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserByUsername) ProtoMessage() {}

func (x *GetUserByUsername) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserByUsername.ProtoReflect.Descriptor instead.
func (*GetUserByUsername) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{9}
}

func (x *GetUserByUsername) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *GetUserByUsername) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GetUserByUsername) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 更新用户头像请求
type UpdatePhotoInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户ID
	Photo  string        `protobuf:"bytes,2,opt,name=photo,proto3" json:"photo,omitempty"`                  //用户头像的json格式
	KeyId  int64         `protobuf:"varint,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UpdatePhotoInfoReq) Reset() {
	*x = UpdatePhotoInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePhotoInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePhotoInfoReq) ProtoMessage() {}

func (x *UpdatePhotoInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePhotoInfoReq.ProtoReflect.Descriptor instead.
func (*UpdatePhotoInfoReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{10}
}

func (x *UpdatePhotoInfoReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdatePhotoInfoReq) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

func (x *UpdatePhotoInfoReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *UpdatePhotoInfoReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type GetPhotoInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户ID
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetPhotoInfoReq) Reset() {
	*x = GetPhotoInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPhotoInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPhotoInfoReq) ProtoMessage() {}

func (x *GetPhotoInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPhotoInfoReq.ProtoReflect.Descriptor instead.
func (*GetPhotoInfoReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{11}
}

func (x *GetPhotoInfoReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetPhotoInfoReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 更新用户头像的返回
type UpdateUserPhotoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *UpdateUserPhotoResult) Reset() {
	*x = UpdateUserPhotoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserPhotoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserPhotoResult) ProtoMessage() {}

func (x *UpdateUserPhotoResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserPhotoResult.ProtoReflect.Descriptor instead.
func (*UpdateUserPhotoResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateUserPhotoResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

type GetUserPhotoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Photo     string    `protobuf:"bytes,1,opt,name=Photo,proto3" json:"Photo,omitempty"`                                    //json photo
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *GetUserPhotoResult) Reset() {
	*x = GetUserPhotoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserPhotoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserPhotoResult) ProtoMessage() {}

func (x *GetUserPhotoResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserPhotoResult.ProtoReflect.Descriptor instead.
func (*GetUserPhotoResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{13}
}

func (x *GetUserPhotoResult) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

func (x *GetUserPhotoResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 更新用户信息
type UpdateUserProfileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户ID
	Flags     int32         `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`                 // flags 第0 位 为更新firstName 第一位 last_name 第二位为 about
	FirstName string        `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string        `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	About     string        `protobuf:"bytes,5,opt,name=about,proto3" json:"about,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UpdateUserProfileReq) Reset() {
	*x = UpdateUserProfileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserProfileReq) ProtoMessage() {}

func (x *UpdateUserProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserProfileReq.ProtoReflect.Descriptor instead.
func (*UpdateUserProfileReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateUserProfileReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserProfileReq) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *UpdateUserProfileReq) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *UpdateUserProfileReq) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *UpdateUserProfileReq) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *UpdateUserProfileReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 更新用户昵称等的返回结果
type UpdateUserProfileResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uinfo     *UserInfo `protobuf:"bytes,1,opt,name=Uinfo,proto3" json:"Uinfo,omitempty"`                                    //用户基本信息
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *UpdateUserProfileResult) Reset() {
	*x = UpdateUserProfileResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserProfileResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserProfileResult) ProtoMessage() {}

func (x *UpdateUserProfileResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserProfileResult.ProtoReflect.Descriptor instead.
func (*UpdateUserProfileResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateUserProfileResult) GetUinfo() *UserInfo {
	if x != nil {
		return x.Uinfo
	}
	return nil
}

func (x *UpdateUserProfileResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 用户在线状态的更新
type StatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId    int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"` //自己的用户ID
	KeyId     int64         `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`    //用户的key_ID(自己端的keyID )
	Status    bool          `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`               //是否在线 true代表在线，false代表离线
	Offline   int32         `protobuf:"varint,4,opt,name=offline,proto3" json:"offline,omitempty"`             //离线时间
	Longitude float64       `protobuf:"fixed64,5,opt,name=longitude,proto3" json:"longitude,omitempty"`        //地理坐标的经度
	Latitude  float64       `protobuf:"fixed64,6,opt,name=latitude,proto3" json:"latitude,omitempty"`          //地理坐标的纬度
	Debug     *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *StatusReq) Reset() {
	*x = StatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusReq) ProtoMessage() {}

func (x *StatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusReq.ProtoReflect.Descriptor instead.
func (*StatusReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{16}
}

func (x *StatusReq) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *StatusReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *StatusReq) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *StatusReq) GetOffline() int32 {
	if x != nil {
		return x.Offline
	}
	return 0
}

func (x *StatusReq) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *StatusReq) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *StatusReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 用户在线状态的结果
type StatusResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *StatusResult) Reset() {
	*x = StatusResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResult) ProtoMessage() {}

func (x *StatusResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResult.ProtoReflect.Descriptor instead.
func (*StatusResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{17}
}

func (x *StatusResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 用户销毁时间的设置
type UpdateExpireReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"` //自己的用户ID
	Expire int32         `protobuf:"varint,2,opt,name=expire,proto3" json:"expire,omitempty"`               // 销毁时间单位是天
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UpdateExpireReq) Reset() {
	*x = UpdateExpireReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateExpireReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExpireReq) ProtoMessage() {}

func (x *UpdateExpireReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExpireReq.ProtoReflect.Descriptor instead.
func (*UpdateExpireReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateExpireReq) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *UpdateExpireReq) GetExpire() int32 {
	if x != nil {
		return x.Expire
	}
	return 0
}

func (x *UpdateExpireReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 设置账号销毁时间的返回结果
type UpdateExpireResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *UpdateExpireResult) Reset() {
	*x = UpdateExpireResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateExpireResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExpireResult) ProtoMessage() {}

func (x *UpdateExpireResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExpireResult.ProtoReflect.Descriptor instead.
func (*UpdateExpireResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateExpireResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 用户dc的迁移
type UserClusterChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId    int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"` //自己的用户ID
	ClusterId int32         `protobuf:"varint,2,opt,name=clusterId,proto3" json:"clusterId,omitempty"`         // 目标DcID
	FromIp    string        `protobuf:"bytes,4,opt,name=from_ip,json=fromIp,proto3" json:"from_ip,omitempty"`  //迁移来自哪个IP
	FromId    int32         `protobuf:"varint,5,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"` //来自哪个用户
	Debug     *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UserClusterChange) Reset() {
	*x = UserClusterChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserClusterChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserClusterChange) ProtoMessage() {}

func (x *UserClusterChange) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserClusterChange.ProtoReflect.Descriptor instead.
func (*UserClusterChange) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{20}
}

func (x *UserClusterChange) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *UserClusterChange) GetClusterId() int32 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *UserClusterChange) GetFromIp() string {
	if x != nil {
		return x.FromIp
	}
	return ""
}

func (x *UserClusterChange) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *UserClusterChange) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 用户域的迁移结果
type UserClusterChangeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *UserClusterChangeResult) Reset() {
	*x = UserClusterChangeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserClusterChangeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserClusterChangeResult) ProtoMessage() {}

func (x *UserClusterChangeResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserClusterChangeResult.ProtoReflect.Descriptor instead.
func (*UserClusterChangeResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{21}
}

func (x *UserClusterChangeResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 更新用户的username的请求
type UpdateuserNameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户的ID
	UserName string        `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`            //需要更新的用户名
	Debug    *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
	KeyId    int64         `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *UpdateuserNameReq) Reset() {
	*x = UpdateuserNameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateuserNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateuserNameReq) ProtoMessage() {}

func (x *UpdateuserNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateuserNameReq.ProtoReflect.Descriptor instead.
func (*UpdateuserNameReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateuserNameReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateuserNameReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UpdateuserNameReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *UpdateuserNameReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

// 更新用户的username的返回结果
type UpdateuserNameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uinfo     *UserInfo `protobuf:"bytes,1,opt,name=Uinfo,proto3" json:"Uinfo,omitempty"`                                    ///用户的基本信息
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *UpdateuserNameResult) Reset() {
	*x = UpdateuserNameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateuserNameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateuserNameResult) ProtoMessage() {}

func (x *UpdateuserNameResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateuserNameResult.ProtoReflect.Descriptor instead.
func (*UpdateuserNameResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateuserNameResult) GetUinfo() *UserInfo {
	if x != nil {
		return x.Uinfo
	}
	return nil
}

func (x *UpdateuserNameResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 检查电话号码是否已经注册
type CheckPhoneRegisterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone string        `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"` //需要检查的电话号码(传没处理过的电话号码)
	Debug *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *CheckPhoneRegisterReq) Reset() {
	*x = CheckPhoneRegisterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckPhoneRegisterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPhoneRegisterReq) ProtoMessage() {}

func (x *CheckPhoneRegisterReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPhoneRegisterReq.ProtoReflect.Descriptor instead.
func (*CheckPhoneRegisterReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{24}
}

func (x *CheckPhoneRegisterReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *CheckPhoneRegisterReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 检查电话号码是否已经注册的返回结果
type CheckPhoneRegisterResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *CheckPhoneRegisterResult) Reset() {
	*x = CheckPhoneRegisterResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckPhoneRegisterResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPhoneRegisterResult) ProtoMessage() {}

func (x *CheckPhoneRegisterResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPhoneRegisterResult.ProtoReflect.Descriptor instead.
func (*CheckPhoneRegisterResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{25}
}

func (x *CheckPhoneRegisterResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 删除账号的请求
type DeleteAccountByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //被删除账号的用户id
	DelId  int32         `protobuf:"varint,2,opt,name=del_id,json=delId,proto3" json:"del_id,omitempty"`    //删除者的Id
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *DeleteAccountByIdReq) Reset() {
	*x = DeleteAccountByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAccountByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAccountByIdReq) ProtoMessage() {}

func (x *DeleteAccountByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAccountByIdReq.ProtoReflect.Descriptor instead.
func (*DeleteAccountByIdReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteAccountByIdReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DeleteAccountByIdReq) GetDelId() int32 {
	if x != nil {
		return x.DelId
	}
	return 0
}

func (x *DeleteAccountByIdReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 删除账号的返回结果
type DelAccountResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *DelAccountResult) Reset() {
	*x = DelAccountResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelAccountResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelAccountResult) ProtoMessage() {}

func (x *DelAccountResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelAccountResult.ProtoReflect.Descriptor instead.
func (*DelAccountResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{27}
}

func (x *DelAccountResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 机器人基础信息更改
type BotUpdateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BotInfoVersion int32         `protobuf:"varint,2,opt,name=bot_info_version,json=botInfoVersion,proto3" json:"bot_info_version,omitempty"`
	BotChatHistory bool          `protobuf:"varint,3,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNoChat      bool          `protobuf:"varint,4,opt,name=bot_no_chat,json=botNoChat,proto3" json:"bot_no_chat,omitempty"`
	Debug          *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *BotUpdateInfo) Reset() {
	*x = BotUpdateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BotUpdateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotUpdateInfo) ProtoMessage() {}

func (x *BotUpdateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotUpdateInfo.ProtoReflect.Descriptor instead.
func (*BotUpdateInfo) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{28}
}

func (x *BotUpdateInfo) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *BotUpdateInfo) GetBotInfoVersion() int32 {
	if x != nil {
		return x.BotInfoVersion
	}
	return 0
}

func (x *BotUpdateInfo) GetBotChatHistory() bool {
	if x != nil {
		return x.BotChatHistory
	}
	return false
}

func (x *BotUpdateInfo) GetBotNoChat() bool {
	if x != nil {
		return x.BotNoChat
	}
	return false
}

func (x *BotUpdateInfo) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 机器人更改信息的返回结果
type BotUpdateInfoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *BotUpdateInfoResult) Reset() {
	*x = BotUpdateInfoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BotUpdateInfoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotUpdateInfoResult) ProtoMessage() {}

func (x *BotUpdateInfoResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotUpdateInfoResult.ProtoReflect.Descriptor instead.
func (*BotUpdateInfoResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{29}
}

func (x *BotUpdateInfoResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 删除单个联系人的请求
type DelContactReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 联系人的基本信息
	UserId     int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //用户自己的id
	ContactId  int32         `protobuf:"varint,2,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"` //联系人的id
	AccessHash int64         `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	KeyId      int64         `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *DelContactReq) Reset() {
	*x = DelContactReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelContactReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelContactReq) ProtoMessage() {}

func (x *DelContactReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelContactReq.ProtoReflect.Descriptor instead.
func (*DelContactReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{30}
}

func (x *DelContactReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DelContactReq) GetContactId() int32 {
	if x != nil {
		return x.ContactId
	}
	return 0
}

func (x *DelContactReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *DelContactReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *DelContactReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 删除联系人的返回结果
type DelContactResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uinfo     *UserInfo `protobuf:"bytes,1,opt,name=Uinfo,proto3" json:"Uinfo,omitempty"`                                    ///用户的基本信息
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *DelContactResult) Reset() {
	*x = DelContactResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelContactResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelContactResult) ProtoMessage() {}

func (x *DelContactResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelContactResult.ProtoReflect.Descriptor instead.
func (*DelContactResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{31}
}

func (x *DelContactResult) GetUinfo() *UserInfo {
	if x != nil {
		return x.Uinfo
	}
	return nil
}

func (x *DelContactResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 需要删除联系人的信息
type ContactIdHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactId  int32 `protobuf:"varint,1,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`    //联系人的ID
	AccessHash int64 `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` //联系人的用户哈希值
}

func (x *ContactIdHash) Reset() {
	*x = ContactIdHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactIdHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactIdHash) ProtoMessage() {}

func (x *ContactIdHash) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactIdHash.ProtoReflect.Descriptor instead.
func (*ContactIdHash) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{32}
}

func (x *ContactIdHash) GetContactId() int32 {
	if x != nil {
		return x.ContactId
	}
	return 0
}

func (x *ContactIdHash) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

// 批量删除用户的联系人
type DelContactArrReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int32            `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户自己的id
	ContactidArr []*ContactIdHash `protobuf:"bytes,2,rep,name=contactidArr,proto3" json:"contactidArr,omitempty"`    //联系人的id数组
	KeyId        int64            `protobuf:"varint,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Debug        *pbcomm.Debug    `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *DelContactArrReq) Reset() {
	*x = DelContactArrReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelContactArrReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelContactArrReq) ProtoMessage() {}

func (x *DelContactArrReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelContactArrReq.ProtoReflect.Descriptor instead.
func (*DelContactArrReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{33}
}

func (x *DelContactArrReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DelContactArrReq) GetContactidArr() []*ContactIdHash {
	if x != nil {
		return x.ContactidArr
	}
	return nil
}

func (x *DelContactArrReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *DelContactArrReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 重置user联系人信息
type CmdResetUserContactsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AmdinId     int32  `protobuf:"varint,1,opt,name=amdin_id,json=amdinId,proto3" json:"amdin_id,omitempty"`            // 使用命令的人的id
	PhoneNumber string `protobuf:"bytes,2,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"` // 要重置联系人的电话号码
}

func (x *CmdResetUserContactsReq) Reset() {
	*x = CmdResetUserContactsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdResetUserContactsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdResetUserContactsReq) ProtoMessage() {}

func (x *CmdResetUserContactsReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdResetUserContactsReq.ProtoReflect.Descriptor instead.
func (*CmdResetUserContactsReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{34}
}

func (x *CmdResetUserContactsReq) GetAmdinId() int32 {
	if x != nil {
		return x.AmdinId
	}
	return 0
}

func (x *CmdResetUserContactsReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

type CmdResetUserContactsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentContactIds []int32 `protobuf:"varint,1,rep,packed,name=current_contact_ids,json=currentContactIds,proto3" json:"current_contact_ids,omitempty"` // 操作成功后当前的联系人id列表
}

func (x *CmdResetUserContactsResult) Reset() {
	*x = CmdResetUserContactsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdResetUserContactsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdResetUserContactsResult) ProtoMessage() {}

func (x *CmdResetUserContactsResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdResetUserContactsResult.ProtoReflect.Descriptor instead.
func (*CmdResetUserContactsResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{35}
}

func (x *CmdResetUserContactsResult) GetCurrentContactIds() []int32 {
	if x != nil {
		return x.CurrentContactIds
	}
	return nil
}

// 批量删除用户的联系人的返回
type DelContactArrResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *DelContactArrResult) Reset() {
	*x = DelContactArrResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelContactArrResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelContactArrResult) ProtoMessage() {}

func (x *DelContactArrResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelContactArrResult.ProtoReflect.Descriptor instead.
func (*DelContactArrResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{36}
}

func (x *DelContactArrResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 获取用户联系人列表的请求
type ContatsGetContactsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`          //用户的Id
	KeyId       int64         `protobuf:"varint,2,opt,name=keyId,proto3" json:"keyId,omitempty"`            // 用户的keyId
	Contacthash string        `protobuf:"bytes,3,opt,name=contacthash,proto3" json:"contacthash,omitempty"` //用户联系人的哈希值
	Debug       *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ContatsGetContactsReq) Reset() {
	*x = ContatsGetContactsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContatsGetContactsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContatsGetContactsReq) ProtoMessage() {}

func (x *ContatsGetContactsReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContatsGetContactsReq.ProtoReflect.Descriptor instead.
func (*ContatsGetContactsReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{37}
}

func (x *ContatsGetContactsReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ContatsGetContactsReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *ContatsGetContactsReq) GetContacthash() string {
	if x != nil {
		return x.Contacthash
	}
	return ""
}

func (x *ContatsGetContactsReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 联系人的基本信息
type ContactInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                              //用户自己的id
	ContactId       int32  `protobuf:"varint,2,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`                     //联系人的id
	FirstName       string `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`                      //联系人备注
	LastName        string `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`                         //联系人备注
	IsSelfContacted bool   `protobuf:"varint,5,opt,name=is_self_contacted,json=isSelfContacted,proto3" json:"is_self_contacted,omitempty"` //此联系人是否是自己的联系人
	SelfIsContacted bool   `protobuf:"varint,6,opt,name=self_is_contacted,json=selfIsContacted,proto3" json:"self_is_contacted,omitempty"` //自己是不是此联系人的联系人
	StarMark        bool   `protobuf:"varint,7,opt,name=star_mark,json=starMark,proto3" json:"star_mark,omitempty"`                        //  是否为星标联系人
	HasPhone        bool   `protobuf:"varint,8,opt,name=has_phone,json=hasPhone,proto3" json:"has_phone,omitempty"`                        // 是否通过电话号码添加
}

func (x *ContactInfo) Reset() {
	*x = ContactInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactInfo) ProtoMessage() {}

func (x *ContactInfo) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactInfo.ProtoReflect.Descriptor instead.
func (*ContactInfo) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{38}
}

func (x *ContactInfo) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ContactInfo) GetContactId() int32 {
	if x != nil {
		return x.ContactId
	}
	return 0
}

func (x *ContactInfo) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *ContactInfo) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *ContactInfo) GetIsSelfContacted() bool {
	if x != nil {
		return x.IsSelfContacted
	}
	return false
}

func (x *ContactInfo) GetSelfIsContacted() bool {
	if x != nil {
		return x.SelfIsContacted
	}
	return false
}

func (x *ContactInfo) GetStarMark() bool {
	if x != nil {
		return x.StarMark
	}
	return false
}

func (x *ContactInfo) GetHasPhone() bool {
	if x != nil {
		return x.HasPhone
	}
	return false
}

// 用户联系人列表获取的返回
type ContatsGetContactsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactArr  []*ContactInfo `protobuf:"bytes,1,rep,name=contactArr,proto3" json:"contactArr,omitempty"`                          //联系人的的信息们
	UserInfoArr []*UserInfo    `protobuf:"bytes,2,rep,name=userInfoArr,proto3" json:"userInfoArr,omitempty"`                        //联系人们的用户信息们
	Errorcode   ReErrCode      `protobuf:"varint,3,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *ContatsGetContactsResult) Reset() {
	*x = ContatsGetContactsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContatsGetContactsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContatsGetContactsResult) ProtoMessage() {}

func (x *ContatsGetContactsResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContatsGetContactsResult.ProtoReflect.Descriptor instead.
func (*ContatsGetContactsResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{39}
}

func (x *ContatsGetContactsResult) GetContactArr() []*ContactInfo {
	if x != nil {
		return x.ContactArr
	}
	return nil
}

func (x *ContatsGetContactsResult) GetUserInfoArr() []*UserInfo {
	if x != nil {
		return x.UserInfoArr
	}
	return nil
}

func (x *ContatsGetContactsResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 电话本联系人信息
type PhoneBookContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId  int64  `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Phone     string `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"` //电话号码
	FirstName string `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
}

func (x *PhoneBookContact) Reset() {
	*x = PhoneBookContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhoneBookContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhoneBookContact) ProtoMessage() {}

func (x *PhoneBookContact) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhoneBookContact.ProtoReflect.Descriptor instead.
func (*PhoneBookContact) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{40}
}

func (x *PhoneBookContact) GetClientId() int64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *PhoneBookContact) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *PhoneBookContact) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *PhoneBookContact) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

// 导入\添加联系人的请求包
type ContactsImportPhoneContactsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId           int64               `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`       //端标识
	UserId          int32               `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`    //用户的ID
	PhoneContactArr []*PhoneBookContact `protobuf:"bytes,3,rep,name=phoneContactArr,proto3" json:"phoneContactArr,omitempty"` //联系人的电话号码的列表
	Debug           *pbcomm.Debug       `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ContactsImportPhoneContactsReq) Reset() {
	*x = ContactsImportPhoneContactsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactsImportPhoneContactsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactsImportPhoneContactsReq) ProtoMessage() {}

func (x *ContactsImportPhoneContactsReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactsImportPhoneContactsReq.ProtoReflect.Descriptor instead.
func (*ContactsImportPhoneContactsReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{41}
}

func (x *ContactsImportPhoneContactsReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *ContactsImportPhoneContactsReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ContactsImportPhoneContactsReq) GetPhoneContactArr() []*PhoneBookContact {
	if x != nil {
		return x.PhoneContactArr
	}
	return nil
}

func (x *ContactsImportPhoneContactsReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 导入联系人详细信息
type ImportContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ClientId int64 `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *ImportContact) Reset() {
	*x = ImportContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportContact) ProtoMessage() {}

func (x *ImportContact) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportContact.ProtoReflect.Descriptor instead.
func (*ImportContact) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{42}
}

func (x *ImportContact) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ImportContact) GetClientId() int64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

type PopularContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId  int64 `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Importers int32 `protobuf:"varint,2,opt,name=importers,proto3" json:"importers,omitempty"`
}

func (x *PopularContact) Reset() {
	*x = PopularContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PopularContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopularContact) ProtoMessage() {}

func (x *PopularContact) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopularContact.ProtoReflect.Descriptor instead.
func (*PopularContact) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{43}
}

func (x *PopularContact) GetClientId() int64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *PopularContact) GetImporters() int32 {
	if x != nil {
		return x.Importers
	}
	return 0
}

// 导入联系人的返回结果
type ContactsImportPhoneContactsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImContactDetail []*ImportContact  `protobuf:"bytes,1,rep,name=imContactDetail,proto3" json:"imContactDetail,omitempty"` //导入联系人的信息
	UserInfoArr     []*UserInfo       `protobuf:"bytes,2,rep,name=userInfoArr,proto3" json:"userInfoArr,omitempty"`         //联系人们的用户信息们
	PopuContact     []*PopularContact `protobuf:"bytes,3,rep,name=PopuContact,proto3" json:"PopuContact,omitempty"`
	Errorcode       ReErrCode         `protobuf:"varint,4,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *ContactsImportPhoneContactsResult) Reset() {
	*x = ContactsImportPhoneContactsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactsImportPhoneContactsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactsImportPhoneContactsResult) ProtoMessage() {}

func (x *ContactsImportPhoneContactsResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactsImportPhoneContactsResult.ProtoReflect.Descriptor instead.
func (*ContactsImportPhoneContactsResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{44}
}

func (x *ContactsImportPhoneContactsResult) GetImContactDetail() []*ImportContact {
	if x != nil {
		return x.ImContactDetail
	}
	return nil
}

func (x *ContactsImportPhoneContactsResult) GetUserInfoArr() []*UserInfo {
	if x != nil {
		return x.UserInfoArr
	}
	return nil
}

func (x *ContactsImportPhoneContactsResult) GetPopuContact() []*PopularContact {
	if x != nil {
		return x.PopuContact
	}
	return nil
}

func (x *ContactsImportPhoneContactsResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 关联用户ｉＤ结构
type AddRelationIdInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             //用户自己的id
	RelationId int32         `protobuf:"varint,2,opt,name=relation_id,json=relationId,proto3" json:"relation_id,omitempty"` //联系人的id
	Debug      *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *AddRelationIdInfo) Reset() {
	*x = AddRelationIdInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRelationIdInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRelationIdInfo) ProtoMessage() {}

func (x *AddRelationIdInfo) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRelationIdInfo.ProtoReflect.Descriptor instead.
func (*AddRelationIdInfo) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{45}
}

func (x *AddRelationIdInfo) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddRelationIdInfo) GetRelationId() int32 {
	if x != nil {
		return x.RelationId
	}
	return 0
}

func (x *AddRelationIdInfo) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 解除用户关联的
type DelRelationIdInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             //用户自己的id
	RelationId int32         `protobuf:"varint,2,opt,name=relation_id,json=relationId,proto3" json:"relation_id,omitempty"` //联系人的id
	Debug      *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *DelRelationIdInfo) Reset() {
	*x = DelRelationIdInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelRelationIdInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelRelationIdInfo) ProtoMessage() {}

func (x *DelRelationIdInfo) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelRelationIdInfo.ProtoReflect.Descriptor instead.
func (*DelRelationIdInfo) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{46}
}

func (x *DelRelationIdInfo) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DelRelationIdInfo) GetRelationId() int32 {
	if x != nil {
		return x.RelationId
	}
	return 0
}

func (x *DelRelationIdInfo) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 关联用户用户关系的返回
type AddRelationIdInfoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *AddRelationIdInfoResult) Reset() {
	*x = AddRelationIdInfoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRelationIdInfoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRelationIdInfoResult) ProtoMessage() {}

func (x *AddRelationIdInfoResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRelationIdInfoResult.ProtoReflect.Descriptor instead.
func (*AddRelationIdInfoResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{47}
}

func (x *AddRelationIdInfoResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 解除用户用户关系的返回
type DelRelationIdInfoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *DelRelationIdInfoResult) Reset() {
	*x = DelRelationIdInfoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelRelationIdInfoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelRelationIdInfoResult) ProtoMessage() {}

func (x *DelRelationIdInfoResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelRelationIdInfoResult.ProtoReflect.Descriptor instead.
func (*DelRelationIdInfoResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{48}
}

func (x *DelRelationIdInfoResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 拉黑用户的请求
type BlockeduserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             //用户自己的id
	BlockedId  int32         `protobuf:"varint,2,opt,name=blocked_id,json=blockedId,proto3" json:"blocked_id,omitempty"`    //联系人的id
	AccessHash int64         `protobuf:"varint,3,opt,name=Access_hash,json=AccessHash,proto3" json:"Access_hash,omitempty"` //联系人id对应的哈希值
	KeyId      int64         `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *BlockeduserReq) Reset() {
	*x = BlockeduserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockeduserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockeduserReq) ProtoMessage() {}

func (x *BlockeduserReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockeduserReq.ProtoReflect.Descriptor instead.
func (*BlockeduserReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{49}
}

func (x *BlockeduserReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *BlockeduserReq) GetBlockedId() int32 {
	if x != nil {
		return x.BlockedId
	}
	return 0
}

func (x *BlockeduserReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *BlockeduserReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *BlockeduserReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 拉黑用户的返回
type BlockeduserResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *BlockeduserResult) Reset() {
	*x = BlockeduserResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockeduserResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockeduserResult) ProtoMessage() {}

func (x *BlockeduserResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockeduserResult.ProtoReflect.Descriptor instead.
func (*BlockeduserResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{50}
}

func (x *BlockeduserResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 将用户从黑明单中移除的请求
type ContactUnblockedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             //用户自己的id
	BlockedId  int32         `protobuf:"varint,2,opt,name=blocked_id,json=blockedId,proto3" json:"blocked_id,omitempty"`    //联系人的id
	AccessHash int64         `protobuf:"varint,3,opt,name=Access_hash,json=AccessHash,proto3" json:"Access_hash,omitempty"` //联系人id对应的哈希值
	KeyId      int64         `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ContactUnblockedReq) Reset() {
	*x = ContactUnblockedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactUnblockedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactUnblockedReq) ProtoMessage() {}

func (x *ContactUnblockedReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactUnblockedReq.ProtoReflect.Descriptor instead.
func (*ContactUnblockedReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{51}
}

func (x *ContactUnblockedReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ContactUnblockedReq) GetBlockedId() int32 {
	if x != nil {
		return x.BlockedId
	}
	return 0
}

func (x *ContactUnblockedReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ContactUnblockedReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *ContactUnblockedReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 获取黑明单列表
type ContactsGetBlockedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户自己的id
	Debug  *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ContactsGetBlockedReq) Reset() {
	*x = ContactsGetBlockedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactsGetBlockedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactsGetBlockedReq) ProtoMessage() {}

func (x *ContactsGetBlockedReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactsGetBlockedReq.ProtoReflect.Descriptor instead.
func (*ContactsGetBlockedReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{52}
}

func (x *ContactsGetBlockedReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ContactsGetBlockedReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 黑名单用户的信息
type Blockeduser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //黑明单的用户
	Date   int32 `protobuf:"varint,2,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *Blockeduser) Reset() {
	*x = Blockeduser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Blockeduser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Blockeduser) ProtoMessage() {}

func (x *Blockeduser) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Blockeduser.ProtoReflect.Descriptor instead.
func (*Blockeduser) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{53}
}

func (x *Blockeduser) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Blockeduser) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

// 获取黑明单列表的返回
type ContactsGetBlockedResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blockeduser []int32     `protobuf:"varint,1,rep,packed,name=blockeduser,proto3" json:"blockeduser,omitempty"`                //黑明单的ID
	InfoArr     []*UserInfo `protobuf:"bytes,2,rep,name=InfoArr,proto3" json:"InfoArr,omitempty"`                                //黑名单的用户的基础信息们
	Errorcode   ReErrCode   `protobuf:"varint,3,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *ContactsGetBlockedResult) Reset() {
	*x = ContactsGetBlockedResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactsGetBlockedResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactsGetBlockedResult) ProtoMessage() {}

func (x *ContactsGetBlockedResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactsGetBlockedResult.ProtoReflect.Descriptor instead.
func (*ContactsGetBlockedResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{54}
}

func (x *ContactsGetBlockedResult) GetBlockeduser() []int32 {
	if x != nil {
		return x.Blockeduser
	}
	return nil
}

func (x *ContactsGetBlockedResult) GetInfoArr() []*UserInfo {
	if x != nil {
		return x.InfoArr
	}
	return nil
}

func (x *ContactsGetBlockedResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 系统白名单的基础信息
type SystemWhiteUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`    //用户自己的id
	Level   int32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`                    //白名单的权限级别
	Proby   int32 `protobuf:"varint,3,opt,name=proby,proto3" json:"proby,omitempty"`                    //将用户白名单修改的用户
	IsWhite bool  `protobuf:"varint,4,opt,name=is_white,json=isWhite,proto3" json:"is_white,omitempty"` // true if user is white
}

func (x *SystemWhiteUser) Reset() {
	*x = SystemWhiteUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemWhiteUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemWhiteUser) ProtoMessage() {}

func (x *SystemWhiteUser) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemWhiteUser.ProtoReflect.Descriptor instead.
func (*SystemWhiteUser) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{55}
}

func (x *SystemWhiteUser) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SystemWhiteUser) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *SystemWhiteUser) GetProby() int32 {
	if x != nil {
		return x.Proby
	}
	return 0
}

func (x *SystemWhiteUser) GetIsWhite() bool {
	if x != nil {
		return x.IsWhite
	}
	return false
}

// 存储系统白名单的请求
type StoreSysWhiteUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户自己的id
	Level  int32         `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`                 //白名单的权限级别
	Proby  int32         `protobuf:"varint,3,opt,name=proby,proto3" json:"proby,omitempty"`                 //将用户白名单修改的用户
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *StoreSysWhiteUserReq) Reset() {
	*x = StoreSysWhiteUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreSysWhiteUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreSysWhiteUserReq) ProtoMessage() {}

func (x *StoreSysWhiteUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreSysWhiteUserReq.ProtoReflect.Descriptor instead.
func (*StoreSysWhiteUserReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{56}
}

func (x *StoreSysWhiteUserReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *StoreSysWhiteUserReq) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *StoreSysWhiteUserReq) GetProby() int32 {
	if x != nil {
		return x.Proby
	}
	return 0
}

func (x *StoreSysWhiteUserReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 存储系统白名单的返回结果
type StoreSysWhiteUserResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *StoreSysWhiteUserResult) Reset() {
	*x = StoreSysWhiteUserResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreSysWhiteUserResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreSysWhiteUserResult) ProtoMessage() {}

func (x *StoreSysWhiteUserResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreSysWhiteUserResult.ProtoReflect.Descriptor instead.
func (*StoreSysWhiteUserResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{57}
}

func (x *StoreSysWhiteUserResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 更新用户系统白名单的请求
type UpdateSystemWhiteUserLevelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户自己的id
	Level  int32         `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`                 //白名单的权限级别
	Proby  int32         `protobuf:"varint,3,opt,name=proby,proto3" json:"proby,omitempty"`                 //将用户白名单修改的用户
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UpdateSystemWhiteUserLevelReq) Reset() {
	*x = UpdateSystemWhiteUserLevelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSystemWhiteUserLevelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSystemWhiteUserLevelReq) ProtoMessage() {}

func (x *UpdateSystemWhiteUserLevelReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSystemWhiteUserLevelReq.ProtoReflect.Descriptor instead.
func (*UpdateSystemWhiteUserLevelReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{58}
}

func (x *UpdateSystemWhiteUserLevelReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateSystemWhiteUserLevelReq) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *UpdateSystemWhiteUserLevelReq) GetProby() int32 {
	if x != nil {
		return x.Proby
	}
	return 0
}

func (x *UpdateSystemWhiteUserLevelReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 更新用户系统白名单的返回结果
type UpdateSystemWhiteUserLevelResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *UpdateSystemWhiteUserLevelResult) Reset() {
	*x = UpdateSystemWhiteUserLevelResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSystemWhiteUserLevelResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSystemWhiteUserLevelResult) ProtoMessage() {}

func (x *UpdateSystemWhiteUserLevelResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSystemWhiteUserLevelResult.ProtoReflect.Descriptor instead.
func (*UpdateSystemWhiteUserLevelResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{59}
}

func (x *UpdateSystemWhiteUserLevelResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 获取系统白名单权限
type GetSysWhiteUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"` // 需要获取指定白名单人的权限
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetSysWhiteUserReq) Reset() {
	*x = GetSysWhiteUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSysWhiteUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSysWhiteUserReq) ProtoMessage() {}

func (x *GetSysWhiteUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSysWhiteUserReq.ProtoReflect.Descriptor instead.
func (*GetSysWhiteUserReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{60}
}

func (x *GetSysWhiteUserReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetSysWhiteUserReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 获取系统白名单权限结果
type GetSysWhiteUserResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SysWhiteInfo *SystemWhiteUser `protobuf:"bytes,1,opt,name=sysWhiteInfo,proto3" json:"sysWhiteInfo,omitempty"`                      //系统白名单信息
	Errorcode    ReErrCode        `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *GetSysWhiteUserResult) Reset() {
	*x = GetSysWhiteUserResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSysWhiteUserResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSysWhiteUserResult) ProtoMessage() {}

func (x *GetSysWhiteUserResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSysWhiteUserResult.ProtoReflect.Descriptor instead.
func (*GetSysWhiteUserResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{61}
}

func (x *GetSysWhiteUserResult) GetSysWhiteInfo() *SystemWhiteUser {
	if x != nil {
		return x.SysWhiteInfo
	}
	return nil
}

func (x *GetSysWhiteUserResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 获取系统所有白名单请求
type GetSysWhiteUserArrReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetSysWhiteUserArrReq) Reset() {
	*x = GetSysWhiteUserArrReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSysWhiteUserArrReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSysWhiteUserArrReq) ProtoMessage() {}

func (x *GetSysWhiteUserArrReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSysWhiteUserArrReq.ProtoReflect.Descriptor instead.
func (*GetSysWhiteUserArrReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{62}
}

func (x *GetSysWhiteUserArrReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 获取系统所有白名单返回
type GetSysWhiteUserArrResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SysWhiteInfoArr []*SystemWhiteUser `protobuf:"bytes,1,rep,name=sysWhiteInfoArr,proto3" json:"sysWhiteInfoArr,omitempty"`                //系统白名单信息
	Errorcode       ReErrCode          `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *GetSysWhiteUserArrResult) Reset() {
	*x = GetSysWhiteUserArrResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSysWhiteUserArrResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSysWhiteUserArrResult) ProtoMessage() {}

func (x *GetSysWhiteUserArrResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSysWhiteUserArrResult.ProtoReflect.Descriptor instead.
func (*GetSysWhiteUserArrResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{63}
}

func (x *GetSysWhiteUserArrResult) GetSysWhiteInfoArr() []*SystemWhiteUser {
	if x != nil {
		return x.SysWhiteInfoArr
	}
	return nil
}

func (x *GetSysWhiteUserArrResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 删除系统白名单用户的请求
type DelSysWhiteUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`   //需要删除的系统白名单的用户的ID
	ProUser int32         `protobuf:"varint,2,opt,name=ProUser,proto3" json:"ProUser,omitempty"` //删除用户白名单的人
	Debug   *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *DelSysWhiteUserReq) Reset() {
	*x = DelSysWhiteUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelSysWhiteUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelSysWhiteUserReq) ProtoMessage() {}

func (x *DelSysWhiteUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelSysWhiteUserReq.ProtoReflect.Descriptor instead.
func (*DelSysWhiteUserReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{64}
}

func (x *DelSysWhiteUserReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DelSysWhiteUserReq) GetProUser() int32 {
	if x != nil {
		return x.ProUser
	}
	return 0
}

func (x *DelSysWhiteUserReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 删除系统白名单用户的返回结果
type DelSysWhiteUserResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *DelSysWhiteUserResult) Reset() {
	*x = DelSysWhiteUserResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelSysWhiteUserResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelSysWhiteUserResult) ProtoMessage() {}

func (x *DelSysWhiteUserResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelSysWhiteUserResult.ProtoReflect.Descriptor instead.
func (*DelSysWhiteUserResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{65}
}

func (x *DelSysWhiteUserResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// user的ＤＣ的信息
type UserDc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //userId
	DcId   int32         `protobuf:"varint,2,opt,name=dc_id,json=dcId,proto3" json:"dc_id,omitempty"`       //用户的DCId
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UserDc) Reset() {
	*x = UserDc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDc) ProtoMessage() {}

func (x *UserDc) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDc.ProtoReflect.Descriptor instead.
func (*UserDc) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{66}
}

func (x *UserDc) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserDc) GetDcId() int32 {
	if x != nil {
		return x.DcId
	}
	return 0
}

func (x *UserDc) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 拉取所有用户的DC的请求
type GetAllDcReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetAllDcReq) Reset() {
	*x = GetAllDcReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllDcReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllDcReq) ProtoMessage() {}

func (x *GetAllDcReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllDcReq.ProtoReflect.Descriptor instead.
func (*GetAllDcReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{67}
}

func (x *GetAllDcReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 设置隐私选项的接口的请求
type SetPrivacyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PrivacyType    int32         `protobuf:"varint,2,opt,name=privacy_type,json=privacyType,proto3" json:"privacy_type,omitempty"`                 //隐私选项的类型 1 代表 在线时间的设置  2 代表群组邀请的设置  3、代表phonecall的设置
	Range          int32         `protobuf:"varint,3,opt,name=range,proto3" json:"range,omitempty"`                                                // 1 代表每个人 2 代表 我的联系人  3、代表没有人
	AlwaysDisallow []int32       `protobuf:"varint,4,rep,packed,name=always_disallow,json=alwaysDisallow,proto3" json:"always_disallow,omitempty"` //永不分享的列表
	AlwaysAllow    []int32       `protobuf:"varint,5,rep,packed,name=always_allow,json=alwaysAllow,proto3" json:"always_allow,omitempty"`          //总是分享的列表
	Ip             string        `protobuf:"bytes,6,opt,name=ip,proto3" json:"ip,omitempty"`
	KeyId          int64         `protobuf:"varint,7,opt,name=keyId,proto3" json:"keyId,omitempty"`
	SessionId      int64         `protobuf:"varint,8,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Phone          string        `protobuf:"bytes,9,opt,name=phone,proto3" json:"phone,omitempty"`
	Debug          *pbcomm.Debug `protobuf:"bytes,10,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *SetPrivacyReq) Reset() {
	*x = SetPrivacyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPrivacyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPrivacyReq) ProtoMessage() {}

func (x *SetPrivacyReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPrivacyReq.ProtoReflect.Descriptor instead.
func (*SetPrivacyReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{68}
}

func (x *SetPrivacyReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SetPrivacyReq) GetPrivacyType() int32 {
	if x != nil {
		return x.PrivacyType
	}
	return 0
}

func (x *SetPrivacyReq) GetRange() int32 {
	if x != nil {
		return x.Range
	}
	return 0
}

func (x *SetPrivacyReq) GetAlwaysDisallow() []int32 {
	if x != nil {
		return x.AlwaysDisallow
	}
	return nil
}

func (x *SetPrivacyReq) GetAlwaysAllow() []int32 {
	if x != nil {
		return x.AlwaysAllow
	}
	return nil
}

func (x *SetPrivacyReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *SetPrivacyReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *SetPrivacyReq) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *SetPrivacyReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *SetPrivacyReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 设置隐私选项的接口的返回
type SetPrivacyResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UinfoArr  []*UserInfo `protobuf:"bytes,1,rep,name=UinfoArr,proto3" json:"UinfoArr,omitempty"`
	Errorcode ReErrCode   `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *SetPrivacyResult) Reset() {
	*x = SetPrivacyResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPrivacyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPrivacyResult) ProtoMessage() {}

func (x *SetPrivacyResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPrivacyResult.ProtoReflect.Descriptor instead.
func (*SetPrivacyResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{69}
}

func (x *SetPrivacyResult) GetUinfoArr() []*UserInfo {
	if x != nil {
		return x.UinfoArr
	}
	return nil
}

func (x *SetPrivacyResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 获取隐私选项的接口
type GetPrivacyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                //需要请求的用户的Id
	PrivacyType int32         `protobuf:"varint,2,opt,name=privacy_type,json=privacyType,proto3" json:"privacy_type,omitempty"` //隐私选项的类型 1 代表 在线时间的设置  2 代表群组邀请的设置  3、代表phonecall的设置
	KeyId       int64         `protobuf:"varint,3,opt,name=keyId,proto3" json:"keyId,omitempty"`
	SessionId   int64         `protobuf:"varint,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"` //
	Ip          string        `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip,omitempty"`
	Phone       string        `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetPrivacyReq) Reset() {
	*x = GetPrivacyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPrivacyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrivacyReq) ProtoMessage() {}

func (x *GetPrivacyReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrivacyReq.ProtoReflect.Descriptor instead.
func (*GetPrivacyReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{70}
}

func (x *GetPrivacyReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetPrivacyReq) GetPrivacyType() int32 {
	if x != nil {
		return x.PrivacyType
	}
	return 0
}

func (x *GetPrivacyReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *GetPrivacyReq) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *GetPrivacyReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *GetPrivacyReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *GetPrivacyReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 检查相应的隐私设置是否被允许的请求接口
type CheckPrivacyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId      int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"` //检查自己是否是在 userId 相应权限允许列表中
	UserId      int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PrivacyType int32         `protobuf:"varint,3,opt,name=privacy_type,json=privacyType,proto3" json:"privacy_type,omitempty"` //隐私选项的类型 1 代表 在线时间的设置  2 代表群组邀请的设置  3、代表phonecall的设置
	Debug       *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *CheckPrivacyReq) Reset() {
	*x = CheckPrivacyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckPrivacyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPrivacyReq) ProtoMessage() {}

func (x *CheckPrivacyReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPrivacyReq.ProtoReflect.Descriptor instead.
func (*CheckPrivacyReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{71}
}

func (x *CheckPrivacyReq) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *CheckPrivacyReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CheckPrivacyReq) GetPrivacyType() int32 {
	if x != nil {
		return x.PrivacyType
	}
	return 0
}

func (x *CheckPrivacyReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 检查相应的隐私设置是否被允许的请求返回
type CheckPrivacyResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *CheckPrivacyResult) Reset() {
	*x = CheckPrivacyResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckPrivacyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPrivacyResult) ProtoMessage() {}

func (x *CheckPrivacyResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPrivacyResult.ProtoReflect.Descriptor instead.
func (*CheckPrivacyResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{72}
}

func (x *CheckPrivacyResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 隐私选项获取的结果
type GetPrivacyResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Range          int32       `protobuf:"varint,1,opt,name=range,proto3" json:"range,omitempty"`                                                // 1 代表每个人 2 代表 我的联系人  3、代表没有人 4、代表不允许我的所有联系人
	AlwaysDisallow []int32     `protobuf:"varint,2,rep,packed,name=always_disallow,json=alwaysDisallow,proto3" json:"always_disallow,omitempty"` //永不分享的列表
	AlwaysAllow    []int32     `protobuf:"varint,3,rep,packed,name=always_allow,json=alwaysAllow,proto3" json:"always_allow,omitempty"`          //总是分享的列表
	UserInfos      []*UserInfo `protobuf:"bytes,4,rep,name=userInfos,proto3" json:"userInfos,omitempty"`                                         //永不分享的列表和总是分享列表的 用户信息们
	Errorcode      ReErrCode   `protobuf:"varint,5,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`              //返回错误码
}

func (x *GetPrivacyResult) Reset() {
	*x = GetPrivacyResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPrivacyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrivacyResult) ProtoMessage() {}

func (x *GetPrivacyResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrivacyResult.ProtoReflect.Descriptor instead.
func (*GetPrivacyResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{73}
}

func (x *GetPrivacyResult) GetRange() int32 {
	if x != nil {
		return x.Range
	}
	return 0
}

func (x *GetPrivacyResult) GetAlwaysDisallow() []int32 {
	if x != nil {
		return x.AlwaysDisallow
	}
	return nil
}

func (x *GetPrivacyResult) GetAlwaysAllow() []int32 {
	if x != nil {
		return x.AlwaysAllow
	}
	return nil
}

func (x *GetPrivacyResult) GetUserInfos() []*UserInfo {
	if x != nil {
		return x.UserInfos
	}
	return nil
}

func (x *GetPrivacyResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 存储sticker 集合概要的请求参数
type StoreShopStickerSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessHash int64         `protobuf:"varint,1,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Free       bool          `protobuf:"varint,2,opt,name=free,proto3" json:"free,omitempty"`
	Official   bool          `protobuf:"varint,3,opt,name=official,proto3" json:"official,omitempty"`
	Masks      bool          `protobuf:"varint,4,opt,name=masks,proto3" json:"masks,omitempty"`
	Title      string        `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	ShortName  string        `protobuf:"bytes,6,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Count      int32         `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`
	Hash       int64         `protobuf:"varint,8,opt,name=hash,proto3" json:"hash,omitempty"`
	Emoticon   string        `protobuf:"bytes,9,opt,name=emoticon,proto3" json:"emoticon,omitempty"`
	Documents  []int32       `protobuf:"varint,10,rep,packed,name=documents,proto3" json:"documents,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,11,opt,name=debug,proto3" json:"debug,omitempty"`
	UserId     int32         `protobuf:"varint,12,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //sticker作者id - 2018.10.18 新增
}

func (x *StoreShopStickerSetReq) Reset() {
	*x = StoreShopStickerSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreShopStickerSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreShopStickerSetReq) ProtoMessage() {}

func (x *StoreShopStickerSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreShopStickerSetReq.ProtoReflect.Descriptor instead.
func (*StoreShopStickerSetReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{74}
}

func (x *StoreShopStickerSetReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *StoreShopStickerSetReq) GetFree() bool {
	if x != nil {
		return x.Free
	}
	return false
}

func (x *StoreShopStickerSetReq) GetOfficial() bool {
	if x != nil {
		return x.Official
	}
	return false
}

func (x *StoreShopStickerSetReq) GetMasks() bool {
	if x != nil {
		return x.Masks
	}
	return false
}

func (x *StoreShopStickerSetReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *StoreShopStickerSetReq) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *StoreShopStickerSetReq) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *StoreShopStickerSetReq) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *StoreShopStickerSetReq) GetEmoticon() string {
	if x != nil {
		return x.Emoticon
	}
	return ""
}

func (x *StoreShopStickerSetReq) GetDocuments() []int32 {
	if x != nil {
		return x.Documents
	}
	return nil
}

func (x *StoreShopStickerSetReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *StoreShopStickerSetReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 存储sticker 集合概要的返回
type StoreShopStickerSetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                         //Sticker生成的id
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *StoreShopStickerSetResult) Reset() {
	*x = StoreShopStickerSetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreShopStickerSetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreShopStickerSetResult) ProtoMessage() {}

func (x *StoreShopStickerSetResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreShopStickerSetResult.ProtoReflect.Descriptor instead.
func (*StoreShopStickerSetResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{75}
}

func (x *StoreShopStickerSetResult) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StoreShopStickerSetResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 存储sticker 集合概要 Documents请求
type StoreShopStickerSetDocumentsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Documents []int32       `protobuf:"varint,2,rep,packed,name=documents,proto3" json:"documents,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *StoreShopStickerSetDocumentsReq) Reset() {
	*x = StoreShopStickerSetDocumentsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreShopStickerSetDocumentsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreShopStickerSetDocumentsReq) ProtoMessage() {}

func (x *StoreShopStickerSetDocumentsReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreShopStickerSetDocumentsReq.ProtoReflect.Descriptor instead.
func (*StoreShopStickerSetDocumentsReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{76}
}

func (x *StoreShopStickerSetDocumentsReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StoreShopStickerSetDocumentsReq) GetDocuments() []int32 {
	if x != nil {
		return x.Documents
	}
	return nil
}

func (x *StoreShopStickerSetDocumentsReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 存储sticker 集合概要 Documents返回结果
type StoreShopStickerSetDocumentsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *StoreShopStickerSetDocumentsResult) Reset() {
	*x = StoreShopStickerSetDocumentsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreShopStickerSetDocumentsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreShopStickerSetDocumentsResult) ProtoMessage() {}

func (x *StoreShopStickerSetDocumentsResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreShopStickerSetDocumentsResult.ProtoReflect.Descriptor instead.
func (*StoreShopStickerSetDocumentsResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{77}
}

func (x *StoreShopStickerSetDocumentsResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 删除sticker商城的请求
type DeleteStickerSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StickerId int32         `protobuf:"varint,1,opt,name=stickerId,proto3" json:"stickerId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
	UserId    int32         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //sticker作者id - 2018.10.18 新增
}

func (x *DeleteStickerSetReq) Reset() {
	*x = DeleteStickerSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStickerSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStickerSetReq) ProtoMessage() {}

func (x *DeleteStickerSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStickerSetReq.ProtoReflect.Descriptor instead.
func (*DeleteStickerSetReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{78}
}

func (x *DeleteStickerSetReq) GetStickerId() int32 {
	if x != nil {
		return x.StickerId
	}
	return 0
}

func (x *DeleteStickerSetReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *DeleteStickerSetReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 删除sticker商城的返回
type DeleteStickerSetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *DeleteStickerSetResult) Reset() {
	*x = DeleteStickerSetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStickerSetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStickerSetResult) ProtoMessage() {}

func (x *DeleteStickerSetResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStickerSetResult.ProtoReflect.Descriptor instead.
func (*DeleteStickerSetResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{79}
}

func (x *DeleteStickerSetResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// sticker set 的基础信息
type StickerSetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AccessHash int64   `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Free       bool    `protobuf:"varint,3,opt,name=free,proto3" json:"free,omitempty"`
	Official   bool    `protobuf:"varint,4,opt,name=official,proto3" json:"official,omitempty"`
	Masks      bool    `protobuf:"varint,5,opt,name=masks,proto3" json:"masks,omitempty"`
	Title      string  `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	ShortName  string  `protobuf:"bytes,7,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Count      int32   `protobuf:"varint,8,opt,name=count,proto3" json:"count,omitempty"`
	Hash       int64   `protobuf:"varint,9,opt,name=hash,proto3" json:"hash,omitempty"`
	Emoticon   string  `protobuf:"bytes,10,opt,name=emoticon,proto3" json:"emoticon,omitempty"`
	Documents  []int32 `protobuf:"varint,11,rep,packed,name=documents,proto3" json:"documents,omitempty"`
}

func (x *StickerSetInfo) Reset() {
	*x = StickerSetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StickerSetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StickerSetInfo) ProtoMessage() {}

func (x *StickerSetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StickerSetInfo.ProtoReflect.Descriptor instead.
func (*StickerSetInfo) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{80}
}

func (x *StickerSetInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StickerSetInfo) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *StickerSetInfo) GetFree() bool {
	if x != nil {
		return x.Free
	}
	return false
}

func (x *StickerSetInfo) GetOfficial() bool {
	if x != nil {
		return x.Official
	}
	return false
}

func (x *StickerSetInfo) GetMasks() bool {
	if x != nil {
		return x.Masks
	}
	return false
}

func (x *StickerSetInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *StickerSetInfo) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *StickerSetInfo) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *StickerSetInfo) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *StickerSetInfo) GetEmoticon() string {
	if x != nil {
		return x.Emoticon
	}
	return ""
}

func (x *StickerSetInfo) GetDocuments() []int32 {
	if x != nil {
		return x.Documents
	}
	return nil
}

// 获取指定的sticker集合的请求
type GetStickerSetInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //sticker的id
	ShortName string        `protobuf:"bytes,2,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	IsId      bool          `protobuf:"varint,3,opt,name=is_id,json=isId,proto3" json:"is_id,omitempty"` //是否是根据Id来查 true 根据Id查询 false根据short_name 查询
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetStickerSetInfoReq) Reset() {
	*x = GetStickerSetInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStickerSetInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStickerSetInfoReq) ProtoMessage() {}

func (x *GetStickerSetInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStickerSetInfoReq.ProtoReflect.Descriptor instead.
func (*GetStickerSetInfoReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{81}
}

func (x *GetStickerSetInfoReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetStickerSetInfoReq) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *GetStickerSetInfoReq) GetIsId() bool {
	if x != nil {
		return x.IsId
	}
	return false
}

func (x *GetStickerSetInfoReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// //获取指定的sticker集合的返回
type GetStickerSetInfoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StickerSetInfo *StickerSetInfo `protobuf:"bytes,1,opt,name=stickerSetInfo,proto3" json:"stickerSetInfo,omitempty"`                  //sticker的基础信息
	Errorcode      ReErrCode       `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *GetStickerSetInfoResult) Reset() {
	*x = GetStickerSetInfoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStickerSetInfoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStickerSetInfoResult) ProtoMessage() {}

func (x *GetStickerSetInfoResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStickerSetInfoResult.ProtoReflect.Descriptor instead.
func (*GetStickerSetInfoResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{82}
}

func (x *GetStickerSetInfoResult) GetStickerSetInfo() *StickerSetInfo {
	if x != nil {
		return x.StickerSetInfo
	}
	return nil
}

func (x *GetStickerSetInfoResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// sticker集合里面具体内容
// 存储单个sticker内容请求
type StickerPackDocumentBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributesStikerSetId         int64  `protobuf:"varint,1,opt,name=attributes_stiker_set_id,json=attributesStikerSetId,proto3" json:"attributes_stiker_set_id,omitempty"`
	DocumentId                    uint64 `protobuf:"varint,2,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	AccessHash                    int64  `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	MimeType                      string `protobuf:"bytes,4,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	Size                          int32  `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	Thumb                         string `protobuf:"bytes,6,opt,name=thumb,proto3" json:"thumb,omitempty"`
	DcId                          int32  `protobuf:"varint,7,opt,name=dc_id,json=dcId,proto3" json:"dc_id,omitempty"`
	Date                          int32  `protobuf:"varint,8,opt,name=date,proto3" json:"date,omitempty"`
	AttributesImageSizeW          int32  `protobuf:"varint,9,opt,name=attributes_image_size_w,json=attributesImageSizeW,proto3" json:"attributes_image_size_w,omitempty"`
	AttributesImageSizeH          int32  `protobuf:"varint,10,opt,name=attributes_image_size_h,json=attributesImageSizeH,proto3" json:"attributes_image_size_h,omitempty"`
	AttributesStikerAlt           string `protobuf:"bytes,11,opt,name=attributes_stiker_alt,json=attributesStikerAlt,proto3" json:"attributes_stiker_alt,omitempty"`
	AttributesStikerSetAccessHash int64  `protobuf:"varint,12,opt,name=attributes_stiker_set_access_hash,json=attributesStikerSetAccessHash,proto3" json:"attributes_stiker_set_access_hash,omitempty"`
	AttributesFileName            string `protobuf:"bytes,13,opt,name=attributes_file_name,json=attributesFileName,proto3" json:"attributes_file_name,omitempty"`
}

func (x *StickerPackDocumentBase) Reset() {
	*x = StickerPackDocumentBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StickerPackDocumentBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StickerPackDocumentBase) ProtoMessage() {}

func (x *StickerPackDocumentBase) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StickerPackDocumentBase.ProtoReflect.Descriptor instead.
func (*StickerPackDocumentBase) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{83}
}

func (x *StickerPackDocumentBase) GetAttributesStikerSetId() int64 {
	if x != nil {
		return x.AttributesStikerSetId
	}
	return 0
}

func (x *StickerPackDocumentBase) GetDocumentId() uint64 {
	if x != nil {
		return x.DocumentId
	}
	return 0
}

func (x *StickerPackDocumentBase) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *StickerPackDocumentBase) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *StickerPackDocumentBase) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *StickerPackDocumentBase) GetThumb() string {
	if x != nil {
		return x.Thumb
	}
	return ""
}

func (x *StickerPackDocumentBase) GetDcId() int32 {
	if x != nil {
		return x.DcId
	}
	return 0
}

func (x *StickerPackDocumentBase) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *StickerPackDocumentBase) GetAttributesImageSizeW() int32 {
	if x != nil {
		return x.AttributesImageSizeW
	}
	return 0
}

func (x *StickerPackDocumentBase) GetAttributesImageSizeH() int32 {
	if x != nil {
		return x.AttributesImageSizeH
	}
	return 0
}

func (x *StickerPackDocumentBase) GetAttributesStikerAlt() string {
	if x != nil {
		return x.AttributesStikerAlt
	}
	return ""
}

func (x *StickerPackDocumentBase) GetAttributesStikerSetAccessHash() int64 {
	if x != nil {
		return x.AttributesStikerSetAccessHash
	}
	return 0
}

func (x *StickerPackDocumentBase) GetAttributesFileName() string {
	if x != nil {
		return x.AttributesFileName
	}
	return ""
}

type StickerPackDocumentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	InfoBase *StickerPackDocumentBase `protobuf:"bytes,2,opt,name=infoBase,proto3" json:"infoBase,omitempty"`
}

func (x *StickerPackDocumentInfo) Reset() {
	*x = StickerPackDocumentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StickerPackDocumentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StickerPackDocumentInfo) ProtoMessage() {}

func (x *StickerPackDocumentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StickerPackDocumentInfo.ProtoReflect.Descriptor instead.
func (*StickerPackDocumentInfo) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{84}
}

func (x *StickerPackDocumentInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StickerPackDocumentInfo) GetInfoBase() *StickerPackDocumentBase {
	if x != nil {
		return x.InfoBase
	}
	return nil
}

// 存储sticker文档的请求
type StoreStickerPackDcReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stickpackbase *StickerPackDocumentBase `protobuf:"bytes,1,opt,name=stickpackbase,proto3" json:"stickpackbase,omitempty"`
	Debug         *pbcomm.Debug            `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *StoreStickerPackDcReq) Reset() {
	*x = StoreStickerPackDcReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreStickerPackDcReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreStickerPackDcReq) ProtoMessage() {}

func (x *StoreStickerPackDcReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreStickerPackDcReq.ProtoReflect.Descriptor instead.
func (*StoreStickerPackDcReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{85}
}

func (x *StoreStickerPackDcReq) GetStickpackbase() *StickerPackDocumentBase {
	if x != nil {
		return x.Stickpackbase
	}
	return nil
}

func (x *StoreStickerPackDcReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 存储sticker文档的返回
type StoreStickerPackDcResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *StoreStickerPackDcResult) Reset() {
	*x = StoreStickerPackDcResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreStickerPackDcResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreStickerPackDcResult) ProtoMessage() {}

func (x *StoreStickerPackDcResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreStickerPackDcResult.ProtoReflect.Descriptor instead.
func (*StoreStickerPackDcResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{86}
}

func (x *StoreStickerPackDcResult) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StoreStickerPackDcResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 批量导入sticker的请求
type StoreStickerPackDcArrReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StPDB []*StickerPackDocumentBase `protobuf:"bytes,1,rep,name=StPDB,proto3" json:"StPDB,omitempty"`
	Debug *pbcomm.Debug              `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *StoreStickerPackDcArrReq) Reset() {
	*x = StoreStickerPackDcArrReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreStickerPackDcArrReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreStickerPackDcArrReq) ProtoMessage() {}

func (x *StoreStickerPackDcArrReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreStickerPackDcArrReq.ProtoReflect.Descriptor instead.
func (*StoreStickerPackDcArrReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{87}
}

func (x *StoreStickerPackDcArrReq) GetStPDB() []*StickerPackDocumentBase {
	if x != nil {
		return x.StPDB
	}
	return nil
}

func (x *StoreStickerPackDcArrReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 批量导入sticker的返回
type StoreStickerPackDcArrResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdArr     []int32   `protobuf:"varint,1,rep,packed,name=idArr,proto3" json:"idArr,omitempty"`                            //导入后的id的列表
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *StoreStickerPackDcArrResult) Reset() {
	*x = StoreStickerPackDcArrResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreStickerPackDcArrResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreStickerPackDcArrResult) ProtoMessage() {}

func (x *StoreStickerPackDcArrResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreStickerPackDcArrResult.ProtoReflect.Descriptor instead.
func (*StoreStickerPackDcArrResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{88}
}

func (x *StoreStickerPackDcArrResult) GetIdArr() []int32 {
	if x != nil {
		return x.IdArr
	}
	return nil
}

func (x *StoreStickerPackDcArrResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 获取一个sticker下面的所有贴图信息的请求
type GetStickerSetPackDcInfosReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int32         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //stickerSet 的id
	Debug *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetStickerSetPackDcInfosReq) Reset() {
	*x = GetStickerSetPackDcInfosReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStickerSetPackDcInfosReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStickerSetPackDcInfosReq) ProtoMessage() {}

func (x *GetStickerSetPackDcInfosReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStickerSetPackDcInfosReq.ProtoReflect.Descriptor instead.
func (*GetStickerSetPackDcInfosReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{89}
}

func (x *GetStickerSetPackDcInfosReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetStickerSetPackDcInfosReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 获取一个sticker下面的所有贴图信息的返回
type GetStickerSetPackDcInfosResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StPDcInfo []*StickerPackDocumentInfo `protobuf:"bytes,1,rep,name=StPDcInfo,proto3" json:"StPDcInfo,omitempty"`
}

func (x *GetStickerSetPackDcInfosResult) Reset() {
	*x = GetStickerSetPackDcInfosResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStickerSetPackDcInfosResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStickerSetPackDcInfosResult) ProtoMessage() {}

func (x *GetStickerSetPackDcInfosResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStickerSetPackDcInfosResult.ProtoReflect.Descriptor instead.
func (*GetStickerSetPackDcInfosResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{90}
}

func (x *GetStickerSetPackDcInfosResult) GetStPDcInfo() []*StickerPackDocumentInfo {
	if x != nil {
		return x.StPDcInfo
	}
	return nil
}

// 添加喜欢的sticker 请求
type AddOrDeleteFaveSticerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`       // 用户ID
	StickerId int64         `protobuf:"varint,2,opt,name=StickerId,proto3" json:"StickerId,omitempty"` // sticker 的 id
	Unfave    bool          `protobuf:"varint,3,opt,name=Unfave,proto3" json:"Unfave,omitempty"`       // 是否取消 true: 取消喜欢 false: 添加为喜欢
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *AddOrDeleteFaveSticerReq) Reset() {
	*x = AddOrDeleteFaveSticerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOrDeleteFaveSticerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOrDeleteFaveSticerReq) ProtoMessage() {}

func (x *AddOrDeleteFaveSticerReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOrDeleteFaveSticerReq.ProtoReflect.Descriptor instead.
func (*AddOrDeleteFaveSticerReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{91}
}

func (x *AddOrDeleteFaveSticerReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddOrDeleteFaveSticerReq) GetStickerId() int64 {
	if x != nil {
		return x.StickerId
	}
	return 0
}

func (x *AddOrDeleteFaveSticerReq) GetUnfave() bool {
	if x != nil {
		return x.Unfave
	}
	return false
}

func (x *AddOrDeleteFaveSticerReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 添加喜欢的sticker 返回
type AddOrDeleteFaveSticerResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode ReErrCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=infoserver.ReErrCode" json:"ErrorCode,omitempty"` // 返回错误码
}

func (x *AddOrDeleteFaveSticerResult) Reset() {
	*x = AddOrDeleteFaveSticerResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOrDeleteFaveSticerResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOrDeleteFaveSticerResult) ProtoMessage() {}

func (x *AddOrDeleteFaveSticerResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOrDeleteFaveSticerResult.ProtoReflect.Descriptor instead.
func (*AddOrDeleteFaveSticerResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{92}
}

func (x *AddOrDeleteFaveSticerResult) GetErrorCode() ReErrCode {
	if x != nil {
		return x.ErrorCode
	}
	return ReErrCode_Success
}

// 获取已经添加的的喜爱单个贴图 请求
type GetFavedStickersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Hash   int32         `protobuf:"varint,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetFavedStickersReq) Reset() {
	*x = GetFavedStickersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFavedStickersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFavedStickersReq) ProtoMessage() {}

func (x *GetFavedStickersReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFavedStickersReq.ProtoReflect.Descriptor instead.
func (*GetFavedStickersReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{93}
}

func (x *GetFavedStickersReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetFavedStickersReq) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *GetFavedStickersReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 获取已经添加的的喜爱单个贴图 返回
type GetFavedStickersResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash      int32                      `protobuf:"varint,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Packs     []*StickerPack             `protobuf:"bytes,2,rep,name=packs,proto3" json:"packs,omitempty"`
	Stickers  []*StickerPackDocumentBase `protobuf:"bytes,3,rep,name=stickers,proto3" json:"stickers,omitempty"`
	ErrorCode ReErrCode                  `protobuf:"varint,4,opt,name=ErrorCode,proto3,enum=infoserver.ReErrCode" json:"ErrorCode,omitempty"` // 返回错误码
}

func (x *GetFavedStickersResult) Reset() {
	*x = GetFavedStickersResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFavedStickersResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFavedStickersResult) ProtoMessage() {}

func (x *GetFavedStickersResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFavedStickersResult.ProtoReflect.Descriptor instead.
func (*GetFavedStickersResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{94}
}

func (x *GetFavedStickersResult) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *GetFavedStickersResult) GetPacks() []*StickerPack {
	if x != nil {
		return x.Packs
	}
	return nil
}

func (x *GetFavedStickersResult) GetStickers() []*StickerPackDocumentBase {
	if x != nil {
		return x.Stickers
	}
	return nil
}

func (x *GetFavedStickersResult) GetErrorCode() ReErrCode {
	if x != nil {
		return x.ErrorCode
	}
	return ReErrCode_Success
}

type StickerPack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Emoticon   string `protobuf:"bytes,1,opt,name=Emoticon,proto3" json:"Emoticon,omitempty"`
	DocumentId int64  `protobuf:"varint,2,opt,name=DocumentId,proto3" json:"DocumentId,omitempty"`
}

func (x *StickerPack) Reset() {
	*x = StickerPack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StickerPack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StickerPack) ProtoMessage() {}

func (x *StickerPack) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StickerPack.ProtoReflect.Descriptor instead.
func (*StickerPack) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{95}
}

func (x *StickerPack) GetEmoticon() string {
	if x != nil {
		return x.Emoticon
	}
	return ""
}

func (x *StickerPack) GetDocumentId() int64 {
	if x != nil {
		return x.DocumentId
	}
	return 0
}

// 用户安装sticker集合的请求
type StoreUserStickerSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StickersetId int32         `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	Installed    bool          `protobuf:"varint,3,opt,name=installed,proto3" json:"installed,omitempty"`
	Disabled     bool          `protobuf:"varint,4,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Order        int32         `protobuf:"varint,5,opt,name=order,proto3" json:"order,omitempty"`
	Archived     bool          `protobuf:"varint,6,opt,name=archived,proto3" json:"archived,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *StoreUserStickerSetReq) Reset() {
	*x = StoreUserStickerSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreUserStickerSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreUserStickerSetReq) ProtoMessage() {}

func (x *StoreUserStickerSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreUserStickerSetReq.ProtoReflect.Descriptor instead.
func (*StoreUserStickerSetReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{96}
}

func (x *StoreUserStickerSetReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *StoreUserStickerSetReq) GetStickersetId() int32 {
	if x != nil {
		return x.StickersetId
	}
	return 0
}

func (x *StoreUserStickerSetReq) GetInstalled() bool {
	if x != nil {
		return x.Installed
	}
	return false
}

func (x *StoreUserStickerSetReq) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *StoreUserStickerSetReq) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *StoreUserStickerSetReq) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

func (x *StoreUserStickerSetReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 用户安装sticker集合的返回
type StoreUserStickerSetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *StoreUserStickerSetResult) Reset() {
	*x = StoreUserStickerSetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreUserStickerSetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreUserStickerSetResult) ProtoMessage() {}

func (x *StoreUserStickerSetResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreUserStickerSetResult.ProtoReflect.Descriptor instead.
func (*StoreUserStickerSetResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{97}
}

func (x *StoreUserStickerSetResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 更新用户stickerdisable请求
type UpdateUserStickerSetDisabledReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StickersetId int32         `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	Disabled     bool          `protobuf:"varint,4,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UpdateUserStickerSetDisabledReq) Reset() {
	*x = UpdateUserStickerSetDisabledReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserStickerSetDisabledReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserStickerSetDisabledReq) ProtoMessage() {}

func (x *UpdateUserStickerSetDisabledReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserStickerSetDisabledReq.ProtoReflect.Descriptor instead.
func (*UpdateUserStickerSetDisabledReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{98}
}

func (x *UpdateUserStickerSetDisabledReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserStickerSetDisabledReq) GetStickersetId() int32 {
	if x != nil {
		return x.StickersetId
	}
	return 0
}

func (x *UpdateUserStickerSetDisabledReq) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *UpdateUserStickerSetDisabledReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 更新用户stickerdisable结果
type UpdateUserStickerSetDisabledResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *UpdateUserStickerSetDisabledResult) Reset() {
	*x = UpdateUserStickerSetDisabledResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserStickerSetDisabledResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserStickerSetDisabledResult) ProtoMessage() {}

func (x *UpdateUserStickerSetDisabledResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserStickerSetDisabledResult.ProtoReflect.Descriptor instead.
func (*UpdateUserStickerSetDisabledResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{99}
}

func (x *UpdateUserStickerSetDisabledResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 更新用户的Sticker的顺序
type UpdateUserStickerSetOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StickersetId int32         `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	Order        int32         `protobuf:"varint,3,opt,name=order,proto3" json:"order,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UpdateUserStickerSetOrderReq) Reset() {
	*x = UpdateUserStickerSetOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserStickerSetOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserStickerSetOrderReq) ProtoMessage() {}

func (x *UpdateUserStickerSetOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserStickerSetOrderReq.ProtoReflect.Descriptor instead.
func (*UpdateUserStickerSetOrderReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{100}
}

func (x *UpdateUserStickerSetOrderReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserStickerSetOrderReq) GetStickersetId() int32 {
	if x != nil {
		return x.StickersetId
	}
	return 0
}

func (x *UpdateUserStickerSetOrderReq) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *UpdateUserStickerSetOrderReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 更新用户的Sticker的顺序返回
type UpdateUserStickerSetOrderResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *UpdateUserStickerSetOrderResult) Reset() {
	*x = UpdateUserStickerSetOrderResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserStickerSetOrderResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserStickerSetOrderResult) ProtoMessage() {}

func (x *UpdateUserStickerSetOrderResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserStickerSetOrderResult.ProtoReflect.Descriptor instead.
func (*UpdateUserStickerSetOrderResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{101}
}

func (x *UpdateUserStickerSetOrderResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 更新用户的Sticker install和archived
type UpdateUserStickerSetInstallArReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StickersetId int32         `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	Archived     bool          `protobuf:"varint,3,opt,name=archived,proto3" json:"archived,omitempty"`
	Installed    bool          `protobuf:"varint,4,opt,name=installed,proto3" json:"installed,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UpdateUserStickerSetInstallArReq) Reset() {
	*x = UpdateUserStickerSetInstallArReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserStickerSetInstallArReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserStickerSetInstallArReq) ProtoMessage() {}

func (x *UpdateUserStickerSetInstallArReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserStickerSetInstallArReq.ProtoReflect.Descriptor instead.
func (*UpdateUserStickerSetInstallArReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{102}
}

func (x *UpdateUserStickerSetInstallArReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserStickerSetInstallArReq) GetStickersetId() int32 {
	if x != nil {
		return x.StickersetId
	}
	return 0
}

func (x *UpdateUserStickerSetInstallArReq) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

func (x *UpdateUserStickerSetInstallArReq) GetInstalled() bool {
	if x != nil {
		return x.Installed
	}
	return false
}

func (x *UpdateUserStickerSetInstallArReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 更新用户的Sticker install和archived的返回
type UpdateUserStickerSetInstallArResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *UpdateUserStickerSetInstallArResult) Reset() {
	*x = UpdateUserStickerSetInstallArResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserStickerSetInstallArResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserStickerSetInstallArResult) ProtoMessage() {}

func (x *UpdateUserStickerSetInstallArResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserStickerSetInstallArResult.ProtoReflect.Descriptor instead.
func (*UpdateUserStickerSetInstallArResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{103}
}

func (x *UpdateUserStickerSetInstallArResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 删除sticker的请求
type DeleteuserStickerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StickersetId int32         `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *DeleteuserStickerReq) Reset() {
	*x = DeleteuserStickerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteuserStickerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteuserStickerReq) ProtoMessage() {}

func (x *DeleteuserStickerReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteuserStickerReq.ProtoReflect.Descriptor instead.
func (*DeleteuserStickerReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{104}
}

func (x *DeleteuserStickerReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DeleteuserStickerReq) GetStickersetId() int32 {
	if x != nil {
		return x.StickersetId
	}
	return 0
}

func (x *DeleteuserStickerReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 删除sticker的返回
type DeleteuserStickerResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int32     `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StickersetId int32     `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	Errorcode    ReErrCode `protobuf:"varint,3,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *DeleteuserStickerResult) Reset() {
	*x = DeleteuserStickerResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteuserStickerResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteuserStickerResult) ProtoMessage() {}

func (x *DeleteuserStickerResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteuserStickerResult.ProtoReflect.Descriptor instead.
func (*DeleteuserStickerResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{105}
}

func (x *DeleteuserStickerResult) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DeleteuserStickerResult) GetStickersetId() int32 {
	if x != nil {
		return x.StickersetId
	}
	return 0
}

func (x *DeleteuserStickerResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 用户Sticker的信息
type UserStickerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StickersetId int32   `protobuf:"varint,1,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	Installed    bool    `protobuf:"varint,2,opt,name=installed,proto3" json:"installed,omitempty"`
	Disabled     bool    `protobuf:"varint,3,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Order        int32   `protobuf:"varint,4,opt,name=order,proto3" json:"order,omitempty"`
	AccessHash   int64   `protobuf:"varint,5,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Free         bool    `protobuf:"varint,6,opt,name=free,proto3" json:"free,omitempty"`
	Official     bool    `protobuf:"varint,7,opt,name=official,proto3" json:"official,omitempty"`
	Archived     bool    `protobuf:"varint,8,opt,name=archived,proto3" json:"archived,omitempty"`
	Masks        bool    `protobuf:"varint,9,opt,name=masks,proto3" json:"masks,omitempty"`
	Title        string  `protobuf:"bytes,10,opt,name=title,proto3" json:"title,omitempty"`
	ShortName    string  `protobuf:"bytes,11,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Count        int32   `protobuf:"varint,12,opt,name=count,proto3" json:"count,omitempty"`
	Hash         int64   `protobuf:"varint,13,opt,name=hash,proto3" json:"hash,omitempty"`
	Emotico      string  `protobuf:"bytes,14,opt,name=emotico,proto3" json:"emotico,omitempty"`
	Documents    []int32 `protobuf:"varint,15,rep,packed,name=documents,proto3" json:"documents,omitempty"`
}

func (x *UserStickerInfo) Reset() {
	*x = UserStickerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStickerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStickerInfo) ProtoMessage() {}

func (x *UserStickerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStickerInfo.ProtoReflect.Descriptor instead.
func (*UserStickerInfo) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{106}
}

func (x *UserStickerInfo) GetStickersetId() int32 {
	if x != nil {
		return x.StickersetId
	}
	return 0
}

func (x *UserStickerInfo) GetInstalled() bool {
	if x != nil {
		return x.Installed
	}
	return false
}

func (x *UserStickerInfo) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *UserStickerInfo) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *UserStickerInfo) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *UserStickerInfo) GetFree() bool {
	if x != nil {
		return x.Free
	}
	return false
}

func (x *UserStickerInfo) GetOfficial() bool {
	if x != nil {
		return x.Official
	}
	return false
}

func (x *UserStickerInfo) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

func (x *UserStickerInfo) GetMasks() bool {
	if x != nil {
		return x.Masks
	}
	return false
}

func (x *UserStickerInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UserStickerInfo) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *UserStickerInfo) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *UserStickerInfo) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *UserStickerInfo) GetEmotico() string {
	if x != nil {
		return x.Emotico
	}
	return ""
}

func (x *UserStickerInfo) GetDocuments() []int32 {
	if x != nil {
		return x.Documents
	}
	return nil
}

// 获取的sticker信息的列表
type UserStickerInfoArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StickerInfo []*UserStickerInfo `protobuf:"bytes,1,rep,name=stickerInfo,proto3" json:"stickerInfo,omitempty"`
}

func (x *UserStickerInfoArr) Reset() {
	*x = UserStickerInfoArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStickerInfoArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStickerInfoArr) ProtoMessage() {}

func (x *UserStickerInfoArr) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStickerInfoArr.ProtoReflect.Descriptor instead.
func (*UserStickerInfoArr) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{107}
}

func (x *UserStickerInfoArr) GetStickerInfo() []*UserStickerInfo {
	if x != nil {
		return x.StickerInfo
	}
	return nil
}

// 获取的sticker集合的所有信息
type StickerSetInfoArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StickerInfo []*StickerSetInfo `protobuf:"bytes,1,rep,name=stickerInfo,proto3" json:"stickerInfo,omitempty"`
}

func (x *StickerSetInfoArr) Reset() {
	*x = StickerSetInfoArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StickerSetInfoArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StickerSetInfoArr) ProtoMessage() {}

func (x *StickerSetInfoArr) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StickerSetInfoArr.ProtoReflect.Descriptor instead.
func (*StickerSetInfoArr) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{108}
}

func (x *StickerSetInfoArr) GetStickerInfo() []*StickerSetInfo {
	if x != nil {
		return x.StickerInfo
	}
	return nil
}

// 获取用户的所有的贴图请求
type GetuserAllStickersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetuserAllStickersReq) Reset() {
	*x = GetuserAllStickersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetuserAllStickersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetuserAllStickersReq) ProtoMessage() {}

func (x *GetuserAllStickersReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetuserAllStickersReq.ProtoReflect.Descriptor instead.
func (*GetuserAllStickersReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{109}
}

func (x *GetuserAllStickersReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetuserAllStickersReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 获取用户的所有的贴图的返回
type GetuserAllStickersResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StickerInfoArr []*UserStickerInfo `protobuf:"bytes,1,rep,name=stickerInfoArr,proto3" json:"stickerInfoArr,omitempty"`
	Errorcode      ReErrCode          `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *GetuserAllStickersResult) Reset() {
	*x = GetuserAllStickersResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetuserAllStickersResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetuserAllStickersResult) ProtoMessage() {}

func (x *GetuserAllStickersResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetuserAllStickersResult.ProtoReflect.Descriptor instead.
func (*GetuserAllStickersResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{110}
}

func (x *GetuserAllStickersResult) GetStickerInfoArr() []*UserStickerInfo {
	if x != nil {
		return x.StickerInfoArr
	}
	return nil
}

func (x *GetuserAllStickersResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 获取所有sticker集合信息
type GetAllStickerSetsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetAllStickerSetsReq) Reset() {
	*x = GetAllStickerSetsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllStickerSetsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllStickerSetsReq) ProtoMessage() {}

func (x *GetAllStickerSetsReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllStickerSetsReq.ProtoReflect.Descriptor instead.
func (*GetAllStickerSetsReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{111}
}

func (x *GetAllStickerSetsReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 获取所有sticker集合信息的返回
type GetAllStickerSetsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StickerInfoArr []*StickerSetInfo `protobuf:"bytes,1,rep,name=stickerInfoArr,proto3" json:"stickerInfoArr,omitempty"`
	Errorcode      ReErrCode         `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *GetAllStickerSetsResult) Reset() {
	*x = GetAllStickerSetsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllStickerSetsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllStickerSetsResult) ProtoMessage() {}

func (x *GetAllStickerSetsResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllStickerSetsResult.ProtoReflect.Descriptor instead.
func (*GetAllStickerSetsResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{112}
}

func (x *GetAllStickerSetsResult) GetStickerInfoArr() []*StickerSetInfo {
	if x != nil {
		return x.StickerInfoArr
	}
	return nil
}

func (x *GetAllStickerSetsResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 删除单个sticker
type DeleteStickerPackDocumentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StickersetId int64 `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
}

func (x *DeleteStickerPackDocumentReq) Reset() {
	*x = DeleteStickerPackDocumentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStickerPackDocumentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStickerPackDocumentReq) ProtoMessage() {}

func (x *DeleteStickerPackDocumentReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStickerPackDocumentReq.ProtoReflect.Descriptor instead.
func (*DeleteStickerPackDocumentReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{113}
}

func (x *DeleteStickerPackDocumentReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteStickerPackDocumentReq) GetStickersetId() int64 {
	if x != nil {
		return x.StickersetId
	}
	return 0
}

// 删除单个sticker返回
type DeleteStickerPackDocumentResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *DeleteStickerPackDocumentResult) Reset() {
	*x = DeleteStickerPackDocumentResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStickerPackDocumentResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStickerPackDocumentResult) ProtoMessage() {}

func (x *DeleteStickerPackDocumentResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStickerPackDocumentResult.ProtoReflect.Descriptor instead.
func (*DeleteStickerPackDocumentResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{114}
}

func (x *DeleteStickerPackDocumentResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 获取作者sticker
type GetAuthorStickerSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SetId  int64 `protobuf:"varint,2,opt,name=set_id,json=setId,proto3" json:"set_id,omitempty"`
}

func (x *GetAuthorStickerSetReq) Reset() {
	*x = GetAuthorStickerSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuthorStickerSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuthorStickerSetReq) ProtoMessage() {}

func (x *GetAuthorStickerSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuthorStickerSetReq.ProtoReflect.Descriptor instead.
func (*GetAuthorStickerSetReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{115}
}

func (x *GetAuthorStickerSetReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetAuthorStickerSetReq) GetSetId() int64 {
	if x != nil {
		return x.SetId
	}
	return 0
}

// 获取作者sticker返回
type GetAuthorStickerSetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode ReErrCode         `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=infoserver.ReErrCode" json:"ErrorCode,omitempty"` //返回错误码
	Set       *AuthorStickerSet `protobuf:"bytes,2,opt,name=set,proto3" json:"set,omitempty"`
}

func (x *GetAuthorStickerSetResult) Reset() {
	*x = GetAuthorStickerSetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuthorStickerSetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuthorStickerSetResult) ProtoMessage() {}

func (x *GetAuthorStickerSetResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuthorStickerSetResult.ProtoReflect.Descriptor instead.
func (*GetAuthorStickerSetResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{116}
}

func (x *GetAuthorStickerSetResult) GetErrorCode() ReErrCode {
	if x != nil {
		return x.ErrorCode
	}
	return ReErrCode_Success
}

func (x *GetAuthorStickerSetResult) GetSet() *AuthorStickerSet {
	if x != nil {
		return x.Set
	}
	return nil
}

// 获取作者所有sticker
type GetAuthorAllStickerSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetAuthorAllStickerSetReq) Reset() {
	*x = GetAuthorAllStickerSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuthorAllStickerSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuthorAllStickerSetReq) ProtoMessage() {}

func (x *GetAuthorAllStickerSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuthorAllStickerSetReq.ProtoReflect.Descriptor instead.
func (*GetAuthorAllStickerSetReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{117}
}

func (x *GetAuthorAllStickerSetReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 获取作者所有sticker返回
type GetAuthorAllStickerSetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode ReErrCode           `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=infoserver.ReErrCode" json:"ErrorCode,omitempty"` //返回错误码
	Sets      []*AuthorStickerSet `protobuf:"bytes,2,rep,name=sets,proto3" json:"sets,omitempty"`
}

func (x *GetAuthorAllStickerSetResult) Reset() {
	*x = GetAuthorAllStickerSetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuthorAllStickerSetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuthorAllStickerSetResult) ProtoMessage() {}

func (x *GetAuthorAllStickerSetResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuthorAllStickerSetResult.ProtoReflect.Descriptor instead.
func (*GetAuthorAllStickerSetResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{118}
}

func (x *GetAuthorAllStickerSetResult) GetErrorCode() ReErrCode {
	if x != nil {
		return x.ErrorCode
	}
	return ReErrCode_Success
}

func (x *GetAuthorAllStickerSetResult) GetSets() []*AuthorStickerSet {
	if x != nil {
		return x.Sets
	}
	return nil
}

// 结构体AuthorStickerSet
type AuthorStickerSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StickersetId int64  `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	ShortName    string `protobuf:"bytes,3,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Archived     bool   `protobuf:"varint,4,opt,name=archived,proto3" json:"archived,omitempty"`
	Installed    bool   `protobuf:"varint,5,opt,name=installed,proto3" json:"installed,omitempty"`
	Disabled     bool   `protobuf:"varint,6,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Ordered      int32  `protobuf:"varint,7,opt,name=ordered,proto3" json:"ordered,omitempty"`
	Created      int32  `protobuf:"varint,8,opt,name=created,proto3" json:"created,omitempty"`
	Updated      int32  `protobuf:"varint,9,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *AuthorStickerSet) Reset() {
	*x = AuthorStickerSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorStickerSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorStickerSet) ProtoMessage() {}

func (x *AuthorStickerSet) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorStickerSet.ProtoReflect.Descriptor instead.
func (*AuthorStickerSet) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{119}
}

func (x *AuthorStickerSet) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AuthorStickerSet) GetStickersetId() int64 {
	if x != nil {
		return x.StickersetId
	}
	return 0
}

func (x *AuthorStickerSet) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *AuthorStickerSet) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

func (x *AuthorStickerSet) GetInstalled() bool {
	if x != nil {
		return x.Installed
	}
	return false
}

func (x *AuthorStickerSet) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *AuthorStickerSet) GetOrdered() int32 {
	if x != nil {
		return x.Ordered
	}
	return 0
}

func (x *AuthorStickerSet) GetCreated() int32 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *AuthorStickerSet) GetUpdated() int32 {
	if x != nil {
		return x.Updated
	}
	return 0
}

// 统计sticker数量
type CountAuthorAllStickerSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *CountAuthorAllStickerSetReq) Reset() {
	*x = CountAuthorAllStickerSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAuthorAllStickerSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAuthorAllStickerSetReq) ProtoMessage() {}

func (x *CountAuthorAllStickerSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAuthorAllStickerSetReq.ProtoReflect.Descriptor instead.
func (*CountAuthorAllStickerSetReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{120}
}

func (x *CountAuthorAllStickerSetReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 统计拥有sticker数量返回
type CountAuthorAllStickerSetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode ReErrCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=infoserver.ReErrCode" json:"ErrorCode,omitempty"` //返回错误码
	Count     int64     `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CountAuthorAllStickerSetResult) Reset() {
	*x = CountAuthorAllStickerSetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAuthorAllStickerSetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAuthorAllStickerSetResult) ProtoMessage() {}

func (x *CountAuthorAllStickerSetResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAuthorAllStickerSetResult.ProtoReflect.Descriptor instead.
func (*CountAuthorAllStickerSetResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{121}
}

func (x *CountAuthorAllStickerSetResult) GetErrorCode() ReErrCode {
	if x != nil {
		return x.ErrorCode
	}
	return ReErrCode_Success
}

func (x *CountAuthorAllStickerSetResult) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

// 用户gif的动态图集合
type UserGifInfoArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GifArr []*UserSaveGifInfo `protobuf:"bytes,1,rep,name=gif_arr,json=gifArr,proto3" json:"gif_arr,omitempty"`
}

func (x *UserGifInfoArr) Reset() {
	*x = UserGifInfoArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGifInfoArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGifInfoArr) ProtoMessage() {}

func (x *UserGifInfoArr) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGifInfoArr.ProtoReflect.Descriptor instead.
func (*UserGifInfoArr) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{122}
}

func (x *UserGifInfoArr) GetGifArr() []*UserSaveGifInfo {
	if x != nil {
		return x.GifArr
	}
	return nil
}

// 保存用户动态图的请求
type UserSaveGifInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GifId   string `protobuf:"bytes,2,opt,name=gif_id,json=gifId,proto3" json:"gif_id,omitempty"`
	Fid     uint64 `protobuf:"varint,3,opt,name=fid,proto3" json:"fid,omitempty"`
	GitHash int64  `protobuf:"varint,4,opt,name=git_hash,json=gitHash,proto3" json:"git_hash,omitempty"`
}

func (x *UserSaveGifInfo) Reset() {
	*x = UserSaveGifInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSaveGifInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSaveGifInfo) ProtoMessage() {}

func (x *UserSaveGifInfo) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSaveGifInfo.ProtoReflect.Descriptor instead.
func (*UserSaveGifInfo) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{123}
}

func (x *UserSaveGifInfo) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserSaveGifInfo) GetGifId() string {
	if x != nil {
		return x.GifId
	}
	return ""
}

func (x *UserSaveGifInfo) GetFid() uint64 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *UserSaveGifInfo) GetGitHash() int64 {
	if x != nil {
		return x.GitHash
	}
	return 0
}

// 保存gif动态图的请求
type SaveUserGifReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GifId   string        `protobuf:"bytes,2,opt,name=gif_id,json=gifId,proto3" json:"gif_id,omitempty"`
	Fid     uint64        `protobuf:"varint,3,opt,name=fid,proto3" json:"fid,omitempty"`
	GitHash int64         `protobuf:"varint,4,opt,name=git_hash,json=gitHash,proto3" json:"git_hash,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *SaveUserGifReq) Reset() {
	*x = SaveUserGifReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveUserGifReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveUserGifReq) ProtoMessage() {}

func (x *SaveUserGifReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveUserGifReq.ProtoReflect.Descriptor instead.
func (*SaveUserGifReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{124}
}

func (x *SaveUserGifReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SaveUserGifReq) GetGifId() string {
	if x != nil {
		return x.GifId
	}
	return ""
}

func (x *SaveUserGifReq) GetFid() uint64 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *SaveUserGifReq) GetGitHash() int64 {
	if x != nil {
		return x.GitHash
	}
	return 0
}

func (x *SaveUserGifReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 保存gif动态图的请求返回
type SaveUserGifResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *SaveUserGifResult) Reset() {
	*x = SaveUserGifResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveUserGifResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveUserGifResult) ProtoMessage() {}

func (x *SaveUserGifResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveUserGifResult.ProtoReflect.Descriptor instead.
func (*SaveUserGifResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{125}
}

func (x *SaveUserGifResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 删除动态图的请求
type DelUserGifReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Fid     uint64        `protobuf:"varint,3,opt,name=fid,proto3" json:"fid,omitempty"`
	GitHash int64         `protobuf:"varint,4,opt,name=git_hash,json=gitHash,proto3" json:"git_hash,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *DelUserGifReq) Reset() {
	*x = DelUserGifReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelUserGifReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelUserGifReq) ProtoMessage() {}

func (x *DelUserGifReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelUserGifReq.ProtoReflect.Descriptor instead.
func (*DelUserGifReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{126}
}

func (x *DelUserGifReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DelUserGifReq) GetFid() uint64 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *DelUserGifReq) GetGitHash() int64 {
	if x != nil {
		return x.GitHash
	}
	return 0
}

func (x *DelUserGifReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 删除动态图的返回
type DelUserGifResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *DelUserGifResult) Reset() {
	*x = DelUserGifResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelUserGifResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelUserGifResult) ProtoMessage() {}

func (x *DelUserGifResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelUserGifResult.ProtoReflect.Descriptor instead.
func (*DelUserGifResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{127}
}

func (x *DelUserGifResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 获取用户的gifs
type GetUserGifsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Hash   int32         `protobuf:"varint,2,opt,name=hash,proto3" json:"hash,omitempty"` //校验hash
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetUserGifsReq) Reset() {
	*x = GetUserGifsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserGifsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserGifsReq) ProtoMessage() {}

func (x *GetUserGifsReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserGifsReq.ProtoReflect.Descriptor instead.
func (*GetUserGifsReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{128}
}

func (x *GetUserGifsReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetUserGifsReq) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *GetUserGifsReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 获取用户的gifs返回
type GetUserGifsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32              `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Hash      int32              `protobuf:"varint,2,opt,name=hash,proto3" json:"hash,omitempty"` //校验hash
	GifArr    []*UserSaveGifInfo `protobuf:"bytes,3,rep,name=gif_arr,json=gifArr,proto3" json:"gif_arr,omitempty"`
	Errorcode ReErrCode          `protobuf:"varint,4,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *GetUserGifsResult) Reset() {
	*x = GetUserGifsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserGifsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserGifsResult) ProtoMessage() {}

func (x *GetUserGifsResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserGifsResult.ProtoReflect.Descriptor instead.
func (*GetUserGifsResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{129}
}

func (x *GetUserGifsResult) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetUserGifsResult) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *GetUserGifsResult) GetGifArr() []*UserSaveGifInfo {
	if x != nil {
		return x.GifArr
	}
	return nil
}

func (x *GetUserGifsResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 检测用户是否是黑名单的请求
type CheckUserIsBlockedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"` //自己的id
	UserId int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //需要判断是否是自己黑名单的ID
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *CheckUserIsBlockedReq) Reset() {
	*x = CheckUserIsBlockedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserIsBlockedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserIsBlockedReq) ProtoMessage() {}

func (x *CheckUserIsBlockedReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserIsBlockedReq.ProtoReflect.Descriptor instead.
func (*CheckUserIsBlockedReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{130}
}

func (x *CheckUserIsBlockedReq) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *CheckUserIsBlockedReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CheckUserIsBlockedReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 检测用户黑名单的返回
type CheckUserIsBlockedResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *CheckUserIsBlockedResult) Reset() {
	*x = CheckUserIsBlockedResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserIsBlockedResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserIsBlockedResult) ProtoMessage() {}

func (x *CheckUserIsBlockedResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserIsBlockedResult.ProtoReflect.Descriptor instead.
func (*CheckUserIsBlockedResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{131}
}

func (x *CheckUserIsBlockedResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 注册用户请求的基础信息
type RegisterUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`               //国家码
	AccessHash     int64  `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`   //给用户生成的哈希值
	Phone          string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`                                //用户的电话号码
	CountryCode    string `protobuf:"bytes,4,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"` //国家码
	LocalPhone     string `protobuf:"bytes,5,opt,name=local_phone,json=localPhone,proto3" json:"local_phone,omitempty"`    //去掉国家码的电话号码
	FirstName      string `protobuf:"bytes,6,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName       string `protobuf:"bytes,7,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	IsBot          bool   `protobuf:"varint,8,opt,name=is_bot,json=isBot,proto3" json:"is_bot,omitempty"` //是否是机器人
	BotInfoVersion int32  `protobuf:"varint,9,opt,name=bot_info_version,json=botInfoVersion,proto3" json:"bot_info_version,omitempty"`
	BotChatHistory bool   `protobuf:"varint,10,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNoChats     bool   `protobuf:"varint,11,opt,name=bot_no_chats,json=botNoChats,proto3" json:"bot_no_chats,omitempty"`
}

func (x *RegisterUserInfo) Reset() {
	*x = RegisterUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterUserInfo) ProtoMessage() {}

func (x *RegisterUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterUserInfo.ProtoReflect.Descriptor instead.
func (*RegisterUserInfo) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{132}
}

func (x *RegisterUserInfo) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RegisterUserInfo) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *RegisterUserInfo) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *RegisterUserInfo) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *RegisterUserInfo) GetLocalPhone() string {
	if x != nil {
		return x.LocalPhone
	}
	return ""
}

func (x *RegisterUserInfo) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *RegisterUserInfo) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *RegisterUserInfo) GetIsBot() bool {
	if x != nil {
		return x.IsBot
	}
	return false
}

func (x *RegisterUserInfo) GetBotInfoVersion() int32 {
	if x != nil {
		return x.BotInfoVersion
	}
	return 0
}

func (x *RegisterUserInfo) GetBotChatHistory() bool {
	if x != nil {
		return x.BotChatHistory
	}
	return false
}

func (x *RegisterUserInfo) GetBotNoChats() bool {
	if x != nil {
		return x.BotNoChats
	}
	return false
}

// 更新用户信息返回
type UpdateUserInfoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uinfo     *UserInfo `protobuf:"bytes,1,opt,name=uinfo,proto3" json:"uinfo,omitempty"`          //用户的具体信息
	ErrorCode int32     `protobuf:"varint,2,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"` // 失败的错误码
	Result    bool      `protobuf:"varint,3,opt,name=Result,proto3" json:"Result,omitempty"`       //成功或者失败
}

func (x *UpdateUserInfoResult) Reset() {
	*x = UpdateUserInfoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserInfoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserInfoResult) ProtoMessage() {}

func (x *UpdateUserInfoResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserInfoResult.ProtoReflect.Descriptor instead.
func (*UpdateUserInfoResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{133}
}

func (x *UpdateUserInfoResult) GetUinfo() *UserInfo {
	if x != nil {
		return x.Uinfo
	}
	return nil
}

func (x *UpdateUserInfoResult) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *UpdateUserInfoResult) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 检测用户哈希值是否合法请求参数
type CheckUserAccessHashValidReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`         //需要校验的用户的ID
	AccessHash int64         `protobuf:"varint,2,opt,name=AccessHash,proto3" json:"AccessHash,omitempty"` //需要校验的用户的哈希值
	Debug      *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`            //日志记录相关的
}

func (x *CheckUserAccessHashValidReq) Reset() {
	*x = CheckUserAccessHashValidReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserAccessHashValidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserAccessHashValidReq) ProtoMessage() {}

func (x *CheckUserAccessHashValidReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserAccessHashValidReq.ProtoReflect.Descriptor instead.
func (*CheckUserAccessHashValidReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{134}
}

func (x *CheckUserAccessHashValidReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CheckUserAccessHashValidReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *CheckUserAccessHashValidReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 检测用户哈希值是否合法返回结构
type CheckUserAccessHashValidResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid   bool      `protobuf:"varint,1,opt,name=isValid,proto3" json:"isValid,omitempty"`                               //是否可用
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *CheckUserAccessHashValidResult) Reset() {
	*x = CheckUserAccessHashValidResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserAccessHashValidResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserAccessHashValidResult) ProtoMessage() {}

func (x *CheckUserAccessHashValidResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserAccessHashValidResult.ProtoReflect.Descriptor instead.
func (*CheckUserAccessHashValidResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{135}
}

func (x *CheckUserAccessHashValidResult) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CheckUserAccessHashValidResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 注册指定用户的请求
type RegisterUserInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccessHash     int64         `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	PhoneNumber    string        `protobuf:"bytes,3,opt,name=PhoneNumber,proto3" json:"PhoneNumber,omitempty"` //电话号码
	FirstName      string        `protobuf:"bytes,4,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	LastName       string        `protobuf:"bytes,5,opt,name=LastName,proto3" json:"LastName,omitempty"`
	IsBot          bool          `protobuf:"varint,6,opt,name=is_bot,json=isBot,proto3" json:"is_bot,omitempty"`
	BotInfoVersion int32         `protobuf:"varint,7,opt,name=bot_info_version,json=botInfoVersion,proto3" json:"bot_info_version,omitempty"`
	BotChatHistory bool          `protobuf:"varint,8,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNoChats     bool          `protobuf:"varint,9,opt,name=bot_no_chats,json=botNoChats,proto3" json:"bot_no_chats,omitempty"`
	Debug          *pbcomm.Debug `protobuf:"bytes,10,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *RegisterUserInfoReq) Reset() {
	*x = RegisterUserInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterUserInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterUserInfoReq) ProtoMessage() {}

func (x *RegisterUserInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterUserInfoReq.ProtoReflect.Descriptor instead.
func (*RegisterUserInfoReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{136}
}

func (x *RegisterUserInfoReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RegisterUserInfoReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *RegisterUserInfoReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *RegisterUserInfoReq) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *RegisterUserInfoReq) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *RegisterUserInfoReq) GetIsBot() bool {
	if x != nil {
		return x.IsBot
	}
	return false
}

func (x *RegisterUserInfoReq) GetBotInfoVersion() int32 {
	if x != nil {
		return x.BotInfoVersion
	}
	return 0
}

func (x *RegisterUserInfoReq) GetBotChatHistory() bool {
	if x != nil {
		return x.BotChatHistory
	}
	return false
}

func (x *RegisterUserInfoReq) GetBotNoChats() bool {
	if x != nil {
		return x.BotNoChats
	}
	return false
}

func (x *RegisterUserInfoReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 注册指定用户的请求
type RegisterUserInfoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uinfo     *UserInfo `protobuf:"bytes,1,opt,name=uinfo,proto3" json:"uinfo,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *RegisterUserInfoResult) Reset() {
	*x = RegisterUserInfoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterUserInfoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterUserInfoResult) ProtoMessage() {}

func (x *RegisterUserInfoResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterUserInfoResult.ProtoReflect.Descriptor instead.
func (*RegisterUserInfoResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{137}
}

func (x *RegisterUserInfoResult) GetUinfo() *UserInfo {
	if x != nil {
		return x.Uinfo
	}
	return nil
}

func (x *RegisterUserInfoResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 获取音效设置
type GetNotifySettingsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId  int32         `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	ReqType int32         `protobuf:"varint,2,opt,name=req_type,json=reqType,proto3" json:"req_type,omitempty"` // 1表示获取用户的  2.表示获取群的
	Debug   *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetNotifySettingsReq) Reset() {
	*x = GetNotifySettingsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNotifySettingsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotifySettingsReq) ProtoMessage() {}

func (x *GetNotifySettingsReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotifySettingsReq.ProtoReflect.Descriptor instead.
func (*GetNotifySettingsReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{138}
}

func (x *GetNotifySettingsReq) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *GetNotifySettingsReq) GetReqType() int32 {
	if x != nil {
		return x.ReqType
	}
	return 0
}

func (x *GetNotifySettingsReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 音效设置返回
type GetNotifySettingsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowPreviews bool      `protobuf:"varint,1,opt,name=Show_previews,json=ShowPreviews,proto3" json:"Show_previews,omitempty"` // 是否展示预览
	Silent       bool      `protobuf:"varint,2,opt,name=Silent,proto3" json:"Silent,omitempty"`                                 // 是否静音
	MuteUntil    int32     `protobuf:"varint,3,opt,name=Mute_until,json=MuteUntil,proto3" json:"Mute_until,omitempty"`          // 静音时长
	Sound        string    `protobuf:"bytes,4,opt,name=Sound,proto3" json:"Sound,omitempty"`                                    // 声音类型
	Errorcode    ReErrCode `protobuf:"varint,5,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *GetNotifySettingsResult) Reset() {
	*x = GetNotifySettingsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNotifySettingsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotifySettingsResult) ProtoMessage() {}

func (x *GetNotifySettingsResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotifySettingsResult.ProtoReflect.Descriptor instead.
func (*GetNotifySettingsResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{139}
}

func (x *GetNotifySettingsResult) GetShowPreviews() bool {
	if x != nil {
		return x.ShowPreviews
	}
	return false
}

func (x *GetNotifySettingsResult) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

func (x *GetNotifySettingsResult) GetMuteUntil() int32 {
	if x != nil {
		return x.MuteUntil
	}
	return 0
}

func (x *GetNotifySettingsResult) GetSound() string {
	if x != nil {
		return x.Sound
	}
	return ""
}

func (x *GetNotifySettingsResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 更新音效设置
type UpdateNotifySettingsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId       int32         `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	ReqType      int32         `protobuf:"varint,2,opt,name=req_type,json=reqType,proto3" json:"req_type,omitempty"` // 1表示获取用户的  2.表示获取群的
	ShowPreviews bool          `protobuf:"varint,3,opt,name=Show_previews,json=ShowPreviews,proto3" json:"Show_previews,omitempty"`
	Silent       bool          `protobuf:"varint,4,opt,name=Silent,proto3" json:"Silent,omitempty"`
	MuteUntil    int32         `protobuf:"varint,5,opt,name=Mute_until,json=MuteUntil,proto3" json:"Mute_until,omitempty"`
	Sound        string        `protobuf:"bytes,6,opt,name=Sound,proto3" json:"Sound,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UpdateNotifySettingsReq) Reset() {
	*x = UpdateNotifySettingsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNotifySettingsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNotifySettingsReq) ProtoMessage() {}

func (x *UpdateNotifySettingsReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNotifySettingsReq.ProtoReflect.Descriptor instead.
func (*UpdateNotifySettingsReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{140}
}

func (x *UpdateNotifySettingsReq) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *UpdateNotifySettingsReq) GetReqType() int32 {
	if x != nil {
		return x.ReqType
	}
	return 0
}

func (x *UpdateNotifySettingsReq) GetShowPreviews() bool {
	if x != nil {
		return x.ShowPreviews
	}
	return false
}

func (x *UpdateNotifySettingsReq) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

func (x *UpdateNotifySettingsReq) GetMuteUntil() int32 {
	if x != nil {
		return x.MuteUntil
	}
	return 0
}

func (x *UpdateNotifySettingsReq) GetSound() string {
	if x != nil {
		return x.Sound
	}
	return ""
}

func (x *UpdateNotifySettingsReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 更新音效
type UpdateNotifySettingsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *UpdateNotifySettingsResult) Reset() {
	*x = UpdateNotifySettingsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNotifySettingsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNotifySettingsResult) ProtoMessage() {}

func (x *UpdateNotifySettingsResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNotifySettingsResult.ProtoReflect.Descriptor instead.
func (*UpdateNotifySettingsResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{141}
}

func (x *UpdateNotifySettingsResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 获取自己所有联系人的在线状态请求
type GetContactsStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetContactsStatusReq) Reset() {
	*x = GetContactsStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContactsStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContactsStatusReq) ProtoMessage() {}

func (x *GetContactsStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContactsStatusReq.ProtoReflect.Descriptor instead.
func (*GetContactsStatusReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{142}
}

func (x *GetContactsStatusReq) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *GetContactsStatusReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 联系人的在线状态
type UserStaus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                //用户的Id
	Status      int32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`                              //用户的在线状态
	OfflineTime int32 `protobuf:"varint,3,opt,name=offline_time,json=offlineTime,proto3" json:"offline_time,omitempty"` //用户的最后的在线时间
}

func (x *UserStaus) Reset() {
	*x = UserStaus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStaus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStaus) ProtoMessage() {}

func (x *UserStaus) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStaus.ProtoReflect.Descriptor instead.
func (*UserStaus) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{143}
}

func (x *UserStaus) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserStaus) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserStaus) GetOfflineTime() int32 {
	if x != nil {
		return x.OfflineTime
	}
	return 0
}

// 获取自己所有联系人的在线状态返回
type GetContactsStatusResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactStatusArr []*UserStaus `protobuf:"bytes,1,rep,name=contactStatusArr,proto3" json:"contactStatusArr,omitempty"`              //联系人的在线状态
	Errorcode        ReErrCode    `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *GetContactsStatusResult) Reset() {
	*x = GetContactsStatusResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContactsStatusResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContactsStatusResult) ProtoMessage() {}

func (x *GetContactsStatusResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContactsStatusResult.ProtoReflect.Descriptor instead.
func (*GetContactsStatusResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{144}
}

func (x *GetContactsStatusResult) GetContactStatusArr() []*UserStaus {
	if x != nil {
		return x.ContactStatusArr
	}
	return nil
}

func (x *GetContactsStatusResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 更新机器人头像请求
type UpdateBotPicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BotId int32         `protobuf:"varint,1,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	Photo []byte        `protobuf:"bytes,2,opt,name=photo,proto3" json:"photo,omitempty"` //(mtproto.TL_photo_layer105)
	Debug *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UpdateBotPicRequest) Reset() {
	*x = UpdateBotPicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBotPicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBotPicRequest) ProtoMessage() {}

func (x *UpdateBotPicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBotPicRequest.ProtoReflect.Descriptor instead.
func (*UpdateBotPicRequest) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{145}
}

func (x *UpdateBotPicRequest) GetBotId() int32 {
	if x != nil {
		return x.BotId
	}
	return 0
}

func (x *UpdateBotPicRequest) GetPhoto() []byte {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *UpdateBotPicRequest) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type UpdateBotPicResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *UpdateBotPicResult) Reset() {
	*x = UpdateBotPicResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBotPicResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBotPicResult) ProtoMessage() {}

func (x *UpdateBotPicResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBotPicResult.ProtoReflect.Descriptor instead.
func (*UpdateBotPicResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{146}
}

func (x *UpdateBotPicResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 获取所有代理的IP和端口请求
type GetAllProxyConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetAllProxyConfigReq) Reset() {
	*x = GetAllProxyConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllProxyConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllProxyConfigReq) ProtoMessage() {}

func (x *GetAllProxyConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllProxyConfigReq.ProtoReflect.Descriptor instead.
func (*GetAllProxyConfigReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{147}
}

func (x *GetAllProxyConfigReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 代理的配置的地址结构
type ProxyAddr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip      string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`           //代理的IP地址
	InnerIp string `protobuf:"bytes,2,opt,name=innerIp,proto3" json:"innerIp,omitempty"` //代理的内网ip地址
	Port    int32  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`      //代理的端口号
}

func (x *ProxyAddr) Reset() {
	*x = ProxyAddr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyAddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyAddr) ProtoMessage() {}

func (x *ProxyAddr) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyAddr.ProtoReflect.Descriptor instead.
func (*ProxyAddr) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{148}
}

func (x *ProxyAddr) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *ProxyAddr) GetInnerIp() string {
	if x != nil {
		return x.InnerIp
	}
	return ""
}

func (x *ProxyAddr) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// 获取所有代理的IP和端口返回结构
type GetAllProxyConfigResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addrs     []*ProxyAddr `protobuf:"bytes,1,rep,name=addrs,proto3" json:"addrs,omitempty"`                                    //代理转发的IP地址们
	Errorcode ReErrCode    `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *GetAllProxyConfigResult) Reset() {
	*x = GetAllProxyConfigResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllProxyConfigResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllProxyConfigResult) ProtoMessage() {}

func (x *GetAllProxyConfigResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllProxyConfigResult.ProtoReflect.Descriptor instead.
func (*GetAllProxyConfigResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{149}
}

func (x *GetAllProxyConfigResult) GetAddrs() []*ProxyAddr {
	if x != nil {
		return x.Addrs
	}
	return nil
}

func (x *GetAllProxyConfigResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 检查用户名是否经被占用请求
type CheckUserNameOccupiedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid   int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	UserName string        `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"` //需要被监测的用户名称
	Debug    *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *CheckUserNameOccupiedReq) Reset() {
	*x = CheckUserNameOccupiedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserNameOccupiedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserNameOccupiedReq) ProtoMessage() {}

func (x *CheckUserNameOccupiedReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserNameOccupiedReq.ProtoReflect.Descriptor instead.
func (*CheckUserNameOccupiedReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{150}
}

func (x *CheckUserNameOccupiedReq) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *CheckUserNameOccupiedReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *CheckUserNameOccupiedReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 检查用户名是否经被占用返回结果
type CheckUserNameOccupiedResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Occpuy bool `protobuf:"varint,1,opt,name=occpuy,proto3" json:"occpuy,omitempty"` //是否被占用
}

func (x *CheckUserNameOccupiedResult) Reset() {
	*x = CheckUserNameOccupiedResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserNameOccupiedResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserNameOccupiedResult) ProtoMessage() {}

func (x *CheckUserNameOccupiedResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserNameOccupiedResult.ProtoReflect.Descriptor instead.
func (*CheckUserNameOccupiedResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{151}
}

func (x *CheckUserNameOccupiedResult) GetOccpuy() bool {
	if x != nil {
		return x.Occpuy
	}
	return false
}

// 获取用户最新的GPS的请求
type GetUserGpsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"` //需要获取用户GPs的用户的ID
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetUserGpsReq) Reset() {
	*x = GetUserGpsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserGpsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserGpsReq) ProtoMessage() {}

func (x *GetUserGpsReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserGpsReq.ProtoReflect.Descriptor instead.
func (*GetUserGpsReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{152}
}

func (x *GetUserGpsReq) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *GetUserGpsReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 获取用户的GPS的请求
type GetUserGpsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude     float64   `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude    float64   `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	DeviceModule string    `protobuf:"bytes,3,opt,name=device_module,json=deviceModule,proto3" json:"device_module,omitempty"`
	Timestamp    int32     `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                           //最新的时间
	Errorcode    ReErrCode `protobuf:"varint,5,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *GetUserGpsResult) Reset() {
	*x = GetUserGpsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserGpsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserGpsResult) ProtoMessage() {}

func (x *GetUserGpsResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserGpsResult.ProtoReflect.Descriptor instead.
func (*GetUserGpsResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{153}
}

func (x *GetUserGpsResult) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GetUserGpsResult) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *GetUserGpsResult) GetDeviceModule() string {
	if x != nil {
		return x.DeviceModule
	}
	return ""
}

func (x *GetUserGpsResult) GetTimestamp() int32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *GetUserGpsResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 检测是否是自己是否是对方的联系人
type CheckSelfIsContactReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId int32         `protobuf:"varint,1,opt,name=selfId,proto3" json:"selfId,omitempty"` //自己的Id
	UserId int32         `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"` //检测方的id
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *CheckSelfIsContactReq) Reset() {
	*x = CheckSelfIsContactReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSelfIsContactReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSelfIsContactReq) ProtoMessage() {}

func (x *CheckSelfIsContactReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSelfIsContactReq.ProtoReflect.Descriptor instead.
func (*CheckSelfIsContactReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{154}
}

func (x *CheckSelfIsContactReq) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *CheckSelfIsContactReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CheckSelfIsContactReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 检测是否是自己是否是对方的联系人的返回结果
type CheckSelfIsContactResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfIsContact bool      `protobuf:"varint,1,opt,name=SelfIsContact,proto3" json:"SelfIsContact,omitempty"`                   //自己是否是对方的联系人
	Errorcode     ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *CheckSelfIsContactResult) Reset() {
	*x = CheckSelfIsContactResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSelfIsContactResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSelfIsContactResult) ProtoMessage() {}

func (x *CheckSelfIsContactResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSelfIsContactResult.ProtoReflect.Descriptor instead.
func (*CheckSelfIsContactResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{155}
}

func (x *CheckSelfIsContactResult) GetSelfIsContact() bool {
	if x != nil {
		return x.SelfIsContact
	}
	return false
}

func (x *CheckSelfIsContactResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// update switch setting
type UpdateSwitchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Switch Switch `protobuf:"varint,2,opt,name=switch,proto3,enum=infoserver.Switch" json:"switch,omitempty"`
	OnOff  bool   `protobuf:"varint,3,opt,name=on_off,json=onOff,proto3" json:"on_off,omitempty"`
}

func (x *UpdateSwitchReq) Reset() {
	*x = UpdateSwitchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSwitchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSwitchReq) ProtoMessage() {}

func (x *UpdateSwitchReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSwitchReq.ProtoReflect.Descriptor instead.
func (*UpdateSwitchReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{156}
}

func (x *UpdateSwitchReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateSwitchReq) GetSwitch() Switch {
	if x != nil {
		return x.Switch
	}
	return Switch_Unused
}

func (x *UpdateSwitchReq) GetOnOff() bool {
	if x != nil {
		return x.OnOff
	}
	return false
}

type UpdateSwitchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code UpdateSwitchResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.UpdateSwitchResult_ResultCode" json:"code,omitempty"`
}

func (x *UpdateSwitchResult) Reset() {
	*x = UpdateSwitchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSwitchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSwitchResult) ProtoMessage() {}

func (x *UpdateSwitchResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSwitchResult.ProtoReflect.Descriptor instead.
func (*UpdateSwitchResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{157}
}

func (x *UpdateSwitchResult) GetCode() UpdateSwitchResult_ResultCode {
	if x != nil {
		return x.Code
	}
	return UpdateSwitchResult_Success
}

// get switch setting
type GetSwitchStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Switch Switch `protobuf:"varint,2,opt,name=switch,proto3,enum=infoserver.Switch" json:"switch,omitempty"`
}

func (x *GetSwitchStatusReq) Reset() {
	*x = GetSwitchStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSwitchStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSwitchStatusReq) ProtoMessage() {}

func (x *GetSwitchStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSwitchStatusReq.ProtoReflect.Descriptor instead.
func (*GetSwitchStatusReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{158}
}

func (x *GetSwitchStatusReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetSwitchStatusReq) GetSwitch() Switch {
	if x != nil {
		return x.Switch
	}
	return Switch_Unused
}

type GetSwitchStatusResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnOff bool                             `protobuf:"varint,1,opt,name=on_off,json=onOff,proto3" json:"on_off,omitempty"`
	Code  GetSwitchStatusResult_ResultCode `protobuf:"varint,2,opt,name=code,proto3,enum=infoserver.GetSwitchStatusResult_ResultCode" json:"code,omitempty"`
}

func (x *GetSwitchStatusResult) Reset() {
	*x = GetSwitchStatusResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSwitchStatusResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSwitchStatusResult) ProtoMessage() {}

func (x *GetSwitchStatusResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSwitchStatusResult.ProtoReflect.Descriptor instead.
func (*GetSwitchStatusResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{159}
}

func (x *GetSwitchStatusResult) GetOnOff() bool {
	if x != nil {
		return x.OnOff
	}
	return false
}

func (x *GetSwitchStatusResult) GetCode() GetSwitchStatusResult_ResultCode {
	if x != nil {
		return x.Code
	}
	return GetSwitchStatusResult_Success
}

// 获取用户信息、群、超级群信息的请求
type UGetUsersChatsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid        int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`                                    // 获取方id
	Users         []int32       `protobuf:"varint,2,rep,packed,name=users,proto3" json:"users,omitempty"`                               // 获取用户信息的用户id数组
	Chatid        []int32       `protobuf:"varint,3,rep,packed,name=chatid,proto3" json:"chatid,omitempty"`                             //获取普通群信息的群id数组
	Channelid     []int32       `protobuf:"varint,4,rep,packed,name=channelid,proto3" json:"channelid,omitempty"`                       // 获取超级群用户信息的超级群id数组
	ProtocolLayer int32         `protobuf:"varint,5,opt,name=protocol_layer,json=protocolLayer,proto3" json:"protocol_layer,omitempty"` // 协议层数
	Dlog          *pbcomm.Debug `protobuf:"bytes,6,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                                         //日志
}

func (x *UGetUsersChatsReq) Reset() {
	*x = UGetUsersChatsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UGetUsersChatsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UGetUsersChatsReq) ProtoMessage() {}

func (x *UGetUsersChatsReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UGetUsersChatsReq.ProtoReflect.Descriptor instead.
func (*UGetUsersChatsReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{160}
}

func (x *UGetUsersChatsReq) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *UGetUsersChatsReq) GetUsers() []int32 {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *UGetUsersChatsReq) GetChatid() []int32 {
	if x != nil {
		return x.Chatid
	}
	return nil
}

func (x *UGetUsersChatsReq) GetChannelid() []int32 {
	if x != nil {
		return x.Channelid
	}
	return nil
}

func (x *UGetUsersChatsReq) GetProtocolLayer() int32 {
	if x != nil {
		return x.ProtocolLayer
	}
	return 0
}

func (x *UGetUsersChatsReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 获取用户信息、群、超级群信息的返回
type UGetUsersChatsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repeated ChannelInfoBase channels = 1;
	// repeated GetChatInfoResp chats = 3;
	Channels   [][]byte       `protobuf:"bytes,1,rep,name=channels,proto3" json:"channels,omitempty"`
	Users      *UserInfoArray `protobuf:"bytes,2,opt,name=users,proto3" json:"users,omitempty"`
	Chats      [][]byte       `protobuf:"bytes,3,rep,name=chats,proto3" json:"chats,omitempty"`
	NoChats    []int32        `protobuf:"varint,4,rep,packed,name=no_chats,json=noChats,proto3" json:"no_chats,omitempty"`
	NoChans    []int32        `protobuf:"varint,5,rep,packed,name=no_chans,json=noChans,proto3" json:"no_chans,omitempty"`
	Resultcode ChatResultCode `protobuf:"varint,6,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"` //结果码
}

func (x *UGetUsersChatsResult) Reset() {
	*x = UGetUsersChatsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UGetUsersChatsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UGetUsersChatsResult) ProtoMessage() {}

func (x *UGetUsersChatsResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UGetUsersChatsResult.ProtoReflect.Descriptor instead.
func (*UGetUsersChatsResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{161}
}

func (x *UGetUsersChatsResult) GetChannels() [][]byte {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *UGetUsersChatsResult) GetUsers() *UserInfoArray {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *UGetUsersChatsResult) GetChats() [][]byte {
	if x != nil {
		return x.Chats
	}
	return nil
}

func (x *UGetUsersChatsResult) GetNoChats() []int32 {
	if x != nil {
		return x.NoChats
	}
	return nil
}

func (x *UGetUsersChatsResult) GetNoChans() []int32 {
	if x != nil {
		return x.NoChans
	}
	return nil
}

func (x *UGetUsersChatsResult) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

type UpdateBotInfoSuppReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Placeholder string        `protobuf:"bytes,2,opt,name=Placeholder,proto3" json:"Placeholder,omitempty"`
	Geo         bool          `protobuf:"varint,3,opt,name=geo,proto3" json:"geo,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UpdateBotInfoSuppReq) Reset() {
	*x = UpdateBotInfoSuppReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBotInfoSuppReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBotInfoSuppReq) ProtoMessage() {}

func (x *UpdateBotInfoSuppReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBotInfoSuppReq.ProtoReflect.Descriptor instead.
func (*UpdateBotInfoSuppReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{162}
}

func (x *UpdateBotInfoSuppReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateBotInfoSuppReq) GetPlaceholder() string {
	if x != nil {
		return x.Placeholder
	}
	return ""
}

func (x *UpdateBotInfoSuppReq) GetGeo() bool {
	if x != nil {
		return x.Geo
	}
	return false
}

func (x *UpdateBotInfoSuppReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type UpdateBotInfoSuppResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (x *UpdateBotInfoSuppResult) Reset() {
	*x = UpdateBotInfoSuppResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBotInfoSuppResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBotInfoSuppResult) ProtoMessage() {}

func (x *UpdateBotInfoSuppResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBotInfoSuppResult.ProtoReflect.Descriptor instead.
func (*UpdateBotInfoSuppResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{163}
}

func (x *UpdateBotInfoSuppResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

type DeleteUserUsernameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminId     int32         `protobuf:"varint,1,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"` // 调用者id
	Username    string        `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	ForceDelete bool          `protobuf:"varint,3,opt,name=force_delete,json=forceDelete,proto3" json:"force_delete,omitempty"` // 强制删除
	Debug       *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *DeleteUserUsernameReq) Reset() {
	*x = DeleteUserUsernameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserUsernameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserUsernameReq) ProtoMessage() {}

func (x *DeleteUserUsernameReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserUsernameReq.ProtoReflect.Descriptor instead.
func (*DeleteUserUsernameReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{164}
}

func (x *DeleteUserUsernameReq) GetAdminId() int32 {
	if x != nil {
		return x.AdminId
	}
	return 0
}

func (x *DeleteUserUsernameReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *DeleteUserUsernameReq) GetForceDelete() bool {
	if x != nil {
		return x.ForceDelete
	}
	return false
}

func (x *DeleteUserUsernameReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type DeleteUserUsernameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code                 DeleteUserUsernameResult_Code `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.DeleteUserUsernameResult_Code" json:"code,omitempty"`
	InternalErrorMessage string                        `protobuf:"bytes,2,opt,name=internal_error_message,json=internalErrorMessage,proto3" json:"internal_error_message,omitempty"` // 发生内部错误时的错误信息
	OwnerId              int32                         `protobuf:"varint,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`                                         // 用户名拥有者id
}

func (x *DeleteUserUsernameResult) Reset() {
	*x = DeleteUserUsernameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserUsernameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserUsernameResult) ProtoMessage() {}

func (x *DeleteUserUsernameResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserUsernameResult.ProtoReflect.Descriptor instead.
func (*DeleteUserUsernameResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{165}
}

func (x *DeleteUserUsernameResult) GetCode() DeleteUserUsernameResult_Code {
	if x != nil {
		return x.Code
	}
	return DeleteUserUsernameResult_Success
}

func (x *DeleteUserUsernameResult) GetInternalErrorMessage() string {
	if x != nil {
		return x.InternalErrorMessage
	}
	return ""
}

func (x *DeleteUserUsernameResult) GetOwnerId() int32 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

type UpdateUserLocationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Country string        `protobuf:"bytes,2,opt,name=Country,proto3" json:"Country,omitempty"`
	City    string        `protobuf:"bytes,3,opt,name=City,proto3" json:"City,omitempty"`
	Detail  string        `protobuf:"bytes,4,opt,name=Detail,proto3" json:"Detail,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UpdateUserLocationReq) Reset() {
	*x = UpdateUserLocationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserLocationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserLocationReq) ProtoMessage() {}

func (x *UpdateUserLocationReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserLocationReq.ProtoReflect.Descriptor instead.
func (*UpdateUserLocationReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{166}
}

func (x *UpdateUserLocationReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserLocationReq) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *UpdateUserLocationReq) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *UpdateUserLocationReq) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *UpdateUserLocationReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type UpdateUserLocationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=Reason,proto3" json:"Reason,omitempty"`
}

func (x *UpdateUserLocationResult) Reset() {
	*x = UpdateUserLocationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserLocationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserLocationResult) ProtoMessage() {}

func (x *UpdateUserLocationResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserLocationResult.ProtoReflect.Descriptor instead.
func (*UpdateUserLocationResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{167}
}

func (x *UpdateUserLocationResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateUserLocationResult) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type UpdateUserGrenderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Grender int32         `protobuf:"varint,2,opt,name=Grender,proto3" json:"Grender,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UpdateUserGrenderReq) Reset() {
	*x = UpdateUserGrenderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserGrenderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserGrenderReq) ProtoMessage() {}

func (x *UpdateUserGrenderReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserGrenderReq.ProtoReflect.Descriptor instead.
func (*UpdateUserGrenderReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{168}
}

func (x *UpdateUserGrenderReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserGrenderReq) GetGrender() int32 {
	if x != nil {
		return x.Grender
	}
	return 0
}

func (x *UpdateUserGrenderReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type UpdateUserGrenderResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=Reason,proto3" json:"Reason,omitempty"`
}

func (x *UpdateUserGrenderResult) Reset() {
	*x = UpdateUserGrenderResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserGrenderResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserGrenderResult) ProtoMessage() {}

func (x *UpdateUserGrenderResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserGrenderResult.ProtoReflect.Descriptor instead.
func (*UpdateUserGrenderResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{169}
}

func (x *UpdateUserGrenderResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateUserGrenderResult) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type UpdateUserEmailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Email  string        `protobuf:"bytes,2,opt,name=Email,proto3" json:"Email,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UpdateUserEmailReq) Reset() {
	*x = UpdateUserEmailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserEmailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserEmailReq) ProtoMessage() {}

func (x *UpdateUserEmailReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserEmailReq.ProtoReflect.Descriptor instead.
func (*UpdateUserEmailReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{170}
}

func (x *UpdateUserEmailReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserEmailReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UpdateUserEmailReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type UpdateUserEmailResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=Reason,proto3" json:"Reason,omitempty"`
}

func (x *UpdateUserEmailResult) Reset() {
	*x = UpdateUserEmailResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserEmailResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserEmailResult) ProtoMessage() {}

func (x *UpdateUserEmailResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserEmailResult.ProtoReflect.Descriptor instead.
func (*UpdateUserEmailResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{171}
}

func (x *UpdateUserEmailResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateUserEmailResult) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type UploadContactsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId           int64               `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`       //端标识
	UserId          int32               `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`    //用户的ID
	PhoneContactArr []*PhoneBookContact `protobuf:"bytes,3,rep,name=phoneContactArr,proto3" json:"phoneContactArr,omitempty"` //联系人的电话号码的列表
}

func (x *UploadContactsReq) Reset() {
	*x = UploadContactsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadContactsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadContactsReq) ProtoMessage() {}

func (x *UploadContactsReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadContactsReq.ProtoReflect.Descriptor instead.
func (*UploadContactsReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{172}
}

func (x *UploadContactsReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *UploadContactsReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UploadContactsReq) GetPhoneContactArr() []*PhoneBookContact {
	if x != nil {
		return x.PhoneContactArr
	}
	return nil
}

type UploadContactsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`    //是否上传失败
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` //提示消息
}

func (x *UploadContactsResult) Reset() {
	*x = UploadContactsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadContactsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadContactsResult) ProtoMessage() {}

func (x *UploadContactsResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadContactsResult.ProtoReflect.Descriptor instead.
func (*UploadContactsResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{173}
}

func (x *UploadContactsResult) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *UploadContactsResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ApplyContactReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  //被添加人user_id
	ApplyUserId int32  `protobuf:"varint,2,opt,name=apply_user_id,json=applyUserId,proto3" json:"apply_user_id,omitempty"` //添加发起者user_id
	WithMessage string `protobuf:"bytes,3,opt,name=with_message,json=withMessage,proto3" json:"with_message,omitempty"`    //附带消息
}

func (x *ApplyContactReq) Reset() {
	*x = ApplyContactReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyContactReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyContactReq) ProtoMessage() {}

func (x *ApplyContactReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyContactReq.ProtoReflect.Descriptor instead.
func (*ApplyContactReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{174}
}

func (x *ApplyContactReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ApplyContactReq) GetApplyUserId() int32 {
	if x != nil {
		return x.ApplyUserId
	}
	return 0
}

func (x *ApplyContactReq) GetWithMessage() string {
	if x != nil {
		return x.WithMessage
	}
	return ""
}

type ApplyContactResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`    //是否失败
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` //提示消息
}

func (x *ApplyContactResult) Reset() {
	*x = ApplyContactResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyContactResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyContactResult) ProtoMessage() {}

func (x *ApplyContactResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyContactResult.ProtoReflect.Descriptor instead.
func (*ApplyContactResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{175}
}

func (x *ApplyContactResult) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *ApplyContactResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetAppliedContactsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //查询用户ID
}

func (x *GetAppliedContactsReq) Reset() {
	*x = GetAppliedContactsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppliedContactsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppliedContactsReq) ProtoMessage() {}

func (x *GetAppliedContactsReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppliedContactsReq.ProtoReflect.Descriptor instead.
func (*GetAppliedContactsReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{176}
}

func (x *GetAppliedContactsReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetAppliedContactsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      bool       `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Message    string     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                         //提示消息
	AppliedArr []*Applied `protobuf:"bytes,3,rep,name=applied_arr,json=appliedArr,proto3" json:"applied_arr,omitempty"` //数据
}

func (x *GetAppliedContactsResult) Reset() {
	*x = GetAppliedContactsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppliedContactsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppliedContactsResult) ProtoMessage() {}

func (x *GetAppliedContactsResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppliedContactsResult.ProtoReflect.Descriptor instead.
func (*GetAppliedContactsResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{177}
}

func (x *GetAppliedContactsResult) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *GetAppliedContactsResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetAppliedContactsResult) GetAppliedArr() []*Applied {
	if x != nil {
		return x.AppliedArr
	}
	return nil
}

type Applied struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId      int32     `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`               //被添加者用户ID
	ApplyUser   *UserInfo `protobuf:"bytes,3,opt,name=apply_user,json=applyUser,proto3" json:"apply_user,omitempty"`       //发起申请用户
	WithMessage string    `protobuf:"bytes,4,opt,name=with_message,json=withMessage,proto3" json:"with_message,omitempty"` //附加消息
	Status      int32     `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                             //状态消息 0-申请;1-同意;2-不同意;3-忽略
	Flag        int32     `protobuf:"varint,6,opt,name=flag,proto3" json:"flag,omitempty"`                                 //标识 0-未读;1-已读
	Gender      int32     `protobuf:"varint,7,opt,name=gender,proto3" json:"gender,omitempty"`                             //性别
	Email       string    `protobuf:"bytes,8,opt,name=email,proto3" json:"email,omitempty"`                                //邮箱
	Country     string    `protobuf:"bytes,9,opt,name=Country,proto3" json:"Country,omitempty"`                            //国家
	City        string    `protobuf:"bytes,10,opt,name=City,proto3" json:"City,omitempty"`                                 //城市
	Detail      string    `protobuf:"bytes,11,opt,name=Detail,proto3" json:"Detail,omitempty"`                             //详情
}

func (x *Applied) Reset() {
	*x = Applied{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Applied) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Applied) ProtoMessage() {}

func (x *Applied) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Applied.ProtoReflect.Descriptor instead.
func (*Applied) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{178}
}

func (x *Applied) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Applied) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Applied) GetApplyUser() *UserInfo {
	if x != nil {
		return x.ApplyUser
	}
	return nil
}

func (x *Applied) GetWithMessage() string {
	if x != nil {
		return x.WithMessage
	}
	return ""
}

func (x *Applied) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Applied) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *Applied) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *Applied) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Applied) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Applied) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Applied) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

type VerifyContactReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                           //申请好友唯一ID
	VerifyUserId int32 `protobuf:"varint,3,opt,name=verify_user_id,json=verifyUserId,proto3" json:"verify_user_id,omitempty"` //确认者user_id
	Status       int32 `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`                                   //状态消息
}

func (x *VerifyContactReq) Reset() {
	*x = VerifyContactReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyContactReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyContactReq) ProtoMessage() {}

func (x *VerifyContactReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyContactReq.ProtoReflect.Descriptor instead.
func (*VerifyContactReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{179}
}

func (x *VerifyContactReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VerifyContactReq) GetVerifyUserId() int32 {
	if x != nil {
		return x.VerifyUserId
	}
	return 0
}

func (x *VerifyContactReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type VerifyContactResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` //提示消息
}

func (x *VerifyContactResult) Reset() {
	*x = VerifyContactResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyContactResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyContactResult) ProtoMessage() {}

func (x *VerifyContactResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyContactResult.ProtoReflect.Descriptor instead.
func (*VerifyContactResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{180}
}

func (x *VerifyContactResult) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *VerifyContactResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteAppliedContactReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteAppliedContactReq) Reset() {
	*x = DeleteAppliedContactReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAppliedContactReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAppliedContactReq) ProtoMessage() {}

func (x *DeleteAppliedContactReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAppliedContactReq.ProtoReflect.Descriptor instead.
func (*DeleteAppliedContactReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{181}
}

func (x *DeleteAppliedContactReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteAppliedContactResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` //提示消息
}

func (x *DeleteAppliedContactResult) Reset() {
	*x = DeleteAppliedContactResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAppliedContactResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAppliedContactResult) ProtoMessage() {}

func (x *DeleteAppliedContactResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAppliedContactResult.ProtoReflect.Descriptor instead.
func (*DeleteAppliedContactResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{182}
}

func (x *DeleteAppliedContactResult) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *DeleteAppliedContactResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SearchUserByPhoneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"` //手机号-带国家码
}

func (x *SearchUserByPhoneReq) Reset() {
	*x = SearchUserByPhoneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUserByPhoneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserByPhoneReq) ProtoMessage() {}

func (x *SearchUserByPhoneReq) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserByPhoneReq.ProtoReflect.Descriptor instead.
func (*SearchUserByPhoneReq) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{183}
}

func (x *SearchUserByPhoneReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type SearchUserByPhoneResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo *UserInfo `protobuf:"bytes,1,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"` //用户信息
	Gender   int32     `protobuf:"varint,2,opt,name=gender,proto3" json:"gender,omitempty"`                    //性别
	Email    string    `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`                       //邮箱
	Country  string    `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`                   //国家
	City     string    `protobuf:"bytes,5,opt,name=City,proto3" json:"City,omitempty"`                         //城市
	Detail   string    `protobuf:"bytes,6,opt,name=Detail,proto3" json:"Detail,omitempty"`                     //详情
}

func (x *SearchUserByPhoneResult) Reset() {
	*x = SearchUserByPhoneResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userserver_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUserByPhoneResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserByPhoneResult) ProtoMessage() {}

func (x *SearchUserByPhoneResult) ProtoReflect() protoreflect.Message {
	mi := &file_userserver_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserByPhoneResult.ProtoReflect.Descriptor instead.
func (*SearchUserByPhoneResult) Descriptor() ([]byte, []int) {
	return file_userserver_proto_rawDescGZIP(), []int{184}
}

func (x *SearchUserByPhoneResult) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *SearchUserByPhoneResult) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *SearchUserByPhoneResult) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *SearchUserByPhoneResult) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *SearchUserByPhoneResult) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *SearchUserByPhoneResult) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

var File_userserver_proto protoreflect.FileDescriptor

var file_userserver_proto_rawDesc = []byte{
	0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x28,
	0x69, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x73, 0x2f, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2f, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x69, 0x6d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2f, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6b, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x70, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x41, 0x72, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x3d, 0x0a, 0x0d, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x2c, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x22, 0xd7, 0x07, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f,
	0x67, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x72, 0x67, 0x62, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x66, 0x6f, 0x6e, 0x74, 0x52, 0x67, 0x62, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x6f, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x62,
	0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x62, 0x6f, 0x74,
	0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x6f, 0x74, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x62, 0x6f, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f,
	0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x74, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6f, 0x74, 0x5f, 0x6e, 0x6f, 0x63, 0x68,
	0x61, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x6f, 0x74, 0x4e, 0x6f,
	0x63, 0x68, 0x61, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x6d, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x67, 0x65, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x62, 0x6f, 0x74,
	0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x65, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6c,
	0x66, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x75, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x6d, 0x75, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x73, 0x74, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x6f,
	0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x22, 0x54, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x66, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x4b, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x74, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x33,
	0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x7b, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x41, 0x72, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x2a, 0x0a, 0x05, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x6d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22,
	0x7f, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x22, 0x4f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x22, 0x4c, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x5f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x33, 0x0a, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0xbc, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22,
	0x7a, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x55, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xcc, 0x01, 0x0a, 0x09,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c,
	0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66,
	0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x43, 0x0a, 0x0c, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x67, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x49, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33,
	0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c,
	0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x4e, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x77,
	0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x55, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x52, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x4f, 0x0a, 0x18, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x6b, 0x0a, 0x14,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x47, 0x0a, 0x10, 0x44, 0x65, 0x6c,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x0d, 0x42, 0x6f, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x1e, 0x0a, 0x0b, 0x62, 0x6f, 0x74, 0x5f, 0x6e, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x6f, 0x74, 0x4e, 0x6f, 0x43, 0x68, 0x61,
	0x74, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x4a, 0x0a, 0x13, 0x42, 0x6f, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x15, 0x0a,
	0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b,
	0x65, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x73, 0x0a, 0x10, 0x44, 0x65, 0x6c,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a,
	0x05, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4f,
	0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x22,
	0xa6, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x72,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3d, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x69, 0x64, 0x41, 0x72, 0x72, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x48, 0x61, 0x73, 0x68, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x69, 0x64, 0x41, 0x72, 0x72, 0x12, 0x15, 0x0a, 0x06,
	0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65,
	0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x57, 0x0a, 0x17, 0x43, 0x6d, 0x64, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6d, 0x64, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x6d, 0x64, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0x4c, 0x0a, 0x1a, 0x43, 0x6d, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x2e, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x11, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x73, 0x22,
	0x4a, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x72, 0x72,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x15,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x74, 0x73, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65,
	0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x68, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x93, 0x02, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x53, 0x65, 0x6c,
	0x66, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65,
	0x6c, 0x66, 0x5f, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x4d,
	0x61, 0x72, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x22, 0xc0, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x74, 0x73, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x37, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x41, 0x72, 0x72, 0x12, 0x36, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x41, 0x72, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x12, 0x33,
	0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x10, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f,
	0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x1e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x72, 0x72, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x52, 0x0f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41,
	0x72, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x45, 0x0a, 0x0d, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x4b,
	0x0a, 0x0e, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x73, 0x22, 0x93, 0x02, 0x0a, 0x21,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x43, 0x0a, 0x0f, 0x69, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x0f, 0x69, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x36, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x41, 0x72, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x12, 0x3c,
	0x0a, 0x0b, 0x50, 0x6f, 0x70, 0x75, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52,
	0x0b, 0x50, 0x6f, 0x70, 0x75, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x33, 0x0a, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45,
	0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x72, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x72, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x4e, 0x0a, 0x17, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4e, 0x0a, 0x17, 0x44, 0x65, 0x6c,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x0e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x22, 0x48, 0x0a, 0x11, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x75, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x13,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x15, 0x0a, 0x06,
	0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65,
	0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x55, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22,
	0x3a, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x75, 0x73, 0x65, 0x72, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x18,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x07, 0x49, 0x6e,
	0x66, 0x6f, 0x41, 0x72, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x07, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x71, 0x0a, 0x0f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x70, 0x72, 0x6f, 0x62, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x77, 0x68,
	0x69, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x57, 0x68, 0x69,
	0x74, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x79, 0x73, 0x57,
	0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x6f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x62, 0x79,
	0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x4e, 0x0a, 0x17, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x79,
	0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x62, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x62, 0x79, 0x12, 0x23, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x22, 0x57, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x51, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x53, 0x79, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x8d, 0x01,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x79, 0x73, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0c, 0x73, 0x79, 0x73, 0x57,
	0x68, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3c, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x72, 0x72, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x96, 0x01, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x72, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x45, 0x0a, 0x0f, 0x73, 0x79, 0x73, 0x57,
	0x68, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0f,
	0x73, 0x79, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x12,
	0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x6b, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x53, 0x79, 0x73, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x22, 0x4c, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x53, 0x79, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x5b, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x44, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x64, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x64, 0x63, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x32, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x63, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x22, 0xad, 0x02, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x64,
	0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x61,
	0x6c, 0x77, 0x61, 0x79, 0x73, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x22, 0x79, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x55, 0x69,
	0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x8b, 0x01, 0x0a, 0x0f, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x49, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0xdd, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x44, 0x69,
	0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x6c,
	0x77, 0x61, 0x79, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x32, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x33, 0x0a,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0xd6, 0x02, 0x0a, 0x16, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x6f, 0x70,
	0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x72,
	0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6d,
	0x61, 0x73, 0x6b, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x19, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x74, 0x0a,
	0x1f, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x23,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x22, 0x59, 0x0a, 0x22, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x6f, 0x70,
	0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x71,
	0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x4d, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0xa0, 0x02, 0x0a, 0x0e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x66, 0x72, 0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x6d, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6d, 0x6f,
	0x74, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6d, 0x6f,
	0x74, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0x7f, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x22, 0x92, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x42, 0x0a, 0x0e, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xa2, 0x04, 0x0a, 0x17, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x61, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x69, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x53, 0x74, 0x69, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x12, 0x13, 0x0a, 0x05, 0x64, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x63, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x35, 0x0a, 0x17, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x14, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x57, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x5f, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x48, 0x12, 0x32,
	0x0a, 0x15, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x69,
	0x6b, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x53, 0x74, 0x69, 0x6b, 0x65, 0x72, 0x41,
	0x6c, 0x74, 0x12, 0x48, 0x0a, 0x21, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x5f, 0x73, 0x74, 0x69, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x53, 0x74, 0x69, 0x6b, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x30, 0x0a, 0x14,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6a,
	0x0a, 0x17, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x08, 0x69, 0x6e, 0x66,
	0x6f, 0x42, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x50, 0x61, 0x63, 0x6b, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x15, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44,
	0x63, 0x52, 0x65, 0x71, 0x12, 0x49, 0x0a, 0x0d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x70, 0x61, 0x63,
	0x6b, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x50, 0x61, 0x63, 0x6b, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x0d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x70, 0x61, 0x63, 0x6b, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x22, 0x5f, 0x0a, 0x18, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x7a, 0x0a, 0x18, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x63, 0x41, 0x72, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x39, 0x0a, 0x05, 0x53, 0x74, 0x50, 0x44, 0x42, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x61, 0x73, 0x65, 0x52, 0x05, 0x53, 0x74, 0x50, 0x44, 0x42, 0x12, 0x23, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x22, 0x68, 0x0a, 0x1b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x63, 0x41, 0x72, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x64, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x05, 0x69, 0x64, 0x41, 0x72, 0x72, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x52, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b,
	0x44, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22,
	0x63, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x50, 0x61, 0x63, 0x6b, 0x44, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x41, 0x0a, 0x09, 0x53, 0x74, 0x50, 0x44, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x53, 0x74, 0x50, 0x44, 0x63,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x8d, 0x01, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x61, 0x76, 0x65, 0x53, 0x74, 0x69, 0x63, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x6e, 0x66, 0x61, 0x76,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x55, 0x6e, 0x66, 0x61, 0x76, 0x65, 0x12,
	0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x22, 0x52, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x61, 0x76, 0x65, 0x53, 0x74, 0x69, 0x63, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x66, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x46,
	0x61, 0x76, 0x65, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x22, 0xd1, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x65, 0x64, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x2d, 0x0a, 0x05, 0x70, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x52, 0x05, 0x70, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x3f,
	0x0a, 0x08, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x61, 0x73, 0x65, 0x52, 0x08, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12,
	0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x49, 0x0a, 0x0b, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50,
	0x61, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0xe7, 0x01, 0x0a, 0x16, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x50, 0x0a, 0x19, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x1f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x59,
	0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x1c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x23,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x22, 0x56, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x20,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x5a, 0x0a,
	0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x79, 0x0a, 0x14, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x22, 0x8c, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x75,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x33,
	0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0xa0, 0x03, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x72, 0x65,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x73,
	0x6b, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6d, 0x61, 0x73, 0x6b, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x53, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x12, 0x3d, 0x0a, 0x0b,
	0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b,
	0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x51, 0x0a, 0x11, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72,
	0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x55,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x75, 0x73, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x94, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x43, 0x0a, 0x0e, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3b, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x92, 0x01, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x73, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x53,
	0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50,
	0x61, 0x63, 0x6b, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x48, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x52, 0x03, 0x73, 0x65, 0x74, 0x22, 0x34, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x85,
	0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x52, 0x04, 0x73, 0x65, 0x74, 0x73, 0x22, 0x93, 0x02, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x36, 0x0a, 0x1b,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x1e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x46, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x47, 0x69, 0x66, 0x49, 0x6e, 0x66, 0x6f,
	0x41, 0x72, 0x72, 0x12, 0x34, 0x0a, 0x07, 0x67, 0x69, 0x66, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x53, 0x61, 0x76, 0x65, 0x47, 0x69, 0x66, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x06, 0x67, 0x69, 0x66, 0x41, 0x72, 0x72, 0x22, 0x6e, 0x0a, 0x0f, 0x75, 0x73, 0x65,
	0x72, 0x53, 0x61, 0x76, 0x65, 0x47, 0x69, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x69, 0x66, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x69, 0x66, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x66, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x69, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x69, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x67, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x22, 0x92, 0x01, 0x0a, 0x0e, 0x53, 0x61,
	0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x47, 0x69, 0x66, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x69, 0x66, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x69, 0x66, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x66, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x69, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x69, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x67, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x48,
	0x0a, 0x11, 0x53, 0x61, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x47, 0x69, 0x66, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x7a, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x47, 0x69, 0x66, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x66, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x69, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x22, 0x47, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x47,
	0x69, 0x66, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x61, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x69, 0x66, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x22, 0xaa, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x69, 0x66, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x12, 0x34, 0x0a, 0x07, 0x67, 0x69, 0x66, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x53, 0x61, 0x76, 0x65, 0x47, 0x69, 0x66, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x06, 0x67, 0x69, 0x66, 0x41, 0x72, 0x72, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x6e, 0x0a,
	0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x73, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x4f, 0x0a,
	0x18, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x73, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xef,
	0x02, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x42, 0x6f, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f,
	0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x62, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x20,
	0x0a, 0x0c, 0x62, 0x6f, 0x74, 0x5f, 0x6e, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x6f, 0x74, 0x4e, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x73,
	0x22, 0x78, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x75, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x75,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x7a, 0x0a, 0x1b, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73,
	0x68, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x6f, 0x0a, 0x1e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xdd, 0x02, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x42, 0x6f, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x62, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x5f, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x62, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x20, 0x0a, 0x0c, 0x62, 0x6f, 0x74, 0x5f, 0x6e, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x6f, 0x74, 0x4e, 0x6f, 0x43, 0x68, 0x61,
	0x74, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x79, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x2a, 0x0a, 0x05, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x6f, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f,
	0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x71, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x22, 0xc0, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x53, 0x68, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x4d, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x4d, 0x75, 0x74, 0x65, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x53,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xe4, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x65, 0x71, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x65, 0x71, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x53, 0x68, 0x6f, 0x77, 0x5f, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x53,
	0x68, 0x6f, 0x77, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x69, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x53, 0x69, 0x6c,
	0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x4d, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x74, 0x69,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4d, 0x75, 0x74, 0x65, 0x55, 0x6e, 0x74,
	0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x51, 0x0a,
	0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x54, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x66,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x5f, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x41, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x75, 0x73, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x41, 0x72, 0x72, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x67, 0x0a, 0x13, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x50, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12,
	0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x22, 0x49, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f,
	0x74, 0x50, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x3b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x49, 0x0a, 0x09,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x64, 0x64, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x49, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x49, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x7b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x41, 0x64, 0x64, 0x72, 0x52, 0x05, 0x61, 0x64, 0x64, 0x72, 0x73, 0x12,
	0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x74, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x35, 0x0a, 0x1b, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x63, 0x63, 0x75, 0x70,
	0x69, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x63, 0x63,
	0x70, 0x75, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x63, 0x63, 0x70, 0x75,
	0x79, 0x22, 0x4c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x70, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22,
	0xc4, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x70, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x6c, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53,
	0x65, 0x6c, 0x66, 0x49, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x22, 0x75, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x6c,
	0x66, 0x49, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65, 0x6c, 0x66, 0x49, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x53, 0x65, 0x6c, 0x66, 0x49, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x6d, 0x0a, 0x0f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x06, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x22, 0x81, 0x01, 0x0a, 0x12, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x3d, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x29, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x2c, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x22, 0x59,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x22, 0x9e, 0x01, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x2c, 0x0a, 0x0a,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x22, 0xc1, 0x01, 0x0a, 0x11, 0x55,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06,
	0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x04, 0x44,
	0x6c, 0x6f, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0xeb,
	0x01, 0x0a, 0x14, 0x55, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x05, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x68, 0x61, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f,
	0x5f, 0x63, 0x68, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x6f,
	0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x73,
	0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x87, 0x01, 0x0a,
	0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x75,
	0x70, 0x70, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x67, 0x65, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x67, 0x65,
	0x6f, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x4e, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x75, 0x70, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22,
	0xb9, 0x02, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3d, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8c, 0x01, 0x0a,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x02, 0x12, 0x13,
	0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x49, 0x73, 0x42, 0x6f, 0x74,
	0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x63,
	0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x06, 0x22, 0x9a, 0x01, 0x0a, 0x15,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x4c, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x6d, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x47, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x4b, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x47, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x22, 0x67, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x49, 0x0a, 0x15, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x8b, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06,
	0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65,
	0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0f,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x72, 0x72, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x52, 0x0f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x41, 0x72, 0x72, 0x22, 0x46, 0x0a, 0x14, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x71, 0x0a, 0x0f,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x44, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x30, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f,
	0x61, 0x72, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x52, 0x0a,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x41, 0x72, 0x72, 0x22, 0xaa, 0x02, 0x0a, 0x07, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x33, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66,
	0x6c, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x43,
	0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x60, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x45, 0x0a, 0x13, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x29, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4c, 0x0a, 0x1a, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2c, 0x0a, 0x14, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x69,
	0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2a, 0x80, 0x02, 0x0a, 0x09, 0x52,
	0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x42, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x4f,
	0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x6e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x0a, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x61, 0x73, 0x68, 0x4e, 0x6f,
	0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x10, 0x0e,
	0x12, 0x0b, 0x0a, 0x07, 0x56, 0x69, 0x70, 0x4f, 0x6e, 0x6c, 0x79, 0x10, 0x0f, 0x2a, 0x58, 0x0a,
	0x06, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x6e, 0x75, 0x73, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x10, 0x02, 0x12,
	0x16, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53,
	0x69, 0x67, 0x6e, 0x49, 0x6e, 0x10, 0x03, 0x32, 0xd7, 0x3c, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x59, 0x0a,
	0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x1a, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x41,
	0x72, 0x72, 0x12, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x41,
	0x72, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79,
	0x49, 0x64, 0x41, 0x72, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5c, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x70, 0x69, 0x65, 0x72, 0x42, 0x79,
	0x49, 0x64, 0x12, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0x1a, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x1a, 0x1d, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x57,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x1d, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x4d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12,
	0x1b, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5c,
	0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x10,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x32, 0x12, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x18, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x10,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x12, 0x1b, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x59, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x1a, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x68, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x12, 0x24, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x27,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x12, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x21, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x1a, 0x24, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x12, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64,
	0x12, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x19, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1f,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x12, 0x51, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x50, 0x69,
	0x63, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x50, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x50, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x18, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x12, 0x27, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73,
	0x68, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x73, 0x44, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x19, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x44, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x41,
	0x72, 0x72, 0x12, 0x1c, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x72, 0x72, 0x52, 0x65, 0x71,
	0x1a, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x72, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x14, 0x43, 0x6d, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x64, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x26, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d,
	0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x13, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x12, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x74, 0x73, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x74, 0x73, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x0e,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x2a,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x12, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x53, 0x65, 0x6c, 0x66, 0x49, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12,
	0x21, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x53, 0x65, 0x6c, 0x66, 0x49, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x24, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x6c, 0x66, 0x49, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x12, 0x44, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x1a,
	0x23, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x44, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x23,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x1a, 0x1d, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x12, 0x58, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x55, 0x6e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x55, 0x6e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x75,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x12, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x12, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x12,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x12, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x73, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5f, 0x0a,
	0x14, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x57, 0x68, 0x69, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x79, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x79, 0x73, 0x57, 0x68, 0x69,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x77,
	0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x29, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x79,
	0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x5f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x72, 0x72, 0x12, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x72, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x57, 0x68, 0x69, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x72, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x56, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x53, 0x79, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x6c, 0x53, 0x79, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x6c, 0x53, 0x79, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x63, 0x12, 0x17, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x63, 0x52, 0x65,
	0x71, 0x1a, 0x12, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x63, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4b, 0x0a, 0x0e, 0x53, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x19, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x19, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x1b, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x6f, 0x70,
	0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x53, 0x68, 0x6f, 0x70, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x17, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x2b, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2e,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x5d, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x53, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x63, 0x12, 0x21, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x63, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x15, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x63, 0x41, 0x72, 0x72, 0x12, 0x24,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x63, 0x41, 0x72,
	0x72, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61,
	0x63, 0x6b, 0x44, 0x63, 0x41, 0x72, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x71, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x50, 0x61, 0x63, 0x6b, 0x44, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x27, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x50,
	0x61, 0x63, 0x6b, 0x44, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x68, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x61, 0x76, 0x65, 0x53, 0x74, 0x69, 0x63, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x61, 0x76, 0x65, 0x53, 0x74, 0x69, 0x63, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x27, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41,
	0x64, 0x64, 0x4f, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x61, 0x76, 0x65, 0x53, 0x74,
	0x69, 0x63, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x65, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73,
	0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x46, 0x61, 0x76, 0x65, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x61, 0x76, 0x65, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x22,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x25, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x18, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2b, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x28, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x20, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x2c,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x5c, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5f, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x75, 0x73, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x73, 0x12, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x75, 0x73, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x75, 0x73, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5c,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x73, 0x12, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x19,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63,
	0x6b, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61,
	0x63, 0x6b, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x62, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x12, 0x25, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x41, 0x6c,
	0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x18, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12,
	0x27, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0b, 0x53, 0x61, 0x76, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x47, 0x69, 0x66, 0x12, 0x1a, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x47, 0x69, 0x66, 0x52, 0x65,
	0x71, 0x1a, 0x1d, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x61, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x47, 0x69, 0x66, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x47, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x47, 0x69, 0x66,
	0x12, 0x19, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x47, 0x69, 0x66, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x47, 0x69, 0x66, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x69, 0x66, 0x73, 0x12, 0x1a, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47,
	0x69, 0x66, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x69, 0x66, 0x73, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x20, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x23,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x23, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x26, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x70, 0x73, 0x12, 0x19, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x70, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x70, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x12, 0x1b, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x1a, 0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x56, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x11, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x20, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x5f, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x12, 0x53, 0x0a, 0x0e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1b, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1c, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x21, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x24, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x12, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x5c, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5f, 0x0a,
	0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5c,
	0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53,
	0x75, 0x70, 0x70, 0x12, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x75,
	0x70, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x53, 0x75, 0x70, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0e,
	0x55, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x1d,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x42, 0x31, 0x5a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70, 0x72,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x69, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_userserver_proto_rawDescOnce sync.Once
	file_userserver_proto_rawDescData = file_userserver_proto_rawDesc
)

func file_userserver_proto_rawDescGZIP() []byte {
	file_userserver_proto_rawDescOnce.Do(func() {
		file_userserver_proto_rawDescData = protoimpl.X.CompressGZIP(file_userserver_proto_rawDescData)
	})
	return file_userserver_proto_rawDescData
}

var file_userserver_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_userserver_proto_msgTypes = make([]protoimpl.MessageInfo, 185)
var file_userserver_proto_goTypes = []interface{}{
	(ReErrCode)(0),                              // 0: infoserver.ReErrCode
	(Switch)(0),                                 // 1: infoserver.Switch
	(UpdateSwitchResult_ResultCode)(0),          // 2: infoserver.UpdateSwitchResult.ResultCode
	(GetSwitchStatusResult_ResultCode)(0),       // 3: infoserver.GetSwitchStatusResult.ResultCode
	(DeleteUserUsernameResult_Code)(0),          // 4: infoserver.DeleteUserUsernameResult.Code
	(*GetUserInfoByIdReq)(nil),                  // 5: infoserver.GetUserInfoByIdReq
	(*GetUserInfoByIdArrReq)(nil),               // 6: infoserver.GetUserInfoByIdArrReq
	(*UserInfoArray)(nil),                       // 7: infoserver.UserInfoArray
	(*UserInfo)(nil),                            // 8: infoserver.userInfo
	(*GetUserExpireByIdReq)(nil),                // 9: infoserver.GetUserExpireByIdReq
	(*GetUserExpireByIdResult)(nil),             // 10: infoserver.GetUserExpireByIdResult
	(*GetUserByphone)(nil),                      // 11: infoserver.GetUserByphone
	(*GetUserInfoResult)(nil),                   // 12: infoserver.GetUserInfoResult
	(*GetUserInfoByIdArrResult)(nil),            // 13: infoserver.GetUserInfoByIdArrResult
	(*GetUserByUsername)(nil),                   // 14: infoserver.GetUserByUsername
	(*UpdatePhotoInfoReq)(nil),                  // 15: infoserver.updatePhotoInfoReq
	(*GetPhotoInfoReq)(nil),                     // 16: infoserver.GetPhotoInfoReq
	(*UpdateUserPhotoResult)(nil),               // 17: infoserver.UpdateUserPhotoResult
	(*GetUserPhotoResult)(nil),                  // 18: infoserver.GetUserPhotoResult
	(*UpdateUserProfileReq)(nil),                // 19: infoserver.UpdateUserProfileReq
	(*UpdateUserProfileResult)(nil),             // 20: infoserver.UpdateUserProfileResult
	(*StatusReq)(nil),                           // 21: infoserver.StatusReq
	(*StatusResult)(nil),                        // 22: infoserver.StatusResult
	(*UpdateExpireReq)(nil),                     // 23: infoserver.UpdateExpireReq
	(*UpdateExpireResult)(nil),                  // 24: infoserver.UpdateExpireResult
	(*UserClusterChange)(nil),                   // 25: infoserver.UserClusterChange
	(*UserClusterChangeResult)(nil),             // 26: infoserver.UserClusterChangeResult
	(*UpdateuserNameReq)(nil),                   // 27: infoserver.UpdateuserNameReq
	(*UpdateuserNameResult)(nil),                // 28: infoserver.UpdateuserNameResult
	(*CheckPhoneRegisterReq)(nil),               // 29: infoserver.CheckPhoneRegisterReq
	(*CheckPhoneRegisterResult)(nil),            // 30: infoserver.CheckPhoneRegisterResult
	(*DeleteAccountByIdReq)(nil),                // 31: infoserver.DeleteAccountByIdReq
	(*DelAccountResult)(nil),                    // 32: infoserver.DelAccountResult
	(*BotUpdateInfo)(nil),                       // 33: infoserver.BotUpdateInfo
	(*BotUpdateInfoResult)(nil),                 // 34: infoserver.BotUpdateInfoResult
	(*DelContactReq)(nil),                       // 35: infoserver.DelContactReq
	(*DelContactResult)(nil),                    // 36: infoserver.DelContactResult
	(*ContactIdHash)(nil),                       // 37: infoserver.ContactIdHash
	(*DelContactArrReq)(nil),                    // 38: infoserver.DelContactArrReq
	(*CmdResetUserContactsReq)(nil),             // 39: infoserver.CmdResetUserContactsReq
	(*CmdResetUserContactsResult)(nil),          // 40: infoserver.CmdResetUserContactsResult
	(*DelContactArrResult)(nil),                 // 41: infoserver.DelContactArrResult
	(*ContatsGetContactsReq)(nil),               // 42: infoserver.ContatsGetContactsReq
	(*ContactInfo)(nil),                         // 43: infoserver.contactInfo
	(*ContatsGetContactsResult)(nil),            // 44: infoserver.ContatsGetContactsResult
	(*PhoneBookContact)(nil),                    // 45: infoserver.PhoneBookContact
	(*ContactsImportPhoneContactsReq)(nil),      // 46: infoserver.ContactsImportPhoneContactsReq
	(*ImportContact)(nil),                       // 47: infoserver.ImportContact
	(*PopularContact)(nil),                      // 48: infoserver.PopularContact
	(*ContactsImportPhoneContactsResult)(nil),   // 49: infoserver.ContactsImportPhoneContactsResult
	(*AddRelationIdInfo)(nil),                   // 50: infoserver.AddRelationIdInfo
	(*DelRelationIdInfo)(nil),                   // 51: infoserver.DelRelationIdInfo
	(*AddRelationIdInfoResult)(nil),             // 52: infoserver.AddRelationIdInfoResult
	(*DelRelationIdInfoResult)(nil),             // 53: infoserver.DelRelationIdInfoResult
	(*BlockeduserReq)(nil),                      // 54: infoserver.BlockeduserReq
	(*BlockeduserResult)(nil),                   // 55: infoserver.BlockeduserResult
	(*ContactUnblockedReq)(nil),                 // 56: infoserver.ContactUnblockedReq
	(*ContactsGetBlockedReq)(nil),               // 57: infoserver.ContactsGetBlockedReq
	(*Blockeduser)(nil),                         // 58: infoserver.blockeduser
	(*ContactsGetBlockedResult)(nil),            // 59: infoserver.ContactsGetBlockedResult
	(*SystemWhiteUser)(nil),                     // 60: infoserver.SystemWhiteUser
	(*StoreSysWhiteUserReq)(nil),                // 61: infoserver.StoreSysWhiteUserReq
	(*StoreSysWhiteUserResult)(nil),             // 62: infoserver.StoreSysWhiteUserResult
	(*UpdateSystemWhiteUserLevelReq)(nil),       // 63: infoserver.UpdateSystemWhiteUserLevelReq
	(*UpdateSystemWhiteUserLevelResult)(nil),    // 64: infoserver.UpdateSystemWhiteUserLevelResult
	(*GetSysWhiteUserReq)(nil),                  // 65: infoserver.GetSysWhiteUserReq
	(*GetSysWhiteUserResult)(nil),               // 66: infoserver.GetSysWhiteUserResult
	(*GetSysWhiteUserArrReq)(nil),               // 67: infoserver.GetSysWhiteUserArrReq
	(*GetSysWhiteUserArrResult)(nil),            // 68: infoserver.GetSysWhiteUserArrResult
	(*DelSysWhiteUserReq)(nil),                  // 69: infoserver.DelSysWhiteUserReq
	(*DelSysWhiteUserResult)(nil),               // 70: infoserver.DelSysWhiteUserResult
	(*UserDc)(nil),                              // 71: infoserver.UserDc
	(*GetAllDcReq)(nil),                         // 72: infoserver.GetAllDcReq
	(*SetPrivacyReq)(nil),                       // 73: infoserver.SetPrivacyReq
	(*SetPrivacyResult)(nil),                    // 74: infoserver.SetPrivacyResult
	(*GetPrivacyReq)(nil),                       // 75: infoserver.GetPrivacyReq
	(*CheckPrivacyReq)(nil),                     // 76: infoserver.CheckPrivacyReq
	(*CheckPrivacyResult)(nil),                  // 77: infoserver.CheckPrivacyResult
	(*GetPrivacyResult)(nil),                    // 78: infoserver.GetPrivacyResult
	(*StoreShopStickerSetReq)(nil),              // 79: infoserver.StoreShopStickerSetReq
	(*StoreShopStickerSetResult)(nil),           // 80: infoserver.StoreShopStickerSetResult
	(*StoreShopStickerSetDocumentsReq)(nil),     // 81: infoserver.StoreShopStickerSetDocumentsReq
	(*StoreShopStickerSetDocumentsResult)(nil),  // 82: infoserver.StoreShopStickerSetDocumentsResult
	(*DeleteStickerSetReq)(nil),                 // 83: infoserver.DeleteStickerSetReq
	(*DeleteStickerSetResult)(nil),              // 84: infoserver.DeleteStickerSetResult
	(*StickerSetInfo)(nil),                      // 85: infoserver.StickerSetInfo
	(*GetStickerSetInfoReq)(nil),                // 86: infoserver.GetStickerSetInfoReq
	(*GetStickerSetInfoResult)(nil),             // 87: infoserver.GetStickerSetInfoResult
	(*StickerPackDocumentBase)(nil),             // 88: infoserver.StickerPackDocumentBase
	(*StickerPackDocumentInfo)(nil),             // 89: infoserver.StickerPackDocumentInfo
	(*StoreStickerPackDcReq)(nil),               // 90: infoserver.StoreStickerPackDcReq
	(*StoreStickerPackDcResult)(nil),            // 91: infoserver.StoreStickerPackDcResult
	(*StoreStickerPackDcArrReq)(nil),            // 92: infoserver.StoreStickerPackDcArrReq
	(*StoreStickerPackDcArrResult)(nil),         // 93: infoserver.StoreStickerPackDcArrResult
	(*GetStickerSetPackDcInfosReq)(nil),         // 94: infoserver.GetStickerSetPackDcInfosReq
	(*GetStickerSetPackDcInfosResult)(nil),      // 95: infoserver.GetStickerSetPackDcInfosResult
	(*AddOrDeleteFaveSticerReq)(nil),            // 96: infoserver.AddOrDeleteFaveSticerReq
	(*AddOrDeleteFaveSticerResult)(nil),         // 97: infoserver.AddOrDeleteFaveSticerResult
	(*GetFavedStickersReq)(nil),                 // 98: infoserver.GetFavedStickersReq
	(*GetFavedStickersResult)(nil),              // 99: infoserver.GetFavedStickersResult
	(*StickerPack)(nil),                         // 100: infoserver.StickerPack
	(*StoreUserStickerSetReq)(nil),              // 101: infoserver.StoreUserStickerSetReq
	(*StoreUserStickerSetResult)(nil),           // 102: infoserver.StoreUserStickerSetResult
	(*UpdateUserStickerSetDisabledReq)(nil),     // 103: infoserver.UpdateUserStickerSetDisabledReq
	(*UpdateUserStickerSetDisabledResult)(nil),  // 104: infoserver.UpdateUserStickerSetDisabledResult
	(*UpdateUserStickerSetOrderReq)(nil),        // 105: infoserver.UpdateUserStickerSetOrderReq
	(*UpdateUserStickerSetOrderResult)(nil),     // 106: infoserver.UpdateUserStickerSetOrderResult
	(*UpdateUserStickerSetInstallArReq)(nil),    // 107: infoserver.UpdateUserStickerSetInstallArReq
	(*UpdateUserStickerSetInstallArResult)(nil), // 108: infoserver.UpdateUserStickerSetInstallArResult
	(*DeleteuserStickerReq)(nil),                // 109: infoserver.DeleteuserStickerReq
	(*DeleteuserStickerResult)(nil),             // 110: infoserver.DeleteuserStickerResult
	(*UserStickerInfo)(nil),                     // 111: infoserver.UserStickerInfo
	(*UserStickerInfoArr)(nil),                  // 112: infoserver.UserStickerInfoArr
	(*StickerSetInfoArr)(nil),                   // 113: infoserver.StickerSetInfoArr
	(*GetuserAllStickersReq)(nil),               // 114: infoserver.GetuserAllStickersReq
	(*GetuserAllStickersResult)(nil),            // 115: infoserver.GetuserAllStickersResult
	(*GetAllStickerSetsReq)(nil),                // 116: infoserver.GetAllStickerSetsReq
	(*GetAllStickerSetsResult)(nil),             // 117: infoserver.GetAllStickerSetsResult
	(*DeleteStickerPackDocumentReq)(nil),        // 118: infoserver.DeleteStickerPackDocumentReq
	(*DeleteStickerPackDocumentResult)(nil),     // 119: infoserver.DeleteStickerPackDocumentResult
	(*GetAuthorStickerSetReq)(nil),              // 120: infoserver.GetAuthorStickerSetReq
	(*GetAuthorStickerSetResult)(nil),           // 121: infoserver.GetAuthorStickerSetResult
	(*GetAuthorAllStickerSetReq)(nil),           // 122: infoserver.GetAuthorAllStickerSetReq
	(*GetAuthorAllStickerSetResult)(nil),        // 123: infoserver.GetAuthorAllStickerSetResult
	(*AuthorStickerSet)(nil),                    // 124: infoserver.AuthorStickerSet
	(*CountAuthorAllStickerSetReq)(nil),         // 125: infoserver.CountAuthorAllStickerSetReq
	(*CountAuthorAllStickerSetResult)(nil),      // 126: infoserver.CountAuthorAllStickerSetResult
	(*UserGifInfoArr)(nil),                      // 127: infoserver.userGifInfoArr
	(*UserSaveGifInfo)(nil),                     // 128: infoserver.userSaveGifInfo
	(*SaveUserGifReq)(nil),                      // 129: infoserver.SaveUserGifReq
	(*SaveUserGifResult)(nil),                   // 130: infoserver.SaveUserGifResult
	(*DelUserGifReq)(nil),                       // 131: infoserver.DelUserGifReq
	(*DelUserGifResult)(nil),                    // 132: infoserver.DelUserGifResult
	(*GetUserGifsReq)(nil),                      // 133: infoserver.GetUserGifsReq
	(*GetUserGifsResult)(nil),                   // 134: infoserver.GetUserGifsResult
	(*CheckUserIsBlockedReq)(nil),               // 135: infoserver.CheckUserIsBlockedReq
	(*CheckUserIsBlockedResult)(nil),            // 136: infoserver.CheckUserIsBlockedResult
	(*RegisterUserInfo)(nil),                    // 137: infoserver.registerUserInfo
	(*UpdateUserInfoResult)(nil),                // 138: infoserver.UpdateUserInfoResult
	(*CheckUserAccessHashValidReq)(nil),         // 139: infoserver.checkUserAccessHashValidReq
	(*CheckUserAccessHashValidResult)(nil),      // 140: infoserver.checkUserAccessHashValidResult
	(*RegisterUserInfoReq)(nil),                 // 141: infoserver.RegisterUserInfoReq
	(*RegisterUserInfoResult)(nil),              // 142: infoserver.RegisterUserInfoResult
	(*GetNotifySettingsReq)(nil),                // 143: infoserver.GetNotifySettingsReq
	(*GetNotifySettingsResult)(nil),             // 144: infoserver.GetNotifySettingsResult
	(*UpdateNotifySettingsReq)(nil),             // 145: infoserver.UpdateNotifySettingsReq
	(*UpdateNotifySettingsResult)(nil),          // 146: infoserver.UpdateNotifySettingsResult
	(*GetContactsStatusReq)(nil),                // 147: infoserver.GetContactsStatusReq
	(*UserStaus)(nil),                           // 148: infoserver.UserStaus
	(*GetContactsStatusResult)(nil),             // 149: infoserver.GetContactsStatusResult
	(*UpdateBotPicRequest)(nil),                 // 150: infoserver.UpdateBotPicRequest
	(*UpdateBotPicResult)(nil),                  // 151: infoserver.UpdateBotPicResult
	(*GetAllProxyConfigReq)(nil),                // 152: infoserver.GetAllProxyConfigReq
	(*ProxyAddr)(nil),                           // 153: infoserver.ProxyAddr
	(*GetAllProxyConfigResult)(nil),             // 154: infoserver.GetAllProxyConfigResult
	(*CheckUserNameOccupiedReq)(nil),            // 155: infoserver.CheckUserNameOccupiedReq
	(*CheckUserNameOccupiedResult)(nil),         // 156: infoserver.CheckUserNameOccupiedResult
	(*GetUserGpsReq)(nil),                       // 157: infoserver.GetUserGpsReq
	(*GetUserGpsResult)(nil),                    // 158: infoserver.GetUserGpsResult
	(*CheckSelfIsContactReq)(nil),               // 159: infoserver.CheckSelfIsContactReq
	(*CheckSelfIsContactResult)(nil),            // 160: infoserver.CheckSelfIsContactResult
	(*UpdateSwitchReq)(nil),                     // 161: infoserver.UpdateSwitchReq
	(*UpdateSwitchResult)(nil),                  // 162: infoserver.UpdateSwitchResult
	(*GetSwitchStatusReq)(nil),                  // 163: infoserver.GetSwitchStatusReq
	(*GetSwitchStatusResult)(nil),               // 164: infoserver.GetSwitchStatusResult
	(*UGetUsersChatsReq)(nil),                   // 165: infoserver.UGetUsersChatsReq
	(*UGetUsersChatsResult)(nil),                // 166: infoserver.UGetUsersChatsResult
	(*UpdateBotInfoSuppReq)(nil),                // 167: infoserver.UpdateBotInfoSuppReq
	(*UpdateBotInfoSuppResult)(nil),             // 168: infoserver.UpdateBotInfoSuppResult
	(*DeleteUserUsernameReq)(nil),               // 169: infoserver.DeleteUserUsernameReq
	(*DeleteUserUsernameResult)(nil),            // 170: infoserver.DeleteUserUsernameResult
	(*UpdateUserLocationReq)(nil),               // 171: infoserver.UpdateUserLocationReq
	(*UpdateUserLocationResult)(nil),            // 172: infoserver.UpdateUserLocationResult
	(*UpdateUserGrenderReq)(nil),                // 173: infoserver.UpdateUserGrenderReq
	(*UpdateUserGrenderResult)(nil),             // 174: infoserver.UpdateUserGrenderResult
	(*UpdateUserEmailReq)(nil),                  // 175: infoserver.UpdateUserEmailReq
	(*UpdateUserEmailResult)(nil),               // 176: infoserver.UpdateUserEmailResult
	(*UploadContactsReq)(nil),                   // 177: infoserver.UploadContactsReq
	(*UploadContactsResult)(nil),                // 178: infoserver.UploadContactsResult
	(*ApplyContactReq)(nil),                     // 179: infoserver.ApplyContactReq
	(*ApplyContactResult)(nil),                  // 180: infoserver.ApplyContactResult
	(*GetAppliedContactsReq)(nil),               // 181: infoserver.GetAppliedContactsReq
	(*GetAppliedContactsResult)(nil),            // 182: infoserver.GetAppliedContactsResult
	(*Applied)(nil),                             // 183: infoserver.Applied
	(*VerifyContactReq)(nil),                    // 184: infoserver.VerifyContactReq
	(*VerifyContactResult)(nil),                 // 185: infoserver.VerifyContactResult
	(*DeleteAppliedContactReq)(nil),             // 186: infoserver.DeleteAppliedContactReq
	(*DeleteAppliedContactResult)(nil),          // 187: infoserver.DeleteAppliedContactResult
	(*SearchUserByPhoneReq)(nil),                // 188: infoserver.SearchUserByPhoneReq
	(*SearchUserByPhoneResult)(nil),             // 189: infoserver.SearchUserByPhoneResult
	(*pbcomm.Debug)(nil),                        // 190: pbcomm.Debug
	(ChatResultCode)(0),                         // 191: infoserver.ChatResultCode
}
var file_userserver_proto_depIdxs = []int32{
	190, // 0: infoserver.GetUserInfoByIdReq.debug:type_name -> pbcomm.Debug
	190, // 1: infoserver.GetUserInfoByIdArrReq.debug:type_name -> pbcomm.Debug
	8,   // 2: infoserver.UserInfoArray.userin:type_name -> infoserver.userInfo
	190, // 3: infoserver.GetUserExpireByIdReq.debug:type_name -> pbcomm.Debug
	0,   // 4: infoserver.GetUserExpireByIdResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 5: infoserver.GetUserByphone.debug:type_name -> pbcomm.Debug
	8,   // 6: infoserver.GetUserInfoResult.Uinfo:type_name -> infoserver.userInfo
	0,   // 7: infoserver.GetUserInfoResult.Errorcode:type_name -> infoserver.ReErrCode
	8,   // 8: infoserver.GetUserInfoByIdArrResult.Uinfo:type_name -> infoserver.userInfo
	0,   // 9: infoserver.GetUserInfoByIdArrResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 10: infoserver.GetUserByUsername.debug:type_name -> pbcomm.Debug
	190, // 11: infoserver.updatePhotoInfoReq.debug:type_name -> pbcomm.Debug
	190, // 12: infoserver.GetPhotoInfoReq.debug:type_name -> pbcomm.Debug
	0,   // 13: infoserver.UpdateUserPhotoResult.Errorcode:type_name -> infoserver.ReErrCode
	0,   // 14: infoserver.GetUserPhotoResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 15: infoserver.UpdateUserProfileReq.debug:type_name -> pbcomm.Debug
	8,   // 16: infoserver.UpdateUserProfileResult.Uinfo:type_name -> infoserver.userInfo
	0,   // 17: infoserver.UpdateUserProfileResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 18: infoserver.StatusReq.debug:type_name -> pbcomm.Debug
	0,   // 19: infoserver.StatusResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 20: infoserver.UpdateExpireReq.debug:type_name -> pbcomm.Debug
	0,   // 21: infoserver.UpdateExpireResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 22: infoserver.UserClusterChange.debug:type_name -> pbcomm.Debug
	0,   // 23: infoserver.UserClusterChangeResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 24: infoserver.UpdateuserNameReq.debug:type_name -> pbcomm.Debug
	8,   // 25: infoserver.UpdateuserNameResult.Uinfo:type_name -> infoserver.userInfo
	0,   // 26: infoserver.UpdateuserNameResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 27: infoserver.CheckPhoneRegisterReq.debug:type_name -> pbcomm.Debug
	0,   // 28: infoserver.CheckPhoneRegisterResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 29: infoserver.DeleteAccountByIdReq.debug:type_name -> pbcomm.Debug
	0,   // 30: infoserver.DelAccountResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 31: infoserver.BotUpdateInfo.debug:type_name -> pbcomm.Debug
	0,   // 32: infoserver.BotUpdateInfoResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 33: infoserver.DelContactReq.debug:type_name -> pbcomm.Debug
	8,   // 34: infoserver.DelContactResult.Uinfo:type_name -> infoserver.userInfo
	0,   // 35: infoserver.DelContactResult.Errorcode:type_name -> infoserver.ReErrCode
	37,  // 36: infoserver.DelContactArrReq.contactidArr:type_name -> infoserver.ContactIdHash
	190, // 37: infoserver.DelContactArrReq.debug:type_name -> pbcomm.Debug
	0,   // 38: infoserver.DelContactArrResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 39: infoserver.ContatsGetContactsReq.debug:type_name -> pbcomm.Debug
	43,  // 40: infoserver.ContatsGetContactsResult.contactArr:type_name -> infoserver.contactInfo
	8,   // 41: infoserver.ContatsGetContactsResult.userInfoArr:type_name -> infoserver.userInfo
	0,   // 42: infoserver.ContatsGetContactsResult.Errorcode:type_name -> infoserver.ReErrCode
	45,  // 43: infoserver.ContactsImportPhoneContactsReq.phoneContactArr:type_name -> infoserver.PhoneBookContact
	190, // 44: infoserver.ContactsImportPhoneContactsReq.debug:type_name -> pbcomm.Debug
	47,  // 45: infoserver.ContactsImportPhoneContactsResult.imContactDetail:type_name -> infoserver.ImportContact
	8,   // 46: infoserver.ContactsImportPhoneContactsResult.userInfoArr:type_name -> infoserver.userInfo
	48,  // 47: infoserver.ContactsImportPhoneContactsResult.PopuContact:type_name -> infoserver.PopularContact
	0,   // 48: infoserver.ContactsImportPhoneContactsResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 49: infoserver.AddRelationIdInfo.debug:type_name -> pbcomm.Debug
	190, // 50: infoserver.DelRelationIdInfo.debug:type_name -> pbcomm.Debug
	0,   // 51: infoserver.AddRelationIdInfoResult.Errorcode:type_name -> infoserver.ReErrCode
	0,   // 52: infoserver.DelRelationIdInfoResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 53: infoserver.BlockeduserReq.debug:type_name -> pbcomm.Debug
	0,   // 54: infoserver.BlockeduserResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 55: infoserver.ContactUnblockedReq.debug:type_name -> pbcomm.Debug
	190, // 56: infoserver.ContactsGetBlockedReq.debug:type_name -> pbcomm.Debug
	8,   // 57: infoserver.ContactsGetBlockedResult.InfoArr:type_name -> infoserver.userInfo
	0,   // 58: infoserver.ContactsGetBlockedResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 59: infoserver.StoreSysWhiteUserReq.debug:type_name -> pbcomm.Debug
	0,   // 60: infoserver.StoreSysWhiteUserResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 61: infoserver.UpdateSystemWhiteUserLevelReq.debug:type_name -> pbcomm.Debug
	0,   // 62: infoserver.UpdateSystemWhiteUserLevelResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 63: infoserver.GetSysWhiteUserReq.debug:type_name -> pbcomm.Debug
	60,  // 64: infoserver.GetSysWhiteUserResult.sysWhiteInfo:type_name -> infoserver.SystemWhiteUser
	0,   // 65: infoserver.GetSysWhiteUserResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 66: infoserver.GetSysWhiteUserArrReq.debug:type_name -> pbcomm.Debug
	60,  // 67: infoserver.GetSysWhiteUserArrResult.sysWhiteInfoArr:type_name -> infoserver.SystemWhiteUser
	0,   // 68: infoserver.GetSysWhiteUserArrResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 69: infoserver.DelSysWhiteUserReq.debug:type_name -> pbcomm.Debug
	0,   // 70: infoserver.DelSysWhiteUserResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 71: infoserver.UserDc.debug:type_name -> pbcomm.Debug
	190, // 72: infoserver.GetAllDcReq.debug:type_name -> pbcomm.Debug
	190, // 73: infoserver.SetPrivacyReq.debug:type_name -> pbcomm.Debug
	8,   // 74: infoserver.SetPrivacyResult.UinfoArr:type_name -> infoserver.userInfo
	0,   // 75: infoserver.SetPrivacyResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 76: infoserver.GetPrivacyReq.debug:type_name -> pbcomm.Debug
	190, // 77: infoserver.CheckPrivacyReq.debug:type_name -> pbcomm.Debug
	0,   // 78: infoserver.CheckPrivacyResult.Errorcode:type_name -> infoserver.ReErrCode
	8,   // 79: infoserver.GetPrivacyResult.userInfos:type_name -> infoserver.userInfo
	0,   // 80: infoserver.GetPrivacyResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 81: infoserver.StoreShopStickerSetReq.debug:type_name -> pbcomm.Debug
	0,   // 82: infoserver.StoreShopStickerSetResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 83: infoserver.StoreShopStickerSetDocumentsReq.debug:type_name -> pbcomm.Debug
	0,   // 84: infoserver.StoreShopStickerSetDocumentsResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 85: infoserver.DeleteStickerSetReq.debug:type_name -> pbcomm.Debug
	0,   // 86: infoserver.DeleteStickerSetResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 87: infoserver.GetStickerSetInfoReq.debug:type_name -> pbcomm.Debug
	85,  // 88: infoserver.GetStickerSetInfoResult.stickerSetInfo:type_name -> infoserver.StickerSetInfo
	0,   // 89: infoserver.GetStickerSetInfoResult.Errorcode:type_name -> infoserver.ReErrCode
	88,  // 90: infoserver.StickerPackDocumentInfo.infoBase:type_name -> infoserver.StickerPackDocumentBase
	88,  // 91: infoserver.StoreStickerPackDcReq.stickpackbase:type_name -> infoserver.StickerPackDocumentBase
	190, // 92: infoserver.StoreStickerPackDcReq.debug:type_name -> pbcomm.Debug
	0,   // 93: infoserver.StoreStickerPackDcResult.Errorcode:type_name -> infoserver.ReErrCode
	88,  // 94: infoserver.StoreStickerPackDcArrReq.StPDB:type_name -> infoserver.StickerPackDocumentBase
	190, // 95: infoserver.StoreStickerPackDcArrReq.debug:type_name -> pbcomm.Debug
	0,   // 96: infoserver.StoreStickerPackDcArrResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 97: infoserver.GetStickerSetPackDcInfosReq.debug:type_name -> pbcomm.Debug
	89,  // 98: infoserver.GetStickerSetPackDcInfosResult.StPDcInfo:type_name -> infoserver.StickerPackDocumentInfo
	190, // 99: infoserver.AddOrDeleteFaveSticerReq.debug:type_name -> pbcomm.Debug
	0,   // 100: infoserver.AddOrDeleteFaveSticerResult.ErrorCode:type_name -> infoserver.ReErrCode
	190, // 101: infoserver.GetFavedStickersReq.debug:type_name -> pbcomm.Debug
	100, // 102: infoserver.GetFavedStickersResult.packs:type_name -> infoserver.StickerPack
	88,  // 103: infoserver.GetFavedStickersResult.stickers:type_name -> infoserver.StickerPackDocumentBase
	0,   // 104: infoserver.GetFavedStickersResult.ErrorCode:type_name -> infoserver.ReErrCode
	190, // 105: infoserver.StoreUserStickerSetReq.debug:type_name -> pbcomm.Debug
	0,   // 106: infoserver.StoreUserStickerSetResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 107: infoserver.UpdateUserStickerSetDisabledReq.debug:type_name -> pbcomm.Debug
	0,   // 108: infoserver.UpdateUserStickerSetDisabledResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 109: infoserver.UpdateUserStickerSetOrderReq.debug:type_name -> pbcomm.Debug
	0,   // 110: infoserver.UpdateUserStickerSetOrderResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 111: infoserver.UpdateUserStickerSetInstallArReq.debug:type_name -> pbcomm.Debug
	0,   // 112: infoserver.UpdateUserStickerSetInstallArResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 113: infoserver.DeleteuserStickerReq.debug:type_name -> pbcomm.Debug
	0,   // 114: infoserver.DeleteuserStickerResult.Errorcode:type_name -> infoserver.ReErrCode
	111, // 115: infoserver.UserStickerInfoArr.stickerInfo:type_name -> infoserver.UserStickerInfo
	85,  // 116: infoserver.StickerSetInfoArr.stickerInfo:type_name -> infoserver.StickerSetInfo
	190, // 117: infoserver.GetuserAllStickersReq.debug:type_name -> pbcomm.Debug
	111, // 118: infoserver.GetuserAllStickersResult.stickerInfoArr:type_name -> infoserver.UserStickerInfo
	0,   // 119: infoserver.GetuserAllStickersResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 120: infoserver.GetAllStickerSetsReq.debug:type_name -> pbcomm.Debug
	85,  // 121: infoserver.GetAllStickerSetsResult.stickerInfoArr:type_name -> infoserver.StickerSetInfo
	0,   // 122: infoserver.GetAllStickerSetsResult.Errorcode:type_name -> infoserver.ReErrCode
	0,   // 123: infoserver.DeleteStickerPackDocumentResult.Errorcode:type_name -> infoserver.ReErrCode
	0,   // 124: infoserver.GetAuthorStickerSetResult.ErrorCode:type_name -> infoserver.ReErrCode
	124, // 125: infoserver.GetAuthorStickerSetResult.set:type_name -> infoserver.AuthorStickerSet
	0,   // 126: infoserver.GetAuthorAllStickerSetResult.ErrorCode:type_name -> infoserver.ReErrCode
	124, // 127: infoserver.GetAuthorAllStickerSetResult.sets:type_name -> infoserver.AuthorStickerSet
	0,   // 128: infoserver.CountAuthorAllStickerSetResult.ErrorCode:type_name -> infoserver.ReErrCode
	128, // 129: infoserver.userGifInfoArr.gif_arr:type_name -> infoserver.userSaveGifInfo
	190, // 130: infoserver.SaveUserGifReq.debug:type_name -> pbcomm.Debug
	0,   // 131: infoserver.SaveUserGifResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 132: infoserver.DelUserGifReq.debug:type_name -> pbcomm.Debug
	0,   // 133: infoserver.DelUserGifResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 134: infoserver.GetUserGifsReq.debug:type_name -> pbcomm.Debug
	128, // 135: infoserver.GetUserGifsResult.gif_arr:type_name -> infoserver.userSaveGifInfo
	0,   // 136: infoserver.GetUserGifsResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 137: infoserver.CheckUserIsBlockedReq.debug:type_name -> pbcomm.Debug
	0,   // 138: infoserver.CheckUserIsBlockedResult.Errorcode:type_name -> infoserver.ReErrCode
	8,   // 139: infoserver.UpdateUserInfoResult.uinfo:type_name -> infoserver.userInfo
	190, // 140: infoserver.checkUserAccessHashValidReq.debug:type_name -> pbcomm.Debug
	0,   // 141: infoserver.checkUserAccessHashValidResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 142: infoserver.RegisterUserInfoReq.debug:type_name -> pbcomm.Debug
	8,   // 143: infoserver.RegisterUserInfoResult.uinfo:type_name -> infoserver.userInfo
	0,   // 144: infoserver.RegisterUserInfoResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 145: infoserver.GetNotifySettingsReq.debug:type_name -> pbcomm.Debug
	0,   // 146: infoserver.GetNotifySettingsResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 147: infoserver.UpdateNotifySettingsReq.debug:type_name -> pbcomm.Debug
	0,   // 148: infoserver.UpdateNotifySettingsResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 149: infoserver.GetContactsStatusReq.debug:type_name -> pbcomm.Debug
	148, // 150: infoserver.GetContactsStatusResult.contactStatusArr:type_name -> infoserver.UserStaus
	0,   // 151: infoserver.GetContactsStatusResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 152: infoserver.UpdateBotPicRequest.debug:type_name -> pbcomm.Debug
	0,   // 153: infoserver.UpdateBotPicResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 154: infoserver.GetAllProxyConfigReq.debug:type_name -> pbcomm.Debug
	153, // 155: infoserver.GetAllProxyConfigResult.addrs:type_name -> infoserver.ProxyAddr
	0,   // 156: infoserver.GetAllProxyConfigResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 157: infoserver.CheckUserNameOccupiedReq.debug:type_name -> pbcomm.Debug
	190, // 158: infoserver.GetUserGpsReq.debug:type_name -> pbcomm.Debug
	0,   // 159: infoserver.GetUserGpsResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 160: infoserver.CheckSelfIsContactReq.debug:type_name -> pbcomm.Debug
	0,   // 161: infoserver.CheckSelfIsContactResult.Errorcode:type_name -> infoserver.ReErrCode
	1,   // 162: infoserver.UpdateSwitchReq.switch:type_name -> infoserver.Switch
	2,   // 163: infoserver.UpdateSwitchResult.code:type_name -> infoserver.UpdateSwitchResult.ResultCode
	1,   // 164: infoserver.GetSwitchStatusReq.switch:type_name -> infoserver.Switch
	3,   // 165: infoserver.GetSwitchStatusResult.code:type_name -> infoserver.GetSwitchStatusResult.ResultCode
	190, // 166: infoserver.UGetUsersChatsReq.Dlog:type_name -> pbcomm.Debug
	7,   // 167: infoserver.UGetUsersChatsResult.users:type_name -> infoserver.UserInfoArray
	191, // 168: infoserver.UGetUsersChatsResult.resultcode:type_name -> infoserver.ChatResultCode
	190, // 169: infoserver.UpdateBotInfoSuppReq.debug:type_name -> pbcomm.Debug
	0,   // 170: infoserver.UpdateBotInfoSuppResult.Errorcode:type_name -> infoserver.ReErrCode
	190, // 171: infoserver.DeleteUserUsernameReq.debug:type_name -> pbcomm.Debug
	4,   // 172: infoserver.DeleteUserUsernameResult.code:type_name -> infoserver.DeleteUserUsernameResult.Code
	190, // 173: infoserver.UpdateUserLocationReq.debug:type_name -> pbcomm.Debug
	190, // 174: infoserver.UpdateUserGrenderReq.debug:type_name -> pbcomm.Debug
	190, // 175: infoserver.UpdateUserEmailReq.debug:type_name -> pbcomm.Debug
	45,  // 176: infoserver.UploadContactsReq.phoneContactArr:type_name -> infoserver.PhoneBookContact
	183, // 177: infoserver.GetAppliedContactsResult.applied_arr:type_name -> infoserver.Applied
	8,   // 178: infoserver.Applied.apply_user:type_name -> infoserver.userInfo
	8,   // 179: infoserver.SearchUserByPhoneResult.user_info:type_name -> infoserver.userInfo
	141, // 180: infoserver.UserServerService.RegisterUserInfo:input_type -> infoserver.RegisterUserInfoReq
	5,   // 181: infoserver.UserServerService.GetUserInfoById:input_type -> infoserver.GetUserInfoByIdReq
	6,   // 182: infoserver.UserServerService.GetUserInfoByIdArr:input_type -> infoserver.GetUserInfoByIdArrReq
	9,   // 183: infoserver.UserServerService.GetUserExpierById:input_type -> infoserver.GetUserExpireByIdReq
	11,  // 184: infoserver.UserServerService.GetUserInfoByPhone:input_type -> infoserver.GetUserByphone
	14,  // 185: infoserver.UserServerService.GetUserInfoByUsername:input_type -> infoserver.GetUserByUsername
	15,  // 186: infoserver.UserServerService.UpdateUserPhoto:input_type -> infoserver.updatePhotoInfoReq
	16,  // 187: infoserver.UserServerService.GetUserPhoto:input_type -> infoserver.GetPhotoInfoReq
	19,  // 188: infoserver.UserServerService.UpdateUserProfile:input_type -> infoserver.UpdateUserProfileReq
	21,  // 189: infoserver.UserServerService.UpdateUserStatus:input_type -> infoserver.StatusReq
	21,  // 190: infoserver.UserServerService.UpdateUserStatusV2:input_type -> infoserver.StatusReq
	23,  // 191: infoserver.UserServerService.UpdateUserExpire:input_type -> infoserver.UpdateExpireReq
	25,  // 192: infoserver.UserServerService.UpdateUserCluster:input_type -> infoserver.UserClusterChange
	27,  // 193: infoserver.UserServerService.UpdateUserName:input_type -> infoserver.UpdateuserNameReq
	155, // 194: infoserver.UserServerService.CheckUserNameOccupied:input_type -> infoserver.CheckUserNameOccupiedReq
	29,  // 195: infoserver.UserServerService.CheckPhoneRegister:input_type -> infoserver.CheckPhoneRegisterReq
	31,  // 196: infoserver.UserServerService.DeleteUserInfoById:input_type -> infoserver.DeleteAccountByIdReq
	33,  // 197: infoserver.UserServerService.UpdateBotInfo:input_type -> infoserver.BotUpdateInfo
	150, // 198: infoserver.UserServerService.UpdateBotPic:input_type -> infoserver.UpdateBotPicRequest
	139, // 199: infoserver.UserServerService.checkUserAccessHashValid:input_type -> infoserver.checkUserAccessHashValidReq
	35,  // 200: infoserver.UserServerService.ContactsDelContact:input_type -> infoserver.DelContactReq
	38,  // 201: infoserver.UserServerService.ContactsDelContactsArr:input_type -> infoserver.DelContactArrReq
	39,  // 202: infoserver.UserServerService.CmdResetUserContacts:input_type -> infoserver.CmdResetUserContactsReq
	42,  // 203: infoserver.UserServerService.ContactsGetContacts:input_type -> infoserver.ContatsGetContactsReq
	46,  // 204: infoserver.UserServerService.ImportContacts:input_type -> infoserver.ContactsImportPhoneContactsReq
	147, // 205: infoserver.UserServerService.GetContactsStatus:input_type -> infoserver.GetContactsStatusReq
	159, // 206: infoserver.UserServerService.CheckSelfIsContact:input_type -> infoserver.CheckSelfIsContactReq
	50,  // 207: infoserver.UserServerService.DialogUserRelation:input_type -> infoserver.AddRelationIdInfo
	51,  // 208: infoserver.UserServerService.DelDialogUserRelation:input_type -> infoserver.DelRelationIdInfo
	54,  // 209: infoserver.UserServerService.BlockedUser:input_type -> infoserver.BlockeduserReq
	56,  // 210: infoserver.UserServerService.ContactUnBlockedUser:input_type -> infoserver.ContactUnblockedReq
	57,  // 211: infoserver.UserServerService.ContactsGetBlocked:input_type -> infoserver.ContactsGetBlockedReq
	135, // 212: infoserver.UserServerService.CheckUserIsBlocked:input_type -> infoserver.CheckUserIsBlockedReq
	61,  // 213: infoserver.UserServerService.StoreSystemWhiteUser:input_type -> infoserver.StoreSysWhiteUserReq
	63,  // 214: infoserver.UserServerService.UpdateSystemWhiteUserLevel:input_type -> infoserver.UpdateSystemWhiteUserLevelReq
	65,  // 215: infoserver.UserServerService.GetSysWhiteUser:input_type -> infoserver.GetSysWhiteUserReq
	67,  // 216: infoserver.UserServerService.GetSysWhiteUserArr:input_type -> infoserver.GetSysWhiteUserArrReq
	69,  // 217: infoserver.UserServerService.DelSysWhiteUser:input_type -> infoserver.DelSysWhiteUserReq
	72,  // 218: infoserver.UserServerService.GetAllUserDc:input_type -> infoserver.GetAllDcReq
	73,  // 219: infoserver.UserServerService.SetUserPrivacy:input_type -> infoserver.SetPrivacyReq
	75,  // 220: infoserver.UserServerService.GetUserPrivacy:input_type -> infoserver.GetPrivacyReq
	76,  // 221: infoserver.UserServerService.CheckUserPrivacy:input_type -> infoserver.CheckPrivacyReq
	79,  // 222: infoserver.UserServerService.StoreStickerSet:input_type -> infoserver.StoreShopStickerSetReq
	81,  // 223: infoserver.UserServerService.StoreStickerSetDocument:input_type -> infoserver.StoreShopStickerSetDocumentsReq
	83,  // 224: infoserver.UserServerService.DeleteShopStickerSet:input_type -> infoserver.DeleteStickerSetReq
	86,  // 225: infoserver.UserServerService.GetStickerSetInfo:input_type -> infoserver.GetStickerSetInfoReq
	90,  // 226: infoserver.UserServerService.StoreStickerPackDc:input_type -> infoserver.StoreStickerPackDcReq
	92,  // 227: infoserver.UserServerService.StoreStickerPackDcArr:input_type -> infoserver.StoreStickerPackDcArrReq
	94,  // 228: infoserver.UserServerService.GetStickerSetPackDcInfos:input_type -> infoserver.GetStickerSetPackDcInfosReq
	96,  // 229: infoserver.UserServerService.AddOrDeleteFaveSticer:input_type -> infoserver.AddOrDeleteFaveSticerReq
	98,  // 230: infoserver.UserServerService.GetFavedStickers:input_type -> infoserver.GetFavedStickersReq
	101, // 231: infoserver.UserServerService.StoreUserStickerSet:input_type -> infoserver.StoreUserStickerSetReq
	103, // 232: infoserver.UserServerService.UpdateUserStickerDisable:input_type -> infoserver.UpdateUserStickerSetDisabledReq
	105, // 233: infoserver.UserServerService.UpdateUserStickerOrder:input_type -> infoserver.UpdateUserStickerSetOrderReq
	107, // 234: infoserver.UserServerService.UpdateUserStickerInstallArchived:input_type -> infoserver.UpdateUserStickerSetInstallArReq
	109, // 235: infoserver.UserServerService.DeleteUserSticker:input_type -> infoserver.DeleteuserStickerReq
	114, // 236: infoserver.UserServerService.GetuserAllStickers:input_type -> infoserver.GetuserAllStickersReq
	116, // 237: infoserver.UserServerService.GetAllStickerSets:input_type -> infoserver.GetAllStickerSetsReq
	118, // 238: infoserver.UserServerService.DeleteStickerPackDocument:input_type -> infoserver.DeleteStickerPackDocumentReq
	120, // 239: infoserver.UserServerService.GetAuthorStickerSet:input_type -> infoserver.GetAuthorStickerSetReq
	122, // 240: infoserver.UserServerService.GetAuthorAllStickerSet:input_type -> infoserver.GetAuthorAllStickerSetReq
	125, // 241: infoserver.UserServerService.CountAuthorAllStickerSet:input_type -> infoserver.CountAuthorAllStickerSetReq
	129, // 242: infoserver.UserServerService.SaveUserGif:input_type -> infoserver.SaveUserGifReq
	131, // 243: infoserver.UserServerService.DelUserGif:input_type -> infoserver.DelUserGifReq
	133, // 244: infoserver.UserServerService.GetUserGifs:input_type -> infoserver.GetUserGifsReq
	143, // 245: infoserver.UserServerService.GetNotifySettings:input_type -> infoserver.GetNotifySettingsReq
	145, // 246: infoserver.UserServerService.UpdateNotifySettings:input_type -> infoserver.UpdateNotifySettingsReq
	152, // 247: infoserver.UserServerService.GetAllProxyConfig:input_type -> infoserver.GetAllProxyConfigReq
	157, // 248: infoserver.UserServerService.GetUserGps:input_type -> infoserver.GetUserGpsReq
	161, // 249: infoserver.UserServerService.UpdateSwitch:input_type -> infoserver.UpdateSwitchReq
	163, // 250: infoserver.UserServerService.GetSwitchStatus:input_type -> infoserver.GetSwitchStatusReq
	173, // 251: infoserver.UserServerService.UpdateUserGrender:input_type -> infoserver.UpdateUserGrenderReq
	175, // 252: infoserver.UserServerService.UpdateUserEmail:input_type -> infoserver.UpdateUserEmailReq
	171, // 253: infoserver.UserServerService.UpdateUserLocation:input_type -> infoserver.UpdateUserLocationReq
	177, // 254: infoserver.UserServerService.UploadContacts:input_type -> infoserver.UploadContactsReq
	179, // 255: infoserver.UserServerService.ApplyContact:input_type -> infoserver.ApplyContactReq
	184, // 256: infoserver.UserServerService.VerifyContact:input_type -> infoserver.VerifyContactReq
	181, // 257: infoserver.UserServerService.GetAppliedContacts:input_type -> infoserver.GetAppliedContactsReq
	186, // 258: infoserver.UserServerService.DeleteAppliedContact:input_type -> infoserver.DeleteAppliedContactReq
	188, // 259: infoserver.UserServerService.SearchUserByPhone:input_type -> infoserver.SearchUserByPhoneReq
	169, // 260: infoserver.UserServerService.DeleteUserUsername:input_type -> infoserver.DeleteUserUsernameReq
	167, // 261: infoserver.UserServerService.UpdateBotInfoSupp:input_type -> infoserver.UpdateBotInfoSuppReq
	165, // 262: infoserver.UserServerService.UGetUsersChats:input_type -> infoserver.UGetUsersChatsReq
	142, // 263: infoserver.UserServerService.RegisterUserInfo:output_type -> infoserver.RegisterUserInfoResult
	12,  // 264: infoserver.UserServerService.GetUserInfoById:output_type -> infoserver.GetUserInfoResult
	13,  // 265: infoserver.UserServerService.GetUserInfoByIdArr:output_type -> infoserver.GetUserInfoByIdArrResult
	10,  // 266: infoserver.UserServerService.GetUserExpierById:output_type -> infoserver.GetUserExpireByIdResult
	12,  // 267: infoserver.UserServerService.GetUserInfoByPhone:output_type -> infoserver.GetUserInfoResult
	12,  // 268: infoserver.UserServerService.GetUserInfoByUsername:output_type -> infoserver.GetUserInfoResult
	17,  // 269: infoserver.UserServerService.UpdateUserPhoto:output_type -> infoserver.UpdateUserPhotoResult
	18,  // 270: infoserver.UserServerService.GetUserPhoto:output_type -> infoserver.GetUserPhotoResult
	20,  // 271: infoserver.UserServerService.UpdateUserProfile:output_type -> infoserver.UpdateUserProfileResult
	22,  // 272: infoserver.UserServerService.UpdateUserStatus:output_type -> infoserver.StatusResult
	22,  // 273: infoserver.UserServerService.UpdateUserStatusV2:output_type -> infoserver.StatusResult
	24,  // 274: infoserver.UserServerService.UpdateUserExpire:output_type -> infoserver.UpdateExpireResult
	26,  // 275: infoserver.UserServerService.UpdateUserCluster:output_type -> infoserver.UserClusterChangeResult
	28,  // 276: infoserver.UserServerService.UpdateUserName:output_type -> infoserver.UpdateuserNameResult
	156, // 277: infoserver.UserServerService.CheckUserNameOccupied:output_type -> infoserver.CheckUserNameOccupiedResult
	30,  // 278: infoserver.UserServerService.CheckPhoneRegister:output_type -> infoserver.CheckPhoneRegisterResult
	32,  // 279: infoserver.UserServerService.DeleteUserInfoById:output_type -> infoserver.DelAccountResult
	34,  // 280: infoserver.UserServerService.UpdateBotInfo:output_type -> infoserver.BotUpdateInfoResult
	151, // 281: infoserver.UserServerService.UpdateBotPic:output_type -> infoserver.UpdateBotPicResult
	140, // 282: infoserver.UserServerService.checkUserAccessHashValid:output_type -> infoserver.checkUserAccessHashValidResult
	36,  // 283: infoserver.UserServerService.ContactsDelContact:output_type -> infoserver.DelContactResult
	41,  // 284: infoserver.UserServerService.ContactsDelContactsArr:output_type -> infoserver.DelContactArrResult
	40,  // 285: infoserver.UserServerService.CmdResetUserContacts:output_type -> infoserver.CmdResetUserContactsResult
	44,  // 286: infoserver.UserServerService.ContactsGetContacts:output_type -> infoserver.ContatsGetContactsResult
	49,  // 287: infoserver.UserServerService.ImportContacts:output_type -> infoserver.ContactsImportPhoneContactsResult
	149, // 288: infoserver.UserServerService.GetContactsStatus:output_type -> infoserver.GetContactsStatusResult
	160, // 289: infoserver.UserServerService.CheckSelfIsContact:output_type -> infoserver.CheckSelfIsContactResult
	52,  // 290: infoserver.UserServerService.DialogUserRelation:output_type -> infoserver.AddRelationIdInfoResult
	53,  // 291: infoserver.UserServerService.DelDialogUserRelation:output_type -> infoserver.DelRelationIdInfoResult
	55,  // 292: infoserver.UserServerService.BlockedUser:output_type -> infoserver.BlockeduserResult
	55,  // 293: infoserver.UserServerService.ContactUnBlockedUser:output_type -> infoserver.BlockeduserResult
	59,  // 294: infoserver.UserServerService.ContactsGetBlocked:output_type -> infoserver.ContactsGetBlockedResult
	136, // 295: infoserver.UserServerService.CheckUserIsBlocked:output_type -> infoserver.CheckUserIsBlockedResult
	62,  // 296: infoserver.UserServerService.StoreSystemWhiteUser:output_type -> infoserver.StoreSysWhiteUserResult
	64,  // 297: infoserver.UserServerService.UpdateSystemWhiteUserLevel:output_type -> infoserver.UpdateSystemWhiteUserLevelResult
	66,  // 298: infoserver.UserServerService.GetSysWhiteUser:output_type -> infoserver.GetSysWhiteUserResult
	68,  // 299: infoserver.UserServerService.GetSysWhiteUserArr:output_type -> infoserver.GetSysWhiteUserArrResult
	70,  // 300: infoserver.UserServerService.DelSysWhiteUser:output_type -> infoserver.DelSysWhiteUserResult
	71,  // 301: infoserver.UserServerService.GetAllUserDc:output_type -> infoserver.UserDc
	74,  // 302: infoserver.UserServerService.SetUserPrivacy:output_type -> infoserver.SetPrivacyResult
	78,  // 303: infoserver.UserServerService.GetUserPrivacy:output_type -> infoserver.GetPrivacyResult
	77,  // 304: infoserver.UserServerService.CheckUserPrivacy:output_type -> infoserver.CheckPrivacyResult
	80,  // 305: infoserver.UserServerService.StoreStickerSet:output_type -> infoserver.StoreShopStickerSetResult
	82,  // 306: infoserver.UserServerService.StoreStickerSetDocument:output_type -> infoserver.StoreShopStickerSetDocumentsResult
	84,  // 307: infoserver.UserServerService.DeleteShopStickerSet:output_type -> infoserver.DeleteStickerSetResult
	85,  // 308: infoserver.UserServerService.GetStickerSetInfo:output_type -> infoserver.StickerSetInfo
	91,  // 309: infoserver.UserServerService.StoreStickerPackDc:output_type -> infoserver.StoreStickerPackDcResult
	93,  // 310: infoserver.UserServerService.StoreStickerPackDcArr:output_type -> infoserver.StoreStickerPackDcArrResult
	95,  // 311: infoserver.UserServerService.GetStickerSetPackDcInfos:output_type -> infoserver.GetStickerSetPackDcInfosResult
	97,  // 312: infoserver.UserServerService.AddOrDeleteFaveSticer:output_type -> infoserver.AddOrDeleteFaveSticerResult
	99,  // 313: infoserver.UserServerService.GetFavedStickers:output_type -> infoserver.GetFavedStickersResult
	102, // 314: infoserver.UserServerService.StoreUserStickerSet:output_type -> infoserver.StoreUserStickerSetResult
	104, // 315: infoserver.UserServerService.UpdateUserStickerDisable:output_type -> infoserver.UpdateUserStickerSetDisabledResult
	106, // 316: infoserver.UserServerService.UpdateUserStickerOrder:output_type -> infoserver.UpdateUserStickerSetOrderResult
	108, // 317: infoserver.UserServerService.UpdateUserStickerInstallArchived:output_type -> infoserver.UpdateUserStickerSetInstallArResult
	110, // 318: infoserver.UserServerService.DeleteUserSticker:output_type -> infoserver.DeleteuserStickerResult
	115, // 319: infoserver.UserServerService.GetuserAllStickers:output_type -> infoserver.GetuserAllStickersResult
	117, // 320: infoserver.UserServerService.GetAllStickerSets:output_type -> infoserver.GetAllStickerSetsResult
	119, // 321: infoserver.UserServerService.DeleteStickerPackDocument:output_type -> infoserver.DeleteStickerPackDocumentResult
	121, // 322: infoserver.UserServerService.GetAuthorStickerSet:output_type -> infoserver.GetAuthorStickerSetResult
	123, // 323: infoserver.UserServerService.GetAuthorAllStickerSet:output_type -> infoserver.GetAuthorAllStickerSetResult
	126, // 324: infoserver.UserServerService.CountAuthorAllStickerSet:output_type -> infoserver.CountAuthorAllStickerSetResult
	130, // 325: infoserver.UserServerService.SaveUserGif:output_type -> infoserver.SaveUserGifResult
	132, // 326: infoserver.UserServerService.DelUserGif:output_type -> infoserver.DelUserGifResult
	134, // 327: infoserver.UserServerService.GetUserGifs:output_type -> infoserver.GetUserGifsResult
	144, // 328: infoserver.UserServerService.GetNotifySettings:output_type -> infoserver.GetNotifySettingsResult
	146, // 329: infoserver.UserServerService.UpdateNotifySettings:output_type -> infoserver.UpdateNotifySettingsResult
	154, // 330: infoserver.UserServerService.GetAllProxyConfig:output_type -> infoserver.GetAllProxyConfigResult
	158, // 331: infoserver.UserServerService.GetUserGps:output_type -> infoserver.GetUserGpsResult
	162, // 332: infoserver.UserServerService.UpdateSwitch:output_type -> infoserver.UpdateSwitchResult
	164, // 333: infoserver.UserServerService.GetSwitchStatus:output_type -> infoserver.GetSwitchStatusResult
	174, // 334: infoserver.UserServerService.UpdateUserGrender:output_type -> infoserver.UpdateUserGrenderResult
	176, // 335: infoserver.UserServerService.UpdateUserEmail:output_type -> infoserver.UpdateUserEmailResult
	172, // 336: infoserver.UserServerService.UpdateUserLocation:output_type -> infoserver.UpdateUserLocationResult
	178, // 337: infoserver.UserServerService.UploadContacts:output_type -> infoserver.UploadContactsResult
	180, // 338: infoserver.UserServerService.ApplyContact:output_type -> infoserver.ApplyContactResult
	185, // 339: infoserver.UserServerService.VerifyContact:output_type -> infoserver.VerifyContactResult
	182, // 340: infoserver.UserServerService.GetAppliedContacts:output_type -> infoserver.GetAppliedContactsResult
	187, // 341: infoserver.UserServerService.DeleteAppliedContact:output_type -> infoserver.DeleteAppliedContactResult
	189, // 342: infoserver.UserServerService.SearchUserByPhone:output_type -> infoserver.SearchUserByPhoneResult
	170, // 343: infoserver.UserServerService.DeleteUserUsername:output_type -> infoserver.DeleteUserUsernameResult
	168, // 344: infoserver.UserServerService.UpdateBotInfoSupp:output_type -> infoserver.UpdateBotInfoSuppResult
	166, // 345: infoserver.UserServerService.UGetUsersChats:output_type -> infoserver.UGetUsersChatsResult
	263, // [263:346] is the sub-list for method output_type
	180, // [180:263] is the sub-list for method input_type
	180, // [180:180] is the sub-list for extension type_name
	180, // [180:180] is the sub-list for extension extendee
	0,   // [0:180] is the sub-list for field type_name
}

func init() { file_userserver_proto_init() }
func file_userserver_proto_init() {
	if File_userserver_proto != nil {
		return
	}
	file_iminterfaceprotobufs_infoserver_chatcommon_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_userserver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInfoByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInfoByIdArrReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserExpireByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserExpireByIdResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserByphone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInfoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInfoByIdArrResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserByUsername); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePhotoInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPhotoInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserPhotoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserPhotoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserProfileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserProfileResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateExpireReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateExpireResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserClusterChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserClusterChangeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateuserNameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateuserNameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckPhoneRegisterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckPhoneRegisterResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAccountByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelAccountResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BotUpdateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BotUpdateInfoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelContactReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelContactResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactIdHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelContactArrReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdResetUserContactsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdResetUserContactsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelContactArrResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContatsGetContactsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContatsGetContactsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhoneBookContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactsImportPhoneContactsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PopularContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactsImportPhoneContactsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRelationIdInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelRelationIdInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRelationIdInfoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelRelationIdInfoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockeduserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockeduserResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactUnblockedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactsGetBlockedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Blockeduser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactsGetBlockedResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemWhiteUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreSysWhiteUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreSysWhiteUserResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSystemWhiteUserLevelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSystemWhiteUserLevelResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSysWhiteUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSysWhiteUserResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSysWhiteUserArrReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSysWhiteUserArrResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelSysWhiteUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelSysWhiteUserResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllDcReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPrivacyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPrivacyResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPrivacyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckPrivacyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckPrivacyResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPrivacyResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreShopStickerSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreShopStickerSetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreShopStickerSetDocumentsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreShopStickerSetDocumentsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStickerSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStickerSetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StickerSetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStickerSetInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStickerSetInfoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StickerPackDocumentBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StickerPackDocumentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreStickerPackDcReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreStickerPackDcResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreStickerPackDcArrReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreStickerPackDcArrResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStickerSetPackDcInfosReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStickerSetPackDcInfosResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOrDeleteFaveSticerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOrDeleteFaveSticerResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFavedStickersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFavedStickersResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StickerPack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreUserStickerSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreUserStickerSetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserStickerSetDisabledReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserStickerSetDisabledResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserStickerSetOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserStickerSetOrderResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserStickerSetInstallArReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserStickerSetInstallArResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteuserStickerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteuserStickerResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStickerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStickerInfoArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StickerSetInfoArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetuserAllStickersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetuserAllStickersResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllStickerSetsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllStickerSetsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStickerPackDocumentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStickerPackDocumentResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuthorStickerSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuthorStickerSetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuthorAllStickerSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuthorAllStickerSetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorStickerSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAuthorAllStickerSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAuthorAllStickerSetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGifInfoArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSaveGifInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveUserGifReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveUserGifResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelUserGifReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelUserGifResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserGifsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserGifsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserIsBlockedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserIsBlockedResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserInfoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserAccessHashValidReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserAccessHashValidResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterUserInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterUserInfoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNotifySettingsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNotifySettingsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNotifySettingsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNotifySettingsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContactsStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStaus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContactsStatusResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBotPicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBotPicResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllProxyConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyAddr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllProxyConfigResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserNameOccupiedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserNameOccupiedResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserGpsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserGpsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSelfIsContactReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSelfIsContactResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSwitchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSwitchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSwitchStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSwitchStatusResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UGetUsersChatsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UGetUsersChatsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBotInfoSuppReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBotInfoSuppResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserUsernameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserUsernameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserLocationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserLocationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserGrenderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserGrenderResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserEmailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserEmailResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadContactsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadContactsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyContactReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyContactResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppliedContactsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppliedContactsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Applied); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyContactReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyContactResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAppliedContactReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAppliedContactResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchUserByPhoneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userserver_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchUserByPhoneResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_userserver_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   185,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_userserver_proto_goTypes,
		DependencyIndexes: file_userserver_proto_depIdxs,
		EnumInfos:         file_userserver_proto_enumTypes,
		MessageInfos:      file_userserver_proto_msgTypes,
	}.Build()
	File_userserver_proto = out.File
	file_userserver_proto_rawDesc = nil
	file_userserver_proto_goTypes = nil
	file_userserver_proto_depIdxs = nil
}
