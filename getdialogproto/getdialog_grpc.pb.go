// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: getdialog.proto

package getdialogproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GetDialogServiceClient is the client API for GetDialogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetDialogServiceClient interface {
	// GetDialogs 分片获取用户对话框
	GetDialogs(ctx context.Context, in *GetDialogsReq, opts ...grpc.CallOption) (*GetDialogsResp, error)
	// GetPeerDialogs 获取用户指定对话框
	GetPeerDialogs(ctx context.Context, in *GetPeerDialogsReq, opts ...grpc.CallOption) (*GetPeerDialogsResp, error)
	// 获取用户路由表，返回用户对应的机器im、hostname etc
	GetRouterMessage(ctx context.Context, in *GetRouterMessageReq, opts ...grpc.CallOption) (*GetRouterMessageResp, error)
	// GetPinnedDialogs 获取置顶对话框
	GetPinnedDialogs(ctx context.Context, in *GetPinnedDialogsReq, opts ...grpc.CallOption) (*GetPinnedDialogsResp, error)
}

type getDialogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGetDialogServiceClient(cc grpc.ClientConnInterface) GetDialogServiceClient {
	return &getDialogServiceClient{cc}
}

func (c *getDialogServiceClient) GetDialogs(ctx context.Context, in *GetDialogsReq, opts ...grpc.CallOption) (*GetDialogsResp, error) {
	out := new(GetDialogsResp)
	err := c.cc.Invoke(ctx, "/getdialogproto.GetDialogService/GetDialogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getDialogServiceClient) GetPeerDialogs(ctx context.Context, in *GetPeerDialogsReq, opts ...grpc.CallOption) (*GetPeerDialogsResp, error) {
	out := new(GetPeerDialogsResp)
	err := c.cc.Invoke(ctx, "/getdialogproto.GetDialogService/GetPeerDialogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getDialogServiceClient) GetRouterMessage(ctx context.Context, in *GetRouterMessageReq, opts ...grpc.CallOption) (*GetRouterMessageResp, error) {
	out := new(GetRouterMessageResp)
	err := c.cc.Invoke(ctx, "/getdialogproto.GetDialogService/GetRouterMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getDialogServiceClient) GetPinnedDialogs(ctx context.Context, in *GetPinnedDialogsReq, opts ...grpc.CallOption) (*GetPinnedDialogsResp, error) {
	out := new(GetPinnedDialogsResp)
	err := c.cc.Invoke(ctx, "/getdialogproto.GetDialogService/GetPinnedDialogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetDialogServiceServer is the server API for GetDialogService service.
// All implementations must embed UnimplementedGetDialogServiceServer
// for forward compatibility
type GetDialogServiceServer interface {
	// GetDialogs 分片获取用户对话框
	GetDialogs(context.Context, *GetDialogsReq) (*GetDialogsResp, error)
	// GetPeerDialogs 获取用户指定对话框
	GetPeerDialogs(context.Context, *GetPeerDialogsReq) (*GetPeerDialogsResp, error)
	// 获取用户路由表，返回用户对应的机器im、hostname etc
	GetRouterMessage(context.Context, *GetRouterMessageReq) (*GetRouterMessageResp, error)
	// GetPinnedDialogs 获取置顶对话框
	GetPinnedDialogs(context.Context, *GetPinnedDialogsReq) (*GetPinnedDialogsResp, error)
	mustEmbedUnimplementedGetDialogServiceServer()
}

// UnimplementedGetDialogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGetDialogServiceServer struct {
}

func (UnimplementedGetDialogServiceServer) GetDialogs(context.Context, *GetDialogsReq) (*GetDialogsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDialogs not implemented")
}
func (UnimplementedGetDialogServiceServer) GetPeerDialogs(context.Context, *GetPeerDialogsReq) (*GetPeerDialogsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeerDialogs not implemented")
}
func (UnimplementedGetDialogServiceServer) GetRouterMessage(context.Context, *GetRouterMessageReq) (*GetRouterMessageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouterMessage not implemented")
}
func (UnimplementedGetDialogServiceServer) GetPinnedDialogs(context.Context, *GetPinnedDialogsReq) (*GetPinnedDialogsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPinnedDialogs not implemented")
}
func (UnimplementedGetDialogServiceServer) mustEmbedUnimplementedGetDialogServiceServer() {}

// UnsafeGetDialogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetDialogServiceServer will
// result in compilation errors.
type UnsafeGetDialogServiceServer interface {
	mustEmbedUnimplementedGetDialogServiceServer()
}

func RegisterGetDialogServiceServer(s grpc.ServiceRegistrar, srv GetDialogServiceServer) {
	s.RegisterService(&GetDialogService_ServiceDesc, srv)
}

func _GetDialogService_GetDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDialogsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetDialogServiceServer).GetDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/getdialogproto.GetDialogService/GetDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetDialogServiceServer).GetDialogs(ctx, req.(*GetDialogsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetDialogService_GetPeerDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPeerDialogsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetDialogServiceServer).GetPeerDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/getdialogproto.GetDialogService/GetPeerDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetDialogServiceServer).GetPeerDialogs(ctx, req.(*GetPeerDialogsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetDialogService_GetRouterMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouterMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetDialogServiceServer).GetRouterMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/getdialogproto.GetDialogService/GetRouterMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetDialogServiceServer).GetRouterMessage(ctx, req.(*GetRouterMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetDialogService_GetPinnedDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPinnedDialogsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetDialogServiceServer).GetPinnedDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/getdialogproto.GetDialogService/GetPinnedDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetDialogServiceServer).GetPinnedDialogs(ctx, req.(*GetPinnedDialogsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GetDialogService_ServiceDesc is the grpc.ServiceDesc for GetDialogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetDialogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "getdialogproto.GetDialogService",
	HandlerType: (*GetDialogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDialogs",
			Handler:    _GetDialogService_GetDialogs_Handler,
		},
		{
			MethodName: "GetPeerDialogs",
			Handler:    _GetDialogService_GetPeerDialogs_Handler,
		},
		{
			MethodName: "GetRouterMessage",
			Handler:    _GetDialogService_GetRouterMessage_Handler,
		},
		{
			MethodName: "GetPinnedDialogs",
			Handler:    _GetDialogService_GetPinnedDialogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "getdialog.proto",
}
