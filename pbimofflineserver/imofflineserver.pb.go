// Code generated by protoc-gen-gogo.
// source: gitlab.chatserver.im/interfaceprobuf/pbimofflineserver/imofflineserver.proto
// DO NOT EDIT!

/*
Package pbimofflineserver is a generated protocol buffer package.

It is generated from these files:

	gitlab.chatserver.im/interfaceprobuf/pbimofflineserver/imofflineserver.proto

It has these top-level messages:

	GetStateBinReq
	GetStateBinResp
	GetStateResp
	GetStateReq
	GetDifferenceReq
	GetDifferenceResp
*/
package pbimofflineserver

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import pbcomm "gitlab.chatserver.im/interfaceprobuf/pbcomm"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GetStateBinReq struct {
	UserID   int32  `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	KeyID    uint64 `protobuf:"varint,2,opt,name=KeyID,proto3" json:"KeyID,omitempty"`
	ReqMsgID int64  `protobuf:"varint,3,opt,name=ReqMsgID,proto3" json:"ReqMsgID,omitempty"`
}

func (m *GetStateBinReq) Reset()                    { *m = GetStateBinReq{} }
func (m *GetStateBinReq) String() string            { return proto.CompactTextString(m) }
func (*GetStateBinReq) ProtoMessage()               {}
func (*GetStateBinReq) Descriptor() ([]byte, []int) { return fileDescriptorImofflineserver, []int{0} }

func (m *GetStateBinReq) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *GetStateBinReq) GetKeyID() uint64 {
	if m != nil {
		return m.KeyID
	}
	return 0
}

func (m *GetStateBinReq) GetReqMsgID() int64 {
	if m != nil {
		return m.ReqMsgID
	}
	return 0
}

type GetStateBinResp struct {
	UpdatesStateBin []byte `protobuf:"bytes,1,opt,name=UpdatesStateBin,proto3" json:"UpdatesStateBin,omitempty"`
}

func (m *GetStateBinResp) Reset()                    { *m = GetStateBinResp{} }
func (m *GetStateBinResp) String() string            { return proto.CompactTextString(m) }
func (*GetStateBinResp) ProtoMessage()               {}
func (*GetStateBinResp) Descriptor() ([]byte, []int) { return fileDescriptorImofflineserver, []int{1} }

func (m *GetStateBinResp) GetUpdatesStateBin() []byte {
	if m != nil {
		return m.UpdatesStateBin
	}
	return nil
}

type GetStateResp struct {
	Pts         int32 `protobuf:"varint,1,opt,name=Pts,proto3" json:"Pts,omitempty"`
	Qts         int32 `protobuf:"varint,2,opt,name=Qts,proto3" json:"Qts,omitempty"`
	Date        int32 `protobuf:"varint,3,opt,name=Date,proto3" json:"Date,omitempty"`
	Seq         int32 `protobuf:"varint,4,opt,name=Seq,proto3" json:"Seq,omitempty"`
	UnreadCount int32 `protobuf:"varint,5,opt,name=UnreadCount,proto3" json:"UnreadCount,omitempty"`
}

func (m *GetStateResp) Reset()                    { *m = GetStateResp{} }
func (m *GetStateResp) String() string            { return proto.CompactTextString(m) }
func (*GetStateResp) ProtoMessage()               {}
func (*GetStateResp) Descriptor() ([]byte, []int) { return fileDescriptorImofflineserver, []int{2} }

func (m *GetStateResp) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *GetStateResp) GetQts() int32 {
	if m != nil {
		return m.Qts
	}
	return 0
}

func (m *GetStateResp) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *GetStateResp) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *GetStateResp) GetUnreadCount() int32 {
	if m != nil {
		return m.UnreadCount
	}
	return 0
}

type GetStateReq struct {
	UserID int32  `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	KeyID  uint64 `protobuf:"varint,2,opt,name=KeyID,proto3" json:"KeyID,omitempty"`
}

func (m *GetStateReq) Reset()                    { *m = GetStateReq{} }
func (m *GetStateReq) String() string            { return proto.CompactTextString(m) }
func (*GetStateReq) ProtoMessage()               {}
func (*GetStateReq) Descriptor() ([]byte, []int) { return fileDescriptorImofflineserver, []int{3} }

func (m *GetStateReq) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *GetStateReq) GetKeyID() uint64 {
	if m != nil {
		return m.KeyID
	}
	return 0
}

type GetDifferenceReq struct {
	Debug         *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug" json:"debug,omitempty"`
	ReqMsgID      int64         `protobuf:"varint,2,opt,name=ReqMsgID,proto3" json:"ReqMsgID,omitempty"`
	UserID        int32         `protobuf:"varint,4,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Flags         int32         `protobuf:"varint,5,opt,name=Flags,proto3" json:"Flags,omitempty"`
	Pts           int32         `protobuf:"varint,6,opt,name=Pts,proto3" json:"Pts,omitempty"`
	PtsTotalLimit int32         `protobuf:"varint,7,opt,name=PtsTotalLimit,proto3" json:"PtsTotalLimit,omitempty"`
	Date          int32         `protobuf:"varint,8,opt,name=Date,proto3" json:"Date,omitempty"`
	Qts           int32         `protobuf:"varint,9,opt,name=Qts,proto3" json:"Qts,omitempty"`
}

func (m *GetDifferenceReq) Reset()                    { *m = GetDifferenceReq{} }
func (m *GetDifferenceReq) String() string            { return proto.CompactTextString(m) }
func (*GetDifferenceReq) ProtoMessage()               {}
func (*GetDifferenceReq) Descriptor() ([]byte, []int) { return fileDescriptorImofflineserver, []int{4} }

func (m *GetDifferenceReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *GetDifferenceReq) GetReqMsgID() int64 {
	if m != nil {
		return m.ReqMsgID
	}
	return 0
}

func (m *GetDifferenceReq) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *GetDifferenceReq) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *GetDifferenceReq) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *GetDifferenceReq) GetPtsTotalLimit() int32 {
	if m != nil {
		return m.PtsTotalLimit
	}
	return 0
}

func (m *GetDifferenceReq) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *GetDifferenceReq) GetQts() int32 {
	if m != nil {
		return m.Qts
	}
	return 0
}

type GetDifferenceResp struct {
	UpdatesDifferenceBin []byte `protobuf:"bytes,1,opt,name=UpdatesDifferenceBin,proto3" json:"UpdatesDifferenceBin,omitempty"`
}

func (m *GetDifferenceResp) Reset()         { *m = GetDifferenceResp{} }
func (m *GetDifferenceResp) String() string { return proto.CompactTextString(m) }
func (*GetDifferenceResp) ProtoMessage()    {}
func (*GetDifferenceResp) Descriptor() ([]byte, []int) {
	return fileDescriptorImofflineserver, []int{5}
}

func (m *GetDifferenceResp) GetUpdatesDifferenceBin() []byte {
	if m != nil {
		return m.UpdatesDifferenceBin
	}
	return nil
}

func init() {
	proto.RegisterType((*GetStateBinReq)(nil), "pbimofflineserver.GetStateBinReq")
	proto.RegisterType((*GetStateBinResp)(nil), "pbimofflineserver.GetStateBinResp")
	proto.RegisterType((*GetStateResp)(nil), "pbimofflineserver.GetStateResp")
	proto.RegisterType((*GetStateReq)(nil), "pbimofflineserver.GetStateReq")
	proto.RegisterType((*GetDifferenceReq)(nil), "pbimofflineserver.GetDifferenceReq")
	proto.RegisterType((*GetDifferenceResp)(nil), "pbimofflineserver.GetDifferenceResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for OfflineServer service

type OfflineServerClient interface {
	// GetDifference 拉取离线数据
	GetDifference(ctx context.Context, in *GetDifferenceReq, opts ...grpc.CallOption) (*GetDifferenceResp, error)
	// GetStateBin 获取当前状态,直接返回客户端
	GetStateBin(ctx context.Context, in *GetStateBinReq, opts ...grpc.CallOption) (*GetStateBinResp, error)
	// GetState 获取当前状态， 具体内容
	GetState(ctx context.Context, in *GetStateReq, opts ...grpc.CallOption) (*GetStateResp, error)
}

type offlineServerClient struct {
	cc *grpc.ClientConn
}

func NewOfflineServerClient(cc *grpc.ClientConn) OfflineServerClient {
	return &offlineServerClient{cc}
}

func (c *offlineServerClient) GetDifference(ctx context.Context, in *GetDifferenceReq, opts ...grpc.CallOption) (*GetDifferenceResp, error) {
	out := new(GetDifferenceResp)
	err := grpc.Invoke(ctx, "/pbimofflineserver.OfflineServer/GetDifference", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offlineServerClient) GetStateBin(ctx context.Context, in *GetStateBinReq, opts ...grpc.CallOption) (*GetStateBinResp, error) {
	out := new(GetStateBinResp)
	err := grpc.Invoke(ctx, "/pbimofflineserver.OfflineServer/GetStateBin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offlineServerClient) GetState(ctx context.Context, in *GetStateReq, opts ...grpc.CallOption) (*GetStateResp, error) {
	out := new(GetStateResp)
	err := grpc.Invoke(ctx, "/pbimofflineserver.OfflineServer/GetState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OfflineServer service

type OfflineServerServer interface {
	// GetDifference 拉取离线数据
	GetDifference(context.Context, *GetDifferenceReq) (*GetDifferenceResp, error)
	// GetStateBin 获取当前状态,直接返回客户端
	GetStateBin(context.Context, *GetStateBinReq) (*GetStateBinResp, error)
	// GetState 获取当前状态， 具体内容
	GetState(context.Context, *GetStateReq) (*GetStateResp, error)
}

func RegisterOfflineServerServer(s *grpc.Server, srv OfflineServerServer) {
	s.RegisterService(&_OfflineServer_serviceDesc, srv)
}

func _OfflineServer_GetDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDifferenceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfflineServerServer).GetDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimofflineserver.OfflineServer/GetDifference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfflineServerServer).GetDifference(ctx, req.(*GetDifferenceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfflineServer_GetStateBin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateBinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfflineServerServer).GetStateBin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimofflineserver.OfflineServer/GetStateBin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfflineServerServer).GetStateBin(ctx, req.(*GetStateBinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfflineServer_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfflineServerServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimofflineserver.OfflineServer/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfflineServerServer).GetState(ctx, req.(*GetStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _OfflineServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pbimofflineserver.OfflineServer",
	HandlerType: (*OfflineServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDifference",
			Handler:    _OfflineServer_GetDifference_Handler,
		},
		{
			MethodName: "GetStateBin",
			Handler:    _OfflineServer_GetStateBin_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _OfflineServer_GetState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/pbimofflineserver/imofflineserver.proto",
}

func (m *GetStateBinReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStateBinReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImofflineserver(dAtA, i, uint64(m.UserID))
	}
	if m.KeyID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImofflineserver(dAtA, i, uint64(m.KeyID))
	}
	if m.ReqMsgID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImofflineserver(dAtA, i, uint64(m.ReqMsgID))
	}
	return i, nil
}

func (m *GetStateBinResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStateBinResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UpdatesStateBin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImofflineserver(dAtA, i, uint64(len(m.UpdatesStateBin)))
		i += copy(dAtA[i:], m.UpdatesStateBin)
	}
	return i, nil
}

func (m *GetStateResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStateResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pts != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImofflineserver(dAtA, i, uint64(m.Pts))
	}
	if m.Qts != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImofflineserver(dAtA, i, uint64(m.Qts))
	}
	if m.Date != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImofflineserver(dAtA, i, uint64(m.Date))
	}
	if m.Seq != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImofflineserver(dAtA, i, uint64(m.Seq))
	}
	if m.UnreadCount != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImofflineserver(dAtA, i, uint64(m.UnreadCount))
	}
	return i, nil
}

func (m *GetStateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStateReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImofflineserver(dAtA, i, uint64(m.UserID))
	}
	if m.KeyID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImofflineserver(dAtA, i, uint64(m.KeyID))
	}
	return i, nil
}

func (m *GetDifferenceReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDifferenceReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImofflineserver(dAtA, i, uint64(m.Debug.Size()))
		n1, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.ReqMsgID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImofflineserver(dAtA, i, uint64(m.ReqMsgID))
	}
	if m.UserID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImofflineserver(dAtA, i, uint64(m.UserID))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImofflineserver(dAtA, i, uint64(m.Flags))
	}
	if m.Pts != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintImofflineserver(dAtA, i, uint64(m.Pts))
	}
	if m.PtsTotalLimit != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintImofflineserver(dAtA, i, uint64(m.PtsTotalLimit))
	}
	if m.Date != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintImofflineserver(dAtA, i, uint64(m.Date))
	}
	if m.Qts != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintImofflineserver(dAtA, i, uint64(m.Qts))
	}
	return i, nil
}

func (m *GetDifferenceResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDifferenceResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UpdatesDifferenceBin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImofflineserver(dAtA, i, uint64(len(m.UpdatesDifferenceBin)))
		i += copy(dAtA[i:], m.UpdatesDifferenceBin)
	}
	return i, nil
}

func encodeFixed64Imofflineserver(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Imofflineserver(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintImofflineserver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetStateBinReq) Size() (n int) {
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovImofflineserver(uint64(m.UserID))
	}
	if m.KeyID != 0 {
		n += 1 + sovImofflineserver(uint64(m.KeyID))
	}
	if m.ReqMsgID != 0 {
		n += 1 + sovImofflineserver(uint64(m.ReqMsgID))
	}
	return n
}

func (m *GetStateBinResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.UpdatesStateBin)
	if l > 0 {
		n += 1 + l + sovImofflineserver(uint64(l))
	}
	return n
}

func (m *GetStateResp) Size() (n int) {
	var l int
	_ = l
	if m.Pts != 0 {
		n += 1 + sovImofflineserver(uint64(m.Pts))
	}
	if m.Qts != 0 {
		n += 1 + sovImofflineserver(uint64(m.Qts))
	}
	if m.Date != 0 {
		n += 1 + sovImofflineserver(uint64(m.Date))
	}
	if m.Seq != 0 {
		n += 1 + sovImofflineserver(uint64(m.Seq))
	}
	if m.UnreadCount != 0 {
		n += 1 + sovImofflineserver(uint64(m.UnreadCount))
	}
	return n
}

func (m *GetStateReq) Size() (n int) {
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovImofflineserver(uint64(m.UserID))
	}
	if m.KeyID != 0 {
		n += 1 + sovImofflineserver(uint64(m.KeyID))
	}
	return n
}

func (m *GetDifferenceReq) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImofflineserver(uint64(l))
	}
	if m.ReqMsgID != 0 {
		n += 1 + sovImofflineserver(uint64(m.ReqMsgID))
	}
	if m.UserID != 0 {
		n += 1 + sovImofflineserver(uint64(m.UserID))
	}
	if m.Flags != 0 {
		n += 1 + sovImofflineserver(uint64(m.Flags))
	}
	if m.Pts != 0 {
		n += 1 + sovImofflineserver(uint64(m.Pts))
	}
	if m.PtsTotalLimit != 0 {
		n += 1 + sovImofflineserver(uint64(m.PtsTotalLimit))
	}
	if m.Date != 0 {
		n += 1 + sovImofflineserver(uint64(m.Date))
	}
	if m.Qts != 0 {
		n += 1 + sovImofflineserver(uint64(m.Qts))
	}
	return n
}

func (m *GetDifferenceResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.UpdatesDifferenceBin)
	if l > 0 {
		n += 1 + l + sovImofflineserver(uint64(l))
	}
	return n
}

func sovImofflineserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozImofflineserver(x uint64) (n int) {
	return sovImofflineserver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetStateBinReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImofflineserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStateBinReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStateBinReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImofflineserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyID", wireType)
			}
			m.KeyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImofflineserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqMsgID", wireType)
			}
			m.ReqMsgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImofflineserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqMsgID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImofflineserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImofflineserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStateBinResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImofflineserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStateBinResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStateBinResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatesStateBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImofflineserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImofflineserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatesStateBin = append(m.UpdatesStateBin[:0], dAtA[iNdEx:postIndex]...)
			if m.UpdatesStateBin == nil {
				m.UpdatesStateBin = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImofflineserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImofflineserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStateResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImofflineserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStateResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStateResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImofflineserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qts", wireType)
			}
			m.Qts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImofflineserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImofflineserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImofflineserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadCount", wireType)
			}
			m.UnreadCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImofflineserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImofflineserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImofflineserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImofflineserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImofflineserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyID", wireType)
			}
			m.KeyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImofflineserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImofflineserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImofflineserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDifferenceReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImofflineserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDifferenceReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDifferenceReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImofflineserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImofflineserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqMsgID", wireType)
			}
			m.ReqMsgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImofflineserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqMsgID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImofflineserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImofflineserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImofflineserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PtsTotalLimit", wireType)
			}
			m.PtsTotalLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImofflineserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PtsTotalLimit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImofflineserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qts", wireType)
			}
			m.Qts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImofflineserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImofflineserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImofflineserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDifferenceResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImofflineserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDifferenceResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDifferenceResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatesDifferenceBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImofflineserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImofflineserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatesDifferenceBin = append(m.UpdatesDifferenceBin[:0], dAtA[iNdEx:postIndex]...)
			if m.UpdatesDifferenceBin == nil {
				m.UpdatesDifferenceBin = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImofflineserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImofflineserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipImofflineserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowImofflineserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImofflineserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImofflineserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthImofflineserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowImofflineserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipImofflineserver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthImofflineserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowImofflineserver   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/pbimofflineserver/imofflineserver.proto", fileDescriptorImofflineserver)
}

var fileDescriptorImofflineserver = []byte{
	// 482 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x4f, 0x8f, 0xd2, 0x40,
	0x14, 0xb7, 0x40, 0x11, 0x1f, 0xe0, 0xee, 0x4e, 0x36, 0xa6, 0xe1, 0x80, 0xd8, 0xdd, 0x03, 0xa7,
	0x92, 0xe0, 0xc5, 0x64, 0x6f, 0xd8, 0x48, 0x88, 0xbb, 0x71, 0x1d, 0xc4, 0x83, 0xf1, 0x32, 0x85,
	0x57, 0x9c, 0x84, 0xfe, 0xa1, 0x33, 0x98, 0xe8, 0xe7, 0xf0, 0x43, 0x79, 0xf4, 0x1b, 0x68, 0xf8,
	0x24, 0x66, 0xa6, 0x85, 0xd2, 0xee, 0x66, 0xd1, 0x53, 0xe7, 0xfd, 0xde, 0xef, 0xfd, 0xe6, 0xf5,
	0xf7, 0xde, 0xc0, 0xf5, 0x92, 0xcb, 0x15, 0xf3, 0x9c, 0xf9, 0x17, 0x26, 0x05, 0x26, 0x5f, 0x31,
	0x71, 0x78, 0x30, 0xe0, 0xa1, 0xc4, 0xc4, 0x67, 0x73, 0x8c, 0x93, 0xc8, 0xdb, 0xf8, 0x83, 0xd8,
	0xe3, 0x41, 0xe4, 0xfb, 0x2b, 0x1e, 0x62, 0x4a, 0x1a, 0x94, 0x62, 0x27, 0x4e, 0x22, 0x19, 0x91,
	0xb3, 0x3b, 0xc4, 0xce, 0xab, 0x7f, 0xbc, 0x60, 0x1e, 0x05, 0x41, 0xf6, 0x49, 0xc5, 0xec, 0x4f,
	0xf0, 0x74, 0x8c, 0x72, 0x2a, 0x99, 0xc4, 0x11, 0x0f, 0x29, 0xae, 0xc9, 0x33, 0xa8, 0xcf, 0x04,
	0x26, 0x13, 0xd7, 0x32, 0x7a, 0x46, 0xdf, 0xa4, 0x59, 0x44, 0xce, 0xc1, 0x7c, 0x8b, 0xdf, 0x26,
	0xae, 0x55, 0xe9, 0x19, 0xfd, 0x1a, 0x4d, 0x03, 0xd2, 0x81, 0x06, 0xc5, 0xf5, 0x8d, 0x58, 0x4e,
	0x5c, 0xab, 0xda, 0x33, 0xfa, 0x55, 0xba, 0x8f, 0xed, 0x2b, 0x38, 0x29, 0x68, 0x8b, 0x98, 0xf4,
	0xe1, 0x64, 0x16, 0x2f, 0x98, 0x44, 0xb1, 0x83, 0xf5, 0x2d, 0x2d, 0x5a, 0x86, 0xed, 0xef, 0xd0,
	0xda, 0x15, 0xeb, 0xca, 0x53, 0xa8, 0xde, 0x4a, 0x91, 0xf5, 0xa4, 0x8e, 0x0a, 0x79, 0x2f, 0x85,
	0x6e, 0xc7, 0xa4, 0xea, 0x48, 0x08, 0xd4, 0x5c, 0x26, 0x51, 0x37, 0x62, 0x52, 0x7d, 0x56, 0xac,
	0x29, 0xae, 0xad, 0x5a, 0xca, 0x9a, 0xe2, 0x9a, 0xf4, 0xa0, 0x39, 0x0b, 0x13, 0x64, 0x8b, 0xd7,
	0xd1, 0x26, 0x94, 0x96, 0xa9, 0x33, 0x87, 0x90, 0x7d, 0x05, 0xcd, 0xfc, 0xee, 0xff, 0x74, 0xc4,
	0xfe, 0x6d, 0xc0, 0xe9, 0x18, 0xa5, 0xcb, 0x7d, 0x1f, 0x13, 0x0c, 0xe7, 0x5a, 0xe2, 0x02, 0xcc,
	0x05, 0x7a, 0x9b, 0xa5, 0x56, 0x68, 0x0e, 0xdb, 0x4e, 0x36, 0x04, 0x57, 0x81, 0x34, 0xcd, 0x15,
	0xbc, 0xac, 0x14, 0xbd, 0x3c, 0xe8, 0xa1, 0x56, 0xee, 0xe1, 0xcd, 0x8a, 0x2d, 0x45, 0xf6, 0x1b,
	0x69, 0xb0, 0x33, 0xab, 0x9e, 0x9b, 0x75, 0x09, 0xed, 0x5b, 0x29, 0x3e, 0x44, 0x92, 0xad, 0xae,
	0x79, 0xc0, 0xa5, 0xf5, 0x58, 0xe7, 0x8a, 0xe0, 0xde, 0xc0, 0x46, 0xd1, 0x40, 0x65, 0xf3, 0x93,
	0xbd, 0xcd, 0xf6, 0x18, 0xce, 0x4a, 0x3f, 0x28, 0x62, 0x32, 0x84, 0xf3, 0x6c, 0x84, 0x79, 0x22,
	0x1f, 0xef, 0xbd, 0xb9, 0xe1, 0x8f, 0x0a, 0xb4, 0xdf, 0xa5, 0x8b, 0x3c, 0xd5, 0x5b, 0x4b, 0x3e,
	0x43, 0xbb, 0x20, 0x4d, 0x2e, 0x9c, 0x3b, 0xdb, 0xee, 0x94, 0xdd, 0xed, 0x5c, 0x1e, 0x27, 0x89,
	0xd8, 0x7e, 0x44, 0x3e, 0xe6, 0x73, 0x1d, 0xf1, 0x90, 0xbc, 0xb8, 0xbf, 0xec, 0xe0, 0x31, 0x74,
	0xec, 0x63, 0x14, 0xad, 0x7b, 0x03, 0x8d, 0x1d, 0x48, 0xba, 0x0f, 0x54, 0x28, 0xc5, 0xe7, 0x0f,
	0xe6, 0x95, 0xdc, 0xa8, 0xf5, 0x73, 0xdb, 0x35, 0x7e, 0x6d, 0xbb, 0xc6, 0x9f, 0x6d, 0xd7, 0xf0,
	0xea, 0xfa, 0xa1, 0xbe, 0xfc, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x77, 0x67, 0x37, 0x13, 0x45, 0x04,
	0x00, 0x00,
}
