// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: imofflineserver.proto

package pbimofflineserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OfflineServerClient is the client API for OfflineServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OfflineServerClient interface {
	// GetDifference 拉取离线数据
	GetDifference(ctx context.Context, in *GetDifferenceReq, opts ...grpc.CallOption) (*GetDifferenceResp, error)
	// GetStateBin 获取当前状态,直接返回客户端
	GetStateBin(ctx context.Context, in *GetStateBinReq, opts ...grpc.CallOption) (*GetStateBinResp, error)
	// GetState 获取当前状态， 具体内容
	GetState(ctx context.Context, in *GetStateReq, opts ...grpc.CallOption) (*GetStateResp, error)
}

type offlineServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOfflineServerClient(cc grpc.ClientConnInterface) OfflineServerClient {
	return &offlineServerClient{cc}
}

func (c *offlineServerClient) GetDifference(ctx context.Context, in *GetDifferenceReq, opts ...grpc.CallOption) (*GetDifferenceResp, error) {
	out := new(GetDifferenceResp)
	err := c.cc.Invoke(ctx, "/pbimofflineserver.OfflineServer/GetDifference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offlineServerClient) GetStateBin(ctx context.Context, in *GetStateBinReq, opts ...grpc.CallOption) (*GetStateBinResp, error) {
	out := new(GetStateBinResp)
	err := c.cc.Invoke(ctx, "/pbimofflineserver.OfflineServer/GetStateBin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offlineServerClient) GetState(ctx context.Context, in *GetStateReq, opts ...grpc.CallOption) (*GetStateResp, error) {
	out := new(GetStateResp)
	err := c.cc.Invoke(ctx, "/pbimofflineserver.OfflineServer/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OfflineServerServer is the server API for OfflineServer service.
// All implementations must embed UnimplementedOfflineServerServer
// for forward compatibility
type OfflineServerServer interface {
	// GetDifference 拉取离线数据
	GetDifference(context.Context, *GetDifferenceReq) (*GetDifferenceResp, error)
	// GetStateBin 获取当前状态,直接返回客户端
	GetStateBin(context.Context, *GetStateBinReq) (*GetStateBinResp, error)
	// GetState 获取当前状态， 具体内容
	GetState(context.Context, *GetStateReq) (*GetStateResp, error)
	mustEmbedUnimplementedOfflineServerServer()
}

// UnimplementedOfflineServerServer must be embedded to have forward compatible implementations.
type UnimplementedOfflineServerServer struct {
}

func (UnimplementedOfflineServerServer) GetDifference(context.Context, *GetDifferenceReq) (*GetDifferenceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDifference not implemented")
}
func (UnimplementedOfflineServerServer) GetStateBin(context.Context, *GetStateBinReq) (*GetStateBinResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStateBin not implemented")
}
func (UnimplementedOfflineServerServer) GetState(context.Context, *GetStateReq) (*GetStateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedOfflineServerServer) mustEmbedUnimplementedOfflineServerServer() {}

// UnsafeOfflineServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OfflineServerServer will
// result in compilation errors.
type UnsafeOfflineServerServer interface {
	mustEmbedUnimplementedOfflineServerServer()
}

func RegisterOfflineServerServer(s grpc.ServiceRegistrar, srv OfflineServerServer) {
	s.RegisterService(&OfflineServer_ServiceDesc, srv)
}

func _OfflineServer_GetDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDifferenceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfflineServerServer).GetDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimofflineserver.OfflineServer/GetDifference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfflineServerServer).GetDifference(ctx, req.(*GetDifferenceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfflineServer_GetStateBin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateBinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfflineServerServer).GetStateBin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimofflineserver.OfflineServer/GetStateBin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfflineServerServer).GetStateBin(ctx, req.(*GetStateBinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfflineServer_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfflineServerServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimofflineserver.OfflineServer/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfflineServerServer).GetState(ctx, req.(*GetStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OfflineServer_ServiceDesc is the grpc.ServiceDesc for OfflineServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OfflineServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbimofflineserver.OfflineServer",
	HandlerType: (*OfflineServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDifference",
			Handler:    _OfflineServer_GetDifference_Handler,
		},
		{
			MethodName: "GetStateBin",
			Handler:    _OfflineServer_GetStateBin_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _OfflineServer_GetState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "imofflineserver.proto",
}
