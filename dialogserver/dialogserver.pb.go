// Code generated by protoc-gen-gogo.
// source: dialogserver.proto
// DO NOT EDIT!

/*
Package dialogserver is a generated protocol buffer package.

It is generated from these files:

	dialogserver.proto

It has these top-level messages:

	PeerType
	ReorderPinnedDialogReq
	ReorderPinnedDialogReply
	RevokeUnreadReq
	RevokeUnreadReply
	ClearDraftReq
	ClearDraftReply
	GetUserDialogsReq
	GetUserDialogsReply
	GetUserDialogsV2Req
	GetUserDialogsV2Reply
	UpdateDialogPinnedReq
	UpdateDialogPinnedReply
	DeleteUserDialogReq
	DeleteUserDialogReply
	GetUserPinedDialogReq
	GetUserPinedDialogReply
	GetUserDialogReq
	GetUserDialogReply
	UpdateUserDialogReq
	UpdateUserDialogReply
	GetUserAllDialogReq
	GetUserAllDialogReply
	InsertUserDialogReq
	InsertUserDialogReply
	UserDialog
*/
package dialogserver

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PeerType struct {
	WithID   int32 `protobuf:"varint,1,opt,name=WithID,proto3" json:"WithID,omitempty"`
	WithType int32 `protobuf:"varint,2,opt,name=WithType,proto3" json:"WithType,omitempty"`
}

func (m *PeerType) Reset()                    { *m = PeerType{} }
func (m *PeerType) String() string            { return proto.CompactTextString(m) }
func (*PeerType) ProtoMessage()               {}
func (*PeerType) Descriptor() ([]byte, []int) { return fileDescriptorDialogserver, []int{0} }

func (m *PeerType) GetWithID() int32 {
	if m != nil {
		return m.WithID
	}
	return 0
}

func (m *PeerType) GetWithType() int32 {
	if m != nil {
		return m.WithType
	}
	return 0
}

type ReorderPinnedDialogReq struct {
	UserID    int32       `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	PeerTypes []*PeerType `protobuf:"bytes,2,rep,name=PeerTypes" json:"PeerTypes,omitempty"`
}

func (m *ReorderPinnedDialogReq) Reset()         { *m = ReorderPinnedDialogReq{} }
func (m *ReorderPinnedDialogReq) String() string { return proto.CompactTextString(m) }
func (*ReorderPinnedDialogReq) ProtoMessage()    {}
func (*ReorderPinnedDialogReq) Descriptor() ([]byte, []int) {
	return fileDescriptorDialogserver, []int{1}
}

func (m *ReorderPinnedDialogReq) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *ReorderPinnedDialogReq) GetPeerTypes() []*PeerType {
	if m != nil {
		return m.PeerTypes
	}
	return nil
}

type ReorderPinnedDialogReply struct {
}

func (m *ReorderPinnedDialogReply) Reset()         { *m = ReorderPinnedDialogReply{} }
func (m *ReorderPinnedDialogReply) String() string { return proto.CompactTextString(m) }
func (*ReorderPinnedDialogReply) ProtoMessage()    {}
func (*ReorderPinnedDialogReply) Descriptor() ([]byte, []int) {
	return fileDescriptorDialogserver, []int{2}
}

type RevokeUnreadReq struct {
	UserID   int32   `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	WithID   int32   `protobuf:"varint,2,opt,name=WithID,proto3" json:"WithID,omitempty"`
	WithType int32   `protobuf:"varint,3,opt,name=WithType,proto3" json:"WithType,omitempty"`
	MsgIDs   []int32 `protobuf:"varint,4,rep,packed,name=MsgIDs" json:"MsgIDs,omitempty"`
}

func (m *RevokeUnreadReq) Reset()                    { *m = RevokeUnreadReq{} }
func (m *RevokeUnreadReq) String() string            { return proto.CompactTextString(m) }
func (*RevokeUnreadReq) ProtoMessage()               {}
func (*RevokeUnreadReq) Descriptor() ([]byte, []int) { return fileDescriptorDialogserver, []int{3} }

func (m *RevokeUnreadReq) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *RevokeUnreadReq) GetWithID() int32 {
	if m != nil {
		return m.WithID
	}
	return 0
}

func (m *RevokeUnreadReq) GetWithType() int32 {
	if m != nil {
		return m.WithType
	}
	return 0
}

func (m *RevokeUnreadReq) GetMsgIDs() []int32 {
	if m != nil {
		return m.MsgIDs
	}
	return nil
}

type RevokeUnreadReply struct {
}

func (m *RevokeUnreadReply) Reset()                    { *m = RevokeUnreadReply{} }
func (m *RevokeUnreadReply) String() string            { return proto.CompactTextString(m) }
func (*RevokeUnreadReply) ProtoMessage()               {}
func (*RevokeUnreadReply) Descriptor() ([]byte, []int) { return fileDescriptorDialogserver, []int{4} }

type ClearDraftReq struct {
	UserID   int32 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	WithID   int32 `protobuf:"varint,2,opt,name=WithID,proto3" json:"WithID,omitempty"`
	WithType int32 `protobuf:"varint,3,opt,name=WithType,proto3" json:"WithType,omitempty"`
}

func (m *ClearDraftReq) Reset()                    { *m = ClearDraftReq{} }
func (m *ClearDraftReq) String() string            { return proto.CompactTextString(m) }
func (*ClearDraftReq) ProtoMessage()               {}
func (*ClearDraftReq) Descriptor() ([]byte, []int) { return fileDescriptorDialogserver, []int{5} }

func (m *ClearDraftReq) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *ClearDraftReq) GetWithID() int32 {
	if m != nil {
		return m.WithID
	}
	return 0
}

func (m *ClearDraftReq) GetWithType() int32 {
	if m != nil {
		return m.WithType
	}
	return 0
}

type ClearDraftReply struct {
}

func (m *ClearDraftReply) Reset()                    { *m = ClearDraftReply{} }
func (m *ClearDraftReply) String() string            { return proto.CompactTextString(m) }
func (*ClearDraftReply) ProtoMessage()               {}
func (*ClearDraftReply) Descriptor() ([]byte, []int) { return fileDescriptorDialogserver, []int{6} }

type GetUserDialogsReq struct {
	UserID   int32 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	WithID   int32 `protobuf:"varint,2,opt,name=WithID,proto3" json:"WithID,omitempty"`
	WithType int32 `protobuf:"varint,3,opt,name=WithType,proto3" json:"WithType,omitempty"`
	Limit    int32 `protobuf:"varint,4,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (m *GetUserDialogsReq) Reset()                    { *m = GetUserDialogsReq{} }
func (m *GetUserDialogsReq) String() string            { return proto.CompactTextString(m) }
func (*GetUserDialogsReq) ProtoMessage()               {}
func (*GetUserDialogsReq) Descriptor() ([]byte, []int) { return fileDescriptorDialogserver, []int{7} }

func (m *GetUserDialogsReq) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *GetUserDialogsReq) GetWithID() int32 {
	if m != nil {
		return m.WithID
	}
	return 0
}

func (m *GetUserDialogsReq) GetWithType() int32 {
	if m != nil {
		return m.WithType
	}
	return 0
}

func (m *GetUserDialogsReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type GetUserDialogsReply struct {
	UserDialogs []*UserDialog `protobuf:"bytes,1,rep,name=UserDialogs" json:"UserDialogs,omitempty"`
	Count       int32         `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (m *GetUserDialogsReply) Reset()                    { *m = GetUserDialogsReply{} }
func (m *GetUserDialogsReply) String() string            { return proto.CompactTextString(m) }
func (*GetUserDialogsReply) ProtoMessage()               {}
func (*GetUserDialogsReply) Descriptor() ([]byte, []int) { return fileDescriptorDialogserver, []int{8} }

func (m *GetUserDialogsReply) GetUserDialogs() []*UserDialog {
	if m != nil {
		return m.UserDialogs
	}
	return nil
}

func (m *GetUserDialogsReply) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GetUserDialogsV2Req struct {
	UserID     int32 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	WithID     int32 `protobuf:"varint,2,opt,name=WithID,proto3" json:"WithID,omitempty"`
	WithType   int32 `protobuf:"varint,3,opt,name=WithType,proto3" json:"WithType,omitempty"`
	OffsetDate int32 `protobuf:"varint,4,opt,name=OffsetDate,proto3" json:"OffsetDate,omitempty"`
	Limit      int32 `protobuf:"varint,5,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (m *GetUserDialogsV2Req) Reset()                    { *m = GetUserDialogsV2Req{} }
func (m *GetUserDialogsV2Req) String() string            { return proto.CompactTextString(m) }
func (*GetUserDialogsV2Req) ProtoMessage()               {}
func (*GetUserDialogsV2Req) Descriptor() ([]byte, []int) { return fileDescriptorDialogserver, []int{9} }

func (m *GetUserDialogsV2Req) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *GetUserDialogsV2Req) GetWithID() int32 {
	if m != nil {
		return m.WithID
	}
	return 0
}

func (m *GetUserDialogsV2Req) GetWithType() int32 {
	if m != nil {
		return m.WithType
	}
	return 0
}

func (m *GetUserDialogsV2Req) GetOffsetDate() int32 {
	if m != nil {
		return m.OffsetDate
	}
	return 0
}

func (m *GetUserDialogsV2Req) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type GetUserDialogsV2Reply struct {
	UserDialogs []*UserDialog `protobuf:"bytes,1,rep,name=UserDialogs" json:"UserDialogs,omitempty"`
	Count       int32         `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (m *GetUserDialogsV2Reply) Reset()         { *m = GetUserDialogsV2Reply{} }
func (m *GetUserDialogsV2Reply) String() string { return proto.CompactTextString(m) }
func (*GetUserDialogsV2Reply) ProtoMessage()    {}
func (*GetUserDialogsV2Reply) Descriptor() ([]byte, []int) {
	return fileDescriptorDialogserver, []int{10}
}

func (m *GetUserDialogsV2Reply) GetUserDialogs() []*UserDialog {
	if m != nil {
		return m.UserDialogs
	}
	return nil
}

func (m *GetUserDialogsV2Reply) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type UpdateDialogPinnedReq struct {
	UserID   int32 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	WithID   int32 `protobuf:"varint,2,opt,name=WithID,proto3" json:"WithID,omitempty"`
	WithType int32 `protobuf:"varint,3,opt,name=WithType,proto3" json:"WithType,omitempty"`
	Pinned   bool  `protobuf:"varint,4,opt,name=Pinned,proto3" json:"Pinned,omitempty"`
}

func (m *UpdateDialogPinnedReq) Reset()         { *m = UpdateDialogPinnedReq{} }
func (m *UpdateDialogPinnedReq) String() string { return proto.CompactTextString(m) }
func (*UpdateDialogPinnedReq) ProtoMessage()    {}
func (*UpdateDialogPinnedReq) Descriptor() ([]byte, []int) {
	return fileDescriptorDialogserver, []int{11}
}

func (m *UpdateDialogPinnedReq) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *UpdateDialogPinnedReq) GetWithID() int32 {
	if m != nil {
		return m.WithID
	}
	return 0
}

func (m *UpdateDialogPinnedReq) GetWithType() int32 {
	if m != nil {
		return m.WithType
	}
	return 0
}

func (m *UpdateDialogPinnedReq) GetPinned() bool {
	if m != nil {
		return m.Pinned
	}
	return false
}

type UpdateDialogPinnedReply struct {
}

func (m *UpdateDialogPinnedReply) Reset()         { *m = UpdateDialogPinnedReply{} }
func (m *UpdateDialogPinnedReply) String() string { return proto.CompactTextString(m) }
func (*UpdateDialogPinnedReply) ProtoMessage()    {}
func (*UpdateDialogPinnedReply) Descriptor() ([]byte, []int) {
	return fileDescriptorDialogserver, []int{12}
}

type DeleteUserDialogReq struct {
	UserID   int32 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	WithID   int32 `protobuf:"varint,2,opt,name=WithID,proto3" json:"WithID,omitempty"`
	WithType int32 `protobuf:"varint,3,opt,name=WithType,proto3" json:"WithType,omitempty"`
}

func (m *DeleteUserDialogReq) Reset()         { *m = DeleteUserDialogReq{} }
func (m *DeleteUserDialogReq) String() string { return proto.CompactTextString(m) }
func (*DeleteUserDialogReq) ProtoMessage()    {}
func (*DeleteUserDialogReq) Descriptor() ([]byte, []int) {
	return fileDescriptorDialogserver, []int{13}
}

func (m *DeleteUserDialogReq) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *DeleteUserDialogReq) GetWithID() int32 {
	if m != nil {
		return m.WithID
	}
	return 0
}

func (m *DeleteUserDialogReq) GetWithType() int32 {
	if m != nil {
		return m.WithType
	}
	return 0
}

type DeleteUserDialogReply struct {
}

func (m *DeleteUserDialogReply) Reset()         { *m = DeleteUserDialogReply{} }
func (m *DeleteUserDialogReply) String() string { return proto.CompactTextString(m) }
func (*DeleteUserDialogReply) ProtoMessage()    {}
func (*DeleteUserDialogReply) Descriptor() ([]byte, []int) {
	return fileDescriptorDialogserver, []int{14}
}

type GetUserPinedDialogReq struct {
	UserID int32 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (m *GetUserPinedDialogReq) Reset()         { *m = GetUserPinedDialogReq{} }
func (m *GetUserPinedDialogReq) String() string { return proto.CompactTextString(m) }
func (*GetUserPinedDialogReq) ProtoMessage()    {}
func (*GetUserPinedDialogReq) Descriptor() ([]byte, []int) {
	return fileDescriptorDialogserver, []int{15}
}

func (m *GetUserPinedDialogReq) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

type GetUserPinedDialogReply struct {
	UserDialogs []*UserDialog `protobuf:"bytes,1,rep,name=UserDialogs" json:"UserDialogs,omitempty"`
}

func (m *GetUserPinedDialogReply) Reset()         { *m = GetUserPinedDialogReply{} }
func (m *GetUserPinedDialogReply) String() string { return proto.CompactTextString(m) }
func (*GetUserPinedDialogReply) ProtoMessage()    {}
func (*GetUserPinedDialogReply) Descriptor() ([]byte, []int) {
	return fileDescriptorDialogserver, []int{16}
}

func (m *GetUserPinedDialogReply) GetUserDialogs() []*UserDialog {
	if m != nil {
		return m.UserDialogs
	}
	return nil
}

type GetUserDialogReq struct {
	UserID   int32 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	WithID   int32 `protobuf:"varint,2,opt,name=WithID,proto3" json:"WithID,omitempty"`
	WithType int32 `protobuf:"varint,3,opt,name=WithType,proto3" json:"WithType,omitempty"`
}

func (m *GetUserDialogReq) Reset()                    { *m = GetUserDialogReq{} }
func (m *GetUserDialogReq) String() string            { return proto.CompactTextString(m) }
func (*GetUserDialogReq) ProtoMessage()               {}
func (*GetUserDialogReq) Descriptor() ([]byte, []int) { return fileDescriptorDialogserver, []int{17} }

func (m *GetUserDialogReq) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *GetUserDialogReq) GetWithID() int32 {
	if m != nil {
		return m.WithID
	}
	return 0
}

func (m *GetUserDialogReq) GetWithType() int32 {
	if m != nil {
		return m.WithType
	}
	return 0
}

type GetUserDialogReply struct {
	UserDialog *UserDialog `protobuf:"bytes,1,opt,name=UserDialog" json:"UserDialog,omitempty"`
}

func (m *GetUserDialogReply) Reset()                    { *m = GetUserDialogReply{} }
func (m *GetUserDialogReply) String() string            { return proto.CompactTextString(m) }
func (*GetUserDialogReply) ProtoMessage()               {}
func (*GetUserDialogReply) Descriptor() ([]byte, []int) { return fileDescriptorDialogserver, []int{18} }

func (m *GetUserDialogReply) GetUserDialog() *UserDialog {
	if m != nil {
		return m.UserDialog
	}
	return nil
}

type UpdateUserDialogReq struct {
	UserID             int32 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	WithID             int32 `protobuf:"varint,2,opt,name=WithID,proto3" json:"WithID,omitempty"`
	WithType           int32 `protobuf:"varint,3,opt,name=WithType,proto3" json:"WithType,omitempty"`
	TopMessage         int32 `protobuf:"varint,4,opt,name=TopMessage,proto3" json:"TopMessage,omitempty"`
	ReadInboxMaxId     int32 `protobuf:"varint,5,opt,name=ReadInboxMaxId,proto3" json:"ReadInboxMaxId,omitempty"`
	ReadOutboxMaxId    int32 `protobuf:"varint,6,opt,name=ReadOutboxMaxId,proto3" json:"ReadOutboxMaxId,omitempty"`
	UnreadMetionsCount int32 `protobuf:"varint,7,opt,name=UnreadMetionsCount,proto3" json:"UnreadMetionsCount,omitempty"`
	UnreadCount        int32 `protobuf:"varint,8,opt,name=UnreadCount,proto3" json:"UnreadCount,omitempty"`
	Pts                int32 `protobuf:"varint,9,opt,name=Pts,proto3" json:"Pts,omitempty"`
	UpdateDate         int32 `protobuf:"varint,10,opt,name=UpdateDate,proto3" json:"UpdateDate,omitempty"`
}

func (m *UpdateUserDialogReq) Reset()         { *m = UpdateUserDialogReq{} }
func (m *UpdateUserDialogReq) String() string { return proto.CompactTextString(m) }
func (*UpdateUserDialogReq) ProtoMessage()    {}
func (*UpdateUserDialogReq) Descriptor() ([]byte, []int) {
	return fileDescriptorDialogserver, []int{19}
}

func (m *UpdateUserDialogReq) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *UpdateUserDialogReq) GetWithID() int32 {
	if m != nil {
		return m.WithID
	}
	return 0
}

func (m *UpdateUserDialogReq) GetWithType() int32 {
	if m != nil {
		return m.WithType
	}
	return 0
}

func (m *UpdateUserDialogReq) GetTopMessage() int32 {
	if m != nil {
		return m.TopMessage
	}
	return 0
}

func (m *UpdateUserDialogReq) GetReadInboxMaxId() int32 {
	if m != nil {
		return m.ReadInboxMaxId
	}
	return 0
}

func (m *UpdateUserDialogReq) GetReadOutboxMaxId() int32 {
	if m != nil {
		return m.ReadOutboxMaxId
	}
	return 0
}

func (m *UpdateUserDialogReq) GetUnreadMetionsCount() int32 {
	if m != nil {
		return m.UnreadMetionsCount
	}
	return 0
}

func (m *UpdateUserDialogReq) GetUnreadCount() int32 {
	if m != nil {
		return m.UnreadCount
	}
	return 0
}

func (m *UpdateUserDialogReq) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *UpdateUserDialogReq) GetUpdateDate() int32 {
	if m != nil {
		return m.UpdateDate
	}
	return 0
}

type UpdateUserDialogReply struct {
}

func (m *UpdateUserDialogReply) Reset()         { *m = UpdateUserDialogReply{} }
func (m *UpdateUserDialogReply) String() string { return proto.CompactTextString(m) }
func (*UpdateUserDialogReply) ProtoMessage()    {}
func (*UpdateUserDialogReply) Descriptor() ([]byte, []int) {
	return fileDescriptorDialogserver, []int{20}
}

type GetUserAllDialogReq struct {
	UserID int32 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (m *GetUserAllDialogReq) Reset()         { *m = GetUserAllDialogReq{} }
func (m *GetUserAllDialogReq) String() string { return proto.CompactTextString(m) }
func (*GetUserAllDialogReq) ProtoMessage()    {}
func (*GetUserAllDialogReq) Descriptor() ([]byte, []int) {
	return fileDescriptorDialogserver, []int{21}
}

func (m *GetUserAllDialogReq) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

type GetUserAllDialogReply struct {
	UserDialogs []*UserDialog `protobuf:"bytes,1,rep,name=UserDialogs" json:"UserDialogs,omitempty"`
}

func (m *GetUserAllDialogReply) Reset()         { *m = GetUserAllDialogReply{} }
func (m *GetUserAllDialogReply) String() string { return proto.CompactTextString(m) }
func (*GetUserAllDialogReply) ProtoMessage()    {}
func (*GetUserAllDialogReply) Descriptor() ([]byte, []int) {
	return fileDescriptorDialogserver, []int{22}
}

func (m *GetUserAllDialogReply) GetUserDialogs() []*UserDialog {
	if m != nil {
		return m.UserDialogs
	}
	return nil
}

type InsertUserDialogReq struct {
	UserDialog  *UserDialog `protobuf:"bytes,1,opt,name=UserDialog" json:"UserDialog,omitempty"`
	UpdateScore bool        `protobuf:"varint,2,opt,name=UpdateScore,proto3" json:"UpdateScore,omitempty"`
}

func (m *InsertUserDialogReq) Reset()         { *m = InsertUserDialogReq{} }
func (m *InsertUserDialogReq) String() string { return proto.CompactTextString(m) }
func (*InsertUserDialogReq) ProtoMessage()    {}
func (*InsertUserDialogReq) Descriptor() ([]byte, []int) {
	return fileDescriptorDialogserver, []int{23}
}

func (m *InsertUserDialogReq) GetUserDialog() *UserDialog {
	if m != nil {
		return m.UserDialog
	}
	return nil
}

func (m *InsertUserDialogReq) GetUpdateScore() bool {
	if m != nil {
		return m.UpdateScore
	}
	return false
}

type InsertUserDialogReply struct {
}

func (m *InsertUserDialogReply) Reset()         { *m = InsertUserDialogReply{} }
func (m *InsertUserDialogReply) String() string { return proto.CompactTextString(m) }
func (*InsertUserDialogReply) ProtoMessage()    {}
func (*InsertUserDialogReply) Descriptor() ([]byte, []int) {
	return fileDescriptorDialogserver, []int{24}
}

type UserDialog struct {
	UserId              int32   `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId              int32   `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	Type                int32   `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Flags               int32   `protobuf:"varint,4,opt,name=Flags,proto3" json:"Flags,omitempty"`
	Pinged              bool    `protobuf:"varint,5,opt,name=Pinged,proto3" json:"Pinged,omitempty"`
	TopMessage          int32   `protobuf:"varint,6,opt,name=TopMessage,proto3" json:"TopMessage,omitempty"`
	ReadInboxMaxId      int32   `protobuf:"varint,7,opt,name=ReadInboxMaxId,proto3" json:"ReadInboxMaxId,omitempty"`
	ReadOutboxMaxId     int32   `protobuf:"varint,8,opt,name=ReadOutboxMaxId,proto3" json:"ReadOutboxMaxId,omitempty"`
	UnreadMetionsCount  int32   `protobuf:"varint,9,opt,name=UnreadMetionsCount,proto3" json:"UnreadMetionsCount,omitempty"`
	UnreadCount         int32   `protobuf:"varint,10,opt,name=UnreadCount,proto3" json:"UnreadCount,omitempty"`
	NotifySettingsFlags int32   `protobuf:"varint,11,opt,name=NotifySettingsFlags,proto3" json:"NotifySettingsFlags,omitempty"`
	ShowPreviews        bool    `protobuf:"varint,12,opt,name=ShowPreviews,proto3" json:"ShowPreviews,omitempty"`
	Silent              bool    `protobuf:"varint,13,opt,name=Silent,proto3" json:"Silent,omitempty"`
	MuteUntil           int32   `protobuf:"varint,14,opt,name=MuteUntil,proto3" json:"MuteUntil,omitempty"`
	Sound               string  `protobuf:"bytes,15,opt,name=Sound,proto3" json:"Sound,omitempty"`
	Pts                 int32   `protobuf:"varint,16,opt,name=Pts,proto3" json:"Pts,omitempty"`
	Draft               []byte  `protobuf:"bytes,17,opt,name=Draft,proto3" json:"Draft,omitempty"`
	Readinpts           int32   `protobuf:"varint,18,opt,name=Readinpts,proto3" json:"Readinpts,omitempty"`
	Readoutpts          int32   `protobuf:"varint,19,opt,name=Readoutpts,proto3" json:"Readoutpts,omitempty"`
	LinkUser            []int32 `protobuf:"varint,20,rep,packed,name=LinkUser" json:"LinkUser,omitempty"`
	InsertDate          int64   `protobuf:"varint,21,opt,name=InsertDate,proto3" json:"InsertDate,omitempty"`
	UpdateDate          int64   `protobuf:"varint,22,opt,name=UpdateDate,proto3" json:"UpdateDate,omitempty"`
	Encry               int32   `protobuf:"varint,23,opt,name=Encry,proto3" json:"Encry,omitempty"`
	Revoke              bool    `protobuf:"varint,24,opt,name=Revoke,proto3" json:"Revoke,omitempty"`
}

func (m *UserDialog) Reset()                    { *m = UserDialog{} }
func (m *UserDialog) String() string            { return proto.CompactTextString(m) }
func (*UserDialog) ProtoMessage()               {}
func (*UserDialog) Descriptor() ([]byte, []int) { return fileDescriptorDialogserver, []int{25} }

func (m *UserDialog) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserDialog) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *UserDialog) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *UserDialog) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *UserDialog) GetPinged() bool {
	if m != nil {
		return m.Pinged
	}
	return false
}

func (m *UserDialog) GetTopMessage() int32 {
	if m != nil {
		return m.TopMessage
	}
	return 0
}

func (m *UserDialog) GetReadInboxMaxId() int32 {
	if m != nil {
		return m.ReadInboxMaxId
	}
	return 0
}

func (m *UserDialog) GetReadOutboxMaxId() int32 {
	if m != nil {
		return m.ReadOutboxMaxId
	}
	return 0
}

func (m *UserDialog) GetUnreadMetionsCount() int32 {
	if m != nil {
		return m.UnreadMetionsCount
	}
	return 0
}

func (m *UserDialog) GetUnreadCount() int32 {
	if m != nil {
		return m.UnreadCount
	}
	return 0
}

func (m *UserDialog) GetNotifySettingsFlags() int32 {
	if m != nil {
		return m.NotifySettingsFlags
	}
	return 0
}

func (m *UserDialog) GetShowPreviews() bool {
	if m != nil {
		return m.ShowPreviews
	}
	return false
}

func (m *UserDialog) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *UserDialog) GetMuteUntil() int32 {
	if m != nil {
		return m.MuteUntil
	}
	return 0
}

func (m *UserDialog) GetSound() string {
	if m != nil {
		return m.Sound
	}
	return ""
}

func (m *UserDialog) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *UserDialog) GetDraft() []byte {
	if m != nil {
		return m.Draft
	}
	return nil
}

func (m *UserDialog) GetReadinpts() int32 {
	if m != nil {
		return m.Readinpts
	}
	return 0
}

func (m *UserDialog) GetReadoutpts() int32 {
	if m != nil {
		return m.Readoutpts
	}
	return 0
}

func (m *UserDialog) GetLinkUser() []int32 {
	if m != nil {
		return m.LinkUser
	}
	return nil
}

func (m *UserDialog) GetInsertDate() int64 {
	if m != nil {
		return m.InsertDate
	}
	return 0
}

func (m *UserDialog) GetUpdateDate() int64 {
	if m != nil {
		return m.UpdateDate
	}
	return 0
}

func (m *UserDialog) GetEncry() int32 {
	if m != nil {
		return m.Encry
	}
	return 0
}

func (m *UserDialog) GetRevoke() bool {
	if m != nil {
		return m.Revoke
	}
	return false
}

func init() {
	proto.RegisterType((*PeerType)(nil), "dialogserver.PeerType")
	proto.RegisterType((*ReorderPinnedDialogReq)(nil), "dialogserver.ReorderPinnedDialogReq")
	proto.RegisterType((*ReorderPinnedDialogReply)(nil), "dialogserver.ReorderPinnedDialogReply")
	proto.RegisterType((*RevokeUnreadReq)(nil), "dialogserver.RevokeUnreadReq")
	proto.RegisterType((*RevokeUnreadReply)(nil), "dialogserver.RevokeUnreadReply")
	proto.RegisterType((*ClearDraftReq)(nil), "dialogserver.ClearDraftReq")
	proto.RegisterType((*ClearDraftReply)(nil), "dialogserver.ClearDraftReply")
	proto.RegisterType((*GetUserDialogsReq)(nil), "dialogserver.GetUserDialogsReq")
	proto.RegisterType((*GetUserDialogsReply)(nil), "dialogserver.GetUserDialogsReply")
	proto.RegisterType((*GetUserDialogsV2Req)(nil), "dialogserver.GetUserDialogsV2Req")
	proto.RegisterType((*GetUserDialogsV2Reply)(nil), "dialogserver.GetUserDialogsV2Reply")
	proto.RegisterType((*UpdateDialogPinnedReq)(nil), "dialogserver.UpdateDialogPinnedReq")
	proto.RegisterType((*UpdateDialogPinnedReply)(nil), "dialogserver.UpdateDialogPinnedReply")
	proto.RegisterType((*DeleteUserDialogReq)(nil), "dialogserver.DeleteUserDialogReq")
	proto.RegisterType((*DeleteUserDialogReply)(nil), "dialogserver.DeleteUserDialogReply")
	proto.RegisterType((*GetUserPinedDialogReq)(nil), "dialogserver.GetUserPinedDialogReq")
	proto.RegisterType((*GetUserPinedDialogReply)(nil), "dialogserver.GetUserPinedDialogReply")
	proto.RegisterType((*GetUserDialogReq)(nil), "dialogserver.GetUserDialogReq")
	proto.RegisterType((*GetUserDialogReply)(nil), "dialogserver.GetUserDialogReply")
	proto.RegisterType((*UpdateUserDialogReq)(nil), "dialogserver.UpdateUserDialogReq")
	proto.RegisterType((*UpdateUserDialogReply)(nil), "dialogserver.UpdateUserDialogReply")
	proto.RegisterType((*GetUserAllDialogReq)(nil), "dialogserver.GetUserAllDialogReq")
	proto.RegisterType((*GetUserAllDialogReply)(nil), "dialogserver.GetUserAllDialogReply")
	proto.RegisterType((*InsertUserDialogReq)(nil), "dialogserver.InsertUserDialogReq")
	proto.RegisterType((*InsertUserDialogReply)(nil), "dialogserver.InsertUserDialogReply")
	proto.RegisterType((*UserDialog)(nil), "dialogserver.UserDialog")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DialogServer service

type DialogServerClient interface {
	// InsertUserDialog 新增对话框
	InsertUserDialog(ctx context.Context, in *InsertUserDialogReq, opts ...grpc.CallOption) (*InsertUserDialogReply, error)
	// UpdateUserDialog 更新对话框
	UpdateUserDialog(ctx context.Context, in *UpdateUserDialogReq, opts ...grpc.CallOption) (*UpdateUserDialogReply, error)
	// GetUserDialog 获取一个对话框信息
	GetUserDialog(ctx context.Context, in *GetUserDialogReq, opts ...grpc.CallOption) (*GetUserDialogReply, error)
	// GetUserAllDialog 获取用户所有对话框
	GetUserAllDialog(ctx context.Context, in *GetUserAllDialogReq, opts ...grpc.CallOption) (*GetUserAllDialogReply, error)
	// GetUserPinedDialog 获取置顶dialog
	GetUserPinedDialog(ctx context.Context, in *GetUserPinedDialogReq, opts ...grpc.CallOption) (*GetUserPinedDialogReply, error)
	// DeleteUserDialog 删除对话框
	DeleteUserDialog(ctx context.Context, in *DeleteUserDialogReq, opts ...grpc.CallOption) (*DeleteUserDialogReply, error)
	// UpdateDialogPinned 置顶对话框或者取消对话框置顶
	UpdateDialogPinned(ctx context.Context, in *UpdateDialogPinnedReq, opts ...grpc.CallOption) (*UpdateDialogPinnedReply, error)
	// GetUserDialogs 分页获取对话框列表
	GetUserDialogs(ctx context.Context, in *GetUserDialogsReq, opts ...grpc.CallOption) (*GetUserDialogsReply, error)
	// GetUserDialogsV2 通过offsetDate去获取dialog
	GetUserDialogsV2(ctx context.Context, in *GetUserDialogsV2Req, opts ...grpc.CallOption) (*GetUserDialogsV2Reply, error)
	// ClearDraft 清除草稿
	ClearDraft(ctx context.Context, in *ClearDraftReq, opts ...grpc.CallOption) (*ClearDraftReply, error)
	// RevokeUnread 删除消息时撤销未读
	RevokeUnread(ctx context.Context, in *RevokeUnreadReq, opts ...grpc.CallOption) (*RevokeUnreadReply, error)
	// ReorderPinnedDiaog 置顶对话框重排序
	ReorderPinnedDialog(ctx context.Context, in *ReorderPinnedDialogReq, opts ...grpc.CallOption) (*ReorderPinnedDialogReply, error)
}

type dialogServerClient struct {
	cc *grpc.ClientConn
}

func NewDialogServerClient(cc *grpc.ClientConn) DialogServerClient {
	return &dialogServerClient{cc}
}

func (c *dialogServerClient) InsertUserDialog(ctx context.Context, in *InsertUserDialogReq, opts ...grpc.CallOption) (*InsertUserDialogReply, error) {
	out := new(InsertUserDialogReply)
	err := grpc.Invoke(ctx, "/dialogserver.DialogServer/InsertUserDialog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServerClient) UpdateUserDialog(ctx context.Context, in *UpdateUserDialogReq, opts ...grpc.CallOption) (*UpdateUserDialogReply, error) {
	out := new(UpdateUserDialogReply)
	err := grpc.Invoke(ctx, "/dialogserver.DialogServer/UpdateUserDialog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServerClient) GetUserDialog(ctx context.Context, in *GetUserDialogReq, opts ...grpc.CallOption) (*GetUserDialogReply, error) {
	out := new(GetUserDialogReply)
	err := grpc.Invoke(ctx, "/dialogserver.DialogServer/GetUserDialog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServerClient) GetUserAllDialog(ctx context.Context, in *GetUserAllDialogReq, opts ...grpc.CallOption) (*GetUserAllDialogReply, error) {
	out := new(GetUserAllDialogReply)
	err := grpc.Invoke(ctx, "/dialogserver.DialogServer/GetUserAllDialog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServerClient) GetUserPinedDialog(ctx context.Context, in *GetUserPinedDialogReq, opts ...grpc.CallOption) (*GetUserPinedDialogReply, error) {
	out := new(GetUserPinedDialogReply)
	err := grpc.Invoke(ctx, "/dialogserver.DialogServer/GetUserPinedDialog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServerClient) DeleteUserDialog(ctx context.Context, in *DeleteUserDialogReq, opts ...grpc.CallOption) (*DeleteUserDialogReply, error) {
	out := new(DeleteUserDialogReply)
	err := grpc.Invoke(ctx, "/dialogserver.DialogServer/DeleteUserDialog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServerClient) UpdateDialogPinned(ctx context.Context, in *UpdateDialogPinnedReq, opts ...grpc.CallOption) (*UpdateDialogPinnedReply, error) {
	out := new(UpdateDialogPinnedReply)
	err := grpc.Invoke(ctx, "/dialogserver.DialogServer/UpdateDialogPinned", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServerClient) GetUserDialogs(ctx context.Context, in *GetUserDialogsReq, opts ...grpc.CallOption) (*GetUserDialogsReply, error) {
	out := new(GetUserDialogsReply)
	err := grpc.Invoke(ctx, "/dialogserver.DialogServer/GetUserDialogs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServerClient) GetUserDialogsV2(ctx context.Context, in *GetUserDialogsV2Req, opts ...grpc.CallOption) (*GetUserDialogsV2Reply, error) {
	out := new(GetUserDialogsV2Reply)
	err := grpc.Invoke(ctx, "/dialogserver.DialogServer/GetUserDialogsV2", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServerClient) ClearDraft(ctx context.Context, in *ClearDraftReq, opts ...grpc.CallOption) (*ClearDraftReply, error) {
	out := new(ClearDraftReply)
	err := grpc.Invoke(ctx, "/dialogserver.DialogServer/ClearDraft", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServerClient) RevokeUnread(ctx context.Context, in *RevokeUnreadReq, opts ...grpc.CallOption) (*RevokeUnreadReply, error) {
	out := new(RevokeUnreadReply)
	err := grpc.Invoke(ctx, "/dialogserver.DialogServer/RevokeUnread", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServerClient) ReorderPinnedDialog(ctx context.Context, in *ReorderPinnedDialogReq, opts ...grpc.CallOption) (*ReorderPinnedDialogReply, error) {
	out := new(ReorderPinnedDialogReply)
	err := grpc.Invoke(ctx, "/dialogserver.DialogServer/ReorderPinnedDialog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DialogServer service

type DialogServerServer interface {
	// InsertUserDialog 新增对话框
	InsertUserDialog(context.Context, *InsertUserDialogReq) (*InsertUserDialogReply, error)
	// UpdateUserDialog 更新对话框
	UpdateUserDialog(context.Context, *UpdateUserDialogReq) (*UpdateUserDialogReply, error)
	// GetUserDialog 获取一个对话框信息
	GetUserDialog(context.Context, *GetUserDialogReq) (*GetUserDialogReply, error)
	// GetUserAllDialog 获取用户所有对话框
	GetUserAllDialog(context.Context, *GetUserAllDialogReq) (*GetUserAllDialogReply, error)
	// GetUserPinedDialog 获取置顶dialog
	GetUserPinedDialog(context.Context, *GetUserPinedDialogReq) (*GetUserPinedDialogReply, error)
	// DeleteUserDialog 删除对话框
	DeleteUserDialog(context.Context, *DeleteUserDialogReq) (*DeleteUserDialogReply, error)
	// UpdateDialogPinned 置顶对话框或者取消对话框置顶
	UpdateDialogPinned(context.Context, *UpdateDialogPinnedReq) (*UpdateDialogPinnedReply, error)
	// GetUserDialogs 分页获取对话框列表
	GetUserDialogs(context.Context, *GetUserDialogsReq) (*GetUserDialogsReply, error)
	// GetUserDialogsV2 通过offsetDate去获取dialog
	GetUserDialogsV2(context.Context, *GetUserDialogsV2Req) (*GetUserDialogsV2Reply, error)
	// ClearDraft 清除草稿
	ClearDraft(context.Context, *ClearDraftReq) (*ClearDraftReply, error)
	// RevokeUnread 删除消息时撤销未读
	RevokeUnread(context.Context, *RevokeUnreadReq) (*RevokeUnreadReply, error)
	// ReorderPinnedDiaog 置顶对话框重排序
	ReorderPinnedDialog(context.Context, *ReorderPinnedDialogReq) (*ReorderPinnedDialogReply, error)
}

func RegisterDialogServerServer(s *grpc.Server, srv DialogServerServer) {
	s.RegisterService(&_DialogServer_serviceDesc, srv)
}

func _DialogServer_InsertUserDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertUserDialogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServerServer).InsertUserDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialogserver.DialogServer/InsertUserDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServerServer).InsertUserDialog(ctx, req.(*InsertUserDialogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogServer_UpdateUserDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserDialogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServerServer).UpdateUserDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialogserver.DialogServer/UpdateUserDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServerServer).UpdateUserDialog(ctx, req.(*UpdateUserDialogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogServer_GetUserDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDialogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServerServer).GetUserDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialogserver.DialogServer/GetUserDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServerServer).GetUserDialog(ctx, req.(*GetUserDialogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogServer_GetUserAllDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAllDialogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServerServer).GetUserAllDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialogserver.DialogServer/GetUserAllDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServerServer).GetUserAllDialog(ctx, req.(*GetUserAllDialogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogServer_GetUserPinedDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPinedDialogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServerServer).GetUserPinedDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialogserver.DialogServer/GetUserPinedDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServerServer).GetUserPinedDialog(ctx, req.(*GetUserPinedDialogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogServer_DeleteUserDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserDialogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServerServer).DeleteUserDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialogserver.DialogServer/DeleteUserDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServerServer).DeleteUserDialog(ctx, req.(*DeleteUserDialogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogServer_UpdateDialogPinned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDialogPinnedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServerServer).UpdateDialogPinned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialogserver.DialogServer/UpdateDialogPinned",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServerServer).UpdateDialogPinned(ctx, req.(*UpdateDialogPinnedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogServer_GetUserDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDialogsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServerServer).GetUserDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialogserver.DialogServer/GetUserDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServerServer).GetUserDialogs(ctx, req.(*GetUserDialogsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogServer_GetUserDialogsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDialogsV2Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServerServer).GetUserDialogsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialogserver.DialogServer/GetUserDialogsV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServerServer).GetUserDialogsV2(ctx, req.(*GetUserDialogsV2Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogServer_ClearDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearDraftReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServerServer).ClearDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialogserver.DialogServer/ClearDraft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServerServer).ClearDraft(ctx, req.(*ClearDraftReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogServer_RevokeUnread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeUnreadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServerServer).RevokeUnread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialogserver.DialogServer/RevokeUnread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServerServer).RevokeUnread(ctx, req.(*RevokeUnreadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogServer_ReorderPinnedDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReorderPinnedDialogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServerServer).ReorderPinnedDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialogserver.DialogServer/ReorderPinnedDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServerServer).ReorderPinnedDialog(ctx, req.(*ReorderPinnedDialogReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DialogServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialogserver.DialogServer",
	HandlerType: (*DialogServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertUserDialog",
			Handler:    _DialogServer_InsertUserDialog_Handler,
		},
		{
			MethodName: "UpdateUserDialog",
			Handler:    _DialogServer_UpdateUserDialog_Handler,
		},
		{
			MethodName: "GetUserDialog",
			Handler:    _DialogServer_GetUserDialog_Handler,
		},
		{
			MethodName: "GetUserAllDialog",
			Handler:    _DialogServer_GetUserAllDialog_Handler,
		},
		{
			MethodName: "GetUserPinedDialog",
			Handler:    _DialogServer_GetUserPinedDialog_Handler,
		},
		{
			MethodName: "DeleteUserDialog",
			Handler:    _DialogServer_DeleteUserDialog_Handler,
		},
		{
			MethodName: "UpdateDialogPinned",
			Handler:    _DialogServer_UpdateDialogPinned_Handler,
		},
		{
			MethodName: "GetUserDialogs",
			Handler:    _DialogServer_GetUserDialogs_Handler,
		},
		{
			MethodName: "GetUserDialogsV2",
			Handler:    _DialogServer_GetUserDialogsV2_Handler,
		},
		{
			MethodName: "ClearDraft",
			Handler:    _DialogServer_ClearDraft_Handler,
		},
		{
			MethodName: "RevokeUnread",
			Handler:    _DialogServer_RevokeUnread_Handler,
		},
		{
			MethodName: "ReorderPinnedDialog",
			Handler:    _DialogServer_ReorderPinnedDialog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dialogserver.proto",
}

func (m *PeerType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WithID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.WithID))
	}
	if m.WithType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.WithType))
	}
	return i, nil
}

func (m *ReorderPinnedDialogReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReorderPinnedDialogReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.UserID))
	}
	if len(m.PeerTypes) > 0 {
		for _, msg := range m.PeerTypes {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDialogserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ReorderPinnedDialogReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReorderPinnedDialogReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RevokeUnreadReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RevokeUnreadReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.UserID))
	}
	if m.WithID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.WithID))
	}
	if m.WithType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.WithType))
	}
	if len(m.MsgIDs) > 0 {
		dAtA2 := make([]byte, len(m.MsgIDs)*10)
		var j1 int
		for _, num1 := range m.MsgIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *RevokeUnreadReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RevokeUnreadReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ClearDraftReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearDraftReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.UserID))
	}
	if m.WithID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.WithID))
	}
	if m.WithType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.WithType))
	}
	return i, nil
}

func (m *ClearDraftReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearDraftReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetUserDialogsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserDialogsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.UserID))
	}
	if m.WithID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.WithID))
	}
	if m.WithType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.WithType))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.Limit))
	}
	return i, nil
}

func (m *GetUserDialogsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserDialogsReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserDialogs) > 0 {
		for _, msg := range m.UserDialogs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDialogserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *GetUserDialogsV2Req) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserDialogsV2Req) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.UserID))
	}
	if m.WithID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.WithID))
	}
	if m.WithType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.WithType))
	}
	if m.OffsetDate != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.OffsetDate))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.Limit))
	}
	return i, nil
}

func (m *GetUserDialogsV2Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserDialogsV2Reply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserDialogs) > 0 {
		for _, msg := range m.UserDialogs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDialogserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *UpdateDialogPinnedReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDialogPinnedReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.UserID))
	}
	if m.WithID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.WithID))
	}
	if m.WithType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.WithType))
	}
	if m.Pinned {
		dAtA[i] = 0x20
		i++
		if m.Pinned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *UpdateDialogPinnedReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDialogPinnedReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DeleteUserDialogReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteUserDialogReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.UserID))
	}
	if m.WithID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.WithID))
	}
	if m.WithType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.WithType))
	}
	return i, nil
}

func (m *DeleteUserDialogReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteUserDialogReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetUserPinedDialogReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserPinedDialogReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.UserID))
	}
	return i, nil
}

func (m *GetUserPinedDialogReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserPinedDialogReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserDialogs) > 0 {
		for _, msg := range m.UserDialogs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDialogserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetUserDialogReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserDialogReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.UserID))
	}
	if m.WithID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.WithID))
	}
	if m.WithType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.WithType))
	}
	return i, nil
}

func (m *GetUserDialogReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserDialogReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserDialog != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.UserDialog.Size()))
		n3, err := m.UserDialog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *UpdateUserDialogReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserDialogReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.UserID))
	}
	if m.WithID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.WithID))
	}
	if m.WithType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.WithType))
	}
	if m.TopMessage != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.TopMessage))
	}
	if m.ReadInboxMaxId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.ReadInboxMaxId))
	}
	if m.ReadOutboxMaxId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.ReadOutboxMaxId))
	}
	if m.UnreadMetionsCount != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.UnreadMetionsCount))
	}
	if m.UnreadCount != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.UnreadCount))
	}
	if m.Pts != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.Pts))
	}
	if m.UpdateDate != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.UpdateDate))
	}
	return i, nil
}

func (m *UpdateUserDialogReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserDialogReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetUserAllDialogReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserAllDialogReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.UserID))
	}
	return i, nil
}

func (m *GetUserAllDialogReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserAllDialogReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserDialogs) > 0 {
		for _, msg := range m.UserDialogs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDialogserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *InsertUserDialogReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InsertUserDialogReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserDialog != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.UserDialog.Size()))
		n4, err := m.UserDialog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.UpdateScore {
		dAtA[i] = 0x10
		i++
		if m.UpdateScore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *InsertUserDialogReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InsertUserDialogReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UserDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserDialog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.WithId))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.Type))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.Flags))
	}
	if m.Pinged {
		dAtA[i] = 0x28
		i++
		if m.Pinged {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TopMessage != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.TopMessage))
	}
	if m.ReadInboxMaxId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.ReadInboxMaxId))
	}
	if m.ReadOutboxMaxId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.ReadOutboxMaxId))
	}
	if m.UnreadMetionsCount != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.UnreadMetionsCount))
	}
	if m.UnreadCount != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.UnreadCount))
	}
	if m.NotifySettingsFlags != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.NotifySettingsFlags))
	}
	if m.ShowPreviews {
		dAtA[i] = 0x60
		i++
		if m.ShowPreviews {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Silent {
		dAtA[i] = 0x68
		i++
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MuteUntil != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.MuteUntil))
	}
	if len(m.Sound) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(len(m.Sound)))
		i += copy(dAtA[i:], m.Sound)
	}
	if m.Pts != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.Pts))
	}
	if len(m.Draft) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(len(m.Draft)))
		i += copy(dAtA[i:], m.Draft)
	}
	if m.Readinpts != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.Readinpts))
	}
	if m.Readoutpts != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.Readoutpts))
	}
	if len(m.LinkUser) > 0 {
		dAtA6 := make([]byte, len(m.LinkUser)*10)
		var j5 int
		for _, num1 := range m.LinkUser {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	if m.InsertDate != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.InsertDate))
	}
	if m.UpdateDate != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.UpdateDate))
	}
	if m.Encry != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintDialogserver(dAtA, i, uint64(m.Encry))
	}
	if m.Revoke {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		if m.Revoke {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeFixed64Dialogserver(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Dialogserver(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintDialogserver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PeerType) Size() (n int) {
	var l int
	_ = l
	if m.WithID != 0 {
		n += 1 + sovDialogserver(uint64(m.WithID))
	}
	if m.WithType != 0 {
		n += 1 + sovDialogserver(uint64(m.WithType))
	}
	return n
}

func (m *ReorderPinnedDialogReq) Size() (n int) {
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovDialogserver(uint64(m.UserID))
	}
	if len(m.PeerTypes) > 0 {
		for _, e := range m.PeerTypes {
			l = e.Size()
			n += 1 + l + sovDialogserver(uint64(l))
		}
	}
	return n
}

func (m *ReorderPinnedDialogReply) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RevokeUnreadReq) Size() (n int) {
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovDialogserver(uint64(m.UserID))
	}
	if m.WithID != 0 {
		n += 1 + sovDialogserver(uint64(m.WithID))
	}
	if m.WithType != 0 {
		n += 1 + sovDialogserver(uint64(m.WithType))
	}
	if len(m.MsgIDs) > 0 {
		l = 0
		for _, e := range m.MsgIDs {
			l += sovDialogserver(uint64(e))
		}
		n += 1 + sovDialogserver(uint64(l)) + l
	}
	return n
}

func (m *RevokeUnreadReply) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ClearDraftReq) Size() (n int) {
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovDialogserver(uint64(m.UserID))
	}
	if m.WithID != 0 {
		n += 1 + sovDialogserver(uint64(m.WithID))
	}
	if m.WithType != 0 {
		n += 1 + sovDialogserver(uint64(m.WithType))
	}
	return n
}

func (m *ClearDraftReply) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetUserDialogsReq) Size() (n int) {
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovDialogserver(uint64(m.UserID))
	}
	if m.WithID != 0 {
		n += 1 + sovDialogserver(uint64(m.WithID))
	}
	if m.WithType != 0 {
		n += 1 + sovDialogserver(uint64(m.WithType))
	}
	if m.Limit != 0 {
		n += 1 + sovDialogserver(uint64(m.Limit))
	}
	return n
}

func (m *GetUserDialogsReply) Size() (n int) {
	var l int
	_ = l
	if len(m.UserDialogs) > 0 {
		for _, e := range m.UserDialogs {
			l = e.Size()
			n += 1 + l + sovDialogserver(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovDialogserver(uint64(m.Count))
	}
	return n
}

func (m *GetUserDialogsV2Req) Size() (n int) {
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovDialogserver(uint64(m.UserID))
	}
	if m.WithID != 0 {
		n += 1 + sovDialogserver(uint64(m.WithID))
	}
	if m.WithType != 0 {
		n += 1 + sovDialogserver(uint64(m.WithType))
	}
	if m.OffsetDate != 0 {
		n += 1 + sovDialogserver(uint64(m.OffsetDate))
	}
	if m.Limit != 0 {
		n += 1 + sovDialogserver(uint64(m.Limit))
	}
	return n
}

func (m *GetUserDialogsV2Reply) Size() (n int) {
	var l int
	_ = l
	if len(m.UserDialogs) > 0 {
		for _, e := range m.UserDialogs {
			l = e.Size()
			n += 1 + l + sovDialogserver(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovDialogserver(uint64(m.Count))
	}
	return n
}

func (m *UpdateDialogPinnedReq) Size() (n int) {
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovDialogserver(uint64(m.UserID))
	}
	if m.WithID != 0 {
		n += 1 + sovDialogserver(uint64(m.WithID))
	}
	if m.WithType != 0 {
		n += 1 + sovDialogserver(uint64(m.WithType))
	}
	if m.Pinned {
		n += 2
	}
	return n
}

func (m *UpdateDialogPinnedReply) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DeleteUserDialogReq) Size() (n int) {
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovDialogserver(uint64(m.UserID))
	}
	if m.WithID != 0 {
		n += 1 + sovDialogserver(uint64(m.WithID))
	}
	if m.WithType != 0 {
		n += 1 + sovDialogserver(uint64(m.WithType))
	}
	return n
}

func (m *DeleteUserDialogReply) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetUserPinedDialogReq) Size() (n int) {
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovDialogserver(uint64(m.UserID))
	}
	return n
}

func (m *GetUserPinedDialogReply) Size() (n int) {
	var l int
	_ = l
	if len(m.UserDialogs) > 0 {
		for _, e := range m.UserDialogs {
			l = e.Size()
			n += 1 + l + sovDialogserver(uint64(l))
		}
	}
	return n
}

func (m *GetUserDialogReq) Size() (n int) {
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovDialogserver(uint64(m.UserID))
	}
	if m.WithID != 0 {
		n += 1 + sovDialogserver(uint64(m.WithID))
	}
	if m.WithType != 0 {
		n += 1 + sovDialogserver(uint64(m.WithType))
	}
	return n
}

func (m *GetUserDialogReply) Size() (n int) {
	var l int
	_ = l
	if m.UserDialog != nil {
		l = m.UserDialog.Size()
		n += 1 + l + sovDialogserver(uint64(l))
	}
	return n
}

func (m *UpdateUserDialogReq) Size() (n int) {
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovDialogserver(uint64(m.UserID))
	}
	if m.WithID != 0 {
		n += 1 + sovDialogserver(uint64(m.WithID))
	}
	if m.WithType != 0 {
		n += 1 + sovDialogserver(uint64(m.WithType))
	}
	if m.TopMessage != 0 {
		n += 1 + sovDialogserver(uint64(m.TopMessage))
	}
	if m.ReadInboxMaxId != 0 {
		n += 1 + sovDialogserver(uint64(m.ReadInboxMaxId))
	}
	if m.ReadOutboxMaxId != 0 {
		n += 1 + sovDialogserver(uint64(m.ReadOutboxMaxId))
	}
	if m.UnreadMetionsCount != 0 {
		n += 1 + sovDialogserver(uint64(m.UnreadMetionsCount))
	}
	if m.UnreadCount != 0 {
		n += 1 + sovDialogserver(uint64(m.UnreadCount))
	}
	if m.Pts != 0 {
		n += 1 + sovDialogserver(uint64(m.Pts))
	}
	if m.UpdateDate != 0 {
		n += 1 + sovDialogserver(uint64(m.UpdateDate))
	}
	return n
}

func (m *UpdateUserDialogReply) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetUserAllDialogReq) Size() (n int) {
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovDialogserver(uint64(m.UserID))
	}
	return n
}

func (m *GetUserAllDialogReply) Size() (n int) {
	var l int
	_ = l
	if len(m.UserDialogs) > 0 {
		for _, e := range m.UserDialogs {
			l = e.Size()
			n += 1 + l + sovDialogserver(uint64(l))
		}
	}
	return n
}

func (m *InsertUserDialogReq) Size() (n int) {
	var l int
	_ = l
	if m.UserDialog != nil {
		l = m.UserDialog.Size()
		n += 1 + l + sovDialogserver(uint64(l))
	}
	if m.UpdateScore {
		n += 2
	}
	return n
}

func (m *InsertUserDialogReply) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *UserDialog) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovDialogserver(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovDialogserver(uint64(m.WithId))
	}
	if m.Type != 0 {
		n += 1 + sovDialogserver(uint64(m.Type))
	}
	if m.Flags != 0 {
		n += 1 + sovDialogserver(uint64(m.Flags))
	}
	if m.Pinged {
		n += 2
	}
	if m.TopMessage != 0 {
		n += 1 + sovDialogserver(uint64(m.TopMessage))
	}
	if m.ReadInboxMaxId != 0 {
		n += 1 + sovDialogserver(uint64(m.ReadInboxMaxId))
	}
	if m.ReadOutboxMaxId != 0 {
		n += 1 + sovDialogserver(uint64(m.ReadOutboxMaxId))
	}
	if m.UnreadMetionsCount != 0 {
		n += 1 + sovDialogserver(uint64(m.UnreadMetionsCount))
	}
	if m.UnreadCount != 0 {
		n += 1 + sovDialogserver(uint64(m.UnreadCount))
	}
	if m.NotifySettingsFlags != 0 {
		n += 1 + sovDialogserver(uint64(m.NotifySettingsFlags))
	}
	if m.ShowPreviews {
		n += 2
	}
	if m.Silent {
		n += 2
	}
	if m.MuteUntil != 0 {
		n += 1 + sovDialogserver(uint64(m.MuteUntil))
	}
	l = len(m.Sound)
	if l > 0 {
		n += 1 + l + sovDialogserver(uint64(l))
	}
	if m.Pts != 0 {
		n += 2 + sovDialogserver(uint64(m.Pts))
	}
	l = len(m.Draft)
	if l > 0 {
		n += 2 + l + sovDialogserver(uint64(l))
	}
	if m.Readinpts != 0 {
		n += 2 + sovDialogserver(uint64(m.Readinpts))
	}
	if m.Readoutpts != 0 {
		n += 2 + sovDialogserver(uint64(m.Readoutpts))
	}
	if len(m.LinkUser) > 0 {
		l = 0
		for _, e := range m.LinkUser {
			l += sovDialogserver(uint64(e))
		}
		n += 2 + sovDialogserver(uint64(l)) + l
	}
	if m.InsertDate != 0 {
		n += 2 + sovDialogserver(uint64(m.InsertDate))
	}
	if m.UpdateDate != 0 {
		n += 2 + sovDialogserver(uint64(m.UpdateDate))
	}
	if m.Encry != 0 {
		n += 2 + sovDialogserver(uint64(m.Encry))
	}
	if m.Revoke {
		n += 3
	}
	return n
}

func sovDialogserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDialogserver(x uint64) (n int) {
	return sovDialogserver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PeerType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithID", wireType)
			}
			m.WithID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithType", wireType)
			}
			m.WithType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDialogserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReorderPinnedDialogReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReorderPinnedDialogReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReorderPinnedDialogReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerTypes = append(m.PeerTypes, &PeerType{})
			if err := m.PeerTypes[len(m.PeerTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDialogserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDialogserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReorderPinnedDialogReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReorderPinnedDialogReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReorderPinnedDialogReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDialogserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDialogserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RevokeUnreadReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RevokeUnreadReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RevokeUnreadReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithID", wireType)
			}
			m.WithID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithType", wireType)
			}
			m.WithType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDialogserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MsgIDs = append(m.MsgIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDialogserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDialogserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDialogserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MsgIDs = append(m.MsgIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDialogserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RevokeUnreadReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RevokeUnreadReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RevokeUnreadReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDialogserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDialogserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearDraftReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClearDraftReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClearDraftReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithID", wireType)
			}
			m.WithID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithType", wireType)
			}
			m.WithType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDialogserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearDraftReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClearDraftReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClearDraftReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDialogserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDialogserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserDialogsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserDialogsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserDialogsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithID", wireType)
			}
			m.WithID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithType", wireType)
			}
			m.WithType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDialogserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserDialogsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserDialogsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserDialogsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDialogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserDialogs = append(m.UserDialogs, &UserDialog{})
			if err := m.UserDialogs[len(m.UserDialogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDialogserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserDialogsV2Req) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserDialogsV2Req: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserDialogsV2Req: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithID", wireType)
			}
			m.WithID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithType", wireType)
			}
			m.WithType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetDate", wireType)
			}
			m.OffsetDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDialogserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserDialogsV2Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserDialogsV2Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserDialogsV2Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDialogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserDialogs = append(m.UserDialogs, &UserDialog{})
			if err := m.UserDialogs[len(m.UserDialogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDialogserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDialogPinnedReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDialogPinnedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDialogPinnedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithID", wireType)
			}
			m.WithID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithType", wireType)
			}
			m.WithType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pinned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pinned = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDialogserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDialogserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDialogPinnedReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDialogPinnedReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDialogPinnedReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDialogserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDialogserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteUserDialogReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteUserDialogReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteUserDialogReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithID", wireType)
			}
			m.WithID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithType", wireType)
			}
			m.WithType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDialogserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteUserDialogReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteUserDialogReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteUserDialogReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDialogserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDialogserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserPinedDialogReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserPinedDialogReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserPinedDialogReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDialogserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserPinedDialogReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserPinedDialogReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserPinedDialogReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDialogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserDialogs = append(m.UserDialogs, &UserDialog{})
			if err := m.UserDialogs[len(m.UserDialogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDialogserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDialogserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserDialogReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserDialogReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserDialogReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithID", wireType)
			}
			m.WithID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithType", wireType)
			}
			m.WithType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDialogserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserDialogReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserDialogReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserDialogReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDialog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserDialog == nil {
				m.UserDialog = &UserDialog{}
			}
			if err := m.UserDialog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDialogserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDialogserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserDialogReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserDialogReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserDialogReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithID", wireType)
			}
			m.WithID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithType", wireType)
			}
			m.WithType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopMessage", wireType)
			}
			m.TopMessage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopMessage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadInboxMaxId", wireType)
			}
			m.ReadInboxMaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadInboxMaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOutboxMaxId", wireType)
			}
			m.ReadOutboxMaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadOutboxMaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadMetionsCount", wireType)
			}
			m.UnreadMetionsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadMetionsCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadCount", wireType)
			}
			m.UnreadCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateDate", wireType)
			}
			m.UpdateDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDialogserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserDialogReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserDialogReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserDialogReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDialogserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDialogserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserAllDialogReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserAllDialogReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserAllDialogReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDialogserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDialogserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserAllDialogReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserAllDialogReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserAllDialogReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDialogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserDialogs = append(m.UserDialogs, &UserDialog{})
			if err := m.UserDialogs[len(m.UserDialogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDialogserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDialogserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InsertUserDialogReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InsertUserDialogReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InsertUserDialogReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDialog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDialogserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserDialog == nil {
				m.UserDialog = &UserDialog{}
			}
			if err := m.UserDialog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateScore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateScore = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDialogserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDialogserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InsertUserDialogReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InsertUserDialogReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InsertUserDialogReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDialogserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDialogserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserDialog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDialogserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pinged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pinged = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopMessage", wireType)
			}
			m.TopMessage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopMessage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadInboxMaxId", wireType)
			}
			m.ReadInboxMaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadInboxMaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOutboxMaxId", wireType)
			}
			m.ReadOutboxMaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadOutboxMaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadMetionsCount", wireType)
			}
			m.UnreadMetionsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadMetionsCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadCount", wireType)
			}
			m.UnreadCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifySettingsFlags", wireType)
			}
			m.NotifySettingsFlags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotifySettingsFlags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowPreviews", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowPreviews = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MuteUntil", wireType)
			}
			m.MuteUntil = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MuteUntil |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sound", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDialogserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sound = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Draft", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDialogserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Draft = append(m.Draft[:0], dAtA[iNdEx:postIndex]...)
			if m.Draft == nil {
				m.Draft = []byte{}
			}
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Readinpts", wireType)
			}
			m.Readinpts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Readinpts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Readoutpts", wireType)
			}
			m.Readoutpts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Readoutpts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDialogserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LinkUser = append(m.LinkUser, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDialogserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDialogserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDialogserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LinkUser = append(m.LinkUser, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkUser", wireType)
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsertDate", wireType)
			}
			m.InsertDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InsertDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateDate", wireType)
			}
			m.UpdateDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			m.Encry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revoke", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Revoke = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDialogserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDialogserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDialogserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDialogserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDialogserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDialogserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDialogserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDialogserver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDialogserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDialogserver   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("dialogserver.proto", fileDescriptorDialogserver) }

var fileDescriptorDialogserver = []byte{
	// 1063 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x5b, 0x8f, 0xdb, 0x44,
	0x14, 0x5e, 0x6f, 0x36, 0xdb, 0xe4, 0x6c, 0xf6, 0x36, 0xd9, 0xcb, 0x60, 0x20, 0x4d, 0x0d, 0x54,
	0x79, 0x61, 0x41, 0x0b, 0x0f, 0x88, 0x07, 0x24, 0x68, 0x00, 0x05, 0x35, 0x6d, 0xe4, 0x34, 0xe5,
	0x01, 0x84, 0xe4, 0xad, 0x27, 0xa9, 0x55, 0x63, 0xa7, 0xf6, 0x64, 0xdb, 0x88, 0x1f, 0xc2, 0x5f,
	0xe2, 0x91, 0x07, 0x24, 0xde, 0x10, 0xda, 0x5f, 0x82, 0xce, 0x9c, 0xc4, 0x97, 0x89, 0x37, 0x1b,
	0xda, 0xec, 0x9b, 0xcf, 0x65, 0xce, 0x6d, 0xbe, 0x73, 0x7c, 0x06, 0x98, 0xeb, 0x39, 0x7e, 0x38,
	0x8a, 0x45, 0x74, 0x29, 0xa2, 0xb3, 0x71, 0x14, 0xca, 0x90, 0xd5, 0xb2, 0x3c, 0xeb, 0x2b, 0xa8,
	0xf4, 0x84, 0x88, 0x9e, 0x4c, 0xc7, 0x82, 0x9d, 0xc0, 0xf6, 0x8f, 0x9e, 0x7c, 0xde, 0x69, 0x73,
	0xa3, 0x69, 0xb4, 0xca, 0xf6, 0x8c, 0x62, 0x26, 0x54, 0xf0, 0x0b, 0x75, 0xf8, 0xa6, 0x92, 0x24,
	0xb4, 0x35, 0x84, 0x13, 0x5b, 0x84, 0x91, 0x2b, 0xa2, 0x9e, 0x17, 0x04, 0xc2, 0x6d, 0x2b, 0xe3,
	0xb6, 0x78, 0x89, 0xd6, 0x06, 0xb1, 0x88, 0x52, 0x6b, 0x44, 0xb1, 0xcf, 0xa1, 0x3a, 0xf7, 0x18,
	0xf3, 0xcd, 0x66, 0xa9, 0xb5, 0x73, 0x7e, 0x72, 0x96, 0x8b, 0x73, 0x2e, 0xb6, 0x53, 0x45, 0xcb,
	0x04, 0x5e, 0xe8, 0x67, 0xec, 0x4f, 0xad, 0x09, 0xec, 0xdb, 0xe2, 0x32, 0x7c, 0x21, 0x06, 0x41,
	0x24, 0x1c, 0x77, 0x99, 0xf3, 0x34, 0xc5, 0xcd, 0x6b, 0x53, 0x2c, 0xe5, 0x53, 0xc4, 0x33, 0xdd,
	0x78, 0xd4, 0x69, 0xc7, 0x7c, 0xab, 0x59, 0xc2, 0x33, 0x44, 0x59, 0x75, 0x38, 0xcc, 0xbb, 0xc5,
	0x58, 0x7e, 0x82, 0xdd, 0x07, 0xbe, 0x70, 0xa2, 0x76, 0xe4, 0x0c, 0xe5, 0x9a, 0x23, 0xb1, 0x0e,
	0x61, 0x3f, 0x6b, 0x9c, 0x72, 0x3f, 0xfc, 0x5e, 0x48, 0xb4, 0x49, 0x15, 0x89, 0xd7, 0x9d, 0xfd,
	0x11, 0x94, 0x1f, 0x7a, 0xbf, 0x7a, 0x92, 0x6f, 0x29, 0x01, 0x11, 0xd6, 0x08, 0xea, 0xba, 0xdb,
	0xb1, 0x3f, 0x65, 0x5f, 0xc2, 0x4e, 0x86, 0xc7, 0x0d, 0x75, 0xbb, 0x3c, 0x7f, 0xbb, 0xa9, 0x82,
	0x9d, 0x55, 0x46, 0x47, 0x0f, 0xc2, 0x49, 0x20, 0x67, 0xb1, 0x11, 0x61, 0xfd, 0x6e, 0xe8, 0x9e,
	0x9e, 0x9e, 0xaf, 0x3b, 0xc5, 0x06, 0xc0, 0xe3, 0xe1, 0x30, 0x16, 0xb2, 0xed, 0x48, 0x31, 0xcb,
	0x33, 0xc3, 0x49, 0x4b, 0x50, 0xce, 0x96, 0xc0, 0x83, 0xe3, 0xc5, 0xc0, 0x6e, 0xa7, 0x08, 0xbf,
	0xc1, 0xf1, 0x60, 0xec, 0x3a, 0x52, 0x90, 0x1a, 0x75, 0xc0, 0x2d, 0xc0, 0x9c, 0x0c, 0xab, 0x0a,
	0x54, 0xec, 0x19, 0x65, 0xbd, 0x03, 0xa7, 0x45, 0xce, 0x11, 0x7c, 0x0e, 0xd4, 0xdb, 0xc2, 0x17,
	0x52, 0x64, 0xd2, 0x59, 0x33, 0xe4, 0x4f, 0xe1, 0x78, 0xd1, 0x05, 0xfa, 0xfe, 0x24, 0x29, 0x7f,
	0xcf, 0x5b, 0x65, 0xee, 0x58, 0x03, 0x38, 0x2d, 0x3a, 0xf0, 0x96, 0x37, 0x66, 0xfd, 0x02, 0x07,
	0x39, 0x18, 0xac, 0xbb, 0x00, 0x8f, 0x80, 0x69, 0xf6, 0x31, 0xe2, 0x2f, 0x00, 0x52, 0x96, 0xf2,
	0xb2, 0x2c, 0xe0, 0x8c, 0xae, 0xf5, 0xf7, 0x26, 0xd4, 0xe9, 0x3e, 0x6f, 0x2d, 0x66, 0x6c, 0xa8,
	0x27, 0xe1, 0xb8, 0x2b, 0xe2, 0xd8, 0x19, 0x25, 0x0d, 0x95, 0x72, 0xd8, 0x7d, 0xd8, 0xb3, 0x85,
	0xe3, 0x76, 0x82, 0x8b, 0xf0, 0x75, 0xd7, 0x79, 0xdd, 0x71, 0x67, 0x9d, 0xa5, 0x71, 0x59, 0x0b,
	0x07, 0xbb, 0xe3, 0x3e, 0x9e, 0xc8, 0x44, 0x71, 0x5b, 0x29, 0xea, 0x6c, 0x76, 0x06, 0x8c, 0xa6,
	0x70, 0x57, 0x48, 0x2f, 0x0c, 0x62, 0x6a, 0xa2, 0x3b, 0x4a, 0xb9, 0x40, 0xc2, 0x9a, 0xb0, 0x43,
	0x5c, 0x52, 0xac, 0x28, 0xc5, 0x2c, 0x8b, 0x1d, 0x40, 0xa9, 0x27, 0x63, 0x5e, 0x55, 0x12, 0xfc,
	0xc4, 0xac, 0x66, 0x8d, 0x80, 0x63, 0x02, 0x28, 0xab, 0x94, 0x83, 0x50, 0x5d, 0x2c, 0x2c, 0x42,
	0xf5, 0xe3, 0x64, 0x84, 0x7d, 0xed, 0xfb, 0x37, 0x03, 0xb5, 0x9f, 0x20, 0x3b, 0xa3, 0xfe, 0xb6,
	0x30, 0x7d, 0x09, 0xf5, 0x4e, 0x10, 0x8b, 0x48, 0x43, 0xea, 0x1b, 0xe3, 0x48, 0x55, 0x50, 0x65,
	0xdb, 0x7f, 0x16, 0x46, 0xb4, 0x17, 0x54, 0xec, 0x2c, 0x0b, 0xeb, 0xb1, 0xe8, 0x12, 0xeb, 0xf1,
	0x57, 0x39, 0xeb, 0x35, 0xa9, 0x83, 0x9b, 0xab, 0x83, 0x9b, 0x20, 0xcf, 0xcd, 0x21, 0xcf, 0x65,
	0x0c, 0xb6, 0x32, 0xa8, 0xdb, 0x9a, 0xff, 0xa5, 0xbe, 0xf3, 0x9d, 0x51, 0x3c, 0xff, 0x4b, 0x29,
	0x62, 0x36, 0xd2, 0x46, 0x82, 0xf0, 0x45, 0x23, 0x6d, 0x24, 0x5c, 0x0d, 0x9f, 0xdb, 0x2b, 0xe0,
	0xf3, 0xce, 0xaa, 0xf8, 0xac, 0xfc, 0x1f, 0x7c, 0x56, 0x57, 0xc5, 0x27, 0x2c, 0xe2, 0xf3, 0x53,
	0xa8, 0x3f, 0x0a, 0xa5, 0x37, 0x9c, 0xf6, 0x85, 0x94, 0x5e, 0x30, 0x8a, 0x29, 0xff, 0x1d, 0xa5,
	0x59, 0x24, 0x62, 0x16, 0xd4, 0xfa, 0xcf, 0xc3, 0x57, 0xbd, 0x48, 0x5c, 0x7a, 0xe2, 0x55, 0xcc,
	0x6b, 0xaa, 0x26, 0x39, 0x1e, 0x56, 0xac, 0xef, 0xf9, 0x22, 0x90, 0x7c, 0x97, 0x2a, 0x46, 0x14,
	0x7b, 0x0f, 0xaa, 0xdd, 0x89, 0x14, 0x83, 0x40, 0x7a, 0x3e, 0xdf, 0x53, 0x3e, 0x52, 0x06, 0x56,
	0xbf, 0x1f, 0x4e, 0x02, 0x97, 0xef, 0x37, 0x8d, 0x56, 0xd5, 0x26, 0x62, 0xde, 0x41, 0x07, 0x69,
	0x07, 0x1d, 0x41, 0x59, 0xad, 0x2e, 0xfc, 0xb0, 0x69, 0xb4, 0x6a, 0x36, 0x11, 0x68, 0x1b, 0xcb,
	0xe5, 0x05, 0x63, 0x19, 0x73, 0x46, 0xb6, 0x13, 0x06, 0xde, 0x15, 0x12, 0xe1, 0x44, 0xa2, 0xb8,
	0x4e, 0x77, 0x95, 0x72, 0x70, 0x0e, 0x3d, 0xf4, 0x82, 0x17, 0x88, 0x19, 0x7e, 0xa4, 0xf6, 0xb3,
	0x84, 0xc6, 0xb3, 0x84, 0x40, 0xd5, 0xb1, 0xc7, 0x4d, 0xa3, 0x55, 0xb2, 0x33, 0x1c, 0xad, 0xa3,
	0x4f, 0x48, 0x9e, 0x72, 0x30, 0xde, 0x6f, 0x83, 0x67, 0xd1, 0x94, 0x9f, 0x12, 0xaa, 0x14, 0x81,
	0x35, 0xa2, 0xbd, 0x8f, 0x73, 0xaa, 0x11, 0x51, 0xe7, 0xff, 0x54, 0xa0, 0x46, 0x90, 0xee, 0xab,
	0xce, 0x61, 0x3f, 0xc3, 0x81, 0xde, 0x00, 0xec, 0x5e, 0xbe, 0xb9, 0x0a, 0x7a, 0xd2, 0xfc, 0xe0,
	0x26, 0x15, 0xec, 0xa1, 0x0d, 0xb4, 0xae, 0x8f, 0x1b, 0xdd, 0x7a, 0xc1, 0x9c, 0xd7, 0xad, 0x17,
	0x4f, 0xac, 0x0d, 0xd6, 0x87, 0xdd, 0xdc, 0x6f, 0x87, 0x35, 0xf2, 0xe7, 0xf4, 0x7f, 0x9e, 0xd9,
	0x5c, 0x2a, 0x4f, 0x42, 0xd6, 0x27, 0x9b, 0x1e, 0x72, 0xc1, 0xa0, 0xd4, 0x43, 0x2e, 0x1c, 0x8e,
	0xd6, 0x06, 0xbb, 0x48, 0xfe, 0x94, 0x99, 0x1f, 0x3c, 0x2b, 0x3e, 0x9c, 0xdf, 0x19, 0xcc, 0x8f,
	0x6e, 0x56, 0x4a, 0x32, 0xd0, 0xd7, 0x11, 0x3d, 0x83, 0x82, 0x8d, 0x48, 0xcf, 0xa0, 0x78, 0xa3,
	0x51, 0x19, 0x2c, 0xae, 0x5a, 0xac, 0xf0, 0xc6, 0xb4, 0x4d, 0x50, 0xcf, 0xe0, 0xba, 0x8d, 0x6d,
	0x83, 0x3d, 0x85, 0xbd, 0xfc, 0xda, 0xca, 0xee, 0x2e, 0xb9, 0x39, 0x7c, 0x4e, 0x98, 0xf7, 0x96,
	0x2b, 0xe8, 0x77, 0x9b, 0xac, 0xc3, 0x6c, 0xe9, 0x41, 0xb5, 0xc7, 0x5f, 0x73, 0xb7, 0xf9, 0x8d,
	0xda, 0xda, 0x60, 0x3f, 0x00, 0xa4, 0x2f, 0x1f, 0xf6, 0x6e, 0xfe, 0x50, 0xee, 0xc1, 0x65, 0xbe,
	0x7f, 0xbd, 0x90, 0x6c, 0xf5, 0xa0, 0x96, 0x7d, 0xb7, 0x31, 0xed, 0x80, 0xf6, 0x94, 0x34, 0xef,
	0x2e, 0x13, 0x93, 0x45, 0x01, 0xf5, 0x82, 0xc7, 0x29, 0xfb, 0x50, 0x3f, 0x59, 0xf4, 0x4e, 0x36,
	0xef, 0xaf, 0xa0, 0xa5, 0xdc, 0x7c, 0x53, 0xfb, 0xe3, 0xaa, 0x61, 0xfc, 0x79, 0xd5, 0x30, 0xfe,
	0xbd, 0x6a, 0x18, 0x17, 0xdb, 0xea, 0x39, 0xff, 0xd9, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe4,
	0xaa, 0x45, 0x6a, 0xe4, 0x0f, 0x00, 0x00,
}
