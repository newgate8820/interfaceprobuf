// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: dialogserver.proto

package dialogserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DialogServerClient is the client API for DialogServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DialogServerClient interface {
	// InsertUserDialog 新增对话框
	InsertUserDialog(ctx context.Context, in *InsertUserDialogReq, opts ...grpc.CallOption) (*InsertUserDialogReply, error)
	// UpdateUserDialog 更新对话框
	UpdateUserDialog(ctx context.Context, in *UpdateUserDialogReq, opts ...grpc.CallOption) (*UpdateUserDialogReply, error)
	// GetUserDialog 获取一个对话框信息
	GetUserDialog(ctx context.Context, in *GetUserDialogReq, opts ...grpc.CallOption) (*GetUserDialogReply, error)
	// GetUserAllDialog 获取用户所有对话框
	GetUserAllDialog(ctx context.Context, in *GetUserAllDialogReq, opts ...grpc.CallOption) (*GetUserAllDialogReply, error)
	// GetUserPinedDialog 获取置顶dialog
	GetUserPinedDialog(ctx context.Context, in *GetUserPinedDialogReq, opts ...grpc.CallOption) (*GetUserPinedDialogReply, error)
	// DeleteUserDialog 删除对话框
	DeleteUserDialog(ctx context.Context, in *DeleteUserDialogReq, opts ...grpc.CallOption) (*DeleteUserDialogReply, error)
	// UpdateDialogPinned 置顶对话框或者取消对话框置顶
	UpdateDialogPinned(ctx context.Context, in *UpdateDialogPinnedReq, opts ...grpc.CallOption) (*UpdateDialogPinnedReply, error)
	// GetUserDialogs 分页获取对话框列表
	GetUserDialogs(ctx context.Context, in *GetUserDialogsReq, opts ...grpc.CallOption) (*GetUserDialogsReply, error)
	// GetUserDialogsV2 通过offsetDate去获取dialog
	GetUserDialogsV2(ctx context.Context, in *GetUserDialogsV2Req, opts ...grpc.CallOption) (*GetUserDialogsV2Reply, error)
	// ClearDraft 清除草稿
	ClearDraft(ctx context.Context, in *ClearDraftReq, opts ...grpc.CallOption) (*ClearDraftReply, error)
	// RevokeUnread 删除消息时撤销未读
	RevokeUnread(ctx context.Context, in *RevokeUnreadReq, opts ...grpc.CallOption) (*RevokeUnreadReply, error)
	// ReorderPinnedDiaog 置顶对话框重排序
	ReorderPinnedDialog(ctx context.Context, in *ReorderPinnedDialogReq, opts ...grpc.CallOption) (*ReorderPinnedDialogReply, error)
}

type dialogServerClient struct {
	cc grpc.ClientConnInterface
}

func NewDialogServerClient(cc grpc.ClientConnInterface) DialogServerClient {
	return &dialogServerClient{cc}
}

func (c *dialogServerClient) InsertUserDialog(ctx context.Context, in *InsertUserDialogReq, opts ...grpc.CallOption) (*InsertUserDialogReply, error) {
	out := new(InsertUserDialogReply)
	err := c.cc.Invoke(ctx, "/dialogserver.DialogServer/InsertUserDialog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServerClient) UpdateUserDialog(ctx context.Context, in *UpdateUserDialogReq, opts ...grpc.CallOption) (*UpdateUserDialogReply, error) {
	out := new(UpdateUserDialogReply)
	err := c.cc.Invoke(ctx, "/dialogserver.DialogServer/UpdateUserDialog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServerClient) GetUserDialog(ctx context.Context, in *GetUserDialogReq, opts ...grpc.CallOption) (*GetUserDialogReply, error) {
	out := new(GetUserDialogReply)
	err := c.cc.Invoke(ctx, "/dialogserver.DialogServer/GetUserDialog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServerClient) GetUserAllDialog(ctx context.Context, in *GetUserAllDialogReq, opts ...grpc.CallOption) (*GetUserAllDialogReply, error) {
	out := new(GetUserAllDialogReply)
	err := c.cc.Invoke(ctx, "/dialogserver.DialogServer/GetUserAllDialog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServerClient) GetUserPinedDialog(ctx context.Context, in *GetUserPinedDialogReq, opts ...grpc.CallOption) (*GetUserPinedDialogReply, error) {
	out := new(GetUserPinedDialogReply)
	err := c.cc.Invoke(ctx, "/dialogserver.DialogServer/GetUserPinedDialog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServerClient) DeleteUserDialog(ctx context.Context, in *DeleteUserDialogReq, opts ...grpc.CallOption) (*DeleteUserDialogReply, error) {
	out := new(DeleteUserDialogReply)
	err := c.cc.Invoke(ctx, "/dialogserver.DialogServer/DeleteUserDialog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServerClient) UpdateDialogPinned(ctx context.Context, in *UpdateDialogPinnedReq, opts ...grpc.CallOption) (*UpdateDialogPinnedReply, error) {
	out := new(UpdateDialogPinnedReply)
	err := c.cc.Invoke(ctx, "/dialogserver.DialogServer/UpdateDialogPinned", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServerClient) GetUserDialogs(ctx context.Context, in *GetUserDialogsReq, opts ...grpc.CallOption) (*GetUserDialogsReply, error) {
	out := new(GetUserDialogsReply)
	err := c.cc.Invoke(ctx, "/dialogserver.DialogServer/GetUserDialogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServerClient) GetUserDialogsV2(ctx context.Context, in *GetUserDialogsV2Req, opts ...grpc.CallOption) (*GetUserDialogsV2Reply, error) {
	out := new(GetUserDialogsV2Reply)
	err := c.cc.Invoke(ctx, "/dialogserver.DialogServer/GetUserDialogsV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServerClient) ClearDraft(ctx context.Context, in *ClearDraftReq, opts ...grpc.CallOption) (*ClearDraftReply, error) {
	out := new(ClearDraftReply)
	err := c.cc.Invoke(ctx, "/dialogserver.DialogServer/ClearDraft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServerClient) RevokeUnread(ctx context.Context, in *RevokeUnreadReq, opts ...grpc.CallOption) (*RevokeUnreadReply, error) {
	out := new(RevokeUnreadReply)
	err := c.cc.Invoke(ctx, "/dialogserver.DialogServer/RevokeUnread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServerClient) ReorderPinnedDialog(ctx context.Context, in *ReorderPinnedDialogReq, opts ...grpc.CallOption) (*ReorderPinnedDialogReply, error) {
	out := new(ReorderPinnedDialogReply)
	err := c.cc.Invoke(ctx, "/dialogserver.DialogServer/ReorderPinnedDialog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DialogServerServer is the server API for DialogServer service.
// All implementations must embed UnimplementedDialogServerServer
// for forward compatibility
type DialogServerServer interface {
	// InsertUserDialog 新增对话框
	InsertUserDialog(context.Context, *InsertUserDialogReq) (*InsertUserDialogReply, error)
	// UpdateUserDialog 更新对话框
	UpdateUserDialog(context.Context, *UpdateUserDialogReq) (*UpdateUserDialogReply, error)
	// GetUserDialog 获取一个对话框信息
	GetUserDialog(context.Context, *GetUserDialogReq) (*GetUserDialogReply, error)
	// GetUserAllDialog 获取用户所有对话框
	GetUserAllDialog(context.Context, *GetUserAllDialogReq) (*GetUserAllDialogReply, error)
	// GetUserPinedDialog 获取置顶dialog
	GetUserPinedDialog(context.Context, *GetUserPinedDialogReq) (*GetUserPinedDialogReply, error)
	// DeleteUserDialog 删除对话框
	DeleteUserDialog(context.Context, *DeleteUserDialogReq) (*DeleteUserDialogReply, error)
	// UpdateDialogPinned 置顶对话框或者取消对话框置顶
	UpdateDialogPinned(context.Context, *UpdateDialogPinnedReq) (*UpdateDialogPinnedReply, error)
	// GetUserDialogs 分页获取对话框列表
	GetUserDialogs(context.Context, *GetUserDialogsReq) (*GetUserDialogsReply, error)
	// GetUserDialogsV2 通过offsetDate去获取dialog
	GetUserDialogsV2(context.Context, *GetUserDialogsV2Req) (*GetUserDialogsV2Reply, error)
	// ClearDraft 清除草稿
	ClearDraft(context.Context, *ClearDraftReq) (*ClearDraftReply, error)
	// RevokeUnread 删除消息时撤销未读
	RevokeUnread(context.Context, *RevokeUnreadReq) (*RevokeUnreadReply, error)
	// ReorderPinnedDiaog 置顶对话框重排序
	ReorderPinnedDialog(context.Context, *ReorderPinnedDialogReq) (*ReorderPinnedDialogReply, error)
	mustEmbedUnimplementedDialogServerServer()
}

// UnimplementedDialogServerServer must be embedded to have forward compatible implementations.
type UnimplementedDialogServerServer struct {
}

func (UnimplementedDialogServerServer) InsertUserDialog(context.Context, *InsertUserDialogReq) (*InsertUserDialogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertUserDialog not implemented")
}
func (UnimplementedDialogServerServer) UpdateUserDialog(context.Context, *UpdateUserDialogReq) (*UpdateUserDialogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserDialog not implemented")
}
func (UnimplementedDialogServerServer) GetUserDialog(context.Context, *GetUserDialogReq) (*GetUserDialogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDialog not implemented")
}
func (UnimplementedDialogServerServer) GetUserAllDialog(context.Context, *GetUserAllDialogReq) (*GetUserAllDialogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAllDialog not implemented")
}
func (UnimplementedDialogServerServer) GetUserPinedDialog(context.Context, *GetUserPinedDialogReq) (*GetUserPinedDialogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPinedDialog not implemented")
}
func (UnimplementedDialogServerServer) DeleteUserDialog(context.Context, *DeleteUserDialogReq) (*DeleteUserDialogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserDialog not implemented")
}
func (UnimplementedDialogServerServer) UpdateDialogPinned(context.Context, *UpdateDialogPinnedReq) (*UpdateDialogPinnedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDialogPinned not implemented")
}
func (UnimplementedDialogServerServer) GetUserDialogs(context.Context, *GetUserDialogsReq) (*GetUserDialogsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDialogs not implemented")
}
func (UnimplementedDialogServerServer) GetUserDialogsV2(context.Context, *GetUserDialogsV2Req) (*GetUserDialogsV2Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDialogsV2 not implemented")
}
func (UnimplementedDialogServerServer) ClearDraft(context.Context, *ClearDraftReq) (*ClearDraftReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearDraft not implemented")
}
func (UnimplementedDialogServerServer) RevokeUnread(context.Context, *RevokeUnreadReq) (*RevokeUnreadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeUnread not implemented")
}
func (UnimplementedDialogServerServer) ReorderPinnedDialog(context.Context, *ReorderPinnedDialogReq) (*ReorderPinnedDialogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReorderPinnedDialog not implemented")
}
func (UnimplementedDialogServerServer) mustEmbedUnimplementedDialogServerServer() {}

// UnsafeDialogServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DialogServerServer will
// result in compilation errors.
type UnsafeDialogServerServer interface {
	mustEmbedUnimplementedDialogServerServer()
}

func RegisterDialogServerServer(s grpc.ServiceRegistrar, srv DialogServerServer) {
	s.RegisterService(&DialogServer_ServiceDesc, srv)
}

func _DialogServer_InsertUserDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertUserDialogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServerServer).InsertUserDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialogserver.DialogServer/InsertUserDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServerServer).InsertUserDialog(ctx, req.(*InsertUserDialogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogServer_UpdateUserDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserDialogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServerServer).UpdateUserDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialogserver.DialogServer/UpdateUserDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServerServer).UpdateUserDialog(ctx, req.(*UpdateUserDialogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogServer_GetUserDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDialogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServerServer).GetUserDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialogserver.DialogServer/GetUserDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServerServer).GetUserDialog(ctx, req.(*GetUserDialogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogServer_GetUserAllDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAllDialogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServerServer).GetUserAllDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialogserver.DialogServer/GetUserAllDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServerServer).GetUserAllDialog(ctx, req.(*GetUserAllDialogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogServer_GetUserPinedDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPinedDialogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServerServer).GetUserPinedDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialogserver.DialogServer/GetUserPinedDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServerServer).GetUserPinedDialog(ctx, req.(*GetUserPinedDialogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogServer_DeleteUserDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserDialogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServerServer).DeleteUserDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialogserver.DialogServer/DeleteUserDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServerServer).DeleteUserDialog(ctx, req.(*DeleteUserDialogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogServer_UpdateDialogPinned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDialogPinnedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServerServer).UpdateDialogPinned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialogserver.DialogServer/UpdateDialogPinned",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServerServer).UpdateDialogPinned(ctx, req.(*UpdateDialogPinnedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogServer_GetUserDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDialogsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServerServer).GetUserDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialogserver.DialogServer/GetUserDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServerServer).GetUserDialogs(ctx, req.(*GetUserDialogsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogServer_GetUserDialogsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDialogsV2Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServerServer).GetUserDialogsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialogserver.DialogServer/GetUserDialogsV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServerServer).GetUserDialogsV2(ctx, req.(*GetUserDialogsV2Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogServer_ClearDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearDraftReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServerServer).ClearDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialogserver.DialogServer/ClearDraft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServerServer).ClearDraft(ctx, req.(*ClearDraftReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogServer_RevokeUnread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeUnreadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServerServer).RevokeUnread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialogserver.DialogServer/RevokeUnread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServerServer).RevokeUnread(ctx, req.(*RevokeUnreadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogServer_ReorderPinnedDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReorderPinnedDialogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServerServer).ReorderPinnedDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialogserver.DialogServer/ReorderPinnedDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServerServer).ReorderPinnedDialog(ctx, req.(*ReorderPinnedDialogReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DialogServer_ServiceDesc is the grpc.ServiceDesc for DialogServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DialogServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dialogserver.DialogServer",
	HandlerType: (*DialogServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertUserDialog",
			Handler:    _DialogServer_InsertUserDialog_Handler,
		},
		{
			MethodName: "UpdateUserDialog",
			Handler:    _DialogServer_UpdateUserDialog_Handler,
		},
		{
			MethodName: "GetUserDialog",
			Handler:    _DialogServer_GetUserDialog_Handler,
		},
		{
			MethodName: "GetUserAllDialog",
			Handler:    _DialogServer_GetUserAllDialog_Handler,
		},
		{
			MethodName: "GetUserPinedDialog",
			Handler:    _DialogServer_GetUserPinedDialog_Handler,
		},
		{
			MethodName: "DeleteUserDialog",
			Handler:    _DialogServer_DeleteUserDialog_Handler,
		},
		{
			MethodName: "UpdateDialogPinned",
			Handler:    _DialogServer_UpdateDialogPinned_Handler,
		},
		{
			MethodName: "GetUserDialogs",
			Handler:    _DialogServer_GetUserDialogs_Handler,
		},
		{
			MethodName: "GetUserDialogsV2",
			Handler:    _DialogServer_GetUserDialogsV2_Handler,
		},
		{
			MethodName: "ClearDraft",
			Handler:    _DialogServer_ClearDraft_Handler,
		},
		{
			MethodName: "RevokeUnread",
			Handler:    _DialogServer_RevokeUnread_Handler,
		},
		{
			MethodName: "ReorderPinnedDialog",
			Handler:    _DialogServer_ReorderPinnedDialog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dialogserver.proto",
}
