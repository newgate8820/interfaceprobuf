// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: imuinfoserver.proto

package pbimuinfoserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServerServiceClient is the client API for UserServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServerServiceClient interface {
	// 邀请码绑定
	InviteCodeBind(ctx context.Context, in *InviteCodeBindReq, opts ...grpc.CallOption) (*InviteCodeBindRsp, error)
	// 我的团队
	MyTeam(ctx context.Context, in *MyTeamReq, opts ...grpc.CallOption) (*MyTeamRsp, error)
	// 实名认证材料提交
	RealNameCertification(ctx context.Context, in *RealNameCertificationReq, opts ...grpc.CallOption) (*RealNameCertificationRsp, error)
	// 实名认证结果反馈
	GetCertificationResult(ctx context.Context, in *GetCertificationResultReq, opts ...grpc.CallOption) (*GetCertificationResultRsp, error)
	// 实名认证后台审核
	VerifyCertification(ctx context.Context, in *VerifyCertificationReq, opts ...grpc.CallOption) (*VerifyCertificationRsp, error)
	// 实名认证后台审核
	UpdateUserDetailV1(ctx context.Context, in *UpdateUserDetailV1Req, opts ...grpc.CallOption) (*UpdateUserDetailV1Rsp, error)
	// 添加电话部好友
	AddPhoneBookContacts(ctx context.Context, in *AddPhoneBookContactsReq, opts ...grpc.CallOption) (*AddPhoneBookContactsReply, error)
	SignUpV1(ctx context.Context, in *SignUpV1Req, opts ...grpc.CallOption) (*SignUpV1Reply, error)
	// 更新用户类别，标记
	UpdateUserTypeLable(ctx context.Context, in *UpdateUserTypeLableReq, opts ...grpc.CallOption) (*UpdateUserTypeLableResult, error)
	// 更新用户年龄，性别，地理位置等等
	UpdateUserDetail(ctx context.Context, in *UpdateUserDetailReq, opts ...grpc.CallOption) (*UpdateUserDetailResult, error)
	UpdateUserDetailBirthday(ctx context.Context, in *UpdateUserDetailBirthdayReq, opts ...grpc.CallOption) (*UpdateUserDetailBirthdayResult, error)
	SetUserDetail(ctx context.Context, in *SetUserDetailReq, opts ...grpc.CallOption) (*SetUserDetailResult, error)
	// 检查用户是否已经创建帐号
	CheckUserHasPay(ctx context.Context, in *CheckUserHasPayReq, opts ...grpc.CallOption) (*CheckUserHasPayResp, error)
	// 更新用户已经开通支付帐号
	UpdateUserHasPay(ctx context.Context, in *UpdateUserHasPayReq, opts ...grpc.CallOption) (*UpdateUserHasPayResp, error)
	// 获取viplog 电话号码列表(仅供ip调用获取viplog 的电话号码们)
	GetViplogPhoneList(ctx context.Context, in *GetViplogPhoneListReq, opts ...grpc.CallOption) (*GetViplogPhoneListResp, error)
	// ********************************用户信息
	// 注册指定用户的接口()
	RegisterUserInfo(ctx context.Context, in *RegisterUserInfoReq, opts ...grpc.CallOption) (*RegisterUserInfoResult, error)
	// 获取用户信息
	GetUserInfoById(ctx context.Context, in *GetUserInfoByIdReq, opts ...grpc.CallOption) (*GetUserInfoResult, error)
	// 批量根据用户ID来获取用户信息selfId 代表自己的Id userId 代表需要获取的用户的Id
	GetUserInfoByIdArr(ctx context.Context, in *GetUserInfoByIdArrReq, opts ...grpc.CallOption) (*GetUserInfoByIdArrResult, error)
	// 获取账号的销毁时间
	GetUserExpierById(ctx context.Context, in *GetUserExpireByIdReq, opts ...grpc.CallOption) (*GetUserExpireByIdResult, error)
	// 通过用户电话号码获取用户基本信息
	GetUserInfoByPhone(ctx context.Context, in *GetUserByphone, opts ...grpc.CallOption) (*GetUserInfoResult, error)
	// 通过username获取用户基本信息
	GetUserInfoByUsername(ctx context.Context, in *GetUserByUsername, opts ...grpc.CallOption) (*GetUserInfoResult, error)
	// 更新用户头像
	UpdateUserPhoto(ctx context.Context, in *UpdatePhotoInfoReq, opts ...grpc.CallOption) (*UpdateUserPhotoResult, error)
	// 获取用户头像
	GetUserPhoto(ctx context.Context, in *GetPhotoInfoReq, opts ...grpc.CallOption) (*GetUserPhotoResult, error)
	// 更新用户用户status
	UpdateUserStatus(ctx context.Context, in *StatusReq, opts ...grpc.CallOption) (*StatusResult, error)
	// 更新用户用户status v2
	UpdateUserStatusV2(ctx context.Context, in *StatusReq, opts ...grpc.CallOption) (*StatusResult, error)
	// 设置用户账号销毁时间
	UpdateUserExpire(ctx context.Context, in *UpdateExpireReq, opts ...grpc.CallOption) (*UpdateExpireResult, error)
	// 用户DC的迁移
	UpdateUserCluster(ctx context.Context, in *UserClusterChange, opts ...grpc.CallOption) (*UserClusterChangeResult, error)
	// 更新用户的username
	UpdateUserName(ctx context.Context, in *UpdateuserNameReq, opts ...grpc.CallOption) (*UpdateuserNameResult, error)
	// 更新用户的扩展字段
	UpdateUserLevel(ctx context.Context, in *UpdateUserLevelReq, opts ...grpc.CallOption) (*UpdateUserLevelResult, error)
	// 更新用户的扩展字段
	UpdateUserExtion(ctx context.Context, in *UpdateUserExtionReq, opts ...grpc.CallOption) (*UpdateUserExtionResult, error)
	// 校验用户名称是否被占用
	CheckUserNameOccupied(ctx context.Context, in *CheckUserNameOccupiedReq, opts ...grpc.CallOption) (*CheckUserNameOccupiedResult, error)
	// 检查电话号码是否已经注册
	CheckPhoneRegister(ctx context.Context, in *CheckPhoneRegisterReq, opts ...grpc.CallOption) (*CheckPhoneRegisterResult, error)
	// 账号(标记删除)
	DeleteUserInfoById(ctx context.Context, in *DeleteAccountByIdReq, opts ...grpc.CallOption) (*DelAccountResult, error)
	// 更新机器人相关信息
	UpdateBotInfo(ctx context.Context, in *BotUpdateInfo, opts ...grpc.CallOption) (*BotUpdateInfoResult, error)
	// 更新机器人头像
	UpdateBotPic(ctx context.Context, in *UpdateBotPicRequest, opts ...grpc.CallOption) (*UpdateBotPicResult, error)
	// 检测用户哈希是否合法
	CheckUserAccessHashValid(ctx context.Context, in *CheckUserAccessHashValidReq, opts ...grpc.CallOption) (*CheckUserAccessHashValidResult, error)
	// 根据id获取正在进行的电话update信息
	QueryUpdatesByUserid(ctx context.Context, in *QueryUpdatesByUseridReq, opts ...grpc.CallOption) (*QueryUpdatesByUseridResult, error)
	// 获取用户信息
	GetFullUser(ctx context.Context, in *GetFullUserReq, opts ...grpc.CallOption) (*GetFullUserResult, error)
	// 添加手机号码更换历史记录
	HistoryChangePhoneAdd(ctx context.Context, in *HistoryChangePhoneAddReq, opts ...grpc.CallOption) (*HistoryChangePhoneAddResult, error)
	// 更换手机
	AccountChangePhone(ctx context.Context, in *ChangePhoneReq, opts ...grpc.CallOption) (*ChangePhoneResult, error)
	// 更新firstName,lastName和about
	UpdateUserProfile(ctx context.Context, in *UpdateUserProfileReq, opts ...grpc.CallOption) (*UpdateUserProfileResult, error)
	// 联系人搜索用户
	SearchUserByPhone(ctx context.Context, in *SearchUserByPhoneReq, opts ...grpc.CallOption) (*SearchUserByPhoneResult, error)
	ContactsGetCommonContacts(ctx context.Context, in *ContactsGetCommonContactsReq, opts ...grpc.CallOption) (*ContactsGetCommonContactsResult, error)
	SearchUserByNickname(ctx context.Context, in *SearchUserByNicknameReq, opts ...grpc.CallOption) (*SearchUserByNicknameResult, error)
	// CMD命令,删除用户名称
	DeleteUserUsername(ctx context.Context, in *DeleteUserUsernameReq, opts ...grpc.CallOption) (*DeleteUserUsernameResult, error)
	// 补充 更新机器人相关信息
	UpdateBotInfoSupp(ctx context.Context, in *UpdateBotInfoSuppReq, opts ...grpc.CallOption) (*UpdateBotInfoSuppResult, error)
	// 根据用户Id来获取用户信息selfId 代表自己的Id userId 代表需要获取的用户的Id
	CheckIsMuteContact(ctx context.Context, in *CheckIsMuteContactReq, opts ...grpc.CallOption) (*CheckIsMuteContactResult, error)
	// ********************************联系人的相关接口
	// 删除单个联系人的接口
	ContactsDelContact(ctx context.Context, in *DelContactReq, opts ...grpc.CallOption) (*DelContactResult, error)
	// 接受添加联系人的接口
	AcceptContact(ctx context.Context, in *AcceptContactReq, opts ...grpc.CallOption) (*AcceptContactResult, error)
	// 批量删除用户联系人的接口
	ContactsDelContactsArr(ctx context.Context, in *DelContactArrReq, opts ...grpc.CallOption) (*DelContactArrResult, error)
	// 重置用户联系人信息，删除所有联系人
	CmdResetUserContacts(ctx context.Context, in *CmdResetUserContactsReq, opts ...grpc.CallOption) (*CmdResetUserContactsResult, error)
	// 获取用户联系人列表
	ContactsGetContacts(ctx context.Context, in *ContatsGetContactsReq, opts ...grpc.CallOption) (*ContatsGetContactsResult, error)
	// 获取用户联系人列表V1
	ContactsGetContactsV1(ctx context.Context, in *ContactsGetContactsV1Req, opts ...grpc.CallOption) (*ContactsGetContactsV1Result, error)
	// 获取联系人列表
	GetContactsV1(ctx context.Context, in *GetContactsV1Req, opts ...grpc.CallOption) (*GetContactsV1Result, error)
	// 获取用户联系人userid列表
	ContactsGetContactsId(ctx context.Context, in *ContactsGetContactsIdReq, opts ...grpc.CallOption) (*ContactsGetContactsIdResult, error)
	// 批量导入联系人的操作(具体业务逻辑在用户服务来实现)
	ImportContacts(ctx context.Context, in *ContactsImportPhoneContactsReq, opts ...grpc.CallOption) (*ContactsImportPhoneContactsResult, error)
	// 获取自己所有联系人的在线状态
	GetContactsStatus(ctx context.Context, in *GetContactsStatusReq, opts ...grpc.CallOption) (*GetContactsStatusResult, error)
	// 检测自己是否是对方的联系人
	CheckSelfIsContact(ctx context.Context, in *CheckSelfIsContactReq, opts ...grpc.CallOption) (*CheckSelfIsContactResult, error)
	// 检测是否双向好友
	CheckIsMutualContact(ctx context.Context, in *CheckIsMutualContactReq, opts ...grpc.CallOption) (*CheckIsMutualContactResult, error)
	// ************用户关联表 用户在线状态的更新*******************
	// 创建dialog的增加用户关系（单聊）
	DialogUserRelation(ctx context.Context, in *AddRelationIdInfo, opts ...grpc.CallOption) (*AddRelationIdInfoResult, error)
	// 删除dialog的剔除用户关系
	DelDialogUserRelation(ctx context.Context, in *DelRelationIdInfo, opts ...grpc.CallOption) (*DelRelationIdInfoResult, error)
	// 上传保存联系人
	UploadContacts(ctx context.Context, in *UploadContactsReq, opts ...grpc.CallOption) (*UploadContactsResult, error)
	// 联系人申请
	ApplyContact(ctx context.Context, in *ApplyContactReq, opts ...grpc.CallOption) (*ApplyContactResult, error)
	ContactsGreetApply(ctx context.Context, in *ContactsGreetApplyReq, opts ...grpc.CallOption) (*ContactsGreetApplyResult, error)
	// 确认添加申请
	VerifyContact(ctx context.Context, in *VerifyContactReq, opts ...grpc.CallOption) (*VerifyContactResult, error)
	// 获取被添加用户申请列表
	GetAppliedContacts(ctx context.Context, in *GetAppliedContactsReq, opts ...grpc.CallOption) (*GetAppliedContactsResult, error)
	// 删除申请列表
	DeleteAppliedHistoryContact(ctx context.Context, in *DeleteAppliedHistoryContactReq, opts ...grpc.CallOption) (*DeleteAppliedHistoryContactResult, error)
	// 删除一些申请
	DeleteAppliedSomeContact(ctx context.Context, in *DeleteAppliedSomeContactReq, opts ...grpc.CallOption) (*DeleteAppliedSomeContactResult, error)
	DeleteReceiveApplies(ctx context.Context, in *DeleteReceiveAppliesReq, opts ...grpc.CallOption) (*DeleteReceiveAppliesResult, error)
	// 设置申请为已读
	ReadAppliedHistory(ctx context.Context, in *ReadAppliedHistoryReq, opts ...grpc.CallOption) (*ReadAppliedHistoryResult, error)
	GetContactsApplyDifference(ctx context.Context, in *GetContactsApplyDifferenceReq, opts ...grpc.CallOption) (*GetContactsApplyDifferenceResult, error)
	GetContactsApplyDifferenceV2(ctx context.Context, in *GetContactsApplyDifferenceV2Req, opts ...grpc.CallOption) (*GetContactsApplyDifferenceV2Result, error)
	// 检查搜索用户数量是否到达上线
	CheckSearchUserCountLimited(ctx context.Context, in *CheckSearchUserCountLimitedReq, opts ...grpc.CallOption) (*CheckSearchUserCountLimitedResult, error)
	// **********联系人分组***************
	CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResult, error)
	SetUserGroup(ctx context.Context, in *SetUserGroupReq, opts ...grpc.CallOption) (*SetUserGroupResult, error)
	ChangeGroupName(ctx context.Context, in *ChangeGroupNameReq, opts ...grpc.CallOption) (*ChangeGroupNameResult, error)
	ChangeGroupOrder(ctx context.Context, in *ChangeGroupOrderReq, opts ...grpc.CallOption) (*ChangeGroupOrderResult, error)
	DeleteGroup(ctx context.Context, in *DeleteGroupReq, opts ...grpc.CallOption) (*DeleteGroupResult, error)
	DeleteGroups(ctx context.Context, in *DeleteGroupsReq, opts ...grpc.CallOption) (*DeleteGroupsResult, error)
	// **********用户黑名单的管理 ***************
	// 拉黑用户
	BlockedUser(ctx context.Context, in *BlockeduserReq, opts ...grpc.CallOption) (*BlockeduserResult, error)
	// 移除拉黑的用户
	ContactUnBlockedUser(ctx context.Context, in *ContactUnblockedReq, opts ...grpc.CallOption) (*BlockeduserResult, error)
	// 获取用户的黑明单列表
	ContactsGetBlocked(ctx context.Context, in *ContactsGetBlockedReq, opts ...grpc.CallOption) (*ContactsGetBlockedResult, error)
	// 检测用户是否是黑名单
	CheckUserIsBlocked(ctx context.Context, in *CheckUserIsBlockedReq, opts ...grpc.CallOption) (*CheckUserIsBlockedResult, error)
	// ***********系统白名单的相关操作和管理*******************
	// 存储白名单
	StoreSystemWhiteUser(ctx context.Context, in *StoreSysWhiteUserReq, opts ...grpc.CallOption) (*StoreSysWhiteUserResult, error)
	// 更新用户白名单的级别
	UpdateSystemWhiteUserLevel(ctx context.Context, in *UpdateSystemWhiteUserLevelReq, opts ...grpc.CallOption) (*UpdateSystemWhiteUserLevelResult, error)
	// 获取指定的白名单人信息
	GetSysWhiteUser(ctx context.Context, in *GetSysWhiteUserReq, opts ...grpc.CallOption) (*GetSysWhiteUserResult, error)
	// 获取白名单列表 )
	GetSysWhiteUserArr(ctx context.Context, in *GetSysWhiteUserArrReq, opts ...grpc.CallOption) (*GetSysWhiteUserArrResult, error)
	// 移除指定的白名单人
	DelSysWhiteUser(ctx context.Context, in *DelSysWhiteUserReq, opts ...grpc.CallOption) (*DelSysWhiteUserResult, error)
	// 拉取所有用户的DC
	GetAllUserDc(ctx context.Context, in *GetAllDcReq, opts ...grpc.CallOption) (UserServerService_GetAllUserDcClient, error)
	// ************************* 有关隐私选项设置的接口们 ****************************************
	// 设置隐私选项的接口
	SetUserPrivacy(ctx context.Context, in *SetPrivacyReq, opts ...grpc.CallOption) (*SetPrivacyResult, error)
	// 获取隐私选项的接口
	GetUserPrivacy(ctx context.Context, in *GetPrivacyReq, opts ...grpc.CallOption) (*GetPrivacyResult, error)
	// 检测用户的隐私选项
	CheckUserPrivacy(ctx context.Context, in *CheckPrivacyReq, opts ...grpc.CallOption) (*CheckPrivacyResult, error)
	// ********************推送音效等设置 *****************
	// 获取音效设置
	GetNotifySettings(ctx context.Context, in *GetNotifySettingsReq, opts ...grpc.CallOption) (*GetNotifySettingsResult, error)
	// 更新音效设置
	UpdateNotifySettings(ctx context.Context, in *UpdateNotifySettingsReq, opts ...grpc.CallOption) (*UpdateNotifySettingsResult, error)
	// ********* 用户相关的GPS *********
	GetUserGps(ctx context.Context, in *GetUserGpsReq, opts ...grpc.CallOption) (*GetUserGpsResult, error)
	// ********* switches ****************
	// 用户开关设置-用户名被搜索,未读计数,允许多段登陆
	UpdateSwitch(ctx context.Context, in *UpdateSwitchReq, opts ...grpc.CallOption) (*UpdateSwitchResult, error)
	// 获取开关的状态
	GetSwitchStatus(ctx context.Context, in *GetSwitchStatusReq, opts ...grpc.CallOption) (*GetSwitchStatusResult, error)
	// 获取Switch版本
	GetSwitchVersion(ctx context.Context, in *GetSwitchVersionReq, opts ...grpc.CallOption) (*GetSwitchVersionResult, error)
	// ********************获取用户扩信息 *****************
	// 获取用户扩信息
	GetUserExpansion(ctx context.Context, in *GetUserExpansionReq, opts ...grpc.CallOption) (*GetUserExpansionResult, error)
	// 用户扩展信息表-设置
	UserExpansionSet(ctx context.Context, in *UserExpansionSetReq, opts ...grpc.CallOption) (*UserExpansionSetResult, error)
	// 获取用户扩展信息
	UserExpansionFind(ctx context.Context, in *UserExpansionFindReq, opts ...grpc.CallOption) (*UserExpansionFindResult, error)
	// ********************获取用户扩信息 *****************
	GetUserInfoExtend(ctx context.Context, in *GetUserInfoExtendReq, opts ...grpc.CallOption) (*GetUserInfoExtendResult, error)
	// ********************特权名单列表 *****************
	// 检查自己是否在特权名单列表中
	CheckUserSpaicl(ctx context.Context, in *CheckUserSpaiclReq, opts ...grpc.CallOption) (*CheckUserSpaiclResult, error)
	// 增加特权名单
	InsertUSerSpaicl(ctx context.Context, in *InsertUSerSpaiclReq, opts ...grpc.CallOption) (*InsertUSerSpaiclResult, error)
	// 删除特权名单
	DelUSerSpaicl(ctx context.Context, in *DelUSerSpaiclReq, opts ...grpc.CallOption) (*DelUSerSpaiclResult, error)
	// 获取所有的特权名单
	GetAllUSerSpaicl(ctx context.Context, in *GetAllUSerSpaiclReq, opts ...grpc.CallOption) (*GetAllUSerSpaiclResult, error)
	// ********************特权名单列表中 *****************
	// UserIpAddOrUpdate(uid int32, addr string, isSignUp bool) error
	UserIpAddOrUpdate(ctx context.Context, in *UserIpAddOrUpdateReq, opts ...grpc.CallOption) (*UserIpAddOrUpdateResult, error)
	// GetUserIpByAddr(addr string, signUpOnly bool) (users []int32, err error)
	GetUserIpByAddr(ctx context.Context, in *GetUserIpByAddrReq, opts ...grpc.CallOption) (*GetUserIpByAddrResult, error)
	// GetUserIpByUserId(uid int32, signUpOnly bool) (addrs []*UserIpAddr, err error)
	GetUserIpByUserId(ctx context.Context, in *GetUserIpByUserIdReq, opts ...grpc.CallOption) (*GetUserIpByUserIdResult, error)
	// 获取自己有关联的联系人关系列表
	GetRelationUsers(ctx context.Context, in *GetRelationUsersReq, opts ...grpc.CallOption) (*GetRelationUsersResult, error)
	// ****************** 退订*************************
	// 设置退订
	SetUserUnsubscribe(ctx context.Context, in *SetUserUnsubscribeReq, opts ...grpc.CallOption) (*SetUserUnsubscribeResult, error)
	// 获取退订
	GetUserUnsubscribe(ctx context.Context, in *GetUserUnsubscribeReq, opts ...grpc.CallOption) (*GetUserUnsubscribeResult, error)
	// ****************** RecvLocker *************************
	RecvLockerAddUserId(ctx context.Context, in *RecvLockerAddUserIdReq, opts ...grpc.CallOption) (*RecvLockerAddUserIdResult, error)
	RecvLockerDelUserId(ctx context.Context, in *RecvLockerDelUserIdReq, opts ...grpc.CallOption) (*RecvLockerDelUserIdResult, error)
	RecvLockerGetUserIds(ctx context.Context, in *RecvLockerGetUserIdsReq, opts ...grpc.CallOption) (*RecvLockerGetUserIdsResult, error)
	CheckDigitalWalletSwitch(ctx context.Context, in *CheckDigitalWalletSwitchReq, opts ...grpc.CallOption) (*CheckDigitalWalletSwitchResult, error)
	AddLoginDay(ctx context.Context, in *AddLoginDayReq, opts ...grpc.CallOption) (*AddLoginDayResult, error)
	// 获取客服列表
	GetCustomerList(ctx context.Context, in *GetCustomerListReq, opts ...grpc.CallOption) (*GetCustomerListReply, error)
	// 指定ID是否是客服
	IsCustomerByUserId(ctx context.Context, in *IsCustomerByUserIdReq, opts ...grpc.CallOption) (*IsCustomerByUserIdReply, error)
	// 获取指定客服的用户列表请求
	GetCustomerOrientUsers(ctx context.Context, in *GetCustomerOrientUsersReq, opts ...grpc.CallOption) (*GetCustomerOrientUsersReply, error)
	// 检测用户Id是否是特权消息账号请求
	CheckSpecialUser(ctx context.Context, in *CheckSpecialUserReq, opts ...grpc.CallOption) (*CheckSpecialUserReply, error)
	// 获取强制加入群组ids
	GetForceGroupList(ctx context.Context, in *GetForceGroupListReq, opts ...grpc.CallOption) (*GetForceGroupListReply, error)
	// 获取非强制加入群组ids
	GetNotForceGroupList(ctx context.Context, in *GetNotForceGroupListReq, opts ...grpc.CallOption) (*GetNotForceGroupListReply, error)
	// 批量查询电话本号码是系统号码
	GetPhoneBookInfos(ctx context.Context, in *GetPhoneBookInfosReq, opts ...grpc.CallOption) (*GetPhoneBookInfosResult, error)
	// ********** 密码登录注册开始 *****************
	// 密码注册
	PassWordRegistry(ctx context.Context, in *PassWordRegistryReq, opts ...grpc.CallOption) (*PassWordRegistryReply, error)
	// 通过username注册
	RegistryUserByUsername(ctx context.Context, in *RegistryUserByUsernameReq, opts ...grpc.CallOption) (*RegistryUserByUsernameReply, error)
	// 密码登录
	PassWordLogin(ctx context.Context, in *PassWordLoginReq, opts ...grpc.CallOption) (*PassWordLoginReply, error)
	// 找回密码
	ChangePassWord(ctx context.Context, in *ChangePassWordReq, opts ...grpc.CallOption) (*ChangePassWordReply, error)
	CheckIsSelfContact(ctx context.Context, in *CheckIsSelfContactReq, opts ...grpc.CallOption) (*CheckIsSelfContactResult, error)
	ChkCdnVip(ctx context.Context, in *ChkCdnVipReq, opts ...grpc.CallOption) (*ChkCdnVipRsp, error)
	AddCdnVip(ctx context.Context, in *AddCdnVipReq, opts ...grpc.CallOption) (*AddCdnVipRsp, error)
	// @ added by qingsong at 2021.03.03 for buy CDN VIP.
	BuyCdnVip(ctx context.Context, in *BuyCdnVipReq, opts ...grpc.CallOption) (*BuyCdnVipRsp, error)
	// @ added by qingsong at 2021.03.03 for set CDN VIP auto renew.
	SetCdnVipAutoPay(ctx context.Context, in *SetCdnVipAutoPayReq, opts ...grpc.CallOption) (*SetCdnVipAutoPayRsp, error)
	// @ added by qingsong at 2021.03.03 for get user cdn-vip info.
	GetUserCdnVipInfo(ctx context.Context, in *GetUserCdnVipInfoReq, opts ...grpc.CallOption) (*GetUserCdnVipInfoRsp, error)
	// @ added by qingsong at 2021.03.03 for get user cdn-vip pay list.
	GetUserCdnPayList(ctx context.Context, in *GetUserCdnPayListReq, opts ...grpc.CallOption) (*GetUserCdnPayListRsp, error)
	// =-------------------- 虛擬號碼相關
	// 生成虛擬號碼池
	GenVitulaPhoneNumbers(ctx context.Context, in *GenVitulaPhoneNumbersReq, opts ...grpc.CallOption) (*GenVitulaPhoneNumbersResp, error)
	// 獲取n個虛擬號碼
	GetVitulPhoneNumbers(ctx context.Context, in *GetVitulPhoneNumbersReq, opts ...grpc.CallOption) (*GetVitulPhoneNumbersResp, error)
	// 獲取指定需要啦羣的用戶們
	GetAllVitualUsersByFlags(ctx context.Context, in *GetAllVitualUsersByFlagsReq, opts ...grpc.CallOption) (*GetAllVitualUsersByFlagsResp, error)
	// 檢測是否是虛擬號碼
	CheckIsVitulaPhone(ctx context.Context, in *CheckIsVitulaPhoneReq, opts ...grpc.CallOption) (*CheckIsVitulaPhoneResp, error)
	SignUpVitual(ctx context.Context, in *SignUpVitualReq, opts ...grpc.CallOption) (*SignUpVitualResp, error)
	// 檢測是否是虛擬號碼
	CheckIsVitulaPhoneArr(ctx context.Context, in *CheckIsVitulaPhoneArrReq, opts ...grpc.CallOption) (*CheckIsVitulaPhoneArrResp, error)
	// 檢測是否是虛擬號碼
	CheckIsPhoneVitulaPhone(ctx context.Context, in *CheckIsPhoneVitulaPhoneReq, opts ...grpc.CallOption) (*CheckIsPhoneVitulaPhoneResp, error)
	// 检查用户是否能加群
	JoinGroupCheck(ctx context.Context, in *JoinGroupCheckReq, opts ...grpc.CallOption) (*JoinGroupCheckRsp, error)
	// 檢測是否有添加聯系人權限（號碼tag是否相同）
	VitualCheckCanAddContact(ctx context.Context, in *VitualCheckCanAddContactReq, opts ...grpc.CallOption) (*VitualCheckCanAddContactResp, error)
	// 獲取發送短信驗證碼的頻道
	GetVitualSendCodeChannel(ctx context.Context, in *GetVitualSendCodeChannelReq, opts ...grpc.CallOption) (*GetVitualSendCodeChannelResp, error)
	// 新增
	BindVitualSendCodeChannel(ctx context.Context, in *BindVitualSendCodeChannelReq, opts ...grpc.CallOption) (*BindVitualSendCodeChannelResp, error)
	// 虚拟帐号绑定手机号
	VirtualBindRealPhone(ctx context.Context, in *VirtualBindRealPhoneReq, opts ...grpc.CallOption) (*VirtualBindRealPhoneRsp, error)
	// 虚拟帐号加真实帐号用户好友
	VirtualAddContactByPhone(ctx context.Context, in *VirtualAddContactByPhoneReq, opts ...grpc.CallOption) (*VirtualAddContactByPhoneRsp, error)
	// 获取虚拟帐号绑定信息
	GetVirtualBindByPhone(ctx context.Context, in *GetVirtualBindByPhoneReq, opts ...grpc.CallOption) (*GetVirtualBindByPhoneRsp, error)
	// 授予管理員權限
	AddUserAdmin(ctx context.Context, in *AddUserAdminReq, opts ...grpc.CallOption) (*AddUserAdminResp, error)
	GetuserAdminInfo(ctx context.Context, in *GetuserAdminInfoReq, opts ...grpc.CallOption) (*GetuserAdminInfoResp, error)
	// @ added by qingsong at 2021.03.17 for virtual pretty number
	// 查询靓号
	SearchPrettyNumber(ctx context.Context, in *SearchPrettyNumberReq, opts ...grpc.CallOption) (*SearchPrettyNumberRsp, error)
	// 激活靓号
	ActivePrettyNumber(ctx context.Context, in *ActivePrettyNumberReq, opts ...grpc.CallOption) (*ActivePrettyNumberRsp, error)
	// @ brief : 获取用户角色信息
	GetUserRoleInfoByIds(ctx context.Context, in *GetUserRoleInfoByIdsReq, opts ...grpc.CallOption) (*GetUserRoleInfoByIdsRsp, error)
	// @ brief : inner user operation.
	InnerUserOp(ctx context.Context, in *InnerUserOpReq, opts ...grpc.CallOption) (*InnerUserOpRsp, error)
	// @ brief : bind real phone.
	BindRealPhone(ctx context.Context, in *BindRealPhoneReq, opts ...grpc.CallOption) (*BindRealPhoneRsp, error)
	// / @ added by qingsong at 2021.12.13 for get user relation.
	GetUserRelationWithIds(ctx context.Context, in *GetUserRelationWithIdsReq, opts ...grpc.CallOption) (*GetUserRelationWithIdsRsp, error)
	UpdateUserVerified(ctx context.Context, in *UpdateUserVerifiedReq, opts ...grpc.CallOption) (*UpdateUserVerifiedResult, error)
}

type userServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServerServiceClient(cc grpc.ClientConnInterface) UserServerServiceClient {
	return &userServerServiceClient{cc}
}

func (c *userServerServiceClient) InviteCodeBind(ctx context.Context, in *InviteCodeBindReq, opts ...grpc.CallOption) (*InviteCodeBindRsp, error) {
	out := new(InviteCodeBindRsp)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/InviteCodeBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) MyTeam(ctx context.Context, in *MyTeamReq, opts ...grpc.CallOption) (*MyTeamRsp, error) {
	out := new(MyTeamRsp)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/MyTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) RealNameCertification(ctx context.Context, in *RealNameCertificationReq, opts ...grpc.CallOption) (*RealNameCertificationRsp, error) {
	out := new(RealNameCertificationRsp)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/RealNameCertification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetCertificationResult(ctx context.Context, in *GetCertificationResultReq, opts ...grpc.CallOption) (*GetCertificationResultRsp, error) {
	out := new(GetCertificationResultRsp)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetCertificationResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) VerifyCertification(ctx context.Context, in *VerifyCertificationReq, opts ...grpc.CallOption) (*VerifyCertificationRsp, error) {
	out := new(VerifyCertificationRsp)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/VerifyCertification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserDetailV1(ctx context.Context, in *UpdateUserDetailV1Req, opts ...grpc.CallOption) (*UpdateUserDetailV1Rsp, error) {
	out := new(UpdateUserDetailV1Rsp)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateUserDetailV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) AddPhoneBookContacts(ctx context.Context, in *AddPhoneBookContactsReq, opts ...grpc.CallOption) (*AddPhoneBookContactsReply, error) {
	out := new(AddPhoneBookContactsReply)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/AddPhoneBookContacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) SignUpV1(ctx context.Context, in *SignUpV1Req, opts ...grpc.CallOption) (*SignUpV1Reply, error) {
	out := new(SignUpV1Reply)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/SignUpV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserTypeLable(ctx context.Context, in *UpdateUserTypeLableReq, opts ...grpc.CallOption) (*UpdateUserTypeLableResult, error) {
	out := new(UpdateUserTypeLableResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateUserTypeLable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserDetail(ctx context.Context, in *UpdateUserDetailReq, opts ...grpc.CallOption) (*UpdateUserDetailResult, error) {
	out := new(UpdateUserDetailResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateUserDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserDetailBirthday(ctx context.Context, in *UpdateUserDetailBirthdayReq, opts ...grpc.CallOption) (*UpdateUserDetailBirthdayResult, error) {
	out := new(UpdateUserDetailBirthdayResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateUserDetailBirthday", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) SetUserDetail(ctx context.Context, in *SetUserDetailReq, opts ...grpc.CallOption) (*SetUserDetailResult, error) {
	out := new(SetUserDetailResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/SetUserDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckUserHasPay(ctx context.Context, in *CheckUserHasPayReq, opts ...grpc.CallOption) (*CheckUserHasPayResp, error) {
	out := new(CheckUserHasPayResp)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/CheckUserHasPay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserHasPay(ctx context.Context, in *UpdateUserHasPayReq, opts ...grpc.CallOption) (*UpdateUserHasPayResp, error) {
	out := new(UpdateUserHasPayResp)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateUserHasPay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetViplogPhoneList(ctx context.Context, in *GetViplogPhoneListReq, opts ...grpc.CallOption) (*GetViplogPhoneListResp, error) {
	out := new(GetViplogPhoneListResp)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetViplogPhoneList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) RegisterUserInfo(ctx context.Context, in *RegisterUserInfoReq, opts ...grpc.CallOption) (*RegisterUserInfoResult, error) {
	out := new(RegisterUserInfoResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/RegisterUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserInfoById(ctx context.Context, in *GetUserInfoByIdReq, opts ...grpc.CallOption) (*GetUserInfoResult, error) {
	out := new(GetUserInfoResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetUserInfoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserInfoByIdArr(ctx context.Context, in *GetUserInfoByIdArrReq, opts ...grpc.CallOption) (*GetUserInfoByIdArrResult, error) {
	out := new(GetUserInfoByIdArrResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetUserInfoByIdArr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserExpierById(ctx context.Context, in *GetUserExpireByIdReq, opts ...grpc.CallOption) (*GetUserExpireByIdResult, error) {
	out := new(GetUserExpireByIdResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetUserExpierById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserInfoByPhone(ctx context.Context, in *GetUserByphone, opts ...grpc.CallOption) (*GetUserInfoResult, error) {
	out := new(GetUserInfoResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetUserInfoByPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserInfoByUsername(ctx context.Context, in *GetUserByUsername, opts ...grpc.CallOption) (*GetUserInfoResult, error) {
	out := new(GetUserInfoResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetUserInfoByUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserPhoto(ctx context.Context, in *UpdatePhotoInfoReq, opts ...grpc.CallOption) (*UpdateUserPhotoResult, error) {
	out := new(UpdateUserPhotoResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateUserPhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserPhoto(ctx context.Context, in *GetPhotoInfoReq, opts ...grpc.CallOption) (*GetUserPhotoResult, error) {
	out := new(GetUserPhotoResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetUserPhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserStatus(ctx context.Context, in *StatusReq, opts ...grpc.CallOption) (*StatusResult, error) {
	out := new(StatusResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateUserStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserStatusV2(ctx context.Context, in *StatusReq, opts ...grpc.CallOption) (*StatusResult, error) {
	out := new(StatusResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateUserStatusV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserExpire(ctx context.Context, in *UpdateExpireReq, opts ...grpc.CallOption) (*UpdateExpireResult, error) {
	out := new(UpdateExpireResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateUserExpire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserCluster(ctx context.Context, in *UserClusterChange, opts ...grpc.CallOption) (*UserClusterChangeResult, error) {
	out := new(UserClusterChangeResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateUserCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserName(ctx context.Context, in *UpdateuserNameReq, opts ...grpc.CallOption) (*UpdateuserNameResult, error) {
	out := new(UpdateuserNameResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserLevel(ctx context.Context, in *UpdateUserLevelReq, opts ...grpc.CallOption) (*UpdateUserLevelResult, error) {
	out := new(UpdateUserLevelResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateUserLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserExtion(ctx context.Context, in *UpdateUserExtionReq, opts ...grpc.CallOption) (*UpdateUserExtionResult, error) {
	out := new(UpdateUserExtionResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateUserExtion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckUserNameOccupied(ctx context.Context, in *CheckUserNameOccupiedReq, opts ...grpc.CallOption) (*CheckUserNameOccupiedResult, error) {
	out := new(CheckUserNameOccupiedResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/CheckUserNameOccupied", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckPhoneRegister(ctx context.Context, in *CheckPhoneRegisterReq, opts ...grpc.CallOption) (*CheckPhoneRegisterResult, error) {
	out := new(CheckPhoneRegisterResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/CheckPhoneRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DeleteUserInfoById(ctx context.Context, in *DeleteAccountByIdReq, opts ...grpc.CallOption) (*DelAccountResult, error) {
	out := new(DelAccountResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/DeleteUserInfoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateBotInfo(ctx context.Context, in *BotUpdateInfo, opts ...grpc.CallOption) (*BotUpdateInfoResult, error) {
	out := new(BotUpdateInfoResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateBotInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateBotPic(ctx context.Context, in *UpdateBotPicRequest, opts ...grpc.CallOption) (*UpdateBotPicResult, error) {
	out := new(UpdateBotPicResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateBotPic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckUserAccessHashValid(ctx context.Context, in *CheckUserAccessHashValidReq, opts ...grpc.CallOption) (*CheckUserAccessHashValidResult, error) {
	out := new(CheckUserAccessHashValidResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/CheckUserAccessHashValid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) QueryUpdatesByUserid(ctx context.Context, in *QueryUpdatesByUseridReq, opts ...grpc.CallOption) (*QueryUpdatesByUseridResult, error) {
	out := new(QueryUpdatesByUseridResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/QueryUpdatesByUserid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetFullUser(ctx context.Context, in *GetFullUserReq, opts ...grpc.CallOption) (*GetFullUserResult, error) {
	out := new(GetFullUserResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetFullUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) HistoryChangePhoneAdd(ctx context.Context, in *HistoryChangePhoneAddReq, opts ...grpc.CallOption) (*HistoryChangePhoneAddResult, error) {
	out := new(HistoryChangePhoneAddResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/HistoryChangePhoneAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) AccountChangePhone(ctx context.Context, in *ChangePhoneReq, opts ...grpc.CallOption) (*ChangePhoneResult, error) {
	out := new(ChangePhoneResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/AccountChangePhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserProfile(ctx context.Context, in *UpdateUserProfileReq, opts ...grpc.CallOption) (*UpdateUserProfileResult, error) {
	out := new(UpdateUserProfileResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) SearchUserByPhone(ctx context.Context, in *SearchUserByPhoneReq, opts ...grpc.CallOption) (*SearchUserByPhoneResult, error) {
	out := new(SearchUserByPhoneResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/SearchUserByPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ContactsGetCommonContacts(ctx context.Context, in *ContactsGetCommonContactsReq, opts ...grpc.CallOption) (*ContactsGetCommonContactsResult, error) {
	out := new(ContactsGetCommonContactsResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/ContactsGetCommonContacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) SearchUserByNickname(ctx context.Context, in *SearchUserByNicknameReq, opts ...grpc.CallOption) (*SearchUserByNicknameResult, error) {
	out := new(SearchUserByNicknameResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/SearchUserByNickname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DeleteUserUsername(ctx context.Context, in *DeleteUserUsernameReq, opts ...grpc.CallOption) (*DeleteUserUsernameResult, error) {
	out := new(DeleteUserUsernameResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/DeleteUserUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateBotInfoSupp(ctx context.Context, in *UpdateBotInfoSuppReq, opts ...grpc.CallOption) (*UpdateBotInfoSuppResult, error) {
	out := new(UpdateBotInfoSuppResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateBotInfoSupp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckIsMuteContact(ctx context.Context, in *CheckIsMuteContactReq, opts ...grpc.CallOption) (*CheckIsMuteContactResult, error) {
	out := new(CheckIsMuteContactResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/CheckIsMuteContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ContactsDelContact(ctx context.Context, in *DelContactReq, opts ...grpc.CallOption) (*DelContactResult, error) {
	out := new(DelContactResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/ContactsDelContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) AcceptContact(ctx context.Context, in *AcceptContactReq, opts ...grpc.CallOption) (*AcceptContactResult, error) {
	out := new(AcceptContactResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/AcceptContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ContactsDelContactsArr(ctx context.Context, in *DelContactArrReq, opts ...grpc.CallOption) (*DelContactArrResult, error) {
	out := new(DelContactArrResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/ContactsDelContactsArr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CmdResetUserContacts(ctx context.Context, in *CmdResetUserContactsReq, opts ...grpc.CallOption) (*CmdResetUserContactsResult, error) {
	out := new(CmdResetUserContactsResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/CmdResetUserContacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ContactsGetContacts(ctx context.Context, in *ContatsGetContactsReq, opts ...grpc.CallOption) (*ContatsGetContactsResult, error) {
	out := new(ContatsGetContactsResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/ContactsGetContacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ContactsGetContactsV1(ctx context.Context, in *ContactsGetContactsV1Req, opts ...grpc.CallOption) (*ContactsGetContactsV1Result, error) {
	out := new(ContactsGetContactsV1Result)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/ContactsGetContactsV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetContactsV1(ctx context.Context, in *GetContactsV1Req, opts ...grpc.CallOption) (*GetContactsV1Result, error) {
	out := new(GetContactsV1Result)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetContactsV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ContactsGetContactsId(ctx context.Context, in *ContactsGetContactsIdReq, opts ...grpc.CallOption) (*ContactsGetContactsIdResult, error) {
	out := new(ContactsGetContactsIdResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/ContactsGetContactsId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ImportContacts(ctx context.Context, in *ContactsImportPhoneContactsReq, opts ...grpc.CallOption) (*ContactsImportPhoneContactsResult, error) {
	out := new(ContactsImportPhoneContactsResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/ImportContacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetContactsStatus(ctx context.Context, in *GetContactsStatusReq, opts ...grpc.CallOption) (*GetContactsStatusResult, error) {
	out := new(GetContactsStatusResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetContactsStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckSelfIsContact(ctx context.Context, in *CheckSelfIsContactReq, opts ...grpc.CallOption) (*CheckSelfIsContactResult, error) {
	out := new(CheckSelfIsContactResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/CheckSelfIsContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckIsMutualContact(ctx context.Context, in *CheckIsMutualContactReq, opts ...grpc.CallOption) (*CheckIsMutualContactResult, error) {
	out := new(CheckIsMutualContactResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/CheckIsMutualContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DialogUserRelation(ctx context.Context, in *AddRelationIdInfo, opts ...grpc.CallOption) (*AddRelationIdInfoResult, error) {
	out := new(AddRelationIdInfoResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/DialogUserRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DelDialogUserRelation(ctx context.Context, in *DelRelationIdInfo, opts ...grpc.CallOption) (*DelRelationIdInfoResult, error) {
	out := new(DelRelationIdInfoResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/DelDialogUserRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UploadContacts(ctx context.Context, in *UploadContactsReq, opts ...grpc.CallOption) (*UploadContactsResult, error) {
	out := new(UploadContactsResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UploadContacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ApplyContact(ctx context.Context, in *ApplyContactReq, opts ...grpc.CallOption) (*ApplyContactResult, error) {
	out := new(ApplyContactResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/ApplyContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ContactsGreetApply(ctx context.Context, in *ContactsGreetApplyReq, opts ...grpc.CallOption) (*ContactsGreetApplyResult, error) {
	out := new(ContactsGreetApplyResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/ContactsGreetApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) VerifyContact(ctx context.Context, in *VerifyContactReq, opts ...grpc.CallOption) (*VerifyContactResult, error) {
	out := new(VerifyContactResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/VerifyContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetAppliedContacts(ctx context.Context, in *GetAppliedContactsReq, opts ...grpc.CallOption) (*GetAppliedContactsResult, error) {
	out := new(GetAppliedContactsResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetAppliedContacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DeleteAppliedHistoryContact(ctx context.Context, in *DeleteAppliedHistoryContactReq, opts ...grpc.CallOption) (*DeleteAppliedHistoryContactResult, error) {
	out := new(DeleteAppliedHistoryContactResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/DeleteAppliedHistoryContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DeleteAppliedSomeContact(ctx context.Context, in *DeleteAppliedSomeContactReq, opts ...grpc.CallOption) (*DeleteAppliedSomeContactResult, error) {
	out := new(DeleteAppliedSomeContactResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/DeleteAppliedSomeContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DeleteReceiveApplies(ctx context.Context, in *DeleteReceiveAppliesReq, opts ...grpc.CallOption) (*DeleteReceiveAppliesResult, error) {
	out := new(DeleteReceiveAppliesResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/DeleteReceiveApplies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ReadAppliedHistory(ctx context.Context, in *ReadAppliedHistoryReq, opts ...grpc.CallOption) (*ReadAppliedHistoryResult, error) {
	out := new(ReadAppliedHistoryResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/ReadAppliedHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetContactsApplyDifference(ctx context.Context, in *GetContactsApplyDifferenceReq, opts ...grpc.CallOption) (*GetContactsApplyDifferenceResult, error) {
	out := new(GetContactsApplyDifferenceResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetContactsApplyDifference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetContactsApplyDifferenceV2(ctx context.Context, in *GetContactsApplyDifferenceV2Req, opts ...grpc.CallOption) (*GetContactsApplyDifferenceV2Result, error) {
	out := new(GetContactsApplyDifferenceV2Result)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetContactsApplyDifferenceV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckSearchUserCountLimited(ctx context.Context, in *CheckSearchUserCountLimitedReq, opts ...grpc.CallOption) (*CheckSearchUserCountLimitedResult, error) {
	out := new(CheckSearchUserCountLimitedResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/CheckSearchUserCountLimited", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResult, error) {
	out := new(CreateGroupResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) SetUserGroup(ctx context.Context, in *SetUserGroupReq, opts ...grpc.CallOption) (*SetUserGroupResult, error) {
	out := new(SetUserGroupResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/SetUserGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ChangeGroupName(ctx context.Context, in *ChangeGroupNameReq, opts ...grpc.CallOption) (*ChangeGroupNameResult, error) {
	out := new(ChangeGroupNameResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/ChangeGroupName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ChangeGroupOrder(ctx context.Context, in *ChangeGroupOrderReq, opts ...grpc.CallOption) (*ChangeGroupOrderResult, error) {
	out := new(ChangeGroupOrderResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/ChangeGroupOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DeleteGroup(ctx context.Context, in *DeleteGroupReq, opts ...grpc.CallOption) (*DeleteGroupResult, error) {
	out := new(DeleteGroupResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DeleteGroups(ctx context.Context, in *DeleteGroupsReq, opts ...grpc.CallOption) (*DeleteGroupsResult, error) {
	out := new(DeleteGroupsResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/DeleteGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) BlockedUser(ctx context.Context, in *BlockeduserReq, opts ...grpc.CallOption) (*BlockeduserResult, error) {
	out := new(BlockeduserResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/BlockedUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ContactUnBlockedUser(ctx context.Context, in *ContactUnblockedReq, opts ...grpc.CallOption) (*BlockeduserResult, error) {
	out := new(BlockeduserResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/ContactUnBlockedUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ContactsGetBlocked(ctx context.Context, in *ContactsGetBlockedReq, opts ...grpc.CallOption) (*ContactsGetBlockedResult, error) {
	out := new(ContactsGetBlockedResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/ContactsGetBlocked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckUserIsBlocked(ctx context.Context, in *CheckUserIsBlockedReq, opts ...grpc.CallOption) (*CheckUserIsBlockedResult, error) {
	out := new(CheckUserIsBlockedResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/CheckUserIsBlocked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) StoreSystemWhiteUser(ctx context.Context, in *StoreSysWhiteUserReq, opts ...grpc.CallOption) (*StoreSysWhiteUserResult, error) {
	out := new(StoreSysWhiteUserResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/StoreSystemWhiteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateSystemWhiteUserLevel(ctx context.Context, in *UpdateSystemWhiteUserLevelReq, opts ...grpc.CallOption) (*UpdateSystemWhiteUserLevelResult, error) {
	out := new(UpdateSystemWhiteUserLevelResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateSystemWhiteUserLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetSysWhiteUser(ctx context.Context, in *GetSysWhiteUserReq, opts ...grpc.CallOption) (*GetSysWhiteUserResult, error) {
	out := new(GetSysWhiteUserResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetSysWhiteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetSysWhiteUserArr(ctx context.Context, in *GetSysWhiteUserArrReq, opts ...grpc.CallOption) (*GetSysWhiteUserArrResult, error) {
	out := new(GetSysWhiteUserArrResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetSysWhiteUserArr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DelSysWhiteUser(ctx context.Context, in *DelSysWhiteUserReq, opts ...grpc.CallOption) (*DelSysWhiteUserResult, error) {
	out := new(DelSysWhiteUserResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/DelSysWhiteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetAllUserDc(ctx context.Context, in *GetAllDcReq, opts ...grpc.CallOption) (UserServerService_GetAllUserDcClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserServerService_ServiceDesc.Streams[0], "/pbimuinfoserver.UserServerService/GetAllUserDc", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServerServiceGetAllUserDcClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserServerService_GetAllUserDcClient interface {
	Recv() (*UserDc, error)
	grpc.ClientStream
}

type userServerServiceGetAllUserDcClient struct {
	grpc.ClientStream
}

func (x *userServerServiceGetAllUserDcClient) Recv() (*UserDc, error) {
	m := new(UserDc)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServerServiceClient) SetUserPrivacy(ctx context.Context, in *SetPrivacyReq, opts ...grpc.CallOption) (*SetPrivacyResult, error) {
	out := new(SetPrivacyResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/SetUserPrivacy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserPrivacy(ctx context.Context, in *GetPrivacyReq, opts ...grpc.CallOption) (*GetPrivacyResult, error) {
	out := new(GetPrivacyResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetUserPrivacy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckUserPrivacy(ctx context.Context, in *CheckPrivacyReq, opts ...grpc.CallOption) (*CheckPrivacyResult, error) {
	out := new(CheckPrivacyResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/CheckUserPrivacy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetNotifySettings(ctx context.Context, in *GetNotifySettingsReq, opts ...grpc.CallOption) (*GetNotifySettingsResult, error) {
	out := new(GetNotifySettingsResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetNotifySettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateNotifySettings(ctx context.Context, in *UpdateNotifySettingsReq, opts ...grpc.CallOption) (*UpdateNotifySettingsResult, error) {
	out := new(UpdateNotifySettingsResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateNotifySettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserGps(ctx context.Context, in *GetUserGpsReq, opts ...grpc.CallOption) (*GetUserGpsResult, error) {
	out := new(GetUserGpsResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetUserGps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateSwitch(ctx context.Context, in *UpdateSwitchReq, opts ...grpc.CallOption) (*UpdateSwitchResult, error) {
	out := new(UpdateSwitchResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetSwitchStatus(ctx context.Context, in *GetSwitchStatusReq, opts ...grpc.CallOption) (*GetSwitchStatusResult, error) {
	out := new(GetSwitchStatusResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetSwitchStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetSwitchVersion(ctx context.Context, in *GetSwitchVersionReq, opts ...grpc.CallOption) (*GetSwitchVersionResult, error) {
	out := new(GetSwitchVersionResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetSwitchVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserExpansion(ctx context.Context, in *GetUserExpansionReq, opts ...grpc.CallOption) (*GetUserExpansionResult, error) {
	out := new(GetUserExpansionResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetUserExpansion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UserExpansionSet(ctx context.Context, in *UserExpansionSetReq, opts ...grpc.CallOption) (*UserExpansionSetResult, error) {
	out := new(UserExpansionSetResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UserExpansionSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UserExpansionFind(ctx context.Context, in *UserExpansionFindReq, opts ...grpc.CallOption) (*UserExpansionFindResult, error) {
	out := new(UserExpansionFindResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UserExpansionFind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserInfoExtend(ctx context.Context, in *GetUserInfoExtendReq, opts ...grpc.CallOption) (*GetUserInfoExtendResult, error) {
	out := new(GetUserInfoExtendResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetUserInfoExtend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckUserSpaicl(ctx context.Context, in *CheckUserSpaiclReq, opts ...grpc.CallOption) (*CheckUserSpaiclResult, error) {
	out := new(CheckUserSpaiclResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/CheckUserSpaicl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) InsertUSerSpaicl(ctx context.Context, in *InsertUSerSpaiclReq, opts ...grpc.CallOption) (*InsertUSerSpaiclResult, error) {
	out := new(InsertUSerSpaiclResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/InsertUSerSpaicl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DelUSerSpaicl(ctx context.Context, in *DelUSerSpaiclReq, opts ...grpc.CallOption) (*DelUSerSpaiclResult, error) {
	out := new(DelUSerSpaiclResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/DelUSerSpaicl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetAllUSerSpaicl(ctx context.Context, in *GetAllUSerSpaiclReq, opts ...grpc.CallOption) (*GetAllUSerSpaiclResult, error) {
	out := new(GetAllUSerSpaiclResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetAllUSerSpaicl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UserIpAddOrUpdate(ctx context.Context, in *UserIpAddOrUpdateReq, opts ...grpc.CallOption) (*UserIpAddOrUpdateResult, error) {
	out := new(UserIpAddOrUpdateResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UserIpAddOrUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserIpByAddr(ctx context.Context, in *GetUserIpByAddrReq, opts ...grpc.CallOption) (*GetUserIpByAddrResult, error) {
	out := new(GetUserIpByAddrResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetUserIpByAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserIpByUserId(ctx context.Context, in *GetUserIpByUserIdReq, opts ...grpc.CallOption) (*GetUserIpByUserIdResult, error) {
	out := new(GetUserIpByUserIdResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetUserIpByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetRelationUsers(ctx context.Context, in *GetRelationUsersReq, opts ...grpc.CallOption) (*GetRelationUsersResult, error) {
	out := new(GetRelationUsersResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetRelationUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) SetUserUnsubscribe(ctx context.Context, in *SetUserUnsubscribeReq, opts ...grpc.CallOption) (*SetUserUnsubscribeResult, error) {
	out := new(SetUserUnsubscribeResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/SetUserUnsubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserUnsubscribe(ctx context.Context, in *GetUserUnsubscribeReq, opts ...grpc.CallOption) (*GetUserUnsubscribeResult, error) {
	out := new(GetUserUnsubscribeResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetUserUnsubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) RecvLockerAddUserId(ctx context.Context, in *RecvLockerAddUserIdReq, opts ...grpc.CallOption) (*RecvLockerAddUserIdResult, error) {
	out := new(RecvLockerAddUserIdResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/RecvLockerAddUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) RecvLockerDelUserId(ctx context.Context, in *RecvLockerDelUserIdReq, opts ...grpc.CallOption) (*RecvLockerDelUserIdResult, error) {
	out := new(RecvLockerDelUserIdResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/RecvLockerDelUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) RecvLockerGetUserIds(ctx context.Context, in *RecvLockerGetUserIdsReq, opts ...grpc.CallOption) (*RecvLockerGetUserIdsResult, error) {
	out := new(RecvLockerGetUserIdsResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/RecvLockerGetUserIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckDigitalWalletSwitch(ctx context.Context, in *CheckDigitalWalletSwitchReq, opts ...grpc.CallOption) (*CheckDigitalWalletSwitchResult, error) {
	out := new(CheckDigitalWalletSwitchResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/CheckDigitalWalletSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) AddLoginDay(ctx context.Context, in *AddLoginDayReq, opts ...grpc.CallOption) (*AddLoginDayResult, error) {
	out := new(AddLoginDayResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/AddLoginDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetCustomerList(ctx context.Context, in *GetCustomerListReq, opts ...grpc.CallOption) (*GetCustomerListReply, error) {
	out := new(GetCustomerListReply)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetCustomerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) IsCustomerByUserId(ctx context.Context, in *IsCustomerByUserIdReq, opts ...grpc.CallOption) (*IsCustomerByUserIdReply, error) {
	out := new(IsCustomerByUserIdReply)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/IsCustomerByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetCustomerOrientUsers(ctx context.Context, in *GetCustomerOrientUsersReq, opts ...grpc.CallOption) (*GetCustomerOrientUsersReply, error) {
	out := new(GetCustomerOrientUsersReply)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetCustomerOrientUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckSpecialUser(ctx context.Context, in *CheckSpecialUserReq, opts ...grpc.CallOption) (*CheckSpecialUserReply, error) {
	out := new(CheckSpecialUserReply)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/CheckSpecialUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetForceGroupList(ctx context.Context, in *GetForceGroupListReq, opts ...grpc.CallOption) (*GetForceGroupListReply, error) {
	out := new(GetForceGroupListReply)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetForceGroupList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetNotForceGroupList(ctx context.Context, in *GetNotForceGroupListReq, opts ...grpc.CallOption) (*GetNotForceGroupListReply, error) {
	out := new(GetNotForceGroupListReply)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetNotForceGroupList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetPhoneBookInfos(ctx context.Context, in *GetPhoneBookInfosReq, opts ...grpc.CallOption) (*GetPhoneBookInfosResult, error) {
	out := new(GetPhoneBookInfosResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetPhoneBookInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) PassWordRegistry(ctx context.Context, in *PassWordRegistryReq, opts ...grpc.CallOption) (*PassWordRegistryReply, error) {
	out := new(PassWordRegistryReply)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/PassWordRegistry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) RegistryUserByUsername(ctx context.Context, in *RegistryUserByUsernameReq, opts ...grpc.CallOption) (*RegistryUserByUsernameReply, error) {
	out := new(RegistryUserByUsernameReply)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/RegistryUserByUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) PassWordLogin(ctx context.Context, in *PassWordLoginReq, opts ...grpc.CallOption) (*PassWordLoginReply, error) {
	out := new(PassWordLoginReply)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/PassWordLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ChangePassWord(ctx context.Context, in *ChangePassWordReq, opts ...grpc.CallOption) (*ChangePassWordReply, error) {
	out := new(ChangePassWordReply)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/ChangePassWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckIsSelfContact(ctx context.Context, in *CheckIsSelfContactReq, opts ...grpc.CallOption) (*CheckIsSelfContactResult, error) {
	out := new(CheckIsSelfContactResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/CheckIsSelfContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ChkCdnVip(ctx context.Context, in *ChkCdnVipReq, opts ...grpc.CallOption) (*ChkCdnVipRsp, error) {
	out := new(ChkCdnVipRsp)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/ChkCdnVip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) AddCdnVip(ctx context.Context, in *AddCdnVipReq, opts ...grpc.CallOption) (*AddCdnVipRsp, error) {
	out := new(AddCdnVipRsp)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/AddCdnVip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) BuyCdnVip(ctx context.Context, in *BuyCdnVipReq, opts ...grpc.CallOption) (*BuyCdnVipRsp, error) {
	out := new(BuyCdnVipRsp)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/BuyCdnVip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) SetCdnVipAutoPay(ctx context.Context, in *SetCdnVipAutoPayReq, opts ...grpc.CallOption) (*SetCdnVipAutoPayRsp, error) {
	out := new(SetCdnVipAutoPayRsp)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/SetCdnVipAutoPay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserCdnVipInfo(ctx context.Context, in *GetUserCdnVipInfoReq, opts ...grpc.CallOption) (*GetUserCdnVipInfoRsp, error) {
	out := new(GetUserCdnVipInfoRsp)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetUserCdnVipInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserCdnPayList(ctx context.Context, in *GetUserCdnPayListReq, opts ...grpc.CallOption) (*GetUserCdnPayListRsp, error) {
	out := new(GetUserCdnPayListRsp)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetUserCdnPayList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GenVitulaPhoneNumbers(ctx context.Context, in *GenVitulaPhoneNumbersReq, opts ...grpc.CallOption) (*GenVitulaPhoneNumbersResp, error) {
	out := new(GenVitulaPhoneNumbersResp)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GenVitulaPhoneNumbers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetVitulPhoneNumbers(ctx context.Context, in *GetVitulPhoneNumbersReq, opts ...grpc.CallOption) (*GetVitulPhoneNumbersResp, error) {
	out := new(GetVitulPhoneNumbersResp)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetVitulPhoneNumbers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetAllVitualUsersByFlags(ctx context.Context, in *GetAllVitualUsersByFlagsReq, opts ...grpc.CallOption) (*GetAllVitualUsersByFlagsResp, error) {
	out := new(GetAllVitualUsersByFlagsResp)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetAllVitualUsersByFlags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckIsVitulaPhone(ctx context.Context, in *CheckIsVitulaPhoneReq, opts ...grpc.CallOption) (*CheckIsVitulaPhoneResp, error) {
	out := new(CheckIsVitulaPhoneResp)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/CheckIsVitulaPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) SignUpVitual(ctx context.Context, in *SignUpVitualReq, opts ...grpc.CallOption) (*SignUpVitualResp, error) {
	out := new(SignUpVitualResp)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/SignUpVitual", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckIsVitulaPhoneArr(ctx context.Context, in *CheckIsVitulaPhoneArrReq, opts ...grpc.CallOption) (*CheckIsVitulaPhoneArrResp, error) {
	out := new(CheckIsVitulaPhoneArrResp)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/CheckIsVitulaPhoneArr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckIsPhoneVitulaPhone(ctx context.Context, in *CheckIsPhoneVitulaPhoneReq, opts ...grpc.CallOption) (*CheckIsPhoneVitulaPhoneResp, error) {
	out := new(CheckIsPhoneVitulaPhoneResp)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/CheckIsPhoneVitulaPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) JoinGroupCheck(ctx context.Context, in *JoinGroupCheckReq, opts ...grpc.CallOption) (*JoinGroupCheckRsp, error) {
	out := new(JoinGroupCheckRsp)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/JoinGroupCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) VitualCheckCanAddContact(ctx context.Context, in *VitualCheckCanAddContactReq, opts ...grpc.CallOption) (*VitualCheckCanAddContactResp, error) {
	out := new(VitualCheckCanAddContactResp)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/VitualCheckCanAddContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetVitualSendCodeChannel(ctx context.Context, in *GetVitualSendCodeChannelReq, opts ...grpc.CallOption) (*GetVitualSendCodeChannelResp, error) {
	out := new(GetVitualSendCodeChannelResp)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetVitualSendCodeChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) BindVitualSendCodeChannel(ctx context.Context, in *BindVitualSendCodeChannelReq, opts ...grpc.CallOption) (*BindVitualSendCodeChannelResp, error) {
	out := new(BindVitualSendCodeChannelResp)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/BindVitualSendCodeChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) VirtualBindRealPhone(ctx context.Context, in *VirtualBindRealPhoneReq, opts ...grpc.CallOption) (*VirtualBindRealPhoneRsp, error) {
	out := new(VirtualBindRealPhoneRsp)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/VirtualBindRealPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) VirtualAddContactByPhone(ctx context.Context, in *VirtualAddContactByPhoneReq, opts ...grpc.CallOption) (*VirtualAddContactByPhoneRsp, error) {
	out := new(VirtualAddContactByPhoneRsp)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/VirtualAddContactByPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetVirtualBindByPhone(ctx context.Context, in *GetVirtualBindByPhoneReq, opts ...grpc.CallOption) (*GetVirtualBindByPhoneRsp, error) {
	out := new(GetVirtualBindByPhoneRsp)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetVirtualBindByPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) AddUserAdmin(ctx context.Context, in *AddUserAdminReq, opts ...grpc.CallOption) (*AddUserAdminResp, error) {
	out := new(AddUserAdminResp)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/AddUserAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetuserAdminInfo(ctx context.Context, in *GetuserAdminInfoReq, opts ...grpc.CallOption) (*GetuserAdminInfoResp, error) {
	out := new(GetuserAdminInfoResp)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetuserAdminInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) SearchPrettyNumber(ctx context.Context, in *SearchPrettyNumberReq, opts ...grpc.CallOption) (*SearchPrettyNumberRsp, error) {
	out := new(SearchPrettyNumberRsp)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/SearchPrettyNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ActivePrettyNumber(ctx context.Context, in *ActivePrettyNumberReq, opts ...grpc.CallOption) (*ActivePrettyNumberRsp, error) {
	out := new(ActivePrettyNumberRsp)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/ActivePrettyNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserRoleInfoByIds(ctx context.Context, in *GetUserRoleInfoByIdsReq, opts ...grpc.CallOption) (*GetUserRoleInfoByIdsRsp, error) {
	out := new(GetUserRoleInfoByIdsRsp)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetUserRoleInfoByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) InnerUserOp(ctx context.Context, in *InnerUserOpReq, opts ...grpc.CallOption) (*InnerUserOpRsp, error) {
	out := new(InnerUserOpRsp)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/InnerUserOp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) BindRealPhone(ctx context.Context, in *BindRealPhoneReq, opts ...grpc.CallOption) (*BindRealPhoneRsp, error) {
	out := new(BindRealPhoneRsp)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/BindRealPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserRelationWithIds(ctx context.Context, in *GetUserRelationWithIdsReq, opts ...grpc.CallOption) (*GetUserRelationWithIdsRsp, error) {
	out := new(GetUserRelationWithIdsRsp)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetUserRelationWithIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserVerified(ctx context.Context, in *UpdateUserVerifiedReq, opts ...grpc.CallOption) (*UpdateUserVerifiedResult, error) {
	out := new(UpdateUserVerifiedResult)
	err := c.cc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateUserVerified", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServerServiceServer is the server API for UserServerService service.
// All implementations must embed UnimplementedUserServerServiceServer
// for forward compatibility
type UserServerServiceServer interface {
	// 邀请码绑定
	InviteCodeBind(context.Context, *InviteCodeBindReq) (*InviteCodeBindRsp, error)
	// 我的团队
	MyTeam(context.Context, *MyTeamReq) (*MyTeamRsp, error)
	// 实名认证材料提交
	RealNameCertification(context.Context, *RealNameCertificationReq) (*RealNameCertificationRsp, error)
	// 实名认证结果反馈
	GetCertificationResult(context.Context, *GetCertificationResultReq) (*GetCertificationResultRsp, error)
	// 实名认证后台审核
	VerifyCertification(context.Context, *VerifyCertificationReq) (*VerifyCertificationRsp, error)
	// 实名认证后台审核
	UpdateUserDetailV1(context.Context, *UpdateUserDetailV1Req) (*UpdateUserDetailV1Rsp, error)
	// 添加电话部好友
	AddPhoneBookContacts(context.Context, *AddPhoneBookContactsReq) (*AddPhoneBookContactsReply, error)
	SignUpV1(context.Context, *SignUpV1Req) (*SignUpV1Reply, error)
	// 更新用户类别，标记
	UpdateUserTypeLable(context.Context, *UpdateUserTypeLableReq) (*UpdateUserTypeLableResult, error)
	// 更新用户年龄，性别，地理位置等等
	UpdateUserDetail(context.Context, *UpdateUserDetailReq) (*UpdateUserDetailResult, error)
	UpdateUserDetailBirthday(context.Context, *UpdateUserDetailBirthdayReq) (*UpdateUserDetailBirthdayResult, error)
	SetUserDetail(context.Context, *SetUserDetailReq) (*SetUserDetailResult, error)
	// 检查用户是否已经创建帐号
	CheckUserHasPay(context.Context, *CheckUserHasPayReq) (*CheckUserHasPayResp, error)
	// 更新用户已经开通支付帐号
	UpdateUserHasPay(context.Context, *UpdateUserHasPayReq) (*UpdateUserHasPayResp, error)
	// 获取viplog 电话号码列表(仅供ip调用获取viplog 的电话号码们)
	GetViplogPhoneList(context.Context, *GetViplogPhoneListReq) (*GetViplogPhoneListResp, error)
	// ********************************用户信息
	// 注册指定用户的接口()
	RegisterUserInfo(context.Context, *RegisterUserInfoReq) (*RegisterUserInfoResult, error)
	// 获取用户信息
	GetUserInfoById(context.Context, *GetUserInfoByIdReq) (*GetUserInfoResult, error)
	// 批量根据用户ID来获取用户信息selfId 代表自己的Id userId 代表需要获取的用户的Id
	GetUserInfoByIdArr(context.Context, *GetUserInfoByIdArrReq) (*GetUserInfoByIdArrResult, error)
	// 获取账号的销毁时间
	GetUserExpierById(context.Context, *GetUserExpireByIdReq) (*GetUserExpireByIdResult, error)
	// 通过用户电话号码获取用户基本信息
	GetUserInfoByPhone(context.Context, *GetUserByphone) (*GetUserInfoResult, error)
	// 通过username获取用户基本信息
	GetUserInfoByUsername(context.Context, *GetUserByUsername) (*GetUserInfoResult, error)
	// 更新用户头像
	UpdateUserPhoto(context.Context, *UpdatePhotoInfoReq) (*UpdateUserPhotoResult, error)
	// 获取用户头像
	GetUserPhoto(context.Context, *GetPhotoInfoReq) (*GetUserPhotoResult, error)
	// 更新用户用户status
	UpdateUserStatus(context.Context, *StatusReq) (*StatusResult, error)
	// 更新用户用户status v2
	UpdateUserStatusV2(context.Context, *StatusReq) (*StatusResult, error)
	// 设置用户账号销毁时间
	UpdateUserExpire(context.Context, *UpdateExpireReq) (*UpdateExpireResult, error)
	// 用户DC的迁移
	UpdateUserCluster(context.Context, *UserClusterChange) (*UserClusterChangeResult, error)
	// 更新用户的username
	UpdateUserName(context.Context, *UpdateuserNameReq) (*UpdateuserNameResult, error)
	// 更新用户的扩展字段
	UpdateUserLevel(context.Context, *UpdateUserLevelReq) (*UpdateUserLevelResult, error)
	// 更新用户的扩展字段
	UpdateUserExtion(context.Context, *UpdateUserExtionReq) (*UpdateUserExtionResult, error)
	// 校验用户名称是否被占用
	CheckUserNameOccupied(context.Context, *CheckUserNameOccupiedReq) (*CheckUserNameOccupiedResult, error)
	// 检查电话号码是否已经注册
	CheckPhoneRegister(context.Context, *CheckPhoneRegisterReq) (*CheckPhoneRegisterResult, error)
	// 账号(标记删除)
	DeleteUserInfoById(context.Context, *DeleteAccountByIdReq) (*DelAccountResult, error)
	// 更新机器人相关信息
	UpdateBotInfo(context.Context, *BotUpdateInfo) (*BotUpdateInfoResult, error)
	// 更新机器人头像
	UpdateBotPic(context.Context, *UpdateBotPicRequest) (*UpdateBotPicResult, error)
	// 检测用户哈希是否合法
	CheckUserAccessHashValid(context.Context, *CheckUserAccessHashValidReq) (*CheckUserAccessHashValidResult, error)
	// 根据id获取正在进行的电话update信息
	QueryUpdatesByUserid(context.Context, *QueryUpdatesByUseridReq) (*QueryUpdatesByUseridResult, error)
	// 获取用户信息
	GetFullUser(context.Context, *GetFullUserReq) (*GetFullUserResult, error)
	// 添加手机号码更换历史记录
	HistoryChangePhoneAdd(context.Context, *HistoryChangePhoneAddReq) (*HistoryChangePhoneAddResult, error)
	// 更换手机
	AccountChangePhone(context.Context, *ChangePhoneReq) (*ChangePhoneResult, error)
	// 更新firstName,lastName和about
	UpdateUserProfile(context.Context, *UpdateUserProfileReq) (*UpdateUserProfileResult, error)
	// 联系人搜索用户
	SearchUserByPhone(context.Context, *SearchUserByPhoneReq) (*SearchUserByPhoneResult, error)
	ContactsGetCommonContacts(context.Context, *ContactsGetCommonContactsReq) (*ContactsGetCommonContactsResult, error)
	SearchUserByNickname(context.Context, *SearchUserByNicknameReq) (*SearchUserByNicknameResult, error)
	// CMD命令,删除用户名称
	DeleteUserUsername(context.Context, *DeleteUserUsernameReq) (*DeleteUserUsernameResult, error)
	// 补充 更新机器人相关信息
	UpdateBotInfoSupp(context.Context, *UpdateBotInfoSuppReq) (*UpdateBotInfoSuppResult, error)
	// 根据用户Id来获取用户信息selfId 代表自己的Id userId 代表需要获取的用户的Id
	CheckIsMuteContact(context.Context, *CheckIsMuteContactReq) (*CheckIsMuteContactResult, error)
	// ********************************联系人的相关接口
	// 删除单个联系人的接口
	ContactsDelContact(context.Context, *DelContactReq) (*DelContactResult, error)
	// 接受添加联系人的接口
	AcceptContact(context.Context, *AcceptContactReq) (*AcceptContactResult, error)
	// 批量删除用户联系人的接口
	ContactsDelContactsArr(context.Context, *DelContactArrReq) (*DelContactArrResult, error)
	// 重置用户联系人信息，删除所有联系人
	CmdResetUserContacts(context.Context, *CmdResetUserContactsReq) (*CmdResetUserContactsResult, error)
	// 获取用户联系人列表
	ContactsGetContacts(context.Context, *ContatsGetContactsReq) (*ContatsGetContactsResult, error)
	// 获取用户联系人列表V1
	ContactsGetContactsV1(context.Context, *ContactsGetContactsV1Req) (*ContactsGetContactsV1Result, error)
	// 获取联系人列表
	GetContactsV1(context.Context, *GetContactsV1Req) (*GetContactsV1Result, error)
	// 获取用户联系人userid列表
	ContactsGetContactsId(context.Context, *ContactsGetContactsIdReq) (*ContactsGetContactsIdResult, error)
	// 批量导入联系人的操作(具体业务逻辑在用户服务来实现)
	ImportContacts(context.Context, *ContactsImportPhoneContactsReq) (*ContactsImportPhoneContactsResult, error)
	// 获取自己所有联系人的在线状态
	GetContactsStatus(context.Context, *GetContactsStatusReq) (*GetContactsStatusResult, error)
	// 检测自己是否是对方的联系人
	CheckSelfIsContact(context.Context, *CheckSelfIsContactReq) (*CheckSelfIsContactResult, error)
	// 检测是否双向好友
	CheckIsMutualContact(context.Context, *CheckIsMutualContactReq) (*CheckIsMutualContactResult, error)
	// ************用户关联表 用户在线状态的更新*******************
	// 创建dialog的增加用户关系（单聊）
	DialogUserRelation(context.Context, *AddRelationIdInfo) (*AddRelationIdInfoResult, error)
	// 删除dialog的剔除用户关系
	DelDialogUserRelation(context.Context, *DelRelationIdInfo) (*DelRelationIdInfoResult, error)
	// 上传保存联系人
	UploadContacts(context.Context, *UploadContactsReq) (*UploadContactsResult, error)
	// 联系人申请
	ApplyContact(context.Context, *ApplyContactReq) (*ApplyContactResult, error)
	ContactsGreetApply(context.Context, *ContactsGreetApplyReq) (*ContactsGreetApplyResult, error)
	// 确认添加申请
	VerifyContact(context.Context, *VerifyContactReq) (*VerifyContactResult, error)
	// 获取被添加用户申请列表
	GetAppliedContacts(context.Context, *GetAppliedContactsReq) (*GetAppliedContactsResult, error)
	// 删除申请列表
	DeleteAppliedHistoryContact(context.Context, *DeleteAppliedHistoryContactReq) (*DeleteAppliedHistoryContactResult, error)
	// 删除一些申请
	DeleteAppliedSomeContact(context.Context, *DeleteAppliedSomeContactReq) (*DeleteAppliedSomeContactResult, error)
	DeleteReceiveApplies(context.Context, *DeleteReceiveAppliesReq) (*DeleteReceiveAppliesResult, error)
	// 设置申请为已读
	ReadAppliedHistory(context.Context, *ReadAppliedHistoryReq) (*ReadAppliedHistoryResult, error)
	GetContactsApplyDifference(context.Context, *GetContactsApplyDifferenceReq) (*GetContactsApplyDifferenceResult, error)
	GetContactsApplyDifferenceV2(context.Context, *GetContactsApplyDifferenceV2Req) (*GetContactsApplyDifferenceV2Result, error)
	// 检查搜索用户数量是否到达上线
	CheckSearchUserCountLimited(context.Context, *CheckSearchUserCountLimitedReq) (*CheckSearchUserCountLimitedResult, error)
	// **********联系人分组***************
	CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupResult, error)
	SetUserGroup(context.Context, *SetUserGroupReq) (*SetUserGroupResult, error)
	ChangeGroupName(context.Context, *ChangeGroupNameReq) (*ChangeGroupNameResult, error)
	ChangeGroupOrder(context.Context, *ChangeGroupOrderReq) (*ChangeGroupOrderResult, error)
	DeleteGroup(context.Context, *DeleteGroupReq) (*DeleteGroupResult, error)
	DeleteGroups(context.Context, *DeleteGroupsReq) (*DeleteGroupsResult, error)
	// **********用户黑名单的管理 ***************
	// 拉黑用户
	BlockedUser(context.Context, *BlockeduserReq) (*BlockeduserResult, error)
	// 移除拉黑的用户
	ContactUnBlockedUser(context.Context, *ContactUnblockedReq) (*BlockeduserResult, error)
	// 获取用户的黑明单列表
	ContactsGetBlocked(context.Context, *ContactsGetBlockedReq) (*ContactsGetBlockedResult, error)
	// 检测用户是否是黑名单
	CheckUserIsBlocked(context.Context, *CheckUserIsBlockedReq) (*CheckUserIsBlockedResult, error)
	// ***********系统白名单的相关操作和管理*******************
	// 存储白名单
	StoreSystemWhiteUser(context.Context, *StoreSysWhiteUserReq) (*StoreSysWhiteUserResult, error)
	// 更新用户白名单的级别
	UpdateSystemWhiteUserLevel(context.Context, *UpdateSystemWhiteUserLevelReq) (*UpdateSystemWhiteUserLevelResult, error)
	// 获取指定的白名单人信息
	GetSysWhiteUser(context.Context, *GetSysWhiteUserReq) (*GetSysWhiteUserResult, error)
	// 获取白名单列表 )
	GetSysWhiteUserArr(context.Context, *GetSysWhiteUserArrReq) (*GetSysWhiteUserArrResult, error)
	// 移除指定的白名单人
	DelSysWhiteUser(context.Context, *DelSysWhiteUserReq) (*DelSysWhiteUserResult, error)
	// 拉取所有用户的DC
	GetAllUserDc(*GetAllDcReq, UserServerService_GetAllUserDcServer) error
	// ************************* 有关隐私选项设置的接口们 ****************************************
	// 设置隐私选项的接口
	SetUserPrivacy(context.Context, *SetPrivacyReq) (*SetPrivacyResult, error)
	// 获取隐私选项的接口
	GetUserPrivacy(context.Context, *GetPrivacyReq) (*GetPrivacyResult, error)
	// 检测用户的隐私选项
	CheckUserPrivacy(context.Context, *CheckPrivacyReq) (*CheckPrivacyResult, error)
	// ********************推送音效等设置 *****************
	// 获取音效设置
	GetNotifySettings(context.Context, *GetNotifySettingsReq) (*GetNotifySettingsResult, error)
	// 更新音效设置
	UpdateNotifySettings(context.Context, *UpdateNotifySettingsReq) (*UpdateNotifySettingsResult, error)
	// ********* 用户相关的GPS *********
	GetUserGps(context.Context, *GetUserGpsReq) (*GetUserGpsResult, error)
	// ********* switches ****************
	// 用户开关设置-用户名被搜索,未读计数,允许多段登陆
	UpdateSwitch(context.Context, *UpdateSwitchReq) (*UpdateSwitchResult, error)
	// 获取开关的状态
	GetSwitchStatus(context.Context, *GetSwitchStatusReq) (*GetSwitchStatusResult, error)
	// 获取Switch版本
	GetSwitchVersion(context.Context, *GetSwitchVersionReq) (*GetSwitchVersionResult, error)
	// ********************获取用户扩信息 *****************
	// 获取用户扩信息
	GetUserExpansion(context.Context, *GetUserExpansionReq) (*GetUserExpansionResult, error)
	// 用户扩展信息表-设置
	UserExpansionSet(context.Context, *UserExpansionSetReq) (*UserExpansionSetResult, error)
	// 获取用户扩展信息
	UserExpansionFind(context.Context, *UserExpansionFindReq) (*UserExpansionFindResult, error)
	// ********************获取用户扩信息 *****************
	GetUserInfoExtend(context.Context, *GetUserInfoExtendReq) (*GetUserInfoExtendResult, error)
	// ********************特权名单列表 *****************
	// 检查自己是否在特权名单列表中
	CheckUserSpaicl(context.Context, *CheckUserSpaiclReq) (*CheckUserSpaiclResult, error)
	// 增加特权名单
	InsertUSerSpaicl(context.Context, *InsertUSerSpaiclReq) (*InsertUSerSpaiclResult, error)
	// 删除特权名单
	DelUSerSpaicl(context.Context, *DelUSerSpaiclReq) (*DelUSerSpaiclResult, error)
	// 获取所有的特权名单
	GetAllUSerSpaicl(context.Context, *GetAllUSerSpaiclReq) (*GetAllUSerSpaiclResult, error)
	// ********************特权名单列表中 *****************
	// UserIpAddOrUpdate(uid int32, addr string, isSignUp bool) error
	UserIpAddOrUpdate(context.Context, *UserIpAddOrUpdateReq) (*UserIpAddOrUpdateResult, error)
	// GetUserIpByAddr(addr string, signUpOnly bool) (users []int32, err error)
	GetUserIpByAddr(context.Context, *GetUserIpByAddrReq) (*GetUserIpByAddrResult, error)
	// GetUserIpByUserId(uid int32, signUpOnly bool) (addrs []*UserIpAddr, err error)
	GetUserIpByUserId(context.Context, *GetUserIpByUserIdReq) (*GetUserIpByUserIdResult, error)
	// 获取自己有关联的联系人关系列表
	GetRelationUsers(context.Context, *GetRelationUsersReq) (*GetRelationUsersResult, error)
	// ****************** 退订*************************
	// 设置退订
	SetUserUnsubscribe(context.Context, *SetUserUnsubscribeReq) (*SetUserUnsubscribeResult, error)
	// 获取退订
	GetUserUnsubscribe(context.Context, *GetUserUnsubscribeReq) (*GetUserUnsubscribeResult, error)
	// ****************** RecvLocker *************************
	RecvLockerAddUserId(context.Context, *RecvLockerAddUserIdReq) (*RecvLockerAddUserIdResult, error)
	RecvLockerDelUserId(context.Context, *RecvLockerDelUserIdReq) (*RecvLockerDelUserIdResult, error)
	RecvLockerGetUserIds(context.Context, *RecvLockerGetUserIdsReq) (*RecvLockerGetUserIdsResult, error)
	CheckDigitalWalletSwitch(context.Context, *CheckDigitalWalletSwitchReq) (*CheckDigitalWalletSwitchResult, error)
	AddLoginDay(context.Context, *AddLoginDayReq) (*AddLoginDayResult, error)
	// 获取客服列表
	GetCustomerList(context.Context, *GetCustomerListReq) (*GetCustomerListReply, error)
	// 指定ID是否是客服
	IsCustomerByUserId(context.Context, *IsCustomerByUserIdReq) (*IsCustomerByUserIdReply, error)
	// 获取指定客服的用户列表请求
	GetCustomerOrientUsers(context.Context, *GetCustomerOrientUsersReq) (*GetCustomerOrientUsersReply, error)
	// 检测用户Id是否是特权消息账号请求
	CheckSpecialUser(context.Context, *CheckSpecialUserReq) (*CheckSpecialUserReply, error)
	// 获取强制加入群组ids
	GetForceGroupList(context.Context, *GetForceGroupListReq) (*GetForceGroupListReply, error)
	// 获取非强制加入群组ids
	GetNotForceGroupList(context.Context, *GetNotForceGroupListReq) (*GetNotForceGroupListReply, error)
	// 批量查询电话本号码是系统号码
	GetPhoneBookInfos(context.Context, *GetPhoneBookInfosReq) (*GetPhoneBookInfosResult, error)
	// ********** 密码登录注册开始 *****************
	// 密码注册
	PassWordRegistry(context.Context, *PassWordRegistryReq) (*PassWordRegistryReply, error)
	// 通过username注册
	RegistryUserByUsername(context.Context, *RegistryUserByUsernameReq) (*RegistryUserByUsernameReply, error)
	// 密码登录
	PassWordLogin(context.Context, *PassWordLoginReq) (*PassWordLoginReply, error)
	// 找回密码
	ChangePassWord(context.Context, *ChangePassWordReq) (*ChangePassWordReply, error)
	CheckIsSelfContact(context.Context, *CheckIsSelfContactReq) (*CheckIsSelfContactResult, error)
	ChkCdnVip(context.Context, *ChkCdnVipReq) (*ChkCdnVipRsp, error)
	AddCdnVip(context.Context, *AddCdnVipReq) (*AddCdnVipRsp, error)
	// @ added by qingsong at 2021.03.03 for buy CDN VIP.
	BuyCdnVip(context.Context, *BuyCdnVipReq) (*BuyCdnVipRsp, error)
	// @ added by qingsong at 2021.03.03 for set CDN VIP auto renew.
	SetCdnVipAutoPay(context.Context, *SetCdnVipAutoPayReq) (*SetCdnVipAutoPayRsp, error)
	// @ added by qingsong at 2021.03.03 for get user cdn-vip info.
	GetUserCdnVipInfo(context.Context, *GetUserCdnVipInfoReq) (*GetUserCdnVipInfoRsp, error)
	// @ added by qingsong at 2021.03.03 for get user cdn-vip pay list.
	GetUserCdnPayList(context.Context, *GetUserCdnPayListReq) (*GetUserCdnPayListRsp, error)
	// =-------------------- 虛擬號碼相關
	// 生成虛擬號碼池
	GenVitulaPhoneNumbers(context.Context, *GenVitulaPhoneNumbersReq) (*GenVitulaPhoneNumbersResp, error)
	// 獲取n個虛擬號碼
	GetVitulPhoneNumbers(context.Context, *GetVitulPhoneNumbersReq) (*GetVitulPhoneNumbersResp, error)
	// 獲取指定需要啦羣的用戶們
	GetAllVitualUsersByFlags(context.Context, *GetAllVitualUsersByFlagsReq) (*GetAllVitualUsersByFlagsResp, error)
	// 檢測是否是虛擬號碼
	CheckIsVitulaPhone(context.Context, *CheckIsVitulaPhoneReq) (*CheckIsVitulaPhoneResp, error)
	SignUpVitual(context.Context, *SignUpVitualReq) (*SignUpVitualResp, error)
	// 檢測是否是虛擬號碼
	CheckIsVitulaPhoneArr(context.Context, *CheckIsVitulaPhoneArrReq) (*CheckIsVitulaPhoneArrResp, error)
	// 檢測是否是虛擬號碼
	CheckIsPhoneVitulaPhone(context.Context, *CheckIsPhoneVitulaPhoneReq) (*CheckIsPhoneVitulaPhoneResp, error)
	// 检查用户是否能加群
	JoinGroupCheck(context.Context, *JoinGroupCheckReq) (*JoinGroupCheckRsp, error)
	// 檢測是否有添加聯系人權限（號碼tag是否相同）
	VitualCheckCanAddContact(context.Context, *VitualCheckCanAddContactReq) (*VitualCheckCanAddContactResp, error)
	// 獲取發送短信驗證碼的頻道
	GetVitualSendCodeChannel(context.Context, *GetVitualSendCodeChannelReq) (*GetVitualSendCodeChannelResp, error)
	// 新增
	BindVitualSendCodeChannel(context.Context, *BindVitualSendCodeChannelReq) (*BindVitualSendCodeChannelResp, error)
	// 虚拟帐号绑定手机号
	VirtualBindRealPhone(context.Context, *VirtualBindRealPhoneReq) (*VirtualBindRealPhoneRsp, error)
	// 虚拟帐号加真实帐号用户好友
	VirtualAddContactByPhone(context.Context, *VirtualAddContactByPhoneReq) (*VirtualAddContactByPhoneRsp, error)
	// 获取虚拟帐号绑定信息
	GetVirtualBindByPhone(context.Context, *GetVirtualBindByPhoneReq) (*GetVirtualBindByPhoneRsp, error)
	// 授予管理員權限
	AddUserAdmin(context.Context, *AddUserAdminReq) (*AddUserAdminResp, error)
	GetuserAdminInfo(context.Context, *GetuserAdminInfoReq) (*GetuserAdminInfoResp, error)
	// @ added by qingsong at 2021.03.17 for virtual pretty number
	// 查询靓号
	SearchPrettyNumber(context.Context, *SearchPrettyNumberReq) (*SearchPrettyNumberRsp, error)
	// 激活靓号
	ActivePrettyNumber(context.Context, *ActivePrettyNumberReq) (*ActivePrettyNumberRsp, error)
	// @ brief : 获取用户角色信息
	GetUserRoleInfoByIds(context.Context, *GetUserRoleInfoByIdsReq) (*GetUserRoleInfoByIdsRsp, error)
	// @ brief : inner user operation.
	InnerUserOp(context.Context, *InnerUserOpReq) (*InnerUserOpRsp, error)
	// @ brief : bind real phone.
	BindRealPhone(context.Context, *BindRealPhoneReq) (*BindRealPhoneRsp, error)
	// / @ added by qingsong at 2021.12.13 for get user relation.
	GetUserRelationWithIds(context.Context, *GetUserRelationWithIdsReq) (*GetUserRelationWithIdsRsp, error)
	UpdateUserVerified(context.Context, *UpdateUserVerifiedReq) (*UpdateUserVerifiedResult, error)
	mustEmbedUnimplementedUserServerServiceServer()
}

// UnimplementedUserServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServerServiceServer struct {
}

func (UnimplementedUserServerServiceServer) InviteCodeBind(context.Context, *InviteCodeBindReq) (*InviteCodeBindRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteCodeBind not implemented")
}
func (UnimplementedUserServerServiceServer) MyTeam(context.Context, *MyTeamReq) (*MyTeamRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyTeam not implemented")
}
func (UnimplementedUserServerServiceServer) RealNameCertification(context.Context, *RealNameCertificationReq) (*RealNameCertificationRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RealNameCertification not implemented")
}
func (UnimplementedUserServerServiceServer) GetCertificationResult(context.Context, *GetCertificationResultReq) (*GetCertificationResultRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertificationResult not implemented")
}
func (UnimplementedUserServerServiceServer) VerifyCertification(context.Context, *VerifyCertificationReq) (*VerifyCertificationRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyCertification not implemented")
}
func (UnimplementedUserServerServiceServer) UpdateUserDetailV1(context.Context, *UpdateUserDetailV1Req) (*UpdateUserDetailV1Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserDetailV1 not implemented")
}
func (UnimplementedUserServerServiceServer) AddPhoneBookContacts(context.Context, *AddPhoneBookContactsReq) (*AddPhoneBookContactsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPhoneBookContacts not implemented")
}
func (UnimplementedUserServerServiceServer) SignUpV1(context.Context, *SignUpV1Req) (*SignUpV1Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUpV1 not implemented")
}
func (UnimplementedUserServerServiceServer) UpdateUserTypeLable(context.Context, *UpdateUserTypeLableReq) (*UpdateUserTypeLableResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserTypeLable not implemented")
}
func (UnimplementedUserServerServiceServer) UpdateUserDetail(context.Context, *UpdateUserDetailReq) (*UpdateUserDetailResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserDetail not implemented")
}
func (UnimplementedUserServerServiceServer) UpdateUserDetailBirthday(context.Context, *UpdateUserDetailBirthdayReq) (*UpdateUserDetailBirthdayResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserDetailBirthday not implemented")
}
func (UnimplementedUserServerServiceServer) SetUserDetail(context.Context, *SetUserDetailReq) (*SetUserDetailResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserDetail not implemented")
}
func (UnimplementedUserServerServiceServer) CheckUserHasPay(context.Context, *CheckUserHasPayReq) (*CheckUserHasPayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserHasPay not implemented")
}
func (UnimplementedUserServerServiceServer) UpdateUserHasPay(context.Context, *UpdateUserHasPayReq) (*UpdateUserHasPayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserHasPay not implemented")
}
func (UnimplementedUserServerServiceServer) GetViplogPhoneList(context.Context, *GetViplogPhoneListReq) (*GetViplogPhoneListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetViplogPhoneList not implemented")
}
func (UnimplementedUserServerServiceServer) RegisterUserInfo(context.Context, *RegisterUserInfoReq) (*RegisterUserInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUserInfo not implemented")
}
func (UnimplementedUserServerServiceServer) GetUserInfoById(context.Context, *GetUserInfoByIdReq) (*GetUserInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoById not implemented")
}
func (UnimplementedUserServerServiceServer) GetUserInfoByIdArr(context.Context, *GetUserInfoByIdArrReq) (*GetUserInfoByIdArrResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoByIdArr not implemented")
}
func (UnimplementedUserServerServiceServer) GetUserExpierById(context.Context, *GetUserExpireByIdReq) (*GetUserExpireByIdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserExpierById not implemented")
}
func (UnimplementedUserServerServiceServer) GetUserInfoByPhone(context.Context, *GetUserByphone) (*GetUserInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoByPhone not implemented")
}
func (UnimplementedUserServerServiceServer) GetUserInfoByUsername(context.Context, *GetUserByUsername) (*GetUserInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoByUsername not implemented")
}
func (UnimplementedUserServerServiceServer) UpdateUserPhoto(context.Context, *UpdatePhotoInfoReq) (*UpdateUserPhotoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPhoto not implemented")
}
func (UnimplementedUserServerServiceServer) GetUserPhoto(context.Context, *GetPhotoInfoReq) (*GetUserPhotoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPhoto not implemented")
}
func (UnimplementedUserServerServiceServer) UpdateUserStatus(context.Context, *StatusReq) (*StatusResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserStatus not implemented")
}
func (UnimplementedUserServerServiceServer) UpdateUserStatusV2(context.Context, *StatusReq) (*StatusResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserStatusV2 not implemented")
}
func (UnimplementedUserServerServiceServer) UpdateUserExpire(context.Context, *UpdateExpireReq) (*UpdateExpireResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserExpire not implemented")
}
func (UnimplementedUserServerServiceServer) UpdateUserCluster(context.Context, *UserClusterChange) (*UserClusterChangeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserCluster not implemented")
}
func (UnimplementedUserServerServiceServer) UpdateUserName(context.Context, *UpdateuserNameReq) (*UpdateuserNameResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserName not implemented")
}
func (UnimplementedUserServerServiceServer) UpdateUserLevel(context.Context, *UpdateUserLevelReq) (*UpdateUserLevelResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserLevel not implemented")
}
func (UnimplementedUserServerServiceServer) UpdateUserExtion(context.Context, *UpdateUserExtionReq) (*UpdateUserExtionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserExtion not implemented")
}
func (UnimplementedUserServerServiceServer) CheckUserNameOccupied(context.Context, *CheckUserNameOccupiedReq) (*CheckUserNameOccupiedResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserNameOccupied not implemented")
}
func (UnimplementedUserServerServiceServer) CheckPhoneRegister(context.Context, *CheckPhoneRegisterReq) (*CheckPhoneRegisterResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPhoneRegister not implemented")
}
func (UnimplementedUserServerServiceServer) DeleteUserInfoById(context.Context, *DeleteAccountByIdReq) (*DelAccountResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserInfoById not implemented")
}
func (UnimplementedUserServerServiceServer) UpdateBotInfo(context.Context, *BotUpdateInfo) (*BotUpdateInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBotInfo not implemented")
}
func (UnimplementedUserServerServiceServer) UpdateBotPic(context.Context, *UpdateBotPicRequest) (*UpdateBotPicResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBotPic not implemented")
}
func (UnimplementedUserServerServiceServer) CheckUserAccessHashValid(context.Context, *CheckUserAccessHashValidReq) (*CheckUserAccessHashValidResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserAccessHashValid not implemented")
}
func (UnimplementedUserServerServiceServer) QueryUpdatesByUserid(context.Context, *QueryUpdatesByUseridReq) (*QueryUpdatesByUseridResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUpdatesByUserid not implemented")
}
func (UnimplementedUserServerServiceServer) GetFullUser(context.Context, *GetFullUserReq) (*GetFullUserResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullUser not implemented")
}
func (UnimplementedUserServerServiceServer) HistoryChangePhoneAdd(context.Context, *HistoryChangePhoneAddReq) (*HistoryChangePhoneAddResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoryChangePhoneAdd not implemented")
}
func (UnimplementedUserServerServiceServer) AccountChangePhone(context.Context, *ChangePhoneReq) (*ChangePhoneResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountChangePhone not implemented")
}
func (UnimplementedUserServerServiceServer) UpdateUserProfile(context.Context, *UpdateUserProfileReq) (*UpdateUserProfileResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}
func (UnimplementedUserServerServiceServer) SearchUserByPhone(context.Context, *SearchUserByPhoneReq) (*SearchUserByPhoneResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserByPhone not implemented")
}
func (UnimplementedUserServerServiceServer) ContactsGetCommonContacts(context.Context, *ContactsGetCommonContactsReq) (*ContactsGetCommonContactsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsGetCommonContacts not implemented")
}
func (UnimplementedUserServerServiceServer) SearchUserByNickname(context.Context, *SearchUserByNicknameReq) (*SearchUserByNicknameResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserByNickname not implemented")
}
func (UnimplementedUserServerServiceServer) DeleteUserUsername(context.Context, *DeleteUserUsernameReq) (*DeleteUserUsernameResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserUsername not implemented")
}
func (UnimplementedUserServerServiceServer) UpdateBotInfoSupp(context.Context, *UpdateBotInfoSuppReq) (*UpdateBotInfoSuppResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBotInfoSupp not implemented")
}
func (UnimplementedUserServerServiceServer) CheckIsMuteContact(context.Context, *CheckIsMuteContactReq) (*CheckIsMuteContactResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIsMuteContact not implemented")
}
func (UnimplementedUserServerServiceServer) ContactsDelContact(context.Context, *DelContactReq) (*DelContactResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsDelContact not implemented")
}
func (UnimplementedUserServerServiceServer) AcceptContact(context.Context, *AcceptContactReq) (*AcceptContactResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptContact not implemented")
}
func (UnimplementedUserServerServiceServer) ContactsDelContactsArr(context.Context, *DelContactArrReq) (*DelContactArrResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsDelContactsArr not implemented")
}
func (UnimplementedUserServerServiceServer) CmdResetUserContacts(context.Context, *CmdResetUserContactsReq) (*CmdResetUserContactsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmdResetUserContacts not implemented")
}
func (UnimplementedUserServerServiceServer) ContactsGetContacts(context.Context, *ContatsGetContactsReq) (*ContatsGetContactsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsGetContacts not implemented")
}
func (UnimplementedUserServerServiceServer) ContactsGetContactsV1(context.Context, *ContactsGetContactsV1Req) (*ContactsGetContactsV1Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsGetContactsV1 not implemented")
}
func (UnimplementedUserServerServiceServer) GetContactsV1(context.Context, *GetContactsV1Req) (*GetContactsV1Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContactsV1 not implemented")
}
func (UnimplementedUserServerServiceServer) ContactsGetContactsId(context.Context, *ContactsGetContactsIdReq) (*ContactsGetContactsIdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsGetContactsId not implemented")
}
func (UnimplementedUserServerServiceServer) ImportContacts(context.Context, *ContactsImportPhoneContactsReq) (*ContactsImportPhoneContactsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportContacts not implemented")
}
func (UnimplementedUserServerServiceServer) GetContactsStatus(context.Context, *GetContactsStatusReq) (*GetContactsStatusResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContactsStatus not implemented")
}
func (UnimplementedUserServerServiceServer) CheckSelfIsContact(context.Context, *CheckSelfIsContactReq) (*CheckSelfIsContactResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSelfIsContact not implemented")
}
func (UnimplementedUserServerServiceServer) CheckIsMutualContact(context.Context, *CheckIsMutualContactReq) (*CheckIsMutualContactResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIsMutualContact not implemented")
}
func (UnimplementedUserServerServiceServer) DialogUserRelation(context.Context, *AddRelationIdInfo) (*AddRelationIdInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogUserRelation not implemented")
}
func (UnimplementedUserServerServiceServer) DelDialogUserRelation(context.Context, *DelRelationIdInfo) (*DelRelationIdInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelDialogUserRelation not implemented")
}
func (UnimplementedUserServerServiceServer) UploadContacts(context.Context, *UploadContactsReq) (*UploadContactsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadContacts not implemented")
}
func (UnimplementedUserServerServiceServer) ApplyContact(context.Context, *ApplyContactReq) (*ApplyContactResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyContact not implemented")
}
func (UnimplementedUserServerServiceServer) ContactsGreetApply(context.Context, *ContactsGreetApplyReq) (*ContactsGreetApplyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsGreetApply not implemented")
}
func (UnimplementedUserServerServiceServer) VerifyContact(context.Context, *VerifyContactReq) (*VerifyContactResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyContact not implemented")
}
func (UnimplementedUserServerServiceServer) GetAppliedContacts(context.Context, *GetAppliedContactsReq) (*GetAppliedContactsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppliedContacts not implemented")
}
func (UnimplementedUserServerServiceServer) DeleteAppliedHistoryContact(context.Context, *DeleteAppliedHistoryContactReq) (*DeleteAppliedHistoryContactResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppliedHistoryContact not implemented")
}
func (UnimplementedUserServerServiceServer) DeleteAppliedSomeContact(context.Context, *DeleteAppliedSomeContactReq) (*DeleteAppliedSomeContactResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppliedSomeContact not implemented")
}
func (UnimplementedUserServerServiceServer) DeleteReceiveApplies(context.Context, *DeleteReceiveAppliesReq) (*DeleteReceiveAppliesResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReceiveApplies not implemented")
}
func (UnimplementedUserServerServiceServer) ReadAppliedHistory(context.Context, *ReadAppliedHistoryReq) (*ReadAppliedHistoryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAppliedHistory not implemented")
}
func (UnimplementedUserServerServiceServer) GetContactsApplyDifference(context.Context, *GetContactsApplyDifferenceReq) (*GetContactsApplyDifferenceResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContactsApplyDifference not implemented")
}
func (UnimplementedUserServerServiceServer) GetContactsApplyDifferenceV2(context.Context, *GetContactsApplyDifferenceV2Req) (*GetContactsApplyDifferenceV2Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContactsApplyDifferenceV2 not implemented")
}
func (UnimplementedUserServerServiceServer) CheckSearchUserCountLimited(context.Context, *CheckSearchUserCountLimitedReq) (*CheckSearchUserCountLimitedResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSearchUserCountLimited not implemented")
}
func (UnimplementedUserServerServiceServer) CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedUserServerServiceServer) SetUserGroup(context.Context, *SetUserGroupReq) (*SetUserGroupResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserGroup not implemented")
}
func (UnimplementedUserServerServiceServer) ChangeGroupName(context.Context, *ChangeGroupNameReq) (*ChangeGroupNameResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeGroupName not implemented")
}
func (UnimplementedUserServerServiceServer) ChangeGroupOrder(context.Context, *ChangeGroupOrderReq) (*ChangeGroupOrderResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeGroupOrder not implemented")
}
func (UnimplementedUserServerServiceServer) DeleteGroup(context.Context, *DeleteGroupReq) (*DeleteGroupResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedUserServerServiceServer) DeleteGroups(context.Context, *DeleteGroupsReq) (*DeleteGroupsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroups not implemented")
}
func (UnimplementedUserServerServiceServer) BlockedUser(context.Context, *BlockeduserReq) (*BlockeduserResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockedUser not implemented")
}
func (UnimplementedUserServerServiceServer) ContactUnBlockedUser(context.Context, *ContactUnblockedReq) (*BlockeduserResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactUnBlockedUser not implemented")
}
func (UnimplementedUserServerServiceServer) ContactsGetBlocked(context.Context, *ContactsGetBlockedReq) (*ContactsGetBlockedResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsGetBlocked not implemented")
}
func (UnimplementedUserServerServiceServer) CheckUserIsBlocked(context.Context, *CheckUserIsBlockedReq) (*CheckUserIsBlockedResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserIsBlocked not implemented")
}
func (UnimplementedUserServerServiceServer) StoreSystemWhiteUser(context.Context, *StoreSysWhiteUserReq) (*StoreSysWhiteUserResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreSystemWhiteUser not implemented")
}
func (UnimplementedUserServerServiceServer) UpdateSystemWhiteUserLevel(context.Context, *UpdateSystemWhiteUserLevelReq) (*UpdateSystemWhiteUserLevelResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSystemWhiteUserLevel not implemented")
}
func (UnimplementedUserServerServiceServer) GetSysWhiteUser(context.Context, *GetSysWhiteUserReq) (*GetSysWhiteUserResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysWhiteUser not implemented")
}
func (UnimplementedUserServerServiceServer) GetSysWhiteUserArr(context.Context, *GetSysWhiteUserArrReq) (*GetSysWhiteUserArrResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysWhiteUserArr not implemented")
}
func (UnimplementedUserServerServiceServer) DelSysWhiteUser(context.Context, *DelSysWhiteUserReq) (*DelSysWhiteUserResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSysWhiteUser not implemented")
}
func (UnimplementedUserServerServiceServer) GetAllUserDc(*GetAllDcReq, UserServerService_GetAllUserDcServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllUserDc not implemented")
}
func (UnimplementedUserServerServiceServer) SetUserPrivacy(context.Context, *SetPrivacyReq) (*SetPrivacyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserPrivacy not implemented")
}
func (UnimplementedUserServerServiceServer) GetUserPrivacy(context.Context, *GetPrivacyReq) (*GetPrivacyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPrivacy not implemented")
}
func (UnimplementedUserServerServiceServer) CheckUserPrivacy(context.Context, *CheckPrivacyReq) (*CheckPrivacyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserPrivacy not implemented")
}
func (UnimplementedUserServerServiceServer) GetNotifySettings(context.Context, *GetNotifySettingsReq) (*GetNotifySettingsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifySettings not implemented")
}
func (UnimplementedUserServerServiceServer) UpdateNotifySettings(context.Context, *UpdateNotifySettingsReq) (*UpdateNotifySettingsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotifySettings not implemented")
}
func (UnimplementedUserServerServiceServer) GetUserGps(context.Context, *GetUserGpsReq) (*GetUserGpsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserGps not implemented")
}
func (UnimplementedUserServerServiceServer) UpdateSwitch(context.Context, *UpdateSwitchReq) (*UpdateSwitchResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSwitch not implemented")
}
func (UnimplementedUserServerServiceServer) GetSwitchStatus(context.Context, *GetSwitchStatusReq) (*GetSwitchStatusResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSwitchStatus not implemented")
}
func (UnimplementedUserServerServiceServer) GetSwitchVersion(context.Context, *GetSwitchVersionReq) (*GetSwitchVersionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSwitchVersion not implemented")
}
func (UnimplementedUserServerServiceServer) GetUserExpansion(context.Context, *GetUserExpansionReq) (*GetUserExpansionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserExpansion not implemented")
}
func (UnimplementedUserServerServiceServer) UserExpansionSet(context.Context, *UserExpansionSetReq) (*UserExpansionSetResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserExpansionSet not implemented")
}
func (UnimplementedUserServerServiceServer) UserExpansionFind(context.Context, *UserExpansionFindReq) (*UserExpansionFindResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserExpansionFind not implemented")
}
func (UnimplementedUserServerServiceServer) GetUserInfoExtend(context.Context, *GetUserInfoExtendReq) (*GetUserInfoExtendResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoExtend not implemented")
}
func (UnimplementedUserServerServiceServer) CheckUserSpaicl(context.Context, *CheckUserSpaiclReq) (*CheckUserSpaiclResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserSpaicl not implemented")
}
func (UnimplementedUserServerServiceServer) InsertUSerSpaicl(context.Context, *InsertUSerSpaiclReq) (*InsertUSerSpaiclResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertUSerSpaicl not implemented")
}
func (UnimplementedUserServerServiceServer) DelUSerSpaicl(context.Context, *DelUSerSpaiclReq) (*DelUSerSpaiclResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUSerSpaicl not implemented")
}
func (UnimplementedUserServerServiceServer) GetAllUSerSpaicl(context.Context, *GetAllUSerSpaiclReq) (*GetAllUSerSpaiclResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUSerSpaicl not implemented")
}
func (UnimplementedUserServerServiceServer) UserIpAddOrUpdate(context.Context, *UserIpAddOrUpdateReq) (*UserIpAddOrUpdateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserIpAddOrUpdate not implemented")
}
func (UnimplementedUserServerServiceServer) GetUserIpByAddr(context.Context, *GetUserIpByAddrReq) (*GetUserIpByAddrResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIpByAddr not implemented")
}
func (UnimplementedUserServerServiceServer) GetUserIpByUserId(context.Context, *GetUserIpByUserIdReq) (*GetUserIpByUserIdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIpByUserId not implemented")
}
func (UnimplementedUserServerServiceServer) GetRelationUsers(context.Context, *GetRelationUsersReq) (*GetRelationUsersResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelationUsers not implemented")
}
func (UnimplementedUserServerServiceServer) SetUserUnsubscribe(context.Context, *SetUserUnsubscribeReq) (*SetUserUnsubscribeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserUnsubscribe not implemented")
}
func (UnimplementedUserServerServiceServer) GetUserUnsubscribe(context.Context, *GetUserUnsubscribeReq) (*GetUserUnsubscribeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserUnsubscribe not implemented")
}
func (UnimplementedUserServerServiceServer) RecvLockerAddUserId(context.Context, *RecvLockerAddUserIdReq) (*RecvLockerAddUserIdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecvLockerAddUserId not implemented")
}
func (UnimplementedUserServerServiceServer) RecvLockerDelUserId(context.Context, *RecvLockerDelUserIdReq) (*RecvLockerDelUserIdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecvLockerDelUserId not implemented")
}
func (UnimplementedUserServerServiceServer) RecvLockerGetUserIds(context.Context, *RecvLockerGetUserIdsReq) (*RecvLockerGetUserIdsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecvLockerGetUserIds not implemented")
}
func (UnimplementedUserServerServiceServer) CheckDigitalWalletSwitch(context.Context, *CheckDigitalWalletSwitchReq) (*CheckDigitalWalletSwitchResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDigitalWalletSwitch not implemented")
}
func (UnimplementedUserServerServiceServer) AddLoginDay(context.Context, *AddLoginDayReq) (*AddLoginDayResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLoginDay not implemented")
}
func (UnimplementedUserServerServiceServer) GetCustomerList(context.Context, *GetCustomerListReq) (*GetCustomerListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerList not implemented")
}
func (UnimplementedUserServerServiceServer) IsCustomerByUserId(context.Context, *IsCustomerByUserIdReq) (*IsCustomerByUserIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsCustomerByUserId not implemented")
}
func (UnimplementedUserServerServiceServer) GetCustomerOrientUsers(context.Context, *GetCustomerOrientUsersReq) (*GetCustomerOrientUsersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerOrientUsers not implemented")
}
func (UnimplementedUserServerServiceServer) CheckSpecialUser(context.Context, *CheckSpecialUserReq) (*CheckSpecialUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSpecialUser not implemented")
}
func (UnimplementedUserServerServiceServer) GetForceGroupList(context.Context, *GetForceGroupListReq) (*GetForceGroupListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForceGroupList not implemented")
}
func (UnimplementedUserServerServiceServer) GetNotForceGroupList(context.Context, *GetNotForceGroupListReq) (*GetNotForceGroupListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotForceGroupList not implemented")
}
func (UnimplementedUserServerServiceServer) GetPhoneBookInfos(context.Context, *GetPhoneBookInfosReq) (*GetPhoneBookInfosResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPhoneBookInfos not implemented")
}
func (UnimplementedUserServerServiceServer) PassWordRegistry(context.Context, *PassWordRegistryReq) (*PassWordRegistryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PassWordRegistry not implemented")
}
func (UnimplementedUserServerServiceServer) RegistryUserByUsername(context.Context, *RegistryUserByUsernameReq) (*RegistryUserByUsernameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistryUserByUsername not implemented")
}
func (UnimplementedUserServerServiceServer) PassWordLogin(context.Context, *PassWordLoginReq) (*PassWordLoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PassWordLogin not implemented")
}
func (UnimplementedUserServerServiceServer) ChangePassWord(context.Context, *ChangePassWordReq) (*ChangePassWordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassWord not implemented")
}
func (UnimplementedUserServerServiceServer) CheckIsSelfContact(context.Context, *CheckIsSelfContactReq) (*CheckIsSelfContactResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIsSelfContact not implemented")
}
func (UnimplementedUserServerServiceServer) ChkCdnVip(context.Context, *ChkCdnVipReq) (*ChkCdnVipRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChkCdnVip not implemented")
}
func (UnimplementedUserServerServiceServer) AddCdnVip(context.Context, *AddCdnVipReq) (*AddCdnVipRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCdnVip not implemented")
}
func (UnimplementedUserServerServiceServer) BuyCdnVip(context.Context, *BuyCdnVipReq) (*BuyCdnVipRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyCdnVip not implemented")
}
func (UnimplementedUserServerServiceServer) SetCdnVipAutoPay(context.Context, *SetCdnVipAutoPayReq) (*SetCdnVipAutoPayRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCdnVipAutoPay not implemented")
}
func (UnimplementedUserServerServiceServer) GetUserCdnVipInfo(context.Context, *GetUserCdnVipInfoReq) (*GetUserCdnVipInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCdnVipInfo not implemented")
}
func (UnimplementedUserServerServiceServer) GetUserCdnPayList(context.Context, *GetUserCdnPayListReq) (*GetUserCdnPayListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCdnPayList not implemented")
}
func (UnimplementedUserServerServiceServer) GenVitulaPhoneNumbers(context.Context, *GenVitulaPhoneNumbersReq) (*GenVitulaPhoneNumbersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenVitulaPhoneNumbers not implemented")
}
func (UnimplementedUserServerServiceServer) GetVitulPhoneNumbers(context.Context, *GetVitulPhoneNumbersReq) (*GetVitulPhoneNumbersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVitulPhoneNumbers not implemented")
}
func (UnimplementedUserServerServiceServer) GetAllVitualUsersByFlags(context.Context, *GetAllVitualUsersByFlagsReq) (*GetAllVitualUsersByFlagsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllVitualUsersByFlags not implemented")
}
func (UnimplementedUserServerServiceServer) CheckIsVitulaPhone(context.Context, *CheckIsVitulaPhoneReq) (*CheckIsVitulaPhoneResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIsVitulaPhone not implemented")
}
func (UnimplementedUserServerServiceServer) SignUpVitual(context.Context, *SignUpVitualReq) (*SignUpVitualResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUpVitual not implemented")
}
func (UnimplementedUserServerServiceServer) CheckIsVitulaPhoneArr(context.Context, *CheckIsVitulaPhoneArrReq) (*CheckIsVitulaPhoneArrResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIsVitulaPhoneArr not implemented")
}
func (UnimplementedUserServerServiceServer) CheckIsPhoneVitulaPhone(context.Context, *CheckIsPhoneVitulaPhoneReq) (*CheckIsPhoneVitulaPhoneResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIsPhoneVitulaPhone not implemented")
}
func (UnimplementedUserServerServiceServer) JoinGroupCheck(context.Context, *JoinGroupCheckReq) (*JoinGroupCheckRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGroupCheck not implemented")
}
func (UnimplementedUserServerServiceServer) VitualCheckCanAddContact(context.Context, *VitualCheckCanAddContactReq) (*VitualCheckCanAddContactResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VitualCheckCanAddContact not implemented")
}
func (UnimplementedUserServerServiceServer) GetVitualSendCodeChannel(context.Context, *GetVitualSendCodeChannelReq) (*GetVitualSendCodeChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVitualSendCodeChannel not implemented")
}
func (UnimplementedUserServerServiceServer) BindVitualSendCodeChannel(context.Context, *BindVitualSendCodeChannelReq) (*BindVitualSendCodeChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindVitualSendCodeChannel not implemented")
}
func (UnimplementedUserServerServiceServer) VirtualBindRealPhone(context.Context, *VirtualBindRealPhoneReq) (*VirtualBindRealPhoneRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtualBindRealPhone not implemented")
}
func (UnimplementedUserServerServiceServer) VirtualAddContactByPhone(context.Context, *VirtualAddContactByPhoneReq) (*VirtualAddContactByPhoneRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtualAddContactByPhone not implemented")
}
func (UnimplementedUserServerServiceServer) GetVirtualBindByPhone(context.Context, *GetVirtualBindByPhoneReq) (*GetVirtualBindByPhoneRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVirtualBindByPhone not implemented")
}
func (UnimplementedUserServerServiceServer) AddUserAdmin(context.Context, *AddUserAdminReq) (*AddUserAdminResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserAdmin not implemented")
}
func (UnimplementedUserServerServiceServer) GetuserAdminInfo(context.Context, *GetuserAdminInfoReq) (*GetuserAdminInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetuserAdminInfo not implemented")
}
func (UnimplementedUserServerServiceServer) SearchPrettyNumber(context.Context, *SearchPrettyNumberReq) (*SearchPrettyNumberRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPrettyNumber not implemented")
}
func (UnimplementedUserServerServiceServer) ActivePrettyNumber(context.Context, *ActivePrettyNumberReq) (*ActivePrettyNumberRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivePrettyNumber not implemented")
}
func (UnimplementedUserServerServiceServer) GetUserRoleInfoByIds(context.Context, *GetUserRoleInfoByIdsReq) (*GetUserRoleInfoByIdsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRoleInfoByIds not implemented")
}
func (UnimplementedUserServerServiceServer) InnerUserOp(context.Context, *InnerUserOpReq) (*InnerUserOpRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InnerUserOp not implemented")
}
func (UnimplementedUserServerServiceServer) BindRealPhone(context.Context, *BindRealPhoneReq) (*BindRealPhoneRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindRealPhone not implemented")
}
func (UnimplementedUserServerServiceServer) GetUserRelationWithIds(context.Context, *GetUserRelationWithIdsReq) (*GetUserRelationWithIdsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRelationWithIds not implemented")
}
func (UnimplementedUserServerServiceServer) UpdateUserVerified(context.Context, *UpdateUserVerifiedReq) (*UpdateUserVerifiedResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserVerified not implemented")
}
func (UnimplementedUserServerServiceServer) mustEmbedUnimplementedUserServerServiceServer() {}

// UnsafeUserServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServerServiceServer will
// result in compilation errors.
type UnsafeUserServerServiceServer interface {
	mustEmbedUnimplementedUserServerServiceServer()
}

func RegisterUserServerServiceServer(s grpc.ServiceRegistrar, srv UserServerServiceServer) {
	s.RegisterService(&UserServerService_ServiceDesc, srv)
}

func _UserServerService_InviteCodeBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteCodeBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).InviteCodeBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/InviteCodeBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).InviteCodeBind(ctx, req.(*InviteCodeBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_MyTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyTeamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).MyTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/MyTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).MyTeam(ctx, req.(*MyTeamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_RealNameCertification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealNameCertificationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).RealNameCertification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/RealNameCertification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).RealNameCertification(ctx, req.(*RealNameCertificationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetCertificationResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCertificationResultReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetCertificationResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetCertificationResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetCertificationResult(ctx, req.(*GetCertificationResultReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_VerifyCertification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyCertificationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).VerifyCertification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/VerifyCertification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).VerifyCertification(ctx, req.(*VerifyCertificationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserDetailV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserDetailV1Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserDetailV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateUserDetailV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserDetailV1(ctx, req.(*UpdateUserDetailV1Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_AddPhoneBookContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPhoneBookContactsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).AddPhoneBookContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/AddPhoneBookContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).AddPhoneBookContacts(ctx, req.(*AddPhoneBookContactsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_SignUpV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpV1Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).SignUpV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/SignUpV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).SignUpV1(ctx, req.(*SignUpV1Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserTypeLable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserTypeLableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserTypeLable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateUserTypeLable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserTypeLable(ctx, req.(*UpdateUserTypeLableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateUserDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserDetail(ctx, req.(*UpdateUserDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserDetailBirthday_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserDetailBirthdayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserDetailBirthday(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateUserDetailBirthday",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserDetailBirthday(ctx, req.(*UpdateUserDetailBirthdayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_SetUserDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).SetUserDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/SetUserDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).SetUserDetail(ctx, req.(*SetUserDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckUserHasPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserHasPayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckUserHasPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/CheckUserHasPay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckUserHasPay(ctx, req.(*CheckUserHasPayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserHasPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserHasPayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserHasPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateUserHasPay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserHasPay(ctx, req.(*UpdateUserHasPayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetViplogPhoneList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetViplogPhoneListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetViplogPhoneList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetViplogPhoneList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetViplogPhoneList(ctx, req.(*GetViplogPhoneListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_RegisterUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).RegisterUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/RegisterUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).RegisterUserInfo(ctx, req.(*RegisterUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetUserInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserInfoById(ctx, req.(*GetUserInfoByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserInfoByIdArr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoByIdArrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserInfoByIdArr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetUserInfoByIdArr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserInfoByIdArr(ctx, req.(*GetUserInfoByIdArrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserExpierById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserExpireByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserExpierById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetUserExpierById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserExpierById(ctx, req.(*GetUserExpireByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserInfoByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByphone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserInfoByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetUserInfoByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserInfoByPhone(ctx, req.(*GetUserByphone))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserInfoByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserInfoByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetUserInfoByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserInfoByUsername(ctx, req.(*GetUserByUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePhotoInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateUserPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserPhoto(ctx, req.(*UpdatePhotoInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPhotoInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetUserPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserPhoto(ctx, req.(*GetPhotoInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateUserStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserStatus(ctx, req.(*StatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserStatusV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserStatusV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateUserStatusV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserStatusV2(ctx, req.(*StatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserExpire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExpireReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserExpire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateUserExpire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserExpire(ctx, req.(*UpdateExpireReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserClusterChange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateUserCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserCluster(ctx, req.(*UserClusterChange))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateuserNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserName(ctx, req.(*UpdateuserNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserLevelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateUserLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserLevel(ctx, req.(*UpdateUserLevelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserExtion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserExtionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserExtion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateUserExtion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserExtion(ctx, req.(*UpdateUserExtionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckUserNameOccupied_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserNameOccupiedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckUserNameOccupied(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/CheckUserNameOccupied",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckUserNameOccupied(ctx, req.(*CheckUserNameOccupiedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckPhoneRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPhoneRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckPhoneRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/CheckPhoneRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckPhoneRegister(ctx, req.(*CheckPhoneRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DeleteUserInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DeleteUserInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/DeleteUserInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DeleteUserInfoById(ctx, req.(*DeleteAccountByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateBotInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotUpdateInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateBotInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateBotInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateBotInfo(ctx, req.(*BotUpdateInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateBotPic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBotPicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateBotPic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateBotPic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateBotPic(ctx, req.(*UpdateBotPicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckUserAccessHashValid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserAccessHashValidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckUserAccessHashValid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/CheckUserAccessHashValid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckUserAccessHashValid(ctx, req.(*CheckUserAccessHashValidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_QueryUpdatesByUserid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUpdatesByUseridReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).QueryUpdatesByUserid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/QueryUpdatesByUserid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).QueryUpdatesByUserid(ctx, req.(*QueryUpdatesByUseridReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetFullUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFullUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetFullUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetFullUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetFullUser(ctx, req.(*GetFullUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_HistoryChangePhoneAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryChangePhoneAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).HistoryChangePhoneAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/HistoryChangePhoneAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).HistoryChangePhoneAdd(ctx, req.(*HistoryChangePhoneAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_AccountChangePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).AccountChangePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/AccountChangePhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).AccountChangePhone(ctx, req.(*ChangePhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserProfile(ctx, req.(*UpdateUserProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_SearchUserByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserByPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).SearchUserByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/SearchUserByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).SearchUserByPhone(ctx, req.(*SearchUserByPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ContactsGetCommonContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactsGetCommonContactsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ContactsGetCommonContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/ContactsGetCommonContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ContactsGetCommonContacts(ctx, req.(*ContactsGetCommonContactsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_SearchUserByNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserByNicknameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).SearchUserByNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/SearchUserByNickname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).SearchUserByNickname(ctx, req.(*SearchUserByNicknameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DeleteUserUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserUsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DeleteUserUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/DeleteUserUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DeleteUserUsername(ctx, req.(*DeleteUserUsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateBotInfoSupp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBotInfoSuppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateBotInfoSupp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateBotInfoSupp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateBotInfoSupp(ctx, req.(*UpdateBotInfoSuppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckIsMuteContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIsMuteContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckIsMuteContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/CheckIsMuteContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckIsMuteContact(ctx, req.(*CheckIsMuteContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ContactsDelContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ContactsDelContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/ContactsDelContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ContactsDelContact(ctx, req.(*DelContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_AcceptContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).AcceptContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/AcceptContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).AcceptContact(ctx, req.(*AcceptContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ContactsDelContactsArr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelContactArrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ContactsDelContactsArr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/ContactsDelContactsArr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ContactsDelContactsArr(ctx, req.(*DelContactArrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CmdResetUserContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdResetUserContactsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CmdResetUserContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/CmdResetUserContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CmdResetUserContacts(ctx, req.(*CmdResetUserContactsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ContactsGetContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContatsGetContactsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ContactsGetContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/ContactsGetContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ContactsGetContacts(ctx, req.(*ContatsGetContactsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ContactsGetContactsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactsGetContactsV1Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ContactsGetContactsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/ContactsGetContactsV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ContactsGetContactsV1(ctx, req.(*ContactsGetContactsV1Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetContactsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactsV1Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetContactsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetContactsV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetContactsV1(ctx, req.(*GetContactsV1Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ContactsGetContactsId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactsGetContactsIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ContactsGetContactsId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/ContactsGetContactsId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ContactsGetContactsId(ctx, req.(*ContactsGetContactsIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ImportContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactsImportPhoneContactsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ImportContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/ImportContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ImportContacts(ctx, req.(*ContactsImportPhoneContactsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetContactsStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactsStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetContactsStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetContactsStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetContactsStatus(ctx, req.(*GetContactsStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckSelfIsContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSelfIsContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckSelfIsContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/CheckSelfIsContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckSelfIsContact(ctx, req.(*CheckSelfIsContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckIsMutualContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIsMutualContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckIsMutualContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/CheckIsMutualContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckIsMutualContact(ctx, req.(*CheckIsMutualContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DialogUserRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRelationIdInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DialogUserRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/DialogUserRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DialogUserRelation(ctx, req.(*AddRelationIdInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DelDialogUserRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRelationIdInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DelDialogUserRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/DelDialogUserRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DelDialogUserRelation(ctx, req.(*DelRelationIdInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UploadContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadContactsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UploadContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UploadContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UploadContacts(ctx, req.(*UploadContactsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ApplyContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ApplyContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/ApplyContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ApplyContact(ctx, req.(*ApplyContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ContactsGreetApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactsGreetApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ContactsGreetApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/ContactsGreetApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ContactsGreetApply(ctx, req.(*ContactsGreetApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_VerifyContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).VerifyContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/VerifyContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).VerifyContact(ctx, req.(*VerifyContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetAppliedContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppliedContactsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetAppliedContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetAppliedContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetAppliedContacts(ctx, req.(*GetAppliedContactsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DeleteAppliedHistoryContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppliedHistoryContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DeleteAppliedHistoryContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/DeleteAppliedHistoryContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DeleteAppliedHistoryContact(ctx, req.(*DeleteAppliedHistoryContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DeleteAppliedSomeContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppliedSomeContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DeleteAppliedSomeContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/DeleteAppliedSomeContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DeleteAppliedSomeContact(ctx, req.(*DeleteAppliedSomeContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DeleteReceiveApplies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReceiveAppliesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DeleteReceiveApplies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/DeleteReceiveApplies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DeleteReceiveApplies(ctx, req.(*DeleteReceiveAppliesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ReadAppliedHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAppliedHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ReadAppliedHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/ReadAppliedHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ReadAppliedHistory(ctx, req.(*ReadAppliedHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetContactsApplyDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactsApplyDifferenceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetContactsApplyDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetContactsApplyDifference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetContactsApplyDifference(ctx, req.(*GetContactsApplyDifferenceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetContactsApplyDifferenceV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactsApplyDifferenceV2Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetContactsApplyDifferenceV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetContactsApplyDifferenceV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetContactsApplyDifferenceV2(ctx, req.(*GetContactsApplyDifferenceV2Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckSearchUserCountLimited_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSearchUserCountLimitedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckSearchUserCountLimited(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/CheckSearchUserCountLimited",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckSearchUserCountLimited(ctx, req.(*CheckSearchUserCountLimitedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CreateGroup(ctx, req.(*CreateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_SetUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).SetUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/SetUserGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).SetUserGroup(ctx, req.(*SetUserGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ChangeGroupName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeGroupNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ChangeGroupName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/ChangeGroupName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ChangeGroupName(ctx, req.(*ChangeGroupNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ChangeGroupOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeGroupOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ChangeGroupOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/ChangeGroupOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ChangeGroupOrder(ctx, req.(*ChangeGroupOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DeleteGroup(ctx, req.(*DeleteGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DeleteGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DeleteGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/DeleteGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DeleteGroups(ctx, req.(*DeleteGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_BlockedUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockeduserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).BlockedUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/BlockedUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).BlockedUser(ctx, req.(*BlockeduserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ContactUnBlockedUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactUnblockedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ContactUnBlockedUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/ContactUnBlockedUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ContactUnBlockedUser(ctx, req.(*ContactUnblockedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ContactsGetBlocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactsGetBlockedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ContactsGetBlocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/ContactsGetBlocked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ContactsGetBlocked(ctx, req.(*ContactsGetBlockedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckUserIsBlocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserIsBlockedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckUserIsBlocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/CheckUserIsBlocked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckUserIsBlocked(ctx, req.(*CheckUserIsBlockedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_StoreSystemWhiteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreSysWhiteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).StoreSystemWhiteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/StoreSystemWhiteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).StoreSystemWhiteUser(ctx, req.(*StoreSysWhiteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateSystemWhiteUserLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSystemWhiteUserLevelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateSystemWhiteUserLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateSystemWhiteUserLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateSystemWhiteUserLevel(ctx, req.(*UpdateSystemWhiteUserLevelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetSysWhiteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSysWhiteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetSysWhiteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetSysWhiteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetSysWhiteUser(ctx, req.(*GetSysWhiteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetSysWhiteUserArr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSysWhiteUserArrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetSysWhiteUserArr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetSysWhiteUserArr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetSysWhiteUserArr(ctx, req.(*GetSysWhiteUserArrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DelSysWhiteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSysWhiteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DelSysWhiteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/DelSysWhiteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DelSysWhiteUser(ctx, req.(*DelSysWhiteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetAllUserDc_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllDcReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServerServiceServer).GetAllUserDc(m, &userServerServiceGetAllUserDcServer{stream})
}

type UserServerService_GetAllUserDcServer interface {
	Send(*UserDc) error
	grpc.ServerStream
}

type userServerServiceGetAllUserDcServer struct {
	grpc.ServerStream
}

func (x *userServerServiceGetAllUserDcServer) Send(m *UserDc) error {
	return x.ServerStream.SendMsg(m)
}

func _UserServerService_SetUserPrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPrivacyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).SetUserPrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/SetUserPrivacy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).SetUserPrivacy(ctx, req.(*SetPrivacyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserPrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrivacyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserPrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetUserPrivacy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserPrivacy(ctx, req.(*GetPrivacyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckUserPrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPrivacyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckUserPrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/CheckUserPrivacy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckUserPrivacy(ctx, req.(*CheckPrivacyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetNotifySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotifySettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetNotifySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetNotifySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetNotifySettings(ctx, req.(*GetNotifySettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateNotifySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotifySettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateNotifySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateNotifySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateNotifySettings(ctx, req.(*UpdateNotifySettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserGps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserGpsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserGps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetUserGps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserGps(ctx, req.(*GetUserGpsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSwitchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateSwitch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateSwitch(ctx, req.(*UpdateSwitchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetSwitchStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSwitchStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetSwitchStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetSwitchStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetSwitchStatus(ctx, req.(*GetSwitchStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetSwitchVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSwitchVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetSwitchVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetSwitchVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetSwitchVersion(ctx, req.(*GetSwitchVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserExpansion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserExpansionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserExpansion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetUserExpansion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserExpansion(ctx, req.(*GetUserExpansionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UserExpansionSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserExpansionSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UserExpansionSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UserExpansionSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UserExpansionSet(ctx, req.(*UserExpansionSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UserExpansionFind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserExpansionFindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UserExpansionFind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UserExpansionFind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UserExpansionFind(ctx, req.(*UserExpansionFindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserInfoExtend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoExtendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserInfoExtend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetUserInfoExtend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserInfoExtend(ctx, req.(*GetUserInfoExtendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckUserSpaicl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserSpaiclReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckUserSpaicl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/CheckUserSpaicl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckUserSpaicl(ctx, req.(*CheckUserSpaiclReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_InsertUSerSpaicl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertUSerSpaiclReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).InsertUSerSpaicl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/InsertUSerSpaicl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).InsertUSerSpaicl(ctx, req.(*InsertUSerSpaiclReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DelUSerSpaicl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUSerSpaiclReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DelUSerSpaicl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/DelUSerSpaicl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DelUSerSpaicl(ctx, req.(*DelUSerSpaiclReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetAllUSerSpaicl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUSerSpaiclReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetAllUSerSpaicl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetAllUSerSpaicl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetAllUSerSpaicl(ctx, req.(*GetAllUSerSpaiclReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UserIpAddOrUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIpAddOrUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UserIpAddOrUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UserIpAddOrUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UserIpAddOrUpdate(ctx, req.(*UserIpAddOrUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserIpByAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserIpByAddrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserIpByAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetUserIpByAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserIpByAddr(ctx, req.(*GetUserIpByAddrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserIpByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserIpByUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserIpByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetUserIpByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserIpByUserId(ctx, req.(*GetUserIpByUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetRelationUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRelationUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetRelationUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetRelationUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetRelationUsers(ctx, req.(*GetRelationUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_SetUserUnsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserUnsubscribeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).SetUserUnsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/SetUserUnsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).SetUserUnsubscribe(ctx, req.(*SetUserUnsubscribeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserUnsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserUnsubscribeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserUnsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetUserUnsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserUnsubscribe(ctx, req.(*GetUserUnsubscribeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_RecvLockerAddUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecvLockerAddUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).RecvLockerAddUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/RecvLockerAddUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).RecvLockerAddUserId(ctx, req.(*RecvLockerAddUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_RecvLockerDelUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecvLockerDelUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).RecvLockerDelUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/RecvLockerDelUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).RecvLockerDelUserId(ctx, req.(*RecvLockerDelUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_RecvLockerGetUserIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecvLockerGetUserIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).RecvLockerGetUserIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/RecvLockerGetUserIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).RecvLockerGetUserIds(ctx, req.(*RecvLockerGetUserIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckDigitalWalletSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckDigitalWalletSwitchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckDigitalWalletSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/CheckDigitalWalletSwitch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckDigitalWalletSwitch(ctx, req.(*CheckDigitalWalletSwitchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_AddLoginDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLoginDayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).AddLoginDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/AddLoginDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).AddLoginDay(ctx, req.(*AddLoginDayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetCustomerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetCustomerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetCustomerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetCustomerList(ctx, req.(*GetCustomerListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_IsCustomerByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsCustomerByUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).IsCustomerByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/IsCustomerByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).IsCustomerByUserId(ctx, req.(*IsCustomerByUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetCustomerOrientUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerOrientUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetCustomerOrientUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetCustomerOrientUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetCustomerOrientUsers(ctx, req.(*GetCustomerOrientUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckSpecialUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSpecialUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckSpecialUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/CheckSpecialUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckSpecialUser(ctx, req.(*CheckSpecialUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetForceGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetForceGroupListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetForceGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetForceGroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetForceGroupList(ctx, req.(*GetForceGroupListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetNotForceGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotForceGroupListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetNotForceGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetNotForceGroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetNotForceGroupList(ctx, req.(*GetNotForceGroupListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetPhoneBookInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPhoneBookInfosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetPhoneBookInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetPhoneBookInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetPhoneBookInfos(ctx, req.(*GetPhoneBookInfosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_PassWordRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassWordRegistryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).PassWordRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/PassWordRegistry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).PassWordRegistry(ctx, req.(*PassWordRegistryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_RegistryUserByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistryUserByUsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).RegistryUserByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/RegistryUserByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).RegistryUserByUsername(ctx, req.(*RegistryUserByUsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_PassWordLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassWordLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).PassWordLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/PassWordLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).PassWordLogin(ctx, req.(*PassWordLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ChangePassWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePassWordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ChangePassWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/ChangePassWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ChangePassWord(ctx, req.(*ChangePassWordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckIsSelfContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIsSelfContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckIsSelfContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/CheckIsSelfContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckIsSelfContact(ctx, req.(*CheckIsSelfContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ChkCdnVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChkCdnVipReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ChkCdnVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/ChkCdnVip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ChkCdnVip(ctx, req.(*ChkCdnVipReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_AddCdnVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCdnVipReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).AddCdnVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/AddCdnVip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).AddCdnVip(ctx, req.(*AddCdnVipReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_BuyCdnVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyCdnVipReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).BuyCdnVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/BuyCdnVip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).BuyCdnVip(ctx, req.(*BuyCdnVipReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_SetCdnVipAutoPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCdnVipAutoPayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).SetCdnVipAutoPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/SetCdnVipAutoPay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).SetCdnVipAutoPay(ctx, req.(*SetCdnVipAutoPayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserCdnVipInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCdnVipInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserCdnVipInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetUserCdnVipInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserCdnVipInfo(ctx, req.(*GetUserCdnVipInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserCdnPayList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCdnPayListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserCdnPayList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetUserCdnPayList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserCdnPayList(ctx, req.(*GetUserCdnPayListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GenVitulaPhoneNumbers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenVitulaPhoneNumbersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GenVitulaPhoneNumbers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GenVitulaPhoneNumbers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GenVitulaPhoneNumbers(ctx, req.(*GenVitulaPhoneNumbersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetVitulPhoneNumbers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVitulPhoneNumbersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetVitulPhoneNumbers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetVitulPhoneNumbers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetVitulPhoneNumbers(ctx, req.(*GetVitulPhoneNumbersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetAllVitualUsersByFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllVitualUsersByFlagsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetAllVitualUsersByFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetAllVitualUsersByFlags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetAllVitualUsersByFlags(ctx, req.(*GetAllVitualUsersByFlagsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckIsVitulaPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIsVitulaPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckIsVitulaPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/CheckIsVitulaPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckIsVitulaPhone(ctx, req.(*CheckIsVitulaPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_SignUpVitual_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpVitualReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).SignUpVitual(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/SignUpVitual",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).SignUpVitual(ctx, req.(*SignUpVitualReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckIsVitulaPhoneArr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIsVitulaPhoneArrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckIsVitulaPhoneArr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/CheckIsVitulaPhoneArr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckIsVitulaPhoneArr(ctx, req.(*CheckIsVitulaPhoneArrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckIsPhoneVitulaPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIsPhoneVitulaPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckIsPhoneVitulaPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/CheckIsPhoneVitulaPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckIsPhoneVitulaPhone(ctx, req.(*CheckIsPhoneVitulaPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_JoinGroupCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGroupCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).JoinGroupCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/JoinGroupCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).JoinGroupCheck(ctx, req.(*JoinGroupCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_VitualCheckCanAddContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VitualCheckCanAddContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).VitualCheckCanAddContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/VitualCheckCanAddContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).VitualCheckCanAddContact(ctx, req.(*VitualCheckCanAddContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetVitualSendCodeChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVitualSendCodeChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetVitualSendCodeChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetVitualSendCodeChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetVitualSendCodeChannel(ctx, req.(*GetVitualSendCodeChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_BindVitualSendCodeChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindVitualSendCodeChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).BindVitualSendCodeChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/BindVitualSendCodeChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).BindVitualSendCodeChannel(ctx, req.(*BindVitualSendCodeChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_VirtualBindRealPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualBindRealPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).VirtualBindRealPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/VirtualBindRealPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).VirtualBindRealPhone(ctx, req.(*VirtualBindRealPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_VirtualAddContactByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualAddContactByPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).VirtualAddContactByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/VirtualAddContactByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).VirtualAddContactByPhone(ctx, req.(*VirtualAddContactByPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetVirtualBindByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVirtualBindByPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetVirtualBindByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetVirtualBindByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetVirtualBindByPhone(ctx, req.(*GetVirtualBindByPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_AddUserAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).AddUserAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/AddUserAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).AddUserAdmin(ctx, req.(*AddUserAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetuserAdminInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetuserAdminInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetuserAdminInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetuserAdminInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetuserAdminInfo(ctx, req.(*GetuserAdminInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_SearchPrettyNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPrettyNumberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).SearchPrettyNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/SearchPrettyNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).SearchPrettyNumber(ctx, req.(*SearchPrettyNumberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ActivePrettyNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivePrettyNumberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ActivePrettyNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/ActivePrettyNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ActivePrettyNumber(ctx, req.(*ActivePrettyNumberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserRoleInfoByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRoleInfoByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserRoleInfoByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetUserRoleInfoByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserRoleInfoByIds(ctx, req.(*GetUserRoleInfoByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_InnerUserOp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InnerUserOpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).InnerUserOp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/InnerUserOp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).InnerUserOp(ctx, req.(*InnerUserOpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_BindRealPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindRealPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).BindRealPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/BindRealPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).BindRealPhone(ctx, req.(*BindRealPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserRelationWithIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRelationWithIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserRelationWithIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetUserRelationWithIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserRelationWithIds(ctx, req.(*GetUserRelationWithIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserVerified_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserVerifiedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserVerified(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateUserVerified",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserVerified(ctx, req.(*UpdateUserVerifiedReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserServerService_ServiceDesc is the grpc.ServiceDesc for UserServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbimuinfoserver.UserServerService",
	HandlerType: (*UserServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InviteCodeBind",
			Handler:    _UserServerService_InviteCodeBind_Handler,
		},
		{
			MethodName: "MyTeam",
			Handler:    _UserServerService_MyTeam_Handler,
		},
		{
			MethodName: "RealNameCertification",
			Handler:    _UserServerService_RealNameCertification_Handler,
		},
		{
			MethodName: "GetCertificationResult",
			Handler:    _UserServerService_GetCertificationResult_Handler,
		},
		{
			MethodName: "VerifyCertification",
			Handler:    _UserServerService_VerifyCertification_Handler,
		},
		{
			MethodName: "UpdateUserDetailV1",
			Handler:    _UserServerService_UpdateUserDetailV1_Handler,
		},
		{
			MethodName: "AddPhoneBookContacts",
			Handler:    _UserServerService_AddPhoneBookContacts_Handler,
		},
		{
			MethodName: "SignUpV1",
			Handler:    _UserServerService_SignUpV1_Handler,
		},
		{
			MethodName: "UpdateUserTypeLable",
			Handler:    _UserServerService_UpdateUserTypeLable_Handler,
		},
		{
			MethodName: "UpdateUserDetail",
			Handler:    _UserServerService_UpdateUserDetail_Handler,
		},
		{
			MethodName: "UpdateUserDetailBirthday",
			Handler:    _UserServerService_UpdateUserDetailBirthday_Handler,
		},
		{
			MethodName: "SetUserDetail",
			Handler:    _UserServerService_SetUserDetail_Handler,
		},
		{
			MethodName: "CheckUserHasPay",
			Handler:    _UserServerService_CheckUserHasPay_Handler,
		},
		{
			MethodName: "UpdateUserHasPay",
			Handler:    _UserServerService_UpdateUserHasPay_Handler,
		},
		{
			MethodName: "GetViplogPhoneList",
			Handler:    _UserServerService_GetViplogPhoneList_Handler,
		},
		{
			MethodName: "RegisterUserInfo",
			Handler:    _UserServerService_RegisterUserInfo_Handler,
		},
		{
			MethodName: "GetUserInfoById",
			Handler:    _UserServerService_GetUserInfoById_Handler,
		},
		{
			MethodName: "GetUserInfoByIdArr",
			Handler:    _UserServerService_GetUserInfoByIdArr_Handler,
		},
		{
			MethodName: "GetUserExpierById",
			Handler:    _UserServerService_GetUserExpierById_Handler,
		},
		{
			MethodName: "GetUserInfoByPhone",
			Handler:    _UserServerService_GetUserInfoByPhone_Handler,
		},
		{
			MethodName: "GetUserInfoByUsername",
			Handler:    _UserServerService_GetUserInfoByUsername_Handler,
		},
		{
			MethodName: "UpdateUserPhoto",
			Handler:    _UserServerService_UpdateUserPhoto_Handler,
		},
		{
			MethodName: "GetUserPhoto",
			Handler:    _UserServerService_GetUserPhoto_Handler,
		},
		{
			MethodName: "UpdateUserStatus",
			Handler:    _UserServerService_UpdateUserStatus_Handler,
		},
		{
			MethodName: "UpdateUserStatusV2",
			Handler:    _UserServerService_UpdateUserStatusV2_Handler,
		},
		{
			MethodName: "UpdateUserExpire",
			Handler:    _UserServerService_UpdateUserExpire_Handler,
		},
		{
			MethodName: "UpdateUserCluster",
			Handler:    _UserServerService_UpdateUserCluster_Handler,
		},
		{
			MethodName: "UpdateUserName",
			Handler:    _UserServerService_UpdateUserName_Handler,
		},
		{
			MethodName: "UpdateUserLevel",
			Handler:    _UserServerService_UpdateUserLevel_Handler,
		},
		{
			MethodName: "UpdateUserExtion",
			Handler:    _UserServerService_UpdateUserExtion_Handler,
		},
		{
			MethodName: "CheckUserNameOccupied",
			Handler:    _UserServerService_CheckUserNameOccupied_Handler,
		},
		{
			MethodName: "CheckPhoneRegister",
			Handler:    _UserServerService_CheckPhoneRegister_Handler,
		},
		{
			MethodName: "DeleteUserInfoById",
			Handler:    _UserServerService_DeleteUserInfoById_Handler,
		},
		{
			MethodName: "UpdateBotInfo",
			Handler:    _UserServerService_UpdateBotInfo_Handler,
		},
		{
			MethodName: "UpdateBotPic",
			Handler:    _UserServerService_UpdateBotPic_Handler,
		},
		{
			MethodName: "CheckUserAccessHashValid",
			Handler:    _UserServerService_CheckUserAccessHashValid_Handler,
		},
		{
			MethodName: "QueryUpdatesByUserid",
			Handler:    _UserServerService_QueryUpdatesByUserid_Handler,
		},
		{
			MethodName: "GetFullUser",
			Handler:    _UserServerService_GetFullUser_Handler,
		},
		{
			MethodName: "HistoryChangePhoneAdd",
			Handler:    _UserServerService_HistoryChangePhoneAdd_Handler,
		},
		{
			MethodName: "AccountChangePhone",
			Handler:    _UserServerService_AccountChangePhone_Handler,
		},
		{
			MethodName: "UpdateUserProfile",
			Handler:    _UserServerService_UpdateUserProfile_Handler,
		},
		{
			MethodName: "SearchUserByPhone",
			Handler:    _UserServerService_SearchUserByPhone_Handler,
		},
		{
			MethodName: "ContactsGetCommonContacts",
			Handler:    _UserServerService_ContactsGetCommonContacts_Handler,
		},
		{
			MethodName: "SearchUserByNickname",
			Handler:    _UserServerService_SearchUserByNickname_Handler,
		},
		{
			MethodName: "DeleteUserUsername",
			Handler:    _UserServerService_DeleteUserUsername_Handler,
		},
		{
			MethodName: "UpdateBotInfoSupp",
			Handler:    _UserServerService_UpdateBotInfoSupp_Handler,
		},
		{
			MethodName: "CheckIsMuteContact",
			Handler:    _UserServerService_CheckIsMuteContact_Handler,
		},
		{
			MethodName: "ContactsDelContact",
			Handler:    _UserServerService_ContactsDelContact_Handler,
		},
		{
			MethodName: "AcceptContact",
			Handler:    _UserServerService_AcceptContact_Handler,
		},
		{
			MethodName: "ContactsDelContactsArr",
			Handler:    _UserServerService_ContactsDelContactsArr_Handler,
		},
		{
			MethodName: "CmdResetUserContacts",
			Handler:    _UserServerService_CmdResetUserContacts_Handler,
		},
		{
			MethodName: "ContactsGetContacts",
			Handler:    _UserServerService_ContactsGetContacts_Handler,
		},
		{
			MethodName: "ContactsGetContactsV1",
			Handler:    _UserServerService_ContactsGetContactsV1_Handler,
		},
		{
			MethodName: "GetContactsV1",
			Handler:    _UserServerService_GetContactsV1_Handler,
		},
		{
			MethodName: "ContactsGetContactsId",
			Handler:    _UserServerService_ContactsGetContactsId_Handler,
		},
		{
			MethodName: "ImportContacts",
			Handler:    _UserServerService_ImportContacts_Handler,
		},
		{
			MethodName: "GetContactsStatus",
			Handler:    _UserServerService_GetContactsStatus_Handler,
		},
		{
			MethodName: "CheckSelfIsContact",
			Handler:    _UserServerService_CheckSelfIsContact_Handler,
		},
		{
			MethodName: "CheckIsMutualContact",
			Handler:    _UserServerService_CheckIsMutualContact_Handler,
		},
		{
			MethodName: "DialogUserRelation",
			Handler:    _UserServerService_DialogUserRelation_Handler,
		},
		{
			MethodName: "DelDialogUserRelation",
			Handler:    _UserServerService_DelDialogUserRelation_Handler,
		},
		{
			MethodName: "UploadContacts",
			Handler:    _UserServerService_UploadContacts_Handler,
		},
		{
			MethodName: "ApplyContact",
			Handler:    _UserServerService_ApplyContact_Handler,
		},
		{
			MethodName: "ContactsGreetApply",
			Handler:    _UserServerService_ContactsGreetApply_Handler,
		},
		{
			MethodName: "VerifyContact",
			Handler:    _UserServerService_VerifyContact_Handler,
		},
		{
			MethodName: "GetAppliedContacts",
			Handler:    _UserServerService_GetAppliedContacts_Handler,
		},
		{
			MethodName: "DeleteAppliedHistoryContact",
			Handler:    _UserServerService_DeleteAppliedHistoryContact_Handler,
		},
		{
			MethodName: "DeleteAppliedSomeContact",
			Handler:    _UserServerService_DeleteAppliedSomeContact_Handler,
		},
		{
			MethodName: "DeleteReceiveApplies",
			Handler:    _UserServerService_DeleteReceiveApplies_Handler,
		},
		{
			MethodName: "ReadAppliedHistory",
			Handler:    _UserServerService_ReadAppliedHistory_Handler,
		},
		{
			MethodName: "GetContactsApplyDifference",
			Handler:    _UserServerService_GetContactsApplyDifference_Handler,
		},
		{
			MethodName: "GetContactsApplyDifferenceV2",
			Handler:    _UserServerService_GetContactsApplyDifferenceV2_Handler,
		},
		{
			MethodName: "CheckSearchUserCountLimited",
			Handler:    _UserServerService_CheckSearchUserCountLimited_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _UserServerService_CreateGroup_Handler,
		},
		{
			MethodName: "SetUserGroup",
			Handler:    _UserServerService_SetUserGroup_Handler,
		},
		{
			MethodName: "ChangeGroupName",
			Handler:    _UserServerService_ChangeGroupName_Handler,
		},
		{
			MethodName: "ChangeGroupOrder",
			Handler:    _UserServerService_ChangeGroupOrder_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _UserServerService_DeleteGroup_Handler,
		},
		{
			MethodName: "DeleteGroups",
			Handler:    _UserServerService_DeleteGroups_Handler,
		},
		{
			MethodName: "BlockedUser",
			Handler:    _UserServerService_BlockedUser_Handler,
		},
		{
			MethodName: "ContactUnBlockedUser",
			Handler:    _UserServerService_ContactUnBlockedUser_Handler,
		},
		{
			MethodName: "ContactsGetBlocked",
			Handler:    _UserServerService_ContactsGetBlocked_Handler,
		},
		{
			MethodName: "CheckUserIsBlocked",
			Handler:    _UserServerService_CheckUserIsBlocked_Handler,
		},
		{
			MethodName: "StoreSystemWhiteUser",
			Handler:    _UserServerService_StoreSystemWhiteUser_Handler,
		},
		{
			MethodName: "UpdateSystemWhiteUserLevel",
			Handler:    _UserServerService_UpdateSystemWhiteUserLevel_Handler,
		},
		{
			MethodName: "GetSysWhiteUser",
			Handler:    _UserServerService_GetSysWhiteUser_Handler,
		},
		{
			MethodName: "GetSysWhiteUserArr",
			Handler:    _UserServerService_GetSysWhiteUserArr_Handler,
		},
		{
			MethodName: "DelSysWhiteUser",
			Handler:    _UserServerService_DelSysWhiteUser_Handler,
		},
		{
			MethodName: "SetUserPrivacy",
			Handler:    _UserServerService_SetUserPrivacy_Handler,
		},
		{
			MethodName: "GetUserPrivacy",
			Handler:    _UserServerService_GetUserPrivacy_Handler,
		},
		{
			MethodName: "CheckUserPrivacy",
			Handler:    _UserServerService_CheckUserPrivacy_Handler,
		},
		{
			MethodName: "GetNotifySettings",
			Handler:    _UserServerService_GetNotifySettings_Handler,
		},
		{
			MethodName: "UpdateNotifySettings",
			Handler:    _UserServerService_UpdateNotifySettings_Handler,
		},
		{
			MethodName: "GetUserGps",
			Handler:    _UserServerService_GetUserGps_Handler,
		},
		{
			MethodName: "UpdateSwitch",
			Handler:    _UserServerService_UpdateSwitch_Handler,
		},
		{
			MethodName: "GetSwitchStatus",
			Handler:    _UserServerService_GetSwitchStatus_Handler,
		},
		{
			MethodName: "GetSwitchVersion",
			Handler:    _UserServerService_GetSwitchVersion_Handler,
		},
		{
			MethodName: "GetUserExpansion",
			Handler:    _UserServerService_GetUserExpansion_Handler,
		},
		{
			MethodName: "UserExpansionSet",
			Handler:    _UserServerService_UserExpansionSet_Handler,
		},
		{
			MethodName: "UserExpansionFind",
			Handler:    _UserServerService_UserExpansionFind_Handler,
		},
		{
			MethodName: "GetUserInfoExtend",
			Handler:    _UserServerService_GetUserInfoExtend_Handler,
		},
		{
			MethodName: "CheckUserSpaicl",
			Handler:    _UserServerService_CheckUserSpaicl_Handler,
		},
		{
			MethodName: "InsertUSerSpaicl",
			Handler:    _UserServerService_InsertUSerSpaicl_Handler,
		},
		{
			MethodName: "DelUSerSpaicl",
			Handler:    _UserServerService_DelUSerSpaicl_Handler,
		},
		{
			MethodName: "GetAllUSerSpaicl",
			Handler:    _UserServerService_GetAllUSerSpaicl_Handler,
		},
		{
			MethodName: "UserIpAddOrUpdate",
			Handler:    _UserServerService_UserIpAddOrUpdate_Handler,
		},
		{
			MethodName: "GetUserIpByAddr",
			Handler:    _UserServerService_GetUserIpByAddr_Handler,
		},
		{
			MethodName: "GetUserIpByUserId",
			Handler:    _UserServerService_GetUserIpByUserId_Handler,
		},
		{
			MethodName: "GetRelationUsers",
			Handler:    _UserServerService_GetRelationUsers_Handler,
		},
		{
			MethodName: "SetUserUnsubscribe",
			Handler:    _UserServerService_SetUserUnsubscribe_Handler,
		},
		{
			MethodName: "GetUserUnsubscribe",
			Handler:    _UserServerService_GetUserUnsubscribe_Handler,
		},
		{
			MethodName: "RecvLockerAddUserId",
			Handler:    _UserServerService_RecvLockerAddUserId_Handler,
		},
		{
			MethodName: "RecvLockerDelUserId",
			Handler:    _UserServerService_RecvLockerDelUserId_Handler,
		},
		{
			MethodName: "RecvLockerGetUserIds",
			Handler:    _UserServerService_RecvLockerGetUserIds_Handler,
		},
		{
			MethodName: "CheckDigitalWalletSwitch",
			Handler:    _UserServerService_CheckDigitalWalletSwitch_Handler,
		},
		{
			MethodName: "AddLoginDay",
			Handler:    _UserServerService_AddLoginDay_Handler,
		},
		{
			MethodName: "GetCustomerList",
			Handler:    _UserServerService_GetCustomerList_Handler,
		},
		{
			MethodName: "IsCustomerByUserId",
			Handler:    _UserServerService_IsCustomerByUserId_Handler,
		},
		{
			MethodName: "GetCustomerOrientUsers",
			Handler:    _UserServerService_GetCustomerOrientUsers_Handler,
		},
		{
			MethodName: "CheckSpecialUser",
			Handler:    _UserServerService_CheckSpecialUser_Handler,
		},
		{
			MethodName: "GetForceGroupList",
			Handler:    _UserServerService_GetForceGroupList_Handler,
		},
		{
			MethodName: "GetNotForceGroupList",
			Handler:    _UserServerService_GetNotForceGroupList_Handler,
		},
		{
			MethodName: "GetPhoneBookInfos",
			Handler:    _UserServerService_GetPhoneBookInfos_Handler,
		},
		{
			MethodName: "PassWordRegistry",
			Handler:    _UserServerService_PassWordRegistry_Handler,
		},
		{
			MethodName: "RegistryUserByUsername",
			Handler:    _UserServerService_RegistryUserByUsername_Handler,
		},
		{
			MethodName: "PassWordLogin",
			Handler:    _UserServerService_PassWordLogin_Handler,
		},
		{
			MethodName: "ChangePassWord",
			Handler:    _UserServerService_ChangePassWord_Handler,
		},
		{
			MethodName: "CheckIsSelfContact",
			Handler:    _UserServerService_CheckIsSelfContact_Handler,
		},
		{
			MethodName: "ChkCdnVip",
			Handler:    _UserServerService_ChkCdnVip_Handler,
		},
		{
			MethodName: "AddCdnVip",
			Handler:    _UserServerService_AddCdnVip_Handler,
		},
		{
			MethodName: "BuyCdnVip",
			Handler:    _UserServerService_BuyCdnVip_Handler,
		},
		{
			MethodName: "SetCdnVipAutoPay",
			Handler:    _UserServerService_SetCdnVipAutoPay_Handler,
		},
		{
			MethodName: "GetUserCdnVipInfo",
			Handler:    _UserServerService_GetUserCdnVipInfo_Handler,
		},
		{
			MethodName: "GetUserCdnPayList",
			Handler:    _UserServerService_GetUserCdnPayList_Handler,
		},
		{
			MethodName: "GenVitulaPhoneNumbers",
			Handler:    _UserServerService_GenVitulaPhoneNumbers_Handler,
		},
		{
			MethodName: "GetVitulPhoneNumbers",
			Handler:    _UserServerService_GetVitulPhoneNumbers_Handler,
		},
		{
			MethodName: "GetAllVitualUsersByFlags",
			Handler:    _UserServerService_GetAllVitualUsersByFlags_Handler,
		},
		{
			MethodName: "CheckIsVitulaPhone",
			Handler:    _UserServerService_CheckIsVitulaPhone_Handler,
		},
		{
			MethodName: "SignUpVitual",
			Handler:    _UserServerService_SignUpVitual_Handler,
		},
		{
			MethodName: "CheckIsVitulaPhoneArr",
			Handler:    _UserServerService_CheckIsVitulaPhoneArr_Handler,
		},
		{
			MethodName: "CheckIsPhoneVitulaPhone",
			Handler:    _UserServerService_CheckIsPhoneVitulaPhone_Handler,
		},
		{
			MethodName: "JoinGroupCheck",
			Handler:    _UserServerService_JoinGroupCheck_Handler,
		},
		{
			MethodName: "VitualCheckCanAddContact",
			Handler:    _UserServerService_VitualCheckCanAddContact_Handler,
		},
		{
			MethodName: "GetVitualSendCodeChannel",
			Handler:    _UserServerService_GetVitualSendCodeChannel_Handler,
		},
		{
			MethodName: "BindVitualSendCodeChannel",
			Handler:    _UserServerService_BindVitualSendCodeChannel_Handler,
		},
		{
			MethodName: "VirtualBindRealPhone",
			Handler:    _UserServerService_VirtualBindRealPhone_Handler,
		},
		{
			MethodName: "VirtualAddContactByPhone",
			Handler:    _UserServerService_VirtualAddContactByPhone_Handler,
		},
		{
			MethodName: "GetVirtualBindByPhone",
			Handler:    _UserServerService_GetVirtualBindByPhone_Handler,
		},
		{
			MethodName: "AddUserAdmin",
			Handler:    _UserServerService_AddUserAdmin_Handler,
		},
		{
			MethodName: "GetuserAdminInfo",
			Handler:    _UserServerService_GetuserAdminInfo_Handler,
		},
		{
			MethodName: "SearchPrettyNumber",
			Handler:    _UserServerService_SearchPrettyNumber_Handler,
		},
		{
			MethodName: "ActivePrettyNumber",
			Handler:    _UserServerService_ActivePrettyNumber_Handler,
		},
		{
			MethodName: "GetUserRoleInfoByIds",
			Handler:    _UserServerService_GetUserRoleInfoByIds_Handler,
		},
		{
			MethodName: "InnerUserOp",
			Handler:    _UserServerService_InnerUserOp_Handler,
		},
		{
			MethodName: "BindRealPhone",
			Handler:    _UserServerService_BindRealPhone_Handler,
		},
		{
			MethodName: "GetUserRelationWithIds",
			Handler:    _UserServerService_GetUserRelationWithIds_Handler,
		},
		{
			MethodName: "UpdateUserVerified",
			Handler:    _UserServerService_UpdateUserVerified_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllUserDc",
			Handler:       _UserServerService_GetAllUserDc_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "imuinfoserver.proto",
}
