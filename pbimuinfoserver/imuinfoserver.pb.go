//协议文件用途:  操作和获取用户基础信息和用户的联系人信息、黑名单列表信息
//作者：
//日期: 2017/6/22
//版本：0.0.1
//修改日期：
//修改日志：

// protoc --gogofast_out=plugins=grpc:. ./gitlab.chatserver.im/interfaceprobuf/pbimuinfoserver/imuinfoserver.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: imuinfoserver.proto

package pbimuinfoserver

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	pbcomm "interfaceprobuf/pbcomm"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReErrCode int32

const (
	ReErrCode_Success                   ReErrCode = 0  //成功
	ReErrCode_DBError                   ReErrCode = 1  //数据库错误
	ReErrCode_InternalError             ReErrCode = 2  //内部其他错误
	ReErrCode_NotExist                  ReErrCode = 3  //用户不存在
	ReErrCode_UserNameOccupied          ReErrCode = 4  //用户名已占用
	ReErrCode_Register                  ReErrCode = 5  //已经注册
	ReErrCode_Unregister                ReErrCode = 6  //用户注册
	ReErrCode_NotModify                 ReErrCode = 7  //联系人没有变化
	ReErrCode_Blocked                   ReErrCode = 8  //是黑名单
	ReErrCode_UnBlocked                 ReErrCode = 9  //不是黑明单
	ReErrCode_Valid                     ReErrCode = 10 //隐私选项等可用的返回
	ReErrCode_UnValid                   ReErrCode = 11 //隐私选项校验失败的情况
	ReErrCode_Failed                    ReErrCode = 12 //失败
	ReErrCode_HashNotSuccess            ReErrCode = 13 //用户哈希值不合法
	ReErrCode_UsernameNotEmpty          ReErrCode = 14 // user already has username
	ReErrCode_VipOnly                   ReErrCode = 15
	ReErrCode_IllegalUserId             ReErrCode = 16 //不合法的userid
	ReErrCode_CanNotBeSelf              ReErrCode = 17 //目标不能是自己
	ReErrCode_ContactHasAdded           ReErrCode = 18 //联系人已添加
	ReErrCode_AppliedNotExist           ReErrCode = 19 //联系人申请不存在
	ReErrCode_Params                    ReErrCode = 20 //参数错误
	ReErrCode_Unknown                   ReErrCode = 21
	ReErrCode_RedisError                ReErrCode = 22 //redis错误
	ReErrCode_GroupNotExist             ReErrCode = 23 //分组不存在
	ReErrCode_AppliedNotModify          ReErrCode = 24
	ReErrCode_UserNotDefaultGroup       ReErrCode = 25
	ReErrCode_UserNotExist              ReErrCode = 26
	ReErrCode_UserAddContactToManyByDay ReErrCode = 27 // 单日添加联系人次数过多
	ReErrCode_InviteCodeIsBind          ReErrCode = 28 //邀请码已绑定
	ReErrCode_CertificateIsBind         ReErrCode = 29 // 证件已绑定其它账号一个证件只能与一个账号绑定
	ReErrCode_NoCertification           ReErrCode = 30 //未进行过实名认证
	ReErrCode_NOT_ALLOWED_MODIFY        ReErrCode = 31 //已设置过不允许修改
)

// Enum value maps for ReErrCode.
var (
	ReErrCode_name = map[int32]string{
		0:  "Success",
		1:  "DBError",
		2:  "InternalError",
		3:  "NotExist",
		4:  "UserNameOccupied",
		5:  "Register",
		6:  "Unregister",
		7:  "NotModify",
		8:  "Blocked",
		9:  "UnBlocked",
		10: "Valid",
		11: "UnValid",
		12: "Failed",
		13: "HashNotSuccess",
		14: "UsernameNotEmpty",
		15: "VipOnly",
		16: "IllegalUserId",
		17: "CanNotBeSelf",
		18: "ContactHasAdded",
		19: "AppliedNotExist",
		20: "Params",
		21: "Unknown",
		22: "RedisError",
		23: "GroupNotExist",
		24: "AppliedNotModify",
		25: "UserNotDefaultGroup",
		26: "UserNotExist",
		27: "UserAddContactToManyByDay",
		28: "InviteCodeIsBind",
		29: "CertificateIsBind",
		30: "NoCertification",
		31: "NOT_ALLOWED_MODIFY",
	}
	ReErrCode_value = map[string]int32{
		"Success":                   0,
		"DBError":                   1,
		"InternalError":             2,
		"NotExist":                  3,
		"UserNameOccupied":          4,
		"Register":                  5,
		"Unregister":                6,
		"NotModify":                 7,
		"Blocked":                   8,
		"UnBlocked":                 9,
		"Valid":                     10,
		"UnValid":                   11,
		"Failed":                    12,
		"HashNotSuccess":            13,
		"UsernameNotEmpty":          14,
		"VipOnly":                   15,
		"IllegalUserId":             16,
		"CanNotBeSelf":              17,
		"ContactHasAdded":           18,
		"AppliedNotExist":           19,
		"Params":                    20,
		"Unknown":                   21,
		"RedisError":                22,
		"GroupNotExist":             23,
		"AppliedNotModify":          24,
		"UserNotDefaultGroup":       25,
		"UserNotExist":              26,
		"UserAddContactToManyByDay": 27,
		"InviteCodeIsBind":          28,
		"CertificateIsBind":         29,
		"NoCertification":           30,
		"NOT_ALLOWED_MODIFY":        31,
	}
)

func (x ReErrCode) Enum() *ReErrCode {
	p := new(ReErrCode)
	*p = x
	return p
}

func (x ReErrCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReErrCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imuinfoserver_proto_enumTypes[0].Descriptor()
}

func (ReErrCode) Type() protoreflect.EnumType {
	return &file_imuinfoserver_proto_enumTypes[0]
}

func (x ReErrCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReErrCode.Descriptor instead.
func (ReErrCode) EnumDescriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{0}
}

// 密码注册错误码
type PasswordRegistryErrorCode int32

const (
	// 成功
	PasswordRegistryErrorCode_SUCCESS PasswordRegistryErrorCode = 0
	// 用户名已存在
	PasswordRegistryErrorCode_USERNAME_EXIST PasswordRegistryErrorCode = 1
	// 用户不存在
	PasswordRegistryErrorCode_USERNAME_NOT_EXIST PasswordRegistryErrorCode = 2
	// 用户名无效
	PasswordRegistryErrorCode_USERNAME_INVALID PasswordRegistryErrorCode = 3
	// 用户名错误
	PasswordRegistryErrorCode_USERNAME_ERROR PasswordRegistryErrorCode = 4
	// 密码错误
	PasswordRegistryErrorCode_PASSWORD_ERROR PasswordRegistryErrorCode = 5
	// 密码无效
	PasswordRegistryErrorCode_PASSWORD_INVALID PasswordRegistryErrorCode = 6
	// 内部错误
	PasswordRegistryErrorCode_INTERNAL_ERROR PasswordRegistryErrorCode = 7
	// 密码错误次数过多
	PasswordRegistryErrorCode_PASSWORD_ERROR_MANY PasswordRegistryErrorCode = 8
)

// Enum value maps for PasswordRegistryErrorCode.
var (
	PasswordRegistryErrorCode_name = map[int32]string{
		0: "SUCCESS",
		1: "USERNAME_EXIST",
		2: "USERNAME_NOT_EXIST",
		3: "USERNAME_INVALID",
		4: "USERNAME_ERROR",
		5: "PASSWORD_ERROR",
		6: "PASSWORD_INVALID",
		7: "INTERNAL_ERROR",
		8: "PASSWORD_ERROR_MANY",
	}
	PasswordRegistryErrorCode_value = map[string]int32{
		"SUCCESS":             0,
		"USERNAME_EXIST":      1,
		"USERNAME_NOT_EXIST":  2,
		"USERNAME_INVALID":    3,
		"USERNAME_ERROR":      4,
		"PASSWORD_ERROR":      5,
		"PASSWORD_INVALID":    6,
		"INTERNAL_ERROR":      7,
		"PASSWORD_ERROR_MANY": 8,
	}
)

func (x PasswordRegistryErrorCode) Enum() *PasswordRegistryErrorCode {
	p := new(PasswordRegistryErrorCode)
	*p = x
	return p
}

func (x PasswordRegistryErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PasswordRegistryErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imuinfoserver_proto_enumTypes[1].Descriptor()
}

func (PasswordRegistryErrorCode) Type() protoreflect.EnumType {
	return &file_imuinfoserver_proto_enumTypes[1]
}

func (x PasswordRegistryErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PasswordRegistryErrorCode.Descriptor instead.
func (PasswordRegistryErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{1}
}

// user switch type
type Switch int32

const (
	Switch_Unused             Switch = 0
	Switch_UsernameSearch     Switch = 1
	Switch_UnreadIncludeMuted Switch = 2
	Switch_DisableMultiSignIn Switch = 3
)

// Enum value maps for Switch.
var (
	Switch_name = map[int32]string{
		0: "Unused",
		1: "UsernameSearch",
		2: "UnreadIncludeMuted",
		3: "DisableMultiSignIn",
	}
	Switch_value = map[string]int32{
		"Unused":             0,
		"UsernameSearch":     1,
		"UnreadIncludeMuted": 2,
		"DisableMultiSignIn": 3,
	}
)

func (x Switch) Enum() *Switch {
	p := new(Switch)
	*p = x
	return p
}

func (x Switch) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Switch) Descriptor() protoreflect.EnumDescriptor {
	return file_imuinfoserver_proto_enumTypes[2].Descriptor()
}

func (Switch) Type() protoreflect.EnumType {
	return &file_imuinfoserver_proto_enumTypes[2]
}

func (x Switch) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Switch.Descriptor instead.
func (Switch) EnumDescriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{2}
}

type UChatResultCode int32

const (
	UChatResultCode_Chat_RPC_OK                     UChatResultCode = 0    //成功
	UChatResultCode_Chat_ADDUSER3549_EXP            UChatResultCode = 4000 //3549隐私选项
	UChatResultCode_Chat_User_Priavcay              UChatResultCode = 4001 //隐私选项 没有权限
	UChatResultCode_Chat_To_User_Blocked            UChatResultCode = 4002 //block你将用户拉入黑名单  隐私选项
	UChatResultCode_Chat_User_Blocked               UChatResultCode = 4003 //block用户将你拉入黑名单  隐私选项
	UChatResultCode_Chat_REPEAT_CREAT               UChatResultCode = 4004 //短时间重复创建群
	UChatResultCode_Chat_REPEAT_ADD_USER            UChatResultCode = 4005 //重复添加群成员
	UChatResultCode_Chat_EXCEED_CREATE_MAXNUM       UChatResultCode = 4006 //超过最大建群数量
	UChatResultCode_Chat_EXCEED_TODAY_CREATE_MAXNUM UChatResultCode = 4007 //超过当日最大建群数量
	UChatResultCode_Chat_EXCEED_ADD_USER_MAXNUM     UChatResultCode = 4008 //超过群最大添加人数
	UChatResultCode_Chat_PROHIBIT_ADD_GROUP         UChatResultCode = 4009 //禁止加入群组
	UChatResultCode_Chat_ADMINLEVEL_EXCEPTION       UChatResultCode = 4010 //没有邀请权限
	UChatResultCode_Chat_ALREADYLEFT_EXCEPTION      UChatResultCode = 4011 //用户不在群里
	UChatResultCode_Chat_GROUP_DISBAND              UChatResultCode = 4012 //该群已经解散
	UChatResultCode_Chat_GROUP_KICKED               UChatResultCode = 4013 //该群以将你拉黑
	UChatResultCode_Chat_HOURS_ADD_USER_MAXNUM      UChatResultCode = 4114 //超过每小时最多添加群成员数
	UChatResultCode_Chat_ONCE_ADD_USER_MAXNUM       UChatResultCode = 4115 //超过单次最多添加群成员数
	UChatResultCode_Chat_UNKNOWN                    UChatResultCode = 4100 //未知异常
	UChatResultCode_Chat_PARAMETER_EXCEPTION        UChatResultCode = 4101 //参数异常
	UChatResultCode_Chat_LOGIC_EXCEPTION            UChatResultCode = 4102 //逻辑异常
	UChatResultCode_Chat_REDIS_EXCEPTION            UChatResultCode = 4103 //redis异常
	UChatResultCode_Chat_DB_EXCEPTION               UChatResultCode = 4104 //数据库异常
	UChatResultCode_Chat_AllocId_EXCEPTION          UChatResultCode = 4105 //群id分配错误
	UChatResultCode_Chat_CallGetUser_EXCEPTION      UChatResultCode = 4106 //获取user出错  刘鑫磊提供接口
	UChatResultCode_Chat_DB_NORECORD                UChatResultCode = 4107 //无记录
	UChatResultCode_Chat_Group_NORECORD             UChatResultCode = 4108 //无群记录
)

// Enum value maps for UChatResultCode.
var (
	UChatResultCode_name = map[int32]string{
		0:    "Chat_RPC_OK",
		4000: "Chat_ADDUSER3549_EXP",
		4001: "Chat_User_Priavcay",
		4002: "Chat_To_User_Blocked",
		4003: "Chat_User_Blocked",
		4004: "Chat_REPEAT_CREAT",
		4005: "Chat_REPEAT_ADD_USER",
		4006: "Chat_EXCEED_CREATE_MAXNUM",
		4007: "Chat_EXCEED_TODAY_CREATE_MAXNUM",
		4008: "Chat_EXCEED_ADD_USER_MAXNUM",
		4009: "Chat_PROHIBIT_ADD_GROUP",
		4010: "Chat_ADMINLEVEL_EXCEPTION",
		4011: "Chat_ALREADYLEFT_EXCEPTION",
		4012: "Chat_GROUP_DISBAND",
		4013: "Chat_GROUP_KICKED",
		4114: "Chat_HOURS_ADD_USER_MAXNUM",
		4115: "Chat_ONCE_ADD_USER_MAXNUM",
		4100: "Chat_UNKNOWN",
		4101: "Chat_PARAMETER_EXCEPTION",
		4102: "Chat_LOGIC_EXCEPTION",
		4103: "Chat_REDIS_EXCEPTION",
		4104: "Chat_DB_EXCEPTION",
		4105: "Chat_AllocId_EXCEPTION",
		4106: "Chat_CallGetUser_EXCEPTION",
		4107: "Chat_DB_NORECORD",
		4108: "Chat_Group_NORECORD",
	}
	UChatResultCode_value = map[string]int32{
		"Chat_RPC_OK":                     0,
		"Chat_ADDUSER3549_EXP":            4000,
		"Chat_User_Priavcay":              4001,
		"Chat_To_User_Blocked":            4002,
		"Chat_User_Blocked":               4003,
		"Chat_REPEAT_CREAT":               4004,
		"Chat_REPEAT_ADD_USER":            4005,
		"Chat_EXCEED_CREATE_MAXNUM":       4006,
		"Chat_EXCEED_TODAY_CREATE_MAXNUM": 4007,
		"Chat_EXCEED_ADD_USER_MAXNUM":     4008,
		"Chat_PROHIBIT_ADD_GROUP":         4009,
		"Chat_ADMINLEVEL_EXCEPTION":       4010,
		"Chat_ALREADYLEFT_EXCEPTION":      4011,
		"Chat_GROUP_DISBAND":              4012,
		"Chat_GROUP_KICKED":               4013,
		"Chat_HOURS_ADD_USER_MAXNUM":      4114,
		"Chat_ONCE_ADD_USER_MAXNUM":       4115,
		"Chat_UNKNOWN":                    4100,
		"Chat_PARAMETER_EXCEPTION":        4101,
		"Chat_LOGIC_EXCEPTION":            4102,
		"Chat_REDIS_EXCEPTION":            4103,
		"Chat_DB_EXCEPTION":               4104,
		"Chat_AllocId_EXCEPTION":          4105,
		"Chat_CallGetUser_EXCEPTION":      4106,
		"Chat_DB_NORECORD":                4107,
		"Chat_Group_NORECORD":             4108,
	}
)

func (x UChatResultCode) Enum() *UChatResultCode {
	p := new(UChatResultCode)
	*p = x
	return p
}

func (x UChatResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UChatResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imuinfoserver_proto_enumTypes[3].Descriptor()
}

func (UChatResultCode) Type() protoreflect.EnumType {
	return &file_imuinfoserver_proto_enumTypes[3]
}

func (x UChatResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UChatResultCode.Descriptor instead.
func (UChatResultCode) EnumDescriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{3}
}

// ************* 授权登录 ********************
// 授权登录错误码
type OAuthLoginError int32

const (
	// 成功
	OAuthLoginError_OAUTH_LOGIN_SUCCESS OAuthLoginError = 0
	// 内部错误
	OAuthLoginError_OAUTH_LOGIN_INTERNAL_ERROR OAuthLoginError = 1
	// user id 错误
	OAuthLoginError_OAUTH_LOGIN_USER_ID_ERROR OAuthLoginError = 2
	// token 过期
	OAuthLoginError_OAUTH_LOGIN_TOKEN_EXPIRE OAuthLoginError = 3
)

// Enum value maps for OAuthLoginError.
var (
	OAuthLoginError_name = map[int32]string{
		0: "OAUTH_LOGIN_SUCCESS",
		1: "OAUTH_LOGIN_INTERNAL_ERROR",
		2: "OAUTH_LOGIN_USER_ID_ERROR",
		3: "OAUTH_LOGIN_TOKEN_EXPIRE",
	}
	OAuthLoginError_value = map[string]int32{
		"OAUTH_LOGIN_SUCCESS":        0,
		"OAUTH_LOGIN_INTERNAL_ERROR": 1,
		"OAUTH_LOGIN_USER_ID_ERROR":  2,
		"OAUTH_LOGIN_TOKEN_EXPIRE":   3,
	}
)

func (x OAuthLoginError) Enum() *OAuthLoginError {
	p := new(OAuthLoginError)
	*p = x
	return p
}

func (x OAuthLoginError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OAuthLoginError) Descriptor() protoreflect.EnumDescriptor {
	return file_imuinfoserver_proto_enumTypes[4].Descriptor()
}

func (OAuthLoginError) Type() protoreflect.EnumType {
	return &file_imuinfoserver_proto_enumTypes[4]
}

func (x OAuthLoginError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OAuthLoginError.Descriptor instead.
func (OAuthLoginError) EnumDescriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{4}
}

type UpdateSwitchResult_ResultCode int32

const (
	UpdateSwitchResult_Success       UpdateSwitchResult_ResultCode = 0
	UpdateSwitchResult_InternalError UpdateSwitchResult_ResultCode = 1
)

// Enum value maps for UpdateSwitchResult_ResultCode.
var (
	UpdateSwitchResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	UpdateSwitchResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x UpdateSwitchResult_ResultCode) Enum() *UpdateSwitchResult_ResultCode {
	p := new(UpdateSwitchResult_ResultCode)
	*p = x
	return p
}

func (x UpdateSwitchResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateSwitchResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imuinfoserver_proto_enumTypes[5].Descriptor()
}

func (UpdateSwitchResult_ResultCode) Type() protoreflect.EnumType {
	return &file_imuinfoserver_proto_enumTypes[5]
}

func (x UpdateSwitchResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateSwitchResult_ResultCode.Descriptor instead.
func (UpdateSwitchResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{169, 0}
}

type GetSwitchStatusResult_ResultCode int32

const (
	GetSwitchStatusResult_Success       GetSwitchStatusResult_ResultCode = 0
	GetSwitchStatusResult_InternalError GetSwitchStatusResult_ResultCode = 1
)

// Enum value maps for GetSwitchStatusResult_ResultCode.
var (
	GetSwitchStatusResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	GetSwitchStatusResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x GetSwitchStatusResult_ResultCode) Enum() *GetSwitchStatusResult_ResultCode {
	p := new(GetSwitchStatusResult_ResultCode)
	*p = x
	return p
}

func (x GetSwitchStatusResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetSwitchStatusResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imuinfoserver_proto_enumTypes[6].Descriptor()
}

func (GetSwitchStatusResult_ResultCode) Type() protoreflect.EnumType {
	return &file_imuinfoserver_proto_enumTypes[6]
}

func (x GetSwitchStatusResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetSwitchStatusResult_ResultCode.Descriptor instead.
func (GetSwitchStatusResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{171, 0}
}

type SignUpVitualResp_ResultCode int32

const (
	SignUpVitualResp_Success             SignUpVitualResp_ResultCode = 0
	SignUpVitualResp_InternalError       SignUpVitualResp_ResultCode = 1 // 服务器内部错误
	SignUpVitualResp_PhoneNumberInvalid  SignUpVitualResp_ResultCode = 2 // 无效的电话号码
	SignUpVitualResp_PhoneNumberOccupied SignUpVitualResp_ResultCode = 3 // 电话号码已注册
	SignUpVitualResp_CaptchaExpired      SignUpVitualResp_ResultCode = 4 // 验证码失效
	SignUpVitualResp_CaptchaInvalid      SignUpVitualResp_ResultCode = 5 // 验证码无效
	SignUpVitualResp_FloodWait           SignUpVitualResp_ResultCode = 6
	SignUpVitualResp_SignUpRobotBlocked  SignUpVitualResp_ResultCode = 7 // 机器人注册接口暂时关闭
)

// Enum value maps for SignUpVitualResp_ResultCode.
var (
	SignUpVitualResp_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
		2: "PhoneNumberInvalid",
		3: "PhoneNumberOccupied",
		4: "CaptchaExpired",
		5: "CaptchaInvalid",
		6: "FloodWait",
		7: "SignUpRobotBlocked",
	}
	SignUpVitualResp_ResultCode_value = map[string]int32{
		"Success":             0,
		"InternalError":       1,
		"PhoneNumberInvalid":  2,
		"PhoneNumberOccupied": 3,
		"CaptchaExpired":      4,
		"CaptchaInvalid":      5,
		"FloodWait":           6,
		"SignUpRobotBlocked":  7,
	}
)

func (x SignUpVitualResp_ResultCode) Enum() *SignUpVitualResp_ResultCode {
	p := new(SignUpVitualResp_ResultCode)
	*p = x
	return p
}

func (x SignUpVitualResp_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignUpVitualResp_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imuinfoserver_proto_enumTypes[7].Descriptor()
}

func (SignUpVitualResp_ResultCode) Type() protoreflect.EnumType {
	return &file_imuinfoserver_proto_enumTypes[7]
}

func (x SignUpVitualResp_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignUpVitualResp_ResultCode.Descriptor instead.
func (SignUpVitualResp_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{217, 0}
}

type GetPhoneBookInfosResult_ResultCode int32

const (
	GetPhoneBookInfosResult_Success       GetPhoneBookInfosResult_ResultCode = 0
	GetPhoneBookInfosResult_InternalError GetPhoneBookInfosResult_ResultCode = 1
	GetPhoneBookInfosResult_Failed        GetPhoneBookInfosResult_ResultCode = 2
)

// Enum value maps for GetPhoneBookInfosResult_ResultCode.
var (
	GetPhoneBookInfosResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
		2: "Failed",
	}
	GetPhoneBookInfosResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
		"Failed":        2,
	}
)

func (x GetPhoneBookInfosResult_ResultCode) Enum() *GetPhoneBookInfosResult_ResultCode {
	p := new(GetPhoneBookInfosResult_ResultCode)
	*p = x
	return p
}

func (x GetPhoneBookInfosResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetPhoneBookInfosResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imuinfoserver_proto_enumTypes[8].Descriptor()
}

func (GetPhoneBookInfosResult_ResultCode) Type() protoreflect.EnumType {
	return &file_imuinfoserver_proto_enumTypes[8]
}

func (x GetPhoneBookInfosResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetPhoneBookInfosResult_ResultCode.Descriptor instead.
func (GetPhoneBookInfosResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{250, 0}
}

type AddLoginDayResult_ResultCode int32

const (
	AddLoginDayResult_Success       AddLoginDayResult_ResultCode = 0
	AddLoginDayResult_InternalError AddLoginDayResult_ResultCode = 1
)

// Enum value maps for AddLoginDayResult_ResultCode.
var (
	AddLoginDayResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	AddLoginDayResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x AddLoginDayResult_ResultCode) Enum() *AddLoginDayResult_ResultCode {
	p := new(AddLoginDayResult_ResultCode)
	*p = x
	return p
}

func (x AddLoginDayResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddLoginDayResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imuinfoserver_proto_enumTypes[9].Descriptor()
}

func (AddLoginDayResult_ResultCode) Type() protoreflect.EnumType {
	return &file_imuinfoserver_proto_enumTypes[9]
}

func (x AddLoginDayResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddLoginDayResult_ResultCode.Descriptor instead.
func (AddLoginDayResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{252, 0}
}

type CheckDigitalWalletSwitchResult_ResultCode int32

const (
	CheckDigitalWalletSwitchResult_Success       CheckDigitalWalletSwitchResult_ResultCode = 0
	CheckDigitalWalletSwitchResult_InternalError CheckDigitalWalletSwitchResult_ResultCode = 1
)

// Enum value maps for CheckDigitalWalletSwitchResult_ResultCode.
var (
	CheckDigitalWalletSwitchResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	CheckDigitalWalletSwitchResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x CheckDigitalWalletSwitchResult_ResultCode) Enum() *CheckDigitalWalletSwitchResult_ResultCode {
	p := new(CheckDigitalWalletSwitchResult_ResultCode)
	*p = x
	return p
}

func (x CheckDigitalWalletSwitchResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckDigitalWalletSwitchResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imuinfoserver_proto_enumTypes[10].Descriptor()
}

func (CheckDigitalWalletSwitchResult_ResultCode) Type() protoreflect.EnumType {
	return &file_imuinfoserver_proto_enumTypes[10]
}

func (x CheckDigitalWalletSwitchResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckDigitalWalletSwitchResult_ResultCode.Descriptor instead.
func (CheckDigitalWalletSwitchResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{254, 0}
}

type RecvLockerAddUserIdResult_ResultCode int32

const (
	RecvLockerAddUserIdResult_Success       RecvLockerAddUserIdResult_ResultCode = 0
	RecvLockerAddUserIdResult_InternalError RecvLockerAddUserIdResult_ResultCode = 1
)

// Enum value maps for RecvLockerAddUserIdResult_ResultCode.
var (
	RecvLockerAddUserIdResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	RecvLockerAddUserIdResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x RecvLockerAddUserIdResult_ResultCode) Enum() *RecvLockerAddUserIdResult_ResultCode {
	p := new(RecvLockerAddUserIdResult_ResultCode)
	*p = x
	return p
}

func (x RecvLockerAddUserIdResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecvLockerAddUserIdResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imuinfoserver_proto_enumTypes[11].Descriptor()
}

func (RecvLockerAddUserIdResult_ResultCode) Type() protoreflect.EnumType {
	return &file_imuinfoserver_proto_enumTypes[11]
}

func (x RecvLockerAddUserIdResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecvLockerAddUserIdResult_ResultCode.Descriptor instead.
func (RecvLockerAddUserIdResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{256, 0}
}

type RecvLockerDelUserIdResult_ResultCode int32

const (
	RecvLockerDelUserIdResult_Success       RecvLockerDelUserIdResult_ResultCode = 0
	RecvLockerDelUserIdResult_InternalError RecvLockerDelUserIdResult_ResultCode = 1
)

// Enum value maps for RecvLockerDelUserIdResult_ResultCode.
var (
	RecvLockerDelUserIdResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	RecvLockerDelUserIdResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x RecvLockerDelUserIdResult_ResultCode) Enum() *RecvLockerDelUserIdResult_ResultCode {
	p := new(RecvLockerDelUserIdResult_ResultCode)
	*p = x
	return p
}

func (x RecvLockerDelUserIdResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecvLockerDelUserIdResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imuinfoserver_proto_enumTypes[12].Descriptor()
}

func (RecvLockerDelUserIdResult_ResultCode) Type() protoreflect.EnumType {
	return &file_imuinfoserver_proto_enumTypes[12]
}

func (x RecvLockerDelUserIdResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecvLockerDelUserIdResult_ResultCode.Descriptor instead.
func (RecvLockerDelUserIdResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{258, 0}
}

type RecvLockerGetUserIdsResult_ResultCode int32

const (
	RecvLockerGetUserIdsResult_Success       RecvLockerGetUserIdsResult_ResultCode = 0
	RecvLockerGetUserIdsResult_InternalError RecvLockerGetUserIdsResult_ResultCode = 1
)

// Enum value maps for RecvLockerGetUserIdsResult_ResultCode.
var (
	RecvLockerGetUserIdsResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	RecvLockerGetUserIdsResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x RecvLockerGetUserIdsResult_ResultCode) Enum() *RecvLockerGetUserIdsResult_ResultCode {
	p := new(RecvLockerGetUserIdsResult_ResultCode)
	*p = x
	return p
}

func (x RecvLockerGetUserIdsResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecvLockerGetUserIdsResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imuinfoserver_proto_enumTypes[13].Descriptor()
}

func (RecvLockerGetUserIdsResult_ResultCode) Type() protoreflect.EnumType {
	return &file_imuinfoserver_proto_enumTypes[13]
}

func (x RecvLockerGetUserIdsResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecvLockerGetUserIdsResult_ResultCode.Descriptor instead.
func (RecvLockerGetUserIdsResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{260, 0}
}

type CheckIsMuteContactResult_ResultCode int32

const (
	CheckIsMuteContactResult_Success       CheckIsMuteContactResult_ResultCode = 0
	CheckIsMuteContactResult_InternalError CheckIsMuteContactResult_ResultCode = 1
)

// Enum value maps for CheckIsMuteContactResult_ResultCode.
var (
	CheckIsMuteContactResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	CheckIsMuteContactResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x CheckIsMuteContactResult_ResultCode) Enum() *CheckIsMuteContactResult_ResultCode {
	p := new(CheckIsMuteContactResult_ResultCode)
	*p = x
	return p
}

func (x CheckIsMuteContactResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckIsMuteContactResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imuinfoserver_proto_enumTypes[14].Descriptor()
}

func (CheckIsMuteContactResult_ResultCode) Type() protoreflect.EnumType {
	return &file_imuinfoserver_proto_enumTypes[14]
}

func (x CheckIsMuteContactResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckIsMuteContactResult_ResultCode.Descriptor instead.
func (CheckIsMuteContactResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{262, 0}
}

type SetUserUnsubscribeResult_ResultCode int32

const (
	SetUserUnsubscribeResult_Success       SetUserUnsubscribeResult_ResultCode = 0
	SetUserUnsubscribeResult_InternalError SetUserUnsubscribeResult_ResultCode = 1
)

// Enum value maps for SetUserUnsubscribeResult_ResultCode.
var (
	SetUserUnsubscribeResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	SetUserUnsubscribeResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x SetUserUnsubscribeResult_ResultCode) Enum() *SetUserUnsubscribeResult_ResultCode {
	p := new(SetUserUnsubscribeResult_ResultCode)
	*p = x
	return p
}

func (x SetUserUnsubscribeResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetUserUnsubscribeResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imuinfoserver_proto_enumTypes[15].Descriptor()
}

func (SetUserUnsubscribeResult_ResultCode) Type() protoreflect.EnumType {
	return &file_imuinfoserver_proto_enumTypes[15]
}

func (x SetUserUnsubscribeResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetUserUnsubscribeResult_ResultCode.Descriptor instead.
func (SetUserUnsubscribeResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{264, 0}
}

type GetUserUnsubscribeResult_ResultCode int32

const (
	GetUserUnsubscribeResult_Success       GetUserUnsubscribeResult_ResultCode = 0
	GetUserUnsubscribeResult_InternalError GetUserUnsubscribeResult_ResultCode = 1
)

// Enum value maps for GetUserUnsubscribeResult_ResultCode.
var (
	GetUserUnsubscribeResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	GetUserUnsubscribeResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x GetUserUnsubscribeResult_ResultCode) Enum() *GetUserUnsubscribeResult_ResultCode {
	p := new(GetUserUnsubscribeResult_ResultCode)
	*p = x
	return p
}

func (x GetUserUnsubscribeResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetUserUnsubscribeResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imuinfoserver_proto_enumTypes[16].Descriptor()
}

func (GetUserUnsubscribeResult_ResultCode) Type() protoreflect.EnumType {
	return &file_imuinfoserver_proto_enumTypes[16]
}

func (x GetUserUnsubscribeResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetUserUnsubscribeResult_ResultCode.Descriptor instead.
func (GetUserUnsubscribeResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{266, 0}
}

type GetRelationUsersResult_ResultCode int32

const (
	GetRelationUsersResult_Success       GetRelationUsersResult_ResultCode = 0
	GetRelationUsersResult_InternalError GetRelationUsersResult_ResultCode = 1
)

// Enum value maps for GetRelationUsersResult_ResultCode.
var (
	GetRelationUsersResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	GetRelationUsersResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x GetRelationUsersResult_ResultCode) Enum() *GetRelationUsersResult_ResultCode {
	p := new(GetRelationUsersResult_ResultCode)
	*p = x
	return p
}

func (x GetRelationUsersResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetRelationUsersResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imuinfoserver_proto_enumTypes[17].Descriptor()
}

func (GetRelationUsersResult_ResultCode) Type() protoreflect.EnumType {
	return &file_imuinfoserver_proto_enumTypes[17]
}

func (x GetRelationUsersResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetRelationUsersResult_ResultCode.Descriptor instead.
func (GetRelationUsersResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{268, 0}
}

type GetUserIpByAddrResult_ResultCode int32

const (
	GetUserIpByAddrResult_Success       GetUserIpByAddrResult_ResultCode = 0
	GetUserIpByAddrResult_InternalError GetUserIpByAddrResult_ResultCode = 1
)

// Enum value maps for GetUserIpByAddrResult_ResultCode.
var (
	GetUserIpByAddrResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	GetUserIpByAddrResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x GetUserIpByAddrResult_ResultCode) Enum() *GetUserIpByAddrResult_ResultCode {
	p := new(GetUserIpByAddrResult_ResultCode)
	*p = x
	return p
}

func (x GetUserIpByAddrResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetUserIpByAddrResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imuinfoserver_proto_enumTypes[18].Descriptor()
}

func (GetUserIpByAddrResult_ResultCode) Type() protoreflect.EnumType {
	return &file_imuinfoserver_proto_enumTypes[18]
}

func (x GetUserIpByAddrResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetUserIpByAddrResult_ResultCode.Descriptor instead.
func (GetUserIpByAddrResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{270, 0}
}

type GetUserIpByUserIdResult_ResultCode int32

const (
	GetUserIpByUserIdResult_Success       GetUserIpByUserIdResult_ResultCode = 0
	GetUserIpByUserIdResult_InternalError GetUserIpByUserIdResult_ResultCode = 1
)

// Enum value maps for GetUserIpByUserIdResult_ResultCode.
var (
	GetUserIpByUserIdResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	GetUserIpByUserIdResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x GetUserIpByUserIdResult_ResultCode) Enum() *GetUserIpByUserIdResult_ResultCode {
	p := new(GetUserIpByUserIdResult_ResultCode)
	*p = x
	return p
}

func (x GetUserIpByUserIdResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetUserIpByUserIdResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imuinfoserver_proto_enumTypes[19].Descriptor()
}

func (GetUserIpByUserIdResult_ResultCode) Type() protoreflect.EnumType {
	return &file_imuinfoserver_proto_enumTypes[19]
}

func (x GetUserIpByUserIdResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetUserIpByUserIdResult_ResultCode.Descriptor instead.
func (GetUserIpByUserIdResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{273, 0}
}

type UserIpAddOrUpdateResult_ResultCode int32

const (
	UserIpAddOrUpdateResult_Success       UserIpAddOrUpdateResult_ResultCode = 0
	UserIpAddOrUpdateResult_InternalError UserIpAddOrUpdateResult_ResultCode = 1
)

// Enum value maps for UserIpAddOrUpdateResult_ResultCode.
var (
	UserIpAddOrUpdateResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	UserIpAddOrUpdateResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x UserIpAddOrUpdateResult_ResultCode) Enum() *UserIpAddOrUpdateResult_ResultCode {
	p := new(UserIpAddOrUpdateResult_ResultCode)
	*p = x
	return p
}

func (x UserIpAddOrUpdateResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserIpAddOrUpdateResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imuinfoserver_proto_enumTypes[20].Descriptor()
}

func (UserIpAddOrUpdateResult_ResultCode) Type() protoreflect.EnumType {
	return &file_imuinfoserver_proto_enumTypes[20]
}

func (x UserIpAddOrUpdateResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserIpAddOrUpdateResult_ResultCode.Descriptor instead.
func (UserIpAddOrUpdateResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{275, 0}
}

type CheckUserSpaiclResult_ResultCode int32

const (
	CheckUserSpaiclResult_Success       CheckUserSpaiclResult_ResultCode = 0
	CheckUserSpaiclResult_InternalError CheckUserSpaiclResult_ResultCode = 1
)

// Enum value maps for CheckUserSpaiclResult_ResultCode.
var (
	CheckUserSpaiclResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	CheckUserSpaiclResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x CheckUserSpaiclResult_ResultCode) Enum() *CheckUserSpaiclResult_ResultCode {
	p := new(CheckUserSpaiclResult_ResultCode)
	*p = x
	return p
}

func (x CheckUserSpaiclResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckUserSpaiclResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imuinfoserver_proto_enumTypes[21].Descriptor()
}

func (CheckUserSpaiclResult_ResultCode) Type() protoreflect.EnumType {
	return &file_imuinfoserver_proto_enumTypes[21]
}

func (x CheckUserSpaiclResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckUserSpaiclResult_ResultCode.Descriptor instead.
func (CheckUserSpaiclResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{277, 0}
}

type InsertUSerSpaiclResult_ResultCode int32

const (
	InsertUSerSpaiclResult_Success       InsertUSerSpaiclResult_ResultCode = 0
	InsertUSerSpaiclResult_InternalError InsertUSerSpaiclResult_ResultCode = 1
)

// Enum value maps for InsertUSerSpaiclResult_ResultCode.
var (
	InsertUSerSpaiclResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	InsertUSerSpaiclResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x InsertUSerSpaiclResult_ResultCode) Enum() *InsertUSerSpaiclResult_ResultCode {
	p := new(InsertUSerSpaiclResult_ResultCode)
	*p = x
	return p
}

func (x InsertUSerSpaiclResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InsertUSerSpaiclResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imuinfoserver_proto_enumTypes[22].Descriptor()
}

func (InsertUSerSpaiclResult_ResultCode) Type() protoreflect.EnumType {
	return &file_imuinfoserver_proto_enumTypes[22]
}

func (x InsertUSerSpaiclResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InsertUSerSpaiclResult_ResultCode.Descriptor instead.
func (InsertUSerSpaiclResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{279, 0}
}

type DelUSerSpaiclResult_ResultCode int32

const (
	DelUSerSpaiclResult_Success       DelUSerSpaiclResult_ResultCode = 0
	DelUSerSpaiclResult_InternalError DelUSerSpaiclResult_ResultCode = 1
)

// Enum value maps for DelUSerSpaiclResult_ResultCode.
var (
	DelUSerSpaiclResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	DelUSerSpaiclResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x DelUSerSpaiclResult_ResultCode) Enum() *DelUSerSpaiclResult_ResultCode {
	p := new(DelUSerSpaiclResult_ResultCode)
	*p = x
	return p
}

func (x DelUSerSpaiclResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DelUSerSpaiclResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imuinfoserver_proto_enumTypes[23].Descriptor()
}

func (DelUSerSpaiclResult_ResultCode) Type() protoreflect.EnumType {
	return &file_imuinfoserver_proto_enumTypes[23]
}

func (x DelUSerSpaiclResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DelUSerSpaiclResult_ResultCode.Descriptor instead.
func (DelUSerSpaiclResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{281, 0}
}

type GetAllUSerSpaiclResult_ResultCode int32

const (
	GetAllUSerSpaiclResult_Success       GetAllUSerSpaiclResult_ResultCode = 0
	GetAllUSerSpaiclResult_InternalError GetAllUSerSpaiclResult_ResultCode = 1
)

// Enum value maps for GetAllUSerSpaiclResult_ResultCode.
var (
	GetAllUSerSpaiclResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	GetAllUSerSpaiclResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x GetAllUSerSpaiclResult_ResultCode) Enum() *GetAllUSerSpaiclResult_ResultCode {
	p := new(GetAllUSerSpaiclResult_ResultCode)
	*p = x
	return p
}

func (x GetAllUSerSpaiclResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetAllUSerSpaiclResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imuinfoserver_proto_enumTypes[24].Descriptor()
}

func (GetAllUSerSpaiclResult_ResultCode) Type() protoreflect.EnumType {
	return &file_imuinfoserver_proto_enumTypes[24]
}

func (x GetAllUSerSpaiclResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetAllUSerSpaiclResult_ResultCode.Descriptor instead.
func (GetAllUSerSpaiclResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{283, 0}
}

type ChangePhoneResult_ResultCode int32

const (
	ChangePhoneResult_Success             ChangePhoneResult_ResultCode = 0
	ChangePhoneResult_InternalError       ChangePhoneResult_ResultCode = 1
	ChangePhoneResult_PhoneNumberOccupied ChangePhoneResult_ResultCode = 2 // 电话已注册
	ChangePhoneResult_PhoneCodeExpired    ChangePhoneResult_ResultCode = 3 // 验证码已过期
	ChangePhoneResult_PhoneCodeInvalid    ChangePhoneResult_ResultCode = 4 // 验证码无效
	ChangePhoneResult_FloodWait           ChangePhoneResult_ResultCode = 5
)

// Enum value maps for ChangePhoneResult_ResultCode.
var (
	ChangePhoneResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
		2: "PhoneNumberOccupied",
		3: "PhoneCodeExpired",
		4: "PhoneCodeInvalid",
		5: "FloodWait",
	}
	ChangePhoneResult_ResultCode_value = map[string]int32{
		"Success":             0,
		"InternalError":       1,
		"PhoneNumberOccupied": 2,
		"PhoneCodeExpired":    3,
		"PhoneCodeInvalid":    4,
		"FloodWait":           5,
	}
)

func (x ChangePhoneResult_ResultCode) Enum() *ChangePhoneResult_ResultCode {
	p := new(ChangePhoneResult_ResultCode)
	*p = x
	return p
}

func (x ChangePhoneResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChangePhoneResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imuinfoserver_proto_enumTypes[25].Descriptor()
}

func (ChangePhoneResult_ResultCode) Type() protoreflect.EnumType {
	return &file_imuinfoserver_proto_enumTypes[25]
}

func (x ChangePhoneResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChangePhoneResult_ResultCode.Descriptor instead.
func (ChangePhoneResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{285, 0}
}

type DeleteUserUsernameResult_Code int32

const (
	DeleteUserUsernameResult_Success          DeleteUserUsernameResult_Code = 0
	DeleteUserUsernameResult_PermissionDenied DeleteUserUsernameResult_Code = 1 // 权限不够
	DeleteUserUsernameResult_UsernameNotExist DeleteUserUsernameResult_Code = 2 // 用户名不存在
	DeleteUserUsernameResult_InvalidUsername  DeleteUserUsernameResult_Code = 3 // 无效的用户名
	DeleteUserUsernameResult_UserIsBot        DeleteUserUsernameResult_Code = 4 // 用户为bot
	DeleteUserUsernameResult_UsernameOccupied DeleteUserUsernameResult_Code = 5 // 用户名使用中，需要设置force_delete强制删除
	DeleteUserUsernameResult_InternalError    DeleteUserUsernameResult_Code = 6 // 内部错误，错误信息保存在internal_error_message字段
)

// Enum value maps for DeleteUserUsernameResult_Code.
var (
	DeleteUserUsernameResult_Code_name = map[int32]string{
		0: "Success",
		1: "PermissionDenied",
		2: "UsernameNotExist",
		3: "InvalidUsername",
		4: "UserIsBot",
		5: "UsernameOccupied",
		6: "InternalError",
	}
	DeleteUserUsernameResult_Code_value = map[string]int32{
		"Success":          0,
		"PermissionDenied": 1,
		"UsernameNotExist": 2,
		"InvalidUsername":  3,
		"UserIsBot":        4,
		"UsernameOccupied": 5,
		"InternalError":    6,
	}
)

func (x DeleteUserUsernameResult_Code) Enum() *DeleteUserUsernameResult_Code {
	p := new(DeleteUserUsernameResult_Code)
	*p = x
	return p
}

func (x DeleteUserUsernameResult_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeleteUserUsernameResult_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_imuinfoserver_proto_enumTypes[26].Descriptor()
}

func (DeleteUserUsernameResult_Code) Type() protoreflect.EnumType {
	return &file_imuinfoserver_proto_enumTypes[26]
}

func (x DeleteUserUsernameResult_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeleteUserUsernameResult_Code.Descriptor instead.
func (DeleteUserUsernameResult_Code) EnumDescriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{306, 0}
}

type SignUpV1Reply_ResultCode int32

const (
	SignUpV1Reply_Success             SignUpV1Reply_ResultCode = 0
	SignUpV1Reply_InternalError       SignUpV1Reply_ResultCode = 1 // 服务器内部错误
	SignUpV1Reply_PhoneNumberInvalid  SignUpV1Reply_ResultCode = 2 // 无效的电话号码
	SignUpV1Reply_PhoneNumberOccupied SignUpV1Reply_ResultCode = 3 // 电话号码已注册
	SignUpV1Reply_CaptchaExpired      SignUpV1Reply_ResultCode = 4 // 验证码失效
	SignUpV1Reply_CaptchaInvalid      SignUpV1Reply_ResultCode = 5 // 验证码无效
	SignUpV1Reply_FloodWait           SignUpV1Reply_ResultCode = 6
	SignUpV1Reply_SignUpRobotBlocked  SignUpV1Reply_ResultCode = 7 // 机器人注册接口暂时关闭
)

// Enum value maps for SignUpV1Reply_ResultCode.
var (
	SignUpV1Reply_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
		2: "PhoneNumberInvalid",
		3: "PhoneNumberOccupied",
		4: "CaptchaExpired",
		5: "CaptchaInvalid",
		6: "FloodWait",
		7: "SignUpRobotBlocked",
	}
	SignUpV1Reply_ResultCode_value = map[string]int32{
		"Success":             0,
		"InternalError":       1,
		"PhoneNumberInvalid":  2,
		"PhoneNumberOccupied": 3,
		"CaptchaExpired":      4,
		"CaptchaInvalid":      5,
		"FloodWait":           6,
		"SignUpRobotBlocked":  7,
	}
)

func (x SignUpV1Reply_ResultCode) Enum() *SignUpV1Reply_ResultCode {
	p := new(SignUpV1Reply_ResultCode)
	*p = x
	return p
}

func (x SignUpV1Reply_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignUpV1Reply_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imuinfoserver_proto_enumTypes[27].Descriptor()
}

func (SignUpV1Reply_ResultCode) Type() protoreflect.EnumType {
	return &file_imuinfoserver_proto_enumTypes[27]
}

func (x SignUpV1Reply_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignUpV1Reply_ResultCode.Descriptor instead.
func (SignUpV1Reply_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{382, 0}
}

type InnerUserOpReq_OperType int32

const (
	InnerUserOpReq_OperTypeBeginAt InnerUserOpReq_OperType = 0
	InnerUserOpReq_EnableInnerUser InnerUserOpReq_OperType = 1
	InnerUserOpReq_RevokeInnerUser InnerUserOpReq_OperType = 2
	InnerUserOpReq_QueryEnableUser InnerUserOpReq_OperType = 3
	InnerUserOpReq_BindRealPhoneNo InnerUserOpReq_OperType = 4
	InnerUserOpReq_NewPrettyNumber InnerUserOpReq_OperType = 5
)

// Enum value maps for InnerUserOpReq_OperType.
var (
	InnerUserOpReq_OperType_name = map[int32]string{
		0: "OperTypeBeginAt",
		1: "EnableInnerUser",
		2: "RevokeInnerUser",
		3: "QueryEnableUser",
		4: "BindRealPhoneNo",
		5: "NewPrettyNumber",
	}
	InnerUserOpReq_OperType_value = map[string]int32{
		"OperTypeBeginAt": 0,
		"EnableInnerUser": 1,
		"RevokeInnerUser": 2,
		"QueryEnableUser": 3,
		"BindRealPhoneNo": 4,
		"NewPrettyNumber": 5,
	}
)

func (x InnerUserOpReq_OperType) Enum() *InnerUserOpReq_OperType {
	p := new(InnerUserOpReq_OperType)
	*p = x
	return p
}

func (x InnerUserOpReq_OperType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InnerUserOpReq_OperType) Descriptor() protoreflect.EnumDescriptor {
	return file_imuinfoserver_proto_enumTypes[28].Descriptor()
}

func (InnerUserOpReq_OperType) Type() protoreflect.EnumType {
	return &file_imuinfoserver_proto_enumTypes[28]
}

func (x InnerUserOpReq_OperType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InnerUserOpReq_OperType.Descriptor instead.
func (InnerUserOpReq_OperType) EnumDescriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{391, 0}
}

type Relation_RelationType int32

const (
	Relation_Stranger    Relation_RelationType = 0 // 陌生人
	Relation_Contacts    Relation_RelationType = 1 // 联系人
	Relation_Blacklisted Relation_RelationType = 2 // 拉黑或被拉黑
)

// Enum value maps for Relation_RelationType.
var (
	Relation_RelationType_name = map[int32]string{
		0: "Stranger",
		1: "Contacts",
		2: "Blacklisted",
	}
	Relation_RelationType_value = map[string]int32{
		"Stranger":    0,
		"Contacts":    1,
		"Blacklisted": 2,
	}
)

func (x Relation_RelationType) Enum() *Relation_RelationType {
	p := new(Relation_RelationType)
	*p = x
	return p
}

func (x Relation_RelationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Relation_RelationType) Descriptor() protoreflect.EnumDescriptor {
	return file_imuinfoserver_proto_enumTypes[29].Descriptor()
}

func (Relation_RelationType) Type() protoreflect.EnumType {
	return &file_imuinfoserver_proto_enumTypes[29]
}

func (x Relation_RelationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Relation_RelationType.Descriptor instead.
func (Relation_RelationType) EnumDescriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{396, 0}
}

// 根据用户id获取用户ID
type GetUserInfoByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"` //自己的用户ＩＤ
	UserId int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //需要获取的用户ID
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetUserInfoByIdReq) Reset() {
	*x = GetUserInfoByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoByIdReq) ProtoMessage() {}

func (x *GetUserInfoByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoByIdReq.ProtoReflect.Descriptor instead.
func (*GetUserInfoByIdReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{0}
}

func (x *GetUserInfoByIdReq) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *GetUserInfoByIdReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetUserInfoByIdReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type GetUserInfoByIdArrReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId  int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`           //自己的用户ＩＤ
	UserIds []int32       `protobuf:"varint,2,rep,packed,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"` //需要获取的用户ID
	Debug   *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetUserInfoByIdArrReq) Reset() {
	*x = GetUserInfoByIdArrReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoByIdArrReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoByIdArrReq) ProtoMessage() {}

func (x *GetUserInfoByIdArrReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoByIdArrReq.ProtoReflect.Descriptor instead.
func (*GetUserInfoByIdArrReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{1}
}

func (x *GetUserInfoByIdArrReq) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *GetUserInfoByIdArrReq) GetUserIds() []int32 {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *GetUserInfoByIdArrReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 用户信息数组
type UserInfoArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userin []*UserInfo `protobuf:"bytes,1,rep,name=userin,proto3" json:"userin,omitempty"`
}

func (x *UserInfoArray) Reset() {
	*x = UserInfoArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoArray) ProtoMessage() {}

func (x *UserInfoArray) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoArray.ProtoReflect.Descriptor instead.
func (*UserInfoArray) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{2}
}

func (x *UserInfoArray) GetUserin() []*UserInfo {
	if x != nil {
		return x.Userin
	}
	return nil
}

// 查询出来的用户基础信息（self 、contact、 mutual_contact 需要在逻辑中判断 ）
type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId               int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户的id
	AccessHash           int64  `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	FirstName            string `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName             string `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Username             string `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	Phone                string `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`                                                              //用户的电话号码
	Status               int32  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`                                                           //是否在线的标识	0 代表不在线 1代表在线
	LastLogout           int32  `protobuf:"varint,8,opt,name=last_logout,json=lastLogout,proto3" json:"last_logout,omitempty"`                                 //最后在线时间
	ClusterRegion        int32  `protobuf:"varint,9,opt,name=cluster_region,json=clusterRegion,proto3" json:"cluster_region,omitempty"`                        // 用户所在的dc
	FontRgb              string `protobuf:"bytes,10,opt,name=font_rgb,json=fontRgb,proto3" json:"font_rgb,omitempty"`                                          //用户的特色字体颜色（扩展使用） {0,0,0}
	CountryCode          string `protobuf:"bytes,11,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`                              //用户的国家码
	Photo                string `protobuf:"bytes,12,opt,name=photo,proto3" json:"photo,omitempty"`                                                             //用户头像为json格式
	BotInfoVersion       int32  `protobuf:"varint,13,opt,name=bot_info_version,json=botInfoVersion,proto3" json:"bot_info_version,omitempty"`                  //机器人version
	BotInlinePlaceholder string `protobuf:"bytes,14,opt,name=bot_inline_placeholder,json=botInlinePlaceholder,proto3" json:"bot_inline_placeholder,omitempty"` //机器人相关
	RestrictionReason    string `protobuf:"bytes,15,opt,name=restriction_reason,json=restrictionReason,proto3" json:"restriction_reason,omitempty"`
	LangCode             string `protobuf:"bytes,16,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"` //国家语言代码
	LocalPhone           string `protobuf:"bytes,17,opt,name=local_phone,json=localPhone,proto3" json:"local_phone,omitempty"`
	Deleted              bool   `protobuf:"varint,18,opt,name=deleted,proto3" json:"deleted,omitempty"`
	Bot                  bool   `protobuf:"varint,19,opt,name=bot,proto3" json:"bot,omitempty"`
	BotChatHistory       bool   `protobuf:"varint,20,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNochats           bool   `protobuf:"varint,21,opt,name=bot_nochats,json=botNochats,proto3" json:"bot_nochats,omitempty"`
	Verified             bool   `protobuf:"varint,22,opt,name=verified,proto3" json:"verified,omitempty"`
	Restricted           bool   `protobuf:"varint,23,opt,name=restricted,proto3" json:"restricted,omitempty"`
	Min                  bool   `protobuf:"varint,24,opt,name=min,proto3" json:"min,omitempty"`
	BotInlineGeo         bool   `protobuf:"varint,25,opt,name=bot_inline_geo,json=botInlineGeo,proto3" json:"bot_inline_geo,omitempty"`
	Self                 bool   `protobuf:"varint,26,opt,name=self,proto3" json:"self,omitempty"`                                                   //是否是自己
	Contact              bool   `protobuf:"varint,27,opt,name=contact,proto3" json:"contact,omitempty"`                                             //是否是自己联系人
	MutalContact         bool   `protobuf:"varint,28,opt,name=mutal_contact,json=mutalContact,proto3" json:"mutal_contact,omitempty"`               //是否是双向联系人
	StarMark             bool   `protobuf:"varint,29,opt,name=star_mark,json=starMark,proto3" json:"star_mark,omitempty"`                           // 是否星标联系人
	ShowContactPhone     bool   `protobuf:"varint,30,opt,name=show_contact_phone,json=showContactPhone,proto3" json:"show_contact_phone,omitempty"` //是否显示联系人手机
	GroupId              int32  `protobuf:"varint,31,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`                              // 组
	Created              int32  `protobuf:"varint,32,opt,name=created,proto3" json:"created,omitempty"`                                             // 创建时间
	UserType             int32  `protobuf:"varint,33,opt,name=user_type,json=userType,proto3" json:"user_type,omitempty"`                           //用户类别
	UserLable            int32  `protobuf:"varint,34,opt,name=user_lable,json=userLable,proto3" json:"user_lable,omitempty"`                        //标记
	UserLevel            int32  `protobuf:"varint,35,opt,name=user_level,json=userLevel,proto3" json:"user_level,omitempty"`                        // 用户等级
	About                string `protobuf:"bytes,36,opt,name=about,proto3" json:"about,omitempty"`
	Birthday             int32  `protobuf:"varint,37,opt,name=birthday,proto3" json:"birthday,omitempty"` //年龄
	Sex                  int32  `protobuf:"varint,38,opt,name=sex,proto3" json:"sex,omitempty"`           //性别
	Flags                int32  `protobuf:"varint,39,opt,name=flags,proto3" json:"flags,omitempty"`       // 用户已经设置信息标记 0x40 : 已设置登录密码， 0x80 : 已设置手势验证
	Addr                 string `protobuf:"bytes,40,opt,name=addr,proto3" json:"addr,omitempty"`
	Extend               string `protobuf:"bytes,41,opt,name=extend,proto3" json:"extend,omitempty"` // extend
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{3}
}

func (x *UserInfo) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserInfo) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *UserInfo) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *UserInfo) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *UserInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserInfo) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UserInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserInfo) GetLastLogout() int32 {
	if x != nil {
		return x.LastLogout
	}
	return 0
}

func (x *UserInfo) GetClusterRegion() int32 {
	if x != nil {
		return x.ClusterRegion
	}
	return 0
}

func (x *UserInfo) GetFontRgb() string {
	if x != nil {
		return x.FontRgb
	}
	return ""
}

func (x *UserInfo) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *UserInfo) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

func (x *UserInfo) GetBotInfoVersion() int32 {
	if x != nil {
		return x.BotInfoVersion
	}
	return 0
}

func (x *UserInfo) GetBotInlinePlaceholder() string {
	if x != nil {
		return x.BotInlinePlaceholder
	}
	return ""
}

func (x *UserInfo) GetRestrictionReason() string {
	if x != nil {
		return x.RestrictionReason
	}
	return ""
}

func (x *UserInfo) GetLangCode() string {
	if x != nil {
		return x.LangCode
	}
	return ""
}

func (x *UserInfo) GetLocalPhone() string {
	if x != nil {
		return x.LocalPhone
	}
	return ""
}

func (x *UserInfo) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *UserInfo) GetBot() bool {
	if x != nil {
		return x.Bot
	}
	return false
}

func (x *UserInfo) GetBotChatHistory() bool {
	if x != nil {
		return x.BotChatHistory
	}
	return false
}

func (x *UserInfo) GetBotNochats() bool {
	if x != nil {
		return x.BotNochats
	}
	return false
}

func (x *UserInfo) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *UserInfo) GetRestricted() bool {
	if x != nil {
		return x.Restricted
	}
	return false
}

func (x *UserInfo) GetMin() bool {
	if x != nil {
		return x.Min
	}
	return false
}

func (x *UserInfo) GetBotInlineGeo() bool {
	if x != nil {
		return x.BotInlineGeo
	}
	return false
}

func (x *UserInfo) GetSelf() bool {
	if x != nil {
		return x.Self
	}
	return false
}

func (x *UserInfo) GetContact() bool {
	if x != nil {
		return x.Contact
	}
	return false
}

func (x *UserInfo) GetMutalContact() bool {
	if x != nil {
		return x.MutalContact
	}
	return false
}

func (x *UserInfo) GetStarMark() bool {
	if x != nil {
		return x.StarMark
	}
	return false
}

func (x *UserInfo) GetShowContactPhone() bool {
	if x != nil {
		return x.ShowContactPhone
	}
	return false
}

func (x *UserInfo) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *UserInfo) GetCreated() int32 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *UserInfo) GetUserType() int32 {
	if x != nil {
		return x.UserType
	}
	return 0
}

func (x *UserInfo) GetUserLable() int32 {
	if x != nil {
		return x.UserLable
	}
	return 0
}

func (x *UserInfo) GetUserLevel() int32 {
	if x != nil {
		return x.UserLevel
	}
	return 0
}

func (x *UserInfo) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *UserInfo) GetBirthday() int32 {
	if x != nil {
		return x.Birthday
	}
	return 0
}

func (x *UserInfo) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *UserInfo) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *UserInfo) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *UserInfo) GetExtend() string {
	if x != nil {
		return x.Extend
	}
	return ""
}

// 根据用户id获取用户销毁时间
type GetUserExpireByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //需要获取的用户ID
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetUserExpireByIdReq) Reset() {
	*x = GetUserExpireByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserExpireByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserExpireByIdReq) ProtoMessage() {}

func (x *GetUserExpireByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserExpireByIdReq.ProtoReflect.Descriptor instead.
func (*GetUserExpireByIdReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{4}
}

func (x *GetUserExpireByIdReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetUserExpireByIdReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 获取用户账号销毁时间返回
type GetUserExpireByIdResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expire    int32     `protobuf:"varint,1,opt,name=expire,proto3" json:"expire,omitempty"`                                      //账号销毁时间
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *GetUserExpireByIdResult) Reset() {
	*x = GetUserExpireByIdResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserExpireByIdResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserExpireByIdResult) ProtoMessage() {}

func (x *GetUserExpireByIdResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserExpireByIdResult.ProtoReflect.Descriptor instead.
func (*GetUserExpireByIdResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{5}
}

func (x *GetUserExpireByIdResult) GetExpire() int32 {
	if x != nil {
		return x.Expire
	}
	return 0
}

func (x *GetUserExpireByIdResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 根据用户电话号码来获取用户信息
type GetUserByphone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone string        `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	Debug *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetUserByphone) Reset() {
	*x = GetUserByphone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserByphone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserByphone) ProtoMessage() {}

func (x *GetUserByphone) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserByphone.ProtoReflect.Descriptor instead.
func (*GetUserByphone) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{6}
}

func (x *GetUserByphone) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *GetUserByphone) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 获取用户基本信息的返回结果
type GetUserInfoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uinfo     *UserInfo `protobuf:"bytes,1,opt,name=Uinfo,proto3" json:"Uinfo,omitempty"`                                         ///用户的基本信息
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *GetUserInfoResult) Reset() {
	*x = GetUserInfoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoResult) ProtoMessage() {}

func (x *GetUserInfoResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoResult.ProtoReflect.Descriptor instead.
func (*GetUserInfoResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{7}
}

func (x *GetUserInfoResult) GetUinfo() *UserInfo {
	if x != nil {
		return x.Uinfo
	}
	return nil
}

func (x *GetUserInfoResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

type GetUserInfoByIdArrResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uinfo     []*UserInfo `protobuf:"bytes,1,rep,name=Uinfo,proto3" json:"Uinfo,omitempty"`                                         ///用户的基本信息
	Errorcode ReErrCode   `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *GetUserInfoByIdArrResult) Reset() {
	*x = GetUserInfoByIdArrResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoByIdArrResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoByIdArrResult) ProtoMessage() {}

func (x *GetUserInfoByIdArrResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoByIdArrResult.ProtoReflect.Descriptor instead.
func (*GetUserInfoByIdArrResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{8}
}

func (x *GetUserInfoByIdArrResult) GetUinfo() []*UserInfo {
	if x != nil {
		return x.Uinfo
	}
	return nil
}

func (x *GetUserInfoByIdArrResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 根据用户userName来获取用户基本信息
type GetUserByUsername struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId   int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	Username string        `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Debug    *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetUserByUsername) Reset() {
	*x = GetUserByUsername{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserByUsername) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserByUsername) ProtoMessage() {}

func (x *GetUserByUsername) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserByUsername.ProtoReflect.Descriptor instead.
func (*GetUserByUsername) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{9}
}

func (x *GetUserByUsername) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *GetUserByUsername) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GetUserByUsername) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 更新用户头像请求
type UpdatePhotoInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户ID
	Photo  string        `protobuf:"bytes,2,opt,name=photo,proto3" json:"photo,omitempty"`                  //用户头像的json格式
	KeyId  int64         `protobuf:"varint,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UpdatePhotoInfoReq) Reset() {
	*x = UpdatePhotoInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePhotoInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePhotoInfoReq) ProtoMessage() {}

func (x *UpdatePhotoInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePhotoInfoReq.ProtoReflect.Descriptor instead.
func (*UpdatePhotoInfoReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{10}
}

func (x *UpdatePhotoInfoReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdatePhotoInfoReq) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

func (x *UpdatePhotoInfoReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *UpdatePhotoInfoReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type GetPhotoInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户ID
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetPhotoInfoReq) Reset() {
	*x = GetPhotoInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPhotoInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPhotoInfoReq) ProtoMessage() {}

func (x *GetPhotoInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPhotoInfoReq.ProtoReflect.Descriptor instead.
func (*GetPhotoInfoReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{11}
}

func (x *GetPhotoInfoReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetPhotoInfoReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 更新用户头像的返回
type UpdateUserPhotoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *UpdateUserPhotoResult) Reset() {
	*x = UpdateUserPhotoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserPhotoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserPhotoResult) ProtoMessage() {}

func (x *UpdateUserPhotoResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserPhotoResult.ProtoReflect.Descriptor instead.
func (*UpdateUserPhotoResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateUserPhotoResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

type GetUserPhotoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Photo     string    `protobuf:"bytes,1,opt,name=Photo,proto3" json:"Photo,omitempty"`                                         //json photo
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *GetUserPhotoResult) Reset() {
	*x = GetUserPhotoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserPhotoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserPhotoResult) ProtoMessage() {}

func (x *GetUserPhotoResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserPhotoResult.ProtoReflect.Descriptor instead.
func (*GetUserPhotoResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{13}
}

func (x *GetUserPhotoResult) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

func (x *GetUserPhotoResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 更新用户信息
type UpdateUserProfileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户ID
	Flags     int32         `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`                 // flags 第0 位 为更新firstName 第一位 last_name 第二位为 about
	FirstName string        `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string        `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	About     string        `protobuf:"bytes,5,opt,name=about,proto3" json:"about,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UpdateUserProfileReq) Reset() {
	*x = UpdateUserProfileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserProfileReq) ProtoMessage() {}

func (x *UpdateUserProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserProfileReq.ProtoReflect.Descriptor instead.
func (*UpdateUserProfileReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateUserProfileReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserProfileReq) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *UpdateUserProfileReq) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *UpdateUserProfileReq) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *UpdateUserProfileReq) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *UpdateUserProfileReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 更新用户信息
type UpdateUserFullReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户ID
	KeyId   int64  `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Flags   int32  `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"`    // flags 第0 位 为
	Sex     int32  `protobuf:"varint,4,opt,name=Sex,proto3" json:"Sex,omitempty"`        //性别 0未知异常　１　男　２　女
	Age     int32  `protobuf:"varint,5,opt,name=Age,proto3" json:"Age,omitempty"`        //年龄
	Address string `protobuf:"bytes,6,opt,name=Address,proto3" json:"Address,omitempty"` //地址
	Extened string `protobuf:"bytes,7,opt,name=Extened,proto3" json:"Extened,omitempty"` //扩展字段　json {address,age,sex,source,userAlbumsReq}
}

func (x *UpdateUserFullReq) Reset() {
	*x = UpdateUserFullReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserFullReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserFullReq) ProtoMessage() {}

func (x *UpdateUserFullReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserFullReq.ProtoReflect.Descriptor instead.
func (*UpdateUserFullReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateUserFullReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserFullReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *UpdateUserFullReq) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *UpdateUserFullReq) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *UpdateUserFullReq) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *UpdateUserFullReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UpdateUserFullReq) GetExtened() string {
	if x != nil {
		return x.Extened
	}
	return ""
}

// 更新用户详情返回
type UpdateUserFullResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *UpdateUserFullResult) Reset() {
	*x = UpdateUserFullResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserFullResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserFullResult) ProtoMessage() {}

func (x *UpdateUserFullResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserFullResult.ProtoReflect.Descriptor instead.
func (*UpdateUserFullResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateUserFullResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 更新用户昵称等的返回结果
type UpdateUserProfileResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uinfo     *UserInfo `protobuf:"bytes,1,opt,name=Uinfo,proto3" json:"Uinfo,omitempty"`                                         //用户基本信息
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *UpdateUserProfileResult) Reset() {
	*x = UpdateUserProfileResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserProfileResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserProfileResult) ProtoMessage() {}

func (x *UpdateUserProfileResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserProfileResult.ProtoReflect.Descriptor instead.
func (*UpdateUserProfileResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateUserProfileResult) GetUinfo() *UserInfo {
	if x != nil {
		return x.Uinfo
	}
	return nil
}

func (x *UpdateUserProfileResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 用户在线状态的更新
type StatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId    int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"` //自己的用户ID
	KeyId     int64         `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`    //用户的key_ID(自己端的keyID )
	Status    bool          `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`               //是否在线 true代表在线，false代表离线
	Offline   int32         `protobuf:"varint,4,opt,name=offline,proto3" json:"offline,omitempty"`             //离线时间
	Longitude float64       `protobuf:"fixed64,5,opt,name=longitude,proto3" json:"longitude,omitempty"`        //地理坐标的经度
	Latitude  float64       `protobuf:"fixed64,6,opt,name=latitude,proto3" json:"latitude,omitempty"`          //地理坐标的纬度
	Debug     *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *StatusReq) Reset() {
	*x = StatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusReq) ProtoMessage() {}

func (x *StatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusReq.ProtoReflect.Descriptor instead.
func (*StatusReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{18}
}

func (x *StatusReq) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *StatusReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *StatusReq) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *StatusReq) GetOffline() int32 {
	if x != nil {
		return x.Offline
	}
	return 0
}

func (x *StatusReq) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *StatusReq) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *StatusReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 用户在线状态的结果
type StatusResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *StatusResult) Reset() {
	*x = StatusResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResult) ProtoMessage() {}

func (x *StatusResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResult.ProtoReflect.Descriptor instead.
func (*StatusResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{19}
}

func (x *StatusResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 用户销毁时间的设置
type UpdateExpireReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"` //自己的用户ID
	Expire int32         `protobuf:"varint,2,opt,name=expire,proto3" json:"expire,omitempty"`               // 销毁时间单位是天
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UpdateExpireReq) Reset() {
	*x = UpdateExpireReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateExpireReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExpireReq) ProtoMessage() {}

func (x *UpdateExpireReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExpireReq.ProtoReflect.Descriptor instead.
func (*UpdateExpireReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateExpireReq) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *UpdateExpireReq) GetExpire() int32 {
	if x != nil {
		return x.Expire
	}
	return 0
}

func (x *UpdateExpireReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 设置账号销毁时间的返回结果
type UpdateExpireResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *UpdateExpireResult) Reset() {
	*x = UpdateExpireResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateExpireResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExpireResult) ProtoMessage() {}

func (x *UpdateExpireResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExpireResult.ProtoReflect.Descriptor instead.
func (*UpdateExpireResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateExpireResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 用户dc的迁移
type UserClusterChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId    int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"` //自己的用户ID
	ClusterId int32         `protobuf:"varint,2,opt,name=clusterId,proto3" json:"clusterId,omitempty"`         // 目标DcID
	FromIp    string        `protobuf:"bytes,4,opt,name=from_ip,json=fromIp,proto3" json:"from_ip,omitempty"`  //迁移来自哪个IP
	FromId    int32         `protobuf:"varint,5,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"` //来自哪个用户
	Debug     *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UserClusterChange) Reset() {
	*x = UserClusterChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserClusterChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserClusterChange) ProtoMessage() {}

func (x *UserClusterChange) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserClusterChange.ProtoReflect.Descriptor instead.
func (*UserClusterChange) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{22}
}

func (x *UserClusterChange) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *UserClusterChange) GetClusterId() int32 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *UserClusterChange) GetFromIp() string {
	if x != nil {
		return x.FromIp
	}
	return ""
}

func (x *UserClusterChange) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *UserClusterChange) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 用户域的迁移结果
type UserClusterChangeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *UserClusterChangeResult) Reset() {
	*x = UserClusterChangeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserClusterChangeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserClusterChangeResult) ProtoMessage() {}

func (x *UserClusterChangeResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserClusterChangeResult.ProtoReflect.Descriptor instead.
func (*UserClusterChangeResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{23}
}

func (x *UserClusterChangeResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 更新用户的username的请求
type UpdateuserNameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户的ID
	UserName string        `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`            //需要更新的用户名
	Debug    *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
	KeyId    int64         `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *UpdateuserNameReq) Reset() {
	*x = UpdateuserNameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateuserNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateuserNameReq) ProtoMessage() {}

func (x *UpdateuserNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateuserNameReq.ProtoReflect.Descriptor instead.
func (*UpdateuserNameReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateuserNameReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateuserNameReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UpdateuserNameReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *UpdateuserNameReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

// 更新用户的username的返回结果
type UpdateuserNameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uinfo     *UserInfo `protobuf:"bytes,1,opt,name=Uinfo,proto3" json:"Uinfo,omitempty"`                                         ///用户的基本信息
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *UpdateuserNameResult) Reset() {
	*x = UpdateuserNameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateuserNameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateuserNameResult) ProtoMessage() {}

func (x *UpdateuserNameResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateuserNameResult.ProtoReflect.Descriptor instead.
func (*UpdateuserNameResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateuserNameResult) GetUinfo() *UserInfo {
	if x != nil {
		return x.Uinfo
	}
	return nil
}

func (x *UpdateuserNameResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 更新用户的leve
type UpdateUserLevelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户的ID
	KeyId  int64 `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Levl   int32 `protobuf:"varint,3,opt,name=levl,proto3" json:"levl,omitempty"` //需要更新的权限
}

func (x *UpdateUserLevelReq) Reset() {
	*x = UpdateUserLevelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserLevelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserLevelReq) ProtoMessage() {}

func (x *UpdateUserLevelReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserLevelReq.ProtoReflect.Descriptor instead.
func (*UpdateUserLevelReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateUserLevelReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserLevelReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *UpdateUserLevelReq) GetLevl() int32 {
	if x != nil {
		return x.Levl
	}
	return 0
}

// 的返回结果
type UpdateUserLevelResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *UpdateUserLevelResult) Reset() {
	*x = UpdateUserLevelResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserLevelResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserLevelResult) ProtoMessage() {}

func (x *UpdateUserLevelResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserLevelResult.ProtoReflect.Descriptor instead.
func (*UpdateUserLevelResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{27}
}

func (x *UpdateUserLevelResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 更新用户的扩展字段
type UpdateUserExtionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户的ID
	KeyId      int64  `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Extionsion string `protobuf:"bytes,3,opt,name=extionsion,proto3" json:"extionsion,omitempty"` //需要更新的扩展字段
}

func (x *UpdateUserExtionReq) Reset() {
	*x = UpdateUserExtionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserExtionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserExtionReq) ProtoMessage() {}

func (x *UpdateUserExtionReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserExtionReq.ProtoReflect.Descriptor instead.
func (*UpdateUserExtionReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateUserExtionReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserExtionReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *UpdateUserExtionReq) GetExtionsion() string {
	if x != nil {
		return x.Extionsion
	}
	return ""
}

// 删除账号的返回结果
type UpdateUserExtionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *UpdateUserExtionResult) Reset() {
	*x = UpdateUserExtionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserExtionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserExtionResult) ProtoMessage() {}

func (x *UpdateUserExtionResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserExtionResult.ProtoReflect.Descriptor instead.
func (*UpdateUserExtionResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{29}
}

func (x *UpdateUserExtionResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 检查电话号码是否已经注册
type CheckPhoneRegisterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone string        `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"` //需要检查的电话号码(传没处理过的电话号码)
	Debug *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *CheckPhoneRegisterReq) Reset() {
	*x = CheckPhoneRegisterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckPhoneRegisterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPhoneRegisterReq) ProtoMessage() {}

func (x *CheckPhoneRegisterReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPhoneRegisterReq.ProtoReflect.Descriptor instead.
func (*CheckPhoneRegisterReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{30}
}

func (x *CheckPhoneRegisterReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *CheckPhoneRegisterReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 检查电话号码是否已经注册的返回结果
type CheckPhoneRegisterResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *CheckPhoneRegisterResult) Reset() {
	*x = CheckPhoneRegisterResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckPhoneRegisterResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPhoneRegisterResult) ProtoMessage() {}

func (x *CheckPhoneRegisterResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPhoneRegisterResult.ProtoReflect.Descriptor instead.
func (*CheckPhoneRegisterResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{31}
}

func (x *CheckPhoneRegisterResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 删除账号的请求
type DeleteAccountByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //被删除账号的用户id
	DelId  int32         `protobuf:"varint,2,opt,name=del_id,json=delId,proto3" json:"del_id,omitempty"`    //删除者的Id
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *DeleteAccountByIdReq) Reset() {
	*x = DeleteAccountByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAccountByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAccountByIdReq) ProtoMessage() {}

func (x *DeleteAccountByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAccountByIdReq.ProtoReflect.Descriptor instead.
func (*DeleteAccountByIdReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{32}
}

func (x *DeleteAccountByIdReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DeleteAccountByIdReq) GetDelId() int32 {
	if x != nil {
		return x.DelId
	}
	return 0
}

func (x *DeleteAccountByIdReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 删除账号的返回结果
type DelAccountResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *DelAccountResult) Reset() {
	*x = DelAccountResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelAccountResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelAccountResult) ProtoMessage() {}

func (x *DelAccountResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelAccountResult.ProtoReflect.Descriptor instead.
func (*DelAccountResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{33}
}

func (x *DelAccountResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 机器人基础信息更改
type BotUpdateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BotInfoVersion int32         `protobuf:"varint,2,opt,name=bot_info_version,json=botInfoVersion,proto3" json:"bot_info_version,omitempty"`
	BotChatHistory bool          `protobuf:"varint,3,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNoChat      bool          `protobuf:"varint,4,opt,name=bot_no_chat,json=botNoChat,proto3" json:"bot_no_chat,omitempty"`
	Debug          *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *BotUpdateInfo) Reset() {
	*x = BotUpdateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BotUpdateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotUpdateInfo) ProtoMessage() {}

func (x *BotUpdateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotUpdateInfo.ProtoReflect.Descriptor instead.
func (*BotUpdateInfo) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{34}
}

func (x *BotUpdateInfo) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *BotUpdateInfo) GetBotInfoVersion() int32 {
	if x != nil {
		return x.BotInfoVersion
	}
	return 0
}

func (x *BotUpdateInfo) GetBotChatHistory() bool {
	if x != nil {
		return x.BotChatHistory
	}
	return false
}

func (x *BotUpdateInfo) GetBotNoChat() bool {
	if x != nil {
		return x.BotNoChat
	}
	return false
}

func (x *BotUpdateInfo) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 机器人更改信息的返回结果
type BotUpdateInfoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *BotUpdateInfoResult) Reset() {
	*x = BotUpdateInfoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BotUpdateInfoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotUpdateInfoResult) ProtoMessage() {}

func (x *BotUpdateInfoResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotUpdateInfoResult.ProtoReflect.Descriptor instead.
func (*BotUpdateInfoResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{35}
}

func (x *BotUpdateInfoResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 删除单个联系人的请求
type DelContactReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 联系人的基本信息
	UserId     int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //用户自己的id
	ContactId  int32         `protobuf:"varint,2,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"` //联系人的id
	AccessHash int64         `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	KeyId      int64         `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *DelContactReq) Reset() {
	*x = DelContactReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelContactReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelContactReq) ProtoMessage() {}

func (x *DelContactReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelContactReq.ProtoReflect.Descriptor instead.
func (*DelContactReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{36}
}

func (x *DelContactReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DelContactReq) GetContactId() int32 {
	if x != nil {
		return x.ContactId
	}
	return 0
}

func (x *DelContactReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *DelContactReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *DelContactReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 删除联系人的返回结果
type DelContactResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uinfo     *UserInfo `protobuf:"bytes,1,opt,name=Uinfo,proto3" json:"Uinfo,omitempty"`                                         ///用户的基本信息
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *DelContactResult) Reset() {
	*x = DelContactResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelContactResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelContactResult) ProtoMessage() {}

func (x *DelContactResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelContactResult.ProtoReflect.Descriptor instead.
func (*DelContactResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{37}
}

func (x *DelContactResult) GetUinfo() *UserInfo {
	if x != nil {
		return x.Uinfo
	}
	return nil
}

func (x *DelContactResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

type AcceptContactReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ApplyId   int32         `protobuf:"varint,2,opt,name=apply_id,json=applyId,proto3" json:"apply_id,omitempty"`
	FirstName string        `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string        `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
	GroupId   int32         `protobuf:"varint,6,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *AcceptContactReq) Reset() {
	*x = AcceptContactReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptContactReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptContactReq) ProtoMessage() {}

func (x *AcceptContactReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptContactReq.ProtoReflect.Descriptor instead.
func (*AcceptContactReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{38}
}

func (x *AcceptContactReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AcceptContactReq) GetApplyId() int32 {
	if x != nil {
		return x.ApplyId
	}
	return 0
}

func (x *AcceptContactReq) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *AcceptContactReq) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *AcceptContactReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *AcceptContactReq) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type AcceptContactResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId    int32     `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (x *AcceptContactResult) Reset() {
	*x = AcceptContactResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptContactResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptContactResult) ProtoMessage() {}

func (x *AcceptContactResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptContactResult.ProtoReflect.Descriptor instead.
func (*AcceptContactResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{39}
}

func (x *AcceptContactResult) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *AcceptContactResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 需要删除联系人的信息
type ContactIdHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactId  int32 `protobuf:"varint,1,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`    //联系人的ID
	AccessHash int64 `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` //联系人的用户哈希值
}

func (x *ContactIdHash) Reset() {
	*x = ContactIdHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactIdHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactIdHash) ProtoMessage() {}

func (x *ContactIdHash) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactIdHash.ProtoReflect.Descriptor instead.
func (*ContactIdHash) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{40}
}

func (x *ContactIdHash) GetContactId() int32 {
	if x != nil {
		return x.ContactId
	}
	return 0
}

func (x *ContactIdHash) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

// 批量删除用户的联系人
type DelContactArrReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int32            `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户自己的id
	ContactidArr []*ContactIdHash `protobuf:"bytes,2,rep,name=contactidArr,proto3" json:"contactidArr,omitempty"`    //联系人的id数组
	KeyId        int64            `protobuf:"varint,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Debug        *pbcomm.Debug    `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *DelContactArrReq) Reset() {
	*x = DelContactArrReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelContactArrReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelContactArrReq) ProtoMessage() {}

func (x *DelContactArrReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelContactArrReq.ProtoReflect.Descriptor instead.
func (*DelContactArrReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{41}
}

func (x *DelContactArrReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DelContactArrReq) GetContactidArr() []*ContactIdHash {
	if x != nil {
		return x.ContactidArr
	}
	return nil
}

func (x *DelContactArrReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *DelContactArrReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 重置user联系人信息
type CmdResetUserContactsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AmdinId     int32  `protobuf:"varint,1,opt,name=amdin_id,json=amdinId,proto3" json:"amdin_id,omitempty"`            // 使用命令的人的id
	PhoneNumber string `protobuf:"bytes,2,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"` // 要重置联系人的电话号码
}

func (x *CmdResetUserContactsReq) Reset() {
	*x = CmdResetUserContactsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdResetUserContactsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdResetUserContactsReq) ProtoMessage() {}

func (x *CmdResetUserContactsReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdResetUserContactsReq.ProtoReflect.Descriptor instead.
func (*CmdResetUserContactsReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{42}
}

func (x *CmdResetUserContactsReq) GetAmdinId() int32 {
	if x != nil {
		return x.AmdinId
	}
	return 0
}

func (x *CmdResetUserContactsReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

type CmdResetUserContactsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentContactIds []int32 `protobuf:"varint,1,rep,packed,name=current_contact_ids,json=currentContactIds,proto3" json:"current_contact_ids,omitempty"` // 操作成功后当前的联系人id列表
}

func (x *CmdResetUserContactsResult) Reset() {
	*x = CmdResetUserContactsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdResetUserContactsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdResetUserContactsResult) ProtoMessage() {}

func (x *CmdResetUserContactsResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdResetUserContactsResult.ProtoReflect.Descriptor instead.
func (*CmdResetUserContactsResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{43}
}

func (x *CmdResetUserContactsResult) GetCurrentContactIds() []int32 {
	if x != nil {
		return x.CurrentContactIds
	}
	return nil
}

// 批量删除用户的联系人的返回
type DelContactArrResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *DelContactArrResult) Reset() {
	*x = DelContactArrResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelContactArrResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelContactArrResult) ProtoMessage() {}

func (x *DelContactArrResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelContactArrResult.ProtoReflect.Descriptor instead.
func (*DelContactArrResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{44}
}

func (x *DelContactArrResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 获取用户联系人列表的请求
type ContatsGetContactsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`          //用户的Id
	KeyId       int64         `protobuf:"varint,2,opt,name=keyId,proto3" json:"keyId,omitempty"`            // 用户的keyId
	Contacthash string        `protobuf:"bytes,3,opt,name=contacthash,proto3" json:"contacthash,omitempty"` //用户联系人的哈希值
	Debug       *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ContatsGetContactsReq) Reset() {
	*x = ContatsGetContactsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContatsGetContactsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContatsGetContactsReq) ProtoMessage() {}

func (x *ContatsGetContactsReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContatsGetContactsReq.ProtoReflect.Descriptor instead.
func (*ContatsGetContactsReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{45}
}

func (x *ContatsGetContactsReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ContatsGetContactsReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *ContatsGetContactsReq) GetContacthash() string {
	if x != nil {
		return x.Contacthash
	}
	return ""
}

func (x *ContatsGetContactsReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 联系人的基本信息
type ContactInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                              //用户自己的id
	ContactId       int32  `protobuf:"varint,2,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`                     //联系人的id
	FirstName       string `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`                      //联系人备注
	LastName        string `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`                         //联系人备注
	IsSelfContacted bool   `protobuf:"varint,5,opt,name=is_self_contacted,json=isSelfContacted,proto3" json:"is_self_contacted,omitempty"` //此联系人是否是自己的联系人
	SelfIsContacted bool   `protobuf:"varint,6,opt,name=self_is_contacted,json=selfIsContacted,proto3" json:"self_is_contacted,omitempty"` //自己是不是此联系人的联系人
	StarMark        bool   `protobuf:"varint,7,opt,name=star_mark,json=starMark,proto3" json:"star_mark,omitempty"`                        //  是否为星标联系人
	HasPhone        bool   `protobuf:"varint,8,opt,name=has_phone,json=hasPhone,proto3" json:"has_phone,omitempty"`                        // 是否通过电话号码添加
	GroupId         int32  `protobuf:"varint,9,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	About           string `protobuf:"bytes,10,opt,name=about,proto3" json:"about,omitempty"`
}

func (x *ContactInfo) Reset() {
	*x = ContactInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactInfo) ProtoMessage() {}

func (x *ContactInfo) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactInfo.ProtoReflect.Descriptor instead.
func (*ContactInfo) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{46}
}

func (x *ContactInfo) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ContactInfo) GetContactId() int32 {
	if x != nil {
		return x.ContactId
	}
	return 0
}

func (x *ContactInfo) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *ContactInfo) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *ContactInfo) GetIsSelfContacted() bool {
	if x != nil {
		return x.IsSelfContacted
	}
	return false
}

func (x *ContactInfo) GetSelfIsContacted() bool {
	if x != nil {
		return x.SelfIsContacted
	}
	return false
}

func (x *ContactInfo) GetStarMark() bool {
	if x != nil {
		return x.StarMark
	}
	return false
}

func (x *ContactInfo) GetHasPhone() bool {
	if x != nil {
		return x.HasPhone
	}
	return false
}

func (x *ContactInfo) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ContactInfo) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

// 用户联系人列表获取的返回
type ContatsGetContactsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactArr  []*ContactInfo `protobuf:"bytes,1,rep,name=contactArr,proto3" json:"contactArr,omitempty"`                               //联系人的的信息们
	UserInfoArr []*UserInfo    `protobuf:"bytes,2,rep,name=userInfoArr,proto3" json:"userInfoArr,omitempty"`                             //联系人们的用户信息们
	Errorcode   ReErrCode      `protobuf:"varint,3,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *ContatsGetContactsResult) Reset() {
	*x = ContatsGetContactsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContatsGetContactsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContatsGetContactsResult) ProtoMessage() {}

func (x *ContatsGetContactsResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContatsGetContactsResult.ProtoReflect.Descriptor instead.
func (*ContatsGetContactsResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{47}
}

func (x *ContatsGetContactsResult) GetContactArr() []*ContactInfo {
	if x != nil {
		return x.ContactArr
	}
	return nil
}

func (x *ContatsGetContactsResult) GetUserInfoArr() []*UserInfo {
	if x != nil {
		return x.UserInfoArr
	}
	return nil
}

func (x *ContatsGetContactsResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

type ContactsGetContactsV1Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"` //用户的Id
	KeyId  int64         `protobuf:"varint,2,opt,name=keyId,proto3" json:"keyId,omitempty"`   // 用户的keyId
	Hash   int32         `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`     //用户联系人的哈希值
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ContactsGetContactsV1Req) Reset() {
	*x = ContactsGetContactsV1Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactsGetContactsV1Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactsGetContactsV1Req) ProtoMessage() {}

func (x *ContactsGetContactsV1Req) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactsGetContactsV1Req.ProtoReflect.Descriptor instead.
func (*ContactsGetContactsV1Req) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{48}
}

func (x *ContactsGetContactsV1Req) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ContactsGetContactsV1Req) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *ContactsGetContactsV1Req) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *ContactsGetContactsV1Req) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ContactsGetContactsV1Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactArr    []*ContactInfo `protobuf:"bytes,1,rep,name=contactArr,proto3" json:"contactArr,omitempty"`       //联系人的的信息们
	UserInfoArr   []*UserInfo    `protobuf:"bytes,2,rep,name=userInfoArr,proto3" json:"userInfoArr,omitempty"`     //联系人们的用户信息们
	GroupOrderArr []*GroupOrder  `protobuf:"bytes,3,rep,name=groupOrderArr,proto3" json:"groupOrderArr,omitempty"` //
	SavedCount    int32          `protobuf:"varint,4,opt,name=savedCount,proto3" json:"savedCount,omitempty"`
	Errorcode     ReErrCode      `protobuf:"varint,5,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *ContactsGetContactsV1Result) Reset() {
	*x = ContactsGetContactsV1Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactsGetContactsV1Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactsGetContactsV1Result) ProtoMessage() {}

func (x *ContactsGetContactsV1Result) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactsGetContactsV1Result.ProtoReflect.Descriptor instead.
func (*ContactsGetContactsV1Result) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{49}
}

func (x *ContactsGetContactsV1Result) GetContactArr() []*ContactInfo {
	if x != nil {
		return x.ContactArr
	}
	return nil
}

func (x *ContactsGetContactsV1Result) GetUserInfoArr() []*UserInfo {
	if x != nil {
		return x.UserInfoArr
	}
	return nil
}

func (x *ContactsGetContactsV1Result) GetGroupOrderArr() []*GroupOrder {
	if x != nil {
		return x.GroupOrderArr
	}
	return nil
}

func (x *ContactsGetContactsV1Result) GetSavedCount() int32 {
	if x != nil {
		return x.SavedCount
	}
	return 0
}

func (x *ContactsGetContactsV1Result) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

type ContactsGetContactsIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"` //用户的Id
	KeyId  int64         `protobuf:"varint,2,opt,name=keyId,proto3" json:"keyId,omitempty"`   // 用户的keyId
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ContactsGetContactsIdReq) Reset() {
	*x = ContactsGetContactsIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactsGetContactsIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactsGetContactsIdReq) ProtoMessage() {}

func (x *ContactsGetContactsIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactsGetContactsIdReq.ProtoReflect.Descriptor instead.
func (*ContactsGetContactsIdReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{50}
}

func (x *ContactsGetContactsIdReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ContactsGetContactsIdReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *ContactsGetContactsIdReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ContactsGetContactsIdResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactsId []int32   `protobuf:"varint,1,rep,packed,name=contactsId,proto3" json:"contactsId,omitempty"`                       //联系人的的信息们
	Errorcode  ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *ContactsGetContactsIdResult) Reset() {
	*x = ContactsGetContactsIdResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactsGetContactsIdResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactsGetContactsIdResult) ProtoMessage() {}

func (x *ContactsGetContactsIdResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactsGetContactsIdResult.ProtoReflect.Descriptor instead.
func (*ContactsGetContactsIdResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{51}
}

func (x *ContactsGetContactsIdResult) GetContactsId() []int32 {
	if x != nil {
		return x.ContactsId
	}
	return nil
}

func (x *ContactsGetContactsIdResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 电话本联系人信息
type PhoneBookContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId  int64  `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Phone     string `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"` //电话号码
	FirstName string `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
}

func (x *PhoneBookContact) Reset() {
	*x = PhoneBookContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhoneBookContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhoneBookContact) ProtoMessage() {}

func (x *PhoneBookContact) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhoneBookContact.ProtoReflect.Descriptor instead.
func (*PhoneBookContact) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{52}
}

func (x *PhoneBookContact) GetClientId() int64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *PhoneBookContact) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *PhoneBookContact) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *PhoneBookContact) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

// 导入\添加联系人的请求包
type ContactsImportPhoneContactsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId           int64               `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`       //端标识
	UserId          int32               `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`    //用户的ID
	PhoneContactArr []*PhoneBookContact `protobuf:"bytes,3,rep,name=phoneContactArr,proto3" json:"phoneContactArr,omitempty"` //联系人的电话号码的列表
	Debug           *pbcomm.Debug       `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ContactsImportPhoneContactsReq) Reset() {
	*x = ContactsImportPhoneContactsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactsImportPhoneContactsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactsImportPhoneContactsReq) ProtoMessage() {}

func (x *ContactsImportPhoneContactsReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactsImportPhoneContactsReq.ProtoReflect.Descriptor instead.
func (*ContactsImportPhoneContactsReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{53}
}

func (x *ContactsImportPhoneContactsReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *ContactsImportPhoneContactsReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ContactsImportPhoneContactsReq) GetPhoneContactArr() []*PhoneBookContact {
	if x != nil {
		return x.PhoneContactArr
	}
	return nil
}

func (x *ContactsImportPhoneContactsReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 导入联系人详细信息
type ImportContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ClientId int64 `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *ImportContact) Reset() {
	*x = ImportContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportContact) ProtoMessage() {}

func (x *ImportContact) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportContact.ProtoReflect.Descriptor instead.
func (*ImportContact) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{54}
}

func (x *ImportContact) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ImportContact) GetClientId() int64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

type PopularContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId  int64 `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Importers int32 `protobuf:"varint,2,opt,name=importers,proto3" json:"importers,omitempty"`
}

func (x *PopularContact) Reset() {
	*x = PopularContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PopularContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopularContact) ProtoMessage() {}

func (x *PopularContact) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopularContact.ProtoReflect.Descriptor instead.
func (*PopularContact) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{55}
}

func (x *PopularContact) GetClientId() int64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *PopularContact) GetImporters() int32 {
	if x != nil {
		return x.Importers
	}
	return 0
}

// 导入联系人的返回结果
type ContactsImportPhoneContactsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImContactDetail []*ImportContact  `protobuf:"bytes,1,rep,name=imContactDetail,proto3" json:"imContactDetail,omitempty"` //导入联系人的信息
	UserInfoArr     []*UserInfo       `protobuf:"bytes,2,rep,name=userInfoArr,proto3" json:"userInfoArr,omitempty"`         //联系人们的用户信息们
	PopuContact     []*PopularContact `protobuf:"bytes,3,rep,name=PopuContact,proto3" json:"PopuContact,omitempty"`
	Errorcode       ReErrCode         `protobuf:"varint,4,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *ContactsImportPhoneContactsResult) Reset() {
	*x = ContactsImportPhoneContactsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactsImportPhoneContactsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactsImportPhoneContactsResult) ProtoMessage() {}

func (x *ContactsImportPhoneContactsResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactsImportPhoneContactsResult.ProtoReflect.Descriptor instead.
func (*ContactsImportPhoneContactsResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{56}
}

func (x *ContactsImportPhoneContactsResult) GetImContactDetail() []*ImportContact {
	if x != nil {
		return x.ImContactDetail
	}
	return nil
}

func (x *ContactsImportPhoneContactsResult) GetUserInfoArr() []*UserInfo {
	if x != nil {
		return x.UserInfoArr
	}
	return nil
}

func (x *ContactsImportPhoneContactsResult) GetPopuContact() []*PopularContact {
	if x != nil {
		return x.PopuContact
	}
	return nil
}

func (x *ContactsImportPhoneContactsResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 关联用户ｉＤ结构
type AddRelationIdInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             //用户自己的id
	RelationId int32         `protobuf:"varint,2,opt,name=relation_id,json=relationId,proto3" json:"relation_id,omitempty"` //联系人的id
	Debug      *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *AddRelationIdInfo) Reset() {
	*x = AddRelationIdInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRelationIdInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRelationIdInfo) ProtoMessage() {}

func (x *AddRelationIdInfo) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRelationIdInfo.ProtoReflect.Descriptor instead.
func (*AddRelationIdInfo) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{57}
}

func (x *AddRelationIdInfo) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddRelationIdInfo) GetRelationId() int32 {
	if x != nil {
		return x.RelationId
	}
	return 0
}

func (x *AddRelationIdInfo) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 解除用户关联的
type DelRelationIdInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             //用户自己的id
	RelationId int32         `protobuf:"varint,2,opt,name=relation_id,json=relationId,proto3" json:"relation_id,omitempty"` //联系人的id
	Debug      *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *DelRelationIdInfo) Reset() {
	*x = DelRelationIdInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelRelationIdInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelRelationIdInfo) ProtoMessage() {}

func (x *DelRelationIdInfo) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelRelationIdInfo.ProtoReflect.Descriptor instead.
func (*DelRelationIdInfo) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{58}
}

func (x *DelRelationIdInfo) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DelRelationIdInfo) GetRelationId() int32 {
	if x != nil {
		return x.RelationId
	}
	return 0
}

func (x *DelRelationIdInfo) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 关联用户用户关系的返回
type AddRelationIdInfoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *AddRelationIdInfoResult) Reset() {
	*x = AddRelationIdInfoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRelationIdInfoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRelationIdInfoResult) ProtoMessage() {}

func (x *AddRelationIdInfoResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRelationIdInfoResult.ProtoReflect.Descriptor instead.
func (*AddRelationIdInfoResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{59}
}

func (x *AddRelationIdInfoResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 解除用户用户关系的返回
type DelRelationIdInfoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *DelRelationIdInfoResult) Reset() {
	*x = DelRelationIdInfoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelRelationIdInfoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelRelationIdInfoResult) ProtoMessage() {}

func (x *DelRelationIdInfoResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelRelationIdInfoResult.ProtoReflect.Descriptor instead.
func (*DelRelationIdInfoResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{60}
}

func (x *DelRelationIdInfoResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 拉黑用户的请求
type BlockeduserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             //用户自己的id
	BlockedId  int32         `protobuf:"varint,2,opt,name=blocked_id,json=blockedId,proto3" json:"blocked_id,omitempty"`    //联系人的id
	AccessHash int64         `protobuf:"varint,3,opt,name=Access_hash,json=AccessHash,proto3" json:"Access_hash,omitempty"` //联系人id对应的哈希值
	KeyId      int64         `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *BlockeduserReq) Reset() {
	*x = BlockeduserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockeduserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockeduserReq) ProtoMessage() {}

func (x *BlockeduserReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockeduserReq.ProtoReflect.Descriptor instead.
func (*BlockeduserReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{61}
}

func (x *BlockeduserReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *BlockeduserReq) GetBlockedId() int32 {
	if x != nil {
		return x.BlockedId
	}
	return 0
}

func (x *BlockeduserReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *BlockeduserReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *BlockeduserReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 拉黑用户的返回
type BlockeduserResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *BlockeduserResult) Reset() {
	*x = BlockeduserResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockeduserResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockeduserResult) ProtoMessage() {}

func (x *BlockeduserResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockeduserResult.ProtoReflect.Descriptor instead.
func (*BlockeduserResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{62}
}

func (x *BlockeduserResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 将用户从黑明单中移除的请求
type ContactUnblockedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             //用户自己的id
	BlockedId  int32         `protobuf:"varint,2,opt,name=blocked_id,json=blockedId,proto3" json:"blocked_id,omitempty"`    //联系人的id
	AccessHash int64         `protobuf:"varint,3,opt,name=Access_hash,json=AccessHash,proto3" json:"Access_hash,omitempty"` //联系人id对应的哈希值
	KeyId      int64         `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ContactUnblockedReq) Reset() {
	*x = ContactUnblockedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactUnblockedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactUnblockedReq) ProtoMessage() {}

func (x *ContactUnblockedReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactUnblockedReq.ProtoReflect.Descriptor instead.
func (*ContactUnblockedReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{63}
}

func (x *ContactUnblockedReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ContactUnblockedReq) GetBlockedId() int32 {
	if x != nil {
		return x.BlockedId
	}
	return 0
}

func (x *ContactUnblockedReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ContactUnblockedReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *ContactUnblockedReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 获取黑明单列表
type ContactsGetBlockedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户自己的id
	Debug  *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ContactsGetBlockedReq) Reset() {
	*x = ContactsGetBlockedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactsGetBlockedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactsGetBlockedReq) ProtoMessage() {}

func (x *ContactsGetBlockedReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactsGetBlockedReq.ProtoReflect.Descriptor instead.
func (*ContactsGetBlockedReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{64}
}

func (x *ContactsGetBlockedReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ContactsGetBlockedReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 黑名单用户的信息
type Blockeduser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //黑明单的用户
	Date   int32 `protobuf:"varint,2,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *Blockeduser) Reset() {
	*x = Blockeduser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Blockeduser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Blockeduser) ProtoMessage() {}

func (x *Blockeduser) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Blockeduser.ProtoReflect.Descriptor instead.
func (*Blockeduser) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{65}
}

func (x *Blockeduser) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Blockeduser) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

// 获取黑明单列表的返回
type ContactsGetBlockedResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blockeduser []int32     `protobuf:"varint,1,rep,packed,name=blockeduser,proto3" json:"blockeduser,omitempty"`                     //黑明单的ID
	InfoArr     []*UserInfo `protobuf:"bytes,2,rep,name=InfoArr,proto3" json:"InfoArr,omitempty"`                                     //黑名单的用户的基础信息们
	Errorcode   ReErrCode   `protobuf:"varint,3,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *ContactsGetBlockedResult) Reset() {
	*x = ContactsGetBlockedResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactsGetBlockedResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactsGetBlockedResult) ProtoMessage() {}

func (x *ContactsGetBlockedResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactsGetBlockedResult.ProtoReflect.Descriptor instead.
func (*ContactsGetBlockedResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{66}
}

func (x *ContactsGetBlockedResult) GetBlockeduser() []int32 {
	if x != nil {
		return x.Blockeduser
	}
	return nil
}

func (x *ContactsGetBlockedResult) GetInfoArr() []*UserInfo {
	if x != nil {
		return x.InfoArr
	}
	return nil
}

func (x *ContactsGetBlockedResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 系统白名单的基础信息
type SystemWhiteUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`    //用户自己的id
	Level   int32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`                    //白名单的权限级别
	Proby   int32 `protobuf:"varint,3,opt,name=proby,proto3" json:"proby,omitempty"`                    //将用户白名单修改的用户
	IsWhite bool  `protobuf:"varint,4,opt,name=is_white,json=isWhite,proto3" json:"is_white,omitempty"` // true if user is white
}

func (x *SystemWhiteUser) Reset() {
	*x = SystemWhiteUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemWhiteUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemWhiteUser) ProtoMessage() {}

func (x *SystemWhiteUser) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemWhiteUser.ProtoReflect.Descriptor instead.
func (*SystemWhiteUser) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{67}
}

func (x *SystemWhiteUser) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SystemWhiteUser) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *SystemWhiteUser) GetProby() int32 {
	if x != nil {
		return x.Proby
	}
	return 0
}

func (x *SystemWhiteUser) GetIsWhite() bool {
	if x != nil {
		return x.IsWhite
	}
	return false
}

// 存储系统白名单的请求
type StoreSysWhiteUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户自己的id
	Level  int32         `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`                 //白名单的权限级别
	Proby  int32         `protobuf:"varint,3,opt,name=proby,proto3" json:"proby,omitempty"`                 //将用户白名单修改的用户
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *StoreSysWhiteUserReq) Reset() {
	*x = StoreSysWhiteUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreSysWhiteUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreSysWhiteUserReq) ProtoMessage() {}

func (x *StoreSysWhiteUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreSysWhiteUserReq.ProtoReflect.Descriptor instead.
func (*StoreSysWhiteUserReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{68}
}

func (x *StoreSysWhiteUserReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *StoreSysWhiteUserReq) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *StoreSysWhiteUserReq) GetProby() int32 {
	if x != nil {
		return x.Proby
	}
	return 0
}

func (x *StoreSysWhiteUserReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 存储系统白名单的返回结果
type StoreSysWhiteUserResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *StoreSysWhiteUserResult) Reset() {
	*x = StoreSysWhiteUserResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreSysWhiteUserResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreSysWhiteUserResult) ProtoMessage() {}

func (x *StoreSysWhiteUserResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreSysWhiteUserResult.ProtoReflect.Descriptor instead.
func (*StoreSysWhiteUserResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{69}
}

func (x *StoreSysWhiteUserResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 更新用户系统白名单的请求
type UpdateSystemWhiteUserLevelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户自己的id
	Level  int32         `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`                 //白名单的权限级别
	Proby  int32         `protobuf:"varint,3,opt,name=proby,proto3" json:"proby,omitempty"`                 //将用户白名单修改的用户
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UpdateSystemWhiteUserLevelReq) Reset() {
	*x = UpdateSystemWhiteUserLevelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSystemWhiteUserLevelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSystemWhiteUserLevelReq) ProtoMessage() {}

func (x *UpdateSystemWhiteUserLevelReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSystemWhiteUserLevelReq.ProtoReflect.Descriptor instead.
func (*UpdateSystemWhiteUserLevelReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{70}
}

func (x *UpdateSystemWhiteUserLevelReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateSystemWhiteUserLevelReq) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *UpdateSystemWhiteUserLevelReq) GetProby() int32 {
	if x != nil {
		return x.Proby
	}
	return 0
}

func (x *UpdateSystemWhiteUserLevelReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 更新用户系统白名单的返回结果
type UpdateSystemWhiteUserLevelResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *UpdateSystemWhiteUserLevelResult) Reset() {
	*x = UpdateSystemWhiteUserLevelResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSystemWhiteUserLevelResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSystemWhiteUserLevelResult) ProtoMessage() {}

func (x *UpdateSystemWhiteUserLevelResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSystemWhiteUserLevelResult.ProtoReflect.Descriptor instead.
func (*UpdateSystemWhiteUserLevelResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{71}
}

func (x *UpdateSystemWhiteUserLevelResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 获取系统白名单权限
type GetSysWhiteUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"` // 需要获取指定白名单人的权限
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetSysWhiteUserReq) Reset() {
	*x = GetSysWhiteUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSysWhiteUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSysWhiteUserReq) ProtoMessage() {}

func (x *GetSysWhiteUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSysWhiteUserReq.ProtoReflect.Descriptor instead.
func (*GetSysWhiteUserReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{72}
}

func (x *GetSysWhiteUserReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetSysWhiteUserReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 获取系统白名单权限结果
type GetSysWhiteUserResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SysWhiteInfo *SystemWhiteUser `protobuf:"bytes,1,opt,name=sysWhiteInfo,proto3" json:"sysWhiteInfo,omitempty"`                           //系统白名单信息
	Errorcode    ReErrCode        `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *GetSysWhiteUserResult) Reset() {
	*x = GetSysWhiteUserResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSysWhiteUserResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSysWhiteUserResult) ProtoMessage() {}

func (x *GetSysWhiteUserResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSysWhiteUserResult.ProtoReflect.Descriptor instead.
func (*GetSysWhiteUserResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{73}
}

func (x *GetSysWhiteUserResult) GetSysWhiteInfo() *SystemWhiteUser {
	if x != nil {
		return x.SysWhiteInfo
	}
	return nil
}

func (x *GetSysWhiteUserResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 获取系统所有白名单请求
type GetSysWhiteUserArrReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetSysWhiteUserArrReq) Reset() {
	*x = GetSysWhiteUserArrReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSysWhiteUserArrReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSysWhiteUserArrReq) ProtoMessage() {}

func (x *GetSysWhiteUserArrReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSysWhiteUserArrReq.ProtoReflect.Descriptor instead.
func (*GetSysWhiteUserArrReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{74}
}

func (x *GetSysWhiteUserArrReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 获取系统所有白名单返回
type GetSysWhiteUserArrResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SysWhiteInfoArr []*SystemWhiteUser `protobuf:"bytes,1,rep,name=sysWhiteInfoArr,proto3" json:"sysWhiteInfoArr,omitempty"`                     //系统白名单信息
	Errorcode       ReErrCode          `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *GetSysWhiteUserArrResult) Reset() {
	*x = GetSysWhiteUserArrResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSysWhiteUserArrResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSysWhiteUserArrResult) ProtoMessage() {}

func (x *GetSysWhiteUserArrResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSysWhiteUserArrResult.ProtoReflect.Descriptor instead.
func (*GetSysWhiteUserArrResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{75}
}

func (x *GetSysWhiteUserArrResult) GetSysWhiteInfoArr() []*SystemWhiteUser {
	if x != nil {
		return x.SysWhiteInfoArr
	}
	return nil
}

func (x *GetSysWhiteUserArrResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 删除系统白名单用户的请求
type DelSysWhiteUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`   //需要删除的系统白名单的用户的ID
	ProUser int32         `protobuf:"varint,2,opt,name=ProUser,proto3" json:"ProUser,omitempty"` //删除用户白名单的人
	Debug   *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *DelSysWhiteUserReq) Reset() {
	*x = DelSysWhiteUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelSysWhiteUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelSysWhiteUserReq) ProtoMessage() {}

func (x *DelSysWhiteUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelSysWhiteUserReq.ProtoReflect.Descriptor instead.
func (*DelSysWhiteUserReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{76}
}

func (x *DelSysWhiteUserReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DelSysWhiteUserReq) GetProUser() int32 {
	if x != nil {
		return x.ProUser
	}
	return 0
}

func (x *DelSysWhiteUserReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 删除系统白名单用户的返回结果
type DelSysWhiteUserResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *DelSysWhiteUserResult) Reset() {
	*x = DelSysWhiteUserResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelSysWhiteUserResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelSysWhiteUserResult) ProtoMessage() {}

func (x *DelSysWhiteUserResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelSysWhiteUserResult.ProtoReflect.Descriptor instead.
func (*DelSysWhiteUserResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{77}
}

func (x *DelSysWhiteUserResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// user的ＤＣ的信息
type UserDc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //userId
	DcId   int32         `protobuf:"varint,2,opt,name=dc_id,json=dcId,proto3" json:"dc_id,omitempty"`       //用户的DCId
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UserDc) Reset() {
	*x = UserDc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDc) ProtoMessage() {}

func (x *UserDc) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDc.ProtoReflect.Descriptor instead.
func (*UserDc) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{78}
}

func (x *UserDc) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserDc) GetDcId() int32 {
	if x != nil {
		return x.DcId
	}
	return 0
}

func (x *UserDc) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 拉取所有用户的DC的请求
type GetAllDcReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetAllDcReq) Reset() {
	*x = GetAllDcReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllDcReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllDcReq) ProtoMessage() {}

func (x *GetAllDcReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllDcReq.ProtoReflect.Descriptor instead.
func (*GetAllDcReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{79}
}

func (x *GetAllDcReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 设置隐私选项的接口的请求
type SetPrivacyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PrivacyType    int32         `protobuf:"varint,2,opt,name=privacy_type,json=privacyType,proto3" json:"privacy_type,omitempty"`                 //隐私选项的类型 1 代表 在线时间的设置  2 代表群组邀请的设置  3、代表phonecall的设置
	Range          int32         `protobuf:"varint,3,opt,name=range,proto3" json:"range,omitempty"`                                                // 1 代表每个人 2 代表 我的联系人  3、代表没有人
	AlwaysDisallow []int32       `protobuf:"varint,4,rep,packed,name=always_disallow,json=alwaysDisallow,proto3" json:"always_disallow,omitempty"` //永不分享的列表
	AlwaysAllow    []int32       `protobuf:"varint,5,rep,packed,name=always_allow,json=alwaysAllow,proto3" json:"always_allow,omitempty"`          //总是分享的列表
	Ip             string        `protobuf:"bytes,6,opt,name=ip,proto3" json:"ip,omitempty"`
	KeyId          int64         `protobuf:"varint,7,opt,name=keyId,proto3" json:"keyId,omitempty"`
	SessionId      int64         `protobuf:"varint,8,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Phone          string        `protobuf:"bytes,9,opt,name=phone,proto3" json:"phone,omitempty"`
	Debug          *pbcomm.Debug `protobuf:"bytes,10,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *SetPrivacyReq) Reset() {
	*x = SetPrivacyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPrivacyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPrivacyReq) ProtoMessage() {}

func (x *SetPrivacyReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPrivacyReq.ProtoReflect.Descriptor instead.
func (*SetPrivacyReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{80}
}

func (x *SetPrivacyReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SetPrivacyReq) GetPrivacyType() int32 {
	if x != nil {
		return x.PrivacyType
	}
	return 0
}

func (x *SetPrivacyReq) GetRange() int32 {
	if x != nil {
		return x.Range
	}
	return 0
}

func (x *SetPrivacyReq) GetAlwaysDisallow() []int32 {
	if x != nil {
		return x.AlwaysDisallow
	}
	return nil
}

func (x *SetPrivacyReq) GetAlwaysAllow() []int32 {
	if x != nil {
		return x.AlwaysAllow
	}
	return nil
}

func (x *SetPrivacyReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *SetPrivacyReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *SetPrivacyReq) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *SetPrivacyReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *SetPrivacyReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 设置隐私选项的接口的返回
type SetPrivacyResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UinfoArr  []*UserInfo `protobuf:"bytes,1,rep,name=UinfoArr,proto3" json:"UinfoArr,omitempty"`
	Errorcode ReErrCode   `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *SetPrivacyResult) Reset() {
	*x = SetPrivacyResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPrivacyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPrivacyResult) ProtoMessage() {}

func (x *SetPrivacyResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPrivacyResult.ProtoReflect.Descriptor instead.
func (*SetPrivacyResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{81}
}

func (x *SetPrivacyResult) GetUinfoArr() []*UserInfo {
	if x != nil {
		return x.UinfoArr
	}
	return nil
}

func (x *SetPrivacyResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 获取隐私选项的接口
type GetPrivacyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                //需要请求的用户的Id
	PrivacyType int32         `protobuf:"varint,2,opt,name=privacy_type,json=privacyType,proto3" json:"privacy_type,omitempty"` //隐私选项的类型 1 代表 在线时间的设置  2 代表群组邀请的设置  3、代表phonecall的设置
	KeyId       int64         `protobuf:"varint,3,opt,name=keyId,proto3" json:"keyId,omitempty"`
	SessionId   int64         `protobuf:"varint,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"` //
	Ip          string        `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip,omitempty"`
	Phone       string        `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetPrivacyReq) Reset() {
	*x = GetPrivacyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPrivacyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrivacyReq) ProtoMessage() {}

func (x *GetPrivacyReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrivacyReq.ProtoReflect.Descriptor instead.
func (*GetPrivacyReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{82}
}

func (x *GetPrivacyReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetPrivacyReq) GetPrivacyType() int32 {
	if x != nil {
		return x.PrivacyType
	}
	return 0
}

func (x *GetPrivacyReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *GetPrivacyReq) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *GetPrivacyReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *GetPrivacyReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *GetPrivacyReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 检查相应的隐私设置是否被允许的请求接口
type CheckPrivacyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId      int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"` //检查自己是否是在 userId 相应权限允许列表中
	UserId      int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PrivacyType int32         `protobuf:"varint,3,opt,name=privacy_type,json=privacyType,proto3" json:"privacy_type,omitempty"` //隐私选项的类型 1 代表 在线时间的设置  2 代表群组邀请的设置  3、代表phonecall的设置 6 电话号码是否可以被搜索
	Debug       *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *CheckPrivacyReq) Reset() {
	*x = CheckPrivacyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckPrivacyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPrivacyReq) ProtoMessage() {}

func (x *CheckPrivacyReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPrivacyReq.ProtoReflect.Descriptor instead.
func (*CheckPrivacyReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{83}
}

func (x *CheckPrivacyReq) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *CheckPrivacyReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CheckPrivacyReq) GetPrivacyType() int32 {
	if x != nil {
		return x.PrivacyType
	}
	return 0
}

func (x *CheckPrivacyReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 检查相应的隐私设置是否被允许的请求返回
type CheckPrivacyResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *CheckPrivacyResult) Reset() {
	*x = CheckPrivacyResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckPrivacyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPrivacyResult) ProtoMessage() {}

func (x *CheckPrivacyResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPrivacyResult.ProtoReflect.Descriptor instead.
func (*CheckPrivacyResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{84}
}

func (x *CheckPrivacyResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 隐私选项获取的结果
type GetPrivacyResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Range          int32       `protobuf:"varint,1,opt,name=range,proto3" json:"range,omitempty"`                                                // 1 代表每个人 2 代表 我的联系人  3、代表没有人 4、代表不允许我的所有联系人
	AlwaysDisallow []int32     `protobuf:"varint,2,rep,packed,name=always_disallow,json=alwaysDisallow,proto3" json:"always_disallow,omitempty"` //永不分享的列表
	AlwaysAllow    []int32     `protobuf:"varint,3,rep,packed,name=always_allow,json=alwaysAllow,proto3" json:"always_allow,omitempty"`          //总是分享的列表
	UserInfos      []*UserInfo `protobuf:"bytes,4,rep,name=userInfos,proto3" json:"userInfos,omitempty"`                                         //永不分享的列表和总是分享列表的 用户信息们
	Errorcode      ReErrCode   `protobuf:"varint,5,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`         //返回错误码
}

func (x *GetPrivacyResult) Reset() {
	*x = GetPrivacyResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPrivacyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrivacyResult) ProtoMessage() {}

func (x *GetPrivacyResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrivacyResult.ProtoReflect.Descriptor instead.
func (*GetPrivacyResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{85}
}

func (x *GetPrivacyResult) GetRange() int32 {
	if x != nil {
		return x.Range
	}
	return 0
}

func (x *GetPrivacyResult) GetAlwaysDisallow() []int32 {
	if x != nil {
		return x.AlwaysDisallow
	}
	return nil
}

func (x *GetPrivacyResult) GetAlwaysAllow() []int32 {
	if x != nil {
		return x.AlwaysAllow
	}
	return nil
}

func (x *GetPrivacyResult) GetUserInfos() []*UserInfo {
	if x != nil {
		return x.UserInfos
	}
	return nil
}

func (x *GetPrivacyResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 存储sticker 集合概要的请求参数
type StoreShopStickerSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessHash int64         `protobuf:"varint,1,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Free       bool          `protobuf:"varint,2,opt,name=free,proto3" json:"free,omitempty"`
	Official   bool          `protobuf:"varint,3,opt,name=official,proto3" json:"official,omitempty"`
	Masks      bool          `protobuf:"varint,4,opt,name=masks,proto3" json:"masks,omitempty"`
	Title      string        `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	ShortName  string        `protobuf:"bytes,6,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Count      int32         `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`
	Hash       int64         `protobuf:"varint,8,opt,name=hash,proto3" json:"hash,omitempty"`
	Emoticon   string        `protobuf:"bytes,9,opt,name=emoticon,proto3" json:"emoticon,omitempty"`
	Documents  []int32       `protobuf:"varint,10,rep,packed,name=documents,proto3" json:"documents,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,11,opt,name=debug,proto3" json:"debug,omitempty"`
	UserId     int32         `protobuf:"varint,12,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //sticker作者id - 2018.10.18 新增
}

func (x *StoreShopStickerSetReq) Reset() {
	*x = StoreShopStickerSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreShopStickerSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreShopStickerSetReq) ProtoMessage() {}

func (x *StoreShopStickerSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreShopStickerSetReq.ProtoReflect.Descriptor instead.
func (*StoreShopStickerSetReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{86}
}

func (x *StoreShopStickerSetReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *StoreShopStickerSetReq) GetFree() bool {
	if x != nil {
		return x.Free
	}
	return false
}

func (x *StoreShopStickerSetReq) GetOfficial() bool {
	if x != nil {
		return x.Official
	}
	return false
}

func (x *StoreShopStickerSetReq) GetMasks() bool {
	if x != nil {
		return x.Masks
	}
	return false
}

func (x *StoreShopStickerSetReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *StoreShopStickerSetReq) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *StoreShopStickerSetReq) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *StoreShopStickerSetReq) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *StoreShopStickerSetReq) GetEmoticon() string {
	if x != nil {
		return x.Emoticon
	}
	return ""
}

func (x *StoreShopStickerSetReq) GetDocuments() []int32 {
	if x != nil {
		return x.Documents
	}
	return nil
}

func (x *StoreShopStickerSetReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *StoreShopStickerSetReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 存储sticker 集合概要的返回
type StoreShopStickerSetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                              //Sticker生成的id
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *StoreShopStickerSetResult) Reset() {
	*x = StoreShopStickerSetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreShopStickerSetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreShopStickerSetResult) ProtoMessage() {}

func (x *StoreShopStickerSetResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreShopStickerSetResult.ProtoReflect.Descriptor instead.
func (*StoreShopStickerSetResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{87}
}

func (x *StoreShopStickerSetResult) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StoreShopStickerSetResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 存储sticker 集合概要 Documents请求
type StoreShopStickerSetDocumentsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Documents []int32       `protobuf:"varint,2,rep,packed,name=documents,proto3" json:"documents,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *StoreShopStickerSetDocumentsReq) Reset() {
	*x = StoreShopStickerSetDocumentsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreShopStickerSetDocumentsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreShopStickerSetDocumentsReq) ProtoMessage() {}

func (x *StoreShopStickerSetDocumentsReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreShopStickerSetDocumentsReq.ProtoReflect.Descriptor instead.
func (*StoreShopStickerSetDocumentsReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{88}
}

func (x *StoreShopStickerSetDocumentsReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StoreShopStickerSetDocumentsReq) GetDocuments() []int32 {
	if x != nil {
		return x.Documents
	}
	return nil
}

func (x *StoreShopStickerSetDocumentsReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 存储sticker 集合概要 Documents返回结果
type StoreShopStickerSetDocumentsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *StoreShopStickerSetDocumentsResult) Reset() {
	*x = StoreShopStickerSetDocumentsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreShopStickerSetDocumentsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreShopStickerSetDocumentsResult) ProtoMessage() {}

func (x *StoreShopStickerSetDocumentsResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreShopStickerSetDocumentsResult.ProtoReflect.Descriptor instead.
func (*StoreShopStickerSetDocumentsResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{89}
}

func (x *StoreShopStickerSetDocumentsResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 删除sticker商城的请求
type DeleteStickerSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StickerId int32         `protobuf:"varint,1,opt,name=stickerId,proto3" json:"stickerId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
	UserId    int32         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //sticker作者id - 2018.10.18 新增
}

func (x *DeleteStickerSetReq) Reset() {
	*x = DeleteStickerSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStickerSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStickerSetReq) ProtoMessage() {}

func (x *DeleteStickerSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStickerSetReq.ProtoReflect.Descriptor instead.
func (*DeleteStickerSetReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{90}
}

func (x *DeleteStickerSetReq) GetStickerId() int32 {
	if x != nil {
		return x.StickerId
	}
	return 0
}

func (x *DeleteStickerSetReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *DeleteStickerSetReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 删除sticker商城的返回
type DeleteStickerSetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *DeleteStickerSetResult) Reset() {
	*x = DeleteStickerSetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStickerSetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStickerSetResult) ProtoMessage() {}

func (x *DeleteStickerSetResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStickerSetResult.ProtoReflect.Descriptor instead.
func (*DeleteStickerSetResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{91}
}

func (x *DeleteStickerSetResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// sticker set 的基础信息
type StickerSetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AccessHash int64   `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Free       bool    `protobuf:"varint,3,opt,name=free,proto3" json:"free,omitempty"`
	Official   bool    `protobuf:"varint,4,opt,name=official,proto3" json:"official,omitempty"`
	Masks      bool    `protobuf:"varint,5,opt,name=masks,proto3" json:"masks,omitempty"`
	Title      string  `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	ShortName  string  `protobuf:"bytes,7,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Count      int32   `protobuf:"varint,8,opt,name=count,proto3" json:"count,omitempty"`
	Hash       int64   `protobuf:"varint,9,opt,name=hash,proto3" json:"hash,omitempty"`
	Emoticon   string  `protobuf:"bytes,10,opt,name=emoticon,proto3" json:"emoticon,omitempty"`
	Documents  []int32 `protobuf:"varint,11,rep,packed,name=documents,proto3" json:"documents,omitempty"`
}

func (x *StickerSetInfo) Reset() {
	*x = StickerSetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StickerSetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StickerSetInfo) ProtoMessage() {}

func (x *StickerSetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StickerSetInfo.ProtoReflect.Descriptor instead.
func (*StickerSetInfo) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{92}
}

func (x *StickerSetInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StickerSetInfo) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *StickerSetInfo) GetFree() bool {
	if x != nil {
		return x.Free
	}
	return false
}

func (x *StickerSetInfo) GetOfficial() bool {
	if x != nil {
		return x.Official
	}
	return false
}

func (x *StickerSetInfo) GetMasks() bool {
	if x != nil {
		return x.Masks
	}
	return false
}

func (x *StickerSetInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *StickerSetInfo) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *StickerSetInfo) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *StickerSetInfo) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *StickerSetInfo) GetEmoticon() string {
	if x != nil {
		return x.Emoticon
	}
	return ""
}

func (x *StickerSetInfo) GetDocuments() []int32 {
	if x != nil {
		return x.Documents
	}
	return nil
}

// 获取指定的sticker集合的请求
type GetStickerSetInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //sticker的id
	ShortName string        `protobuf:"bytes,2,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	IsId      bool          `protobuf:"varint,3,opt,name=is_id,json=isId,proto3" json:"is_id,omitempty"` //是否是根据Id来查 true 根据Id查询 false根据short_name 查询
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetStickerSetInfoReq) Reset() {
	*x = GetStickerSetInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStickerSetInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStickerSetInfoReq) ProtoMessage() {}

func (x *GetStickerSetInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStickerSetInfoReq.ProtoReflect.Descriptor instead.
func (*GetStickerSetInfoReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{93}
}

func (x *GetStickerSetInfoReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetStickerSetInfoReq) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *GetStickerSetInfoReq) GetIsId() bool {
	if x != nil {
		return x.IsId
	}
	return false
}

func (x *GetStickerSetInfoReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// //获取指定的sticker集合的返回
type GetStickerSetInfoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StickerSetInfo *StickerSetInfo `protobuf:"bytes,1,opt,name=stickerSetInfo,proto3" json:"stickerSetInfo,omitempty"`                       //sticker的基础信息
	Errorcode      ReErrCode       `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *GetStickerSetInfoResult) Reset() {
	*x = GetStickerSetInfoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStickerSetInfoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStickerSetInfoResult) ProtoMessage() {}

func (x *GetStickerSetInfoResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStickerSetInfoResult.ProtoReflect.Descriptor instead.
func (*GetStickerSetInfoResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{94}
}

func (x *GetStickerSetInfoResult) GetStickerSetInfo() *StickerSetInfo {
	if x != nil {
		return x.StickerSetInfo
	}
	return nil
}

func (x *GetStickerSetInfoResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// sticker集合里面具体内容
// 存储单个sticker内容请求
type StickerPackDocumentBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributesStikerSetId         int64  `protobuf:"varint,1,opt,name=attributes_stiker_set_id,json=attributesStikerSetId,proto3" json:"attributes_stiker_set_id,omitempty"`
	DocumentId                    uint64 `protobuf:"varint,2,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	AccessHash                    int64  `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	MimeType                      string `protobuf:"bytes,4,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	Size                          int32  `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	Thumb                         string `protobuf:"bytes,6,opt,name=thumb,proto3" json:"thumb,omitempty"`
	DcId                          int32  `protobuf:"varint,7,opt,name=dc_id,json=dcId,proto3" json:"dc_id,omitempty"`
	Date                          int32  `protobuf:"varint,8,opt,name=date,proto3" json:"date,omitempty"`
	AttributesImageSizeW          int32  `protobuf:"varint,9,opt,name=attributes_image_size_w,json=attributesImageSizeW,proto3" json:"attributes_image_size_w,omitempty"`
	AttributesImageSizeH          int32  `protobuf:"varint,10,opt,name=attributes_image_size_h,json=attributesImageSizeH,proto3" json:"attributes_image_size_h,omitempty"`
	AttributesStikerAlt           string `protobuf:"bytes,11,opt,name=attributes_stiker_alt,json=attributesStikerAlt,proto3" json:"attributes_stiker_alt,omitempty"`
	AttributesStikerSetAccessHash int64  `protobuf:"varint,12,opt,name=attributes_stiker_set_access_hash,json=attributesStikerSetAccessHash,proto3" json:"attributes_stiker_set_access_hash,omitempty"`
	AttributesFileName            string `protobuf:"bytes,13,opt,name=attributes_file_name,json=attributesFileName,proto3" json:"attributes_file_name,omitempty"`
}

func (x *StickerPackDocumentBase) Reset() {
	*x = StickerPackDocumentBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StickerPackDocumentBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StickerPackDocumentBase) ProtoMessage() {}

func (x *StickerPackDocumentBase) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StickerPackDocumentBase.ProtoReflect.Descriptor instead.
func (*StickerPackDocumentBase) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{95}
}

func (x *StickerPackDocumentBase) GetAttributesStikerSetId() int64 {
	if x != nil {
		return x.AttributesStikerSetId
	}
	return 0
}

func (x *StickerPackDocumentBase) GetDocumentId() uint64 {
	if x != nil {
		return x.DocumentId
	}
	return 0
}

func (x *StickerPackDocumentBase) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *StickerPackDocumentBase) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *StickerPackDocumentBase) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *StickerPackDocumentBase) GetThumb() string {
	if x != nil {
		return x.Thumb
	}
	return ""
}

func (x *StickerPackDocumentBase) GetDcId() int32 {
	if x != nil {
		return x.DcId
	}
	return 0
}

func (x *StickerPackDocumentBase) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *StickerPackDocumentBase) GetAttributesImageSizeW() int32 {
	if x != nil {
		return x.AttributesImageSizeW
	}
	return 0
}

func (x *StickerPackDocumentBase) GetAttributesImageSizeH() int32 {
	if x != nil {
		return x.AttributesImageSizeH
	}
	return 0
}

func (x *StickerPackDocumentBase) GetAttributesStikerAlt() string {
	if x != nil {
		return x.AttributesStikerAlt
	}
	return ""
}

func (x *StickerPackDocumentBase) GetAttributesStikerSetAccessHash() int64 {
	if x != nil {
		return x.AttributesStikerSetAccessHash
	}
	return 0
}

func (x *StickerPackDocumentBase) GetAttributesFileName() string {
	if x != nil {
		return x.AttributesFileName
	}
	return ""
}

type StickerPackDocumentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	InfoBase *StickerPackDocumentBase `protobuf:"bytes,2,opt,name=infoBase,proto3" json:"infoBase,omitempty"`
}

func (x *StickerPackDocumentInfo) Reset() {
	*x = StickerPackDocumentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StickerPackDocumentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StickerPackDocumentInfo) ProtoMessage() {}

func (x *StickerPackDocumentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StickerPackDocumentInfo.ProtoReflect.Descriptor instead.
func (*StickerPackDocumentInfo) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{96}
}

func (x *StickerPackDocumentInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StickerPackDocumentInfo) GetInfoBase() *StickerPackDocumentBase {
	if x != nil {
		return x.InfoBase
	}
	return nil
}

// 存储sticker文档的请求
type StoreStickerPackDcReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stickpackbase *StickerPackDocumentBase `protobuf:"bytes,1,opt,name=stickpackbase,proto3" json:"stickpackbase,omitempty"`
	Debug         *pbcomm.Debug            `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *StoreStickerPackDcReq) Reset() {
	*x = StoreStickerPackDcReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreStickerPackDcReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreStickerPackDcReq) ProtoMessage() {}

func (x *StoreStickerPackDcReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreStickerPackDcReq.ProtoReflect.Descriptor instead.
func (*StoreStickerPackDcReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{97}
}

func (x *StoreStickerPackDcReq) GetStickpackbase() *StickerPackDocumentBase {
	if x != nil {
		return x.Stickpackbase
	}
	return nil
}

func (x *StoreStickerPackDcReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 存储sticker文档的返回
type StoreStickerPackDcResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *StoreStickerPackDcResult) Reset() {
	*x = StoreStickerPackDcResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreStickerPackDcResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreStickerPackDcResult) ProtoMessage() {}

func (x *StoreStickerPackDcResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreStickerPackDcResult.ProtoReflect.Descriptor instead.
func (*StoreStickerPackDcResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{98}
}

func (x *StoreStickerPackDcResult) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StoreStickerPackDcResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 批量导入sticker的请求
type StoreStickerPackDcArrReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StPDB []*StickerPackDocumentBase `protobuf:"bytes,1,rep,name=StPDB,proto3" json:"StPDB,omitempty"`
	Debug *pbcomm.Debug              `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *StoreStickerPackDcArrReq) Reset() {
	*x = StoreStickerPackDcArrReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreStickerPackDcArrReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreStickerPackDcArrReq) ProtoMessage() {}

func (x *StoreStickerPackDcArrReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreStickerPackDcArrReq.ProtoReflect.Descriptor instead.
func (*StoreStickerPackDcArrReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{99}
}

func (x *StoreStickerPackDcArrReq) GetStPDB() []*StickerPackDocumentBase {
	if x != nil {
		return x.StPDB
	}
	return nil
}

func (x *StoreStickerPackDcArrReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 批量导入sticker的返回
type StoreStickerPackDcArrResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdArr     []int32   `protobuf:"varint,1,rep,packed,name=idArr,proto3" json:"idArr,omitempty"`                                 //导入后的id的列表
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *StoreStickerPackDcArrResult) Reset() {
	*x = StoreStickerPackDcArrResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreStickerPackDcArrResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreStickerPackDcArrResult) ProtoMessage() {}

func (x *StoreStickerPackDcArrResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreStickerPackDcArrResult.ProtoReflect.Descriptor instead.
func (*StoreStickerPackDcArrResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{100}
}

func (x *StoreStickerPackDcArrResult) GetIdArr() []int32 {
	if x != nil {
		return x.IdArr
	}
	return nil
}

func (x *StoreStickerPackDcArrResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 获取一个sticker下面的所有贴图信息的请求
type GetStickerSetPackDcInfosReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int32         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //stickerSet 的id
	Debug *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetStickerSetPackDcInfosReq) Reset() {
	*x = GetStickerSetPackDcInfosReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStickerSetPackDcInfosReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStickerSetPackDcInfosReq) ProtoMessage() {}

func (x *GetStickerSetPackDcInfosReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStickerSetPackDcInfosReq.ProtoReflect.Descriptor instead.
func (*GetStickerSetPackDcInfosReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{101}
}

func (x *GetStickerSetPackDcInfosReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetStickerSetPackDcInfosReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 获取一个sticker下面的所有贴图信息的返回
type GetStickerSetPackDcInfosResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StPDcInfo []*StickerPackDocumentInfo `protobuf:"bytes,1,rep,name=StPDcInfo,proto3" json:"StPDcInfo,omitempty"`
}

func (x *GetStickerSetPackDcInfosResult) Reset() {
	*x = GetStickerSetPackDcInfosResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStickerSetPackDcInfosResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStickerSetPackDcInfosResult) ProtoMessage() {}

func (x *GetStickerSetPackDcInfosResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStickerSetPackDcInfosResult.ProtoReflect.Descriptor instead.
func (*GetStickerSetPackDcInfosResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{102}
}

func (x *GetStickerSetPackDcInfosResult) GetStPDcInfo() []*StickerPackDocumentInfo {
	if x != nil {
		return x.StPDcInfo
	}
	return nil
}

// 添加喜欢的sticker 请求
type AddOrDeleteFaveSticerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`       // 用户ID
	StickerId int64         `protobuf:"varint,2,opt,name=StickerId,proto3" json:"StickerId,omitempty"` // sticker 的 id
	Unfave    bool          `protobuf:"varint,3,opt,name=Unfave,proto3" json:"Unfave,omitempty"`       // 是否取消 true: 取消喜欢 false: 添加为喜欢
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *AddOrDeleteFaveSticerReq) Reset() {
	*x = AddOrDeleteFaveSticerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOrDeleteFaveSticerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOrDeleteFaveSticerReq) ProtoMessage() {}

func (x *AddOrDeleteFaveSticerReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOrDeleteFaveSticerReq.ProtoReflect.Descriptor instead.
func (*AddOrDeleteFaveSticerReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{103}
}

func (x *AddOrDeleteFaveSticerReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddOrDeleteFaveSticerReq) GetStickerId() int64 {
	if x != nil {
		return x.StickerId
	}
	return 0
}

func (x *AddOrDeleteFaveSticerReq) GetUnfave() bool {
	if x != nil {
		return x.Unfave
	}
	return false
}

func (x *AddOrDeleteFaveSticerReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 添加喜欢的sticker 返回
type AddOrDeleteFaveSticerResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode ReErrCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.ReErrCode" json:"ErrorCode,omitempty"` // 返回错误码
}

func (x *AddOrDeleteFaveSticerResult) Reset() {
	*x = AddOrDeleteFaveSticerResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOrDeleteFaveSticerResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOrDeleteFaveSticerResult) ProtoMessage() {}

func (x *AddOrDeleteFaveSticerResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOrDeleteFaveSticerResult.ProtoReflect.Descriptor instead.
func (*AddOrDeleteFaveSticerResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{104}
}

func (x *AddOrDeleteFaveSticerResult) GetErrorCode() ReErrCode {
	if x != nil {
		return x.ErrorCode
	}
	return ReErrCode_Success
}

// 获取已经添加的的喜爱单个贴图 请求
type GetFavedStickersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Hash   int32         `protobuf:"varint,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetFavedStickersReq) Reset() {
	*x = GetFavedStickersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFavedStickersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFavedStickersReq) ProtoMessage() {}

func (x *GetFavedStickersReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFavedStickersReq.ProtoReflect.Descriptor instead.
func (*GetFavedStickersReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{105}
}

func (x *GetFavedStickersReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetFavedStickersReq) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *GetFavedStickersReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 获取已经添加的的喜爱单个贴图 返回
type GetFavedStickersResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash      int32                      `protobuf:"varint,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Packs     []*StickerPack             `protobuf:"bytes,2,rep,name=packs,proto3" json:"packs,omitempty"`
	Stickers  []*StickerPackDocumentBase `protobuf:"bytes,3,rep,name=stickers,proto3" json:"stickers,omitempty"`
	ErrorCode ReErrCode                  `protobuf:"varint,4,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.ReErrCode" json:"ErrorCode,omitempty"` // 返回错误码
}

func (x *GetFavedStickersResult) Reset() {
	*x = GetFavedStickersResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFavedStickersResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFavedStickersResult) ProtoMessage() {}

func (x *GetFavedStickersResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFavedStickersResult.ProtoReflect.Descriptor instead.
func (*GetFavedStickersResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{106}
}

func (x *GetFavedStickersResult) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *GetFavedStickersResult) GetPacks() []*StickerPack {
	if x != nil {
		return x.Packs
	}
	return nil
}

func (x *GetFavedStickersResult) GetStickers() []*StickerPackDocumentBase {
	if x != nil {
		return x.Stickers
	}
	return nil
}

func (x *GetFavedStickersResult) GetErrorCode() ReErrCode {
	if x != nil {
		return x.ErrorCode
	}
	return ReErrCode_Success
}

type StickerPack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Emoticon   string `protobuf:"bytes,1,opt,name=Emoticon,proto3" json:"Emoticon,omitempty"`
	DocumentId int64  `protobuf:"varint,2,opt,name=DocumentId,proto3" json:"DocumentId,omitempty"`
}

func (x *StickerPack) Reset() {
	*x = StickerPack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StickerPack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StickerPack) ProtoMessage() {}

func (x *StickerPack) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StickerPack.ProtoReflect.Descriptor instead.
func (*StickerPack) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{107}
}

func (x *StickerPack) GetEmoticon() string {
	if x != nil {
		return x.Emoticon
	}
	return ""
}

func (x *StickerPack) GetDocumentId() int64 {
	if x != nil {
		return x.DocumentId
	}
	return 0
}

// 用户安装sticker集合的请求
type StoreUserStickerSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StickersetId int32         `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	Installed    bool          `protobuf:"varint,3,opt,name=installed,proto3" json:"installed,omitempty"`
	Disabled     bool          `protobuf:"varint,4,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Order        int32         `protobuf:"varint,5,opt,name=order,proto3" json:"order,omitempty"`
	Archived     bool          `protobuf:"varint,6,opt,name=archived,proto3" json:"archived,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *StoreUserStickerSetReq) Reset() {
	*x = StoreUserStickerSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreUserStickerSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreUserStickerSetReq) ProtoMessage() {}

func (x *StoreUserStickerSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreUserStickerSetReq.ProtoReflect.Descriptor instead.
func (*StoreUserStickerSetReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{108}
}

func (x *StoreUserStickerSetReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *StoreUserStickerSetReq) GetStickersetId() int32 {
	if x != nil {
		return x.StickersetId
	}
	return 0
}

func (x *StoreUserStickerSetReq) GetInstalled() bool {
	if x != nil {
		return x.Installed
	}
	return false
}

func (x *StoreUserStickerSetReq) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *StoreUserStickerSetReq) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *StoreUserStickerSetReq) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

func (x *StoreUserStickerSetReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 用户安装sticker集合的返回
type StoreUserStickerSetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *StoreUserStickerSetResult) Reset() {
	*x = StoreUserStickerSetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreUserStickerSetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreUserStickerSetResult) ProtoMessage() {}

func (x *StoreUserStickerSetResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreUserStickerSetResult.ProtoReflect.Descriptor instead.
func (*StoreUserStickerSetResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{109}
}

func (x *StoreUserStickerSetResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 更新用户stickerdisable请求
type UpdateUserStickerSetDisabledReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StickersetId int32         `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	Disabled     bool          `protobuf:"varint,4,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UpdateUserStickerSetDisabledReq) Reset() {
	*x = UpdateUserStickerSetDisabledReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserStickerSetDisabledReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserStickerSetDisabledReq) ProtoMessage() {}

func (x *UpdateUserStickerSetDisabledReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserStickerSetDisabledReq.ProtoReflect.Descriptor instead.
func (*UpdateUserStickerSetDisabledReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{110}
}

func (x *UpdateUserStickerSetDisabledReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserStickerSetDisabledReq) GetStickersetId() int32 {
	if x != nil {
		return x.StickersetId
	}
	return 0
}

func (x *UpdateUserStickerSetDisabledReq) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *UpdateUserStickerSetDisabledReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 更新用户stickerdisable结果
type UpdateUserStickerSetDisabledResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *UpdateUserStickerSetDisabledResult) Reset() {
	*x = UpdateUserStickerSetDisabledResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserStickerSetDisabledResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserStickerSetDisabledResult) ProtoMessage() {}

func (x *UpdateUserStickerSetDisabledResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserStickerSetDisabledResult.ProtoReflect.Descriptor instead.
func (*UpdateUserStickerSetDisabledResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{111}
}

func (x *UpdateUserStickerSetDisabledResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 更新用户的Sticker的顺序
type UpdateUserStickerSetOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StickersetId int32         `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	Order        int32         `protobuf:"varint,3,opt,name=order,proto3" json:"order,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UpdateUserStickerSetOrderReq) Reset() {
	*x = UpdateUserStickerSetOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserStickerSetOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserStickerSetOrderReq) ProtoMessage() {}

func (x *UpdateUserStickerSetOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserStickerSetOrderReq.ProtoReflect.Descriptor instead.
func (*UpdateUserStickerSetOrderReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{112}
}

func (x *UpdateUserStickerSetOrderReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserStickerSetOrderReq) GetStickersetId() int32 {
	if x != nil {
		return x.StickersetId
	}
	return 0
}

func (x *UpdateUserStickerSetOrderReq) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *UpdateUserStickerSetOrderReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 更新用户的Sticker的顺序返回
type UpdateUserStickerSetOrderResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *UpdateUserStickerSetOrderResult) Reset() {
	*x = UpdateUserStickerSetOrderResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserStickerSetOrderResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserStickerSetOrderResult) ProtoMessage() {}

func (x *UpdateUserStickerSetOrderResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserStickerSetOrderResult.ProtoReflect.Descriptor instead.
func (*UpdateUserStickerSetOrderResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{113}
}

func (x *UpdateUserStickerSetOrderResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 更新用户的Sticker install和archived
type UpdateUserStickerSetInstallArReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StickersetId int32         `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	Archived     bool          `protobuf:"varint,3,opt,name=archived,proto3" json:"archived,omitempty"`
	Installed    bool          `protobuf:"varint,4,opt,name=installed,proto3" json:"installed,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UpdateUserStickerSetInstallArReq) Reset() {
	*x = UpdateUserStickerSetInstallArReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserStickerSetInstallArReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserStickerSetInstallArReq) ProtoMessage() {}

func (x *UpdateUserStickerSetInstallArReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserStickerSetInstallArReq.ProtoReflect.Descriptor instead.
func (*UpdateUserStickerSetInstallArReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{114}
}

func (x *UpdateUserStickerSetInstallArReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserStickerSetInstallArReq) GetStickersetId() int32 {
	if x != nil {
		return x.StickersetId
	}
	return 0
}

func (x *UpdateUserStickerSetInstallArReq) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

func (x *UpdateUserStickerSetInstallArReq) GetInstalled() bool {
	if x != nil {
		return x.Installed
	}
	return false
}

func (x *UpdateUserStickerSetInstallArReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 更新用户的Sticker install和archived的返回
type UpdateUserStickerSetInstallArResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *UpdateUserStickerSetInstallArResult) Reset() {
	*x = UpdateUserStickerSetInstallArResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserStickerSetInstallArResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserStickerSetInstallArResult) ProtoMessage() {}

func (x *UpdateUserStickerSetInstallArResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserStickerSetInstallArResult.ProtoReflect.Descriptor instead.
func (*UpdateUserStickerSetInstallArResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{115}
}

func (x *UpdateUserStickerSetInstallArResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 删除sticker的请求
type DeleteuserStickerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StickersetId int32         `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *DeleteuserStickerReq) Reset() {
	*x = DeleteuserStickerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteuserStickerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteuserStickerReq) ProtoMessage() {}

func (x *DeleteuserStickerReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteuserStickerReq.ProtoReflect.Descriptor instead.
func (*DeleteuserStickerReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{116}
}

func (x *DeleteuserStickerReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DeleteuserStickerReq) GetStickersetId() int32 {
	if x != nil {
		return x.StickersetId
	}
	return 0
}

func (x *DeleteuserStickerReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 删除sticker的返回
type DeleteuserStickerResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int32     `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StickersetId int32     `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	Errorcode    ReErrCode `protobuf:"varint,3,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *DeleteuserStickerResult) Reset() {
	*x = DeleteuserStickerResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteuserStickerResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteuserStickerResult) ProtoMessage() {}

func (x *DeleteuserStickerResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteuserStickerResult.ProtoReflect.Descriptor instead.
func (*DeleteuserStickerResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{117}
}

func (x *DeleteuserStickerResult) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DeleteuserStickerResult) GetStickersetId() int32 {
	if x != nil {
		return x.StickersetId
	}
	return 0
}

func (x *DeleteuserStickerResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 用户Sticker的信息
type UserStickerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StickersetId int32   `protobuf:"varint,1,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	Installed    bool    `protobuf:"varint,2,opt,name=installed,proto3" json:"installed,omitempty"`
	Disabled     bool    `protobuf:"varint,3,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Order        int32   `protobuf:"varint,4,opt,name=order,proto3" json:"order,omitempty"`
	AccessHash   int64   `protobuf:"varint,5,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Free         bool    `protobuf:"varint,6,opt,name=free,proto3" json:"free,omitempty"`
	Official     bool    `protobuf:"varint,7,opt,name=official,proto3" json:"official,omitempty"`
	Archived     bool    `protobuf:"varint,8,opt,name=archived,proto3" json:"archived,omitempty"`
	Masks        bool    `protobuf:"varint,9,opt,name=masks,proto3" json:"masks,omitempty"`
	Title        string  `protobuf:"bytes,10,opt,name=title,proto3" json:"title,omitempty"`
	ShortName    string  `protobuf:"bytes,11,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Count        int32   `protobuf:"varint,12,opt,name=count,proto3" json:"count,omitempty"`
	Hash         int64   `protobuf:"varint,13,opt,name=hash,proto3" json:"hash,omitempty"`
	Emotico      string  `protobuf:"bytes,14,opt,name=emotico,proto3" json:"emotico,omitempty"`
	Documents    []int32 `protobuf:"varint,15,rep,packed,name=documents,proto3" json:"documents,omitempty"`
}

func (x *UserStickerInfo) Reset() {
	*x = UserStickerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStickerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStickerInfo) ProtoMessage() {}

func (x *UserStickerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStickerInfo.ProtoReflect.Descriptor instead.
func (*UserStickerInfo) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{118}
}

func (x *UserStickerInfo) GetStickersetId() int32 {
	if x != nil {
		return x.StickersetId
	}
	return 0
}

func (x *UserStickerInfo) GetInstalled() bool {
	if x != nil {
		return x.Installed
	}
	return false
}

func (x *UserStickerInfo) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *UserStickerInfo) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *UserStickerInfo) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *UserStickerInfo) GetFree() bool {
	if x != nil {
		return x.Free
	}
	return false
}

func (x *UserStickerInfo) GetOfficial() bool {
	if x != nil {
		return x.Official
	}
	return false
}

func (x *UserStickerInfo) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

func (x *UserStickerInfo) GetMasks() bool {
	if x != nil {
		return x.Masks
	}
	return false
}

func (x *UserStickerInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UserStickerInfo) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *UserStickerInfo) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *UserStickerInfo) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *UserStickerInfo) GetEmotico() string {
	if x != nil {
		return x.Emotico
	}
	return ""
}

func (x *UserStickerInfo) GetDocuments() []int32 {
	if x != nil {
		return x.Documents
	}
	return nil
}

// 获取的sticker信息的列表
type UserStickerInfoArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StickerInfo []*UserStickerInfo `protobuf:"bytes,1,rep,name=stickerInfo,proto3" json:"stickerInfo,omitempty"`
}

func (x *UserStickerInfoArr) Reset() {
	*x = UserStickerInfoArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStickerInfoArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStickerInfoArr) ProtoMessage() {}

func (x *UserStickerInfoArr) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStickerInfoArr.ProtoReflect.Descriptor instead.
func (*UserStickerInfoArr) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{119}
}

func (x *UserStickerInfoArr) GetStickerInfo() []*UserStickerInfo {
	if x != nil {
		return x.StickerInfo
	}
	return nil
}

// 获取的sticker集合的所有信息
type StickerSetInfoArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StickerInfo []*StickerSetInfo `protobuf:"bytes,1,rep,name=stickerInfo,proto3" json:"stickerInfo,omitempty"`
}

func (x *StickerSetInfoArr) Reset() {
	*x = StickerSetInfoArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StickerSetInfoArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StickerSetInfoArr) ProtoMessage() {}

func (x *StickerSetInfoArr) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StickerSetInfoArr.ProtoReflect.Descriptor instead.
func (*StickerSetInfoArr) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{120}
}

func (x *StickerSetInfoArr) GetStickerInfo() []*StickerSetInfo {
	if x != nil {
		return x.StickerInfo
	}
	return nil
}

// 获取用户的所有的贴图请求
type GetuserAllStickersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetuserAllStickersReq) Reset() {
	*x = GetuserAllStickersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetuserAllStickersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetuserAllStickersReq) ProtoMessage() {}

func (x *GetuserAllStickersReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetuserAllStickersReq.ProtoReflect.Descriptor instead.
func (*GetuserAllStickersReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{121}
}

func (x *GetuserAllStickersReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetuserAllStickersReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 获取用户的所有的贴图的返回
type GetuserAllStickersResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StickerInfoArr []*UserStickerInfo `protobuf:"bytes,1,rep,name=stickerInfoArr,proto3" json:"stickerInfoArr,omitempty"`
	Errorcode      ReErrCode          `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *GetuserAllStickersResult) Reset() {
	*x = GetuserAllStickersResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetuserAllStickersResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetuserAllStickersResult) ProtoMessage() {}

func (x *GetuserAllStickersResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetuserAllStickersResult.ProtoReflect.Descriptor instead.
func (*GetuserAllStickersResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{122}
}

func (x *GetuserAllStickersResult) GetStickerInfoArr() []*UserStickerInfo {
	if x != nil {
		return x.StickerInfoArr
	}
	return nil
}

func (x *GetuserAllStickersResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 获取所有sticker集合信息
type GetAllStickerSetsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetAllStickerSetsReq) Reset() {
	*x = GetAllStickerSetsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllStickerSetsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllStickerSetsReq) ProtoMessage() {}

func (x *GetAllStickerSetsReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllStickerSetsReq.ProtoReflect.Descriptor instead.
func (*GetAllStickerSetsReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{123}
}

func (x *GetAllStickerSetsReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 获取所有sticker集合信息的返回
type GetAllStickerSetsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StickerInfoArr []*StickerSetInfo `protobuf:"bytes,1,rep,name=stickerInfoArr,proto3" json:"stickerInfoArr,omitempty"`
	Errorcode      ReErrCode         `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *GetAllStickerSetsResult) Reset() {
	*x = GetAllStickerSetsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllStickerSetsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllStickerSetsResult) ProtoMessage() {}

func (x *GetAllStickerSetsResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllStickerSetsResult.ProtoReflect.Descriptor instead.
func (*GetAllStickerSetsResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{124}
}

func (x *GetAllStickerSetsResult) GetStickerInfoArr() []*StickerSetInfo {
	if x != nil {
		return x.StickerInfoArr
	}
	return nil
}

func (x *GetAllStickerSetsResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 删除单个sticker
type DeleteStickerPackDocumentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StickersetId int64 `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
}

func (x *DeleteStickerPackDocumentReq) Reset() {
	*x = DeleteStickerPackDocumentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStickerPackDocumentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStickerPackDocumentReq) ProtoMessage() {}

func (x *DeleteStickerPackDocumentReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStickerPackDocumentReq.ProtoReflect.Descriptor instead.
func (*DeleteStickerPackDocumentReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{125}
}

func (x *DeleteStickerPackDocumentReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteStickerPackDocumentReq) GetStickersetId() int64 {
	if x != nil {
		return x.StickersetId
	}
	return 0
}

// 删除单个sticker返回
type DeleteStickerPackDocumentResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *DeleteStickerPackDocumentResult) Reset() {
	*x = DeleteStickerPackDocumentResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStickerPackDocumentResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStickerPackDocumentResult) ProtoMessage() {}

func (x *DeleteStickerPackDocumentResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStickerPackDocumentResult.ProtoReflect.Descriptor instead.
func (*DeleteStickerPackDocumentResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{126}
}

func (x *DeleteStickerPackDocumentResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 获取作者sticker
type GetAuthorStickerSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SetId  int64 `protobuf:"varint,2,opt,name=set_id,json=setId,proto3" json:"set_id,omitempty"`
}

func (x *GetAuthorStickerSetReq) Reset() {
	*x = GetAuthorStickerSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuthorStickerSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuthorStickerSetReq) ProtoMessage() {}

func (x *GetAuthorStickerSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuthorStickerSetReq.ProtoReflect.Descriptor instead.
func (*GetAuthorStickerSetReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{127}
}

func (x *GetAuthorStickerSetReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetAuthorStickerSetReq) GetSetId() int64 {
	if x != nil {
		return x.SetId
	}
	return 0
}

// 获取作者sticker返回
type GetAuthorStickerSetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode ReErrCode         `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.ReErrCode" json:"ErrorCode,omitempty"` //返回错误码
	Set       *AuthorStickerSet `protobuf:"bytes,2,opt,name=set,proto3" json:"set,omitempty"`
}

func (x *GetAuthorStickerSetResult) Reset() {
	*x = GetAuthorStickerSetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuthorStickerSetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuthorStickerSetResult) ProtoMessage() {}

func (x *GetAuthorStickerSetResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuthorStickerSetResult.ProtoReflect.Descriptor instead.
func (*GetAuthorStickerSetResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{128}
}

func (x *GetAuthorStickerSetResult) GetErrorCode() ReErrCode {
	if x != nil {
		return x.ErrorCode
	}
	return ReErrCode_Success
}

func (x *GetAuthorStickerSetResult) GetSet() *AuthorStickerSet {
	if x != nil {
		return x.Set
	}
	return nil
}

// 获取作者所有sticker
type GetAuthorAllStickerSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetAuthorAllStickerSetReq) Reset() {
	*x = GetAuthorAllStickerSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuthorAllStickerSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuthorAllStickerSetReq) ProtoMessage() {}

func (x *GetAuthorAllStickerSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuthorAllStickerSetReq.ProtoReflect.Descriptor instead.
func (*GetAuthorAllStickerSetReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{129}
}

func (x *GetAuthorAllStickerSetReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 获取作者所有sticker返回
type GetAuthorAllStickerSetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode ReErrCode           `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.ReErrCode" json:"ErrorCode,omitempty"` //返回错误码
	Sets      []*AuthorStickerSet `protobuf:"bytes,2,rep,name=sets,proto3" json:"sets,omitempty"`
}

func (x *GetAuthorAllStickerSetResult) Reset() {
	*x = GetAuthorAllStickerSetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuthorAllStickerSetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuthorAllStickerSetResult) ProtoMessage() {}

func (x *GetAuthorAllStickerSetResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuthorAllStickerSetResult.ProtoReflect.Descriptor instead.
func (*GetAuthorAllStickerSetResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{130}
}

func (x *GetAuthorAllStickerSetResult) GetErrorCode() ReErrCode {
	if x != nil {
		return x.ErrorCode
	}
	return ReErrCode_Success
}

func (x *GetAuthorAllStickerSetResult) GetSets() []*AuthorStickerSet {
	if x != nil {
		return x.Sets
	}
	return nil
}

// 结构体AuthorStickerSet
type AuthorStickerSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StickersetId int64  `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	ShortName    string `protobuf:"bytes,3,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Archived     bool   `protobuf:"varint,4,opt,name=archived,proto3" json:"archived,omitempty"`
	Installed    bool   `protobuf:"varint,5,opt,name=installed,proto3" json:"installed,omitempty"`
	Disabled     bool   `protobuf:"varint,6,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Ordered      int32  `protobuf:"varint,7,opt,name=ordered,proto3" json:"ordered,omitempty"`
	Created      int32  `protobuf:"varint,8,opt,name=created,proto3" json:"created,omitempty"`
	Updated      int32  `protobuf:"varint,9,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *AuthorStickerSet) Reset() {
	*x = AuthorStickerSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorStickerSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorStickerSet) ProtoMessage() {}

func (x *AuthorStickerSet) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorStickerSet.ProtoReflect.Descriptor instead.
func (*AuthorStickerSet) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{131}
}

func (x *AuthorStickerSet) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AuthorStickerSet) GetStickersetId() int64 {
	if x != nil {
		return x.StickersetId
	}
	return 0
}

func (x *AuthorStickerSet) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *AuthorStickerSet) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

func (x *AuthorStickerSet) GetInstalled() bool {
	if x != nil {
		return x.Installed
	}
	return false
}

func (x *AuthorStickerSet) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *AuthorStickerSet) GetOrdered() int32 {
	if x != nil {
		return x.Ordered
	}
	return 0
}

func (x *AuthorStickerSet) GetCreated() int32 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *AuthorStickerSet) GetUpdated() int32 {
	if x != nil {
		return x.Updated
	}
	return 0
}

// 统计sticker数量
type CountAuthorAllStickerSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *CountAuthorAllStickerSetReq) Reset() {
	*x = CountAuthorAllStickerSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAuthorAllStickerSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAuthorAllStickerSetReq) ProtoMessage() {}

func (x *CountAuthorAllStickerSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAuthorAllStickerSetReq.ProtoReflect.Descriptor instead.
func (*CountAuthorAllStickerSetReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{132}
}

func (x *CountAuthorAllStickerSetReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 统计拥有sticker数量返回
type CountAuthorAllStickerSetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode ReErrCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.ReErrCode" json:"ErrorCode,omitempty"` //返回错误码
	Count     int64     `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CountAuthorAllStickerSetResult) Reset() {
	*x = CountAuthorAllStickerSetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAuthorAllStickerSetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAuthorAllStickerSetResult) ProtoMessage() {}

func (x *CountAuthorAllStickerSetResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAuthorAllStickerSetResult.ProtoReflect.Descriptor instead.
func (*CountAuthorAllStickerSetResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{133}
}

func (x *CountAuthorAllStickerSetResult) GetErrorCode() ReErrCode {
	if x != nil {
		return x.ErrorCode
	}
	return ReErrCode_Success
}

func (x *CountAuthorAllStickerSetResult) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

// 用户gif的动态图集合
type UserGifInfoArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GifArr []*UserSaveGifInfo `protobuf:"bytes,1,rep,name=gif_arr,json=gifArr,proto3" json:"gif_arr,omitempty"`
}

func (x *UserGifInfoArr) Reset() {
	*x = UserGifInfoArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGifInfoArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGifInfoArr) ProtoMessage() {}

func (x *UserGifInfoArr) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGifInfoArr.ProtoReflect.Descriptor instead.
func (*UserGifInfoArr) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{134}
}

func (x *UserGifInfoArr) GetGifArr() []*UserSaveGifInfo {
	if x != nil {
		return x.GifArr
	}
	return nil
}

// 保存用户动态图的请求
type UserSaveGifInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GifId   string `protobuf:"bytes,2,opt,name=gif_id,json=gifId,proto3" json:"gif_id,omitempty"`
	Fid     uint64 `protobuf:"varint,3,opt,name=fid,proto3" json:"fid,omitempty"`
	GitHash int64  `protobuf:"varint,4,opt,name=git_hash,json=gitHash,proto3" json:"git_hash,omitempty"`
}

func (x *UserSaveGifInfo) Reset() {
	*x = UserSaveGifInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSaveGifInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSaveGifInfo) ProtoMessage() {}

func (x *UserSaveGifInfo) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSaveGifInfo.ProtoReflect.Descriptor instead.
func (*UserSaveGifInfo) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{135}
}

func (x *UserSaveGifInfo) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserSaveGifInfo) GetGifId() string {
	if x != nil {
		return x.GifId
	}
	return ""
}

func (x *UserSaveGifInfo) GetFid() uint64 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *UserSaveGifInfo) GetGitHash() int64 {
	if x != nil {
		return x.GitHash
	}
	return 0
}

// 保存gif动态图的请求
type SaveUserGifReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GifId   string        `protobuf:"bytes,2,opt,name=gif_id,json=gifId,proto3" json:"gif_id,omitempty"`
	Fid     uint64        `protobuf:"varint,3,opt,name=fid,proto3" json:"fid,omitempty"`
	GitHash int64         `protobuf:"varint,4,opt,name=git_hash,json=gitHash,proto3" json:"git_hash,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *SaveUserGifReq) Reset() {
	*x = SaveUserGifReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveUserGifReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveUserGifReq) ProtoMessage() {}

func (x *SaveUserGifReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveUserGifReq.ProtoReflect.Descriptor instead.
func (*SaveUserGifReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{136}
}

func (x *SaveUserGifReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SaveUserGifReq) GetGifId() string {
	if x != nil {
		return x.GifId
	}
	return ""
}

func (x *SaveUserGifReq) GetFid() uint64 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *SaveUserGifReq) GetGitHash() int64 {
	if x != nil {
		return x.GitHash
	}
	return 0
}

func (x *SaveUserGifReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 保存gif动态图的请求返回
type SaveUserGifResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *SaveUserGifResult) Reset() {
	*x = SaveUserGifResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveUserGifResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveUserGifResult) ProtoMessage() {}

func (x *SaveUserGifResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveUserGifResult.ProtoReflect.Descriptor instead.
func (*SaveUserGifResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{137}
}

func (x *SaveUserGifResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 删除动态图的请求
type DelUserGifReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Fid     uint64        `protobuf:"varint,3,opt,name=fid,proto3" json:"fid,omitempty"`
	GitHash int64         `protobuf:"varint,4,opt,name=git_hash,json=gitHash,proto3" json:"git_hash,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *DelUserGifReq) Reset() {
	*x = DelUserGifReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelUserGifReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelUserGifReq) ProtoMessage() {}

func (x *DelUserGifReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelUserGifReq.ProtoReflect.Descriptor instead.
func (*DelUserGifReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{138}
}

func (x *DelUserGifReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DelUserGifReq) GetFid() uint64 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *DelUserGifReq) GetGitHash() int64 {
	if x != nil {
		return x.GitHash
	}
	return 0
}

func (x *DelUserGifReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 删除动态图的返回
type DelUserGifResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *DelUserGifResult) Reset() {
	*x = DelUserGifResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelUserGifResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelUserGifResult) ProtoMessage() {}

func (x *DelUserGifResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelUserGifResult.ProtoReflect.Descriptor instead.
func (*DelUserGifResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{139}
}

func (x *DelUserGifResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 获取用户的gifs
type GetUserGifsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Hash   int32         `protobuf:"varint,2,opt,name=hash,proto3" json:"hash,omitempty"` //校验hash
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetUserGifsReq) Reset() {
	*x = GetUserGifsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserGifsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserGifsReq) ProtoMessage() {}

func (x *GetUserGifsReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserGifsReq.ProtoReflect.Descriptor instead.
func (*GetUserGifsReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{140}
}

func (x *GetUserGifsReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetUserGifsReq) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *GetUserGifsReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 获取用户的gifs返回
type GetUserGifsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32              `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Hash      int32              `protobuf:"varint,2,opt,name=hash,proto3" json:"hash,omitempty"` //校验hash
	GifArr    []*UserSaveGifInfo `protobuf:"bytes,3,rep,name=gif_arr,json=gifArr,proto3" json:"gif_arr,omitempty"`
	Errorcode ReErrCode          `protobuf:"varint,4,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *GetUserGifsResult) Reset() {
	*x = GetUserGifsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserGifsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserGifsResult) ProtoMessage() {}

func (x *GetUserGifsResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserGifsResult.ProtoReflect.Descriptor instead.
func (*GetUserGifsResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{141}
}

func (x *GetUserGifsResult) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetUserGifsResult) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *GetUserGifsResult) GetGifArr() []*UserSaveGifInfo {
	if x != nil {
		return x.GifArr
	}
	return nil
}

func (x *GetUserGifsResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 检测用户是否是黑名单的请求
type CheckUserIsBlockedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"` //自己的id
	UserId int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //需要判断是否是自己黑名单的ID
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *CheckUserIsBlockedReq) Reset() {
	*x = CheckUserIsBlockedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserIsBlockedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserIsBlockedReq) ProtoMessage() {}

func (x *CheckUserIsBlockedReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserIsBlockedReq.ProtoReflect.Descriptor instead.
func (*CheckUserIsBlockedReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{142}
}

func (x *CheckUserIsBlockedReq) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *CheckUserIsBlockedReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CheckUserIsBlockedReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 检测用户黑名单的返回
type CheckUserIsBlockedResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *CheckUserIsBlockedResult) Reset() {
	*x = CheckUserIsBlockedResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserIsBlockedResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserIsBlockedResult) ProtoMessage() {}

func (x *CheckUserIsBlockedResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserIsBlockedResult.ProtoReflect.Descriptor instead.
func (*CheckUserIsBlockedResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{143}
}

func (x *CheckUserIsBlockedResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 注册用户请求的基础信息
type RegisterUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`               //国家码
	AccessHash     int64  `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`   //给用户生成的哈希值
	Phone          string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`                                //用户的电话号码
	CountryCode    string `protobuf:"bytes,4,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"` //国家码
	LocalPhone     string `protobuf:"bytes,5,opt,name=local_phone,json=localPhone,proto3" json:"local_phone,omitempty"`    //去掉国家码的电话号码
	FirstName      string `protobuf:"bytes,6,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName       string `protobuf:"bytes,7,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	IsBot          bool   `protobuf:"varint,8,opt,name=is_bot,json=isBot,proto3" json:"is_bot,omitempty"` //是否是机器人
	BotInfoVersion int32  `protobuf:"varint,9,opt,name=bot_info_version,json=botInfoVersion,proto3" json:"bot_info_version,omitempty"`
	BotChatHistory bool   `protobuf:"varint,10,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNoChats     bool   `protobuf:"varint,11,opt,name=bot_no_chats,json=botNoChats,proto3" json:"bot_no_chats,omitempty"`
	Sex            int32  `protobuf:"varint,12,opt,name=sex,proto3" json:"sex,omitempty"`
	Birthday       int32  `protobuf:"varint,13,opt,name=birthday,proto3" json:"birthday,omitempty"`
	Photo          string `protobuf:"bytes,14,opt,name=photo,proto3" json:"photo,omitempty"`
}

func (x *RegisterUserInfo) Reset() {
	*x = RegisterUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterUserInfo) ProtoMessage() {}

func (x *RegisterUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterUserInfo.ProtoReflect.Descriptor instead.
func (*RegisterUserInfo) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{144}
}

func (x *RegisterUserInfo) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RegisterUserInfo) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *RegisterUserInfo) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *RegisterUserInfo) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *RegisterUserInfo) GetLocalPhone() string {
	if x != nil {
		return x.LocalPhone
	}
	return ""
}

func (x *RegisterUserInfo) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *RegisterUserInfo) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *RegisterUserInfo) GetIsBot() bool {
	if x != nil {
		return x.IsBot
	}
	return false
}

func (x *RegisterUserInfo) GetBotInfoVersion() int32 {
	if x != nil {
		return x.BotInfoVersion
	}
	return 0
}

func (x *RegisterUserInfo) GetBotChatHistory() bool {
	if x != nil {
		return x.BotChatHistory
	}
	return false
}

func (x *RegisterUserInfo) GetBotNoChats() bool {
	if x != nil {
		return x.BotNoChats
	}
	return false
}

func (x *RegisterUserInfo) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *RegisterUserInfo) GetBirthday() int32 {
	if x != nil {
		return x.Birthday
	}
	return 0
}

func (x *RegisterUserInfo) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

// 更新用户信息返回
type UpdateUserInfoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uinfo     *UserInfo `protobuf:"bytes,1,opt,name=uinfo,proto3" json:"uinfo,omitempty"`          //用户的具体信息
	ErrorCode int32     `protobuf:"varint,2,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"` // 失败的错误码
	Result    bool      `protobuf:"varint,3,opt,name=Result,proto3" json:"Result,omitempty"`       //成功或者失败
}

func (x *UpdateUserInfoResult) Reset() {
	*x = UpdateUserInfoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserInfoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserInfoResult) ProtoMessage() {}

func (x *UpdateUserInfoResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserInfoResult.ProtoReflect.Descriptor instead.
func (*UpdateUserInfoResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{145}
}

func (x *UpdateUserInfoResult) GetUinfo() *UserInfo {
	if x != nil {
		return x.Uinfo
	}
	return nil
}

func (x *UpdateUserInfoResult) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *UpdateUserInfoResult) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 检测用户哈希值是否合法请求参数
type CheckUserAccessHashValidReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`         //需要校验的用户的ID
	AccessHash int64         `protobuf:"varint,2,opt,name=AccessHash,proto3" json:"AccessHash,omitempty"` //需要校验的用户的哈希值
	Debug      *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`            //日志记录相关的
}

func (x *CheckUserAccessHashValidReq) Reset() {
	*x = CheckUserAccessHashValidReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserAccessHashValidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserAccessHashValidReq) ProtoMessage() {}

func (x *CheckUserAccessHashValidReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserAccessHashValidReq.ProtoReflect.Descriptor instead.
func (*CheckUserAccessHashValidReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{146}
}

func (x *CheckUserAccessHashValidReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CheckUserAccessHashValidReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *CheckUserAccessHashValidReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 检测用户哈希值是否合法返回结构
type CheckUserAccessHashValidResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid   bool      `protobuf:"varint,1,opt,name=isValid,proto3" json:"isValid,omitempty"`                                    //是否可用
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *CheckUserAccessHashValidResult) Reset() {
	*x = CheckUserAccessHashValidResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserAccessHashValidResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserAccessHashValidResult) ProtoMessage() {}

func (x *CheckUserAccessHashValidResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserAccessHashValidResult.ProtoReflect.Descriptor instead.
func (*CheckUserAccessHashValidResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{147}
}

func (x *CheckUserAccessHashValidResult) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CheckUserAccessHashValidResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 注册指定用户的请求
type RegisterUserInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccessHash     int64         `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	PhoneNumber    string        `protobuf:"bytes,3,opt,name=PhoneNumber,proto3" json:"PhoneNumber,omitempty"` //电话号码
	FirstName      string        `protobuf:"bytes,4,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	LastName       string        `protobuf:"bytes,5,opt,name=LastName,proto3" json:"LastName,omitempty"`
	IsBot          bool          `protobuf:"varint,6,opt,name=is_bot,json=isBot,proto3" json:"is_bot,omitempty"`
	BotInfoVersion int32         `protobuf:"varint,7,opt,name=bot_info_version,json=botInfoVersion,proto3" json:"bot_info_version,omitempty"`
	BotChatHistory bool          `protobuf:"varint,8,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNoChats     bool          `protobuf:"varint,9,opt,name=bot_no_chats,json=botNoChats,proto3" json:"bot_no_chats,omitempty"`
	CountryCode    string        `protobuf:"bytes,10,opt,name=CountryCode,proto3" json:"CountryCode,omitempty"`
	LocalPhone     string        `protobuf:"bytes,11,opt,name=LocalPhone,proto3" json:"LocalPhone,omitempty"`
	Dc             int32         `protobuf:"varint,12,opt,name=dc,proto3" json:"dc,omitempty"`
	GroupNow       int32         `protobuf:"varint,13,opt,name=GroupNow,proto3" json:"GroupNow,omitempty"`
	Debug          *pbcomm.Debug `protobuf:"bytes,14,opt,name=debug,proto3" json:"debug,omitempty"`
	Sex            int32         `protobuf:"varint,15,opt,name=Sex,proto3" json:"Sex,omitempty"`
	Birthday       int32         `protobuf:"varint,16,opt,name=birthday,proto3" json:"birthday,omitempty"`
}

func (x *RegisterUserInfoReq) Reset() {
	*x = RegisterUserInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterUserInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterUserInfoReq) ProtoMessage() {}

func (x *RegisterUserInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterUserInfoReq.ProtoReflect.Descriptor instead.
func (*RegisterUserInfoReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{148}
}

func (x *RegisterUserInfoReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RegisterUserInfoReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *RegisterUserInfoReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *RegisterUserInfoReq) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *RegisterUserInfoReq) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *RegisterUserInfoReq) GetIsBot() bool {
	if x != nil {
		return x.IsBot
	}
	return false
}

func (x *RegisterUserInfoReq) GetBotInfoVersion() int32 {
	if x != nil {
		return x.BotInfoVersion
	}
	return 0
}

func (x *RegisterUserInfoReq) GetBotChatHistory() bool {
	if x != nil {
		return x.BotChatHistory
	}
	return false
}

func (x *RegisterUserInfoReq) GetBotNoChats() bool {
	if x != nil {
		return x.BotNoChats
	}
	return false
}

func (x *RegisterUserInfoReq) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *RegisterUserInfoReq) GetLocalPhone() string {
	if x != nil {
		return x.LocalPhone
	}
	return ""
}

func (x *RegisterUserInfoReq) GetDc() int32 {
	if x != nil {
		return x.Dc
	}
	return 0
}

func (x *RegisterUserInfoReq) GetGroupNow() int32 {
	if x != nil {
		return x.GroupNow
	}
	return 0
}

func (x *RegisterUserInfoReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *RegisterUserInfoReq) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *RegisterUserInfoReq) GetBirthday() int32 {
	if x != nil {
		return x.Birthday
	}
	return 0
}

// 注册指定用户的请求
type RegisterUserInfoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uinfo     *UserInfo `protobuf:"bytes,1,opt,name=uinfo,proto3" json:"uinfo,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *RegisterUserInfoResult) Reset() {
	*x = RegisterUserInfoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterUserInfoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterUserInfoResult) ProtoMessage() {}

func (x *RegisterUserInfoResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterUserInfoResult.ProtoReflect.Descriptor instead.
func (*RegisterUserInfoResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{149}
}

func (x *RegisterUserInfoResult) GetUinfo() *UserInfo {
	if x != nil {
		return x.Uinfo
	}
	return nil
}

func (x *RegisterUserInfoResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 获取音效设置
type GetNotifySettingsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId  int32         `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	ReqType int32         `protobuf:"varint,2,opt,name=req_type,json=reqType,proto3" json:"req_type,omitempty"` // 1表示获取用户的  2.表示获取群的
	Debug   *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetNotifySettingsReq) Reset() {
	*x = GetNotifySettingsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNotifySettingsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotifySettingsReq) ProtoMessage() {}

func (x *GetNotifySettingsReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotifySettingsReq.ProtoReflect.Descriptor instead.
func (*GetNotifySettingsReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{150}
}

func (x *GetNotifySettingsReq) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *GetNotifySettingsReq) GetReqType() int32 {
	if x != nil {
		return x.ReqType
	}
	return 0
}

func (x *GetNotifySettingsReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 音效设置返回
type GetNotifySettingsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowPreviews bool      `protobuf:"varint,1,opt,name=Show_previews,json=ShowPreviews,proto3" json:"Show_previews,omitempty"`      // 是否展示预览
	Silent       bool      `protobuf:"varint,2,opt,name=Silent,proto3" json:"Silent,omitempty"`                                      // 是否静音
	MuteUntil    int32     `protobuf:"varint,3,opt,name=Mute_until,json=MuteUntil,proto3" json:"Mute_until,omitempty"`               // 静音时长
	Sound        string    `protobuf:"bytes,4,opt,name=Sound,proto3" json:"Sound,omitempty"`                                         // 声音类型
	Errorcode    ReErrCode `protobuf:"varint,5,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *GetNotifySettingsResult) Reset() {
	*x = GetNotifySettingsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNotifySettingsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotifySettingsResult) ProtoMessage() {}

func (x *GetNotifySettingsResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotifySettingsResult.ProtoReflect.Descriptor instead.
func (*GetNotifySettingsResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{151}
}

func (x *GetNotifySettingsResult) GetShowPreviews() bool {
	if x != nil {
		return x.ShowPreviews
	}
	return false
}

func (x *GetNotifySettingsResult) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

func (x *GetNotifySettingsResult) GetMuteUntil() int32 {
	if x != nil {
		return x.MuteUntil
	}
	return 0
}

func (x *GetNotifySettingsResult) GetSound() string {
	if x != nil {
		return x.Sound
	}
	return ""
}

func (x *GetNotifySettingsResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 更新音效设置
type UpdateNotifySettingsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId       int32         `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	ReqType      int32         `protobuf:"varint,2,opt,name=req_type,json=reqType,proto3" json:"req_type,omitempty"` // 1表示获取用户的  2.表示获取群的
	ShowPreviews bool          `protobuf:"varint,3,opt,name=Show_previews,json=ShowPreviews,proto3" json:"Show_previews,omitempty"`
	Silent       bool          `protobuf:"varint,4,opt,name=Silent,proto3" json:"Silent,omitempty"`
	MuteUntil    int32         `protobuf:"varint,5,opt,name=Mute_until,json=MuteUntil,proto3" json:"Mute_until,omitempty"`
	Sound        string        `protobuf:"bytes,6,opt,name=Sound,proto3" json:"Sound,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UpdateNotifySettingsReq) Reset() {
	*x = UpdateNotifySettingsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNotifySettingsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNotifySettingsReq) ProtoMessage() {}

func (x *UpdateNotifySettingsReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNotifySettingsReq.ProtoReflect.Descriptor instead.
func (*UpdateNotifySettingsReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{152}
}

func (x *UpdateNotifySettingsReq) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *UpdateNotifySettingsReq) GetReqType() int32 {
	if x != nil {
		return x.ReqType
	}
	return 0
}

func (x *UpdateNotifySettingsReq) GetShowPreviews() bool {
	if x != nil {
		return x.ShowPreviews
	}
	return false
}

func (x *UpdateNotifySettingsReq) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

func (x *UpdateNotifySettingsReq) GetMuteUntil() int32 {
	if x != nil {
		return x.MuteUntil
	}
	return 0
}

func (x *UpdateNotifySettingsReq) GetSound() string {
	if x != nil {
		return x.Sound
	}
	return ""
}

func (x *UpdateNotifySettingsReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 更新音效
type UpdateNotifySettingsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *UpdateNotifySettingsResult) Reset() {
	*x = UpdateNotifySettingsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNotifySettingsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNotifySettingsResult) ProtoMessage() {}

func (x *UpdateNotifySettingsResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNotifySettingsResult.ProtoReflect.Descriptor instead.
func (*UpdateNotifySettingsResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{153}
}

func (x *UpdateNotifySettingsResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 获取自己所有联系人的在线状态请求
type GetContactsStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetContactsStatusReq) Reset() {
	*x = GetContactsStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContactsStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContactsStatusReq) ProtoMessage() {}

func (x *GetContactsStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContactsStatusReq.ProtoReflect.Descriptor instead.
func (*GetContactsStatusReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{154}
}

func (x *GetContactsStatusReq) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *GetContactsStatusReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 联系人的在线状态
type UserStaus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                //用户的Id
	Status      int32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`                              //用户的在线状态
	OfflineTime int32 `protobuf:"varint,3,opt,name=offline_time,json=offlineTime,proto3" json:"offline_time,omitempty"` //用户的最后的在线时间
}

func (x *UserStaus) Reset() {
	*x = UserStaus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStaus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStaus) ProtoMessage() {}

func (x *UserStaus) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStaus.ProtoReflect.Descriptor instead.
func (*UserStaus) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{155}
}

func (x *UserStaus) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserStaus) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserStaus) GetOfflineTime() int32 {
	if x != nil {
		return x.OfflineTime
	}
	return 0
}

// 获取自己所有联系人的在线状态返回
type GetContactsStatusResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactStatusArr []*UserStaus `protobuf:"bytes,1,rep,name=contactStatusArr,proto3" json:"contactStatusArr,omitempty"`                   //联系人的在线状态
	Errorcode        ReErrCode    `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *GetContactsStatusResult) Reset() {
	*x = GetContactsStatusResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContactsStatusResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContactsStatusResult) ProtoMessage() {}

func (x *GetContactsStatusResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContactsStatusResult.ProtoReflect.Descriptor instead.
func (*GetContactsStatusResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{156}
}

func (x *GetContactsStatusResult) GetContactStatusArr() []*UserStaus {
	if x != nil {
		return x.ContactStatusArr
	}
	return nil
}

func (x *GetContactsStatusResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 更新机器人头像请求
type UpdateBotPicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BotId int32         `protobuf:"varint,1,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	Photo []byte        `protobuf:"bytes,2,opt,name=photo,proto3" json:"photo,omitempty"` //(mtproto.TL_photo_layer105)
	Debug *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UpdateBotPicRequest) Reset() {
	*x = UpdateBotPicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBotPicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBotPicRequest) ProtoMessage() {}

func (x *UpdateBotPicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBotPicRequest.ProtoReflect.Descriptor instead.
func (*UpdateBotPicRequest) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{157}
}

func (x *UpdateBotPicRequest) GetBotId() int32 {
	if x != nil {
		return x.BotId
	}
	return 0
}

func (x *UpdateBotPicRequest) GetPhoto() []byte {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *UpdateBotPicRequest) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type UpdateBotPicResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *UpdateBotPicResult) Reset() {
	*x = UpdateBotPicResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBotPicResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBotPicResult) ProtoMessage() {}

func (x *UpdateBotPicResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBotPicResult.ProtoReflect.Descriptor instead.
func (*UpdateBotPicResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{158}
}

func (x *UpdateBotPicResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 获取所有代理的IP和端口请求
type GetAllProxyConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetAllProxyConfigReq) Reset() {
	*x = GetAllProxyConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllProxyConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllProxyConfigReq) ProtoMessage() {}

func (x *GetAllProxyConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllProxyConfigReq.ProtoReflect.Descriptor instead.
func (*GetAllProxyConfigReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{159}
}

func (x *GetAllProxyConfigReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 代理的配置的地址结构
type ProxyAddr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip      string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`           //代理的IP地址
	InnerIp string `protobuf:"bytes,2,opt,name=innerIp,proto3" json:"innerIp,omitempty"` //代理的内网ip地址
	Port    int32  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`      //代理的端口号
}

func (x *ProxyAddr) Reset() {
	*x = ProxyAddr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyAddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyAddr) ProtoMessage() {}

func (x *ProxyAddr) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyAddr.ProtoReflect.Descriptor instead.
func (*ProxyAddr) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{160}
}

func (x *ProxyAddr) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *ProxyAddr) GetInnerIp() string {
	if x != nil {
		return x.InnerIp
	}
	return ""
}

func (x *ProxyAddr) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// 获取所有代理的IP和端口返回结构
type GetAllProxyConfigResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addrs     []*ProxyAddr `protobuf:"bytes,1,rep,name=addrs,proto3" json:"addrs,omitempty"`                                         //代理转发的IP地址们
	Errorcode ReErrCode    `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *GetAllProxyConfigResult) Reset() {
	*x = GetAllProxyConfigResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllProxyConfigResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllProxyConfigResult) ProtoMessage() {}

func (x *GetAllProxyConfigResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllProxyConfigResult.ProtoReflect.Descriptor instead.
func (*GetAllProxyConfigResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{161}
}

func (x *GetAllProxyConfigResult) GetAddrs() []*ProxyAddr {
	if x != nil {
		return x.Addrs
	}
	return nil
}

func (x *GetAllProxyConfigResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 检查用户名是否经被占用请求
type CheckUserNameOccupiedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid   int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	UserName string        `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"` //需要被监测的用户名称
	Debug    *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *CheckUserNameOccupiedReq) Reset() {
	*x = CheckUserNameOccupiedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserNameOccupiedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserNameOccupiedReq) ProtoMessage() {}

func (x *CheckUserNameOccupiedReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserNameOccupiedReq.ProtoReflect.Descriptor instead.
func (*CheckUserNameOccupiedReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{162}
}

func (x *CheckUserNameOccupiedReq) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *CheckUserNameOccupiedReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *CheckUserNameOccupiedReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 检查用户名是否经被占用返回结果
type CheckUserNameOccupiedResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Occpuy bool `protobuf:"varint,1,opt,name=occpuy,proto3" json:"occpuy,omitempty"` //是否被占用
}

func (x *CheckUserNameOccupiedResult) Reset() {
	*x = CheckUserNameOccupiedResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserNameOccupiedResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserNameOccupiedResult) ProtoMessage() {}

func (x *CheckUserNameOccupiedResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserNameOccupiedResult.ProtoReflect.Descriptor instead.
func (*CheckUserNameOccupiedResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{163}
}

func (x *CheckUserNameOccupiedResult) GetOccpuy() bool {
	if x != nil {
		return x.Occpuy
	}
	return false
}

// 获取用户最新的GPS的请求
type GetUserGpsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"` //需要获取用户GPs的用户的ID
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetUserGpsReq) Reset() {
	*x = GetUserGpsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserGpsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserGpsReq) ProtoMessage() {}

func (x *GetUserGpsReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserGpsReq.ProtoReflect.Descriptor instead.
func (*GetUserGpsReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{164}
}

func (x *GetUserGpsReq) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *GetUserGpsReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 获取用户的GPS的请求
type GetUserGpsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude     float64   `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude    float64   `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	DeviceModule string    `protobuf:"bytes,3,opt,name=device_module,json=deviceModule,proto3" json:"device_module,omitempty"`
	Timestamp    int32     `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                //最新的时间
	Errorcode    ReErrCode `protobuf:"varint,5,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *GetUserGpsResult) Reset() {
	*x = GetUserGpsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserGpsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserGpsResult) ProtoMessage() {}

func (x *GetUserGpsResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserGpsResult.ProtoReflect.Descriptor instead.
func (*GetUserGpsResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{165}
}

func (x *GetUserGpsResult) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GetUserGpsResult) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *GetUserGpsResult) GetDeviceModule() string {
	if x != nil {
		return x.DeviceModule
	}
	return ""
}

func (x *GetUserGpsResult) GetTimestamp() int32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *GetUserGpsResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 检测是否是自己是否是对方的联系人
type CheckSelfIsContactReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId int32         `protobuf:"varint,1,opt,name=selfId,proto3" json:"selfId,omitempty"` //自己的Id
	UserId int32         `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"` //检测方的id
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *CheckSelfIsContactReq) Reset() {
	*x = CheckSelfIsContactReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSelfIsContactReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSelfIsContactReq) ProtoMessage() {}

func (x *CheckSelfIsContactReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSelfIsContactReq.ProtoReflect.Descriptor instead.
func (*CheckSelfIsContactReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{166}
}

func (x *CheckSelfIsContactReq) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *CheckSelfIsContactReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CheckSelfIsContactReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 检测是否是自己是否是对方的联系人的返回结果
type CheckSelfIsContactResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfIsContact bool      `protobuf:"varint,1,opt,name=SelfIsContact,proto3" json:"SelfIsContact,omitempty"`                        //自己是否是对方的联系人
	Errorcode     ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *CheckSelfIsContactResult) Reset() {
	*x = CheckSelfIsContactResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSelfIsContactResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSelfIsContactResult) ProtoMessage() {}

func (x *CheckSelfIsContactResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSelfIsContactResult.ProtoReflect.Descriptor instead.
func (*CheckSelfIsContactResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{167}
}

func (x *CheckSelfIsContactResult) GetSelfIsContact() bool {
	if x != nil {
		return x.SelfIsContact
	}
	return false
}

func (x *CheckSelfIsContactResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// update switch setting
type UpdateSwitchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Switch Switch `protobuf:"varint,2,opt,name=switch,proto3,enum=pbimuinfoserver.Switch" json:"switch,omitempty"`
	OnOff  bool   `protobuf:"varint,3,opt,name=on_off,json=onOff,proto3" json:"on_off,omitempty"`
}

func (x *UpdateSwitchReq) Reset() {
	*x = UpdateSwitchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSwitchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSwitchReq) ProtoMessage() {}

func (x *UpdateSwitchReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSwitchReq.ProtoReflect.Descriptor instead.
func (*UpdateSwitchReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{168}
}

func (x *UpdateSwitchReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateSwitchReq) GetSwitch() Switch {
	if x != nil {
		return x.Switch
	}
	return Switch_Unused
}

func (x *UpdateSwitchReq) GetOnOff() bool {
	if x != nil {
		return x.OnOff
	}
	return false
}

type UpdateSwitchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code UpdateSwitchResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=pbimuinfoserver.UpdateSwitchResult_ResultCode" json:"code,omitempty"`
}

func (x *UpdateSwitchResult) Reset() {
	*x = UpdateSwitchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSwitchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSwitchResult) ProtoMessage() {}

func (x *UpdateSwitchResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSwitchResult.ProtoReflect.Descriptor instead.
func (*UpdateSwitchResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{169}
}

func (x *UpdateSwitchResult) GetCode() UpdateSwitchResult_ResultCode {
	if x != nil {
		return x.Code
	}
	return UpdateSwitchResult_Success
}

// get switch setting
type GetSwitchStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Switch Switch `protobuf:"varint,2,opt,name=switch,proto3,enum=pbimuinfoserver.Switch" json:"switch,omitempty"`
}

func (x *GetSwitchStatusReq) Reset() {
	*x = GetSwitchStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSwitchStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSwitchStatusReq) ProtoMessage() {}

func (x *GetSwitchStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSwitchStatusReq.ProtoReflect.Descriptor instead.
func (*GetSwitchStatusReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{170}
}

func (x *GetSwitchStatusReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetSwitchStatusReq) GetSwitch() Switch {
	if x != nil {
		return x.Switch
	}
	return Switch_Unused
}

type GetSwitchStatusResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnOff bool                             `protobuf:"varint,1,opt,name=on_off,json=onOff,proto3" json:"on_off,omitempty"`
	Code  GetSwitchStatusResult_ResultCode `protobuf:"varint,2,opt,name=code,proto3,enum=pbimuinfoserver.GetSwitchStatusResult_ResultCode" json:"code,omitempty"`
}

func (x *GetSwitchStatusResult) Reset() {
	*x = GetSwitchStatusResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSwitchStatusResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSwitchStatusResult) ProtoMessage() {}

func (x *GetSwitchStatusResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSwitchStatusResult.ProtoReflect.Descriptor instead.
func (*GetSwitchStatusResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{171}
}

func (x *GetSwitchStatusResult) GetOnOff() bool {
	if x != nil {
		return x.OnOff
	}
	return false
}

func (x *GetSwitchStatusResult) GetCode() GetSwitchStatusResult_ResultCode {
	if x != nil {
		return x.Code
	}
	return GetSwitchStatusResult_Success
}

// 获取viplog 用户电话号码的列表请求
type GetViplogPhoneListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetViplogPhoneListReq) Reset() {
	*x = GetViplogPhoneListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetViplogPhoneListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetViplogPhoneListReq) ProtoMessage() {}

func (x *GetViplogPhoneListReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetViplogPhoneListReq.ProtoReflect.Descriptor instead.
func (*GetViplogPhoneListReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{172}
}

// 获取viplog 用户电话号码的列表返回
type GetViplogPhoneListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phones []string `protobuf:"bytes,1,rep,name=phones,proto3" json:"phones,omitempty"` //电话号码列表
}

func (x *GetViplogPhoneListResp) Reset() {
	*x = GetViplogPhoneListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetViplogPhoneListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetViplogPhoneListResp) ProtoMessage() {}

func (x *GetViplogPhoneListResp) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetViplogPhoneListResp.ProtoReflect.Descriptor instead.
func (*GetViplogPhoneListResp) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{173}
}

func (x *GetViplogPhoneListResp) GetPhones() []string {
	if x != nil {
		return x.Phones
	}
	return nil
}

// 更新用户已经开通支付帐号请求
type UpdateUserHasPayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //用户的Id
	KeyId     int64 `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`             //用户的端标识
	HasCreate bool  `protobuf:"varint,3,opt,name=Has_create,json=HasCreate,proto3" json:"Has_create,omitempty"` //用户是否已经创建
}

func (x *UpdateUserHasPayReq) Reset() {
	*x = UpdateUserHasPayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserHasPayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserHasPayReq) ProtoMessage() {}

func (x *UpdateUserHasPayReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserHasPayReq.ProtoReflect.Descriptor instead.
func (*UpdateUserHasPayReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{174}
}

func (x *UpdateUserHasPayReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserHasPayReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *UpdateUserHasPayReq) GetHasCreate() bool {
	if x != nil {
		return x.HasCreate
	}
	return false
}

// 更新用户已经开通支付帐号返回
type UpdateUserHasPayResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sucess bool `protobuf:"varint,1,opt,name=sucess,proto3" json:"sucess,omitempty"` //是否成功
}

func (x *UpdateUserHasPayResp) Reset() {
	*x = UpdateUserHasPayResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserHasPayResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserHasPayResp) ProtoMessage() {}

func (x *UpdateUserHasPayResp) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserHasPayResp.ProtoReflect.Descriptor instead.
func (*UpdateUserHasPayResp) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{175}
}

func (x *UpdateUserHasPayResp) GetSucess() bool {
	if x != nil {
		return x.Sucess
	}
	return false
}

// 检查用户是否已经创建帐号
type CheckUserHasPayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户的Id
}

func (x *CheckUserHasPayReq) Reset() {
	*x = CheckUserHasPayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserHasPayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserHasPayReq) ProtoMessage() {}

func (x *CheckUserHasPayReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserHasPayReq.ProtoReflect.Descriptor instead.
func (*CheckUserHasPayReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{176}
}

func (x *CheckUserHasPayReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 检查用户是否已经创建帐号的返回
type CheckUserHasPayResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Has bool `protobuf:"varint,1,opt,name=has,proto3" json:"has,omitempty"` //是否有支付帐号
}

func (x *CheckUserHasPayResp) Reset() {
	*x = CheckUserHasPayResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserHasPayResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserHasPayResp) ProtoMessage() {}

func (x *CheckUserHasPayResp) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserHasPayResp.ProtoReflect.Descriptor instead.
func (*CheckUserHasPayResp) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{177}
}

func (x *CheckUserHasPayResp) GetHas() bool {
	if x != nil {
		return x.Has
	}
	return false
}

// 更新用户年龄，性别，区域等等  flags:# sex:flags.0?int age:flags.1?int address:flags.2?string extend:flags.3?DataJSON
type UpdateUserDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户ID
	Flags   int32  `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`                 //位标识
	Sex     int32  `protobuf:"varint,3,opt,name=sex,proto3" json:"sex,omitempty"`                     //用户性别
	Age     int32  `protobuf:"varint,4,opt,name=age,proto3" json:"age,omitempty"`                     //用户年龄
	Address string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`              //用户区域
	Extend  string `protobuf:"bytes,6,opt,name=extend,proto3" json:"extend,omitempty"`                // 用户其它详情扩展字段
}

func (x *UpdateUserDetailReq) Reset() {
	*x = UpdateUserDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserDetailReq) ProtoMessage() {}

func (x *UpdateUserDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserDetailReq.ProtoReflect.Descriptor instead.
func (*UpdateUserDetailReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{178}
}

func (x *UpdateUserDetailReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserDetailReq) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *UpdateUserDetailReq) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *UpdateUserDetailReq) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *UpdateUserDetailReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UpdateUserDetailReq) GetExtend() string {
	if x != nil {
		return x.Extend
	}
	return ""
}

type UpdateUserDetailResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sucessful bool `protobuf:"varint,1,opt,name=sucessful,proto3" json:"sucessful,omitempty"` //是否成功
}

func (x *UpdateUserDetailResult) Reset() {
	*x = UpdateUserDetailResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserDetailResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserDetailResult) ProtoMessage() {}

func (x *UpdateUserDetailResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserDetailResult.ProtoReflect.Descriptor instead.
func (*UpdateUserDetailResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{179}
}

func (x *UpdateUserDetailResult) GetSucessful() bool {
	if x != nil {
		return x.Sucessful
	}
	return false
}

// 更新用户年龄，性别，区域等等  flags:# birthday:int extend: flags.0?DataJson
type UpdateUserDetailBirthdayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户ID
	Flags    int32  `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`                 //位标识
	Birthday int32  `protobuf:"varint,3,opt,name=birthday,proto3" json:"birthday,omitempty"`           //出生年月日
	Extend   string `protobuf:"bytes,4,opt,name=extend,proto3" json:"extend,omitempty"`                // 用户其它详情扩展字段
}

func (x *UpdateUserDetailBirthdayReq) Reset() {
	*x = UpdateUserDetailBirthdayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserDetailBirthdayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserDetailBirthdayReq) ProtoMessage() {}

func (x *UpdateUserDetailBirthdayReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserDetailBirthdayReq.ProtoReflect.Descriptor instead.
func (*UpdateUserDetailBirthdayReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{180}
}

func (x *UpdateUserDetailBirthdayReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserDetailBirthdayReq) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *UpdateUserDetailBirthdayReq) GetBirthday() int32 {
	if x != nil {
		return x.Birthday
	}
	return 0
}

func (x *UpdateUserDetailBirthdayReq) GetExtend() string {
	if x != nil {
		return x.Extend
	}
	return ""
}

type UpdateUserDetailBirthdayResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"` //是否成功
}

func (x *UpdateUserDetailBirthdayResult) Reset() {
	*x = UpdateUserDetailBirthdayResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserDetailBirthdayResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserDetailBirthdayResult) ProtoMessage() {}

func (x *UpdateUserDetailBirthdayResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserDetailBirthdayResult.ProtoReflect.Descriptor instead.
func (*UpdateUserDetailBirthdayResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{181}
}

func (x *UpdateUserDetailBirthdayResult) GetSuccessful() bool {
	if x != nil {
		return x.Successful
	}
	return false
}

// flags:# first_name:string flags.0?photo:InputFile sex:int birthday:int extend:flags.1?DataJson = UserFull;
type SetUserDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`         //用户ID
	Flags     int32  `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`                         //位标识
	FirstName string `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"` //用户昵称
	Photo     string `protobuf:"bytes,4,opt,name=photo,proto3" json:"photo,omitempty"`
	Sex       int32  `protobuf:"varint,5,opt,name=sex,proto3" json:"sex,omitempty"`           // 用户性别
	Birthday  int32  `protobuf:"varint,6,opt,name=birthday,proto3" json:"birthday,omitempty"` // 用户性别
	Extend    string `protobuf:"bytes,7,opt,name=extend,proto3" json:"extend,omitempty"`      // 用户其它详情扩展字段
}

func (x *SetUserDetailReq) Reset() {
	*x = SetUserDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserDetailReq) ProtoMessage() {}

func (x *SetUserDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserDetailReq.ProtoReflect.Descriptor instead.
func (*SetUserDetailReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{182}
}

func (x *SetUserDetailReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SetUserDetailReq) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *SetUserDetailReq) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *SetUserDetailReq) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

func (x *SetUserDetailReq) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *SetUserDetailReq) GetBirthday() int32 {
	if x != nil {
		return x.Birthday
	}
	return 0
}

func (x *SetUserDetailReq) GetExtend() string {
	if x != nil {
		return x.Extend
	}
	return ""
}

type SetUserDetailResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"` //是否成功
}

func (x *SetUserDetailResult) Reset() {
	*x = SetUserDetailResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserDetailResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserDetailResult) ProtoMessage() {}

func (x *SetUserDetailResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserDetailResult.ProtoReflect.Descriptor instead.
func (*SetUserDetailResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{183}
}

func (x *SetUserDetailResult) GetSuccessful() bool {
	if x != nil {
		return x.Successful
	}
	return false
}

type DeleteReceiveAppliesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId    int32         `protobuf:"varint,1,opt,name=selfId,proto3" json:"selfId,omitempty"`
	UserIdArr []int32       `protobuf:"varint,2,rep,packed,name=userIdArr,proto3" json:"userIdArr,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *DeleteReceiveAppliesReq) Reset() {
	*x = DeleteReceiveAppliesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReceiveAppliesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReceiveAppliesReq) ProtoMessage() {}

func (x *DeleteReceiveAppliesReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReceiveAppliesReq.ProtoReflect.Descriptor instead.
func (*DeleteReceiveAppliesReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{184}
}

func (x *DeleteReceiveAppliesReq) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *DeleteReceiveAppliesReq) GetUserIdArr() []int32 {
	if x != nil {
		return x.UserIdArr
	}
	return nil
}

func (x *DeleteReceiveAppliesReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type DeleteReceiveAppliesResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *DeleteReceiveAppliesResult) Reset() {
	*x = DeleteReceiveAppliesResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReceiveAppliesResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReceiveAppliesResult) ProtoMessage() {}

func (x *DeleteReceiveAppliesResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReceiveAppliesResult.ProtoReflect.Descriptor instead.
func (*DeleteReceiveAppliesResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{185}
}

func (x *DeleteReceiveAppliesResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

type UpdateUserTypeLableReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	UserType  int32         `protobuf:"varint,2,opt,name=userType,proto3" json:"userType,omitempty"`
	UserLable int32         `protobuf:"varint,3,opt,name=userLable,proto3" json:"userLable,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UpdateUserTypeLableReq) Reset() {
	*x = UpdateUserTypeLableReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserTypeLableReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserTypeLableReq) ProtoMessage() {}

func (x *UpdateUserTypeLableReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserTypeLableReq.ProtoReflect.Descriptor instead.
func (*UpdateUserTypeLableReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{186}
}

func (x *UpdateUserTypeLableReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserTypeLableReq) GetUserType() int32 {
	if x != nil {
		return x.UserType
	}
	return 0
}

func (x *UpdateUserTypeLableReq) GetUserLable() int32 {
	if x != nil {
		return x.UserLable
	}
	return 0
}

func (x *UpdateUserTypeLableReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type UpdateUserTypeLableResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *UpdateUserTypeLableResult) Reset() {
	*x = UpdateUserTypeLableResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserTypeLableResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserTypeLableResult) ProtoMessage() {}

func (x *UpdateUserTypeLableResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserTypeLableResult.ProtoReflect.Descriptor instead.
func (*UpdateUserTypeLableResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{187}
}

func (x *UpdateUserTypeLableResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

type CheckSearchUserCountLimitedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *CheckSearchUserCountLimitedReq) Reset() {
	*x = CheckSearchUserCountLimitedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSearchUserCountLimitedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSearchUserCountLimitedReq) ProtoMessage() {}

func (x *CheckSearchUserCountLimitedReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSearchUserCountLimitedReq.ProtoReflect.Descriptor instead.
func (*CheckSearchUserCountLimitedReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{188}
}

func (x *CheckSearchUserCountLimitedReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CheckSearchUserCountLimitedReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type CheckSearchUserCountLimitedResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsLimited bool  `protobuf:"varint,1,opt,name=isLimited,proto3" json:"isLimited,omitempty"`
	TimeLeft  int32 `protobuf:"varint,2,opt,name=timeLeft,proto3" json:"timeLeft,omitempty"`
}

func (x *CheckSearchUserCountLimitedResult) Reset() {
	*x = CheckSearchUserCountLimitedResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSearchUserCountLimitedResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSearchUserCountLimitedResult) ProtoMessage() {}

func (x *CheckSearchUserCountLimitedResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSearchUserCountLimitedResult.ProtoReflect.Descriptor instead.
func (*CheckSearchUserCountLimitedResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{189}
}

func (x *CheckSearchUserCountLimitedResult) GetIsLimited() bool {
	if x != nil {
		return x.IsLimited
	}
	return false
}

func (x *CheckSearchUserCountLimitedResult) GetTimeLeft() int32 {
	if x != nil {
		return x.TimeLeft
	}
	return 0
}

type CheckIsMutualContactReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	ContactId int32         `protobuf:"varint,2,opt,name=contactId,proto3" json:"contactId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *CheckIsMutualContactReq) Reset() {
	*x = CheckIsMutualContactReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckIsMutualContactReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIsMutualContactReq) ProtoMessage() {}

func (x *CheckIsMutualContactReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIsMutualContactReq.ProtoReflect.Descriptor instead.
func (*CheckIsMutualContactReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{190}
}

func (x *CheckIsMutualContactReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CheckIsMutualContactReq) GetContactId() int32 {
	if x != nil {
		return x.ContactId
	}
	return 0
}

func (x *CheckIsMutualContactReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type CheckIsMutualContactResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsMutualContact bool      `protobuf:"varint,1,opt,name=isMutualContact,proto3" json:"isMutualContact,omitempty"`
	Errorcode       ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *CheckIsMutualContactResult) Reset() {
	*x = CheckIsMutualContactResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckIsMutualContactResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIsMutualContactResult) ProtoMessage() {}

func (x *CheckIsMutualContactResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIsMutualContactResult.ProtoReflect.Descriptor instead.
func (*CheckIsMutualContactResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{191}
}

func (x *CheckIsMutualContactResult) GetIsMutualContact() bool {
	if x != nil {
		return x.IsMutualContact
	}
	return false
}

func (x *CheckIsMutualContactResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

type ChangeGroupNameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId int32         `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Title   string        `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	UserId  int32         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ChangeGroupNameReq) Reset() {
	*x = ChangeGroupNameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeGroupNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeGroupNameReq) ProtoMessage() {}

func (x *ChangeGroupNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeGroupNameReq.ProtoReflect.Descriptor instead.
func (*ChangeGroupNameReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{192}
}

func (x *ChangeGroupNameReq) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ChangeGroupNameReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ChangeGroupNameReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ChangeGroupNameReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ChangeGroupNameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (x *ChangeGroupNameResult) Reset() {
	*x = ChangeGroupNameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeGroupNameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeGroupNameResult) ProtoMessage() {}

func (x *ChangeGroupNameResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeGroupNameResult.ProtoReflect.Descriptor instead.
func (*ChangeGroupNameResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{193}
}

func (x *ChangeGroupNameResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

type GetContactsV1Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"` //用户的Id
	KeyId  int64         `protobuf:"varint,2,opt,name=keyId,proto3" json:"keyId,omitempty"`   // 用户的keyId
	Hash   int32         `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`     //用户联系人的哈希值
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetContactsV1Req) Reset() {
	*x = GetContactsV1Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContactsV1Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContactsV1Req) ProtoMessage() {}

func (x *GetContactsV1Req) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContactsV1Req.ProtoReflect.Descriptor instead.
func (*GetContactsV1Req) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{194}
}

func (x *GetContactsV1Req) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetContactsV1Req) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *GetContactsV1Req) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *GetContactsV1Req) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type GetContactsV1Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactArr    []*ContactInfo `protobuf:"bytes,1,rep,name=contactArr,proto3" json:"contactArr,omitempty"`       //联系人的的信息们
	UserInfoArr   []*UserInfo    `protobuf:"bytes,2,rep,name=userInfoArr,proto3" json:"userInfoArr,omitempty"`     //联系人们的用户信息们
	GroupOrderArr []*GroupOrder  `protobuf:"bytes,3,rep,name=groupOrderArr,proto3" json:"groupOrderArr,omitempty"` //
	SavedCount    int32          `protobuf:"varint,4,opt,name=savedCount,proto3" json:"savedCount,omitempty"`
	Hash          int32          `protobuf:"varint,5,opt,name=hash,proto3" json:"hash,omitempty"`
	Errorcode     ReErrCode      `protobuf:"varint,6,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *GetContactsV1Result) Reset() {
	*x = GetContactsV1Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContactsV1Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContactsV1Result) ProtoMessage() {}

func (x *GetContactsV1Result) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContactsV1Result.ProtoReflect.Descriptor instead.
func (*GetContactsV1Result) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{195}
}

func (x *GetContactsV1Result) GetContactArr() []*ContactInfo {
	if x != nil {
		return x.ContactArr
	}
	return nil
}

func (x *GetContactsV1Result) GetUserInfoArr() []*UserInfo {
	if x != nil {
		return x.UserInfoArr
	}
	return nil
}

func (x *GetContactsV1Result) GetGroupOrderArr() []*GroupOrder {
	if x != nil {
		return x.GroupOrderArr
	}
	return nil
}

func (x *GetContactsV1Result) GetSavedCount() int32 {
	if x != nil {
		return x.SavedCount
	}
	return 0
}

func (x *GetContactsV1Result) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *GetContactsV1Result) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// @ added by qingsong at 2021.03.17 for virtual pretty number
// rpc SearchPrettyNumber(SearchPrettyNumberReq) returns (SearchPrettyNumberRsp) {}
type SearchPrettyNumberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountryCode string `protobuf:"bytes,1,opt,name=CountryCode,proto3" json:"CountryCode,omitempty"`
	MatchNumber string `protobuf:"bytes,2,opt,name=MatchNumber,proto3" json:"MatchNumber,omitempty"`
}

func (x *SearchPrettyNumberReq) Reset() {
	*x = SearchPrettyNumberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchPrettyNumberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPrettyNumberReq) ProtoMessage() {}

func (x *SearchPrettyNumberReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPrettyNumberReq.ProtoReflect.Descriptor instead.
func (*SearchPrettyNumberReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{196}
}

func (x *SearchPrettyNumberReq) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *SearchPrettyNumberReq) GetMatchNumber() string {
	if x != nil {
		return x.MatchNumber
	}
	return ""
}

type SearchPrettyNumberRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message       string   `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	PrettyNumbers []string `protobuf:"bytes,2,rep,name=PrettyNumbers,proto3" json:"PrettyNumbers,omitempty"`
}

func (x *SearchPrettyNumberRsp) Reset() {
	*x = SearchPrettyNumberRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchPrettyNumberRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPrettyNumberRsp) ProtoMessage() {}

func (x *SearchPrettyNumberRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPrettyNumberRsp.ProtoReflect.Descriptor instead.
func (*SearchPrettyNumberRsp) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{197}
}

func (x *SearchPrettyNumberRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SearchPrettyNumberRsp) GetPrettyNumbers() []string {
	if x != nil {
		return x.PrettyNumbers
	}
	return nil
}

// rpc ActivePrettyNumber(ActivePrettyNumberReq) returns (ActivePrettyNumberRsp) {}
type ActivePrettyNumberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountryCode string `protobuf:"bytes,1,opt,name=CountryCode,proto3" json:"CountryCode,omitempty"` // 国家码
	ActivePhone string `protobuf:"bytes,2,opt,name=ActivePhone,proto3" json:"ActivePhone,omitempty"` // 电话号码， 不带国家码
	AssginFlags string `protobuf:"bytes,3,opt,name=AssginFlags,proto3" json:"AssginFlags,omitempty"` //
	Operator    int32  `protobuf:"varint,4,opt,name=Operator,proto3" json:"Operator,omitempty"`
}

func (x *ActivePrettyNumberReq) Reset() {
	*x = ActivePrettyNumberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivePrettyNumberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivePrettyNumberReq) ProtoMessage() {}

func (x *ActivePrettyNumberReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivePrettyNumberReq.ProtoReflect.Descriptor instead.
func (*ActivePrettyNumberReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{198}
}

func (x *ActivePrettyNumberReq) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *ActivePrettyNumberReq) GetActivePhone() string {
	if x != nil {
		return x.ActivePhone
	}
	return ""
}

func (x *ActivePrettyNumberReq) GetAssginFlags() string {
	if x != nil {
		return x.AssginFlags
	}
	return ""
}

func (x *ActivePrettyNumberReq) GetOperator() int32 {
	if x != nil {
		return x.Operator
	}
	return 0
}

type ActivePrettyNumberRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *ActivePrettyNumberRsp) Reset() {
	*x = ActivePrettyNumberRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivePrettyNumberRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivePrettyNumberRsp) ProtoMessage() {}

func (x *ActivePrettyNumberRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivePrettyNumberRsp.ProtoReflect.Descriptor instead.
func (*ActivePrettyNumberRsp) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{199}
}

func (x *ActivePrettyNumberRsp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ActivePrettyNumberRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 获取虚拟帐号绑定信息
// rpc GetVirtualBindByPhone(GetVirtualBindByPhoneReq) returns (GetVirtualBindByPhoneRsp) {}
type GetVirtualBindByPhoneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VirtualPhone string `protobuf:"bytes,1,opt,name=VirtualPhone,proto3" json:"VirtualPhone,omitempty"`
}

func (x *GetVirtualBindByPhoneReq) Reset() {
	*x = GetVirtualBindByPhoneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVirtualBindByPhoneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVirtualBindByPhoneReq) ProtoMessage() {}

func (x *GetVirtualBindByPhoneReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVirtualBindByPhoneReq.ProtoReflect.Descriptor instead.
func (*GetVirtualBindByPhoneReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{200}
}

func (x *GetVirtualBindByPhoneReq) GetVirtualPhone() string {
	if x != nil {
		return x.VirtualPhone
	}
	return ""
}

type GetVirtualBindByPhoneRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsVirtualAcct bool   `protobuf:"varint,1,opt,name=IsVirtualAcct,proto3" json:"IsVirtualAcct,omitempty"`               // is virtual account.
	BindRealPhone string `protobuf:"bytes,2,opt,name=BindRealPhone,proto3" json:"BindRealPhone,omitempty"`                // bind real phone
	BindContactId int32  `protobuf:"varint,3,opt,name=BindContactId,proto3" json:"BindContactId,omitempty"`               // bind contact id
	AssingFlags   string `protobuf:"bytes,4,opt,name=Assing_flags,json=AssingFlags,proto3" json:"Assing_flags,omitempty"` // flags
}

func (x *GetVirtualBindByPhoneRsp) Reset() {
	*x = GetVirtualBindByPhoneRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVirtualBindByPhoneRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVirtualBindByPhoneRsp) ProtoMessage() {}

func (x *GetVirtualBindByPhoneRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVirtualBindByPhoneRsp.ProtoReflect.Descriptor instead.
func (*GetVirtualBindByPhoneRsp) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{201}
}

func (x *GetVirtualBindByPhoneRsp) GetIsVirtualAcct() bool {
	if x != nil {
		return x.IsVirtualAcct
	}
	return false
}

func (x *GetVirtualBindByPhoneRsp) GetBindRealPhone() string {
	if x != nil {
		return x.BindRealPhone
	}
	return ""
}

func (x *GetVirtualBindByPhoneRsp) GetBindContactId() int32 {
	if x != nil {
		return x.BindContactId
	}
	return 0
}

func (x *GetVirtualBindByPhoneRsp) GetAssingFlags() string {
	if x != nil {
		return x.AssingFlags
	}
	return ""
}

type GetuserAdminInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *GetuserAdminInfoReq) Reset() {
	*x = GetuserAdminInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetuserAdminInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetuserAdminInfoReq) ProtoMessage() {}

func (x *GetuserAdminInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetuserAdminInfoReq.ProtoReflect.Descriptor instead.
func (*GetuserAdminInfoReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{202}
}

func (x *GetuserAdminInfoReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetuserAdminInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAdmin bool  `protobuf:"varint,1,opt,name=isAdmin,proto3" json:"isAdmin,omitempty"` //是不是管理員
	Level   int32 `protobuf:"varint,2,opt,name=Level,proto3" json:"Level,omitempty"`     //管理員級別
}

func (x *GetuserAdminInfoResp) Reset() {
	*x = GetuserAdminInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetuserAdminInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetuserAdminInfoResp) ProtoMessage() {}

func (x *GetuserAdminInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetuserAdminInfoResp.ProtoReflect.Descriptor instead.
func (*GetuserAdminInfoResp) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{203}
}

func (x *GetuserAdminInfoResp) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

func (x *GetuserAdminInfoResp) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type AddUserAdminReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int32 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`     //用戶ID
	Operator int32 `protobuf:"varint,2,opt,name=operator,proto3" json:"operator,omitempty"` //操作者的userId
	Level    int32 `protobuf:"varint,3,opt,name=Level,proto3" json:"Level,omitempty"`       //權限級別
}

func (x *AddUserAdminReq) Reset() {
	*x = AddUserAdminReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUserAdminReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserAdminReq) ProtoMessage() {}

func (x *AddUserAdminReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserAdminReq.ProtoReflect.Descriptor instead.
func (*AddUserAdminReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{204}
}

func (x *AddUserAdminReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddUserAdminReq) GetOperator() int32 {
	if x != nil {
		return x.Operator
	}
	return 0
}

func (x *AddUserAdminReq) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type AddUserAdminResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SUcessful bool   `protobuf:"varint,1,opt,name=SUcessful,proto3" json:"SUcessful,omitempty"`
	ErrStr    string `protobuf:"bytes,2,opt,name=ErrStr,proto3" json:"ErrStr,omitempty"`
}

func (x *AddUserAdminResp) Reset() {
	*x = AddUserAdminResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUserAdminResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserAdminResp) ProtoMessage() {}

func (x *AddUserAdminResp) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserAdminResp.ProtoReflect.Descriptor instead.
func (*AddUserAdminResp) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{205}
}

func (x *AddUserAdminResp) GetSUcessful() bool {
	if x != nil {
		return x.SUcessful
	}
	return false
}

func (x *AddUserAdminResp) GetErrStr() string {
	if x != nil {
		return x.ErrStr
	}
	return ""
}

type BindVitualSendCodeChannelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssigFlag  string `protobuf:"bytes,1,opt,name=assigFlag,proto3" json:"assigFlag,omitempty"`                      //分配標識
	SendId     int32  `protobuf:"varint,2,opt,name=sendId,proto3" json:"sendId,omitempty"`                           //羣短信驗證碼發送者ID
	ChannelId  int32  `protobuf:"varint,3,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`                     //羣Id
	AccessHash int64  `protobuf:"varint,4,opt,name=Access_hash,json=AccessHash,proto3" json:"Access_hash,omitempty"` // 羣hash
}

func (x *BindVitualSendCodeChannelReq) Reset() {
	*x = BindVitualSendCodeChannelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindVitualSendCodeChannelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindVitualSendCodeChannelReq) ProtoMessage() {}

func (x *BindVitualSendCodeChannelReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindVitualSendCodeChannelReq.ProtoReflect.Descriptor instead.
func (*BindVitualSendCodeChannelReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{206}
}

func (x *BindVitualSendCodeChannelReq) GetAssigFlag() string {
	if x != nil {
		return x.AssigFlag
	}
	return ""
}

func (x *BindVitualSendCodeChannelReq) GetSendId() int32 {
	if x != nil {
		return x.SendId
	}
	return 0
}

func (x *BindVitualSendCodeChannelReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *BindVitualSendCodeChannelReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

type BindVitualSendCodeChannelResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode int32  `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"` //錯誤嗎
	ErrStr    string `protobuf:"bytes,2,opt,name=ErrStr,proto3" json:"ErrStr,omitempty"`
}

func (x *BindVitualSendCodeChannelResp) Reset() {
	*x = BindVitualSendCodeChannelResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindVitualSendCodeChannelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindVitualSendCodeChannelResp) ProtoMessage() {}

func (x *BindVitualSendCodeChannelResp) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindVitualSendCodeChannelResp.ProtoReflect.Descriptor instead.
func (*BindVitualSendCodeChannelResp) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{207}
}

func (x *BindVitualSendCodeChannelResp) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *BindVitualSendCodeChannelResp) GetErrStr() string {
	if x != nil {
		return x.ErrStr
	}
	return ""
}

type GetVitualSendCodeChannelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneNumber string `protobuf:"bytes,1,opt,name=phoneNumber,proto3" json:"phoneNumber,omitempty"`
}

func (x *GetVitualSendCodeChannelReq) Reset() {
	*x = GetVitualSendCodeChannelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVitualSendCodeChannelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVitualSendCodeChannelReq) ProtoMessage() {}

func (x *GetVitualSendCodeChannelReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVitualSendCodeChannelReq.ProtoReflect.Descriptor instead.
func (*GetVitualSendCodeChannelReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{208}
}

func (x *GetVitualSendCodeChannelReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

type GetVitualSendCodeChannelResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsNeedSendChannel bool  `protobuf:"varint,1,opt,name=isNeedSendChannel,proto3" json:"isNeedSendChannel,omitempty"`     //是否需要向羣裏發送
	SendId            int32 `protobuf:"varint,2,opt,name=sendId,proto3" json:"sendId,omitempty"`                           //羣短信驗證碼發送者ID
	ChannelId         int32 `protobuf:"varint,3,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`                     //羣Id
	AccessHash        int64 `protobuf:"varint,4,opt,name=Access_hash,json=AccessHash,proto3" json:"Access_hash,omitempty"` // 羣hash
}

func (x *GetVitualSendCodeChannelResp) Reset() {
	*x = GetVitualSendCodeChannelResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVitualSendCodeChannelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVitualSendCodeChannelResp) ProtoMessage() {}

func (x *GetVitualSendCodeChannelResp) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVitualSendCodeChannelResp.ProtoReflect.Descriptor instead.
func (*GetVitualSendCodeChannelResp) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{209}
}

func (x *GetVitualSendCodeChannelResp) GetIsNeedSendChannel() bool {
	if x != nil {
		return x.IsNeedSendChannel
	}
	return false
}

func (x *GetVitualSendCodeChannelResp) GetSendId() int32 {
	if x != nil {
		return x.SendId
	}
	return 0
}

func (x *GetVitualSendCodeChannelResp) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *GetVitualSendCodeChannelResp) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

type VitualCheckCanAddContactReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ContactId int32 `protobuf:"varint,2,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
}

func (x *VitualCheckCanAddContactReq) Reset() {
	*x = VitualCheckCanAddContactReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VitualCheckCanAddContactReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VitualCheckCanAddContactReq) ProtoMessage() {}

func (x *VitualCheckCanAddContactReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VitualCheckCanAddContactReq.ProtoReflect.Descriptor instead.
func (*VitualCheckCanAddContactReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{210}
}

func (x *VitualCheckCanAddContactReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *VitualCheckCanAddContactReq) GetContactId() int32 {
	if x != nil {
		return x.ContactId
	}
	return 0
}

type VitualCheckCanAddContactResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanAdd bool `protobuf:"varint,1,opt,name=canAdd,proto3" json:"canAdd,omitempty"` //是否能夠添加
}

func (x *VitualCheckCanAddContactResp) Reset() {
	*x = VitualCheckCanAddContactResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VitualCheckCanAddContactResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VitualCheckCanAddContactResp) ProtoMessage() {}

func (x *VitualCheckCanAddContactResp) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VitualCheckCanAddContactResp.ProtoReflect.Descriptor instead.
func (*VitualCheckCanAddContactResp) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{211}
}

func (x *VitualCheckCanAddContactResp) GetCanAdd() bool {
	if x != nil {
		return x.CanAdd
	}
	return false
}

type CheckIsPhoneVitulaPhoneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"` //虛擬號碼
}

func (x *CheckIsPhoneVitulaPhoneReq) Reset() {
	*x = CheckIsPhoneVitulaPhoneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckIsPhoneVitulaPhoneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIsPhoneVitulaPhoneReq) ProtoMessage() {}

func (x *CheckIsPhoneVitulaPhoneReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIsPhoneVitulaPhoneReq.ProtoReflect.Descriptor instead.
func (*CheckIsPhoneVitulaPhoneReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{212}
}

func (x *CheckIsPhoneVitulaPhoneReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type CheckIsPhoneVitulaPhoneResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsVirtal bool `protobuf:"varint,1,opt,name=isVirtal,proto3" json:"isVirtal,omitempty"`
}

func (x *CheckIsPhoneVitulaPhoneResp) Reset() {
	*x = CheckIsPhoneVitulaPhoneResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckIsPhoneVitulaPhoneResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIsPhoneVitulaPhoneResp) ProtoMessage() {}

func (x *CheckIsPhoneVitulaPhoneResp) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIsPhoneVitulaPhoneResp.ProtoReflect.Descriptor instead.
func (*CheckIsPhoneVitulaPhoneResp) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{213}
}

func (x *CheckIsPhoneVitulaPhoneResp) GetIsVirtal() bool {
	if x != nil {
		return x.IsVirtal
	}
	return false
}

type CheckIsVitulaPhoneArrReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId []int32 `protobuf:"varint,1,rep,packed,name=userId,proto3" json:"userId,omitempty"`
}

func (x *CheckIsVitulaPhoneArrReq) Reset() {
	*x = CheckIsVitulaPhoneArrReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckIsVitulaPhoneArrReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIsVitulaPhoneArrReq) ProtoMessage() {}

func (x *CheckIsVitulaPhoneArrReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIsVitulaPhoneArrReq.ProtoReflect.Descriptor instead.
func (*CheckIsVitulaPhoneArrReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{214}
}

func (x *CheckIsVitulaPhoneArrReq) GetUserId() []int32 {
	if x != nil {
		return x.UserId
	}
	return nil
}

type CheckIsVitulaPhoneArrResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsVitual bool `protobuf:"varint,1,opt,name=IsVitual,proto3" json:"IsVitual,omitempty"`
}

func (x *CheckIsVitulaPhoneArrResp) Reset() {
	*x = CheckIsVitulaPhoneArrResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckIsVitulaPhoneArrResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIsVitulaPhoneArrResp) ProtoMessage() {}

func (x *CheckIsVitulaPhoneArrResp) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIsVitulaPhoneArrResp.ProtoReflect.Descriptor instead.
func (*CheckIsVitulaPhoneArrResp) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{215}
}

func (x *CheckIsVitulaPhoneArrResp) GetIsVitual() bool {
	if x != nil {
		return x.IsVitual
	}
	return false
}

type SignUpVitualReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneNumber    string `protobuf:"bytes,1,opt,name=PhoneNumber,proto3" json:"PhoneNumber,omitempty"` //电话号码
	PhoneCodeHash  string `protobuf:"bytes,2,opt,name=PhoneCodeHash,proto3" json:"PhoneCodeHash,omitempty"`
	PhoneCode      string `protobuf:"bytes,3,opt,name=PhoneCode,proto3" json:"PhoneCode,omitempty"` //验证码
	FirstName      string `protobuf:"bytes,4,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	Sex            int32  `protobuf:"varint,5,opt,name=sex,proto3" json:"sex,omitempty"`
	IsBot          bool   `protobuf:"varint,6,opt,name=is_bot,json=isBot,proto3" json:"is_bot,omitempty"`
	BotInfoVersion int32  `protobuf:"varint,7,opt,name=bot_info_version,json=botInfoVersion,proto3" json:"bot_info_version,omitempty"`
	BotChatHistory bool   `protobuf:"varint,8,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNoChats     bool   `protobuf:"varint,9,opt,name=bot_no_chats,json=botNoChats,proto3" json:"bot_no_chats,omitempty"`
	CountryCode    string `protobuf:"bytes,10,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"` // 国家码
	LocalPhone     string `protobuf:"bytes,11,opt,name=local_phone,json=localPhone,proto3" json:"local_phone,omitempty"`    // 不带国家码的号码
	Birthday       int32  `protobuf:"varint,12,opt,name=birthday,proto3" json:"birthday,omitempty"`
	Photo          string `protobuf:"bytes,13,opt,name=photo,proto3" json:"photo,omitempty"`
	ProxyCode      int32  `protobuf:"varint,14,opt,name=proxyCode,proto3" json:"proxyCode,omitempty"` // 邀请人userId
}

func (x *SignUpVitualReq) Reset() {
	*x = SignUpVitualReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignUpVitualReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignUpVitualReq) ProtoMessage() {}

func (x *SignUpVitualReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignUpVitualReq.ProtoReflect.Descriptor instead.
func (*SignUpVitualReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{216}
}

func (x *SignUpVitualReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *SignUpVitualReq) GetPhoneCodeHash() string {
	if x != nil {
		return x.PhoneCodeHash
	}
	return ""
}

func (x *SignUpVitualReq) GetPhoneCode() string {
	if x != nil {
		return x.PhoneCode
	}
	return ""
}

func (x *SignUpVitualReq) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *SignUpVitualReq) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *SignUpVitualReq) GetIsBot() bool {
	if x != nil {
		return x.IsBot
	}
	return false
}

func (x *SignUpVitualReq) GetBotInfoVersion() int32 {
	if x != nil {
		return x.BotInfoVersion
	}
	return 0
}

func (x *SignUpVitualReq) GetBotChatHistory() bool {
	if x != nil {
		return x.BotChatHistory
	}
	return false
}

func (x *SignUpVitualReq) GetBotNoChats() bool {
	if x != nil {
		return x.BotNoChats
	}
	return false
}

func (x *SignUpVitualReq) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *SignUpVitualReq) GetLocalPhone() string {
	if x != nil {
		return x.LocalPhone
	}
	return ""
}

func (x *SignUpVitualReq) GetBirthday() int32 {
	if x != nil {
		return x.Birthday
	}
	return 0
}

func (x *SignUpVitualReq) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

func (x *SignUpVitualReq) GetProxyCode() int32 {
	if x != nil {
		return x.ProxyCode
	}
	return 0
}

type SignUpVitualResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     SignUpVitualResp_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=pbimuinfoserver.SignUpVitualResp_ResultCode" json:"code,omitempty"`
	UserInfo *UserInfo                   `protobuf:"bytes,2,opt,name=userInfo,proto3" json:"userInfo,omitempty"`
}

func (x *SignUpVitualResp) Reset() {
	*x = SignUpVitualResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignUpVitualResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignUpVitualResp) ProtoMessage() {}

func (x *SignUpVitualResp) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignUpVitualResp.ProtoReflect.Descriptor instead.
func (*SignUpVitualResp) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{217}
}

func (x *SignUpVitualResp) GetCode() SignUpVitualResp_ResultCode {
	if x != nil {
		return x.Code
	}
	return SignUpVitualResp_Success
}

func (x *SignUpVitualResp) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

// rpc VirtualBindRealPhone(VirtualBindRealPhoneReq) returns (VirtualBindRealPhoneRsp) {}
type VirtualBindRealPhoneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VPhone string `protobuf:"bytes,1,opt,name=VPhone,proto3" json:"VPhone,omitempty"` // virtual phone.
	RPhone string `protobuf:"bytes,2,opt,name=RPhone,proto3" json:"RPhone,omitempty"` // real phone.
}

func (x *VirtualBindRealPhoneReq) Reset() {
	*x = VirtualBindRealPhoneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualBindRealPhoneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualBindRealPhoneReq) ProtoMessage() {}

func (x *VirtualBindRealPhoneReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualBindRealPhoneReq.ProtoReflect.Descriptor instead.
func (*VirtualBindRealPhoneReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{218}
}

func (x *VirtualBindRealPhoneReq) GetVPhone() string {
	if x != nil {
		return x.VPhone
	}
	return ""
}

func (x *VirtualBindRealPhoneReq) GetRPhone() string {
	if x != nil {
		return x.RPhone
	}
	return ""
}

type VirtualBindRealPhoneRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *VirtualBindRealPhoneRsp) Reset() {
	*x = VirtualBindRealPhoneRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualBindRealPhoneRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualBindRealPhoneRsp) ProtoMessage() {}

func (x *VirtualBindRealPhoneRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualBindRealPhoneRsp.ProtoReflect.Descriptor instead.
func (*VirtualBindRealPhoneRsp) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{219}
}

func (x *VirtualBindRealPhoneRsp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *VirtualBindRealPhoneRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// rpc VirtualAddContactByPhone(VirtualAddContactByPhoneReq) returns (VirtualAddContactByPhoneRsp) {}
type VirtualAddContactByPhoneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VPhone string `protobuf:"bytes,1,opt,name=VPhone,proto3" json:"VPhone,omitempty"` // virtual phone.
	RPhone string `protobuf:"bytes,2,opt,name=RPhone,proto3" json:"RPhone,omitempty"` // real phone.
}

func (x *VirtualAddContactByPhoneReq) Reset() {
	*x = VirtualAddContactByPhoneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualAddContactByPhoneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualAddContactByPhoneReq) ProtoMessage() {}

func (x *VirtualAddContactByPhoneReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualAddContactByPhoneReq.ProtoReflect.Descriptor instead.
func (*VirtualAddContactByPhoneReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{220}
}

func (x *VirtualAddContactByPhoneReq) GetVPhone() string {
	if x != nil {
		return x.VPhone
	}
	return ""
}

func (x *VirtualAddContactByPhoneReq) GetRPhone() string {
	if x != nil {
		return x.RPhone
	}
	return ""
}

type VirtualAddContactByPhoneRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *VirtualAddContactByPhoneRsp) Reset() {
	*x = VirtualAddContactByPhoneRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualAddContactByPhoneRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualAddContactByPhoneRsp) ProtoMessage() {}

func (x *VirtualAddContactByPhoneRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualAddContactByPhoneRsp.ProtoReflect.Descriptor instead.
func (*VirtualAddContactByPhoneRsp) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{221}
}

func (x *VirtualAddContactByPhoneRsp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *VirtualAddContactByPhoneRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type JoinGroupCheckReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InviterId int32   `protobuf:"varint,1,opt,name=InviterId,proto3" json:"InviterId,omitempty"` // inviter user id.
	MemberIds []int32 `protobuf:"varint,2,rep,packed,name=MemberIds,proto3" json:"MemberIds,omitempty"`
}

func (x *JoinGroupCheckReq) Reset() {
	*x = JoinGroupCheckReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinGroupCheckReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinGroupCheckReq) ProtoMessage() {}

func (x *JoinGroupCheckReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinGroupCheckReq.ProtoReflect.Descriptor instead.
func (*JoinGroupCheckReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{222}
}

func (x *JoinGroupCheckReq) GetInviterId() int32 {
	if x != nil {
		return x.InviterId
	}
	return 0
}

func (x *JoinGroupCheckReq) GetMemberIds() []int32 {
	if x != nil {
		return x.MemberIds
	}
	return nil
}

type JoinGroupCheckRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanJoinIds []int32 `protobuf:"varint,1,rep,packed,name=CanJoinIds,proto3" json:"CanJoinIds,omitempty"`
}

func (x *JoinGroupCheckRsp) Reset() {
	*x = JoinGroupCheckRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinGroupCheckRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinGroupCheckRsp) ProtoMessage() {}

func (x *JoinGroupCheckRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinGroupCheckRsp.ProtoReflect.Descriptor instead.
func (*JoinGroupCheckRsp) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{223}
}

func (x *JoinGroupCheckRsp) GetCanJoinIds() []int32 {
	if x != nil {
		return x.CanJoinIds
	}
	return nil
}

type CheckIsVitulaPhoneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *CheckIsVitulaPhoneReq) Reset() {
	*x = CheckIsVitulaPhoneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckIsVitulaPhoneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIsVitulaPhoneReq) ProtoMessage() {}

func (x *CheckIsVitulaPhoneReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIsVitulaPhoneReq.ProtoReflect.Descriptor instead.
func (*CheckIsVitulaPhoneReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{224}
}

func (x *CheckIsVitulaPhoneReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type CheckIsVitulaPhoneResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsVitulal bool `protobuf:"varint,1,opt,name=isVitulal,proto3" json:"isVitulal,omitempty"`
}

func (x *CheckIsVitulaPhoneResp) Reset() {
	*x = CheckIsVitulaPhoneResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckIsVitulaPhoneResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIsVitulaPhoneResp) ProtoMessage() {}

func (x *CheckIsVitulaPhoneResp) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIsVitulaPhoneResp.ProtoReflect.Descriptor instead.
func (*CheckIsVitulaPhoneResp) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{225}
}

func (x *CheckIsVitulaPhoneResp) GetIsVitulal() bool {
	if x != nil {
		return x.IsVitulal
	}
	return false
}

type VirtulPhoneInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PhoneNumber string `protobuf:"bytes,2,opt,name=phoneNumber,proto3" json:"phoneNumber,omitempty"` //電話號碼
}

func (x *VirtulPhoneInfo) Reset() {
	*x = VirtulPhoneInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtulPhoneInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtulPhoneInfo) ProtoMessage() {}

func (x *VirtulPhoneInfo) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtulPhoneInfo.ProtoReflect.Descriptor instead.
func (*VirtulPhoneInfo) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{226}
}

func (x *VirtulPhoneInfo) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *VirtulPhoneInfo) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

type GetAllVitualUsersByFlagsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssginFlags string `protobuf:"bytes,1,opt,name=assgin_flags,json=assginFlags,proto3" json:"assgin_flags,omitempty"`
}

func (x *GetAllVitualUsersByFlagsReq) Reset() {
	*x = GetAllVitualUsersByFlagsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllVitualUsersByFlagsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllVitualUsersByFlagsReq) ProtoMessage() {}

func (x *GetAllVitualUsersByFlagsReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllVitualUsersByFlagsReq.ProtoReflect.Descriptor instead.
func (*GetAllVitualUsersByFlagsReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{227}
}

func (x *GetAllVitualUsersByFlagsReq) GetAssginFlags() string {
	if x != nil {
		return x.AssginFlags
	}
	return ""
}

type GetAllVitualUsersByFlagsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sucess bool               `protobuf:"varint,1,opt,name=sucess,proto3" json:"sucess,omitempty"`
	Infos  []*VirtulPhoneInfo `protobuf:"bytes,2,rep,name=infos,proto3" json:"infos,omitempty"` //需要拉人的羣組信息
}

func (x *GetAllVitualUsersByFlagsResp) Reset() {
	*x = GetAllVitualUsersByFlagsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllVitualUsersByFlagsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllVitualUsersByFlagsResp) ProtoMessage() {}

func (x *GetAllVitualUsersByFlagsResp) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllVitualUsersByFlagsResp.ProtoReflect.Descriptor instead.
func (*GetAllVitualUsersByFlagsResp) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{228}
}

func (x *GetAllVitualUsersByFlagsResp) GetSucess() bool {
	if x != nil {
		return x.Sucess
	}
	return false
}

func (x *GetAllVitualUsersByFlagsResp) GetInfos() []*VirtulPhoneInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetVitulPhoneNumbersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number      int32  `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`                             //需要獲取的號碼的個數
	AdminId     int32  `protobuf:"varint,2,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`            //需要獲取的管理員
	AssginFlags string `protobuf:"bytes,3,opt,name=assgin_flags,json=assginFlags,proto3" json:"assgin_flags,omitempty"` //團體標識別
	UtilDate    int64  `protobuf:"varint,4,opt,name=util_date,json=utilDate,proto3" json:"util_date,omitempty"`         //失效時間
	CountryCode string `protobuf:"bytes,5,opt,name=countryCode,proto3" json:"countryCode,omitempty"`                    //需要分配的國家代碼
}

func (x *GetVitulPhoneNumbersReq) Reset() {
	*x = GetVitulPhoneNumbersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVitulPhoneNumbersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVitulPhoneNumbersReq) ProtoMessage() {}

func (x *GetVitulPhoneNumbersReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVitulPhoneNumbersReq.ProtoReflect.Descriptor instead.
func (*GetVitulPhoneNumbersReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{229}
}

func (x *GetVitulPhoneNumbersReq) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *GetVitulPhoneNumbersReq) GetAdminId() int32 {
	if x != nil {
		return x.AdminId
	}
	return 0
}

func (x *GetVitulPhoneNumbersReq) GetAssginFlags() string {
	if x != nil {
		return x.AssginFlags
	}
	return ""
}

func (x *GetVitulPhoneNumbersReq) GetUtilDate() int64 {
	if x != nil {
		return x.UtilDate
	}
	return 0
}

func (x *GetVitulPhoneNumbersReq) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

type GetVitulPhoneNumbersResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode      int32    `protobuf:"varint,1,opt,name=errCode,proto3" json:"errCode,omitempty"` //錯誤嗎 0 成功 其它失敗
	ErrStr       string   `protobuf:"bytes,2,opt,name=errStr,proto3" json:"errStr,omitempty"`    //錯誤i信息
	Phonenumbers []string `protobuf:"bytes,3,rep,name=phonenumbers,proto3" json:"phonenumbers,omitempty"`
}

func (x *GetVitulPhoneNumbersResp) Reset() {
	*x = GetVitulPhoneNumbersResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVitulPhoneNumbersResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVitulPhoneNumbersResp) ProtoMessage() {}

func (x *GetVitulPhoneNumbersResp) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVitulPhoneNumbersResp.ProtoReflect.Descriptor instead.
func (*GetVitulPhoneNumbersResp) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{230}
}

func (x *GetVitulPhoneNumbersResp) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *GetVitulPhoneNumbersResp) GetErrStr() string {
	if x != nil {
		return x.ErrStr
	}
	return ""
}

func (x *GetVitulPhoneNumbersResp) GetPhonenumbers() []string {
	if x != nil {
		return x.Phonenumbers
	}
	return nil
}

type GenVitulaPhoneNumbersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountryCode string `protobuf:"bytes,1,opt,name=CountryCode,proto3" json:"CountryCode,omitempty"` //國家嗎代號
}

func (x *GenVitulaPhoneNumbersReq) Reset() {
	*x = GenVitulaPhoneNumbersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenVitulaPhoneNumbersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenVitulaPhoneNumbersReq) ProtoMessage() {}

func (x *GenVitulaPhoneNumbersReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenVitulaPhoneNumbersReq.ProtoReflect.Descriptor instead.
func (*GenVitulaPhoneNumbersReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{231}
}

func (x *GenVitulaPhoneNumbersReq) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

type GenVitulaPhoneNumbersResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode int32  `protobuf:"varint,1,opt,name=errCode,proto3" json:"errCode,omitempty"`
	ErrStr  string `protobuf:"bytes,2,opt,name=errStr,proto3" json:"errStr,omitempty"` //錯誤i信息
}

func (x *GenVitulaPhoneNumbersResp) Reset() {
	*x = GenVitulaPhoneNumbersResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenVitulaPhoneNumbersResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenVitulaPhoneNumbersResp) ProtoMessage() {}

func (x *GenVitulaPhoneNumbersResp) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenVitulaPhoneNumbersResp.ProtoReflect.Descriptor instead.
func (*GenVitulaPhoneNumbersResp) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{232}
}

func (x *GenVitulaPhoneNumbersResp) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *GenVitulaPhoneNumbersResp) GetErrStr() string {
	if x != nil {
		return x.ErrStr
	}
	return ""
}

// 用户 vip 信息
type UserCdnVipInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State   int32 `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`     // vip 状态，0:未开通或已过期，1:支付中待确认， 2:已开通未过期
	Level   int32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`     // vip 等级
	BgnTime int32 `protobuf:"varint,3,opt,name=BgnTime,proto3" json:"BgnTime,omitempty"` // 开始时间
	EndTime int32 `protobuf:"varint,4,opt,name=EndTime,proto3" json:"EndTime,omitempty"` // 结束时间
	AutoPay bool  `protobuf:"varint,5,opt,name=AutoPay,proto3" json:"AutoPay,omitempty"` // 自动续费
}

func (x *UserCdnVipInfo) Reset() {
	*x = UserCdnVipInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCdnVipInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCdnVipInfo) ProtoMessage() {}

func (x *UserCdnVipInfo) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCdnVipInfo.ProtoReflect.Descriptor instead.
func (*UserCdnVipInfo) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{233}
}

func (x *UserCdnVipInfo) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *UserCdnVipInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *UserCdnVipInfo) GetBgnTime() int32 {
	if x != nil {
		return x.BgnTime
	}
	return 0
}

func (x *UserCdnVipInfo) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *UserCdnVipInfo) GetAutoPay() bool {
	if x != nil {
		return x.AutoPay
	}
	return false
}

// 用户 vip 支付信息
type UserCdnPayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayId int64 `protobuf:"varint,1,opt,name=PayId,proto3" json:"PayId,omitempty"` // 支付订单号
	// int32   UserId = 2; // 用户ID
	// int32   Month = 3;
	// int32   Price = 4;  // 支付单价
	// int32   state = 5;
	PayAmt  int32 `protobuf:"varint,2,opt,name=PayAmt,proto3" json:"PayAmt,omitempty"` // 支付金额
	BgnTime int32 `protobuf:"varint,3,opt,name=BgnTime,proto3" json:"BgnTime,omitempty"`
	EndTime int32 `protobuf:"varint,4,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
}

func (x *UserCdnPayInfo) Reset() {
	*x = UserCdnPayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCdnPayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCdnPayInfo) ProtoMessage() {}

func (x *UserCdnPayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCdnPayInfo.ProtoReflect.Descriptor instead.
func (*UserCdnPayInfo) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{234}
}

func (x *UserCdnPayInfo) GetPayId() int64 {
	if x != nil {
		return x.PayId
	}
	return 0
}

func (x *UserCdnPayInfo) GetPayAmt() int32 {
	if x != nil {
		return x.PayAmt
	}
	return 0
}

func (x *UserCdnPayInfo) GetBgnTime() int32 {
	if x != nil {
		return x.BgnTime
	}
	return 0
}

func (x *UserCdnPayInfo) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

// @ added by qingsong at 2021.03.03 for buy CDN VIP.
// rpc BuyCdnVip(BuyCdnVipReq) returns (BuyCdnVipRsp) {}
type BuyCdnVipReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户 ID
	VipLvl int32         `protobuf:"varint,2,opt,name=VipLvl,proto3" json:"VipLvl,omitempty"` // vip等级
	Months int32         `protobuf:"varint,3,opt,name=Months,proto3" json:"Months,omitempty"` // 购买月数
	Passwd string        `protobuf:"bytes,4,opt,name=Passwd,proto3" json:"Passwd,omitempty"`  // 支付密码
	Debugs *pbcomm.Debug `protobuf:"bytes,6,opt,name=Debugs,proto3" json:"Debugs,omitempty"`
}

func (x *BuyCdnVipReq) Reset() {
	*x = BuyCdnVipReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyCdnVipReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyCdnVipReq) ProtoMessage() {}

func (x *BuyCdnVipReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyCdnVipReq.ProtoReflect.Descriptor instead.
func (*BuyCdnVipReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{235}
}

func (x *BuyCdnVipReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *BuyCdnVipReq) GetVipLvl() int32 {
	if x != nil {
		return x.VipLvl
	}
	return 0
}

func (x *BuyCdnVipReq) GetMonths() int32 {
	if x != nil {
		return x.Months
	}
	return 0
}

func (x *BuyCdnVipReq) GetPasswd() string {
	if x != nil {
		return x.Passwd
	}
	return ""
}

func (x *BuyCdnVipReq) GetDebugs() *pbcomm.Debug {
	if x != nil {
		return x.Debugs
	}
	return nil
}

type BuyCdnVipRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetCode int32           `protobuf:"varint,1,opt,name=RetCode,proto3" json:"RetCode,omitempty"` // 返回代码
	Message string          `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`  // 返回信息
	VipInfo *UserCdnVipInfo `protobuf:"bytes,3,opt,name=VipInfo,proto3" json:"VipInfo,omitempty"`  // vip 信息
}

func (x *BuyCdnVipRsp) Reset() {
	*x = BuyCdnVipRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyCdnVipRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyCdnVipRsp) ProtoMessage() {}

func (x *BuyCdnVipRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyCdnVipRsp.ProtoReflect.Descriptor instead.
func (*BuyCdnVipRsp) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{236}
}

func (x *BuyCdnVipRsp) GetRetCode() int32 {
	if x != nil {
		return x.RetCode
	}
	return 0
}

func (x *BuyCdnVipRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BuyCdnVipRsp) GetVipInfo() *UserCdnVipInfo {
	if x != nil {
		return x.VipInfo
	}
	return nil
}

// @ added by qingsong at 2021.03.03 for set CDN VIP auto renew.
// rpc SetCdnVipAutoPay(SetCdnVipAutoPayReq) returns (SetCdnVipAutoPayRsp) {}
type SetCdnVipAutoPayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	IsOpen bool  `protobuf:"varint,2,opt,name=IsOpen,proto3" json:"IsOpen,omitempty"` // 是否开启
}

func (x *SetCdnVipAutoPayReq) Reset() {
	*x = SetCdnVipAutoPayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCdnVipAutoPayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCdnVipAutoPayReq) ProtoMessage() {}

func (x *SetCdnVipAutoPayReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCdnVipAutoPayReq.ProtoReflect.Descriptor instead.
func (*SetCdnVipAutoPayReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{237}
}

func (x *SetCdnVipAutoPayReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SetCdnVipAutoPayReq) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

type SetCdnVipAutoPayRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool            `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	VipInfo *UserCdnVipInfo `protobuf:"bytes,3,opt,name=VipInfo,proto3" json:"VipInfo,omitempty"`
}

func (x *SetCdnVipAutoPayRsp) Reset() {
	*x = SetCdnVipAutoPayRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCdnVipAutoPayRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCdnVipAutoPayRsp) ProtoMessage() {}

func (x *SetCdnVipAutoPayRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCdnVipAutoPayRsp.ProtoReflect.Descriptor instead.
func (*SetCdnVipAutoPayRsp) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{238}
}

func (x *SetCdnVipAutoPayRsp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SetCdnVipAutoPayRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SetCdnVipAutoPayRsp) GetVipInfo() *UserCdnVipInfo {
	if x != nil {
		return x.VipInfo
	}
	return nil
}

// @ added by qingsong at 2021.03.03 for get user cdn-vip pay list.
// rpc GetUserCdnPayList(GetUserCdnPayListReq) returns (GetUserCdnPayListRsp) {}
type GetUserCdnPayListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (x *GetUserCdnPayListReq) Reset() {
	*x = GetUserCdnPayListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCdnPayListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCdnPayListReq) ProtoMessage() {}

func (x *GetUserCdnPayListReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCdnPayListReq.ProtoReflect.Descriptor instead.
func (*GetUserCdnPayListReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{239}
}

func (x *GetUserCdnPayListReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetUserCdnPayListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetCode int32             `protobuf:"varint,1,opt,name=RetCode,proto3" json:"RetCode,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	VipInfo *UserCdnVipInfo   `protobuf:"bytes,3,opt,name=VipInfo,proto3" json:"VipInfo,omitempty"`
	PayList []*UserCdnPayInfo `protobuf:"bytes,4,rep,name=PayList,proto3" json:"PayList,omitempty"`
}

func (x *GetUserCdnPayListRsp) Reset() {
	*x = GetUserCdnPayListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCdnPayListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCdnPayListRsp) ProtoMessage() {}

func (x *GetUserCdnPayListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCdnPayListRsp.ProtoReflect.Descriptor instead.
func (*GetUserCdnPayListRsp) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{240}
}

func (x *GetUserCdnPayListRsp) GetRetCode() int32 {
	if x != nil {
		return x.RetCode
	}
	return 0
}

func (x *GetUserCdnPayListRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetUserCdnPayListRsp) GetVipInfo() *UserCdnVipInfo {
	if x != nil {
		return x.VipInfo
	}
	return nil
}

func (x *GetUserCdnPayListRsp) GetPayList() []*UserCdnPayInfo {
	if x != nil {
		return x.PayList
	}
	return nil
}

// @ added by qingsong at 2021.03.03 for get user cdn-vip info.
// rpc GetUserCdnVipInfo(GetUserCdnVipInfoReq) returns (GetUserCdnVipInfoRsp) {}
type GetUserCdnVipInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (x *GetUserCdnVipInfoReq) Reset() {
	*x = GetUserCdnVipInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCdnVipInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCdnVipInfoReq) ProtoMessage() {}

func (x *GetUserCdnVipInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCdnVipInfoReq.ProtoReflect.Descriptor instead.
func (*GetUserCdnVipInfoReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{241}
}

func (x *GetUserCdnVipInfoReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetUserCdnVipInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetCode int32           `protobuf:"varint,1,opt,name=RetCode,proto3" json:"RetCode,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	VipInfo *UserCdnVipInfo `protobuf:"bytes,3,opt,name=VipInfo,proto3" json:"VipInfo,omitempty"`
}

func (x *GetUserCdnVipInfoRsp) Reset() {
	*x = GetUserCdnVipInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCdnVipInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCdnVipInfoRsp) ProtoMessage() {}

func (x *GetUserCdnVipInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCdnVipInfoRsp.ProtoReflect.Descriptor instead.
func (*GetUserCdnVipInfoRsp) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{242}
}

func (x *GetUserCdnVipInfoRsp) GetRetCode() int32 {
	if x != nil {
		return x.RetCode
	}
	return 0
}

func (x *GetUserCdnVipInfoRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetUserCdnVipInfoRsp) GetVipInfo() *UserCdnVipInfo {
	if x != nil {
		return x.VipInfo
	}
	return nil
}

// 检查用户是否是 vip
type ChkCdnVipReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (x *ChkCdnVipReq) Reset() {
	*x = ChkCdnVipReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChkCdnVipReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChkCdnVipReq) ProtoMessage() {}

func (x *ChkCdnVipReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChkCdnVipReq.ProtoReflect.Descriptor instead.
func (*ChkCdnVipReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{243}
}

func (x *ChkCdnVipReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type ChkCdnVipRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsVip bool `protobuf:"varint,1,opt,name=IsVip,proto3" json:"IsVip,omitempty"`
}

func (x *ChkCdnVipRsp) Reset() {
	*x = ChkCdnVipRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChkCdnVipRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChkCdnVipRsp) ProtoMessage() {}

func (x *ChkCdnVipRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChkCdnVipRsp.ProtoReflect.Descriptor instead.
func (*ChkCdnVipRsp) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{244}
}

func (x *ChkCdnVipRsp) GetIsVip() bool {
	if x != nil {
		return x.IsVip
	}
	return false
}

type AddCdnVipReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	VipLvl int32 `protobuf:"varint,2,opt,name=VipLvl,proto3" json:"VipLvl,omitempty"`
	Months int32 `protobuf:"varint,3,opt,name=Months,proto3" json:"Months,omitempty"`
}

func (x *AddCdnVipReq) Reset() {
	*x = AddCdnVipReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCdnVipReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCdnVipReq) ProtoMessage() {}

func (x *AddCdnVipReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCdnVipReq.ProtoReflect.Descriptor instead.
func (*AddCdnVipReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{245}
}

func (x *AddCdnVipReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddCdnVipReq) GetVipLvl() int32 {
	if x != nil {
		return x.VipLvl
	}
	return 0
}

func (x *AddCdnVipReq) GetMonths() int32 {
	if x != nil {
		return x.Months
	}
	return 0
}

type AddCdnVipRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sucess  bool   `protobuf:"varint,1,opt,name=Sucess,proto3" json:"Sucess,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *AddCdnVipRsp) Reset() {
	*x = AddCdnVipRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCdnVipRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCdnVipRsp) ProtoMessage() {}

func (x *AddCdnVipRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCdnVipRsp.ProtoReflect.Descriptor instead.
func (*AddCdnVipRsp) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{246}
}

func (x *AddCdnVipRsp) GetSucess() bool {
	if x != nil {
		return x.Sucess
	}
	return false
}

func (x *AddCdnVipRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 检测是否是对方是否是自己的联系人
type CheckIsSelfContactReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId int32         `protobuf:"varint,1,opt,name=selfId,proto3" json:"selfId,omitempty"` //自己的Id
	UserId int32         `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"` //检测方的id
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *CheckIsSelfContactReq) Reset() {
	*x = CheckIsSelfContactReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckIsSelfContactReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIsSelfContactReq) ProtoMessage() {}

func (x *CheckIsSelfContactReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIsSelfContactReq.ProtoReflect.Descriptor instead.
func (*CheckIsSelfContactReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{247}
}

func (x *CheckIsSelfContactReq) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *CheckIsSelfContactReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CheckIsSelfContactReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 检测是否是自己是否是对方的联系人的返回结果
type CheckIsSelfContactResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSelfContact bool      `protobuf:"varint,1,opt,name=IsSelfContact,proto3" json:"IsSelfContact,omitempty"`                        //对方是否是自己的联系人
	Errorcode     ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *CheckIsSelfContactResult) Reset() {
	*x = CheckIsSelfContactResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckIsSelfContactResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIsSelfContactResult) ProtoMessage() {}

func (x *CheckIsSelfContactResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIsSelfContactResult.ProtoReflect.Descriptor instead.
func (*CheckIsSelfContactResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{248}
}

func (x *CheckIsSelfContactResult) GetIsSelfContact() bool {
	if x != nil {
		return x.IsSelfContact
	}
	return false
}

func (x *CheckIsSelfContactResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

type GetPhoneBookInfosReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId           int64               `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`       //端标识
	UserId          int32               `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`    //用户的ID
	PhoneContactArr []*PhoneBookContact `protobuf:"bytes,3,rep,name=phoneContactArr,proto3" json:"phoneContactArr,omitempty"` //联系人的电话号码的列表
}

func (x *GetPhoneBookInfosReq) Reset() {
	*x = GetPhoneBookInfosReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPhoneBookInfosReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPhoneBookInfosReq) ProtoMessage() {}

func (x *GetPhoneBookInfosReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPhoneBookInfosReq.ProtoReflect.Descriptor instead.
func (*GetPhoneBookInfosReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{249}
}

func (x *GetPhoneBookInfosReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *GetPhoneBookInfosReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetPhoneBookInfosReq) GetPhoneContactArr() []*PhoneBookContact {
	if x != nil {
		return x.PhoneContactArr
	}
	return nil
}

type GetPhoneBookInfosResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReCode GetPhoneBookInfosResult_ResultCode `protobuf:"varint,1,opt,name=reCode,proto3,enum=pbimuinfoserver.GetPhoneBookInfosResult_ResultCode" json:"reCode,omitempty"`
	Uinfo  []*UserInfo                        `protobuf:"bytes,2,rep,name=Uinfo,proto3" json:"Uinfo,omitempty"` ///用户的基本信息
}

func (x *GetPhoneBookInfosResult) Reset() {
	*x = GetPhoneBookInfosResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPhoneBookInfosResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPhoneBookInfosResult) ProtoMessage() {}

func (x *GetPhoneBookInfosResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPhoneBookInfosResult.ProtoReflect.Descriptor instead.
func (*GetPhoneBookInfosResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{250}
}

func (x *GetPhoneBookInfosResult) GetReCode() GetPhoneBookInfosResult_ResultCode {
	if x != nil {
		return x.ReCode
	}
	return GetPhoneBookInfosResult_Success
}

func (x *GetPhoneBookInfosResult) GetUinfo() []*UserInfo {
	if x != nil {
		return x.Uinfo
	}
	return nil
}

type AddLoginDayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *AddLoginDayReq) Reset() {
	*x = AddLoginDayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddLoginDayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLoginDayReq) ProtoMessage() {}

func (x *AddLoginDayReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLoginDayReq.ProtoReflect.Descriptor instead.
func (*AddLoginDayReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{251}
}

func (x *AddLoginDayReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type AddLoginDayResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode AddLoginDayResult_ResultCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.AddLoginDayResult_ResultCode" json:"ErrorCode,omitempty"` // 失败的错误码
	Result    bool                         `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`                                                         //
}

func (x *AddLoginDayResult) Reset() {
	*x = AddLoginDayResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddLoginDayResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLoginDayResult) ProtoMessage() {}

func (x *AddLoginDayResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLoginDayResult.ProtoReflect.Descriptor instead.
func (*AddLoginDayResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{252}
}

func (x *AddLoginDayResult) GetErrorCode() AddLoginDayResult_ResultCode {
	if x != nil {
		return x.ErrorCode
	}
	return AddLoginDayResult_Success
}

func (x *AddLoginDayResult) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type CheckDigitalWalletSwitchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *CheckDigitalWalletSwitchReq) Reset() {
	*x = CheckDigitalWalletSwitchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckDigitalWalletSwitchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckDigitalWalletSwitchReq) ProtoMessage() {}

func (x *CheckDigitalWalletSwitchReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckDigitalWalletSwitchReq.ProtoReflect.Descriptor instead.
func (*CheckDigitalWalletSwitchReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{253}
}

func (x *CheckDigitalWalletSwitchReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type CheckDigitalWalletSwitchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode CheckDigitalWalletSwitchResult_ResultCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.CheckDigitalWalletSwitchResult_ResultCode" json:"ErrorCode,omitempty"` // 失败的错误码
	Result    bool                                      `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`                                                                      //
}

func (x *CheckDigitalWalletSwitchResult) Reset() {
	*x = CheckDigitalWalletSwitchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckDigitalWalletSwitchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckDigitalWalletSwitchResult) ProtoMessage() {}

func (x *CheckDigitalWalletSwitchResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckDigitalWalletSwitchResult.ProtoReflect.Descriptor instead.
func (*CheckDigitalWalletSwitchResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{254}
}

func (x *CheckDigitalWalletSwitchResult) GetErrorCode() CheckDigitalWalletSwitchResult_ResultCode {
	if x != nil {
		return x.ErrorCode
	}
	return CheckDigitalWalletSwitchResult_Success
}

func (x *CheckDigitalWalletSwitchResult) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type RecvLockerAddUserIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *RecvLockerAddUserIdReq) Reset() {
	*x = RecvLockerAddUserIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecvLockerAddUserIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecvLockerAddUserIdReq) ProtoMessage() {}

func (x *RecvLockerAddUserIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecvLockerAddUserIdReq.ProtoReflect.Descriptor instead.
func (*RecvLockerAddUserIdReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{255}
}

func (x *RecvLockerAddUserIdReq) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type RecvLockerAddUserIdResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode RecvLockerAddUserIdResult_ResultCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.RecvLockerAddUserIdResult_ResultCode" json:"ErrorCode,omitempty"` // 失败的错误码
}

func (x *RecvLockerAddUserIdResult) Reset() {
	*x = RecvLockerAddUserIdResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecvLockerAddUserIdResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecvLockerAddUserIdResult) ProtoMessage() {}

func (x *RecvLockerAddUserIdResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecvLockerAddUserIdResult.ProtoReflect.Descriptor instead.
func (*RecvLockerAddUserIdResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{256}
}

func (x *RecvLockerAddUserIdResult) GetErrorCode() RecvLockerAddUserIdResult_ResultCode {
	if x != nil {
		return x.ErrorCode
	}
	return RecvLockerAddUserIdResult_Success
}

type RecvLockerDelUserIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *RecvLockerDelUserIdReq) Reset() {
	*x = RecvLockerDelUserIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecvLockerDelUserIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecvLockerDelUserIdReq) ProtoMessage() {}

func (x *RecvLockerDelUserIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecvLockerDelUserIdReq.ProtoReflect.Descriptor instead.
func (*RecvLockerDelUserIdReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{257}
}

func (x *RecvLockerDelUserIdReq) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type RecvLockerDelUserIdResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode RecvLockerDelUserIdResult_ResultCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.RecvLockerDelUserIdResult_ResultCode" json:"ErrorCode,omitempty"` // 失败的错误码
}

func (x *RecvLockerDelUserIdResult) Reset() {
	*x = RecvLockerDelUserIdResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecvLockerDelUserIdResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecvLockerDelUserIdResult) ProtoMessage() {}

func (x *RecvLockerDelUserIdResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecvLockerDelUserIdResult.ProtoReflect.Descriptor instead.
func (*RecvLockerDelUserIdResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{258}
}

func (x *RecvLockerDelUserIdResult) GetErrorCode() RecvLockerDelUserIdResult_ResultCode {
	if x != nil {
		return x.ErrorCode
	}
	return RecvLockerDelUserIdResult_Success
}

type RecvLockerGetUserIdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RecvLockerGetUserIdsReq) Reset() {
	*x = RecvLockerGetUserIdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecvLockerGetUserIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecvLockerGetUserIdsReq) ProtoMessage() {}

func (x *RecvLockerGetUserIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecvLockerGetUserIdsReq.ProtoReflect.Descriptor instead.
func (*RecvLockerGetUserIdsReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{259}
}

type RecvLockerGetUserIdsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode RecvLockerGetUserIdsResult_ResultCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.RecvLockerGetUserIdsResult_ResultCode" json:"ErrorCode,omitempty"` // 失败的错误码
	UserId    []uint32                              `protobuf:"varint,2,rep,packed,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                             //
}

func (x *RecvLockerGetUserIdsResult) Reset() {
	*x = RecvLockerGetUserIdsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecvLockerGetUserIdsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecvLockerGetUserIdsResult) ProtoMessage() {}

func (x *RecvLockerGetUserIdsResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecvLockerGetUserIdsResult.ProtoReflect.Descriptor instead.
func (*RecvLockerGetUserIdsResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{260}
}

func (x *RecvLockerGetUserIdsResult) GetErrorCode() RecvLockerGetUserIdsResult_ResultCode {
	if x != nil {
		return x.ErrorCode
	}
	return RecvLockerGetUserIdsResult_Success
}

func (x *RecvLockerGetUserIdsResult) GetUserId() []uint32 {
	if x != nil {
		return x.UserId
	}
	return nil
}

// 根据用户Id来获取用户信息selfId 代表自己的Id userId 代表需要获取的用户的Id
type CheckIsMuteContactReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId int32 `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	UserId int32 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *CheckIsMuteContactReq) Reset() {
	*x = CheckIsMuteContactReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckIsMuteContactReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIsMuteContactReq) ProtoMessage() {}

func (x *CheckIsMuteContactReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIsMuteContactReq.ProtoReflect.Descriptor instead.
func (*CheckIsMuteContactReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{261}
}

func (x *CheckIsMuteContactReq) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *CheckIsMuteContactReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type CheckIsMuteContactResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode CheckIsMuteContactResult_ResultCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.CheckIsMuteContactResult_ResultCode" json:"ErrorCode,omitempty"` // 失败的错误码
	Result    bool                                `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`                                                                //
}

func (x *CheckIsMuteContactResult) Reset() {
	*x = CheckIsMuteContactResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckIsMuteContactResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIsMuteContactResult) ProtoMessage() {}

func (x *CheckIsMuteContactResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIsMuteContactResult.ProtoReflect.Descriptor instead.
func (*CheckIsMuteContactResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{262}
}

func (x *CheckIsMuteContactResult) GetErrorCode() CheckIsMuteContactResult_ResultCode {
	if x != nil {
		return x.ErrorCode
	}
	return CheckIsMuteContactResult_Success
}

func (x *CheckIsMuteContactResult) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 设置退订
type SetUserUnsubscribeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Val    int32 `protobuf:"varint,2,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *SetUserUnsubscribeReq) Reset() {
	*x = SetUserUnsubscribeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserUnsubscribeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserUnsubscribeReq) ProtoMessage() {}

func (x *SetUserUnsubscribeReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserUnsubscribeReq.ProtoReflect.Descriptor instead.
func (*SetUserUnsubscribeReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{263}
}

func (x *SetUserUnsubscribeReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SetUserUnsubscribeReq) GetVal() int32 {
	if x != nil {
		return x.Val
	}
	return 0
}

type SetUserUnsubscribeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode SetUserUnsubscribeResult_ResultCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.SetUserUnsubscribeResult_ResultCode" json:"ErrorCode,omitempty"` // 失败的错误码
}

func (x *SetUserUnsubscribeResult) Reset() {
	*x = SetUserUnsubscribeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserUnsubscribeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserUnsubscribeResult) ProtoMessage() {}

func (x *SetUserUnsubscribeResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserUnsubscribeResult.ProtoReflect.Descriptor instead.
func (*SetUserUnsubscribeResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{264}
}

func (x *SetUserUnsubscribeResult) GetErrorCode() SetUserUnsubscribeResult_ResultCode {
	if x != nil {
		return x.ErrorCode
	}
	return SetUserUnsubscribeResult_Success
}

// 获取退订
type GetUserUnsubscribeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *GetUserUnsubscribeReq) Reset() {
	*x = GetUserUnsubscribeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserUnsubscribeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserUnsubscribeReq) ProtoMessage() {}

func (x *GetUserUnsubscribeReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserUnsubscribeReq.ProtoReflect.Descriptor instead.
func (*GetUserUnsubscribeReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{265}
}

func (x *GetUserUnsubscribeReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetUserUnsubscribeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode GetUserUnsubscribeResult_ResultCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.GetUserUnsubscribeResult_ResultCode" json:"ErrorCode,omitempty"` // 失败的错误码
	Val       int32                               `protobuf:"varint,2,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *GetUserUnsubscribeResult) Reset() {
	*x = GetUserUnsubscribeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserUnsubscribeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserUnsubscribeResult) ProtoMessage() {}

func (x *GetUserUnsubscribeResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserUnsubscribeResult.ProtoReflect.Descriptor instead.
func (*GetUserUnsubscribeResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{266}
}

func (x *GetUserUnsubscribeResult) GetErrorCode() GetUserUnsubscribeResult_ResultCode {
	if x != nil {
		return x.ErrorCode
	}
	return GetUserUnsubscribeResult_Success
}

func (x *GetUserUnsubscribeResult) GetVal() int32 {
	if x != nil {
		return x.Val
	}
	return 0
}

// 检查
type GetRelationUsersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户的ID
	Phone  string        `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`                  //电话
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetRelationUsersReq) Reset() {
	*x = GetRelationUsersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRelationUsersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRelationUsersReq) ProtoMessage() {}

func (x *GetRelationUsersReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRelationUsersReq.ProtoReflect.Descriptor instead.
func (*GetRelationUsersReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{267}
}

func (x *GetRelationUsersReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetRelationUsersReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *GetRelationUsersReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type GetRelationUsersResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode GetRelationUsersResult_ResultCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.GetRelationUsersResult_ResultCode" json:"ErrorCode,omitempty"` // 失败的错误码
	Infos     []*UserInfo                       `protobuf:"bytes,2,rep,name=infos,proto3" json:"infos,omitempty"`
}

func (x *GetRelationUsersResult) Reset() {
	*x = GetRelationUsersResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRelationUsersResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRelationUsersResult) ProtoMessage() {}

func (x *GetRelationUsersResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRelationUsersResult.ProtoReflect.Descriptor instead.
func (*GetRelationUsersResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{268}
}

func (x *GetRelationUsersResult) GetErrorCode() GetRelationUsersResult_ResultCode {
	if x != nil {
		return x.ErrorCode
	}
	return GetRelationUsersResult_Success
}

func (x *GetRelationUsersResult) GetInfos() []*UserInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetUserIpByAddrReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr     string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`                            //地址
	IsSignUp bool   `protobuf:"varint,2,opt,name=is_sign_up,json=isSignUp,proto3" json:"is_sign_up,omitempty"` //
}

func (x *GetUserIpByAddrReq) Reset() {
	*x = GetUserIpByAddrReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserIpByAddrReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserIpByAddrReq) ProtoMessage() {}

func (x *GetUserIpByAddrReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserIpByAddrReq.ProtoReflect.Descriptor instead.
func (*GetUserIpByAddrReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{269}
}

func (x *GetUserIpByAddrReq) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *GetUserIpByAddrReq) GetIsSignUp() bool {
	if x != nil {
		return x.IsSignUp
	}
	return false
}

type GetUserIpByAddrResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode GetUserIpByAddrResult_ResultCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.GetUserIpByAddrResult_ResultCode" json:"ErrorCode,omitempty"` // 失败的错误码
	UserId    []int32                          `protobuf:"varint,2,rep,packed,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                        //成功或者失败
}

func (x *GetUserIpByAddrResult) Reset() {
	*x = GetUserIpByAddrResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserIpByAddrResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserIpByAddrResult) ProtoMessage() {}

func (x *GetUserIpByAddrResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserIpByAddrResult.ProtoReflect.Descriptor instead.
func (*GetUserIpByAddrResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{270}
}

func (x *GetUserIpByAddrResult) GetErrorCode() GetUserIpByAddrResult_ResultCode {
	if x != nil {
		return x.ErrorCode
	}
	return GetUserIpByAddrResult_Success
}

func (x *GetUserIpByAddrResult) GetUserId() []int32 {
	if x != nil {
		return x.UserId
	}
	return nil
}

type UserIpAddr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	UserId     int32  `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	IpAddr     string `protobuf:"bytes,3,opt,name=IpAddr,proto3" json:"IpAddr,omitempty"`
	IpPort     int32  `protobuf:"varint,4,opt,name=IpPort,proto3" json:"IpPort,omitempty"`
	LastOnline int64  `protobuf:"varint,5,opt,name=LastOnline,proto3" json:"LastOnline,omitempty"`
	IsSignUp   bool   `protobuf:"varint,6,opt,name=IsSignUp,proto3" json:"IsSignUp,omitempty"`
}

func (x *UserIpAddr) Reset() {
	*x = UserIpAddr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIpAddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIpAddr) ProtoMessage() {}

func (x *UserIpAddr) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIpAddr.ProtoReflect.Descriptor instead.
func (*UserIpAddr) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{271}
}

func (x *UserIpAddr) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserIpAddr) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserIpAddr) GetIpAddr() string {
	if x != nil {
		return x.IpAddr
	}
	return ""
}

func (x *UserIpAddr) GetIpPort() int32 {
	if x != nil {
		return x.IpPort
	}
	return 0
}

func (x *UserIpAddr) GetLastOnline() int64 {
	if x != nil {
		return x.LastOnline
	}
	return 0
}

func (x *UserIpAddr) GetIsSignUp() bool {
	if x != nil {
		return x.IsSignUp
	}
	return false
}

type GetUserIpByUserIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`         //用户的ID
	IsSignUp bool  `protobuf:"varint,2,opt,name=is_sign_up,json=isSignUp,proto3" json:"is_sign_up,omitempty"` //
}

func (x *GetUserIpByUserIdReq) Reset() {
	*x = GetUserIpByUserIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserIpByUserIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserIpByUserIdReq) ProtoMessage() {}

func (x *GetUserIpByUserIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserIpByUserIdReq.ProtoReflect.Descriptor instead.
func (*GetUserIpByUserIdReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{272}
}

func (x *GetUserIpByUserIdReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetUserIpByUserIdReq) GetIsSignUp() bool {
	if x != nil {
		return x.IsSignUp
	}
	return false
}

type GetUserIpByUserIdResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode GetUserIpByUserIdResult_ResultCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.GetUserIpByUserIdResult_ResultCode" json:"ErrorCode,omitempty"` // 失败的错误码
	Addrs     []*UserIpAddr                      `protobuf:"bytes,2,rep,name=addrs,proto3" json:"addrs,omitempty"`
}

func (x *GetUserIpByUserIdResult) Reset() {
	*x = GetUserIpByUserIdResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserIpByUserIdResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserIpByUserIdResult) ProtoMessage() {}

func (x *GetUserIpByUserIdResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserIpByUserIdResult.ProtoReflect.Descriptor instead.
func (*GetUserIpByUserIdResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{273}
}

func (x *GetUserIpByUserIdResult) GetErrorCode() GetUserIpByUserIdResult_ResultCode {
	if x != nil {
		return x.ErrorCode
	}
	return GetUserIpByUserIdResult_Success
}

func (x *GetUserIpByUserIdResult) GetAddrs() []*UserIpAddr {
	if x != nil {
		return x.Addrs
	}
	return nil
}

type UserIpAddOrUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`         //用户的ID
	Addr     string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`                            //地址
	IsSignUp bool   `protobuf:"varint,3,opt,name=is_sign_up,json=isSignUp,proto3" json:"is_sign_up,omitempty"` //
}

func (x *UserIpAddOrUpdateReq) Reset() {
	*x = UserIpAddOrUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIpAddOrUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIpAddOrUpdateReq) ProtoMessage() {}

func (x *UserIpAddOrUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIpAddOrUpdateReq.ProtoReflect.Descriptor instead.
func (*UserIpAddOrUpdateReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{274}
}

func (x *UserIpAddOrUpdateReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserIpAddOrUpdateReq) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *UserIpAddOrUpdateReq) GetIsSignUp() bool {
	if x != nil {
		return x.IsSignUp
	}
	return false
}

type UserIpAddOrUpdateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode UserIpAddOrUpdateResult_ResultCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.UserIpAddOrUpdateResult_ResultCode" json:"ErrorCode,omitempty"` // 失败的错误码
}

func (x *UserIpAddOrUpdateResult) Reset() {
	*x = UserIpAddOrUpdateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIpAddOrUpdateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIpAddOrUpdateResult) ProtoMessage() {}

func (x *UserIpAddOrUpdateResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIpAddOrUpdateResult.ProtoReflect.Descriptor instead.
func (*UserIpAddOrUpdateResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{275}
}

func (x *UserIpAddOrUpdateResult) GetErrorCode() UserIpAddOrUpdateResult_ResultCode {
	if x != nil {
		return x.ErrorCode
	}
	return UserIpAddOrUpdateResult_Success
}

// 检查
type CheckUserSpaiclReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户的ID
	Type   int32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`                   //类型 1:普通 2:354
}

func (x *CheckUserSpaiclReq) Reset() {
	*x = CheckUserSpaiclReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserSpaiclReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserSpaiclReq) ProtoMessage() {}

func (x *CheckUserSpaiclReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserSpaiclReq.ProtoReflect.Descriptor instead.
func (*CheckUserSpaiclReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{276}
}

func (x *CheckUserSpaiclReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CheckUserSpaiclReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type CheckUserSpaiclResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode CheckUserSpaiclResult_ResultCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.CheckUserSpaiclResult_ResultCode" json:"ErrorCode,omitempty"` // 失败的错误码
	Result    bool                             `protobuf:"varint,2,opt,name=Result,proto3" json:"Result,omitempty"`                                                             //成功或者失败
}

func (x *CheckUserSpaiclResult) Reset() {
	*x = CheckUserSpaiclResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserSpaiclResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserSpaiclResult) ProtoMessage() {}

func (x *CheckUserSpaiclResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserSpaiclResult.ProtoReflect.Descriptor instead.
func (*CheckUserSpaiclResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{277}
}

func (x *CheckUserSpaiclResult) GetErrorCode() CheckUserSpaiclResult_ResultCode {
	if x != nil {
		return x.ErrorCode
	}
	return CheckUserSpaiclResult_Success
}

func (x *CheckUserSpaiclResult) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 增加
type InsertUSerSpaiclReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户的ID
	Type   int32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`                   //类型 1:普通 2:354
}

func (x *InsertUSerSpaiclReq) Reset() {
	*x = InsertUSerSpaiclReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertUSerSpaiclReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertUSerSpaiclReq) ProtoMessage() {}

func (x *InsertUSerSpaiclReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertUSerSpaiclReq.ProtoReflect.Descriptor instead.
func (*InsertUSerSpaiclReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{278}
}

func (x *InsertUSerSpaiclReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *InsertUSerSpaiclReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type InsertUSerSpaiclResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode InsertUSerSpaiclResult_ResultCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.InsertUSerSpaiclResult_ResultCode" json:"ErrorCode,omitempty"` // 失败的错误码
	Result    bool                              `protobuf:"varint,2,opt,name=Result,proto3" json:"Result,omitempty"`                                                              //成功或者失败
}

func (x *InsertUSerSpaiclResult) Reset() {
	*x = InsertUSerSpaiclResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertUSerSpaiclResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertUSerSpaiclResult) ProtoMessage() {}

func (x *InsertUSerSpaiclResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertUSerSpaiclResult.ProtoReflect.Descriptor instead.
func (*InsertUSerSpaiclResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{279}
}

func (x *InsertUSerSpaiclResult) GetErrorCode() InsertUSerSpaiclResult_ResultCode {
	if x != nil {
		return x.ErrorCode
	}
	return InsertUSerSpaiclResult_Success
}

func (x *InsertUSerSpaiclResult) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 删除
type DelUSerSpaiclReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户的ID
	Type   int32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`                   //类型 1:普通 2:354
}

func (x *DelUSerSpaiclReq) Reset() {
	*x = DelUSerSpaiclReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelUSerSpaiclReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelUSerSpaiclReq) ProtoMessage() {}

func (x *DelUSerSpaiclReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelUSerSpaiclReq.ProtoReflect.Descriptor instead.
func (*DelUSerSpaiclReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{280}
}

func (x *DelUSerSpaiclReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DelUSerSpaiclReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type DelUSerSpaiclResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode DelUSerSpaiclResult_ResultCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.DelUSerSpaiclResult_ResultCode" json:"ErrorCode,omitempty"` // 失败的错误码
	Result    bool                           `protobuf:"varint,2,opt,name=Result,proto3" json:"Result,omitempty"`                                                           //成功或者失败
}

func (x *DelUSerSpaiclResult) Reset() {
	*x = DelUSerSpaiclResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelUSerSpaiclResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelUSerSpaiclResult) ProtoMessage() {}

func (x *DelUSerSpaiclResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelUSerSpaiclResult.ProtoReflect.Descriptor instead.
func (*DelUSerSpaiclResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{281}
}

func (x *DelUSerSpaiclResult) GetErrorCode() DelUSerSpaiclResult_ResultCode {
	if x != nil {
		return x.ErrorCode
	}
	return DelUSerSpaiclResult_Success
}

func (x *DelUSerSpaiclResult) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 获取所有
type GetAllUSerSpaiclReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"` //类型 1:普通 2:354
}

func (x *GetAllUSerSpaiclReq) Reset() {
	*x = GetAllUSerSpaiclReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllUSerSpaiclReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllUSerSpaiclReq) ProtoMessage() {}

func (x *GetAllUSerSpaiclReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllUSerSpaiclReq.ProtoReflect.Descriptor instead.
func (*GetAllUSerSpaiclReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{282}
}

func (x *GetAllUSerSpaiclReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type GetAllUSerSpaiclResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode   GetAllUSerSpaiclResult_ResultCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.GetAllUSerSpaiclResult_ResultCode" json:"ErrorCode,omitempty"` // 失败的错误码
	TrueUserId  []int32                           `protobuf:"varint,2,rep,packed,name=true_user_id,json=trueUserId,proto3" json:"true_user_id,omitempty"`                           //成功或者失败
	FalseUserId []int32                           `protobuf:"varint,3,rep,packed,name=false_user_id,json=falseUserId,proto3" json:"false_user_id,omitempty"`                        //成功或者失败
}

func (x *GetAllUSerSpaiclResult) Reset() {
	*x = GetAllUSerSpaiclResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllUSerSpaiclResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllUSerSpaiclResult) ProtoMessage() {}

func (x *GetAllUSerSpaiclResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllUSerSpaiclResult.ProtoReflect.Descriptor instead.
func (*GetAllUSerSpaiclResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{283}
}

func (x *GetAllUSerSpaiclResult) GetErrorCode() GetAllUSerSpaiclResult_ResultCode {
	if x != nil {
		return x.ErrorCode
	}
	return GetAllUSerSpaiclResult_Success
}

func (x *GetAllUSerSpaiclResult) GetTrueUserId() []int32 {
	if x != nil {
		return x.TrueUserId
	}
	return nil
}

func (x *GetAllUSerSpaiclResult) GetFalseUserId() []int32 {
	if x != nil {
		return x.FalseUserId
	}
	return nil
}

// 更改电话号码的请求参数
type ChangePhoneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`                             //用户的ID
	KeyId         int64         `protobuf:"varint,2,opt,name=keyId,proto3" json:"keyId,omitempty"`                               //用户的keyId(端的标识)
	PhoneNumber   string        `protobuf:"bytes,3,opt,name=Phone_number,json=PhoneNumber,proto3" json:"Phone_number,omitempty"` //更改的新电话号码
	PhoneCodeHash string        `protobuf:"bytes,4,opt,name=PhoneCodeHash,proto3" json:"PhoneCodeHash,omitempty"`
	PhoneCode     string        `protobuf:"bytes,5,opt,name=PhoneCode,proto3" json:"PhoneCode,omitempty"` //验证码
	Debug         *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
	CountryCode   string        `protobuf:"bytes,7,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"` // 国家码
	LocalPhone    string        `protobuf:"bytes,8,opt,name=local_phone,json=localPhone,proto3" json:"local_phone,omitempty"`    // 不带国家码的电话号码
}

func (x *ChangePhoneReq) Reset() {
	*x = ChangePhoneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePhoneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePhoneReq) ProtoMessage() {}

func (x *ChangePhoneReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePhoneReq.ProtoReflect.Descriptor instead.
func (*ChangePhoneReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{284}
}

func (x *ChangePhoneReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ChangePhoneReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *ChangePhoneReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *ChangePhoneReq) GetPhoneCodeHash() string {
	if x != nil {
		return x.PhoneCodeHash
	}
	return ""
}

func (x *ChangePhoneReq) GetPhoneCode() string {
	if x != nil {
		return x.PhoneCode
	}
	return ""
}

func (x *ChangePhoneReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *ChangePhoneReq) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *ChangePhoneReq) GetLocalPhone() string {
	if x != nil {
		return x.LocalPhone
	}
	return ""
}

// 更改电话号码的返回
type ChangePhoneResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// userInfo userInfo = 1; //用户的具体信息
	ErrorCode ChangePhoneResult_ResultCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.ChangePhoneResult_ResultCode" json:"ErrorCode,omitempty"` // 失败的错误码
	Result    bool                         `protobuf:"varint,2,opt,name=Result,proto3" json:"Result,omitempty"`                                                         //成功或者失败
}

func (x *ChangePhoneResult) Reset() {
	*x = ChangePhoneResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePhoneResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePhoneResult) ProtoMessage() {}

func (x *ChangePhoneResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePhoneResult.ProtoReflect.Descriptor instead.
func (*ChangePhoneResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{285}
}

func (x *ChangePhoneResult) GetErrorCode() ChangePhoneResult_ResultCode {
	if x != nil {
		return x.ErrorCode
	}
	return ChangePhoneResult_Success
}

func (x *ChangePhoneResult) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 虚拟号信息
type VirtualPhoneNumberInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VirtualPhone     string `protobuf:"bytes,1,opt,name=virtual_phone,json=virtualPhone,proto3" json:"virtual_phone,omitempty"`               // 虚拟号
	RealPhone        string `protobuf:"bytes,2,opt,name=real_phone,json=realPhone,proto3" json:"real_phone,omitempty"`                        // 绑定的真实电话号码
	Activated        uint32 `protobuf:"varint,3,opt,name=activated,proto3" json:"activated,omitempty"`                                        // 是否为激活状态
	BindTime         int64  `protobuf:"varint,4,opt,name=bind_time,json=bindTime,proto3" json:"bind_time,omitempty"`                          // 绑定电话号码的时间 unix timestamp
	ActivateTime     int64  `protobuf:"varint,5,opt,name=activate_time,json=activateTime,proto3" json:"activate_time,omitempty"`              // 激活时间
	ActivateAdminId  int32  `protobuf:"varint,6,opt,name=activate_admin_id,json=activateAdminId,proto3" json:"activate_admin_id,omitempty"`   // 激活该虚拟号的管理员id
	BindAdminId      int32  `protobuf:"varint,7,opt,name=bind_admin_id,json=bindAdminId,proto3" json:"bind_admin_id,omitempty"`               // 为该虚拟号码绑定电话的管理员id
	OwnerId          int32  `protobuf:"varint,8,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`                             // user id of whom owns the phone
	InitialPhoneCode string `protobuf:"bytes,9,opt,name=initial_phone_code,json=initialPhoneCode,proto3" json:"initial_phone_code,omitempty"` // phone code for register if not bind yet
}

func (x *VirtualPhoneNumberInfo) Reset() {
	*x = VirtualPhoneNumberInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualPhoneNumberInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualPhoneNumberInfo) ProtoMessage() {}

func (x *VirtualPhoneNumberInfo) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualPhoneNumberInfo.ProtoReflect.Descriptor instead.
func (*VirtualPhoneNumberInfo) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{286}
}

func (x *VirtualPhoneNumberInfo) GetVirtualPhone() string {
	if x != nil {
		return x.VirtualPhone
	}
	return ""
}

func (x *VirtualPhoneNumberInfo) GetRealPhone() string {
	if x != nil {
		return x.RealPhone
	}
	return ""
}

func (x *VirtualPhoneNumberInfo) GetActivated() uint32 {
	if x != nil {
		return x.Activated
	}
	return 0
}

func (x *VirtualPhoneNumberInfo) GetBindTime() int64 {
	if x != nil {
		return x.BindTime
	}
	return 0
}

func (x *VirtualPhoneNumberInfo) GetActivateTime() int64 {
	if x != nil {
		return x.ActivateTime
	}
	return 0
}

func (x *VirtualPhoneNumberInfo) GetActivateAdminId() int32 {
	if x != nil {
		return x.ActivateAdminId
	}
	return 0
}

func (x *VirtualPhoneNumberInfo) GetBindAdminId() int32 {
	if x != nil {
		return x.BindAdminId
	}
	return 0
}

func (x *VirtualPhoneNumberInfo) GetOwnerId() int32 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *VirtualPhoneNumberInfo) GetInitialPhoneCode() string {
	if x != nil {
		return x.InitialPhoneCode
	}
	return ""
}

type UserExpansionFindReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID int32 `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *UserExpansionFindReq) Reset() {
	*x = UserExpansionFindReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserExpansionFindReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserExpansionFindReq) ProtoMessage() {}

func (x *UserExpansionFindReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserExpansionFindReq.ProtoReflect.Descriptor instead.
func (*UserExpansionFindReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{287}
}

func (x *UserExpansionFindReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type UserExpansionFindResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserExpansion *UserExpansion `protobuf:"bytes,1,opt,name=user_expansion,json=userExpansion,proto3" json:"user_expansion,omitempty"`
	Errorcode     ReErrCode      `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *UserExpansionFindResult) Reset() {
	*x = UserExpansionFindResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserExpansionFindResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserExpansionFindResult) ProtoMessage() {}

func (x *UserExpansionFindResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserExpansionFindResult.ProtoReflect.Descriptor instead.
func (*UserExpansionFindResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{288}
}

func (x *UserExpansionFindResult) GetUserExpansion() *UserExpansion {
	if x != nil {
		return x.UserExpansion
	}
	return nil
}

func (x *UserExpansionFindResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

type UserExpansion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  int32  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	Data    string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Version int32  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *UserExpansion) Reset() {
	*x = UserExpansion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserExpansion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserExpansion) ProtoMessage() {}

func (x *UserExpansion) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserExpansion.ProtoReflect.Descriptor instead.
func (*UserExpansion) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{289}
}

func (x *UserExpansion) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UserExpansion) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *UserExpansion) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type UserExpansionSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID        int32          `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	UserExpansion *UserExpansion `protobuf:"bytes,2,opt,name=user_expansion,json=userExpansion,proto3" json:"user_expansion,omitempty"`
}

func (x *UserExpansionSetReq) Reset() {
	*x = UserExpansionSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserExpansionSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserExpansionSetReq) ProtoMessage() {}

func (x *UserExpansionSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserExpansionSetReq.ProtoReflect.Descriptor instead.
func (*UserExpansionSetReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{290}
}

func (x *UserExpansionSetReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UserExpansionSetReq) GetUserExpansion() *UserExpansion {
	if x != nil {
		return x.UserExpansion
	}
	return nil
}

type UserExpansionSetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *UserExpansionSetResult) Reset() {
	*x = UserExpansionSetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserExpansionSetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserExpansionSetResult) ProtoMessage() {}

func (x *UserExpansionSetResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserExpansionSetResult.ProtoReflect.Descriptor instead.
func (*UserExpansionSetResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{291}
}

func (x *UserExpansionSetResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// UserInfoExtend add by xiaoming.
type UserInfoExtend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserType       int64  `protobuf:"varint,1,opt,name=user_type,json=userType,proto3" json:"user_type,omitempty"`
	UselableFid    string `protobuf:"bytes,2,opt,name=uselable_fid,json=uselableFid,proto3" json:"uselable_fid,omitempty"`
	UselableSize   int64  `protobuf:"varint,3,opt,name=uselable_size,json=uselableSize,proto3" json:"uselable_size,omitempty"`
	UselableWidth  int64  `protobuf:"varint,4,opt,name=uselable_width,json=uselableWidth,proto3" json:"uselable_width,omitempty"`
	UselableHeight int64  `protobuf:"varint,5,opt,name=uselable_height,json=uselableHeight,proto3" json:"uselable_height,omitempty"`
}

func (x *UserInfoExtend) Reset() {
	*x = UserInfoExtend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoExtend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoExtend) ProtoMessage() {}

func (x *UserInfoExtend) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoExtend.ProtoReflect.Descriptor instead.
func (*UserInfoExtend) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{292}
}

func (x *UserInfoExtend) GetUserType() int64 {
	if x != nil {
		return x.UserType
	}
	return 0
}

func (x *UserInfoExtend) GetUselableFid() string {
	if x != nil {
		return x.UselableFid
	}
	return ""
}

func (x *UserInfoExtend) GetUselableSize() int64 {
	if x != nil {
		return x.UselableSize
	}
	return 0
}

func (x *UserInfoExtend) GetUselableWidth() int64 {
	if x != nil {
		return x.UselableWidth
	}
	return 0
}

func (x *UserInfoExtend) GetUselableHeight() int64 {
	if x != nil {
		return x.UselableHeight
	}
	return 0
}

type GetUserInfoExtendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetUserInfoExtendReq) Reset() {
	*x = GetUserInfoExtendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoExtendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoExtendReq) ProtoMessage() {}

func (x *GetUserInfoExtendReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoExtendReq.ProtoReflect.Descriptor instead.
func (*GetUserInfoExtendReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{293}
}

type GetUserInfoExtendResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode      ReErrCode         `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
	Hash           int64             `protobuf:"varint,2,opt,name=hash,proto3" json:"hash,omitempty"`
	UserInfoExtend []*UserInfoExtend `protobuf:"bytes,3,rep,name=userInfoExtend,proto3" json:"userInfoExtend,omitempty"`
}

func (x *GetUserInfoExtendResult) Reset() {
	*x = GetUserInfoExtendResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoExtendResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoExtendResult) ProtoMessage() {}

func (x *GetUserInfoExtendResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoExtendResult.ProtoReflect.Descriptor instead.
func (*GetUserInfoExtendResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{294}
}

func (x *GetUserInfoExtendResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

func (x *GetUserInfoExtendResult) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *GetUserInfoExtendResult) GetUserInfoExtend() []*UserInfoExtend {
	if x != nil {
		return x.UserInfoExtend
	}
	return nil
}

type HistoryChangePhoneAddResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *HistoryChangePhoneAddResult) Reset() {
	*x = HistoryChangePhoneAddResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryChangePhoneAddResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryChangePhoneAddResult) ProtoMessage() {}

func (x *HistoryChangePhoneAddResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryChangePhoneAddResult.ProtoReflect.Descriptor instead.
func (*HistoryChangePhoneAddResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{295}
}

func (x *HistoryChangePhoneAddResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

type HistoryChangePhoneAddReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID     int32  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	FromNumber string `protobuf:"bytes,2,opt,name=fromNumber,proto3" json:"fromNumber,omitempty"`
	ToNumber   string `protobuf:"bytes,3,opt,name=toNumber,proto3" json:"toNumber,omitempty"`
	Addr       string `protobuf:"bytes,4,opt,name=addr,proto3" json:"addr,omitempty"`
	Port       int32  `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *HistoryChangePhoneAddReq) Reset() {
	*x = HistoryChangePhoneAddReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryChangePhoneAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryChangePhoneAddReq) ProtoMessage() {}

func (x *HistoryChangePhoneAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryChangePhoneAddReq.ProtoReflect.Descriptor instead.
func (*HistoryChangePhoneAddReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{296}
}

func (x *HistoryChangePhoneAddReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *HistoryChangePhoneAddReq) GetFromNumber() string {
	if x != nil {
		return x.FromNumber
	}
	return ""
}

func (x *HistoryChangePhoneAddReq) GetToNumber() string {
	if x != nil {
		return x.ToNumber
	}
	return ""
}

func (x *HistoryChangePhoneAddReq) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *HistoryChangePhoneAddReq) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type QueryUpdatesByUseridReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	KeyId     uint64 `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Timestamp int64  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *QueryUpdatesByUseridReq) Reset() {
	*x = QueryUpdatesByUseridReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryUpdatesByUseridReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUpdatesByUseridReq) ProtoMessage() {}

func (x *QueryUpdatesByUseridReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUpdatesByUseridReq.ProtoReflect.Descriptor instead.
func (*QueryUpdatesByUseridReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{297}
}

func (x *QueryUpdatesByUseridReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *QueryUpdatesByUseridReq) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *QueryUpdatesByUseridReq) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type QueryUpdatesByUseridResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JsonContent []byte `protobuf:"bytes,1,opt,name=jsonContent,proto3" json:"jsonContent,omitempty"`
}

func (x *QueryUpdatesByUseridResult) Reset() {
	*x = QueryUpdatesByUseridResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryUpdatesByUseridResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUpdatesByUseridResult) ProtoMessage() {}

func (x *QueryUpdatesByUseridResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUpdatesByUseridResult.ProtoReflect.Descriptor instead.
func (*QueryUpdatesByUseridResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{298}
}

func (x *QueryUpdatesByUseridResult) GetJsonContent() []byte {
	if x != nil {
		return x.JsonContent
	}
	return nil
}

type GetSwitchVersionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //查询用户ID
}

func (x *GetSwitchVersionReq) Reset() {
	*x = GetSwitchVersionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSwitchVersionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSwitchVersionReq) ProtoMessage() {}

func (x *GetSwitchVersionReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSwitchVersionReq.ProtoReflect.Descriptor instead.
func (*GetSwitchVersionReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{299}
}

func (x *GetSwitchVersionReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetSwitchVersionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version int64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"` //提示消息
}

func (x *GetSwitchVersionResult) Reset() {
	*x = GetSwitchVersionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSwitchVersionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSwitchVersionResult) ProtoMessage() {}

func (x *GetSwitchVersionResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSwitchVersionResult.ProtoReflect.Descriptor instead.
func (*GetSwitchVersionResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{300}
}

func (x *GetSwitchVersionResult) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

// 获取用户信息、群、超级群信息的请求
type UGetUsersChatsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid        int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`                                    // 获取方id
	Users         []int32       `protobuf:"varint,2,rep,packed,name=users,proto3" json:"users,omitempty"`                               // 获取用户信息的用户id数组
	Chatid        []int32       `protobuf:"varint,3,rep,packed,name=chatid,proto3" json:"chatid,omitempty"`                             //获取普通群信息的群id数组
	Channelid     []int32       `protobuf:"varint,4,rep,packed,name=channelid,proto3" json:"channelid,omitempty"`                       // 获取超级群用户信息的超级群id数组
	ProtocolLayer int32         `protobuf:"varint,5,opt,name=protocol_layer,json=protocolLayer,proto3" json:"protocol_layer,omitempty"` // 协议层数
	Dlog          *pbcomm.Debug `protobuf:"bytes,6,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                                         //日志
}

func (x *UGetUsersChatsReq) Reset() {
	*x = UGetUsersChatsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[301]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UGetUsersChatsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UGetUsersChatsReq) ProtoMessage() {}

func (x *UGetUsersChatsReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[301]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UGetUsersChatsReq.ProtoReflect.Descriptor instead.
func (*UGetUsersChatsReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{301}
}

func (x *UGetUsersChatsReq) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *UGetUsersChatsReq) GetUsers() []int32 {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *UGetUsersChatsReq) GetChatid() []int32 {
	if x != nil {
		return x.Chatid
	}
	return nil
}

func (x *UGetUsersChatsReq) GetChannelid() []int32 {
	if x != nil {
		return x.Channelid
	}
	return nil
}

func (x *UGetUsersChatsReq) GetProtocolLayer() int32 {
	if x != nil {
		return x.ProtocolLayer
	}
	return 0
}

func (x *UGetUsersChatsReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 获取用户信息、群、超级群信息的返回
type UGetUsersChatsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repeated ChannelInfoBase channels = 1;
	// repeated GetChatInfoResp chats = 3;
	Channels   [][]byte        `protobuf:"bytes,1,rep,name=channels,proto3" json:"channels,omitempty"`
	Users      *UserInfoArray  `protobuf:"bytes,2,opt,name=users,proto3" json:"users,omitempty"`
	Chats      [][]byte        `protobuf:"bytes,3,rep,name=chats,proto3" json:"chats,omitempty"`
	NoChats    []int32         `protobuf:"varint,4,rep,packed,name=no_chats,json=noChats,proto3" json:"no_chats,omitempty"`
	NoChans    []int32         `protobuf:"varint,5,rep,packed,name=no_chans,json=noChans,proto3" json:"no_chans,omitempty"`
	Resultcode UChatResultCode `protobuf:"varint,6,opt,name=resultcode,proto3,enum=pbimuinfoserver.UChatResultCode" json:"resultcode,omitempty"` //结果码
}

func (x *UGetUsersChatsResult) Reset() {
	*x = UGetUsersChatsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[302]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UGetUsersChatsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UGetUsersChatsResult) ProtoMessage() {}

func (x *UGetUsersChatsResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[302]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UGetUsersChatsResult.ProtoReflect.Descriptor instead.
func (*UGetUsersChatsResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{302}
}

func (x *UGetUsersChatsResult) GetChannels() [][]byte {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *UGetUsersChatsResult) GetUsers() *UserInfoArray {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *UGetUsersChatsResult) GetChats() [][]byte {
	if x != nil {
		return x.Chats
	}
	return nil
}

func (x *UGetUsersChatsResult) GetNoChats() []int32 {
	if x != nil {
		return x.NoChats
	}
	return nil
}

func (x *UGetUsersChatsResult) GetNoChans() []int32 {
	if x != nil {
		return x.NoChans
	}
	return nil
}

func (x *UGetUsersChatsResult) GetResultcode() UChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return UChatResultCode_Chat_RPC_OK
}

type UpdateBotInfoSuppReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Placeholder string        `protobuf:"bytes,2,opt,name=Placeholder,proto3" json:"Placeholder,omitempty"`
	Geo         bool          `protobuf:"varint,3,opt,name=geo,proto3" json:"geo,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UpdateBotInfoSuppReq) Reset() {
	*x = UpdateBotInfoSuppReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[303]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBotInfoSuppReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBotInfoSuppReq) ProtoMessage() {}

func (x *UpdateBotInfoSuppReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[303]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBotInfoSuppReq.ProtoReflect.Descriptor instead.
func (*UpdateBotInfoSuppReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{303}
}

func (x *UpdateBotInfoSuppReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateBotInfoSuppReq) GetPlaceholder() string {
	if x != nil {
		return x.Placeholder
	}
	return ""
}

func (x *UpdateBotInfoSuppReq) GetGeo() bool {
	if x != nil {
		return x.Geo
	}
	return false
}

func (x *UpdateBotInfoSuppReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type UpdateBotInfoSuppResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (x *UpdateBotInfoSuppResult) Reset() {
	*x = UpdateBotInfoSuppResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[304]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBotInfoSuppResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBotInfoSuppResult) ProtoMessage() {}

func (x *UpdateBotInfoSuppResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[304]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBotInfoSuppResult.ProtoReflect.Descriptor instead.
func (*UpdateBotInfoSuppResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{304}
}

func (x *UpdateBotInfoSuppResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

type DeleteUserUsernameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminId     int32         `protobuf:"varint,1,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"` // 调用者id
	Username    string        `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	ForceDelete bool          `protobuf:"varint,3,opt,name=force_delete,json=forceDelete,proto3" json:"force_delete,omitempty"` // 强制删除
	Debug       *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *DeleteUserUsernameReq) Reset() {
	*x = DeleteUserUsernameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[305]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserUsernameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserUsernameReq) ProtoMessage() {}

func (x *DeleteUserUsernameReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[305]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserUsernameReq.ProtoReflect.Descriptor instead.
func (*DeleteUserUsernameReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{305}
}

func (x *DeleteUserUsernameReq) GetAdminId() int32 {
	if x != nil {
		return x.AdminId
	}
	return 0
}

func (x *DeleteUserUsernameReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *DeleteUserUsernameReq) GetForceDelete() bool {
	if x != nil {
		return x.ForceDelete
	}
	return false
}

func (x *DeleteUserUsernameReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type DeleteUserUsernameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code                 DeleteUserUsernameResult_Code `protobuf:"varint,1,opt,name=code,proto3,enum=pbimuinfoserver.DeleteUserUsernameResult_Code" json:"code,omitempty"`
	InternalErrorMessage string                        `protobuf:"bytes,2,opt,name=internal_error_message,json=internalErrorMessage,proto3" json:"internal_error_message,omitempty"` // 发生内部错误时的错误信息
	OwnerId              int32                         `protobuf:"varint,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`                                         // 用户名拥有者id
}

func (x *DeleteUserUsernameResult) Reset() {
	*x = DeleteUserUsernameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[306]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserUsernameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserUsernameResult) ProtoMessage() {}

func (x *DeleteUserUsernameResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[306]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserUsernameResult.ProtoReflect.Descriptor instead.
func (*DeleteUserUsernameResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{306}
}

func (x *DeleteUserUsernameResult) GetCode() DeleteUserUsernameResult_Code {
	if x != nil {
		return x.Code
	}
	return DeleteUserUsernameResult_Success
}

func (x *DeleteUserUsernameResult) GetInternalErrorMessage() string {
	if x != nil {
		return x.InternalErrorMessage
	}
	return ""
}

func (x *DeleteUserUsernameResult) GetOwnerId() int32 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

type UpdateUserLocationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Country string        `protobuf:"bytes,2,opt,name=Country,proto3" json:"Country,omitempty"`
	City    string        `protobuf:"bytes,3,opt,name=City,proto3" json:"City,omitempty"`
	Detail  string        `protobuf:"bytes,4,opt,name=Detail,proto3" json:"Detail,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UpdateUserLocationReq) Reset() {
	*x = UpdateUserLocationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[307]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserLocationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserLocationReq) ProtoMessage() {}

func (x *UpdateUserLocationReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[307]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserLocationReq.ProtoReflect.Descriptor instead.
func (*UpdateUserLocationReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{307}
}

func (x *UpdateUserLocationReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserLocationReq) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *UpdateUserLocationReq) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *UpdateUserLocationReq) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *UpdateUserLocationReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type UpdateUserLocationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=Reason,proto3" json:"Reason,omitempty"`
}

func (x *UpdateUserLocationResult) Reset() {
	*x = UpdateUserLocationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[308]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserLocationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserLocationResult) ProtoMessage() {}

func (x *UpdateUserLocationResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[308]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserLocationResult.ProtoReflect.Descriptor instead.
func (*UpdateUserLocationResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{308}
}

func (x *UpdateUserLocationResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateUserLocationResult) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type UpdateUserGrenderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Grender int32         `protobuf:"varint,2,opt,name=Grender,proto3" json:"Grender,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UpdateUserGrenderReq) Reset() {
	*x = UpdateUserGrenderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[309]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserGrenderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserGrenderReq) ProtoMessage() {}

func (x *UpdateUserGrenderReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[309]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserGrenderReq.ProtoReflect.Descriptor instead.
func (*UpdateUserGrenderReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{309}
}

func (x *UpdateUserGrenderReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserGrenderReq) GetGrender() int32 {
	if x != nil {
		return x.Grender
	}
	return 0
}

func (x *UpdateUserGrenderReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type UpdateUserGrenderResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=Reason,proto3" json:"Reason,omitempty"`
}

func (x *UpdateUserGrenderResult) Reset() {
	*x = UpdateUserGrenderResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[310]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserGrenderResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserGrenderResult) ProtoMessage() {}

func (x *UpdateUserGrenderResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[310]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserGrenderResult.ProtoReflect.Descriptor instead.
func (*UpdateUserGrenderResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{310}
}

func (x *UpdateUserGrenderResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateUserGrenderResult) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type UpdateUserEmailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Email  string        `protobuf:"bytes,2,opt,name=Email,proto3" json:"Email,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UpdateUserEmailReq) Reset() {
	*x = UpdateUserEmailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[311]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserEmailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserEmailReq) ProtoMessage() {}

func (x *UpdateUserEmailReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[311]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserEmailReq.ProtoReflect.Descriptor instead.
func (*UpdateUserEmailReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{311}
}

func (x *UpdateUserEmailReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserEmailReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UpdateUserEmailReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type UpdateUserEmailResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=Reason,proto3" json:"Reason,omitempty"`
}

func (x *UpdateUserEmailResult) Reset() {
	*x = UpdateUserEmailResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[312]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserEmailResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserEmailResult) ProtoMessage() {}

func (x *UpdateUserEmailResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[312]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserEmailResult.ProtoReflect.Descriptor instead.
func (*UpdateUserEmailResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{312}
}

func (x *UpdateUserEmailResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateUserEmailResult) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type UploadContactsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId           int64               `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`       //端标识
	UserId          int32               `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`    //用户的ID
	PhoneContactArr []*PhoneBookContact `protobuf:"bytes,3,rep,name=phoneContactArr,proto3" json:"phoneContactArr,omitempty"` //联系人的电话号码的列表
}

func (x *UploadContactsReq) Reset() {
	*x = UploadContactsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[313]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadContactsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadContactsReq) ProtoMessage() {}

func (x *UploadContactsReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[313]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadContactsReq.ProtoReflect.Descriptor instead.
func (*UploadContactsReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{313}
}

func (x *UploadContactsReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *UploadContactsReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UploadContactsReq) GetPhoneContactArr() []*PhoneBookContact {
	if x != nil {
		return x.PhoneContactArr
	}
	return nil
}

type UploadContactsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`    //是否上传失败
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` //提示消息
}

func (x *UploadContactsResult) Reset() {
	*x = UploadContactsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[314]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadContactsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadContactsResult) ProtoMessage() {}

func (x *UploadContactsResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[314]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadContactsResult.ProtoReflect.Descriptor instead.
func (*UploadContactsResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{314}
}

func (x *UploadContactsResult) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *UploadContactsResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ApplyContactReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  //被添加人user_id
	ApplyUserId int32         `protobuf:"varint,2,opt,name=apply_user_id,json=applyUserId,proto3" json:"apply_user_id,omitempty"` //添加发起者user_id
	WithMessage string        `protobuf:"bytes,3,opt,name=with_message,json=withMessage,proto3" json:"with_message,omitempty"`    //附带消息
	FromType    int32         `protobuf:"varint,4,opt,name=from_type,json=fromType,proto3" json:"from_type,omitempty"`
	GroupId     int32         `protobuf:"varint,5,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	FirstName   string        `protobuf:"bytes,6,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName    string        `protobuf:"bytes,7,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,8,opt,name=debug,proto3" json:"debug,omitempty"` //日志记录相关的
	AccessHash  int64         `protobuf:"varint,9,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
}

func (x *ApplyContactReq) Reset() {
	*x = ApplyContactReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[315]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyContactReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyContactReq) ProtoMessage() {}

func (x *ApplyContactReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[315]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyContactReq.ProtoReflect.Descriptor instead.
func (*ApplyContactReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{315}
}

func (x *ApplyContactReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ApplyContactReq) GetApplyUserId() int32 {
	if x != nil {
		return x.ApplyUserId
	}
	return 0
}

func (x *ApplyContactReq) GetWithMessage() string {
	if x != nil {
		return x.WithMessage
	}
	return ""
}

func (x *ApplyContactReq) GetFromType() int32 {
	if x != nil {
		return x.FromType
	}
	return 0
}

func (x *ApplyContactReq) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ApplyContactReq) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *ApplyContactReq) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *ApplyContactReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *ApplyContactReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

type ApplyContactResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromApplyId   int32     `protobuf:"varint,1,opt,name=from_apply_id,json=fromApplyId,proto3" json:"from_apply_id,omitempty"`
	FromReplyId   int32     `protobuf:"varint,2,opt,name=from_reply_id,json=fromReplyId,proto3" json:"from_reply_id,omitempty"`
	ToApplyId     int32     `protobuf:"varint,3,opt,name=to_apply_id,json=toApplyId,proto3" json:"to_apply_id,omitempty"`
	ToReplyId     int32     `protobuf:"varint,4,opt,name=to_reply_id,json=toReplyId,proto3" json:"to_reply_id,omitempty"`
	Date          int32     `protobuf:"varint,5,opt,name=date,proto3" json:"date,omitempty"`
	ToUnreadCount int32     `protobuf:"varint,6,opt,name=to_unread_count,json=toUnreadCount,proto3" json:"to_unread_count,omitempty"`
	AddContact    bool      `protobuf:"varint,7,opt,name=add_contact,json=addContact,proto3" json:"add_contact,omitempty"`
	Errorcode     ReErrCode `protobuf:"varint,8,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (x *ApplyContactResult) Reset() {
	*x = ApplyContactResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[316]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyContactResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyContactResult) ProtoMessage() {}

func (x *ApplyContactResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[316]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyContactResult.ProtoReflect.Descriptor instead.
func (*ApplyContactResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{316}
}

func (x *ApplyContactResult) GetFromApplyId() int32 {
	if x != nil {
		return x.FromApplyId
	}
	return 0
}

func (x *ApplyContactResult) GetFromReplyId() int32 {
	if x != nil {
		return x.FromReplyId
	}
	return 0
}

func (x *ApplyContactResult) GetToApplyId() int32 {
	if x != nil {
		return x.ToApplyId
	}
	return 0
}

func (x *ApplyContactResult) GetToReplyId() int32 {
	if x != nil {
		return x.ToReplyId
	}
	return 0
}

func (x *ApplyContactResult) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ApplyContactResult) GetToUnreadCount() int32 {
	if x != nil {
		return x.ToUnreadCount
	}
	return 0
}

func (x *ApplyContactResult) GetAddContact() bool {
	if x != nil {
		return x.AddContact
	}
	return false
}

func (x *ApplyContactResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

type ContactsGreetApplyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ApplyId int32         `protobuf:"varint,2,opt,name=apply_id,json=applyId,proto3" json:"apply_id,omitempty"`
	Greet   string        `protobuf:"bytes,3,opt,name=greet,proto3" json:"greet,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"` //日志记录相关的
}

func (x *ContactsGreetApplyReq) Reset() {
	*x = ContactsGreetApplyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[317]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactsGreetApplyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactsGreetApplyReq) ProtoMessage() {}

func (x *ContactsGreetApplyReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[317]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactsGreetApplyReq.ProtoReflect.Descriptor instead.
func (*ContactsGreetApplyReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{317}
}

func (x *ContactsGreetApplyReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ContactsGreetApplyReq) GetApplyId() int32 {
	if x != nil {
		return x.ApplyId
	}
	return 0
}

func (x *ContactsGreetApplyReq) GetGreet() string {
	if x != nil {
		return x.Greet
	}
	return ""
}

func (x *ContactsGreetApplyReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ContactsGreetApplyResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromApplyId int32     `protobuf:"varint,1,opt,name=from_apply_id,json=fromApplyId,proto3" json:"from_apply_id,omitempty"`
	FromReplyId int32     `protobuf:"varint,2,opt,name=from_reply_id,json=fromReplyId,proto3" json:"from_reply_id,omitempty"`
	ToApplyId   int32     `protobuf:"varint,3,opt,name=to_apply_id,json=toApplyId,proto3" json:"to_apply_id,omitempty"`
	ToReplyId   int32     `protobuf:"varint,4,opt,name=to_reply_id,json=toReplyId,proto3" json:"to_reply_id,omitempty"`
	UserId      int32     `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UnreadCount int32     `protobuf:"varint,6,opt,name=unread_count,json=unreadCount,proto3" json:"unread_count,omitempty"`
	Errorcode   ReErrCode `protobuf:"varint,7,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (x *ContactsGreetApplyResult) Reset() {
	*x = ContactsGreetApplyResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[318]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactsGreetApplyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactsGreetApplyResult) ProtoMessage() {}

func (x *ContactsGreetApplyResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[318]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactsGreetApplyResult.ProtoReflect.Descriptor instead.
func (*ContactsGreetApplyResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{318}
}

func (x *ContactsGreetApplyResult) GetFromApplyId() int32 {
	if x != nil {
		return x.FromApplyId
	}
	return 0
}

func (x *ContactsGreetApplyResult) GetFromReplyId() int32 {
	if x != nil {
		return x.FromReplyId
	}
	return 0
}

func (x *ContactsGreetApplyResult) GetToApplyId() int32 {
	if x != nil {
		return x.ToApplyId
	}
	return 0
}

func (x *ContactsGreetApplyResult) GetToReplyId() int32 {
	if x != nil {
		return x.ToReplyId
	}
	return 0
}

func (x *ContactsGreetApplyResult) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ContactsGreetApplyResult) GetUnreadCount() int32 {
	if x != nil {
		return x.UnreadCount
	}
	return 0
}

func (x *ContactsGreetApplyResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

type GetAppliedContactsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //查询用户ID
}

func (x *GetAppliedContactsReq) Reset() {
	*x = GetAppliedContactsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[319]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppliedContactsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppliedContactsReq) ProtoMessage() {}

func (x *GetAppliedContactsReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[319]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppliedContactsReq.ProtoReflect.Descriptor instead.
func (*GetAppliedContactsReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{319}
}

func (x *GetAppliedContactsReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetAppliedContactsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      bool       `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Message    string     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                         //提示消息
	AppliedArr []*Applied `protobuf:"bytes,3,rep,name=applied_arr,json=appliedArr,proto3" json:"applied_arr,omitempty"` //数据
}

func (x *GetAppliedContactsResult) Reset() {
	*x = GetAppliedContactsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[320]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppliedContactsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppliedContactsResult) ProtoMessage() {}

func (x *GetAppliedContactsResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[320]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppliedContactsResult.ProtoReflect.Descriptor instead.
func (*GetAppliedContactsResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{320}
}

func (x *GetAppliedContactsResult) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *GetAppliedContactsResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetAppliedContactsResult) GetAppliedArr() []*Applied {
	if x != nil {
		return x.AppliedArr
	}
	return nil
}

type Applied struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId      int32     `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`               //被添加者用户ID
	ApplyUser   *UserInfo `protobuf:"bytes,3,opt,name=apply_user,json=applyUser,proto3" json:"apply_user,omitempty"`       //发起申请用户
	WithMessage string    `protobuf:"bytes,4,opt,name=with_message,json=withMessage,proto3" json:"with_message,omitempty"` //附加消息
	Status      int32     `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                             //状态消息 0-申请;1-同意;2-不同意;3-忽略
	Flag        int32     `protobuf:"varint,6,opt,name=flag,proto3" json:"flag,omitempty"`                                 //标识 0-未读;1-已读
	Gender      int32     `protobuf:"varint,7,opt,name=gender,proto3" json:"gender,omitempty"`                             //性别
	Email       string    `protobuf:"bytes,8,opt,name=email,proto3" json:"email,omitempty"`                                //邮箱
	Country     string    `protobuf:"bytes,9,opt,name=Country,proto3" json:"Country,omitempty"`                            //国家
	City        string    `protobuf:"bytes,10,opt,name=City,proto3" json:"City,omitempty"`                                 //城市
	Detail      string    `protobuf:"bytes,11,opt,name=Detail,proto3" json:"Detail,omitempty"`                             //详情
}

func (x *Applied) Reset() {
	*x = Applied{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[321]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Applied) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Applied) ProtoMessage() {}

func (x *Applied) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[321]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Applied.ProtoReflect.Descriptor instead.
func (*Applied) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{321}
}

func (x *Applied) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Applied) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Applied) GetApplyUser() *UserInfo {
	if x != nil {
		return x.ApplyUser
	}
	return nil
}

func (x *Applied) GetWithMessage() string {
	if x != nil {
		return x.WithMessage
	}
	return ""
}

func (x *Applied) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Applied) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *Applied) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *Applied) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Applied) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Applied) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Applied) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

type VerifyContactReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                           //申请好友唯一ID
	VerifyUserId int32 `protobuf:"varint,3,opt,name=verify_user_id,json=verifyUserId,proto3" json:"verify_user_id,omitempty"` //确认者user_id
	Status       int32 `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`                                   //状态消息
}

func (x *VerifyContactReq) Reset() {
	*x = VerifyContactReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[322]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyContactReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyContactReq) ProtoMessage() {}

func (x *VerifyContactReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[322]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyContactReq.ProtoReflect.Descriptor instead.
func (*VerifyContactReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{322}
}

func (x *VerifyContactReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VerifyContactReq) GetVerifyUserId() int32 {
	if x != nil {
		return x.VerifyUserId
	}
	return 0
}

func (x *VerifyContactReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type VerifyContactResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` //提示消息
}

func (x *VerifyContactResult) Reset() {
	*x = VerifyContactResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[323]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyContactResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyContactResult) ProtoMessage() {}

func (x *VerifyContactResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[323]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyContactResult.ProtoReflect.Descriptor instead.
func (*VerifyContactResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{323}
}

func (x *VerifyContactResult) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *VerifyContactResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteAppliedHistoryContactReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxId  int32         `protobuf:"varint,1,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	UserId int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"` //日志记录相关的
}

func (x *DeleteAppliedHistoryContactReq) Reset() {
	*x = DeleteAppliedHistoryContactReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[324]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAppliedHistoryContactReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAppliedHistoryContactReq) ProtoMessage() {}

func (x *DeleteAppliedHistoryContactReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[324]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAppliedHistoryContactReq.ProtoReflect.Descriptor instead.
func (*DeleteAppliedHistoryContactReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{324}
}

func (x *DeleteAppliedHistoryContactReq) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *DeleteAppliedHistoryContactReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DeleteAppliedHistoryContactReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type DeleteAppliedHistoryContactResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (x *DeleteAppliedHistoryContactResult) Reset() {
	*x = DeleteAppliedHistoryContactResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[325]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAppliedHistoryContactResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAppliedHistoryContactResult) ProtoMessage() {}

func (x *DeleteAppliedHistoryContactResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[325]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAppliedHistoryContactResult.ProtoReflect.Descriptor instead.
func (*DeleteAppliedHistoryContactResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{325}
}

func (x *DeleteAppliedHistoryContactResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

type DeleteAppliedSomeContactReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     []int32       `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"`
	UserId int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"` //日志记录相关的
}

func (x *DeleteAppliedSomeContactReq) Reset() {
	*x = DeleteAppliedSomeContactReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[326]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAppliedSomeContactReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAppliedSomeContactReq) ProtoMessage() {}

func (x *DeleteAppliedSomeContactReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[326]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAppliedSomeContactReq.ProtoReflect.Descriptor instead.
func (*DeleteAppliedSomeContactReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{326}
}

func (x *DeleteAppliedSomeContactReq) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeleteAppliedSomeContactReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DeleteAppliedSomeContactReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type DeleteAppliedSomeContactResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (x *DeleteAppliedSomeContactResult) Reset() {
	*x = DeleteAppliedSomeContactResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[327]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAppliedSomeContactResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAppliedSomeContactResult) ProtoMessage() {}

func (x *DeleteAppliedSomeContactResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[327]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAppliedSomeContactResult.ProtoReflect.Descriptor instead.
func (*DeleteAppliedSomeContactResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{327}
}

func (x *DeleteAppliedSomeContactResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

type ReadAppliedHistoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"` //日志记录相关的
}

func (x *ReadAppliedHistoryReq) Reset() {
	*x = ReadAppliedHistoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[328]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadAppliedHistoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadAppliedHistoryReq) ProtoMessage() {}

func (x *ReadAppliedHistoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[328]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadAppliedHistoryReq.ProtoReflect.Descriptor instead.
func (*ReadAppliedHistoryReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{328}
}

func (x *ReadAppliedHistoryReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReadAppliedHistoryReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReadAppliedHistoryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (x *ReadAppliedHistoryResult) Reset() {
	*x = ReadAppliedHistoryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[329]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadAppliedHistoryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadAppliedHistoryResult) ProtoMessage() {}

func (x *ReadAppliedHistoryResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[329]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadAppliedHistoryResult.ProtoReflect.Descriptor instead.
func (*ReadAppliedHistoryResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{329}
}

func (x *ReadAppliedHistoryResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

type GetContactsApplyDifferenceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ApplyId int32         `protobuf:"varint,2,opt,name=apply_id,json=applyId,proto3" json:"apply_id,omitempty"`
	Limit   int32         `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Date    int32         `protobuf:"varint,4,opt,name=date,proto3" json:"date,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"` //日志记录相关的
}

func (x *GetContactsApplyDifferenceReq) Reset() {
	*x = GetContactsApplyDifferenceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[330]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContactsApplyDifferenceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContactsApplyDifferenceReq) ProtoMessage() {}

func (x *GetContactsApplyDifferenceReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[330]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContactsApplyDifferenceReq.ProtoReflect.Descriptor instead.
func (*GetContactsApplyDifferenceReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{330}
}

func (x *GetContactsApplyDifferenceReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetContactsApplyDifferenceReq) GetApplyId() int32 {
	if x != nil {
		return x.ApplyId
	}
	return 0
}

func (x *GetContactsApplyDifferenceReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetContactsApplyDifferenceReq) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *GetContactsApplyDifferenceReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ApplyDifference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplyId  int32  `protobuf:"varint,1,opt,name=apply_id,json=applyId,proto3" json:"apply_id,omitempty"`
	ReplyId  int32  `protobuf:"varint,2,opt,name=reply_id,json=replyId,proto3" json:"reply_id,omitempty"`
	UserId   int32  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Date     int32  `protobuf:"varint,4,opt,name=date,proto3" json:"date,omitempty"`
	State    int32  `protobuf:"varint,5,opt,name=state,proto3" json:"state,omitempty"`
	Greet    string `protobuf:"bytes,6,opt,name=greet,proto3" json:"greet,omitempty"`
	FromType int32  `protobuf:"varint,7,opt,name=from_type,json=fromType,proto3" json:"from_type,omitempty"`
}

func (x *ApplyDifference) Reset() {
	*x = ApplyDifference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[331]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyDifference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyDifference) ProtoMessage() {}

func (x *ApplyDifference) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[331]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyDifference.ProtoReflect.Descriptor instead.
func (*ApplyDifference) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{331}
}

func (x *ApplyDifference) GetApplyId() int32 {
	if x != nil {
		return x.ApplyId
	}
	return 0
}

func (x *ApplyDifference) GetReplyId() int32 {
	if x != nil {
		return x.ReplyId
	}
	return 0
}

func (x *ApplyDifference) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ApplyDifference) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ApplyDifference) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *ApplyDifference) GetGreet() string {
	if x != nil {
		return x.Greet
	}
	return ""
}

func (x *ApplyDifference) GetFromType() int32 {
	if x != nil {
		return x.FromType
	}
	return 0
}

type GetContactsApplyDifferenceResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Applies     []*ApplyDifference `protobuf:"bytes,1,rep,name=applies,proto3" json:"applies,omitempty"`
	MaxApplyId  int32              `protobuf:"varint,2,opt,name=max_apply_id,json=maxApplyId,proto3" json:"max_apply_id,omitempty"`
	UnreadCount int32              `protobuf:"varint,3,opt,name=unread_count,json=unreadCount,proto3" json:"unread_count,omitempty"`
	Errorcode   ReErrCode          `protobuf:"varint,4,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (x *GetContactsApplyDifferenceResult) Reset() {
	*x = GetContactsApplyDifferenceResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[332]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContactsApplyDifferenceResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContactsApplyDifferenceResult) ProtoMessage() {}

func (x *GetContactsApplyDifferenceResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[332]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContactsApplyDifferenceResult.ProtoReflect.Descriptor instead.
func (*GetContactsApplyDifferenceResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{332}
}

func (x *GetContactsApplyDifferenceResult) GetApplies() []*ApplyDifference {
	if x != nil {
		return x.Applies
	}
	return nil
}

func (x *GetContactsApplyDifferenceResult) GetMaxApplyId() int32 {
	if x != nil {
		return x.MaxApplyId
	}
	return 0
}

func (x *GetContactsApplyDifferenceResult) GetUnreadCount() int32 {
	if x != nil {
		return x.UnreadCount
	}
	return 0
}

func (x *GetContactsApplyDifferenceResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

type GetContactsApplyDifferenceV2Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ApplyId int32         `protobuf:"varint,2,opt,name=apply_id,json=applyId,proto3" json:"apply_id,omitempty"`
	Limit   int32         `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Date    int32         `protobuf:"varint,4,opt,name=date,proto3" json:"date,omitempty"`
	Hash    int64         `protobuf:"varint,5,opt,name=hash,proto3" json:"hash,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"` //日志记录相关的
}

func (x *GetContactsApplyDifferenceV2Req) Reset() {
	*x = GetContactsApplyDifferenceV2Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[333]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContactsApplyDifferenceV2Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContactsApplyDifferenceV2Req) ProtoMessage() {}

func (x *GetContactsApplyDifferenceV2Req) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[333]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContactsApplyDifferenceV2Req.ProtoReflect.Descriptor instead.
func (*GetContactsApplyDifferenceV2Req) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{333}
}

func (x *GetContactsApplyDifferenceV2Req) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetContactsApplyDifferenceV2Req) GetApplyId() int32 {
	if x != nil {
		return x.ApplyId
	}
	return 0
}

func (x *GetContactsApplyDifferenceV2Req) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetContactsApplyDifferenceV2Req) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *GetContactsApplyDifferenceV2Req) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *GetContactsApplyDifferenceV2Req) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type GetContactsApplyDifferenceV2Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Applies     []*ApplyDifference `protobuf:"bytes,1,rep,name=applies,proto3" json:"applies,omitempty"`
	MaxApplyId  int32              `protobuf:"varint,2,opt,name=max_apply_id,json=maxApplyId,proto3" json:"max_apply_id,omitempty"`
	UnreadCount int32              `protobuf:"varint,3,opt,name=unread_count,json=unreadCount,proto3" json:"unread_count,omitempty"`
	Hash        int64              `protobuf:"varint,4,opt,name=hash,proto3" json:"hash,omitempty"`
	Errorcode   ReErrCode          `protobuf:"varint,5,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (x *GetContactsApplyDifferenceV2Result) Reset() {
	*x = GetContactsApplyDifferenceV2Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[334]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContactsApplyDifferenceV2Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContactsApplyDifferenceV2Result) ProtoMessage() {}

func (x *GetContactsApplyDifferenceV2Result) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[334]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContactsApplyDifferenceV2Result.ProtoReflect.Descriptor instead.
func (*GetContactsApplyDifferenceV2Result) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{334}
}

func (x *GetContactsApplyDifferenceV2Result) GetApplies() []*ApplyDifference {
	if x != nil {
		return x.Applies
	}
	return nil
}

func (x *GetContactsApplyDifferenceV2Result) GetMaxApplyId() int32 {
	if x != nil {
		return x.MaxApplyId
	}
	return 0
}

func (x *GetContactsApplyDifferenceV2Result) GetUnreadCount() int32 {
	if x != nil {
		return x.UnreadCount
	}
	return 0
}

func (x *GetContactsApplyDifferenceV2Result) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *GetContactsApplyDifferenceV2Result) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

type SearchUserByPhoneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	Phone  string        `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"` //手机号-带国家码
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"` //日志记录相关的
}

func (x *SearchUserByPhoneReq) Reset() {
	*x = SearchUserByPhoneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[335]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUserByPhoneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserByPhoneReq) ProtoMessage() {}

func (x *SearchUserByPhoneReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[335]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserByPhoneReq.ProtoReflect.Descriptor instead.
func (*SearchUserByPhoneReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{335}
}

func (x *SearchUserByPhoneReq) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *SearchUserByPhoneReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *SearchUserByPhoneReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type SearchUserByPhoneResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfos []*UserInfo `protobuf:"bytes,1,rep,name=user_infos,json=userInfos,proto3" json:"user_infos,omitempty"`                //用户信息
	Gender    int32       `protobuf:"varint,2,opt,name=gender,proto3" json:"gender,omitempty"`                                      //性别
	Email     string      `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`                                         //邮箱
	Country   string      `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`                                     //国家
	City      string      `protobuf:"bytes,5,opt,name=City,proto3" json:"City,omitempty"`                                           //城市
	Detail    string      `protobuf:"bytes,6,opt,name=Detail,proto3" json:"Detail,omitempty"`                                       //详情
	Errorcode ReErrCode   `protobuf:"varint,7,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *SearchUserByPhoneResult) Reset() {
	*x = SearchUserByPhoneResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[336]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUserByPhoneResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserByPhoneResult) ProtoMessage() {}

func (x *SearchUserByPhoneResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[336]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserByPhoneResult.ProtoReflect.Descriptor instead.
func (*SearchUserByPhoneResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{336}
}

func (x *SearchUserByPhoneResult) GetUserInfos() []*UserInfo {
	if x != nil {
		return x.UserInfos
	}
	return nil
}

func (x *SearchUserByPhoneResult) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *SearchUserByPhoneResult) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *SearchUserByPhoneResult) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *SearchUserByPhoneResult) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *SearchUserByPhoneResult) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *SearchUserByPhoneResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

type CreateGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId    int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	UserIdArr []int32       `protobuf:"varint,2,rep,packed,name=user_id_arr,json=userIdArr,proto3" json:"user_id_arr,omitempty"`
	Title     string        `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"` //日志记录相关的
}

func (x *CreateGroupReq) Reset() {
	*x = CreateGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[337]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupReq) ProtoMessage() {}

func (x *CreateGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[337]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupReq.ProtoReflect.Descriptor instead.
func (*CreateGroupReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{337}
}

func (x *CreateGroupReq) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *CreateGroupReq) GetUserIdArr() []int32 {
	if x != nil {
		return x.UserIdArr
	}
	return nil
}

func (x *CreateGroupReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateGroupReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type CreateGroupResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId   int32     `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Order     int32     `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`
	Date      int32     `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,4,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *CreateGroupResult) Reset() {
	*x = CreateGroupResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[338]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupResult) ProtoMessage() {}

func (x *CreateGroupResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[338]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupResult.ProtoReflect.Descriptor instead.
func (*CreateGroupResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{338}
}

func (x *CreateGroupResult) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *CreateGroupResult) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *CreateGroupResult) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *CreateGroupResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

type SetUserGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId    int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	UserInfos []*UserInfo   `protobuf:"bytes,2,rep,name=user_infos,json=userInfos,proto3" json:"user_infos,omitempty"`
	GroupId   int32         `protobuf:"varint,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"` //日志记录相关的
}

func (x *SetUserGroupReq) Reset() {
	*x = SetUserGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[339]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserGroupReq) ProtoMessage() {}

func (x *SetUserGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[339]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserGroupReq.ProtoReflect.Descriptor instead.
func (*SetUserGroupReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{339}
}

func (x *SetUserGroupReq) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *SetUserGroupReq) GetUserInfos() []*UserInfo {
	if x != nil {
		return x.UserInfos
	}
	return nil
}

func (x *SetUserGroupReq) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *SetUserGroupReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type SetUserGroupResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *SetUserGroupResult) Reset() {
	*x = SetUserGroupResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[340]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserGroupResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserGroupResult) ProtoMessage() {}

func (x *SetUserGroupResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[340]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserGroupResult.ProtoReflect.Descriptor instead.
func (*SetUserGroupResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{340}
}

func (x *SetUserGroupResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// getfull user的请求
type GetFullUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId     int32         `protobuf:"varint,1,opt,name=selfId,proto3" json:"selfId,omitempty"`         //自己的用户Id
	UserId     int32         `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`         // 需要获取的用户的ID
	AccessHash int64         `protobuf:"varint,3,opt,name=AccessHash,proto3" json:"AccessHash,omitempty"` //需要获取的用户的哈希值
	Debug      *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`            //日志记录相关的
}

func (x *GetFullUserReq) Reset() {
	*x = GetFullUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[341]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFullUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFullUserReq) ProtoMessage() {}

func (x *GetFullUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[341]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFullUserReq.ProtoReflect.Descriptor instead.
func (*GetFullUserReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{341}
}

func (x *GetFullUserReq) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *GetFullUserReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetFullUserReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *GetFullUserReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// getfull user的请求
type GetFullUserResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uinfo               *UserInfo `protobuf:"bytes,1,opt,name=uinfo,proto3" json:"uinfo,omitempty"`                                                           //用户的基础信息
	Isblocked           bool      `protobuf:"varint,2,opt,name=isblocked,proto3" json:"isblocked,omitempty"`                                                  //此用户是否是自己的黑名单
	PhoneCallsPrivate   bool      `protobuf:"varint,3,opt,name=phone_calls_private,json=phoneCallsPrivate,proto3" json:"phone_calls_private,omitempty"`       //userfull需要
	PhoneCallsAvailable bool      `protobuf:"varint,4,opt,name=phone_calls_available,json=phoneCallsAvailable,proto3" json:"phone_calls_available,omitempty"` //userfull需要
	About               string    `protobuf:"bytes,5,opt,name=about,proto3" json:"about,omitempty"`                                                           //用户的个性签名
	CommonChat          int32     `protobuf:"varint,6,opt,name=common_chat,json=commonChat,proto3" json:"common_chat,omitempty"`                              //共同群的个数
	Extend              string    `protobuf:"bytes,7,opt,name=extend,proto3" json:"extend,omitempty"`                                                         //用户的扩展字段们 年龄，性别 {Age:1111, Sex: 1, Address: "china"}
	Errorcode           ReErrCode `protobuf:"varint,8,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`                   //返回错误码
}

func (x *GetFullUserResult) Reset() {
	*x = GetFullUserResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[342]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFullUserResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFullUserResult) ProtoMessage() {}

func (x *GetFullUserResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[342]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFullUserResult.ProtoReflect.Descriptor instead.
func (*GetFullUserResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{342}
}

func (x *GetFullUserResult) GetUinfo() *UserInfo {
	if x != nil {
		return x.Uinfo
	}
	return nil
}

func (x *GetFullUserResult) GetIsblocked() bool {
	if x != nil {
		return x.Isblocked
	}
	return false
}

func (x *GetFullUserResult) GetPhoneCallsPrivate() bool {
	if x != nil {
		return x.PhoneCallsPrivate
	}
	return false
}

func (x *GetFullUserResult) GetPhoneCallsAvailable() bool {
	if x != nil {
		return x.PhoneCallsAvailable
	}
	return false
}

func (x *GetFullUserResult) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *GetFullUserResult) GetCommonChat() int32 {
	if x != nil {
		return x.CommonChat
	}
	return 0
}

func (x *GetFullUserResult) GetExtend() string {
	if x != nil {
		return x.Extend
	}
	return ""
}

func (x *GetFullUserResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

type GetUserExpansionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *GetUserExpansionReq) Reset() {
	*x = GetUserExpansionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[343]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserExpansionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserExpansionReq) ProtoMessage() {}

func (x *GetUserExpansionReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[343]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserExpansionReq.ProtoReflect.Descriptor instead.
func (*GetUserExpansionReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{343}
}

func (x *GetUserExpansionReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetUserExpansionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Version int32  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GetUserExpansionResult) Reset() {
	*x = GetUserExpansionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[344]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserExpansionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserExpansionResult) ProtoMessage() {}

func (x *GetUserExpansionResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[344]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserExpansionResult.ProtoReflect.Descriptor instead.
func (*GetUserExpansionResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{344}
}

func (x *GetUserExpansionResult) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *GetUserExpansionResult) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type ChangeGroupOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId     int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	GroupOrder []*GroupOrder `protobuf:"bytes,2,rep,name=group_order,json=groupOrder,proto3" json:"group_order,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"` //日志记录相关的
}

func (x *ChangeGroupOrderReq) Reset() {
	*x = ChangeGroupOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[345]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeGroupOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeGroupOrderReq) ProtoMessage() {}

func (x *ChangeGroupOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[345]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeGroupOrderReq.ProtoReflect.Descriptor instead.
func (*ChangeGroupOrderReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{345}
}

func (x *ChangeGroupOrderReq) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *ChangeGroupOrderReq) GetGroupOrder() []*GroupOrder {
	if x != nil {
		return x.GroupOrder
	}
	return nil
}

func (x *ChangeGroupOrderReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type GroupOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId     int32  `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	OrderId     int32  `protobuf:"varint,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Title       string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Date        int32  `protobuf:"varint,4,opt,name=date,proto3" json:"date,omitempty"`
	UnreadCount int32  `protobuf:"varint,5,opt,name=unread_count,json=unreadCount,proto3" json:"unread_count,omitempty"`
}

func (x *GroupOrder) Reset() {
	*x = GroupOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[346]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupOrder) ProtoMessage() {}

func (x *GroupOrder) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[346]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupOrder.ProtoReflect.Descriptor instead.
func (*GroupOrder) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{346}
}

func (x *GroupOrder) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GroupOrder) GetOrderId() int32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *GroupOrder) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GroupOrder) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *GroupOrder) GetUnreadCount() int32 {
	if x != nil {
		return x.UnreadCount
	}
	return 0
}

type ChangeGroupOrderResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (x *ChangeGroupOrderResult) Reset() {
	*x = ChangeGroupOrderResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[347]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeGroupOrderResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeGroupOrderResult) ProtoMessage() {}

func (x *ChangeGroupOrderResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[347]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeGroupOrderResult.ProtoReflect.Descriptor instead.
func (*ChangeGroupOrderResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{347}
}

func (x *ChangeGroupOrderResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

type DeleteGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GroupId int32         `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"` //日志记录相关的
}

func (x *DeleteGroupReq) Reset() {
	*x = DeleteGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[348]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGroupReq) ProtoMessage() {}

func (x *DeleteGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[348]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGroupReq.ProtoReflect.Descriptor instead.
func (*DeleteGroupReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{348}
}

func (x *DeleteGroupReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DeleteGroupReq) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *DeleteGroupReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type DeleteGroupResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (x *DeleteGroupResult) Reset() {
	*x = DeleteGroupResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[349]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGroupResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGroupResult) ProtoMessage() {}

func (x *DeleteGroupResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[349]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGroupResult.ProtoReflect.Descriptor instead.
func (*DeleteGroupResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{349}
}

func (x *DeleteGroupResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

type DeleteGroupsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GroupIds []int32       `protobuf:"varint,2,rep,packed,name=group_ids,json=groupIds,proto3" json:"group_ids,omitempty"`
	Debug    *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"` //日志记录相关的
}

func (x *DeleteGroupsReq) Reset() {
	*x = DeleteGroupsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[350]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGroupsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGroupsReq) ProtoMessage() {}

func (x *DeleteGroupsReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[350]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGroupsReq.ProtoReflect.Descriptor instead.
func (*DeleteGroupsReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{350}
}

func (x *DeleteGroupsReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DeleteGroupsReq) GetGroupIds() []int32 {
	if x != nil {
		return x.GroupIds
	}
	return nil
}

func (x *DeleteGroupsReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type DeleteGroupsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (x *DeleteGroupsResult) Reset() {
	*x = DeleteGroupsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[351]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGroupsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGroupsResult) ProtoMessage() {}

func (x *DeleteGroupsResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[351]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGroupsResult.ProtoReflect.Descriptor instead.
func (*DeleteGroupsResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{351}
}

func (x *DeleteGroupsResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 获取客服列表请求
type GetCustomerListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否是定向客服
	IsOrient bool `protobuf:"varint,1,opt,name=IsOrient,proto3" json:"IsOrient,omitempty"`
}

func (x *GetCustomerListReq) Reset() {
	*x = GetCustomerListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[352]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerListReq) ProtoMessage() {}

func (x *GetCustomerListReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[352]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerListReq.ProtoReflect.Descriptor instead.
func (*GetCustomerListReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{352}
}

func (x *GetCustomerListReq) GetIsOrient() bool {
	if x != nil {
		return x.IsOrient
	}
	return false
}

// 客服列表结体
type CustomerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Phone  string `protobuf:"bytes,2,opt,name=Phone,proto3" json:"Phone,omitempty"`
	// 是否定向客服
	IsOrient bool `protobuf:"varint,3,opt,name=IsOrient,proto3" json:"IsOrient,omitempty"`
	// 打招呼文案
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// 排序字段，数值越小越靠前
	Sort int32 `protobuf:"varint,5,opt,name=Sort,proto3" json:"Sort,omitempty"`
}

func (x *CustomerList) Reset() {
	*x = CustomerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[353]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerList) ProtoMessage() {}

func (x *CustomerList) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[353]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerList.ProtoReflect.Descriptor instead.
func (*CustomerList) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{353}
}

func (x *CustomerList) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CustomerList) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *CustomerList) GetIsOrient() bool {
	if x != nil {
		return x.IsOrient
	}
	return false
}

func (x *CustomerList) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CustomerList) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

// 获取定向客服列表响应
type GetCustomerListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回的用户id数组
	Customers []*CustomerList `protobuf:"bytes,1,rep,name=Customers,proto3" json:"Customers,omitempty"`
	// 错误码
	ErrorCode ReErrCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.ReErrCode" json:"ErrorCode,omitempty"`
}

func (x *GetCustomerListReply) Reset() {
	*x = GetCustomerListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[354]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerListReply) ProtoMessage() {}

func (x *GetCustomerListReply) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[354]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerListReply.ProtoReflect.Descriptor instead.
func (*GetCustomerListReply) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{354}
}

func (x *GetCustomerListReply) GetCustomers() []*CustomerList {
	if x != nil {
		return x.Customers
	}
	return nil
}

func (x *GetCustomerListReply) GetErrorCode() ReErrCode {
	if x != nil {
		return x.ErrorCode
	}
	return ReErrCode_Success
}

type IsCustomerByUserIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *IsCustomerByUserIdReq) Reset() {
	*x = IsCustomerByUserIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[355]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsCustomerByUserIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsCustomerByUserIdReq) ProtoMessage() {}

func (x *IsCustomerByUserIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[355]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsCustomerByUserIdReq.ProtoReflect.Descriptor instead.
func (*IsCustomerByUserIdReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{355}
}

func (x *IsCustomerByUserIdReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type IsCustomerByUserIdReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode ReErrCode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=pbimuinfoserver.ReErrCode" json:"error_code,omitempty"`
	Yes       bool      `protobuf:"varint,2,opt,name=yes,proto3" json:"yes,omitempty"`
}

func (x *IsCustomerByUserIdReply) Reset() {
	*x = IsCustomerByUserIdReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[356]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsCustomerByUserIdReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsCustomerByUserIdReply) ProtoMessage() {}

func (x *IsCustomerByUserIdReply) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[356]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsCustomerByUserIdReply.ProtoReflect.Descriptor instead.
func (*IsCustomerByUserIdReply) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{356}
}

func (x *IsCustomerByUserIdReply) GetErrorCode() ReErrCode {
	if x != nil {
		return x.ErrorCode
	}
	return ReErrCode_Success
}

func (x *IsCustomerByUserIdReply) GetYes() bool {
	if x != nil {
		return x.Yes
	}
	return false
}

// 获取指定客服的用户列表请求
type GetCustomerOrientUsersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户id
	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (x *GetCustomerOrientUsersReq) Reset() {
	*x = GetCustomerOrientUsersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[357]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerOrientUsersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerOrientUsersReq) ProtoMessage() {}

func (x *GetCustomerOrientUsersReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[357]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerOrientUsersReq.ProtoReflect.Descriptor instead.
func (*GetCustomerOrientUsersReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{357}
}

func (x *GetCustomerOrientUsersReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 获取指定客服的用户列表响应
type GetCustomerOrientUsersReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回的用户id数组
	UserIds []int32 `protobuf:"varint,1,rep,packed,name=UserIds,proto3" json:"UserIds,omitempty"`
	// 错误码
	ErrorCode ReErrCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.ReErrCode" json:"ErrorCode,omitempty"`
	// 注册时问候语
	Description string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
}

func (x *GetCustomerOrientUsersReply) Reset() {
	*x = GetCustomerOrientUsersReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[358]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerOrientUsersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerOrientUsersReply) ProtoMessage() {}

func (x *GetCustomerOrientUsersReply) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[358]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerOrientUsersReply.ProtoReflect.Descriptor instead.
func (*GetCustomerOrientUsersReply) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{358}
}

func (x *GetCustomerOrientUsersReply) GetUserIds() []int32 {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *GetCustomerOrientUsersReply) GetErrorCode() ReErrCode {
	if x != nil {
		return x.ErrorCode
	}
	return ReErrCode_Success
}

func (x *GetCustomerOrientUsersReply) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// 检测用户Id是否是特权消息账号请求
type CheckSpecialUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户id
	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (x *CheckSpecialUserReq) Reset() {
	*x = CheckSpecialUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[359]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSpecialUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSpecialUserReq) ProtoMessage() {}

func (x *CheckSpecialUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[359]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSpecialUserReq.ProtoReflect.Descriptor instead.
func (*CheckSpecialUserReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{359}
}

func (x *CheckSpecialUserReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 检测用户Id是否是特权消息账号响应
type CheckSpecialUserReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户id
	IsSpecial bool `protobuf:"varint,1,opt,name=IsSpecial,proto3" json:"IsSpecial,omitempty"`
}

func (x *CheckSpecialUserReply) Reset() {
	*x = CheckSpecialUserReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[360]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSpecialUserReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSpecialUserReply) ProtoMessage() {}

func (x *CheckSpecialUserReply) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[360]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSpecialUserReply.ProtoReflect.Descriptor instead.
func (*CheckSpecialUserReply) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{360}
}

func (x *CheckSpecialUserReply) GetIsSpecial() bool {
	if x != nil {
		return x.IsSpecial
	}
	return false
}

// 获取强制加入群组ids请求
type GetForceGroupListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetForceGroupListReq) Reset() {
	*x = GetForceGroupListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[361]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetForceGroupListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForceGroupListReq) ProtoMessage() {}

func (x *GetForceGroupListReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[361]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForceGroupListReq.ProtoReflect.Descriptor instead.
func (*GetForceGroupListReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{361}
}

// 获取强制加入群组ids响应
type GetForceGroupListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupIds  []int32   `protobuf:"varint,1,rep,packed,name=GroupIds,proto3" json:"GroupIds,omitempty"`
	ErrorCode ReErrCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.ReErrCode" json:"ErrorCode,omitempty"`
}

func (x *GetForceGroupListReply) Reset() {
	*x = GetForceGroupListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[362]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetForceGroupListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForceGroupListReply) ProtoMessage() {}

func (x *GetForceGroupListReply) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[362]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForceGroupListReply.ProtoReflect.Descriptor instead.
func (*GetForceGroupListReply) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{362}
}

func (x *GetForceGroupListReply) GetGroupIds() []int32 {
	if x != nil {
		return x.GroupIds
	}
	return nil
}

func (x *GetForceGroupListReply) GetErrorCode() ReErrCode {
	if x != nil {
		return x.ErrorCode
	}
	return ReErrCode_Success
}

// 获取非强制加入群组ids请求
type GetNotForceGroupListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetNotForceGroupListReq) Reset() {
	*x = GetNotForceGroupListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[363]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNotForceGroupListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotForceGroupListReq) ProtoMessage() {}

func (x *GetNotForceGroupListReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[363]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotForceGroupListReq.ProtoReflect.Descriptor instead.
func (*GetNotForceGroupListReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{363}
}

// 获取非强制加入群组ids响应
type GetNotForceGroupListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupIds  []int32   `protobuf:"varint,1,rep,packed,name=GroupIds,proto3" json:"GroupIds,omitempty"`
	ErrorCode ReErrCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.ReErrCode" json:"ErrorCode,omitempty"`
}

func (x *GetNotForceGroupListReply) Reset() {
	*x = GetNotForceGroupListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[364]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNotForceGroupListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotForceGroupListReply) ProtoMessage() {}

func (x *GetNotForceGroupListReply) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[364]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotForceGroupListReply.ProtoReflect.Descriptor instead.
func (*GetNotForceGroupListReply) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{364}
}

func (x *GetNotForceGroupListReply) GetGroupIds() []int32 {
	if x != nil {
		return x.GroupIds
	}
	return nil
}

func (x *GetNotForceGroupListReply) GetErrorCode() ReErrCode {
	if x != nil {
		return x.ErrorCode
	}
	return ReErrCode_Success
}

// 密码注册请求
type PassWordRegistryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user id
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 给用户生成的哈希值
	AccessHash int64 `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	// 用户账号
	UserName string `protobuf:"bytes,3,opt,name=UserName,proto3" json:"UserName,omitempty"`
	// 用户密码
	PassWord string `protobuf:"bytes,4,opt,name=PassWord,proto3" json:"PassWord,omitempty"`
	// 手机号码
	PhoneNumber string `protobuf:"bytes,5,opt,name=PhoneNumber,proto3" json:"PhoneNumber,omitempty"`
	// 邮箱
	Email     string `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	FirstName string `protobuf:"bytes,7,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,8,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	// 手机国家码
	CountryCode string `protobuf:"bytes,9,opt,name=CountryCode,proto3" json:"CountryCode,omitempty"`
	// 不含国家码的手机号
	LocalPhone string `protobuf:"bytes,10,opt,name=LocalPhone,proto3" json:"LocalPhone,omitempty"`
}

func (x *PassWordRegistryReq) Reset() {
	*x = PassWordRegistryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[365]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassWordRegistryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassWordRegistryReq) ProtoMessage() {}

func (x *PassWordRegistryReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[365]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassWordRegistryReq.ProtoReflect.Descriptor instead.
func (*PassWordRegistryReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{365}
}

func (x *PassWordRegistryReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PassWordRegistryReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *PassWordRegistryReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *PassWordRegistryReq) GetPassWord() string {
	if x != nil {
		return x.PassWord
	}
	return ""
}

func (x *PassWordRegistryReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *PassWordRegistryReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *PassWordRegistryReq) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *PassWordRegistryReq) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *PassWordRegistryReq) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *PassWordRegistryReq) GetLocalPhone() string {
	if x != nil {
		return x.LocalPhone
	}
	return ""
}

// 密码注册响应
type PassWordRegistryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否成功
	Success bool `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	// 错误码
	ErrorCode PasswordRegistryErrorCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.PasswordRegistryErrorCode" json:"ErrorCode,omitempty"`
	// 用户信息
	User *UserInfo `protobuf:"bytes,3,opt,name=User,proto3" json:"User,omitempty"`
}

func (x *PassWordRegistryReply) Reset() {
	*x = PassWordRegistryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[366]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassWordRegistryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassWordRegistryReply) ProtoMessage() {}

func (x *PassWordRegistryReply) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[366]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassWordRegistryReply.ProtoReflect.Descriptor instead.
func (*PassWordRegistryReply) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{366}
}

func (x *PassWordRegistryReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PassWordRegistryReply) GetErrorCode() PasswordRegistryErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return PasswordRegistryErrorCode_SUCCESS
}

func (x *PassWordRegistryReply) GetUser() *UserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

// 密码登录请求
type PassWordLoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户账号
	UserName string `protobuf:"bytes,1,opt,name=UserName,proto3" json:"UserName,omitempty"`
	// 手机号码
	PhoneNum string `protobuf:"bytes,2,opt,name=PhoneNum,proto3" json:"PhoneNum,omitempty"`
	// 用户密码t
	Password string `protobuf:"bytes,3,opt,name=Password,proto3" json:"Password,omitempty"`
}

func (x *PassWordLoginReq) Reset() {
	*x = PassWordLoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[367]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassWordLoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassWordLoginReq) ProtoMessage() {}

func (x *PassWordLoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[367]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassWordLoginReq.ProtoReflect.Descriptor instead.
func (*PassWordLoginReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{367}
}

func (x *PassWordLoginReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *PassWordLoginReq) GetPhoneNum() string {
	if x != nil {
		return x.PhoneNum
	}
	return ""
}

func (x *PassWordLoginReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// 密码登录响应
type PassWordLoginReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否成功
	Success bool `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	// 错误码
	ErrorCode PasswordRegistryErrorCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.PasswordRegistryErrorCode" json:"ErrorCode,omitempty"`
	// 用户信息
	User *UserInfo `protobuf:"bytes,3,opt,name=User,proto3" json:"User,omitempty"`
}

func (x *PassWordLoginReply) Reset() {
	*x = PassWordLoginReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[368]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassWordLoginReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassWordLoginReply) ProtoMessage() {}

func (x *PassWordLoginReply) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[368]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassWordLoginReply.ProtoReflect.Descriptor instead.
func (*PassWordLoginReply) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{368}
}

func (x *PassWordLoginReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PassWordLoginReply) GetErrorCode() PasswordRegistryErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return PasswordRegistryErrorCode_SUCCESS
}

func (x *PassWordLoginReply) GetUser() *UserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

// 修改/找回密码请求
type ChangePassWordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	// 新密码
	NewPassWord string `protobuf:"bytes,2,opt,name=NewPassWord,proto3" json:"NewPassWord,omitempty"`
}

func (x *ChangePassWordReq) Reset() {
	*x = ChangePassWordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[369]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePassWordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePassWordReq) ProtoMessage() {}

func (x *ChangePassWordReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[369]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePassWordReq.ProtoReflect.Descriptor instead.
func (*ChangePassWordReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{369}
}

func (x *ChangePassWordReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ChangePassWordReq) GetNewPassWord() string {
	if x != nil {
		return x.NewPassWord
	}
	return ""
}

// 修改/找回密码响应
type ChangePassWordReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否成功
	Success bool `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	// 错误码
	ErrorCode PasswordRegistryErrorCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.PasswordRegistryErrorCode" json:"ErrorCode,omitempty"`
	// 用户信息
	User *UserInfo `protobuf:"bytes,3,opt,name=User,proto3" json:"User,omitempty"`
}

func (x *ChangePassWordReply) Reset() {
	*x = ChangePassWordReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[370]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePassWordReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePassWordReply) ProtoMessage() {}

func (x *ChangePassWordReply) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[370]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePassWordReply.ProtoReflect.Descriptor instead.
func (*ChangePassWordReply) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{370}
}

func (x *ChangePassWordReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ChangePassWordReply) GetErrorCode() PasswordRegistryErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return PasswordRegistryErrorCode_SUCCESS
}

func (x *ChangePassWordReply) GetUser() *UserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

// 通过用户名 密码注册用户
type RegistryUserByUsernameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户账号
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// 用户密码
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// 手机号码
	PhoneNumber string `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// 邮箱
	Email     string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	FirstName string `protobuf:"bytes,5,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,6,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	// 手机国家码
	CountryCode string `protobuf:"bytes,7,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	// 不含国家码的手机号
	LocalPhone string `protobuf:"bytes,8,opt,name=local_phone,json=localPhone,proto3" json:"local_phone,omitempty"`
}

func (x *RegistryUserByUsernameReq) Reset() {
	*x = RegistryUserByUsernameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[371]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistryUserByUsernameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistryUserByUsernameReq) ProtoMessage() {}

func (x *RegistryUserByUsernameReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[371]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistryUserByUsernameReq.ProtoReflect.Descriptor instead.
func (*RegistryUserByUsernameReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{371}
}

func (x *RegistryUserByUsernameReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RegistryUserByUsernameReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RegistryUserByUsernameReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *RegistryUserByUsernameReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *RegistryUserByUsernameReq) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *RegistryUserByUsernameReq) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *RegistryUserByUsernameReq) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *RegistryUserByUsernameReq) GetLocalPhone() string {
	if x != nil {
		return x.LocalPhone
	}
	return ""
}

// 通过用户名 密码注册用户响应
type RegistryUserByUsernameReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否成功
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// 错误码
	ErrorCode PasswordRegistryErrorCode `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3,enum=pbimuinfoserver.PasswordRegistryErrorCode" json:"error_code,omitempty"`
	// 用户信息
	User *UserInfo `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *RegistryUserByUsernameReply) Reset() {
	*x = RegistryUserByUsernameReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[372]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistryUserByUsernameReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistryUserByUsernameReply) ProtoMessage() {}

func (x *RegistryUserByUsernameReply) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[372]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistryUserByUsernameReply.ProtoReflect.Descriptor instead.
func (*RegistryUserByUsernameReply) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{372}
}

func (x *RegistryUserByUsernameReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RegistryUserByUsernameReply) GetErrorCode() PasswordRegistryErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return PasswordRegistryErrorCode_SUCCESS
}

func (x *RegistryUserByUsernameReply) GetUser() *UserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

// 获取授权登录的token 请求
type GetAuthTokenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key id
	KeyId int64 `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *GetAuthTokenReq) Reset() {
	*x = GetAuthTokenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[373]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuthTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuthTokenReq) ProtoMessage() {}

func (x *GetAuthTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[373]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuthTokenReq.ProtoReflect.Descriptor instead.
func (*GetAuthTokenReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{373}
}

func (x *GetAuthTokenReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

// 获取授权登录的token 响应
type GetAuthTokenReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 获取到的token
	Token     string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	UntilDate int32  `protobuf:"varint,2,opt,name=until_date,json=untilDate,proto3" json:"until_date,omitempty"`
	// 错误码
	ErrorCode OAuthLoginError `protobuf:"varint,3,opt,name=error_code,json=errorCode,proto3,enum=pbimuinfoserver.OAuthLoginError" json:"error_code,omitempty"`
}

func (x *GetAuthTokenReply) Reset() {
	*x = GetAuthTokenReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[374]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuthTokenReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuthTokenReply) ProtoMessage() {}

func (x *GetAuthTokenReply) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[374]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuthTokenReply.ProtoReflect.Descriptor instead.
func (*GetAuthTokenReply) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{374}
}

func (x *GetAuthTokenReply) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *GetAuthTokenReply) GetUntilDate() int32 {
	if x != nil {
		return x.UntilDate
	}
	return 0
}

func (x *GetAuthTokenReply) GetErrorCode() OAuthLoginError {
	if x != nil {
		return x.ErrorCode
	}
	return OAuthLoginError_OAUTH_LOGIN_SUCCESS
}

// 绑定token请求
type BindUserTokenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token  string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	UserId int32  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *BindUserTokenReq) Reset() {
	*x = BindUserTokenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[375]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindUserTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindUserTokenReq) ProtoMessage() {}

func (x *BindUserTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[375]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindUserTokenReq.ProtoReflect.Descriptor instead.
func (*BindUserTokenReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{375}
}

func (x *BindUserTokenReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *BindUserTokenReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 绑定token响应
type BindUserTokenReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户信息
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// key id
	KeyId int64 `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// 错误码
	ErrorCode OAuthLoginError `protobuf:"varint,3,opt,name=error_code,json=errorCode,proto3,enum=pbimuinfoserver.OAuthLoginError" json:"error_code,omitempty"`
}

func (x *BindUserTokenReply) Reset() {
	*x = BindUserTokenReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[376]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindUserTokenReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindUserTokenReply) ProtoMessage() {}

func (x *BindUserTokenReply) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[376]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindUserTokenReply.ProtoReflect.Descriptor instead.
func (*BindUserTokenReply) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{376}
}

func (x *BindUserTokenReply) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *BindUserTokenReply) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *BindUserTokenReply) GetErrorCode() OAuthLoginError {
	if x != nil {
		return x.ErrorCode
	}
	return OAuthLoginError_OAUTH_LOGIN_SUCCESS
}

// 通过授权token 获取用户信息
type GetUserByAuthTokenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 获取到的token
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetUserByAuthTokenReq) Reset() {
	*x = GetUserByAuthTokenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[377]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserByAuthTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserByAuthTokenReq) ProtoMessage() {}

func (x *GetUserByAuthTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[377]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserByAuthTokenReq.ProtoReflect.Descriptor instead.
func (*GetUserByAuthTokenReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{377}
}

func (x *GetUserByAuthTokenReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// 通过授权token 获取用户信息
type GetUserByAuthTokenReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key id
	KeyId int64 `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// 用户信息
	UserId int32     `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	User   *UserInfo `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	// 错误码
	ErrorCode OAuthLoginError `protobuf:"varint,4,opt,name=error_code,json=errorCode,proto3,enum=pbimuinfoserver.OAuthLoginError" json:"error_code,omitempty"`
}

func (x *GetUserByAuthTokenReply) Reset() {
	*x = GetUserByAuthTokenReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[378]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserByAuthTokenReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserByAuthTokenReply) ProtoMessage() {}

func (x *GetUserByAuthTokenReply) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[378]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserByAuthTokenReply.ProtoReflect.Descriptor instead.
func (*GetUserByAuthTokenReply) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{378}
}

func (x *GetUserByAuthTokenReply) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *GetUserByAuthTokenReply) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetUserByAuthTokenReply) GetUser() *UserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *GetUserByAuthTokenReply) GetErrorCode() OAuthLoginError {
	if x != nil {
		return x.ErrorCode
	}
	return OAuthLoginError_OAUTH_LOGIN_SUCCESS
}

// 验证token 请求
type VerifyAuthTokenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 获取到的token
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *VerifyAuthTokenReq) Reset() {
	*x = VerifyAuthTokenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[379]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyAuthTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyAuthTokenReq) ProtoMessage() {}

func (x *VerifyAuthTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[379]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyAuthTokenReq.ProtoReflect.Descriptor instead.
func (*VerifyAuthTokenReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{379}
}

func (x *VerifyAuthTokenReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// 验证token 响应
type VerifyAuthTokenReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key id
	KeyId int64 `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// 用户id, 等于0说明还没绑定user
	UserId int32 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 错误码
	ErrorCode OAuthLoginError `protobuf:"varint,3,opt,name=error_code,json=errorCode,proto3,enum=pbimuinfoserver.OAuthLoginError" json:"error_code,omitempty"`
}

func (x *VerifyAuthTokenReply) Reset() {
	*x = VerifyAuthTokenReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[380]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyAuthTokenReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyAuthTokenReply) ProtoMessage() {}

func (x *VerifyAuthTokenReply) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[380]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyAuthTokenReply.ProtoReflect.Descriptor instead.
func (*VerifyAuthTokenReply) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{380}
}

func (x *VerifyAuthTokenReply) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *VerifyAuthTokenReply) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *VerifyAuthTokenReply) GetErrorCode() OAuthLoginError {
	if x != nil {
		return x.ErrorCode
	}
	return OAuthLoginError_OAUTH_LOGIN_SUCCESS
}

// 仅企业版使用该接口
// @ add by qingsong at 2020-05-21 for
//
//	message SetPhoneNoByUsernameReq {
//	   // user name
//	   string  Uname = 1;
//	   // phone No.
//	   string  Phone = 2;
//	   pbcomm.Debug Debug = 3;
//	}
//
//	message SetPhoneNoByUsernameRsp {
//	   ReErrCode Reply_code = 1;
//	   string Reply_info = 2;
//	}
type SignUpV1Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneNumber    string        `protobuf:"bytes,1,opt,name=PhoneNumber,proto3" json:"PhoneNumber,omitempty"` //电话号码
	PhoneCodeHash  string        `protobuf:"bytes,2,opt,name=PhoneCodeHash,proto3" json:"PhoneCodeHash,omitempty"`
	PhoneCode      string        `protobuf:"bytes,3,opt,name=PhoneCode,proto3" json:"PhoneCode,omitempty"` //验证码
	KeyId          int64         `protobuf:"varint,5,opt,name=keyId,proto3" json:"keyId,omitempty"`        //用户的keyId(端的标识)
	FirstName      string        `protobuf:"bytes,6,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	Sex            int32         `protobuf:"varint,7,opt,name=sex,proto3" json:"sex,omitempty"`
	IsBot          bool          `protobuf:"varint,8,opt,name=is_bot,json=isBot,proto3" json:"is_bot,omitempty"`
	BotInfoVersion int32         `protobuf:"varint,9,opt,name=bot_info_version,json=botInfoVersion,proto3" json:"bot_info_version,omitempty"`
	BotChatHistory bool          `protobuf:"varint,10,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNoChats     bool          `protobuf:"varint,11,opt,name=bot_no_chats,json=botNoChats,proto3" json:"bot_no_chats,omitempty"`
	DcId           int32         `protobuf:"varint,12,opt,name=dc_id,json=dcId,proto3" json:"dc_id,omitempty"`
	Debug          *pbcomm.Debug `protobuf:"bytes,13,opt,name=debug,proto3" json:"debug,omitempty"`
	CountryCode    string        `protobuf:"bytes,14,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"` // 国家码
	LocalPhone     string        `protobuf:"bytes,15,opt,name=local_phone,json=localPhone,proto3" json:"local_phone,omitempty"`    // 不带国家码的号码
	Birthday       int32         `protobuf:"varint,16,opt,name=birthday,proto3" json:"birthday,omitempty"`
	Photo          string        `protobuf:"bytes,17,opt,name=photo,proto3" json:"photo,omitempty"`
	ProxyCode      int32         `protobuf:"varint,18,opt,name=proxyCode,proto3" json:"proxyCode,omitempty"` // 邀请人userId
}

func (x *SignUpV1Req) Reset() {
	*x = SignUpV1Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[381]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignUpV1Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignUpV1Req) ProtoMessage() {}

func (x *SignUpV1Req) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[381]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignUpV1Req.ProtoReflect.Descriptor instead.
func (*SignUpV1Req) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{381}
}

func (x *SignUpV1Req) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *SignUpV1Req) GetPhoneCodeHash() string {
	if x != nil {
		return x.PhoneCodeHash
	}
	return ""
}

func (x *SignUpV1Req) GetPhoneCode() string {
	if x != nil {
		return x.PhoneCode
	}
	return ""
}

func (x *SignUpV1Req) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *SignUpV1Req) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *SignUpV1Req) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *SignUpV1Req) GetIsBot() bool {
	if x != nil {
		return x.IsBot
	}
	return false
}

func (x *SignUpV1Req) GetBotInfoVersion() int32 {
	if x != nil {
		return x.BotInfoVersion
	}
	return 0
}

func (x *SignUpV1Req) GetBotChatHistory() bool {
	if x != nil {
		return x.BotChatHistory
	}
	return false
}

func (x *SignUpV1Req) GetBotNoChats() bool {
	if x != nil {
		return x.BotNoChats
	}
	return false
}

func (x *SignUpV1Req) GetDcId() int32 {
	if x != nil {
		return x.DcId
	}
	return 0
}

func (x *SignUpV1Req) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *SignUpV1Req) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *SignUpV1Req) GetLocalPhone() string {
	if x != nil {
		return x.LocalPhone
	}
	return ""
}

func (x *SignUpV1Req) GetBirthday() int32 {
	if x != nil {
		return x.Birthday
	}
	return 0
}

func (x *SignUpV1Req) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

func (x *SignUpV1Req) GetProxyCode() int32 {
	if x != nil {
		return x.ProxyCode
	}
	return 0
}

type SignUpV1Reply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     SignUpV1Reply_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=pbimuinfoserver.SignUpV1Reply_ResultCode" json:"code,omitempty"`
	UserInfo *UserInfo                `protobuf:"bytes,2,opt,name=userInfo,proto3" json:"userInfo,omitempty"`
}

func (x *SignUpV1Reply) Reset() {
	*x = SignUpV1Reply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[382]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignUpV1Reply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignUpV1Reply) ProtoMessage() {}

func (x *SignUpV1Reply) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[382]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignUpV1Reply.ProtoReflect.Descriptor instead.
func (*SignUpV1Reply) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{382}
}

func (x *SignUpV1Reply) GetCode() SignUpV1Reply_ResultCode {
	if x != nil {
		return x.Code
	}
	return SignUpV1Reply_Success
}

func (x *SignUpV1Reply) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

type ContactsGetCommonContactsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds []int32 `protobuf:"varint,1,rep,packed,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
}

func (x *ContactsGetCommonContactsReq) Reset() {
	*x = ContactsGetCommonContactsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[383]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactsGetCommonContactsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactsGetCommonContactsReq) ProtoMessage() {}

func (x *ContactsGetCommonContactsReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[383]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactsGetCommonContactsReq.ProtoReflect.Descriptor instead.
func (*ContactsGetCommonContactsReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{383}
}

func (x *ContactsGetCommonContactsReq) GetUserIds() []int32 {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type ContactsGetCommonContactsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfos []*UserInfo `protobuf:"bytes,1,rep,name=user_infos,json=userInfos,proto3" json:"user_infos,omitempty"`
	Errorcode ReErrCode   `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (x *ContactsGetCommonContactsResult) Reset() {
	*x = ContactsGetCommonContactsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[384]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactsGetCommonContactsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactsGetCommonContactsResult) ProtoMessage() {}

func (x *ContactsGetCommonContactsResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[384]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactsGetCommonContactsResult.ProtoReflect.Descriptor instead.
func (*ContactsGetCommonContactsResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{384}
}

func (x *ContactsGetCommonContactsResult) GetUserInfos() []*UserInfo {
	if x != nil {
		return x.UserInfos
	}
	return nil
}

func (x *ContactsGetCommonContactsResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

type SearchUserByNicknameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nickname string  `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
	UserIds  []int32 `protobuf:"varint,2,rep,packed,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	Offset   int32   `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit    int32   `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	SelfId   int32   `protobuf:"varint,5,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
}

func (x *SearchUserByNicknameReq) Reset() {
	*x = SearchUserByNicknameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[385]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUserByNicknameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserByNicknameReq) ProtoMessage() {}

func (x *SearchUserByNicknameReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[385]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserByNicknameReq.ProtoReflect.Descriptor instead.
func (*SearchUserByNicknameReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{385}
}

func (x *SearchUserByNicknameReq) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *SearchUserByNicknameReq) GetUserIds() []int32 {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *SearchUserByNicknameReq) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *SearchUserByNicknameReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SearchUserByNicknameReq) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

type SearchUserByNicknameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfos []*UserInfo `protobuf:"bytes,1,rep,name=user_infos,json=userInfos,proto3" json:"user_infos,omitempty"`
	Errorcode ReErrCode   `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (x *SearchUserByNicknameResult) Reset() {
	*x = SearchUserByNicknameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[386]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUserByNicknameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserByNicknameResult) ProtoMessage() {}

func (x *SearchUserByNicknameResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[386]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserByNicknameResult.ProtoReflect.Descriptor instead.
func (*SearchUserByNicknameResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{386}
}

func (x *SearchUserByNicknameResult) GetUserInfos() []*UserInfo {
	if x != nil {
		return x.UserInfos
	}
	return nil
}

func (x *SearchUserByNicknameResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// / @ added by qingsong at 2021.10.18 for get user role information by user ids.
// rpc GetUserRoleInfoByIds(GetUserRoleInfoByIdsReq) returns (GetUserRoleInfoByIdsRsp) {}
type GetUserRoleInfoByIdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds []int32 `protobuf:"varint,1,rep,packed,name=UserIds,proto3" json:"UserIds,omitempty"`
}

func (x *GetUserRoleInfoByIdsReq) Reset() {
	*x = GetUserRoleInfoByIdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[387]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserRoleInfoByIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRoleInfoByIdsReq) ProtoMessage() {}

func (x *GetUserRoleInfoByIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[387]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRoleInfoByIdsReq.ProtoReflect.Descriptor instead.
func (*GetUserRoleInfoByIdsReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{387}
}

func (x *GetUserRoleInfoByIdsReq) GetUserIds() []int32 {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type UserRoleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	AccessHash int32  `protobuf:"varint,2,opt,name=AccessHash,proto3" json:"AccessHash,omitempty"`
	UserName   string `protobuf:"bytes,3,opt,name=UserName,proto3" json:"UserName,omitempty"`
	NickName   string `protobuf:"bytes,4,opt,name=NickName,proto3" json:"NickName,omitempty"`
	Photo      string `protobuf:"bytes,5,opt,name=Photo,proto3" json:"Photo,omitempty"`
	About      string `protobuf:"bytes,6,opt,name=About,proto3" json:"About,omitempty"`
	IsBot      bool   `protobuf:"varint,7,opt,name=IsBot,proto3" json:"IsBot,omitempty"`
	Sex        int32  `protobuf:"varint,8,opt,name=Sex,proto3" json:"Sex,omitempty"`
}

func (x *UserRoleInfo) Reset() {
	*x = UserRoleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[388]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRoleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRoleInfo) ProtoMessage() {}

func (x *UserRoleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[388]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRoleInfo.ProtoReflect.Descriptor instead.
func (*UserRoleInfo) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{388}
}

func (x *UserRoleInfo) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserRoleInfo) GetAccessHash() int32 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *UserRoleInfo) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserRoleInfo) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *UserRoleInfo) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

func (x *UserRoleInfo) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *UserRoleInfo) GetIsBot() bool {
	if x != nil {
		return x.IsBot
	}
	return false
}

func (x *UserRoleInfo) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

type GetUserRoleInfoByIdsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode ReErrCode       `protobuf:"varint,1,opt,name=ErrCode,proto3,enum=pbimuinfoserver.ReErrCode" json:"ErrCode,omitempty"`
	RoleArr []*UserRoleInfo `protobuf:"bytes,2,rep,name=RoleArr,proto3" json:"RoleArr,omitempty"`
}

func (x *GetUserRoleInfoByIdsRsp) Reset() {
	*x = GetUserRoleInfoByIdsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[389]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserRoleInfoByIdsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRoleInfoByIdsRsp) ProtoMessage() {}

func (x *GetUserRoleInfoByIdsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[389]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRoleInfoByIdsRsp.ProtoReflect.Descriptor instead.
func (*GetUserRoleInfoByIdsRsp) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{389}
}

func (x *GetUserRoleInfoByIdsRsp) GetErrCode() ReErrCode {
	if x != nil {
		return x.ErrCode
	}
	return ReErrCode_Success
}

func (x *GetUserRoleInfoByIdsRsp) GetRoleArr() []*UserRoleInfo {
	if x != nil {
		return x.RoleArr
	}
	return nil
}

// / @ added by qingsong at 202011122 for inner user operation.
type InnerUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	VPhone    string `protobuf:"bytes,2,opt,name=VPhone,proto3" json:"VPhone,omitempty"`
	RPhone    string `protobuf:"bytes,3,opt,name=RPhone,proto3" json:"RPhone,omitempty"`
	Remark    string `protobuf:"bytes,4,opt,name=Remark,proto3" json:"Remark,omitempty"`
	Passwd    string `protobuf:"bytes,5,opt,name=Passwd,proto3" json:"Passwd,omitempty"`
	Status    int32  `protobuf:"varint,6,opt,name=Status,proto3" json:"Status,omitempty"`
	EnabledBy int32  `protobuf:"varint,7,opt,name=EnabledBy,proto3" json:"EnabledBy,omitempty"`
	EnabledAt string `protobuf:"bytes,8,opt,name=EnabledAt,proto3" json:"EnabledAt,omitempty"`
}

func (x *InnerUser) Reset() {
	*x = InnerUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[390]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InnerUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InnerUser) ProtoMessage() {}

func (x *InnerUser) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[390]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InnerUser.ProtoReflect.Descriptor instead.
func (*InnerUser) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{390}
}

func (x *InnerUser) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *InnerUser) GetVPhone() string {
	if x != nil {
		return x.VPhone
	}
	return ""
}

func (x *InnerUser) GetRPhone() string {
	if x != nil {
		return x.RPhone
	}
	return ""
}

func (x *InnerUser) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *InnerUser) GetPasswd() string {
	if x != nil {
		return x.Passwd
	}
	return ""
}

func (x *InnerUser) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *InnerUser) GetEnabledBy() int32 {
	if x != nil {
		return x.EnabledBy
	}
	return 0
}

func (x *InnerUser) GetEnabledAt() string {
	if x != nil {
		return x.EnabledAt
	}
	return ""
}

// inner user operation.
// rpc InnerUserOp(InnerUserOpReq) returns (InnerUserOpRsp) {}
type InnerUserOpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpType InnerUserOpReq_OperType `protobuf:"varint,1,opt,name=OpType,proto3,enum=pbimuinfoserver.InnerUserOpReq_OperType" json:"OpType,omitempty"` // operation type.
	FromId int32                   `protobuf:"varint,2,opt,name=FromId,proto3" json:"FromId,omitempty"`                                              // operator
	UserId int32                   `protobuf:"varint,3,opt,name=UserId,proto3" json:"UserId,omitempty"`                                              //
	VPhone string                  `protobuf:"bytes,4,opt,name=VPhone,proto3" json:"VPhone,omitempty"`                                               //
	RPhone string                  `protobuf:"bytes,5,opt,name=RPhone,proto3" json:"RPhone,omitempty"`                                               // full phone number.
	Remark string                  `protobuf:"bytes,6,opt,name=Remark,proto3" json:"Remark,omitempty"`                                               // 帐号生产备注信息
}

func (x *InnerUserOpReq) Reset() {
	*x = InnerUserOpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[391]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InnerUserOpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InnerUserOpReq) ProtoMessage() {}

func (x *InnerUserOpReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[391]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InnerUserOpReq.ProtoReflect.Descriptor instead.
func (*InnerUserOpReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{391}
}

func (x *InnerUserOpReq) GetOpType() InnerUserOpReq_OperType {
	if x != nil {
		return x.OpType
	}
	return InnerUserOpReq_OperTypeBeginAt
}

func (x *InnerUserOpReq) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *InnerUserOpReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *InnerUserOpReq) GetVPhone() string {
	if x != nil {
		return x.VPhone
	}
	return ""
}

func (x *InnerUserOpReq) GetRPhone() string {
	if x != nil {
		return x.RPhone
	}
	return ""
}

func (x *InnerUserOpReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type InnerUserOpRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResCode int32        `protobuf:"varint,1,opt,name=ResCode,proto3" json:"ResCode,omitempty"`
	Message string       `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	UserArr []*InnerUser `protobuf:"bytes,3,rep,name=UserArr,proto3" json:"UserArr,omitempty"`
}

func (x *InnerUserOpRsp) Reset() {
	*x = InnerUserOpRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[392]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InnerUserOpRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InnerUserOpRsp) ProtoMessage() {}

func (x *InnerUserOpRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[392]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InnerUserOpRsp.ProtoReflect.Descriptor instead.
func (*InnerUserOpRsp) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{392}
}

func (x *InnerUserOpRsp) GetResCode() int32 {
	if x != nil {
		return x.ResCode
	}
	return 0
}

func (x *InnerUserOpRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *InnerUserOpRsp) GetUserArr() []*InnerUser {
	if x != nil {
		return x.UserArr
	}
	return nil
}

// rpc BindRealPhone(BindRealPhoneReq) returns (BindRealPhoneRsp)
type BindRealPhoneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	RPhone string `protobuf:"bytes,2,opt,name=RPhone,proto3" json:"RPhone,omitempty"`
}

func (x *BindRealPhoneReq) Reset() {
	*x = BindRealPhoneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[393]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindRealPhoneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindRealPhoneReq) ProtoMessage() {}

func (x *BindRealPhoneReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[393]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindRealPhoneReq.ProtoReflect.Descriptor instead.
func (*BindRealPhoneReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{393}
}

func (x *BindRealPhoneReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *BindRealPhoneReq) GetRPhone() string {
	if x != nil {
		return x.RPhone
	}
	return ""
}

type BindRealPhoneRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResCode int32  `protobuf:"varint,1,opt,name=ResCode,proto3" json:"ResCode,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *BindRealPhoneRsp) Reset() {
	*x = BindRealPhoneRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[394]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindRealPhoneRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindRealPhoneRsp) ProtoMessage() {}

func (x *BindRealPhoneRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[394]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindRealPhoneRsp.ProtoReflect.Descriptor instead.
func (*BindRealPhoneRsp) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{394}
}

func (x *BindRealPhoneRsp) GetResCode() int32 {
	if x != nil {
		return x.ResCode
	}
	return 0
}

func (x *BindRealPhoneRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// / @ added by qingsong at 2021.12.13 for get user relation with ids.
// rpc GetUserRelationWithIds(GetUserRelationWithIdsReq) returns (GetUserRelationWithIdsRsp) {}
type GetUserRelationWithIdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId  int32   `protobuf:"varint,1,opt,name=FromId,proto3" json:"FromId,omitempty"`
	WithIds []int32 `protobuf:"varint,2,rep,packed,name=WithIds,proto3" json:"WithIds,omitempty"`
}

func (x *GetUserRelationWithIdsReq) Reset() {
	*x = GetUserRelationWithIdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[395]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserRelationWithIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRelationWithIdsReq) ProtoMessage() {}

func (x *GetUserRelationWithIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[395]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRelationWithIdsReq.ProtoReflect.Descriptor instead.
func (*GetUserRelationWithIdsReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{395}
}

func (x *GetUserRelationWithIdsReq) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *GetUserRelationWithIdsReq) GetWithIds() []int32 {
	if x != nil {
		return x.WithIds
	}
	return nil
}

type Relation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User int32                 `protobuf:"varint,1,opt,name=User,proto3" json:"User,omitempty"`
	Type Relation_RelationType `protobuf:"varint,2,opt,name=Type,proto3,enum=pbimuinfoserver.Relation_RelationType" json:"Type,omitempty"`
}

func (x *Relation) Reset() {
	*x = Relation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[396]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Relation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relation) ProtoMessage() {}

func (x *Relation) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[396]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relation.ProtoReflect.Descriptor instead.
func (*Relation) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{396}
}

func (x *Relation) GetUser() int32 {
	if x != nil {
		return x.User
	}
	return 0
}

func (x *Relation) GetType() Relation_RelationType {
	if x != nil {
		return x.Type
	}
	return Relation_Stranger
}

type GetUserRelationWithIdsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResCode   int32       `protobuf:"varint,1,opt,name=ResCode,proto3" json:"ResCode,omitempty"`
	Relations []*Relation `protobuf:"bytes,2,rep,name=Relations,proto3" json:"Relations,omitempty"`
}

func (x *GetUserRelationWithIdsRsp) Reset() {
	*x = GetUserRelationWithIdsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[397]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserRelationWithIdsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRelationWithIdsRsp) ProtoMessage() {}

func (x *GetUserRelationWithIdsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[397]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRelationWithIdsRsp.ProtoReflect.Descriptor instead.
func (*GetUserRelationWithIdsRsp) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{397}
}

func (x *GetUserRelationWithIdsRsp) GetResCode() int32 {
	if x != nil {
		return x.ResCode
	}
	return 0
}

func (x *GetUserRelationWithIdsRsp) GetRelations() []*Relation {
	if x != nil {
		return x.Relations
	}
	return nil
}

// 设置官方标识
type UpdateUserVerifiedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Verified bool          `protobuf:"varint,2,opt,name=Verified,proto3" json:"Verified,omitempty"`
	Debug    *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UpdateUserVerifiedReq) Reset() {
	*x = UpdateUserVerifiedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[398]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserVerifiedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserVerifiedReq) ProtoMessage() {}

func (x *UpdateUserVerifiedReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[398]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserVerifiedReq.ProtoReflect.Descriptor instead.
func (*UpdateUserVerifiedReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{398}
}

func (x *UpdateUserVerifiedReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserVerifiedReq) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *UpdateUserVerifiedReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type UpdateUserVerifiedResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uinfo     *UserInfo `protobuf:"bytes,1,opt,name=Uinfo,proto3" json:"Uinfo,omitempty"`                                         ///用户的基本信息
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *UpdateUserVerifiedResult) Reset() {
	*x = UpdateUserVerifiedResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[399]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserVerifiedResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserVerifiedResult) ProtoMessage() {}

func (x *UpdateUserVerifiedResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[399]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserVerifiedResult.ProtoReflect.Descriptor instead.
func (*UpdateUserVerifiedResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{399}
}

func (x *UpdateUserVerifiedResult) GetUinfo() *UserInfo {
	if x != nil {
		return x.Uinfo
	}
	return nil
}

func (x *UpdateUserVerifiedResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

type AddPhoneBookContactsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	LocalPhone string `protobuf:"bytes,2,opt,name=LocalPhone,proto3" json:"LocalPhone,omitempty"`
}

func (x *AddPhoneBookContactsReq) Reset() {
	*x = AddPhoneBookContactsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[400]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPhoneBookContactsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPhoneBookContactsReq) ProtoMessage() {}

func (x *AddPhoneBookContactsReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[400]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPhoneBookContactsReq.ProtoReflect.Descriptor instead.
func (*AddPhoneBookContactsReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{400}
}

func (x *AddPhoneBookContactsReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddPhoneBookContactsReq) GetLocalPhone() string {
	if x != nil {
		return x.LocalPhone
	}
	return ""
}

type Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	FirstName string `protobuf:"bytes,2,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	LastName  string `protobuf:"bytes,3,opt,name=LastName,proto3" json:"LastName,omitempty"`
}

func (x *Contact) Reset() {
	*x = Contact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[401]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contact) ProtoMessage() {}

func (x *Contact) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[401]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contact.ProtoReflect.Descriptor instead.
func (*Contact) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{401}
}

func (x *Contact) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Contact) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Contact) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

type AddPhoneBookContactsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contacts  []*Contact `protobuf:"bytes,1,rep,name=Contacts,proto3" json:"Contacts,omitempty"`                                   //联系人列表
	Errorcode ReErrCode  `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *AddPhoneBookContactsReply) Reset() {
	*x = AddPhoneBookContactsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[402]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPhoneBookContactsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPhoneBookContactsReply) ProtoMessage() {}

func (x *AddPhoneBookContactsReply) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[402]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPhoneBookContactsReply.ProtoReflect.Descriptor instead.
func (*AddPhoneBookContactsReply) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{402}
}

func (x *AddPhoneBookContactsReply) GetContacts() []*Contact {
	if x != nil {
		return x.Contacts
	}
	return nil
}

func (x *AddPhoneBookContactsReply) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 绑定邀请码
type InviteCodeBindReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	InviteBy int32 `protobuf:"varint,2,opt,name=InviteBy,proto3" json:"InviteBy,omitempty"` // 邀请人
}

func (x *InviteCodeBindReq) Reset() {
	*x = InviteCodeBindReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[403]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteCodeBindReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteCodeBindReq) ProtoMessage() {}

func (x *InviteCodeBindReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[403]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteCodeBindReq.ProtoReflect.Descriptor instead.
func (*InviteCodeBindReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{403}
}

func (x *InviteCodeBindReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *InviteCodeBindReq) GetInviteBy() int32 {
	if x != nil {
		return x.InviteBy
	}
	return 0
}

type InviteCodeBindRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *InviteCodeBindRsp) Reset() {
	*x = InviteCodeBindRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[404]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteCodeBindRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteCodeBindRsp) ProtoMessage() {}

func (x *InviteCodeBindRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[404]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteCodeBindRsp.ProtoReflect.Descriptor instead.
func (*InviteCodeBindRsp) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{404}
}

func (x *InviteCodeBindRsp) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 我的团队
type MyTeamReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Offset int32 `protobuf:"varint,2,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32 `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *MyTeamReq) Reset() {
	*x = MyTeamReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[405]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyTeamReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyTeamReq) ProtoMessage() {}

func (x *MyTeamReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[405]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyTeamReq.ProtoReflect.Descriptor instead.
func (*MyTeamReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{405}
}

func (x *MyTeamReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MyTeamReq) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *MyTeamReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type MyTeamRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users     []int32   `protobuf:"varint,1,rep,packed,name=Users,proto3" json:"Users,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *MyTeamRsp) Reset() {
	*x = MyTeamRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[406]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyTeamRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyTeamRsp) ProtoMessage() {}

func (x *MyTeamRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[406]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyTeamRsp.ProtoReflect.Descriptor instead.
func (*MyTeamRsp) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{406}
}

func (x *MyTeamRsp) GetUsers() []int32 {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *MyTeamRsp) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 实名认证材料提交
type RealNameCertificationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	IdentityNumber string `protobuf:"bytes,3,opt,name=IdentityNumber,proto3" json:"IdentityNumber,omitempty"`
	FrontImage     string `protobuf:"bytes,4,opt,name=FrontImage,proto3" json:"FrontImage,omitempty"`
	ReverseImage   string `protobuf:"bytes,5,opt,name=ReverseImage,proto3" json:"ReverseImage,omitempty"`
}

func (x *RealNameCertificationReq) Reset() {
	*x = RealNameCertificationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[407]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealNameCertificationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealNameCertificationReq) ProtoMessage() {}

func (x *RealNameCertificationReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[407]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealNameCertificationReq.ProtoReflect.Descriptor instead.
func (*RealNameCertificationReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{407}
}

func (x *RealNameCertificationReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RealNameCertificationReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RealNameCertificationReq) GetIdentityNumber() string {
	if x != nil {
		return x.IdentityNumber
	}
	return ""
}

func (x *RealNameCertificationReq) GetFrontImage() string {
	if x != nil {
		return x.FrontImage
	}
	return ""
}

func (x *RealNameCertificationReq) GetReverseImage() string {
	if x != nil {
		return x.ReverseImage
	}
	return ""
}

type RealNameCertificationRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *RealNameCertificationRsp) Reset() {
	*x = RealNameCertificationRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[408]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealNameCertificationRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealNameCertificationRsp) ProtoMessage() {}

func (x *RealNameCertificationRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[408]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealNameCertificationRsp.ProtoReflect.Descriptor instead.
func (*RealNameCertificationRsp) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{408}
}

func (x *RealNameCertificationRsp) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 实名认证结果反馈
type GetCertificationResultReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (x *GetCertificationResultReq) Reset() {
	*x = GetCertificationResultReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[409]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCertificationResultReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCertificationResultReq) ProtoMessage() {}

func (x *GetCertificationResultReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[409]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCertificationResultReq.ProtoReflect.Descriptor instead.
func (*GetCertificationResultReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{409}
}

func (x *GetCertificationResultReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type CertificationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IdentityNumber string `protobuf:"bytes,2,opt,name=identity_number,json=identityNumber,proto3" json:"identity_number,omitempty"`
	FrontImage     string `protobuf:"bytes,3,opt,name=front_image,json=frontImage,proto3" json:"front_image,omitempty"`
	ReverseImage   string `protobuf:"bytes,4,opt,name=reverse_image,json=reverseImage,proto3" json:"reverse_image,omitempty"`
	Status         int32  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	ReasonCode     int32  `protobuf:"varint,6,opt,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
}

func (x *CertificationResult) Reset() {
	*x = CertificationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[410]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificationResult) ProtoMessage() {}

func (x *CertificationResult) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[410]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificationResult.ProtoReflect.Descriptor instead.
func (*CertificationResult) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{410}
}

func (x *CertificationResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CertificationResult) GetIdentityNumber() string {
	if x != nil {
		return x.IdentityNumber
	}
	return ""
}

func (x *CertificationResult) GetFrontImage() string {
	if x != nil {
		return x.FrontImage
	}
	return ""
}

func (x *CertificationResult) GetReverseImage() string {
	if x != nil {
		return x.ReverseImage
	}
	return ""
}

func (x *CertificationResult) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CertificationResult) GetReasonCode() int32 {
	if x != nil {
		return x.ReasonCode
	}
	return 0
}

type GetCertificationResultRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode            `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
	Result    *CertificationResult `protobuf:"bytes,2,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *GetCertificationResultRsp) Reset() {
	*x = GetCertificationResultRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[411]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCertificationResultRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCertificationResultRsp) ProtoMessage() {}

func (x *GetCertificationResultRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[411]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCertificationResultRsp.ProtoReflect.Descriptor instead.
func (*GetCertificationResultRsp) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{411}
}

func (x *GetCertificationResultRsp) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

func (x *GetCertificationResultRsp) GetResult() *CertificationResult {
	if x != nil {
		return x.Result
	}
	return nil
}

// 实名认证后台审核
type VerifyCertificationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Status     int32 `protobuf:"varint,2,opt,name=Status,proto3" json:"Status,omitempty"`
	ReasonCode int32 `protobuf:"varint,3,opt,name=ReasonCode,proto3" json:"ReasonCode,omitempty"`
}

func (x *VerifyCertificationReq) Reset() {
	*x = VerifyCertificationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[412]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyCertificationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyCertificationReq) ProtoMessage() {}

func (x *VerifyCertificationReq) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[412]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyCertificationReq.ProtoReflect.Descriptor instead.
func (*VerifyCertificationReq) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{412}
}

func (x *VerifyCertificationReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *VerifyCertificationReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *VerifyCertificationReq) GetReasonCode() int32 {
	if x != nil {
		return x.ReasonCode
	}
	return 0
}

type VerifyCertificationRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *VerifyCertificationRsp) Reset() {
	*x = VerifyCertificationRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[413]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyCertificationRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyCertificationRsp) ProtoMessage() {}

func (x *VerifyCertificationRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[413]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyCertificationRsp.ProtoReflect.Descriptor instead.
func (*VerifyCertificationRsp) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{413}
}

func (x *VerifyCertificationRsp) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

type UpdateUserDetailV1Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户ID
	Sex      int32  `protobuf:"varint,2,opt,name=sex,proto3" json:"sex,omitempty"`                     //用户性别
	Birthday int32  `protobuf:"varint,3,opt,name=birthday,proto3" json:"birthday,omitempty"`           //用户年龄
	Extend   string `protobuf:"bytes,4,opt,name=extend,proto3" json:"extend,omitempty"`                // 用户其它详情扩展字段
}

func (x *UpdateUserDetailV1Req) Reset() {
	*x = UpdateUserDetailV1Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[414]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserDetailV1Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserDetailV1Req) ProtoMessage() {}

func (x *UpdateUserDetailV1Req) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[414]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserDetailV1Req.ProtoReflect.Descriptor instead.
func (*UpdateUserDetailV1Req) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{414}
}

func (x *UpdateUserDetailV1Req) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserDetailV1Req) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *UpdateUserDetailV1Req) GetBirthday() int32 {
	if x != nil {
		return x.Birthday
	}
	return 0
}

func (x *UpdateUserDetailV1Req) GetExtend() string {
	if x != nil {
		return x.Extend
	}
	return ""
}

type UpdateUserDetailV1Rsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *UpdateUserDetailV1Rsp) Reset() {
	*x = UpdateUserDetailV1Rsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imuinfoserver_proto_msgTypes[415]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserDetailV1Rsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserDetailV1Rsp) ProtoMessage() {}

func (x *UpdateUserDetailV1Rsp) ProtoReflect() protoreflect.Message {
	mi := &file_imuinfoserver_proto_msgTypes[415]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserDetailV1Rsp.ProtoReflect.Descriptor instead.
func (*UpdateUserDetailV1Rsp) Descriptor() ([]byte, []int) {
	return file_imuinfoserver_proto_rawDescGZIP(), []int{415}
}

func (x *UpdateUserDetailV1Rsp) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

var File_imuinfoserver_proto protoreflect.FileDescriptor

var file_imuinfoserver_proto_rawDesc = []byte{
	0x0a, 0x13, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x13, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2f, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6b, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x70, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x41, 0x72, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x42, 0x0a, 0x0d, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x31, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x22, 0xd2,
	0x09, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x72, 0x67, 0x62, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6f, 0x6e, 0x74, 0x52, 0x67, 0x62, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x34, 0x0a, 0x16, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x62, 0x6f, 0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x62, 0x6f, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x62, 0x6f, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x43,
	0x68, 0x61, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6f,
	0x74, 0x5f, 0x6e, 0x6f, 0x63, 0x68, 0x61, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x62, 0x6f, 0x74, 0x4e, 0x6f, 0x63, 0x68, 0x61, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x6f, 0x74,
	0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x67, 0x65, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x62, 0x6f, 0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x65, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73,
	0x65, 0x6c, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x6d, 0x75, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x75, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x12,
	0x2c, 0x0a, 0x12, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x68, 0x6f,
	0x77, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x62,
	0x6f, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65,
	0x78, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x22, 0x54, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x6b, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4b, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x79, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x23,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x22, 0x7e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x55, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70,
	0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x41, 0x72, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x2f, 0x0a, 0x05, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x55, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x6d, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x7f, 0x0a, 0x12, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12,
	0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x4f, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x51, 0x0a, 0x15,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x64, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x38, 0x0a, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x62, 0x6f,
	0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x12,
	0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x22, 0xb1, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x53, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x53,
	0x65, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x41, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x65, 0x64, 0x22, 0x50, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x17, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69,
	0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45,
	0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0xcc, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x22, 0x48, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x67, 0x0a, 0x0f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x23,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x22, 0x4e, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70,
	0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c,
	0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x53, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x84, 0x01, 0x0a,
	0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x15, 0x0a, 0x06,
	0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65,
	0x79, 0x49, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x05,
	0x55, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x58, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6c, 0x65, 0x76, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x65, 0x76,
	0x6c, 0x22, 0x51, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x65, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65,
	0x78, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x78, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x0a, 0x16, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x52, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x23,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x22, 0x54, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x6b, 0x0a, 0x14, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x4c, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x0d, 0x42, 0x6f, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f, 0x74,
	0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0b, 0x62, 0x6f, 0x74, 0x5f, 0x6e, 0x6f, 0x5f, 0x63, 0x68,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x6f, 0x74, 0x4e, 0x6f, 0x43,
	0x68, 0x61, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x4f, 0x0a, 0x13, 0x42, 0x6f, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x0d, 0x44, 0x65,
	0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x22, 0x7d, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x55, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0xc2, 0x01, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x22, 0x68, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72,
	0x6f, 0x6d, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4f,
	0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x22,
	0xab, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x72,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x42, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x69, 0x64, 0x41, 0x72, 0x72, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x48,
	0x61, 0x73, 0x68, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x69, 0x64, 0x41, 0x72,
	0x72, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x57, 0x0a,
	0x17, 0x43, 0x6d, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6d, 0x64, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x6d, 0x64, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x4c, 0x0a, 0x1a, 0x43, 0x6d, 0x64, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x73, 0x22, 0x4f, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x41, 0x72, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x74,
	0x73, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x22, 0xc4, 0x02, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x73,
	0x65, 0x6c, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x1b, 0x0a,
	0x09, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x68, 0x61, 0x73, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x22, 0xcf, 0x01, 0x0a, 0x18,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x74, 0x73, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70,
	0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x41, 0x72, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x41, 0x72, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x41, 0x72, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x81, 0x01,
	0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x56, 0x31, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x22, 0xb5, 0x02, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x56, 0x31, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x72, 0x72, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x72, 0x72, 0x12,
	0x3b, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x12, 0x41, 0x0a, 0x0d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x72, 0x72, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x72, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x61, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x6d, 0x0a, 0x18, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65,
	0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x77, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69,
	0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45,
	0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x81, 0x01, 0x0a, 0x10, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x1e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x72, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x52, 0x0f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x41, 0x72, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x45, 0x0a, 0x0d, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x4b, 0x0a, 0x0e, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x73, 0x22, 0xa7,
	0x02, 0x0a, 0x21, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x48, 0x0a, 0x0f, 0x69, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x0f, 0x69,
	0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x3b,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x12, 0x41, 0x0a, 0x0b, 0x50,
	0x6f, 0x70, 0x75, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x52, 0x0b, 0x50, 0x6f, 0x70, 0x75, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x38,
	0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x72, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x72, 0x0a, 0x11,
	0x44, 0x65, 0x6c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x22, 0x53, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x53, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x0e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x22, 0x4d, 0x0a, 0x11, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x75, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69,
	0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45,
	0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0xaa, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x55, 0x6e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x55,
	0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x3a, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x22, 0xab, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x47, 0x65,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x33, 0x0a, 0x07, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x49, 0x6e,
	0x66, 0x6f, 0x41, 0x72, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x71, 0x0a, 0x0f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x70, 0x72, 0x6f, 0x62, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x77, 0x68,
	0x69, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x57, 0x68, 0x69,
	0x74, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x79, 0x73, 0x57,
	0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x6f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x62, 0x79,
	0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x53, 0x0a, 0x17, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x79,
	0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x1d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x57, 0x68, 0x69, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x6f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x62,
	0x79, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x5c, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x51, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x97, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53,
	0x79, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x44, 0x0a, 0x0c, 0x73, 0x79, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0c, 0x73, 0x79, 0x73, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69,
	0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45,
	0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x3c, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x72, 0x72, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22,
	0xa0, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x72, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4a, 0x0a, 0x0f,
	0x73, 0x79, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0f, 0x73, 0x79, 0x73, 0x57, 0x68, 0x69, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x6b, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x53, 0x79, 0x73, 0x57, 0x68, 0x69, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22,
	0x51, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x53, 0x79, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x5b, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x44, 0x63, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x64, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x63, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22,
	0x32, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x63, 0x52, 0x65, 0x71, 0x12, 0x23,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x22, 0xad, 0x02, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x77, 0x61, 0x79,
	0x73, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x0e, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x23,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x22, 0x83, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x55, 0x69, 0x6e, 0x66,
	0x6f, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x69,
	0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x12,
	0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x8b, 0x01, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x65, 0x6c, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65,
	0x6c, 0x66, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x4e, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xe7, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x6c, 0x77, 0x61, 0x79,
	0x73, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6c, 0x77,
	0x61, 0x79, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0b, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x37, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0xd6, 0x02, 0x0a, 0x16, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x72, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x72, 0x65, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x61, 0x73, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6d, 0x61, 0x73, 0x6b,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x65, 0x0a, 0x19, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x74, 0x0a, 0x1f, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x5e, 0x0a, 0x22, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68,
	0x6f, 0x70, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x71, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xa0, 0x02, 0x0a,
	0x0e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x66, 0x72, 0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x6d, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0x7f, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x22, 0x9c, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x47, 0x0a, 0x0e,
	0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0xa2, 0x04, 0x0a, 0x17, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x69, 0x6b, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x53, 0x74, 0x69, 0x6b, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x12, 0x13, 0x0a,
	0x05, 0x64, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x63,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f,
	0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x57, 0x12, 0x35, 0x0a,
	0x17, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x48, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x5f, 0x73, 0x74, 0x69, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x53,
	0x74, 0x69, 0x6b, 0x65, 0x72, 0x41, 0x6c, 0x74, 0x12, 0x48, 0x0a, 0x21, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x69, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x1d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x53,
	0x74, 0x69, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6f, 0x0a, 0x17, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50,
	0x61, 0x63, 0x6b, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x44, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x66,
	0x6f, 0x42, 0x61, 0x73, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x15, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x63, 0x52, 0x65, 0x71, 0x12,
	0x4e, 0x0a, 0x0d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x70, 0x61, 0x63, 0x6b, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x50, 0x61, 0x63, 0x6b, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x0d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x70, 0x61, 0x63, 0x6b, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x22, 0x64, 0x0a, 0x18, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x7f, 0x0a, 0x18, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x63,
	0x41, 0x72, 0x72, 0x52, 0x65, 0x71, 0x12, 0x3e, 0x0a, 0x05, 0x53, 0x74, 0x50, 0x44, 0x42, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50,
	0x61, 0x63, 0x6b, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x05, 0x53, 0x74, 0x50, 0x44, 0x42, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x6d, 0x0a, 0x1b, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44,
	0x63, 0x41, 0x72, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x64,
	0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x69, 0x64, 0x41, 0x72, 0x72,
	0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x52, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x44,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x68,
	0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x50,
	0x61, 0x63, 0x6b, 0x44, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x46, 0x0a, 0x09, 0x53, 0x74, 0x50, 0x44, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63,
	0x6b, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x53,
	0x74, 0x50, 0x44, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x8d, 0x01, 0x0a, 0x18, 0x41, 0x64, 0x64,
	0x4f, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x61, 0x76, 0x65, 0x53, 0x74, 0x69, 0x63,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x6e, 0x66, 0x61, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x55, 0x6e, 0x66,
	0x61, 0x76, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x57, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x4f,
	0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x61, 0x76, 0x65, 0x53, 0x74, 0x69, 0x63, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69,
	0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45,
	0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x66, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x65, 0x64, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xe0, 0x01, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x46, 0x61, 0x76, 0x65, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x32, 0x0a, 0x05, 0x70, 0x61, 0x63, 0x6b,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x50, 0x61, 0x63, 0x6b, 0x52, 0x05, 0x70, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x44, 0x0a, 0x08,
	0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x65, 0x52, 0x08, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x49, 0x0a, 0x0b,
	0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x45,
	0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x45,
	0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xe7, 0x01, 0x0a, 0x16, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x22, 0x55, 0x0a, 0x19, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38,
	0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x5e, 0x0a, 0x22, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x1c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x5b, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x41, 0x72, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12,
	0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x22, 0x5f, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x41, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x79, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x75,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x22, 0x91, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x75, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0xa0, 0x03, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x72,
	0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61,
	0x73, 0x6b, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6d, 0x61, 0x73, 0x6b, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x58, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x12, 0x42, 0x0a,
	0x0b, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x56, 0x0a, 0x11, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x12, 0x41, 0x0a, 0x0b, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x55, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x22, 0x9e, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x75, 0x73, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x48, 0x0a,
	0x0e, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69,
	0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45,
	0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x3b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x9c,
	0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x47, 0x0a, 0x0e, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x41, 0x72, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x53, 0x0a,
	0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61,
	0x63, 0x6b, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x22, 0x5b, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x48, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69,
	0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45,
	0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x33, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x52, 0x03, 0x73, 0x65, 0x74, 0x22, 0x34, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8f, 0x01, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x73, 0x65, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x04, 0x73, 0x65, 0x74, 0x73, 0x22, 0x93,
	0x02, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x22, 0x36, 0x0a, 0x1b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x1e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38,
	0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4b,
	0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x47, 0x69, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72,
	0x12, 0x39, 0x0a, 0x07, 0x67, 0x69, 0x66, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x53, 0x61, 0x76, 0x65, 0x47, 0x69, 0x66, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x06, 0x67, 0x69, 0x66, 0x41, 0x72, 0x72, 0x22, 0x6e, 0x0a, 0x0f, 0x75,
	0x73, 0x65, 0x72, 0x53, 0x61, 0x76, 0x65, 0x47, 0x69, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x69, 0x66, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x69, 0x66, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x69, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x67, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x22, 0x92, 0x01, 0x0a, 0x0e,
	0x53, 0x61, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x47, 0x69, 0x66, 0x52, 0x65, 0x71, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x69, 0x66, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x69, 0x66, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x69, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x67, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x22, 0x4d, 0x0a, 0x11, 0x53, 0x61, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x47, 0x69, 0x66, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x7a, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x47, 0x69, 0x66, 0x52, 0x65, 0x71,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x69, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67,
	0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x4c, 0x0a, 0x10, 0x44,
	0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x47, 0x69, 0x66, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x61, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x47, 0x69, 0x66, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xb4, 0x01, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x69, 0x66, 0x73, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x39,
	0x0a, 0x07, 0x67, 0x69, 0x66, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x53, 0x61, 0x76, 0x65, 0x47, 0x69, 0x66, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x06, 0x67, 0x69, 0x66, 0x41, 0x72, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70,
	0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x6e, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x22, 0x54, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xb3, 0x03, 0x0a, 0x10, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x69, 0x73, 0x42, 0x6f, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x62, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x28, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x6f, 0x74,
	0x5f, 0x6e, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x62, 0x6f, 0x74, 0x4e, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x65, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x1a, 0x0a,
	0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x22,
	0x7d, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x75, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x7a,
	0x0a, 0x1b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x74, 0x0a, 0x1e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73,
	0x68, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d,
	0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0xf9, 0x03, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x69, 0x73, 0x42, 0x6f, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x62, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x28, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x6f, 0x74,
	0x5f, 0x6e, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x62, 0x6f, 0x74, 0x4e, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x64, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x64, 0x63, 0x12, 0x1a, 0x0a,
	0x08, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x77, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x77, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x10,
	0x0a, 0x03, 0x53, 0x65, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x53, 0x65, 0x78,
	0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x22, 0x83, 0x01, 0x0a,
	0x16, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x75, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x6f, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f,
	0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x71, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x22, 0xc5, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x53, 0x68, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x4d, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x4d, 0x75, 0x74, 0x65, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x53,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xe4, 0x01, 0x0a, 0x17,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x71, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x53,
	0x68, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x4d, 0x75, 0x74, 0x65,
	0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4d, 0x75,
	0x74, 0x65, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x23, 0x0a,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x22, 0x56, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x54, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x22, 0x5f, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x75, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x9b, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x46, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x72,
	0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x75, 0x73, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x41, 0x72, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x67, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x50, 0x69, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x4e, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x6f, 0x74, 0x50, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38,
	0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x49, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x22, 0x85, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a, 0x05,
	0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x41, 0x64, 0x64, 0x72, 0x52, 0x05, 0x61, 0x64, 0x64, 0x72, 0x73, 0x12, 0x38,
	0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x74, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x35,
	0x0a, 0x1b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x4f,
	0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x63, 0x63, 0x70, 0x75, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f,
	0x63, 0x63, 0x70, 0x75, 0x79, 0x22, 0x4c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x47, 0x70, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x23,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x22, 0xc9, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47,
	0x70, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x6c, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x6c, 0x66, 0x49, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x66,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x7a, 0x0a,
	0x18, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x6c, 0x66, 0x49, 0x73, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65, 0x6c,
	0x66, 0x49, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x53, 0x65, 0x6c, 0x66, 0x49, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12,
	0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x72, 0x0a, 0x0f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x06,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x66,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x22, 0x86, 0x01,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x2c, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x22, 0x5e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x06,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x22, 0xa3, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x12, 0x45, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x2c,
	0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x22, 0x17, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x56, 0x69, 0x70, 0x6c, 0x6f, 0x67, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x22, 0x30, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x56, 0x69, 0x70, 0x6c,
	0x6f, 0x67, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x22, 0x64, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x48, 0x61, 0x73, 0x50, 0x61, 0x79, 0x52, 0x65, 0x71, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x48, 0x61, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x48, 0x61, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x22, 0x2e, 0x0a,
	0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x48, 0x61, 0x73, 0x50, 0x61,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x75, 0x63, 0x65, 0x73, 0x73, 0x22, 0x2d, 0x0a,
	0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x48, 0x61, 0x73, 0x50, 0x61, 0x79,
	0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x27, 0x0a, 0x13,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x48, 0x61, 0x73, 0x50, 0x61, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x68, 0x61, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x10,
	0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x67, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x22, 0x36, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x75, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x73, 0x75, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x22, 0x80, 0x01, 0x0a, 0x1b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42,
	0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x22, 0x40, 0x0a,
	0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x22,
	0xbc, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69,
	0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x69,
	0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x22, 0x35,
	0x0a, 0x13, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x66, 0x75, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x66, 0x75, 0x6c, 0x22, 0x74, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x41, 0x72, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x41, 0x72, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x56, 0x0a, 0x1a, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70,
	0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x55, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x5d, 0x0a, 0x1e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x5d, 0x0a, 0x21, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x22, 0x74, 0x0a, 0x17, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x49, 0x73, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x22, 0x80, 0x01, 0x0a, 0x1a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x4d, 0x75, 0x74, 0x75,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x69, 0x73, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x4d, 0x75, 0x74, 0x75,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70,
	0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x51, 0x0a, 0x15, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x79, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x56, 0x31, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xc1, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x56, 0x31, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x3c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x72, 0x72, 0x12, 0x3b, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x12, 0x41, 0x0a, 0x0d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x72, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x72, 0x72, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x61, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x73, 0x61, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x5b, 0x0a, 0x15, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x65, 0x74, 0x74, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x57, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x50, 0x72, 0x65, 0x74, 0x74, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x73,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x50,
	0x72, 0x65, 0x74, 0x74, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x50, 0x72, 0x65, 0x74, 0x74, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x22, 0x99, 0x01, 0x0a, 0x15, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x65, 0x74,
	0x74, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x41, 0x73, 0x73, 0x67, 0x69, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x73, 0x73, 0x67, 0x69, 0x6e, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x4b, 0x0a,
	0x15, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x65, 0x74, 0x74, 0x79, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3e, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x52, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x73, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x49, 0x73, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x6c, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x42, 0x69, 0x6e, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x41, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x41, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x2d, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x75, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x75, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x22, 0x5b, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x22, 0x48, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x55, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x53, 0x55, 0x63, 0x65, 0x73, 0x73, 0x66,
	0x75, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x53, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x45, 0x72, 0x72, 0x53, 0x74, 0x72, 0x22, 0x93, 0x01, 0x0a, 0x1c, 0x42,
	0x69, 0x6e, 0x64, 0x56, 0x69, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e,
	0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68,
	0x22, 0x55, 0x0a, 0x1d, 0x42, 0x69, 0x6e, 0x64, 0x56, 0x69, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65,
	0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x53, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x45, 0x72, 0x72, 0x53, 0x74, 0x72, 0x22, 0x3f, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x56, 0x69,
	0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xa3, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x56, 0x69, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x73, 0x4e,
	0x65, 0x65, 0x64, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x53, 0x65, 0x6e, 0x64,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x22, 0x55,
	0x0a, 0x1b, 0x56, 0x69, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x61, 0x6e,
	0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x1c, 0x56, 0x69, 0x74, 0x75, 0x61, 0x6c, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x43, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x22, 0x32, 0x0a,
	0x1a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x56, 0x69, 0x74,
	0x75, 0x6c, 0x61, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x22, 0x39, 0x0a, 0x1b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x56, 0x69, 0x74, 0x75, 0x6c, 0x61, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x56, 0x69, 0x72, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x56, 0x69, 0x72, 0x74, 0x61, 0x6c, 0x22, 0x32, 0x0a, 0x18,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x56, 0x69, 0x74, 0x75, 0x6c, 0x61, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x41, 0x72, 0x72, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x37, 0x0a, 0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x56, 0x69, 0x74, 0x75, 0x6c,
	0x61, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x41, 0x72, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a,
	0x08, 0x49, 0x73, 0x56, 0x69, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x49, 0x73, 0x56, 0x69, 0x74, 0x75, 0x61, 0x6c, 0x22, 0xc8, 0x03, 0x0a, 0x0f, 0x53, 0x69,
	0x67, 0x6e, 0x55, 0x70, 0x56, 0x69, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a,
	0x0b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x24, 0x0a, 0x0d, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x73, 0x65, 0x78, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x42, 0x6f, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f,
	0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x62, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x20,
	0x0a, 0x0c, 0x62, 0x6f, 0x74, 0x5f, 0x6e, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x6f, 0x74, 0x4e, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0xba, 0x02, 0x0a, 0x10, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x56,
	0x69, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70,
	0x56, 0x69, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0xac, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64,
	0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68,
	0x61, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x6c,
	0x6f, 0x6f, 0x64, 0x57, 0x61, 0x69, 0x74, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x69, 0x67,
	0x6e, 0x55, 0x70, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10,
	0x07, 0x22, 0x49, 0x0a, 0x17, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x69, 0x6e, 0x64,
	0x52, 0x65, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x56, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x56, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0x4d, 0x0a, 0x17,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x6c, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4d, 0x0a, 0x1b, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x56, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x52, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0x51, 0x0a, 0x1b, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x42,
	0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4f, 0x0a,
	0x11, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x09, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x33,
	0x0a, 0x11, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x49, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x61, 0x6e, 0x4a, 0x6f, 0x69, 0x6e,
	0x49, 0x64, 0x73, 0x22, 0x2f, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x56, 0x69,
	0x74, 0x75, 0x6c, 0x61, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x56,
	0x69, 0x74, 0x75, 0x6c, 0x61, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x73, 0x56, 0x69, 0x74, 0x75, 0x6c, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x56, 0x69, 0x74, 0x75, 0x6c, 0x61, 0x6c, 0x22, 0x4c, 0x0a, 0x0f,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x40, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x56, 0x69, 0x74, 0x75, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x42,
	0x79, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x73, 0x73,
	0x67, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x73, 0x73, 0x67, 0x69, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x6e, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x56, 0x69, 0x74, 0x75, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x42, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x75, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x75,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x6c, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xae, 0x01, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x56, 0x69, 0x74, 0x75, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x73, 0x73, 0x67, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x67, 0x69, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x74, 0x69, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x75, 0x74, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x70, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x56, 0x69, 0x74, 0x75, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x53, 0x74, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x53, 0x74, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22,
	0x3c, 0x0a, 0x18, 0x47, 0x65, 0x6e, 0x56, 0x69, 0x74, 0x75, 0x6c, 0x61, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x4d, 0x0a,
	0x19, 0x47, 0x65, 0x6e, 0x56, 0x69, 0x74, 0x75, 0x6c, 0x61, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x53, 0x74, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x53, 0x74, 0x72, 0x22, 0x8a, 0x01, 0x0a,
	0x0e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x64, 0x6e, 0x56, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x42,
	0x67, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x42, 0x67,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x41, 0x75, 0x74, 0x6f, 0x50, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x41, 0x75, 0x74, 0x6f, 0x50, 0x61, 0x79, 0x22, 0x72, 0x0a, 0x0e, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x64, 0x6e, 0x50, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x50,
	0x61, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x50, 0x61, 0x79, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x79, 0x41, 0x6d, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x50, 0x61, 0x79, 0x41, 0x6d, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x67, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x42, 0x67, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x95, 0x01,
	0x0a, 0x0c, 0x42, 0x75, 0x79, 0x43, 0x64, 0x6e, 0x56, 0x69, 0x70, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x69, 0x70, 0x4c, 0x76, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x56, 0x69, 0x70, 0x4c, 0x76, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x73, 0x73, 0x77, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x61, 0x73, 0x73, 0x77, 0x64, 0x12, 0x25,
	0x0a, 0x06, 0x44, 0x65, 0x62, 0x75, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x06, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x73, 0x22, 0x7d, 0x0a, 0x0c, 0x42, 0x75, 0x79, 0x43, 0x64, 0x6e, 0x56,
	0x69, 0x70, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x56, 0x69, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x62, 0x69,
	0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x64, 0x6e, 0x56, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x56, 0x69, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x45, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x43, 0x64, 0x6e, 0x56, 0x69,
	0x70, 0x41, 0x75, 0x74, 0x6f, 0x50, 0x61, 0x79, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0x84, 0x01, 0x0a, 0x13,
	0x53, 0x65, 0x74, 0x43, 0x64, 0x6e, 0x56, 0x69, 0x70, 0x41, 0x75, 0x74, 0x6f, 0x50, 0x61, 0x79,
	0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x56, 0x69, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x64, 0x6e, 0x56, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x56, 0x69, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x2e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x64, 0x6e,
	0x50, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0xc0, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x64,
	0x6e, 0x50, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x52,
	0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x52, 0x65,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x39, 0x0a, 0x07, 0x56, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x64, 0x6e, 0x56, 0x69, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x07, 0x56, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x07, 0x50, 0x61,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x64, 0x6e, 0x50, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x50, 0x61,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x2e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x64, 0x6e, 0x56, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x64, 0x6e, 0x56, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x56, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x64, 0x6e, 0x56, 0x69, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x56, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x26, 0x0a,
	0x0c, 0x43, 0x68, 0x6b, 0x43, 0x64, 0x6e, 0x56, 0x69, 0x70, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x24, 0x0a, 0x0c, 0x43, 0x68, 0x6b, 0x43, 0x64, 0x6e, 0x56,
	0x69, 0x70, 0x52, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x56, 0x69, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x56, 0x69, 0x70, 0x22, 0x56, 0x0a, 0x0c, 0x41,
	0x64, 0x64, 0x43, 0x64, 0x6e, 0x56, 0x69, 0x70, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x69, 0x70, 0x4c, 0x76, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x56, 0x69, 0x70, 0x4c, 0x76, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x73, 0x22, 0x40, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x43, 0x64, 0x6e, 0x56, 0x69, 0x70,
	0x52, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x75, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x53, 0x75, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x6c, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73,
	0x53, 0x65, 0x6c, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x22, 0x7a, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x53, 0x65,
	0x6c, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x49, 0x73, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x49, 0x73, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x93, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x72, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x52, 0x0f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x41, 0x72, 0x72, 0x22, 0xd1, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x4b, 0x0a, 0x06, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x33, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f,
	0x0a, 0x05, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x22,
	0x38, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x22, 0x29, 0x0a, 0x0e, 0x41, 0x64, 0x64,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x79, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0xa6, 0x01, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x44, 0x61, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4b, 0x0a, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x41, 0x64, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x2c, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x22, 0x36, 0x0a,
	0x1b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc0, 0x01, 0x0a, 0x1e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x58, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x2c, 0x0a, 0x0a, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x22, 0x31, 0x0a, 0x16, 0x52, 0x65, 0x63, 0x76,
	0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x19,
	0x52, 0x65, 0x63, 0x76, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x53, 0x0a, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x70,
	0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x63, 0x76, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x2c,
	0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x22, 0x31, 0x0a, 0x16,
	0x52, 0x65, 0x63, 0x76, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x9e, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x76, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x44, 0x65,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x53, 0x0a,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x35, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x76, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x44, 0x65, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x2c, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01,
	0x22, 0x19, 0x0a, 0x17, 0x52, 0x65, 0x63, 0x76, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x22, 0xb9, 0x01, 0x0a, 0x1a,
	0x52, 0x65, 0x63, 0x76, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x54, 0x0a, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e,
	0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x63, 0x76, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2c, 0x0a, 0x0a, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x22, 0x49, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x73, 0x4d, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x4d, 0x75,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x52, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x34, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x4d, 0x75, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x2c, 0x0a, 0x0a, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x22, 0x41, 0x0a, 0x15, 0x53, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0x9c, 0x01, 0x0a,
	0x18, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x52, 0x0a, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x70,
	0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x2c, 0x0a,
	0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x22, 0x2f, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xae, 0x01, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x52, 0x0a, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x70,
	0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22,
	0x2c, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x22, 0x69, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xc9, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x2c, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0x01, 0x22, 0x46, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x70, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x1c,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x22, 0xaf, 0x01, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x70, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4f, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x70, 0x62, 0x69, 0x6d,
	0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x70, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x2c, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x22, 0xa0,
	0x01, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x49, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x49,
	0x70, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x55,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x55,
	0x70, 0x22, 0x4d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x70, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x75, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70,
	0x22, 0xcd, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x70, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x51, 0x0a, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x33, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x70, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x31, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x52, 0x05, 0x61, 0x64, 0x64,
	0x72, 0x73, 0x22, 0x2c, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01,
	0x22, 0x61, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x49, 0x70, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x5f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x69, 0x67,
	0x6e, 0x55, 0x70, 0x22, 0x9a, 0x01, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x49, 0x70, 0x41, 0x64,
	0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x51, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x33, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x70, 0x41, 0x64, 0x64, 0x4f, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x2c, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01,
	0x22, 0x41, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x61,
	0x69, 0x63, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x70, 0x61, 0x69, 0x63, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4f, 0x0a,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x31, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x61, 0x69,
	0x63, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x2c, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0x01, 0x22, 0x42, 0x0a, 0x13, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x55, 0x53,
	0x65, 0x72, 0x53, 0x70, 0x61, 0x69, 0x63, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x16, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x55, 0x53, 0x65, 0x72, 0x53, 0x70, 0x61, 0x69, 0x63, 0x6c, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x55,
	0x53, 0x65, 0x72, 0x53, 0x70, 0x61, 0x69, 0x63, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x2c, 0x0a,
	0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x22, 0x3f, 0x0a, 0x10, 0x44,
	0x65, 0x6c, 0x55, 0x53, 0x65, 0x72, 0x53, 0x70, 0x61, 0x69, 0x63, 0x6c, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xaa, 0x01, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x55, 0x53, 0x65, 0x72, 0x53, 0x70, 0x61, 0x69, 0x63, 0x6c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x4d, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x55, 0x53, 0x65,
	0x72, 0x53, 0x70, 0x61, 0x69, 0x63, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x2c, 0x0a, 0x0a, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x22, 0x29, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x55, 0x53, 0x65, 0x72, 0x53, 0x70, 0x61, 0x69, 0x63, 0x6c, 0x52, 0x65, 0x71,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55,
	0x53, 0x65, 0x72, 0x53, 0x70, 0x61, 0x69, 0x63, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x50, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x32, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x53, 0x65, 0x72, 0x53,
	0x70, 0x61, 0x69, 0x63, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x72, 0x75, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x72, 0x75, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2c, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0x01, 0x22, 0x8e, 0x02, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x1c, 0x0a, 0x09, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0xfb, 0x01, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4b, 0x0a, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2d, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x80, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01,
	0x12, 0x17, 0x0a, 0x13, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x03, 0x12,
	0x14, 0x0a, 0x10, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x57, 0x61,
	0x69, 0x74, 0x10, 0x05, 0x22, 0xd5, 0x02, 0x0a, 0x16, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x23, 0x0a, 0x0d, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x69, 0x6e, 0x64, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x2e, 0x0a, 0x14,
	0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x9a, 0x01, 0x0a,
	0x17, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x45, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x55, 0x0a, 0x0d, 0x55, 0x73, 0x65,
	0x72, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x74, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x45, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78,
	0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x45, 0x78, 0x70,
	0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78,
	0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x0e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73,
	0x65, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x75, 0x73, 0x65, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x75, 0x73, 0x65, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x73, 0x65,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x22, 0xb0, 0x01, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d,
	0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x12, 0x47, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70,
	0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x52, 0x0e, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x22, 0x57, 0x0a,
	0x1b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x18, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x66,
	0x72, 0x6f, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x6f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x6f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22,
	0x67, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x3e, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6a, 0x73, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x2e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xc1, 0x01, 0x0a,
	0x11, 0x55, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x21, 0x0a,
	0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67,
	0x22, 0xf6, 0x01, 0x0a, 0x14, 0x55, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x43, 0x68,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x34, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x68, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x68, 0x61, 0x74,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x6e, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07,
	0x6e, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x14, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x75, 0x70, 0x70, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x67, 0x65, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x67, 0x65, 0x6f, 0x12, 0x23,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x22, 0x53, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x53, 0x75, 0x70, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38,
	0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x22, 0xbe, 0x02, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x42,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x70,
	0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x74, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x73, 0x42, 0x6f, 0x74, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x10, 0x05, 0x12,
	0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0x06, 0x22, 0x9a, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x69,
	0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22,
	0x4c, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x6d, 0x0a,
	0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x47, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x47, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x4b, 0x0a, 0x17,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x67, 0x0a, 0x12, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x23, 0x0a,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x22, 0x49, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x90, 0x01,
	0x0a, 0x11, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x41, 0x72, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70,
	0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52,
	0x0f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x72, 0x72,
	0x22, 0x46, 0x0a, 0x14, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xab, 0x02, 0x0a, 0x0f, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x77, 0x69, 0x74, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x22, 0xb3, 0x02, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x22, 0x0a,
	0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x5f,
	0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x86, 0x01, 0x0a,
	0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x47, 0x72, 0x65, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72,
	0x65, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x65, 0x65, 0x74,
	0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x98, 0x02, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x73, 0x47, 0x72, 0x65, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66,
	0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x6f,
	0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x6f,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d,
	0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x30, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x39, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x52, 0x0a,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x41, 0x72, 0x72, 0x22, 0xaf, 0x02, 0x0a, 0x07, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x38, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x77, 0x69, 0x74, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x43, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x60, 0x0a, 0x10,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x45,
	0x0a, 0x13, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x75, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x5d, 0x0a, 0x21,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x6b, 0x0a, 0x1b, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x53, 0x6f, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x5a, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x53, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x55, 0x0a, 0x15, 0x52, 0x65, 0x61, 0x64, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x54, 0x0a, 0x18, 0x52,
	0x65, 0x61, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69,
	0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45,
	0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0xa2, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xbd, 0x01, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x65, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x65, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x72,
	0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0xdd, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x69, 0x66, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70,
	0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d,
	0x61, 0x78, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x69, 0x66, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x32, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x22, 0xf3, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x56, 0x32, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x62, 0x69, 0x6d,
	0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x75, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x38, 0x0a,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x6a, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x23,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x22, 0x81, 0x02, 0x0a, 0x17, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x38, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x38, 0x0a,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65,
	0x6c, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x6c,
	0x66, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x61,
	0x72, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x41, 0x72, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x92,
	0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70,
	0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64,
	0x12, 0x38, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x4e, 0x0a, 0x12, 0x53, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x22, 0xcf, 0x02, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x75, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x73,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x62, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x75,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x2d, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x45,
	0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78,
	0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x91, 0x01, 0x0a, 0x13,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0b,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0a,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22,
	0x8f, 0x01, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x52, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x69, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x22, 0x4d, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x6c, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x4e, 0x0a,
	0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x30, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x22,
	0x8e, 0x01, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x49, 0x73, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x49, 0x73, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x53, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x6f, 0x72, 0x74,
	0x22, 0x8d, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3b, 0x0a, 0x09, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70,
	0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d,
	0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x2f, 0x0a, 0x15, 0x49, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x66, 0x0a, 0x17, 0x49, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x39, 0x0a, 0x0a,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x79, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x79, 0x65, 0x73, 0x22, 0x33, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x93,
	0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4f, 0x72,
	0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x07, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2d, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x49, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x49, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x22, 0x16, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x22, 0x6e, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x22, 0x71, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d,
	0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0xbd, 0x02, 0x0a, 0x13, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x22, 0xaa, 0x01, 0x0a, 0x15, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x48, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2d,
	0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70,
	0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x22, 0x66, 0x0a,
	0x10, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xa7, 0x01, 0x0a, 0x12, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f,
	0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x48, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x70, 0x62, 0x69, 0x6d,
	0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x2d, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x22,
	0x4d, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x4e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x4e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x22, 0xa8,
	0x01, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x48, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x55, 0x73,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x22, 0x8c, 0x02, 0x0a, 0x19, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x49, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x28, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x41, 0x0a, 0x10, 0x42, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x12, 0x42, 0x69, 0x6e, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0a,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x2d, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xb9, 0x01, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4f, 0x41,
	0x75, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x2a, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x87, 0x01, 0x0a, 0x14, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41,
	0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x15, 0x0a,
	0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b,
	0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3f, 0x0a,
	0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x94,
	0x04, 0x0a, 0x0b, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x56, 0x31, 0x52, 0x65, 0x71, 0x12, 0x20,
	0x0a, 0x0b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x24, 0x0a, 0x0d, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73,
	0x5f, 0x62, 0x6f, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x42, 0x6f,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x6f, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x62,
	0x6f, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x74, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x6f, 0x74, 0x5f, 0x6e, 0x6f, 0x5f,
	0x63, 0x68, 0x61, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x6f, 0x74,
	0x4e, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x64, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x63, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61,
	0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xb4, 0x02, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70,
	0x56, 0x31, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3d, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x56, 0x31,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xac, 0x01,
	0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x10, 0x03, 0x12, 0x12, 0x0a,
	0x0e, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10,
	0x04, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x57, 0x61,
	0x69, 0x74, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x52, 0x6f,
	0x62, 0x6f, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x07, 0x22, 0x39, 0x0a, 0x1c,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x1f, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x97, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79,
	0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x1a, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70,
	0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x33, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x73, 0x22, 0xd2, 0x01, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x62, 0x6f, 0x75,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x49, 0x73, 0x42, 0x6f, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49,
	0x73, 0x42, 0x6f, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x53, 0x65, 0x78, 0x22, 0x88, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52,
	0x73, 0x70, 0x12, 0x34, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x52, 0x6f, 0x6c, 0x65,
	0x41, 0x72, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x62, 0x69, 0x6d,
	0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x72,
	0x72, 0x22, 0xd7, 0x01, 0x0a, 0x09, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x56, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x52, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x52, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x16, 0x0a, 0x06, 0x50, 0x61, 0x73, 0x73, 0x77, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x50, 0x61, 0x73, 0x73, 0x77, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x22, 0xd5, 0x02, 0x0a, 0x0e,
	0x49, 0x6e, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x52, 0x65, 0x71, 0x12, 0x40,
	0x0a, 0x06, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28,
	0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x52, 0x65, 0x71, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x56, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x56, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x88, 0x01, 0x0a, 0x08, 0x4f, 0x70, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x74, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x69, 0x6e,
	0x64, 0x52, 0x65, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x6f, 0x10, 0x04, 0x12, 0x13,
	0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x65, 0x74, 0x74, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x10, 0x05, 0x22, 0x7a, 0x0a, 0x0e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x4f, 0x70, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x72, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69,
	0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x6e,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72, 0x41, 0x72, 0x72, 0x22,
	0x42, 0x0a, 0x10, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x52,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x22, 0x46, 0x0a, 0x10, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x6c, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4d, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69,
	0x74, 0x68, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x07, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x08, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x70, 0x62, 0x69, 0x6d,
	0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3b, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x72, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74,
	0x65, 0x64, 0x10, 0x02, 0x22, 0x6e, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x73, 0x52, 0x73,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x70, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x85, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x55,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x51,
	0x0a, 0x17, 0x41, 0x64, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x22, 0x5b, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8b,
	0x01, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x34, 0x0a, 0x08,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x47, 0x0a, 0x11,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x42, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x42, 0x79, 0x22, 0x4d, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x51, 0x0a, 0x09, 0x4d, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x5b, 0x0a, 0x09, 0x4d, 0x79, 0x54, 0x65, 0x61,
	0x6d, 0x52, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x72, 0x6f, 0x6e, 0x74,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x54, 0x0a, 0x18, 0x52, 0x65, 0x61,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x33, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0xd1, 0x01, 0x0a, 0x13, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6f,
	0x6e, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x66, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d,
	0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x3c, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x68,
	0x0a, 0x16, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x52, 0x0a, 0x16, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x73, 0x70, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x76, 0x0a, 0x15,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x56, 0x31, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65, 0x78,
	0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x22, 0x51, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x31, 0x52, 0x73, 0x70, 0x12, 0x38, 0x0a,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x2a, 0xc5, 0x04, 0x0a, 0x09, 0x52, 0x65, 0x45, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x42, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x03,
	0x12, 0x14, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x63, 0x63, 0x75,
	0x70, 0x69, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x08,
	0x12, 0x0d, 0x0a, 0x09, 0x55, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x09, 0x12,
	0x09, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x61, 0x73, 0x68, 0x4e, 0x6f, 0x74, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x10, 0x0e, 0x12, 0x0b, 0x0a,
	0x07, 0x56, 0x69, 0x70, 0x4f, 0x6e, 0x6c, 0x79, 0x10, 0x0f, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6c,
	0x6c, 0x65, 0x67, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x10, 0x10, 0x12, 0x10, 0x0a,
	0x0c, 0x43, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x42, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x10, 0x11, 0x12,
	0x13, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x48, 0x61, 0x73, 0x41, 0x64, 0x64,
	0x65, 0x64, 0x10, 0x12, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x4e,
	0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x13, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x10, 0x14, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x15, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x65, 0x64, 0x69, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0x16, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x74, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x10, 0x17, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x4e, 0x6f, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x10, 0x18, 0x12, 0x17, 0x0a, 0x13, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x10, 0x19, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x10, 0x1a, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x6f, 0x4d, 0x61, 0x6e, 0x79, 0x42, 0x79,
	0x44, 0x61, 0x79, 0x10, 0x1b, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x49, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x10, 0x1c, 0x12, 0x15, 0x0a, 0x11, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x73, 0x42, 0x69, 0x6e, 0x64,
	0x10, 0x1d, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x6f, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x1e, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x4f, 0x54, 0x5f, 0x41,
	0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x10, 0x1f, 0x2a,
	0xd5, 0x01, 0x0a, 0x19, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x53,
	0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x01, 0x12, 0x16,
	0x0a, 0x12, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45,
	0x58, 0x49, 0x53, 0x54, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e,
	0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04,
	0x12, 0x12, 0x0a, 0x0e, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x07, 0x12, 0x17,
	0x0a, 0x13, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x10, 0x08, 0x2a, 0x58, 0x0a, 0x06, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x10,
	0x03, 0x2a, 0xe4, 0x05, 0x0a, 0x0f, 0x55, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x50,
	0x43, 0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x41,
	0x44, 0x44, 0x55, 0x53, 0x45, 0x52, 0x33, 0x35, 0x34, 0x39, 0x5f, 0x45, 0x58, 0x50, 0x10, 0xa0,
	0x1f, 0x12, 0x17, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x50,
	0x72, 0x69, 0x61, 0x76, 0x63, 0x61, 0x79, 0x10, 0xa1, 0x1f, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x68,
	0x61, 0x74, 0x5f, 0x54, 0x6f, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x10, 0xa2, 0x1f, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x55, 0x73,
	0x65, 0x72, 0x5f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0xa3, 0x1f, 0x12, 0x16, 0x0a,
	0x11, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x10, 0xa4, 0x1f, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x45,
	0x50, 0x45, 0x41, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0xa5, 0x1f,
	0x12, 0x1e, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x4e, 0x55, 0x4d, 0x10, 0xa6, 0x1f,
	0x12, 0x24, 0x0a, 0x1f, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x5f,
	0x54, 0x4f, 0x44, 0x41, 0x59, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x58,
	0x4e, 0x55, 0x4d, 0x10, 0xa7, 0x1f, 0x12, 0x20, 0x0a, 0x1b, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x45,
	0x58, 0x43, 0x45, 0x45, 0x44, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d,
	0x41, 0x58, 0x4e, 0x55, 0x4d, 0x10, 0xa8, 0x1f, 0x12, 0x1c, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x74,
	0x5f, 0x50, 0x52, 0x4f, 0x48, 0x49, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x10, 0xa9, 0x1f, 0x12, 0x1e, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x41,
	0x44, 0x4d, 0x49, 0x4e, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0xaa, 0x1f, 0x12, 0x1f, 0x0a, 0x1a, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x41,
	0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0xab, 0x1f, 0x12, 0x17, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x74, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x44, 0x49, 0x53, 0x42, 0x41, 0x4e, 0x44, 0x10, 0xac, 0x1f,
	0x12, 0x16, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4b,
	0x49, 0x43, 0x4b, 0x45, 0x44, 0x10, 0xad, 0x1f, 0x12, 0x1f, 0x0a, 0x1a, 0x43, 0x68, 0x61, 0x74,
	0x5f, 0x48, 0x4f, 0x55, 0x52, 0x53, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x4d, 0x41, 0x58, 0x4e, 0x55, 0x4d, 0x10, 0x92, 0x20, 0x12, 0x1e, 0x0a, 0x19, 0x43, 0x68, 0x61,
	0x74, 0x5f, 0x4f, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x4d, 0x41, 0x58, 0x4e, 0x55, 0x4d, 0x10, 0x93, 0x20, 0x12, 0x11, 0x0a, 0x0c, 0x43, 0x68, 0x61,
	0x74, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x84, 0x20, 0x12, 0x1d, 0x0a, 0x18,
	0x43, 0x68, 0x61, 0x74, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x45,
	0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x85, 0x20, 0x12, 0x19, 0x0a, 0x14, 0x43,
	0x68, 0x61, 0x74, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x86, 0x20, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52,
	0x45, 0x44, 0x49, 0x53, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x87,
	0x20, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x44, 0x42, 0x5f, 0x45, 0x58, 0x43,
	0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x88, 0x20, 0x12, 0x1b, 0x0a, 0x16, 0x43, 0x68, 0x61,
	0x74, 0x5f, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x49, 0x64, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x89, 0x20, 0x12, 0x1f, 0x0a, 0x1a, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x43,
	0x61, 0x6c, 0x6c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x8a, 0x20, 0x12, 0x15, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x74, 0x5f,
	0x44, 0x42, 0x5f, 0x4e, 0x4f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x8b, 0x20, 0x12, 0x18,
	0x0a, 0x13, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x4e, 0x4f, 0x52,
	0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x8c, 0x20, 0x2a, 0x87, 0x01, 0x0a, 0x0f, 0x4f, 0x41, 0x75,
	0x74, 0x68, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x13,
	0x4f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4c,
	0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4c,
	0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4c, 0x4f,
	0x47, 0x49, 0x4e, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45,
	0x10, 0x03, 0x32, 0x9a, 0x7f, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x69,
	0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x22,
	0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x52,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x06, 0x4d, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x1a,
	0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x4d, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x69,
	0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x79, 0x54,
	0x65, 0x61, 0x6d, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x15, 0x52, 0x65, 0x61, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x29, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x70,
	0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x2a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x2a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x69, 0x0a,
	0x13, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e,
	0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x31, 0x12, 0x26,
	0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x56, 0x31, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x31, 0x52, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x6e, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f,
	0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x4a, 0x0a, 0x08, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x56, 0x31, 0x12, 0x1c, 0x2e, 0x70,
	0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x55, 0x70, 0x56, 0x31, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x69,
	0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x55, 0x70, 0x56, 0x31, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x13,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x27, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x4c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x70,
	0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x10, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x24,
	0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x7b, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x2c, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x69,
	0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x70, 0x62, 0x69, 0x6d,
	0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x69, 0x72, 0x74,
	0x68, 0x64, 0x61, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0d,
	0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x21, 0x2e,
	0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x1a, 0x24, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x55, 0x73, 0x65, 0x72, 0x48, 0x61, 0x73, 0x50, 0x61, 0x79, 0x12, 0x23, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x48, 0x61, 0x73, 0x50, 0x61, 0x79, 0x52, 0x65, 0x71,
	0x1a, 0x24, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x48, 0x61, 0x73, 0x50,
	0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x48, 0x61, 0x73, 0x50, 0x61, 0x79, 0x12, 0x24, 0x2e, 0x70,
	0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x48, 0x61, 0x73, 0x50, 0x61, 0x79, 0x52,
	0x65, 0x71, 0x1a, 0x25, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x48,
	0x61, 0x73, 0x50, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x56, 0x69, 0x70, 0x6c, 0x6f, 0x67, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x69, 0x70, 0x6c, 0x6f, 0x67, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x70, 0x62, 0x69, 0x6d,
	0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x56,
	0x69, 0x70, 0x6c, 0x6f, 0x67, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x27,
	0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x12, 0x23, 0x2e, 0x70,
	0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x22, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x41, 0x72, 0x72, 0x12, 0x26, 0x2e,
	0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x41,
	0x72, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x41, 0x72, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x66, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x70,
	0x69, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x12, 0x25, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x28,
	0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x1f, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x1a, 0x22, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x22, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x23, 0x2e,
	0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x1a, 0x26, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x2e, 0x70,
	0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x23,
	0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x69, 0x6d,
	0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x32, 0x12, 0x1a, 0x2e, 0x70,
	0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x10, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x20, 0x2e,
	0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x23, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x1a,
	0x28, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x2e,
	0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x25, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x23, 0x2e,
	0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x1a, 0x26, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x10,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x45, 0x78, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x12, 0x72, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x12, 0x29, 0x2e, 0x70, 0x62, 0x69,
	0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x60, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x12, 0x25, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e,
	0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x57, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x1a, 0x24, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x50, 0x69, 0x63, 0x12, 0x24, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x50, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x50, 0x69, 0x63,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x12, 0x2c, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x28, 0x2e,
	0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x69, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x15,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x41, 0x64, 0x64, 0x12, 0x29, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71,
	0x1a, 0x2c, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x5b, 0x0a, 0x12, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x66, 0x0a,
	0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x25, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x70, 0x62, 0x69, 0x6d,
	0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x25, 0x2e, 0x70, 0x62, 0x69,
	0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x28, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x7e, 0x0a,
	0x19, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x2d, 0x2e, 0x70, 0x62, 0x69,
	0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x70, 0x62, 0x69, 0x6d,
	0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x6f, 0x0a,
	0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x4e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x79, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x2b, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x4e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x69,
	0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x70,
	0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x11, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x75, 0x70, 0x70, 0x12, 0x25,
	0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x75,
	0x70, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x75, 0x70, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x12, 0x69, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x4d, 0x75, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x73, 0x4d, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x29, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x4d, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x12,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x44, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x44,
	0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x41, 0x72, 0x72, 0x12, 0x21, 0x2e,
	0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x72, 0x72, 0x52, 0x65, 0x71,
	0x1a, 0x24, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x72, 0x72,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x14, 0x43, 0x6d, 0x64, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x12, 0x28, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x6d, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x70, 0x62, 0x69,
	0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x64,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x13, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x12, 0x26, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x74, 0x73, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x74, 0x73, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x56, 0x31, 0x12, 0x29,
	0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x56, 0x31, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x70, 0x62, 0x69, 0x6d,
	0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x56,
	0x31, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x56, 0x31, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x69,
	0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x56, 0x31, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e,
	0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x56, 0x31, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x49, 0x64, 0x12, 0x29,
	0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x70, 0x62, 0x69, 0x6d,
	0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x0e, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x2f, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e, 0x70,
	0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x66, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x28,
	0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x12, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x53, 0x65, 0x6c, 0x66, 0x49, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x12, 0x26, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x6c, 0x66, 0x49, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x53, 0x65, 0x6c, 0x66, 0x49, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73,
	0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x28, 0x2e,
	0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x73, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x12, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x70,
	0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41,
	0x64, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x28, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x15,
	0x44, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x28, 0x2e, 0x70, 0x62, 0x69, 0x6d,
	0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x69, 0x0a,
	0x12, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x47, 0x72, 0x65, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x47, 0x72,
	0x65, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x47, 0x72, 0x65, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0d, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x69, 0x6d,
	0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70,
	0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x69,
	0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x29, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x84, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12,
	0x2f, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x32, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x53, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x12, 0x2c, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x53, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x2f, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x53, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x12, 0x52, 0x65, 0x61, 0x64, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x69,
	0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x1a, 0x29, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x81, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2e,
	0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x31,
	0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x56, 0x32, 0x12, 0x30, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x56, 0x32, 0x52, 0x65, 0x71, 0x1a, 0x33, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x56, 0x32, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x84, 0x01,
	0x0a, 0x1b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x12, 0x2f, 0x2e,
	0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x32,
	0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0c, 0x53, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x69,
	0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x70,
	0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x69, 0x6d,
	0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a,
	0x27, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x69, 0x6d,
	0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70, 0x62, 0x69,
	0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x57, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0x20, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x23, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0b, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70, 0x62, 0x69, 0x6d,
	0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x62, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x55, 0x6e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e,
	0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x47,
	0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x69, 0x6d,
	0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x29, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x47, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x69,
	0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x73, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x70,
	0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x14, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x25, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x79, 0x73, 0x57, 0x68, 0x69, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x53, 0x79, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x2e, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x1a, 0x31, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53,
	0x79, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x79, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x1a, 0x26, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x53, 0x79, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x72, 0x72,
	0x12, 0x26, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x72, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79,
	0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x72, 0x72, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x53, 0x79, 0x73, 0x57,
	0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x53, 0x79,
	0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e,
	0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x6c, 0x53, 0x79, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x63, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x44, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x63, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x55, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x1e, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x5b, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x66, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x25, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x70, 0x62, 0x69, 0x6d,
	0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x28, 0x2e,
	0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x47, 0x70, 0x73, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x70,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x70,
	0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x69, 0x6d,
	0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x60, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x70, 0x62, 0x69,
	0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x27,
	0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e,
	0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x70,
	0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x63,
	0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45,
	0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x70, 0x61, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x64, 0x12, 0x25, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45,
	0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x28, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x12, 0x25, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x70, 0x61, 0x69, 0x63, 0x6c, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x70, 0x61, 0x69, 0x63, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x61, 0x69, 0x63, 0x6c, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x10, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x55,
	0x53, 0x65, 0x72, 0x53, 0x70, 0x61, 0x69, 0x63, 0x6c, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x69, 0x6d,
	0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x55, 0x53, 0x65, 0x72, 0x53, 0x70, 0x61, 0x69, 0x63, 0x6c, 0x52, 0x65, 0x71, 0x1a,
	0x27, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x55, 0x53, 0x65, 0x72, 0x53, 0x70, 0x61, 0x69,
	0x63, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0d, 0x44, 0x65,
	0x6c, 0x55, 0x53, 0x65, 0x72, 0x53, 0x70, 0x61, 0x69, 0x63, 0x6c, 0x12, 0x21, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x6c, 0x55, 0x53, 0x65, 0x72, 0x53, 0x70, 0x61, 0x69, 0x63, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x24,
	0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x6c, 0x55, 0x53, 0x65, 0x72, 0x53, 0x70, 0x61, 0x69, 0x63, 0x6c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x55, 0x53, 0x65, 0x72, 0x53, 0x70, 0x61, 0x69, 0x63, 0x6c, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x69,
	0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x55, 0x53, 0x65, 0x72, 0x53, 0x70, 0x61, 0x69, 0x63, 0x6c, 0x52, 0x65, 0x71,
	0x1a, 0x27, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x53, 0x65, 0x72, 0x53, 0x70, 0x61,
	0x69, 0x63, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x11, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x70, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x25, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x70, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x70,
	0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x70,
	0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x70, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x70, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x70, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x2e, 0x70, 0x62, 0x69,
	0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x70, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x28, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x70, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x63, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x69, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x55, 0x6e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x29, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x69, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x55, 0x6e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x76,
	0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x27, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x63, 0x76, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x76, 0x4c,
	0x6f, 0x63, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x76, 0x4c, 0x6f,
	0x63, 0x6b, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x2e,
	0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x63, 0x76, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x76, 0x4c, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x76, 0x4c, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x28, 0x2e, 0x70,
	0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x63, 0x76, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x76, 0x4c, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x12, 0x2c, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x1a,
	0x2f, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x54, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61,
	0x79, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x79, 0x52,
	0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x25, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x12, 0x49, 0x73, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x26, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x49, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x2e,
	0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4f, 0x72, 0x69, 0x65, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x70, 0x62, 0x69, 0x6d,
	0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x10, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x24, 0x2e,
	0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x65, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x25, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x70, 0x62, 0x69, 0x6d,
	0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x46, 0x6f,
	0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x2e, 0x70,
	0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x42, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x25, 0x2e, 0x70, 0x62, 0x69, 0x6d,
	0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x28, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x10,
	0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x12, 0x24, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x74, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x2e, 0x70, 0x62, 0x69,
	0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0d, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f,
	0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f,
	0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x70, 0x62, 0x69,
	0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x73,
	0x73, 0x57, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x5c, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x57,
	0x6f, 0x72, 0x64, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x57, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x69, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x53,
	0x65, 0x6c, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e,
	0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x09, 0x43, 0x68,
	0x6b, 0x43, 0x64, 0x6e, 0x56, 0x69, 0x70, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x6b, 0x43, 0x64, 0x6e,
	0x56, 0x69, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x6b, 0x43, 0x64, 0x6e, 0x56,
	0x69, 0x70, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x43, 0x64,
	0x6e, 0x56, 0x69, 0x70, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x64, 0x6e, 0x56, 0x69, 0x70,
	0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x64, 0x6e, 0x56, 0x69, 0x70, 0x52,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x09, 0x42, 0x75, 0x79, 0x43, 0x64, 0x6e, 0x56, 0x69,
	0x70, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x79, 0x43, 0x64, 0x6e, 0x56, 0x69, 0x70, 0x52, 0x65, 0x71,
	0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x42, 0x75, 0x79, 0x43, 0x64, 0x6e, 0x56, 0x69, 0x70, 0x52, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x60, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x43, 0x64, 0x6e, 0x56, 0x69, 0x70, 0x41, 0x75,
	0x74, 0x6f, 0x50, 0x61, 0x79, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x64, 0x6e, 0x56, 0x69,
	0x70, 0x41, 0x75, 0x74, 0x6f, 0x50, 0x61, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x74, 0x43, 0x64, 0x6e, 0x56, 0x69, 0x70, 0x41, 0x75, 0x74, 0x6f, 0x50, 0x61, 0x79, 0x52, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x64,
	0x6e, 0x56, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x64, 0x6e, 0x56, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a,
	0x25, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x64, 0x6e, 0x56, 0x69, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x64, 0x6e, 0x50, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x2e,
	0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x64, 0x6e, 0x50, 0x61, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x64,
	0x6e, 0x50, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x70, 0x0a,
	0x15, 0x47, 0x65, 0x6e, 0x56, 0x69, 0x74, 0x75, 0x6c, 0x61, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x29, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x6e, 0x56, 0x69, 0x74, 0x75,
	0x6c, 0x61, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x2a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x6e, 0x56, 0x69, 0x74, 0x75, 0x6c, 0x61, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x6d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x56, 0x69, 0x74, 0x75, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x28, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x69, 0x74,
	0x75, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x29, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x69, 0x74, 0x75, 0x6c, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x79,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x56, 0x69, 0x74, 0x75, 0x61, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x42, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2c, 0x2e, 0x70, 0x62, 0x69,
	0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x56, 0x69, 0x74, 0x75, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x42, 0x79,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x56, 0x69, 0x74, 0x75, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x42, 0x79, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x12, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x73, 0x56, 0x69, 0x74, 0x75, 0x6c, 0x61, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12,
	0x26, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x56, 0x69, 0x74, 0x75, 0x6c, 0x61, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x73, 0x56, 0x69, 0x74, 0x75, 0x6c, 0x61, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x55, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x56, 0x69, 0x74, 0x75,
	0x61, 0x6c, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x56, 0x69, 0x74, 0x75, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x56, 0x69, 0x74,
	0x75, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x15, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x73, 0x56, 0x69, 0x74, 0x75, 0x6c, 0x61, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x41,
	0x72, 0x72, 0x12, 0x29, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x56, 0x69, 0x74, 0x75,
	0x6c, 0x61, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x41, 0x72, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e,
	0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x56, 0x69, 0x74, 0x75, 0x6c, 0x61, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x41, 0x72, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x17, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x56, 0x69, 0x74, 0x75, 0x6c,
	0x61, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x2b, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x56, 0x69, 0x74, 0x75, 0x6c, 0x61, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x56, 0x69, 0x74, 0x75, 0x6c, 0x61, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0e, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70, 0x62, 0x69, 0x6d,
	0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x69, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x79, 0x0a, 0x18, 0x56, 0x69, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x61,
	0x6e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x2c, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x69,
	0x74, 0x75, 0x61, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x70, 0x62, 0x69, 0x6d,
	0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x69, 0x74, 0x75,
	0x61, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x56, 0x69, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2c, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x69, 0x74, 0x75,
	0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x69, 0x74, 0x75, 0x61, 0x6c,
	0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x19, 0x42, 0x69, 0x6e, 0x64, 0x56, 0x69, 0x74,
	0x75, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x2d, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x56, 0x69, 0x74, 0x75, 0x61, 0x6c, 0x53,
	0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x1a, 0x2e, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x56, 0x69, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65,
	0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x14, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x69,
	0x6e, 0x64, 0x52, 0x65, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x28, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x6c, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x42,
	0x69, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x78, 0x0a, 0x18, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x2c, 0x2e,
	0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x42,
	0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x29, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x42, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x29, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x69, 0x6e, 0x64,
	0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0c,
	0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x20, 0x2e, 0x70,
	0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41,
	0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x21,
	0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x75, 0x73, 0x65, 0x72, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e,
	0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x75, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x50, 0x72, 0x65, 0x74, 0x74, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x70,
	0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x65, 0x74, 0x74, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x65,
	0x74, 0x74, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x66,
	0x0a, 0x12, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x65, 0x74, 0x74, 0x79, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x65,
	0x74, 0x74, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x70,
	0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x65, 0x74, 0x74, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x73, 0x12, 0x28,
	0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0b, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x4f, 0x70, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4f,
	0x70, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x4f, 0x70, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0d, 0x42, 0x69, 0x6e, 0x64, 0x52,
	0x65, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x52,
	0x65, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x70, 0x62,
	0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x69,
	0x6e, 0x64, 0x52, 0x65, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x72, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x73, 0x12, 0x2a, 0x2e, 0x70, 0x62, 0x69,
	0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68,
	0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x73, 0x52,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x69,
	0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x29, 0x2e, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x42,
	0x21, 0x5a, 0x1f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x70, 0x62, 0x69, 0x6d, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_imuinfoserver_proto_rawDescOnce sync.Once
	file_imuinfoserver_proto_rawDescData = file_imuinfoserver_proto_rawDesc
)

func file_imuinfoserver_proto_rawDescGZIP() []byte {
	file_imuinfoserver_proto_rawDescOnce.Do(func() {
		file_imuinfoserver_proto_rawDescData = protoimpl.X.CompressGZIP(file_imuinfoserver_proto_rawDescData)
	})
	return file_imuinfoserver_proto_rawDescData
}

var file_imuinfoserver_proto_enumTypes = make([]protoimpl.EnumInfo, 30)
var file_imuinfoserver_proto_msgTypes = make([]protoimpl.MessageInfo, 416)
var file_imuinfoserver_proto_goTypes = []interface{}{
	(ReErrCode)(0),                                 // 0: pbimuinfoserver.ReErrCode
	(PasswordRegistryErrorCode)(0),                 // 1: pbimuinfoserver.PasswordRegistryErrorCode
	(Switch)(0),                                    // 2: pbimuinfoserver.Switch
	(UChatResultCode)(0),                           // 3: pbimuinfoserver.UChatResultCode
	(OAuthLoginError)(0),                           // 4: pbimuinfoserver.OAuthLoginError
	(UpdateSwitchResult_ResultCode)(0),             // 5: pbimuinfoserver.UpdateSwitchResult.ResultCode
	(GetSwitchStatusResult_ResultCode)(0),          // 6: pbimuinfoserver.GetSwitchStatusResult.ResultCode
	(SignUpVitualResp_ResultCode)(0),               // 7: pbimuinfoserver.SignUpVitualResp.ResultCode
	(GetPhoneBookInfosResult_ResultCode)(0),        // 8: pbimuinfoserver.GetPhoneBookInfosResult.ResultCode
	(AddLoginDayResult_ResultCode)(0),              // 9: pbimuinfoserver.AddLoginDayResult.ResultCode
	(CheckDigitalWalletSwitchResult_ResultCode)(0), // 10: pbimuinfoserver.CheckDigitalWalletSwitchResult.ResultCode
	(RecvLockerAddUserIdResult_ResultCode)(0),      // 11: pbimuinfoserver.RecvLockerAddUserIdResult.ResultCode
	(RecvLockerDelUserIdResult_ResultCode)(0),      // 12: pbimuinfoserver.RecvLockerDelUserIdResult.ResultCode
	(RecvLockerGetUserIdsResult_ResultCode)(0),     // 13: pbimuinfoserver.RecvLockerGetUserIdsResult.ResultCode
	(CheckIsMuteContactResult_ResultCode)(0),       // 14: pbimuinfoserver.CheckIsMuteContactResult.ResultCode
	(SetUserUnsubscribeResult_ResultCode)(0),       // 15: pbimuinfoserver.SetUserUnsubscribeResult.ResultCode
	(GetUserUnsubscribeResult_ResultCode)(0),       // 16: pbimuinfoserver.GetUserUnsubscribeResult.ResultCode
	(GetRelationUsersResult_ResultCode)(0),         // 17: pbimuinfoserver.GetRelationUsersResult.ResultCode
	(GetUserIpByAddrResult_ResultCode)(0),          // 18: pbimuinfoserver.GetUserIpByAddrResult.ResultCode
	(GetUserIpByUserIdResult_ResultCode)(0),        // 19: pbimuinfoserver.GetUserIpByUserIdResult.ResultCode
	(UserIpAddOrUpdateResult_ResultCode)(0),        // 20: pbimuinfoserver.UserIpAddOrUpdateResult.ResultCode
	(CheckUserSpaiclResult_ResultCode)(0),          // 21: pbimuinfoserver.CheckUserSpaiclResult.ResultCode
	(InsertUSerSpaiclResult_ResultCode)(0),         // 22: pbimuinfoserver.InsertUSerSpaiclResult.ResultCode
	(DelUSerSpaiclResult_ResultCode)(0),            // 23: pbimuinfoserver.DelUSerSpaiclResult.ResultCode
	(GetAllUSerSpaiclResult_ResultCode)(0),         // 24: pbimuinfoserver.GetAllUSerSpaiclResult.ResultCode
	(ChangePhoneResult_ResultCode)(0),              // 25: pbimuinfoserver.ChangePhoneResult.ResultCode
	(DeleteUserUsernameResult_Code)(0),             // 26: pbimuinfoserver.DeleteUserUsernameResult.Code
	(SignUpV1Reply_ResultCode)(0),                  // 27: pbimuinfoserver.SignUpV1Reply.ResultCode
	(InnerUserOpReq_OperType)(0),                   // 28: pbimuinfoserver.InnerUserOpReq.OperType
	(Relation_RelationType)(0),                     // 29: pbimuinfoserver.Relation.RelationType
	(*GetUserInfoByIdReq)(nil),                     // 30: pbimuinfoserver.GetUserInfoByIdReq
	(*GetUserInfoByIdArrReq)(nil),                  // 31: pbimuinfoserver.GetUserInfoByIdArrReq
	(*UserInfoArray)(nil),                          // 32: pbimuinfoserver.UserInfoArray
	(*UserInfo)(nil),                               // 33: pbimuinfoserver.userInfo
	(*GetUserExpireByIdReq)(nil),                   // 34: pbimuinfoserver.GetUserExpireByIdReq
	(*GetUserExpireByIdResult)(nil),                // 35: pbimuinfoserver.GetUserExpireByIdResult
	(*GetUserByphone)(nil),                         // 36: pbimuinfoserver.GetUserByphone
	(*GetUserInfoResult)(nil),                      // 37: pbimuinfoserver.GetUserInfoResult
	(*GetUserInfoByIdArrResult)(nil),               // 38: pbimuinfoserver.GetUserInfoByIdArrResult
	(*GetUserByUsername)(nil),                      // 39: pbimuinfoserver.GetUserByUsername
	(*UpdatePhotoInfoReq)(nil),                     // 40: pbimuinfoserver.updatePhotoInfoReq
	(*GetPhotoInfoReq)(nil),                        // 41: pbimuinfoserver.GetPhotoInfoReq
	(*UpdateUserPhotoResult)(nil),                  // 42: pbimuinfoserver.UpdateUserPhotoResult
	(*GetUserPhotoResult)(nil),                     // 43: pbimuinfoserver.GetUserPhotoResult
	(*UpdateUserProfileReq)(nil),                   // 44: pbimuinfoserver.UpdateUserProfileReq
	(*UpdateUserFullReq)(nil),                      // 45: pbimuinfoserver.UpdateUserFullReq
	(*UpdateUserFullResult)(nil),                   // 46: pbimuinfoserver.UpdateUserFullResult
	(*UpdateUserProfileResult)(nil),                // 47: pbimuinfoserver.UpdateUserProfileResult
	(*StatusReq)(nil),                              // 48: pbimuinfoserver.StatusReq
	(*StatusResult)(nil),                           // 49: pbimuinfoserver.StatusResult
	(*UpdateExpireReq)(nil),                        // 50: pbimuinfoserver.UpdateExpireReq
	(*UpdateExpireResult)(nil),                     // 51: pbimuinfoserver.UpdateExpireResult
	(*UserClusterChange)(nil),                      // 52: pbimuinfoserver.UserClusterChange
	(*UserClusterChangeResult)(nil),                // 53: pbimuinfoserver.UserClusterChangeResult
	(*UpdateuserNameReq)(nil),                      // 54: pbimuinfoserver.UpdateuserNameReq
	(*UpdateuserNameResult)(nil),                   // 55: pbimuinfoserver.UpdateuserNameResult
	(*UpdateUserLevelReq)(nil),                     // 56: pbimuinfoserver.UpdateUserLevelReq
	(*UpdateUserLevelResult)(nil),                  // 57: pbimuinfoserver.UpdateUserLevelResult
	(*UpdateUserExtionReq)(nil),                    // 58: pbimuinfoserver.UpdateUserExtionReq
	(*UpdateUserExtionResult)(nil),                 // 59: pbimuinfoserver.UpdateUserExtionResult
	(*CheckPhoneRegisterReq)(nil),                  // 60: pbimuinfoserver.CheckPhoneRegisterReq
	(*CheckPhoneRegisterResult)(nil),               // 61: pbimuinfoserver.CheckPhoneRegisterResult
	(*DeleteAccountByIdReq)(nil),                   // 62: pbimuinfoserver.DeleteAccountByIdReq
	(*DelAccountResult)(nil),                       // 63: pbimuinfoserver.DelAccountResult
	(*BotUpdateInfo)(nil),                          // 64: pbimuinfoserver.BotUpdateInfo
	(*BotUpdateInfoResult)(nil),                    // 65: pbimuinfoserver.BotUpdateInfoResult
	(*DelContactReq)(nil),                          // 66: pbimuinfoserver.DelContactReq
	(*DelContactResult)(nil),                       // 67: pbimuinfoserver.DelContactResult
	(*AcceptContactReq)(nil),                       // 68: pbimuinfoserver.AcceptContactReq
	(*AcceptContactResult)(nil),                    // 69: pbimuinfoserver.AcceptContactResult
	(*ContactIdHash)(nil),                          // 70: pbimuinfoserver.ContactIdHash
	(*DelContactArrReq)(nil),                       // 71: pbimuinfoserver.DelContactArrReq
	(*CmdResetUserContactsReq)(nil),                // 72: pbimuinfoserver.CmdResetUserContactsReq
	(*CmdResetUserContactsResult)(nil),             // 73: pbimuinfoserver.CmdResetUserContactsResult
	(*DelContactArrResult)(nil),                    // 74: pbimuinfoserver.DelContactArrResult
	(*ContatsGetContactsReq)(nil),                  // 75: pbimuinfoserver.ContatsGetContactsReq
	(*ContactInfo)(nil),                            // 76: pbimuinfoserver.contactInfo
	(*ContatsGetContactsResult)(nil),               // 77: pbimuinfoserver.ContatsGetContactsResult
	(*ContactsGetContactsV1Req)(nil),               // 78: pbimuinfoserver.ContactsGetContactsV1Req
	(*ContactsGetContactsV1Result)(nil),            // 79: pbimuinfoserver.ContactsGetContactsV1Result
	(*ContactsGetContactsIdReq)(nil),               // 80: pbimuinfoserver.ContactsGetContactsIdReq
	(*ContactsGetContactsIdResult)(nil),            // 81: pbimuinfoserver.ContactsGetContactsIdResult
	(*PhoneBookContact)(nil),                       // 82: pbimuinfoserver.PhoneBookContact
	(*ContactsImportPhoneContactsReq)(nil),         // 83: pbimuinfoserver.ContactsImportPhoneContactsReq
	(*ImportContact)(nil),                          // 84: pbimuinfoserver.ImportContact
	(*PopularContact)(nil),                         // 85: pbimuinfoserver.PopularContact
	(*ContactsImportPhoneContactsResult)(nil),      // 86: pbimuinfoserver.ContactsImportPhoneContactsResult
	(*AddRelationIdInfo)(nil),                      // 87: pbimuinfoserver.AddRelationIdInfo
	(*DelRelationIdInfo)(nil),                      // 88: pbimuinfoserver.DelRelationIdInfo
	(*AddRelationIdInfoResult)(nil),                // 89: pbimuinfoserver.AddRelationIdInfoResult
	(*DelRelationIdInfoResult)(nil),                // 90: pbimuinfoserver.DelRelationIdInfoResult
	(*BlockeduserReq)(nil),                         // 91: pbimuinfoserver.BlockeduserReq
	(*BlockeduserResult)(nil),                      // 92: pbimuinfoserver.BlockeduserResult
	(*ContactUnblockedReq)(nil),                    // 93: pbimuinfoserver.ContactUnblockedReq
	(*ContactsGetBlockedReq)(nil),                  // 94: pbimuinfoserver.ContactsGetBlockedReq
	(*Blockeduser)(nil),                            // 95: pbimuinfoserver.blockeduser
	(*ContactsGetBlockedResult)(nil),               // 96: pbimuinfoserver.ContactsGetBlockedResult
	(*SystemWhiteUser)(nil),                        // 97: pbimuinfoserver.SystemWhiteUser
	(*StoreSysWhiteUserReq)(nil),                   // 98: pbimuinfoserver.StoreSysWhiteUserReq
	(*StoreSysWhiteUserResult)(nil),                // 99: pbimuinfoserver.StoreSysWhiteUserResult
	(*UpdateSystemWhiteUserLevelReq)(nil),          // 100: pbimuinfoserver.UpdateSystemWhiteUserLevelReq
	(*UpdateSystemWhiteUserLevelResult)(nil),       // 101: pbimuinfoserver.UpdateSystemWhiteUserLevelResult
	(*GetSysWhiteUserReq)(nil),                     // 102: pbimuinfoserver.GetSysWhiteUserReq
	(*GetSysWhiteUserResult)(nil),                  // 103: pbimuinfoserver.GetSysWhiteUserResult
	(*GetSysWhiteUserArrReq)(nil),                  // 104: pbimuinfoserver.GetSysWhiteUserArrReq
	(*GetSysWhiteUserArrResult)(nil),               // 105: pbimuinfoserver.GetSysWhiteUserArrResult
	(*DelSysWhiteUserReq)(nil),                     // 106: pbimuinfoserver.DelSysWhiteUserReq
	(*DelSysWhiteUserResult)(nil),                  // 107: pbimuinfoserver.DelSysWhiteUserResult
	(*UserDc)(nil),                                 // 108: pbimuinfoserver.UserDc
	(*GetAllDcReq)(nil),                            // 109: pbimuinfoserver.GetAllDcReq
	(*SetPrivacyReq)(nil),                          // 110: pbimuinfoserver.SetPrivacyReq
	(*SetPrivacyResult)(nil),                       // 111: pbimuinfoserver.SetPrivacyResult
	(*GetPrivacyReq)(nil),                          // 112: pbimuinfoserver.GetPrivacyReq
	(*CheckPrivacyReq)(nil),                        // 113: pbimuinfoserver.CheckPrivacyReq
	(*CheckPrivacyResult)(nil),                     // 114: pbimuinfoserver.CheckPrivacyResult
	(*GetPrivacyResult)(nil),                       // 115: pbimuinfoserver.GetPrivacyResult
	(*StoreShopStickerSetReq)(nil),                 // 116: pbimuinfoserver.StoreShopStickerSetReq
	(*StoreShopStickerSetResult)(nil),              // 117: pbimuinfoserver.StoreShopStickerSetResult
	(*StoreShopStickerSetDocumentsReq)(nil),        // 118: pbimuinfoserver.StoreShopStickerSetDocumentsReq
	(*StoreShopStickerSetDocumentsResult)(nil),     // 119: pbimuinfoserver.StoreShopStickerSetDocumentsResult
	(*DeleteStickerSetReq)(nil),                    // 120: pbimuinfoserver.DeleteStickerSetReq
	(*DeleteStickerSetResult)(nil),                 // 121: pbimuinfoserver.DeleteStickerSetResult
	(*StickerSetInfo)(nil),                         // 122: pbimuinfoserver.StickerSetInfo
	(*GetStickerSetInfoReq)(nil),                   // 123: pbimuinfoserver.GetStickerSetInfoReq
	(*GetStickerSetInfoResult)(nil),                // 124: pbimuinfoserver.GetStickerSetInfoResult
	(*StickerPackDocumentBase)(nil),                // 125: pbimuinfoserver.StickerPackDocumentBase
	(*StickerPackDocumentInfo)(nil),                // 126: pbimuinfoserver.StickerPackDocumentInfo
	(*StoreStickerPackDcReq)(nil),                  // 127: pbimuinfoserver.StoreStickerPackDcReq
	(*StoreStickerPackDcResult)(nil),               // 128: pbimuinfoserver.StoreStickerPackDcResult
	(*StoreStickerPackDcArrReq)(nil),               // 129: pbimuinfoserver.StoreStickerPackDcArrReq
	(*StoreStickerPackDcArrResult)(nil),            // 130: pbimuinfoserver.StoreStickerPackDcArrResult
	(*GetStickerSetPackDcInfosReq)(nil),            // 131: pbimuinfoserver.GetStickerSetPackDcInfosReq
	(*GetStickerSetPackDcInfosResult)(nil),         // 132: pbimuinfoserver.GetStickerSetPackDcInfosResult
	(*AddOrDeleteFaveSticerReq)(nil),               // 133: pbimuinfoserver.AddOrDeleteFaveSticerReq
	(*AddOrDeleteFaveSticerResult)(nil),            // 134: pbimuinfoserver.AddOrDeleteFaveSticerResult
	(*GetFavedStickersReq)(nil),                    // 135: pbimuinfoserver.GetFavedStickersReq
	(*GetFavedStickersResult)(nil),                 // 136: pbimuinfoserver.GetFavedStickersResult
	(*StickerPack)(nil),                            // 137: pbimuinfoserver.StickerPack
	(*StoreUserStickerSetReq)(nil),                 // 138: pbimuinfoserver.StoreUserStickerSetReq
	(*StoreUserStickerSetResult)(nil),              // 139: pbimuinfoserver.StoreUserStickerSetResult
	(*UpdateUserStickerSetDisabledReq)(nil),        // 140: pbimuinfoserver.UpdateUserStickerSetDisabledReq
	(*UpdateUserStickerSetDisabledResult)(nil),     // 141: pbimuinfoserver.UpdateUserStickerSetDisabledResult
	(*UpdateUserStickerSetOrderReq)(nil),           // 142: pbimuinfoserver.UpdateUserStickerSetOrderReq
	(*UpdateUserStickerSetOrderResult)(nil),        // 143: pbimuinfoserver.UpdateUserStickerSetOrderResult
	(*UpdateUserStickerSetInstallArReq)(nil),       // 144: pbimuinfoserver.UpdateUserStickerSetInstallArReq
	(*UpdateUserStickerSetInstallArResult)(nil),    // 145: pbimuinfoserver.UpdateUserStickerSetInstallArResult
	(*DeleteuserStickerReq)(nil),                   // 146: pbimuinfoserver.DeleteuserStickerReq
	(*DeleteuserStickerResult)(nil),                // 147: pbimuinfoserver.DeleteuserStickerResult
	(*UserStickerInfo)(nil),                        // 148: pbimuinfoserver.UserStickerInfo
	(*UserStickerInfoArr)(nil),                     // 149: pbimuinfoserver.UserStickerInfoArr
	(*StickerSetInfoArr)(nil),                      // 150: pbimuinfoserver.StickerSetInfoArr
	(*GetuserAllStickersReq)(nil),                  // 151: pbimuinfoserver.GetuserAllStickersReq
	(*GetuserAllStickersResult)(nil),               // 152: pbimuinfoserver.GetuserAllStickersResult
	(*GetAllStickerSetsReq)(nil),                   // 153: pbimuinfoserver.GetAllStickerSetsReq
	(*GetAllStickerSetsResult)(nil),                // 154: pbimuinfoserver.GetAllStickerSetsResult
	(*DeleteStickerPackDocumentReq)(nil),           // 155: pbimuinfoserver.DeleteStickerPackDocumentReq
	(*DeleteStickerPackDocumentResult)(nil),        // 156: pbimuinfoserver.DeleteStickerPackDocumentResult
	(*GetAuthorStickerSetReq)(nil),                 // 157: pbimuinfoserver.GetAuthorStickerSetReq
	(*GetAuthorStickerSetResult)(nil),              // 158: pbimuinfoserver.GetAuthorStickerSetResult
	(*GetAuthorAllStickerSetReq)(nil),              // 159: pbimuinfoserver.GetAuthorAllStickerSetReq
	(*GetAuthorAllStickerSetResult)(nil),           // 160: pbimuinfoserver.GetAuthorAllStickerSetResult
	(*AuthorStickerSet)(nil),                       // 161: pbimuinfoserver.AuthorStickerSet
	(*CountAuthorAllStickerSetReq)(nil),            // 162: pbimuinfoserver.CountAuthorAllStickerSetReq
	(*CountAuthorAllStickerSetResult)(nil),         // 163: pbimuinfoserver.CountAuthorAllStickerSetResult
	(*UserGifInfoArr)(nil),                         // 164: pbimuinfoserver.userGifInfoArr
	(*UserSaveGifInfo)(nil),                        // 165: pbimuinfoserver.userSaveGifInfo
	(*SaveUserGifReq)(nil),                         // 166: pbimuinfoserver.SaveUserGifReq
	(*SaveUserGifResult)(nil),                      // 167: pbimuinfoserver.SaveUserGifResult
	(*DelUserGifReq)(nil),                          // 168: pbimuinfoserver.DelUserGifReq
	(*DelUserGifResult)(nil),                       // 169: pbimuinfoserver.DelUserGifResult
	(*GetUserGifsReq)(nil),                         // 170: pbimuinfoserver.GetUserGifsReq
	(*GetUserGifsResult)(nil),                      // 171: pbimuinfoserver.GetUserGifsResult
	(*CheckUserIsBlockedReq)(nil),                  // 172: pbimuinfoserver.CheckUserIsBlockedReq
	(*CheckUserIsBlockedResult)(nil),               // 173: pbimuinfoserver.CheckUserIsBlockedResult
	(*RegisterUserInfo)(nil),                       // 174: pbimuinfoserver.registerUserInfo
	(*UpdateUserInfoResult)(nil),                   // 175: pbimuinfoserver.UpdateUserInfoResult
	(*CheckUserAccessHashValidReq)(nil),            // 176: pbimuinfoserver.CheckUserAccessHashValidReq
	(*CheckUserAccessHashValidResult)(nil),         // 177: pbimuinfoserver.CheckUserAccessHashValidResult
	(*RegisterUserInfoReq)(nil),                    // 178: pbimuinfoserver.RegisterUserInfoReq
	(*RegisterUserInfoResult)(nil),                 // 179: pbimuinfoserver.RegisterUserInfoResult
	(*GetNotifySettingsReq)(nil),                   // 180: pbimuinfoserver.GetNotifySettingsReq
	(*GetNotifySettingsResult)(nil),                // 181: pbimuinfoserver.GetNotifySettingsResult
	(*UpdateNotifySettingsReq)(nil),                // 182: pbimuinfoserver.UpdateNotifySettingsReq
	(*UpdateNotifySettingsResult)(nil),             // 183: pbimuinfoserver.UpdateNotifySettingsResult
	(*GetContactsStatusReq)(nil),                   // 184: pbimuinfoserver.GetContactsStatusReq
	(*UserStaus)(nil),                              // 185: pbimuinfoserver.UserStaus
	(*GetContactsStatusResult)(nil),                // 186: pbimuinfoserver.GetContactsStatusResult
	(*UpdateBotPicRequest)(nil),                    // 187: pbimuinfoserver.UpdateBotPicRequest
	(*UpdateBotPicResult)(nil),                     // 188: pbimuinfoserver.UpdateBotPicResult
	(*GetAllProxyConfigReq)(nil),                   // 189: pbimuinfoserver.GetAllProxyConfigReq
	(*ProxyAddr)(nil),                              // 190: pbimuinfoserver.ProxyAddr
	(*GetAllProxyConfigResult)(nil),                // 191: pbimuinfoserver.GetAllProxyConfigResult
	(*CheckUserNameOccupiedReq)(nil),               // 192: pbimuinfoserver.CheckUserNameOccupiedReq
	(*CheckUserNameOccupiedResult)(nil),            // 193: pbimuinfoserver.CheckUserNameOccupiedResult
	(*GetUserGpsReq)(nil),                          // 194: pbimuinfoserver.GetUserGpsReq
	(*GetUserGpsResult)(nil),                       // 195: pbimuinfoserver.GetUserGpsResult
	(*CheckSelfIsContactReq)(nil),                  // 196: pbimuinfoserver.CheckSelfIsContactReq
	(*CheckSelfIsContactResult)(nil),               // 197: pbimuinfoserver.CheckSelfIsContactResult
	(*UpdateSwitchReq)(nil),                        // 198: pbimuinfoserver.UpdateSwitchReq
	(*UpdateSwitchResult)(nil),                     // 199: pbimuinfoserver.UpdateSwitchResult
	(*GetSwitchStatusReq)(nil),                     // 200: pbimuinfoserver.GetSwitchStatusReq
	(*GetSwitchStatusResult)(nil),                  // 201: pbimuinfoserver.GetSwitchStatusResult
	(*GetViplogPhoneListReq)(nil),                  // 202: pbimuinfoserver.GetViplogPhoneListReq
	(*GetViplogPhoneListResp)(nil),                 // 203: pbimuinfoserver.GetViplogPhoneListResp
	(*UpdateUserHasPayReq)(nil),                    // 204: pbimuinfoserver.UpdateUserHasPayReq
	(*UpdateUserHasPayResp)(nil),                   // 205: pbimuinfoserver.UpdateUserHasPayResp
	(*CheckUserHasPayReq)(nil),                     // 206: pbimuinfoserver.CheckUserHasPayReq
	(*CheckUserHasPayResp)(nil),                    // 207: pbimuinfoserver.CheckUserHasPayResp
	(*UpdateUserDetailReq)(nil),                    // 208: pbimuinfoserver.UpdateUserDetailReq
	(*UpdateUserDetailResult)(nil),                 // 209: pbimuinfoserver.UpdateUserDetailResult
	(*UpdateUserDetailBirthdayReq)(nil),            // 210: pbimuinfoserver.UpdateUserDetailBirthdayReq
	(*UpdateUserDetailBirthdayResult)(nil),         // 211: pbimuinfoserver.UpdateUserDetailBirthdayResult
	(*SetUserDetailReq)(nil),                       // 212: pbimuinfoserver.SetUserDetailReq
	(*SetUserDetailResult)(nil),                    // 213: pbimuinfoserver.SetUserDetailResult
	(*DeleteReceiveAppliesReq)(nil),                // 214: pbimuinfoserver.DeleteReceiveAppliesReq
	(*DeleteReceiveAppliesResult)(nil),             // 215: pbimuinfoserver.DeleteReceiveAppliesResult
	(*UpdateUserTypeLableReq)(nil),                 // 216: pbimuinfoserver.UpdateUserTypeLableReq
	(*UpdateUserTypeLableResult)(nil),              // 217: pbimuinfoserver.UpdateUserTypeLableResult
	(*CheckSearchUserCountLimitedReq)(nil),         // 218: pbimuinfoserver.CheckSearchUserCountLimitedReq
	(*CheckSearchUserCountLimitedResult)(nil),      // 219: pbimuinfoserver.CheckSearchUserCountLimitedResult
	(*CheckIsMutualContactReq)(nil),                // 220: pbimuinfoserver.CheckIsMutualContactReq
	(*CheckIsMutualContactResult)(nil),             // 221: pbimuinfoserver.CheckIsMutualContactResult
	(*ChangeGroupNameReq)(nil),                     // 222: pbimuinfoserver.ChangeGroupNameReq
	(*ChangeGroupNameResult)(nil),                  // 223: pbimuinfoserver.ChangeGroupNameResult
	(*GetContactsV1Req)(nil),                       // 224: pbimuinfoserver.GetContactsV1Req
	(*GetContactsV1Result)(nil),                    // 225: pbimuinfoserver.GetContactsV1Result
	(*SearchPrettyNumberReq)(nil),                  // 226: pbimuinfoserver.SearchPrettyNumberReq
	(*SearchPrettyNumberRsp)(nil),                  // 227: pbimuinfoserver.SearchPrettyNumberRsp
	(*ActivePrettyNumberReq)(nil),                  // 228: pbimuinfoserver.ActivePrettyNumberReq
	(*ActivePrettyNumberRsp)(nil),                  // 229: pbimuinfoserver.ActivePrettyNumberRsp
	(*GetVirtualBindByPhoneReq)(nil),               // 230: pbimuinfoserver.GetVirtualBindByPhoneReq
	(*GetVirtualBindByPhoneRsp)(nil),               // 231: pbimuinfoserver.GetVirtualBindByPhoneRsp
	(*GetuserAdminInfoReq)(nil),                    // 232: pbimuinfoserver.GetuserAdminInfoReq
	(*GetuserAdminInfoResp)(nil),                   // 233: pbimuinfoserver.GetuserAdminInfoResp
	(*AddUserAdminReq)(nil),                        // 234: pbimuinfoserver.AddUserAdminReq
	(*AddUserAdminResp)(nil),                       // 235: pbimuinfoserver.AddUserAdminResp
	(*BindVitualSendCodeChannelReq)(nil),           // 236: pbimuinfoserver.BindVitualSendCodeChannelReq
	(*BindVitualSendCodeChannelResp)(nil),          // 237: pbimuinfoserver.BindVitualSendCodeChannelResp
	(*GetVitualSendCodeChannelReq)(nil),            // 238: pbimuinfoserver.GetVitualSendCodeChannelReq
	(*GetVitualSendCodeChannelResp)(nil),           // 239: pbimuinfoserver.GetVitualSendCodeChannelResp
	(*VitualCheckCanAddContactReq)(nil),            // 240: pbimuinfoserver.VitualCheckCanAddContactReq
	(*VitualCheckCanAddContactResp)(nil),           // 241: pbimuinfoserver.VitualCheckCanAddContactResp
	(*CheckIsPhoneVitulaPhoneReq)(nil),             // 242: pbimuinfoserver.CheckIsPhoneVitulaPhoneReq
	(*CheckIsPhoneVitulaPhoneResp)(nil),            // 243: pbimuinfoserver.CheckIsPhoneVitulaPhoneResp
	(*CheckIsVitulaPhoneArrReq)(nil),               // 244: pbimuinfoserver.CheckIsVitulaPhoneArrReq
	(*CheckIsVitulaPhoneArrResp)(nil),              // 245: pbimuinfoserver.CheckIsVitulaPhoneArrResp
	(*SignUpVitualReq)(nil),                        // 246: pbimuinfoserver.SignUpVitualReq
	(*SignUpVitualResp)(nil),                       // 247: pbimuinfoserver.SignUpVitualResp
	(*VirtualBindRealPhoneReq)(nil),                // 248: pbimuinfoserver.VirtualBindRealPhoneReq
	(*VirtualBindRealPhoneRsp)(nil),                // 249: pbimuinfoserver.VirtualBindRealPhoneRsp
	(*VirtualAddContactByPhoneReq)(nil),            // 250: pbimuinfoserver.VirtualAddContactByPhoneReq
	(*VirtualAddContactByPhoneRsp)(nil),            // 251: pbimuinfoserver.VirtualAddContactByPhoneRsp
	(*JoinGroupCheckReq)(nil),                      // 252: pbimuinfoserver.JoinGroupCheckReq
	(*JoinGroupCheckRsp)(nil),                      // 253: pbimuinfoserver.JoinGroupCheckRsp
	(*CheckIsVitulaPhoneReq)(nil),                  // 254: pbimuinfoserver.CheckIsVitulaPhoneReq
	(*CheckIsVitulaPhoneResp)(nil),                 // 255: pbimuinfoserver.CheckIsVitulaPhoneResp
	(*VirtulPhoneInfo)(nil),                        // 256: pbimuinfoserver.VirtulPhoneInfo
	(*GetAllVitualUsersByFlagsReq)(nil),            // 257: pbimuinfoserver.GetAllVitualUsersByFlagsReq
	(*GetAllVitualUsersByFlagsResp)(nil),           // 258: pbimuinfoserver.GetAllVitualUsersByFlagsResp
	(*GetVitulPhoneNumbersReq)(nil),                // 259: pbimuinfoserver.GetVitulPhoneNumbersReq
	(*GetVitulPhoneNumbersResp)(nil),               // 260: pbimuinfoserver.GetVitulPhoneNumbersResp
	(*GenVitulaPhoneNumbersReq)(nil),               // 261: pbimuinfoserver.GenVitulaPhoneNumbersReq
	(*GenVitulaPhoneNumbersResp)(nil),              // 262: pbimuinfoserver.GenVitulaPhoneNumbersResp
	(*UserCdnVipInfo)(nil),                         // 263: pbimuinfoserver.UserCdnVipInfo
	(*UserCdnPayInfo)(nil),                         // 264: pbimuinfoserver.UserCdnPayInfo
	(*BuyCdnVipReq)(nil),                           // 265: pbimuinfoserver.BuyCdnVipReq
	(*BuyCdnVipRsp)(nil),                           // 266: pbimuinfoserver.BuyCdnVipRsp
	(*SetCdnVipAutoPayReq)(nil),                    // 267: pbimuinfoserver.SetCdnVipAutoPayReq
	(*SetCdnVipAutoPayRsp)(nil),                    // 268: pbimuinfoserver.SetCdnVipAutoPayRsp
	(*GetUserCdnPayListReq)(nil),                   // 269: pbimuinfoserver.GetUserCdnPayListReq
	(*GetUserCdnPayListRsp)(nil),                   // 270: pbimuinfoserver.GetUserCdnPayListRsp
	(*GetUserCdnVipInfoReq)(nil),                   // 271: pbimuinfoserver.GetUserCdnVipInfoReq
	(*GetUserCdnVipInfoRsp)(nil),                   // 272: pbimuinfoserver.GetUserCdnVipInfoRsp
	(*ChkCdnVipReq)(nil),                           // 273: pbimuinfoserver.ChkCdnVipReq
	(*ChkCdnVipRsp)(nil),                           // 274: pbimuinfoserver.ChkCdnVipRsp
	(*AddCdnVipReq)(nil),                           // 275: pbimuinfoserver.AddCdnVipReq
	(*AddCdnVipRsp)(nil),                           // 276: pbimuinfoserver.AddCdnVipRsp
	(*CheckIsSelfContactReq)(nil),                  // 277: pbimuinfoserver.CheckIsSelfContactReq
	(*CheckIsSelfContactResult)(nil),               // 278: pbimuinfoserver.CheckIsSelfContactResult
	(*GetPhoneBookInfosReq)(nil),                   // 279: pbimuinfoserver.GetPhoneBookInfosReq
	(*GetPhoneBookInfosResult)(nil),                // 280: pbimuinfoserver.GetPhoneBookInfosResult
	(*AddLoginDayReq)(nil),                         // 281: pbimuinfoserver.AddLoginDayReq
	(*AddLoginDayResult)(nil),                      // 282: pbimuinfoserver.AddLoginDayResult
	(*CheckDigitalWalletSwitchReq)(nil),            // 283: pbimuinfoserver.CheckDigitalWalletSwitchReq
	(*CheckDigitalWalletSwitchResult)(nil),         // 284: pbimuinfoserver.CheckDigitalWalletSwitchResult
	(*RecvLockerAddUserIdReq)(nil),                 // 285: pbimuinfoserver.RecvLockerAddUserIdReq
	(*RecvLockerAddUserIdResult)(nil),              // 286: pbimuinfoserver.RecvLockerAddUserIdResult
	(*RecvLockerDelUserIdReq)(nil),                 // 287: pbimuinfoserver.RecvLockerDelUserIdReq
	(*RecvLockerDelUserIdResult)(nil),              // 288: pbimuinfoserver.RecvLockerDelUserIdResult
	(*RecvLockerGetUserIdsReq)(nil),                // 289: pbimuinfoserver.RecvLockerGetUserIdsReq
	(*RecvLockerGetUserIdsResult)(nil),             // 290: pbimuinfoserver.RecvLockerGetUserIdsResult
	(*CheckIsMuteContactReq)(nil),                  // 291: pbimuinfoserver.CheckIsMuteContactReq
	(*CheckIsMuteContactResult)(nil),               // 292: pbimuinfoserver.CheckIsMuteContactResult
	(*SetUserUnsubscribeReq)(nil),                  // 293: pbimuinfoserver.SetUserUnsubscribeReq
	(*SetUserUnsubscribeResult)(nil),               // 294: pbimuinfoserver.SetUserUnsubscribeResult
	(*GetUserUnsubscribeReq)(nil),                  // 295: pbimuinfoserver.GetUserUnsubscribeReq
	(*GetUserUnsubscribeResult)(nil),               // 296: pbimuinfoserver.GetUserUnsubscribeResult
	(*GetRelationUsersReq)(nil),                    // 297: pbimuinfoserver.GetRelationUsersReq
	(*GetRelationUsersResult)(nil),                 // 298: pbimuinfoserver.GetRelationUsersResult
	(*GetUserIpByAddrReq)(nil),                     // 299: pbimuinfoserver.GetUserIpByAddrReq
	(*GetUserIpByAddrResult)(nil),                  // 300: pbimuinfoserver.GetUserIpByAddrResult
	(*UserIpAddr)(nil),                             // 301: pbimuinfoserver.UserIpAddr
	(*GetUserIpByUserIdReq)(nil),                   // 302: pbimuinfoserver.GetUserIpByUserIdReq
	(*GetUserIpByUserIdResult)(nil),                // 303: pbimuinfoserver.GetUserIpByUserIdResult
	(*UserIpAddOrUpdateReq)(nil),                   // 304: pbimuinfoserver.UserIpAddOrUpdateReq
	(*UserIpAddOrUpdateResult)(nil),                // 305: pbimuinfoserver.UserIpAddOrUpdateResult
	(*CheckUserSpaiclReq)(nil),                     // 306: pbimuinfoserver.CheckUserSpaiclReq
	(*CheckUserSpaiclResult)(nil),                  // 307: pbimuinfoserver.CheckUserSpaiclResult
	(*InsertUSerSpaiclReq)(nil),                    // 308: pbimuinfoserver.InsertUSerSpaiclReq
	(*InsertUSerSpaiclResult)(nil),                 // 309: pbimuinfoserver.InsertUSerSpaiclResult
	(*DelUSerSpaiclReq)(nil),                       // 310: pbimuinfoserver.DelUSerSpaiclReq
	(*DelUSerSpaiclResult)(nil),                    // 311: pbimuinfoserver.DelUSerSpaiclResult
	(*GetAllUSerSpaiclReq)(nil),                    // 312: pbimuinfoserver.GetAllUSerSpaiclReq
	(*GetAllUSerSpaiclResult)(nil),                 // 313: pbimuinfoserver.GetAllUSerSpaiclResult
	(*ChangePhoneReq)(nil),                         // 314: pbimuinfoserver.ChangePhoneReq
	(*ChangePhoneResult)(nil),                      // 315: pbimuinfoserver.ChangePhoneResult
	(*VirtualPhoneNumberInfo)(nil),                 // 316: pbimuinfoserver.VirtualPhoneNumberInfo
	(*UserExpansionFindReq)(nil),                   // 317: pbimuinfoserver.UserExpansionFindReq
	(*UserExpansionFindResult)(nil),                // 318: pbimuinfoserver.UserExpansionFindResult
	(*UserExpansion)(nil),                          // 319: pbimuinfoserver.UserExpansion
	(*UserExpansionSetReq)(nil),                    // 320: pbimuinfoserver.UserExpansionSetReq
	(*UserExpansionSetResult)(nil),                 // 321: pbimuinfoserver.UserExpansionSetResult
	(*UserInfoExtend)(nil),                         // 322: pbimuinfoserver.UserInfoExtend
	(*GetUserInfoExtendReq)(nil),                   // 323: pbimuinfoserver.GetUserInfoExtendReq
	(*GetUserInfoExtendResult)(nil),                // 324: pbimuinfoserver.GetUserInfoExtendResult
	(*HistoryChangePhoneAddResult)(nil),            // 325: pbimuinfoserver.HistoryChangePhoneAddResult
	(*HistoryChangePhoneAddReq)(nil),               // 326: pbimuinfoserver.HistoryChangePhoneAddReq
	(*QueryUpdatesByUseridReq)(nil),                // 327: pbimuinfoserver.QueryUpdatesByUseridReq
	(*QueryUpdatesByUseridResult)(nil),             // 328: pbimuinfoserver.QueryUpdatesByUseridResult
	(*GetSwitchVersionReq)(nil),                    // 329: pbimuinfoserver.GetSwitchVersionReq
	(*GetSwitchVersionResult)(nil),                 // 330: pbimuinfoserver.GetSwitchVersionResult
	(*UGetUsersChatsReq)(nil),                      // 331: pbimuinfoserver.UGetUsersChatsReq
	(*UGetUsersChatsResult)(nil),                   // 332: pbimuinfoserver.UGetUsersChatsResult
	(*UpdateBotInfoSuppReq)(nil),                   // 333: pbimuinfoserver.UpdateBotInfoSuppReq
	(*UpdateBotInfoSuppResult)(nil),                // 334: pbimuinfoserver.UpdateBotInfoSuppResult
	(*DeleteUserUsernameReq)(nil),                  // 335: pbimuinfoserver.DeleteUserUsernameReq
	(*DeleteUserUsernameResult)(nil),               // 336: pbimuinfoserver.DeleteUserUsernameResult
	(*UpdateUserLocationReq)(nil),                  // 337: pbimuinfoserver.UpdateUserLocationReq
	(*UpdateUserLocationResult)(nil),               // 338: pbimuinfoserver.UpdateUserLocationResult
	(*UpdateUserGrenderReq)(nil),                   // 339: pbimuinfoserver.UpdateUserGrenderReq
	(*UpdateUserGrenderResult)(nil),                // 340: pbimuinfoserver.UpdateUserGrenderResult
	(*UpdateUserEmailReq)(nil),                     // 341: pbimuinfoserver.UpdateUserEmailReq
	(*UpdateUserEmailResult)(nil),                  // 342: pbimuinfoserver.UpdateUserEmailResult
	(*UploadContactsReq)(nil),                      // 343: pbimuinfoserver.UploadContactsReq
	(*UploadContactsResult)(nil),                   // 344: pbimuinfoserver.UploadContactsResult
	(*ApplyContactReq)(nil),                        // 345: pbimuinfoserver.ApplyContactReq
	(*ApplyContactResult)(nil),                     // 346: pbimuinfoserver.ApplyContactResult
	(*ContactsGreetApplyReq)(nil),                  // 347: pbimuinfoserver.ContactsGreetApplyReq
	(*ContactsGreetApplyResult)(nil),               // 348: pbimuinfoserver.ContactsGreetApplyResult
	(*GetAppliedContactsReq)(nil),                  // 349: pbimuinfoserver.GetAppliedContactsReq
	(*GetAppliedContactsResult)(nil),               // 350: pbimuinfoserver.GetAppliedContactsResult
	(*Applied)(nil),                                // 351: pbimuinfoserver.Applied
	(*VerifyContactReq)(nil),                       // 352: pbimuinfoserver.VerifyContactReq
	(*VerifyContactResult)(nil),                    // 353: pbimuinfoserver.VerifyContactResult
	(*DeleteAppliedHistoryContactReq)(nil),         // 354: pbimuinfoserver.DeleteAppliedHistoryContactReq
	(*DeleteAppliedHistoryContactResult)(nil),      // 355: pbimuinfoserver.DeleteAppliedHistoryContactResult
	(*DeleteAppliedSomeContactReq)(nil),            // 356: pbimuinfoserver.DeleteAppliedSomeContactReq
	(*DeleteAppliedSomeContactResult)(nil),         // 357: pbimuinfoserver.DeleteAppliedSomeContactResult
	(*ReadAppliedHistoryReq)(nil),                  // 358: pbimuinfoserver.ReadAppliedHistoryReq
	(*ReadAppliedHistoryResult)(nil),               // 359: pbimuinfoserver.ReadAppliedHistoryResult
	(*GetContactsApplyDifferenceReq)(nil),          // 360: pbimuinfoserver.GetContactsApplyDifferenceReq
	(*ApplyDifference)(nil),                        // 361: pbimuinfoserver.ApplyDifference
	(*GetContactsApplyDifferenceResult)(nil),       // 362: pbimuinfoserver.GetContactsApplyDifferenceResult
	(*GetContactsApplyDifferenceV2Req)(nil),        // 363: pbimuinfoserver.GetContactsApplyDifferenceV2Req
	(*GetContactsApplyDifferenceV2Result)(nil),     // 364: pbimuinfoserver.GetContactsApplyDifferenceV2Result
	(*SearchUserByPhoneReq)(nil),                   // 365: pbimuinfoserver.SearchUserByPhoneReq
	(*SearchUserByPhoneResult)(nil),                // 366: pbimuinfoserver.SearchUserByPhoneResult
	(*CreateGroupReq)(nil),                         // 367: pbimuinfoserver.CreateGroupReq
	(*CreateGroupResult)(nil),                      // 368: pbimuinfoserver.CreateGroupResult
	(*SetUserGroupReq)(nil),                        // 369: pbimuinfoserver.SetUserGroupReq
	(*SetUserGroupResult)(nil),                     // 370: pbimuinfoserver.SetUserGroupResult
	(*GetFullUserReq)(nil),                         // 371: pbimuinfoserver.GetFullUserReq
	(*GetFullUserResult)(nil),                      // 372: pbimuinfoserver.GetFullUserResult
	(*GetUserExpansionReq)(nil),                    // 373: pbimuinfoserver.GetUserExpansionReq
	(*GetUserExpansionResult)(nil),                 // 374: pbimuinfoserver.GetUserExpansionResult
	(*ChangeGroupOrderReq)(nil),                    // 375: pbimuinfoserver.ChangeGroupOrderReq
	(*GroupOrder)(nil),                             // 376: pbimuinfoserver.groupOrder
	(*ChangeGroupOrderResult)(nil),                 // 377: pbimuinfoserver.ChangeGroupOrderResult
	(*DeleteGroupReq)(nil),                         // 378: pbimuinfoserver.DeleteGroupReq
	(*DeleteGroupResult)(nil),                      // 379: pbimuinfoserver.DeleteGroupResult
	(*DeleteGroupsReq)(nil),                        // 380: pbimuinfoserver.DeleteGroupsReq
	(*DeleteGroupsResult)(nil),                     // 381: pbimuinfoserver.DeleteGroupsResult
	(*GetCustomerListReq)(nil),                     // 382: pbimuinfoserver.GetCustomerListReq
	(*CustomerList)(nil),                           // 383: pbimuinfoserver.CustomerList
	(*GetCustomerListReply)(nil),                   // 384: pbimuinfoserver.GetCustomerListReply
	(*IsCustomerByUserIdReq)(nil),                  // 385: pbimuinfoserver.IsCustomerByUserIdReq
	(*IsCustomerByUserIdReply)(nil),                // 386: pbimuinfoserver.IsCustomerByUserIdReply
	(*GetCustomerOrientUsersReq)(nil),              // 387: pbimuinfoserver.GetCustomerOrientUsersReq
	(*GetCustomerOrientUsersReply)(nil),            // 388: pbimuinfoserver.GetCustomerOrientUsersReply
	(*CheckSpecialUserReq)(nil),                    // 389: pbimuinfoserver.CheckSpecialUserReq
	(*CheckSpecialUserReply)(nil),                  // 390: pbimuinfoserver.CheckSpecialUserReply
	(*GetForceGroupListReq)(nil),                   // 391: pbimuinfoserver.GetForceGroupListReq
	(*GetForceGroupListReply)(nil),                 // 392: pbimuinfoserver.GetForceGroupListReply
	(*GetNotForceGroupListReq)(nil),                // 393: pbimuinfoserver.GetNotForceGroupListReq
	(*GetNotForceGroupListReply)(nil),              // 394: pbimuinfoserver.GetNotForceGroupListReply
	(*PassWordRegistryReq)(nil),                    // 395: pbimuinfoserver.PassWordRegistryReq
	(*PassWordRegistryReply)(nil),                  // 396: pbimuinfoserver.PassWordRegistryReply
	(*PassWordLoginReq)(nil),                       // 397: pbimuinfoserver.PassWordLoginReq
	(*PassWordLoginReply)(nil),                     // 398: pbimuinfoserver.PassWordLoginReply
	(*ChangePassWordReq)(nil),                      // 399: pbimuinfoserver.ChangePassWordReq
	(*ChangePassWordReply)(nil),                    // 400: pbimuinfoserver.ChangePassWordReply
	(*RegistryUserByUsernameReq)(nil),              // 401: pbimuinfoserver.RegistryUserByUsernameReq
	(*RegistryUserByUsernameReply)(nil),            // 402: pbimuinfoserver.RegistryUserByUsernameReply
	(*GetAuthTokenReq)(nil),                        // 403: pbimuinfoserver.GetAuthTokenReq
	(*GetAuthTokenReply)(nil),                      // 404: pbimuinfoserver.GetAuthTokenReply
	(*BindUserTokenReq)(nil),                       // 405: pbimuinfoserver.BindUserTokenReq
	(*BindUserTokenReply)(nil),                     // 406: pbimuinfoserver.BindUserTokenReply
	(*GetUserByAuthTokenReq)(nil),                  // 407: pbimuinfoserver.GetUserByAuthTokenReq
	(*GetUserByAuthTokenReply)(nil),                // 408: pbimuinfoserver.GetUserByAuthTokenReply
	(*VerifyAuthTokenReq)(nil),                     // 409: pbimuinfoserver.VerifyAuthTokenReq
	(*VerifyAuthTokenReply)(nil),                   // 410: pbimuinfoserver.VerifyAuthTokenReply
	(*SignUpV1Req)(nil),                            // 411: pbimuinfoserver.SignUpV1Req
	(*SignUpV1Reply)(nil),                          // 412: pbimuinfoserver.SignUpV1Reply
	(*ContactsGetCommonContactsReq)(nil),           // 413: pbimuinfoserver.ContactsGetCommonContactsReq
	(*ContactsGetCommonContactsResult)(nil),        // 414: pbimuinfoserver.ContactsGetCommonContactsResult
	(*SearchUserByNicknameReq)(nil),                // 415: pbimuinfoserver.SearchUserByNicknameReq
	(*SearchUserByNicknameResult)(nil),             // 416: pbimuinfoserver.SearchUserByNicknameResult
	(*GetUserRoleInfoByIdsReq)(nil),                // 417: pbimuinfoserver.GetUserRoleInfoByIdsReq
	(*UserRoleInfo)(nil),                           // 418: pbimuinfoserver.UserRoleInfo
	(*GetUserRoleInfoByIdsRsp)(nil),                // 419: pbimuinfoserver.GetUserRoleInfoByIdsRsp
	(*InnerUser)(nil),                              // 420: pbimuinfoserver.InnerUser
	(*InnerUserOpReq)(nil),                         // 421: pbimuinfoserver.InnerUserOpReq
	(*InnerUserOpRsp)(nil),                         // 422: pbimuinfoserver.InnerUserOpRsp
	(*BindRealPhoneReq)(nil),                       // 423: pbimuinfoserver.BindRealPhoneReq
	(*BindRealPhoneRsp)(nil),                       // 424: pbimuinfoserver.BindRealPhoneRsp
	(*GetUserRelationWithIdsReq)(nil),              // 425: pbimuinfoserver.GetUserRelationWithIdsReq
	(*Relation)(nil),                               // 426: pbimuinfoserver.Relation
	(*GetUserRelationWithIdsRsp)(nil),              // 427: pbimuinfoserver.GetUserRelationWithIdsRsp
	(*UpdateUserVerifiedReq)(nil),                  // 428: pbimuinfoserver.UpdateUserVerifiedReq
	(*UpdateUserVerifiedResult)(nil),               // 429: pbimuinfoserver.UpdateUserVerifiedResult
	(*AddPhoneBookContactsReq)(nil),                // 430: pbimuinfoserver.AddPhoneBookContactsReq
	(*Contact)(nil),                                // 431: pbimuinfoserver.Contact
	(*AddPhoneBookContactsReply)(nil),              // 432: pbimuinfoserver.AddPhoneBookContactsReply
	(*InviteCodeBindReq)(nil),                      // 433: pbimuinfoserver.InviteCodeBindReq
	(*InviteCodeBindRsp)(nil),                      // 434: pbimuinfoserver.InviteCodeBindRsp
	(*MyTeamReq)(nil),                              // 435: pbimuinfoserver.MyTeamReq
	(*MyTeamRsp)(nil),                              // 436: pbimuinfoserver.MyTeamRsp
	(*RealNameCertificationReq)(nil),               // 437: pbimuinfoserver.RealNameCertificationReq
	(*RealNameCertificationRsp)(nil),               // 438: pbimuinfoserver.RealNameCertificationRsp
	(*GetCertificationResultReq)(nil),              // 439: pbimuinfoserver.GetCertificationResultReq
	(*CertificationResult)(nil),                    // 440: pbimuinfoserver.CertificationResult
	(*GetCertificationResultRsp)(nil),              // 441: pbimuinfoserver.GetCertificationResultRsp
	(*VerifyCertificationReq)(nil),                 // 442: pbimuinfoserver.VerifyCertificationReq
	(*VerifyCertificationRsp)(nil),                 // 443: pbimuinfoserver.VerifyCertificationRsp
	(*UpdateUserDetailV1Req)(nil),                  // 444: pbimuinfoserver.UpdateUserDetailV1Req
	(*UpdateUserDetailV1Rsp)(nil),                  // 445: pbimuinfoserver.UpdateUserDetailV1Rsp
	(*pbcomm.Debug)(nil),                           // 446: pbcomm.Debug
}
var file_imuinfoserver_proto_depIdxs = []int32{
	446, // 0: pbimuinfoserver.GetUserInfoByIdReq.debug:type_name -> pbcomm.Debug
	446, // 1: pbimuinfoserver.GetUserInfoByIdArrReq.debug:type_name -> pbcomm.Debug
	33,  // 2: pbimuinfoserver.UserInfoArray.userin:type_name -> pbimuinfoserver.userInfo
	446, // 3: pbimuinfoserver.GetUserExpireByIdReq.debug:type_name -> pbcomm.Debug
	0,   // 4: pbimuinfoserver.GetUserExpireByIdResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 5: pbimuinfoserver.GetUserByphone.debug:type_name -> pbcomm.Debug
	33,  // 6: pbimuinfoserver.GetUserInfoResult.Uinfo:type_name -> pbimuinfoserver.userInfo
	0,   // 7: pbimuinfoserver.GetUserInfoResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	33,  // 8: pbimuinfoserver.GetUserInfoByIdArrResult.Uinfo:type_name -> pbimuinfoserver.userInfo
	0,   // 9: pbimuinfoserver.GetUserInfoByIdArrResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 10: pbimuinfoserver.GetUserByUsername.debug:type_name -> pbcomm.Debug
	446, // 11: pbimuinfoserver.updatePhotoInfoReq.debug:type_name -> pbcomm.Debug
	446, // 12: pbimuinfoserver.GetPhotoInfoReq.debug:type_name -> pbcomm.Debug
	0,   // 13: pbimuinfoserver.UpdateUserPhotoResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	0,   // 14: pbimuinfoserver.GetUserPhotoResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 15: pbimuinfoserver.UpdateUserProfileReq.debug:type_name -> pbcomm.Debug
	0,   // 16: pbimuinfoserver.UpdateUserFullResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	33,  // 17: pbimuinfoserver.UpdateUserProfileResult.Uinfo:type_name -> pbimuinfoserver.userInfo
	0,   // 18: pbimuinfoserver.UpdateUserProfileResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 19: pbimuinfoserver.StatusReq.debug:type_name -> pbcomm.Debug
	0,   // 20: pbimuinfoserver.StatusResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 21: pbimuinfoserver.UpdateExpireReq.debug:type_name -> pbcomm.Debug
	0,   // 22: pbimuinfoserver.UpdateExpireResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 23: pbimuinfoserver.UserClusterChange.debug:type_name -> pbcomm.Debug
	0,   // 24: pbimuinfoserver.UserClusterChangeResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 25: pbimuinfoserver.UpdateuserNameReq.debug:type_name -> pbcomm.Debug
	33,  // 26: pbimuinfoserver.UpdateuserNameResult.Uinfo:type_name -> pbimuinfoserver.userInfo
	0,   // 27: pbimuinfoserver.UpdateuserNameResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	0,   // 28: pbimuinfoserver.UpdateUserLevelResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	0,   // 29: pbimuinfoserver.UpdateUserExtionResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 30: pbimuinfoserver.CheckPhoneRegisterReq.debug:type_name -> pbcomm.Debug
	0,   // 31: pbimuinfoserver.CheckPhoneRegisterResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 32: pbimuinfoserver.DeleteAccountByIdReq.debug:type_name -> pbcomm.Debug
	0,   // 33: pbimuinfoserver.DelAccountResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 34: pbimuinfoserver.BotUpdateInfo.debug:type_name -> pbcomm.Debug
	0,   // 35: pbimuinfoserver.BotUpdateInfoResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 36: pbimuinfoserver.DelContactReq.debug:type_name -> pbcomm.Debug
	33,  // 37: pbimuinfoserver.DelContactResult.Uinfo:type_name -> pbimuinfoserver.userInfo
	0,   // 38: pbimuinfoserver.DelContactResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 39: pbimuinfoserver.AcceptContactReq.debug:type_name -> pbcomm.Debug
	0,   // 40: pbimuinfoserver.AcceptContactResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	70,  // 41: pbimuinfoserver.DelContactArrReq.contactidArr:type_name -> pbimuinfoserver.ContactIdHash
	446, // 42: pbimuinfoserver.DelContactArrReq.debug:type_name -> pbcomm.Debug
	0,   // 43: pbimuinfoserver.DelContactArrResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 44: pbimuinfoserver.ContatsGetContactsReq.debug:type_name -> pbcomm.Debug
	76,  // 45: pbimuinfoserver.ContatsGetContactsResult.contactArr:type_name -> pbimuinfoserver.contactInfo
	33,  // 46: pbimuinfoserver.ContatsGetContactsResult.userInfoArr:type_name -> pbimuinfoserver.userInfo
	0,   // 47: pbimuinfoserver.ContatsGetContactsResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 48: pbimuinfoserver.ContactsGetContactsV1Req.debug:type_name -> pbcomm.Debug
	76,  // 49: pbimuinfoserver.ContactsGetContactsV1Result.contactArr:type_name -> pbimuinfoserver.contactInfo
	33,  // 50: pbimuinfoserver.ContactsGetContactsV1Result.userInfoArr:type_name -> pbimuinfoserver.userInfo
	376, // 51: pbimuinfoserver.ContactsGetContactsV1Result.groupOrderArr:type_name -> pbimuinfoserver.groupOrder
	0,   // 52: pbimuinfoserver.ContactsGetContactsV1Result.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 53: pbimuinfoserver.ContactsGetContactsIdReq.debug:type_name -> pbcomm.Debug
	0,   // 54: pbimuinfoserver.ContactsGetContactsIdResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	82,  // 55: pbimuinfoserver.ContactsImportPhoneContactsReq.phoneContactArr:type_name -> pbimuinfoserver.PhoneBookContact
	446, // 56: pbimuinfoserver.ContactsImportPhoneContactsReq.debug:type_name -> pbcomm.Debug
	84,  // 57: pbimuinfoserver.ContactsImportPhoneContactsResult.imContactDetail:type_name -> pbimuinfoserver.ImportContact
	33,  // 58: pbimuinfoserver.ContactsImportPhoneContactsResult.userInfoArr:type_name -> pbimuinfoserver.userInfo
	85,  // 59: pbimuinfoserver.ContactsImportPhoneContactsResult.PopuContact:type_name -> pbimuinfoserver.PopularContact
	0,   // 60: pbimuinfoserver.ContactsImportPhoneContactsResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 61: pbimuinfoserver.AddRelationIdInfo.debug:type_name -> pbcomm.Debug
	446, // 62: pbimuinfoserver.DelRelationIdInfo.debug:type_name -> pbcomm.Debug
	0,   // 63: pbimuinfoserver.AddRelationIdInfoResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	0,   // 64: pbimuinfoserver.DelRelationIdInfoResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 65: pbimuinfoserver.BlockeduserReq.debug:type_name -> pbcomm.Debug
	0,   // 66: pbimuinfoserver.BlockeduserResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 67: pbimuinfoserver.ContactUnblockedReq.debug:type_name -> pbcomm.Debug
	446, // 68: pbimuinfoserver.ContactsGetBlockedReq.debug:type_name -> pbcomm.Debug
	33,  // 69: pbimuinfoserver.ContactsGetBlockedResult.InfoArr:type_name -> pbimuinfoserver.userInfo
	0,   // 70: pbimuinfoserver.ContactsGetBlockedResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 71: pbimuinfoserver.StoreSysWhiteUserReq.debug:type_name -> pbcomm.Debug
	0,   // 72: pbimuinfoserver.StoreSysWhiteUserResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 73: pbimuinfoserver.UpdateSystemWhiteUserLevelReq.debug:type_name -> pbcomm.Debug
	0,   // 74: pbimuinfoserver.UpdateSystemWhiteUserLevelResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 75: pbimuinfoserver.GetSysWhiteUserReq.debug:type_name -> pbcomm.Debug
	97,  // 76: pbimuinfoserver.GetSysWhiteUserResult.sysWhiteInfo:type_name -> pbimuinfoserver.SystemWhiteUser
	0,   // 77: pbimuinfoserver.GetSysWhiteUserResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 78: pbimuinfoserver.GetSysWhiteUserArrReq.debug:type_name -> pbcomm.Debug
	97,  // 79: pbimuinfoserver.GetSysWhiteUserArrResult.sysWhiteInfoArr:type_name -> pbimuinfoserver.SystemWhiteUser
	0,   // 80: pbimuinfoserver.GetSysWhiteUserArrResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 81: pbimuinfoserver.DelSysWhiteUserReq.debug:type_name -> pbcomm.Debug
	0,   // 82: pbimuinfoserver.DelSysWhiteUserResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 83: pbimuinfoserver.UserDc.debug:type_name -> pbcomm.Debug
	446, // 84: pbimuinfoserver.GetAllDcReq.debug:type_name -> pbcomm.Debug
	446, // 85: pbimuinfoserver.SetPrivacyReq.debug:type_name -> pbcomm.Debug
	33,  // 86: pbimuinfoserver.SetPrivacyResult.UinfoArr:type_name -> pbimuinfoserver.userInfo
	0,   // 87: pbimuinfoserver.SetPrivacyResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 88: pbimuinfoserver.GetPrivacyReq.debug:type_name -> pbcomm.Debug
	446, // 89: pbimuinfoserver.CheckPrivacyReq.debug:type_name -> pbcomm.Debug
	0,   // 90: pbimuinfoserver.CheckPrivacyResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	33,  // 91: pbimuinfoserver.GetPrivacyResult.userInfos:type_name -> pbimuinfoserver.userInfo
	0,   // 92: pbimuinfoserver.GetPrivacyResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 93: pbimuinfoserver.StoreShopStickerSetReq.debug:type_name -> pbcomm.Debug
	0,   // 94: pbimuinfoserver.StoreShopStickerSetResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 95: pbimuinfoserver.StoreShopStickerSetDocumentsReq.debug:type_name -> pbcomm.Debug
	0,   // 96: pbimuinfoserver.StoreShopStickerSetDocumentsResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 97: pbimuinfoserver.DeleteStickerSetReq.debug:type_name -> pbcomm.Debug
	0,   // 98: pbimuinfoserver.DeleteStickerSetResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 99: pbimuinfoserver.GetStickerSetInfoReq.debug:type_name -> pbcomm.Debug
	122, // 100: pbimuinfoserver.GetStickerSetInfoResult.stickerSetInfo:type_name -> pbimuinfoserver.StickerSetInfo
	0,   // 101: pbimuinfoserver.GetStickerSetInfoResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	125, // 102: pbimuinfoserver.StickerPackDocumentInfo.infoBase:type_name -> pbimuinfoserver.StickerPackDocumentBase
	125, // 103: pbimuinfoserver.StoreStickerPackDcReq.stickpackbase:type_name -> pbimuinfoserver.StickerPackDocumentBase
	446, // 104: pbimuinfoserver.StoreStickerPackDcReq.debug:type_name -> pbcomm.Debug
	0,   // 105: pbimuinfoserver.StoreStickerPackDcResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	125, // 106: pbimuinfoserver.StoreStickerPackDcArrReq.StPDB:type_name -> pbimuinfoserver.StickerPackDocumentBase
	446, // 107: pbimuinfoserver.StoreStickerPackDcArrReq.debug:type_name -> pbcomm.Debug
	0,   // 108: pbimuinfoserver.StoreStickerPackDcArrResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 109: pbimuinfoserver.GetStickerSetPackDcInfosReq.debug:type_name -> pbcomm.Debug
	126, // 110: pbimuinfoserver.GetStickerSetPackDcInfosResult.StPDcInfo:type_name -> pbimuinfoserver.StickerPackDocumentInfo
	446, // 111: pbimuinfoserver.AddOrDeleteFaveSticerReq.debug:type_name -> pbcomm.Debug
	0,   // 112: pbimuinfoserver.AddOrDeleteFaveSticerResult.ErrorCode:type_name -> pbimuinfoserver.ReErrCode
	446, // 113: pbimuinfoserver.GetFavedStickersReq.debug:type_name -> pbcomm.Debug
	137, // 114: pbimuinfoserver.GetFavedStickersResult.packs:type_name -> pbimuinfoserver.StickerPack
	125, // 115: pbimuinfoserver.GetFavedStickersResult.stickers:type_name -> pbimuinfoserver.StickerPackDocumentBase
	0,   // 116: pbimuinfoserver.GetFavedStickersResult.ErrorCode:type_name -> pbimuinfoserver.ReErrCode
	446, // 117: pbimuinfoserver.StoreUserStickerSetReq.debug:type_name -> pbcomm.Debug
	0,   // 118: pbimuinfoserver.StoreUserStickerSetResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 119: pbimuinfoserver.UpdateUserStickerSetDisabledReq.debug:type_name -> pbcomm.Debug
	0,   // 120: pbimuinfoserver.UpdateUserStickerSetDisabledResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 121: pbimuinfoserver.UpdateUserStickerSetOrderReq.debug:type_name -> pbcomm.Debug
	0,   // 122: pbimuinfoserver.UpdateUserStickerSetOrderResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 123: pbimuinfoserver.UpdateUserStickerSetInstallArReq.debug:type_name -> pbcomm.Debug
	0,   // 124: pbimuinfoserver.UpdateUserStickerSetInstallArResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 125: pbimuinfoserver.DeleteuserStickerReq.debug:type_name -> pbcomm.Debug
	0,   // 126: pbimuinfoserver.DeleteuserStickerResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	148, // 127: pbimuinfoserver.UserStickerInfoArr.stickerInfo:type_name -> pbimuinfoserver.UserStickerInfo
	122, // 128: pbimuinfoserver.StickerSetInfoArr.stickerInfo:type_name -> pbimuinfoserver.StickerSetInfo
	446, // 129: pbimuinfoserver.GetuserAllStickersReq.debug:type_name -> pbcomm.Debug
	148, // 130: pbimuinfoserver.GetuserAllStickersResult.stickerInfoArr:type_name -> pbimuinfoserver.UserStickerInfo
	0,   // 131: pbimuinfoserver.GetuserAllStickersResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 132: pbimuinfoserver.GetAllStickerSetsReq.debug:type_name -> pbcomm.Debug
	122, // 133: pbimuinfoserver.GetAllStickerSetsResult.stickerInfoArr:type_name -> pbimuinfoserver.StickerSetInfo
	0,   // 134: pbimuinfoserver.GetAllStickerSetsResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	0,   // 135: pbimuinfoserver.DeleteStickerPackDocumentResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	0,   // 136: pbimuinfoserver.GetAuthorStickerSetResult.ErrorCode:type_name -> pbimuinfoserver.ReErrCode
	161, // 137: pbimuinfoserver.GetAuthorStickerSetResult.set:type_name -> pbimuinfoserver.AuthorStickerSet
	0,   // 138: pbimuinfoserver.GetAuthorAllStickerSetResult.ErrorCode:type_name -> pbimuinfoserver.ReErrCode
	161, // 139: pbimuinfoserver.GetAuthorAllStickerSetResult.sets:type_name -> pbimuinfoserver.AuthorStickerSet
	0,   // 140: pbimuinfoserver.CountAuthorAllStickerSetResult.ErrorCode:type_name -> pbimuinfoserver.ReErrCode
	165, // 141: pbimuinfoserver.userGifInfoArr.gif_arr:type_name -> pbimuinfoserver.userSaveGifInfo
	446, // 142: pbimuinfoserver.SaveUserGifReq.debug:type_name -> pbcomm.Debug
	0,   // 143: pbimuinfoserver.SaveUserGifResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 144: pbimuinfoserver.DelUserGifReq.debug:type_name -> pbcomm.Debug
	0,   // 145: pbimuinfoserver.DelUserGifResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 146: pbimuinfoserver.GetUserGifsReq.debug:type_name -> pbcomm.Debug
	165, // 147: pbimuinfoserver.GetUserGifsResult.gif_arr:type_name -> pbimuinfoserver.userSaveGifInfo
	0,   // 148: pbimuinfoserver.GetUserGifsResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 149: pbimuinfoserver.CheckUserIsBlockedReq.debug:type_name -> pbcomm.Debug
	0,   // 150: pbimuinfoserver.CheckUserIsBlockedResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	33,  // 151: pbimuinfoserver.UpdateUserInfoResult.uinfo:type_name -> pbimuinfoserver.userInfo
	446, // 152: pbimuinfoserver.CheckUserAccessHashValidReq.debug:type_name -> pbcomm.Debug
	0,   // 153: pbimuinfoserver.CheckUserAccessHashValidResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 154: pbimuinfoserver.RegisterUserInfoReq.debug:type_name -> pbcomm.Debug
	33,  // 155: pbimuinfoserver.RegisterUserInfoResult.uinfo:type_name -> pbimuinfoserver.userInfo
	0,   // 156: pbimuinfoserver.RegisterUserInfoResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 157: pbimuinfoserver.GetNotifySettingsReq.debug:type_name -> pbcomm.Debug
	0,   // 158: pbimuinfoserver.GetNotifySettingsResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 159: pbimuinfoserver.UpdateNotifySettingsReq.debug:type_name -> pbcomm.Debug
	0,   // 160: pbimuinfoserver.UpdateNotifySettingsResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 161: pbimuinfoserver.GetContactsStatusReq.debug:type_name -> pbcomm.Debug
	185, // 162: pbimuinfoserver.GetContactsStatusResult.contactStatusArr:type_name -> pbimuinfoserver.UserStaus
	0,   // 163: pbimuinfoserver.GetContactsStatusResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 164: pbimuinfoserver.UpdateBotPicRequest.debug:type_name -> pbcomm.Debug
	0,   // 165: pbimuinfoserver.UpdateBotPicResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 166: pbimuinfoserver.GetAllProxyConfigReq.debug:type_name -> pbcomm.Debug
	190, // 167: pbimuinfoserver.GetAllProxyConfigResult.addrs:type_name -> pbimuinfoserver.ProxyAddr
	0,   // 168: pbimuinfoserver.GetAllProxyConfigResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 169: pbimuinfoserver.CheckUserNameOccupiedReq.debug:type_name -> pbcomm.Debug
	446, // 170: pbimuinfoserver.GetUserGpsReq.debug:type_name -> pbcomm.Debug
	0,   // 171: pbimuinfoserver.GetUserGpsResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 172: pbimuinfoserver.CheckSelfIsContactReq.debug:type_name -> pbcomm.Debug
	0,   // 173: pbimuinfoserver.CheckSelfIsContactResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	2,   // 174: pbimuinfoserver.UpdateSwitchReq.switch:type_name -> pbimuinfoserver.Switch
	5,   // 175: pbimuinfoserver.UpdateSwitchResult.code:type_name -> pbimuinfoserver.UpdateSwitchResult.ResultCode
	2,   // 176: pbimuinfoserver.GetSwitchStatusReq.switch:type_name -> pbimuinfoserver.Switch
	6,   // 177: pbimuinfoserver.GetSwitchStatusResult.code:type_name -> pbimuinfoserver.GetSwitchStatusResult.ResultCode
	446, // 178: pbimuinfoserver.DeleteReceiveAppliesReq.debug:type_name -> pbcomm.Debug
	0,   // 179: pbimuinfoserver.DeleteReceiveAppliesResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 180: pbimuinfoserver.UpdateUserTypeLableReq.debug:type_name -> pbcomm.Debug
	0,   // 181: pbimuinfoserver.UpdateUserTypeLableResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 182: pbimuinfoserver.CheckSearchUserCountLimitedReq.debug:type_name -> pbcomm.Debug
	446, // 183: pbimuinfoserver.CheckIsMutualContactReq.debug:type_name -> pbcomm.Debug
	0,   // 184: pbimuinfoserver.CheckIsMutualContactResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 185: pbimuinfoserver.ChangeGroupNameReq.debug:type_name -> pbcomm.Debug
	0,   // 186: pbimuinfoserver.ChangeGroupNameResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 187: pbimuinfoserver.GetContactsV1Req.debug:type_name -> pbcomm.Debug
	76,  // 188: pbimuinfoserver.GetContactsV1Result.contactArr:type_name -> pbimuinfoserver.contactInfo
	33,  // 189: pbimuinfoserver.GetContactsV1Result.userInfoArr:type_name -> pbimuinfoserver.userInfo
	376, // 190: pbimuinfoserver.GetContactsV1Result.groupOrderArr:type_name -> pbimuinfoserver.groupOrder
	0,   // 191: pbimuinfoserver.GetContactsV1Result.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	7,   // 192: pbimuinfoserver.SignUpVitualResp.code:type_name -> pbimuinfoserver.SignUpVitualResp.ResultCode
	33,  // 193: pbimuinfoserver.SignUpVitualResp.userInfo:type_name -> pbimuinfoserver.userInfo
	256, // 194: pbimuinfoserver.GetAllVitualUsersByFlagsResp.infos:type_name -> pbimuinfoserver.VirtulPhoneInfo
	446, // 195: pbimuinfoserver.BuyCdnVipReq.Debugs:type_name -> pbcomm.Debug
	263, // 196: pbimuinfoserver.BuyCdnVipRsp.VipInfo:type_name -> pbimuinfoserver.UserCdnVipInfo
	263, // 197: pbimuinfoserver.SetCdnVipAutoPayRsp.VipInfo:type_name -> pbimuinfoserver.UserCdnVipInfo
	263, // 198: pbimuinfoserver.GetUserCdnPayListRsp.VipInfo:type_name -> pbimuinfoserver.UserCdnVipInfo
	264, // 199: pbimuinfoserver.GetUserCdnPayListRsp.PayList:type_name -> pbimuinfoserver.UserCdnPayInfo
	263, // 200: pbimuinfoserver.GetUserCdnVipInfoRsp.VipInfo:type_name -> pbimuinfoserver.UserCdnVipInfo
	446, // 201: pbimuinfoserver.CheckIsSelfContactReq.debug:type_name -> pbcomm.Debug
	0,   // 202: pbimuinfoserver.CheckIsSelfContactResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	82,  // 203: pbimuinfoserver.GetPhoneBookInfosReq.phoneContactArr:type_name -> pbimuinfoserver.PhoneBookContact
	8,   // 204: pbimuinfoserver.GetPhoneBookInfosResult.reCode:type_name -> pbimuinfoserver.GetPhoneBookInfosResult.ResultCode
	33,  // 205: pbimuinfoserver.GetPhoneBookInfosResult.Uinfo:type_name -> pbimuinfoserver.userInfo
	9,   // 206: pbimuinfoserver.AddLoginDayResult.ErrorCode:type_name -> pbimuinfoserver.AddLoginDayResult.ResultCode
	10,  // 207: pbimuinfoserver.CheckDigitalWalletSwitchResult.ErrorCode:type_name -> pbimuinfoserver.CheckDigitalWalletSwitchResult.ResultCode
	11,  // 208: pbimuinfoserver.RecvLockerAddUserIdResult.ErrorCode:type_name -> pbimuinfoserver.RecvLockerAddUserIdResult.ResultCode
	12,  // 209: pbimuinfoserver.RecvLockerDelUserIdResult.ErrorCode:type_name -> pbimuinfoserver.RecvLockerDelUserIdResult.ResultCode
	13,  // 210: pbimuinfoserver.RecvLockerGetUserIdsResult.ErrorCode:type_name -> pbimuinfoserver.RecvLockerGetUserIdsResult.ResultCode
	14,  // 211: pbimuinfoserver.CheckIsMuteContactResult.ErrorCode:type_name -> pbimuinfoserver.CheckIsMuteContactResult.ResultCode
	15,  // 212: pbimuinfoserver.SetUserUnsubscribeResult.ErrorCode:type_name -> pbimuinfoserver.SetUserUnsubscribeResult.ResultCode
	16,  // 213: pbimuinfoserver.GetUserUnsubscribeResult.ErrorCode:type_name -> pbimuinfoserver.GetUserUnsubscribeResult.ResultCode
	446, // 214: pbimuinfoserver.GetRelationUsersReq.debug:type_name -> pbcomm.Debug
	17,  // 215: pbimuinfoserver.GetRelationUsersResult.ErrorCode:type_name -> pbimuinfoserver.GetRelationUsersResult.ResultCode
	33,  // 216: pbimuinfoserver.GetRelationUsersResult.infos:type_name -> pbimuinfoserver.userInfo
	18,  // 217: pbimuinfoserver.GetUserIpByAddrResult.ErrorCode:type_name -> pbimuinfoserver.GetUserIpByAddrResult.ResultCode
	19,  // 218: pbimuinfoserver.GetUserIpByUserIdResult.ErrorCode:type_name -> pbimuinfoserver.GetUserIpByUserIdResult.ResultCode
	301, // 219: pbimuinfoserver.GetUserIpByUserIdResult.addrs:type_name -> pbimuinfoserver.UserIpAddr
	20,  // 220: pbimuinfoserver.UserIpAddOrUpdateResult.ErrorCode:type_name -> pbimuinfoserver.UserIpAddOrUpdateResult.ResultCode
	21,  // 221: pbimuinfoserver.CheckUserSpaiclResult.ErrorCode:type_name -> pbimuinfoserver.CheckUserSpaiclResult.ResultCode
	22,  // 222: pbimuinfoserver.InsertUSerSpaiclResult.ErrorCode:type_name -> pbimuinfoserver.InsertUSerSpaiclResult.ResultCode
	23,  // 223: pbimuinfoserver.DelUSerSpaiclResult.ErrorCode:type_name -> pbimuinfoserver.DelUSerSpaiclResult.ResultCode
	24,  // 224: pbimuinfoserver.GetAllUSerSpaiclResult.ErrorCode:type_name -> pbimuinfoserver.GetAllUSerSpaiclResult.ResultCode
	446, // 225: pbimuinfoserver.ChangePhoneReq.debug:type_name -> pbcomm.Debug
	25,  // 226: pbimuinfoserver.ChangePhoneResult.ErrorCode:type_name -> pbimuinfoserver.ChangePhoneResult.ResultCode
	319, // 227: pbimuinfoserver.UserExpansionFindResult.user_expansion:type_name -> pbimuinfoserver.UserExpansion
	0,   // 228: pbimuinfoserver.UserExpansionFindResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	319, // 229: pbimuinfoserver.UserExpansionSetReq.user_expansion:type_name -> pbimuinfoserver.UserExpansion
	0,   // 230: pbimuinfoserver.UserExpansionSetResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	0,   // 231: pbimuinfoserver.GetUserInfoExtendResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	322, // 232: pbimuinfoserver.GetUserInfoExtendResult.userInfoExtend:type_name -> pbimuinfoserver.UserInfoExtend
	0,   // 233: pbimuinfoserver.HistoryChangePhoneAddResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 234: pbimuinfoserver.UGetUsersChatsReq.Dlog:type_name -> pbcomm.Debug
	32,  // 235: pbimuinfoserver.UGetUsersChatsResult.users:type_name -> pbimuinfoserver.UserInfoArray
	3,   // 236: pbimuinfoserver.UGetUsersChatsResult.resultcode:type_name -> pbimuinfoserver.UChatResultCode
	446, // 237: pbimuinfoserver.UpdateBotInfoSuppReq.debug:type_name -> pbcomm.Debug
	0,   // 238: pbimuinfoserver.UpdateBotInfoSuppResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 239: pbimuinfoserver.DeleteUserUsernameReq.debug:type_name -> pbcomm.Debug
	26,  // 240: pbimuinfoserver.DeleteUserUsernameResult.code:type_name -> pbimuinfoserver.DeleteUserUsernameResult.Code
	446, // 241: pbimuinfoserver.UpdateUserLocationReq.debug:type_name -> pbcomm.Debug
	446, // 242: pbimuinfoserver.UpdateUserGrenderReq.debug:type_name -> pbcomm.Debug
	446, // 243: pbimuinfoserver.UpdateUserEmailReq.debug:type_name -> pbcomm.Debug
	82,  // 244: pbimuinfoserver.UploadContactsReq.phoneContactArr:type_name -> pbimuinfoserver.PhoneBookContact
	446, // 245: pbimuinfoserver.ApplyContactReq.debug:type_name -> pbcomm.Debug
	0,   // 246: pbimuinfoserver.ApplyContactResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 247: pbimuinfoserver.ContactsGreetApplyReq.debug:type_name -> pbcomm.Debug
	0,   // 248: pbimuinfoserver.ContactsGreetApplyResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	351, // 249: pbimuinfoserver.GetAppliedContactsResult.applied_arr:type_name -> pbimuinfoserver.Applied
	33,  // 250: pbimuinfoserver.Applied.apply_user:type_name -> pbimuinfoserver.userInfo
	446, // 251: pbimuinfoserver.DeleteAppliedHistoryContactReq.debug:type_name -> pbcomm.Debug
	0,   // 252: pbimuinfoserver.DeleteAppliedHistoryContactResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 253: pbimuinfoserver.DeleteAppliedSomeContactReq.debug:type_name -> pbcomm.Debug
	0,   // 254: pbimuinfoserver.DeleteAppliedSomeContactResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 255: pbimuinfoserver.ReadAppliedHistoryReq.debug:type_name -> pbcomm.Debug
	0,   // 256: pbimuinfoserver.ReadAppliedHistoryResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 257: pbimuinfoserver.GetContactsApplyDifferenceReq.debug:type_name -> pbcomm.Debug
	361, // 258: pbimuinfoserver.GetContactsApplyDifferenceResult.applies:type_name -> pbimuinfoserver.ApplyDifference
	0,   // 259: pbimuinfoserver.GetContactsApplyDifferenceResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 260: pbimuinfoserver.GetContactsApplyDifferenceV2Req.debug:type_name -> pbcomm.Debug
	361, // 261: pbimuinfoserver.GetContactsApplyDifferenceV2Result.applies:type_name -> pbimuinfoserver.ApplyDifference
	0,   // 262: pbimuinfoserver.GetContactsApplyDifferenceV2Result.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 263: pbimuinfoserver.SearchUserByPhoneReq.debug:type_name -> pbcomm.Debug
	33,  // 264: pbimuinfoserver.SearchUserByPhoneResult.user_infos:type_name -> pbimuinfoserver.userInfo
	0,   // 265: pbimuinfoserver.SearchUserByPhoneResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 266: pbimuinfoserver.CreateGroupReq.debug:type_name -> pbcomm.Debug
	0,   // 267: pbimuinfoserver.CreateGroupResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	33,  // 268: pbimuinfoserver.SetUserGroupReq.user_infos:type_name -> pbimuinfoserver.userInfo
	446, // 269: pbimuinfoserver.SetUserGroupReq.debug:type_name -> pbcomm.Debug
	0,   // 270: pbimuinfoserver.SetUserGroupResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 271: pbimuinfoserver.GetFullUserReq.debug:type_name -> pbcomm.Debug
	33,  // 272: pbimuinfoserver.GetFullUserResult.uinfo:type_name -> pbimuinfoserver.userInfo
	0,   // 273: pbimuinfoserver.GetFullUserResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	376, // 274: pbimuinfoserver.ChangeGroupOrderReq.group_order:type_name -> pbimuinfoserver.groupOrder
	446, // 275: pbimuinfoserver.ChangeGroupOrderReq.debug:type_name -> pbcomm.Debug
	0,   // 276: pbimuinfoserver.ChangeGroupOrderResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 277: pbimuinfoserver.DeleteGroupReq.debug:type_name -> pbcomm.Debug
	0,   // 278: pbimuinfoserver.DeleteGroupResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	446, // 279: pbimuinfoserver.DeleteGroupsReq.debug:type_name -> pbcomm.Debug
	0,   // 280: pbimuinfoserver.DeleteGroupsResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	383, // 281: pbimuinfoserver.GetCustomerListReply.Customers:type_name -> pbimuinfoserver.CustomerList
	0,   // 282: pbimuinfoserver.GetCustomerListReply.ErrorCode:type_name -> pbimuinfoserver.ReErrCode
	0,   // 283: pbimuinfoserver.IsCustomerByUserIdReply.error_code:type_name -> pbimuinfoserver.ReErrCode
	0,   // 284: pbimuinfoserver.GetCustomerOrientUsersReply.ErrorCode:type_name -> pbimuinfoserver.ReErrCode
	0,   // 285: pbimuinfoserver.GetForceGroupListReply.ErrorCode:type_name -> pbimuinfoserver.ReErrCode
	0,   // 286: pbimuinfoserver.GetNotForceGroupListReply.ErrorCode:type_name -> pbimuinfoserver.ReErrCode
	1,   // 287: pbimuinfoserver.PassWordRegistryReply.ErrorCode:type_name -> pbimuinfoserver.PasswordRegistryErrorCode
	33,  // 288: pbimuinfoserver.PassWordRegistryReply.User:type_name -> pbimuinfoserver.userInfo
	1,   // 289: pbimuinfoserver.PassWordLoginReply.ErrorCode:type_name -> pbimuinfoserver.PasswordRegistryErrorCode
	33,  // 290: pbimuinfoserver.PassWordLoginReply.User:type_name -> pbimuinfoserver.userInfo
	1,   // 291: pbimuinfoserver.ChangePassWordReply.ErrorCode:type_name -> pbimuinfoserver.PasswordRegistryErrorCode
	33,  // 292: pbimuinfoserver.ChangePassWordReply.User:type_name -> pbimuinfoserver.userInfo
	1,   // 293: pbimuinfoserver.RegistryUserByUsernameReply.error_code:type_name -> pbimuinfoserver.PasswordRegistryErrorCode
	33,  // 294: pbimuinfoserver.RegistryUserByUsernameReply.user:type_name -> pbimuinfoserver.userInfo
	4,   // 295: pbimuinfoserver.GetAuthTokenReply.error_code:type_name -> pbimuinfoserver.OAuthLoginError
	4,   // 296: pbimuinfoserver.BindUserTokenReply.error_code:type_name -> pbimuinfoserver.OAuthLoginError
	33,  // 297: pbimuinfoserver.GetUserByAuthTokenReply.user:type_name -> pbimuinfoserver.userInfo
	4,   // 298: pbimuinfoserver.GetUserByAuthTokenReply.error_code:type_name -> pbimuinfoserver.OAuthLoginError
	4,   // 299: pbimuinfoserver.VerifyAuthTokenReply.error_code:type_name -> pbimuinfoserver.OAuthLoginError
	446, // 300: pbimuinfoserver.SignUpV1Req.debug:type_name -> pbcomm.Debug
	27,  // 301: pbimuinfoserver.SignUpV1Reply.code:type_name -> pbimuinfoserver.SignUpV1Reply.ResultCode
	33,  // 302: pbimuinfoserver.SignUpV1Reply.userInfo:type_name -> pbimuinfoserver.userInfo
	33,  // 303: pbimuinfoserver.ContactsGetCommonContactsResult.user_infos:type_name -> pbimuinfoserver.userInfo
	0,   // 304: pbimuinfoserver.ContactsGetCommonContactsResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	33,  // 305: pbimuinfoserver.SearchUserByNicknameResult.user_infos:type_name -> pbimuinfoserver.userInfo
	0,   // 306: pbimuinfoserver.SearchUserByNicknameResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	0,   // 307: pbimuinfoserver.GetUserRoleInfoByIdsRsp.ErrCode:type_name -> pbimuinfoserver.ReErrCode
	418, // 308: pbimuinfoserver.GetUserRoleInfoByIdsRsp.RoleArr:type_name -> pbimuinfoserver.UserRoleInfo
	28,  // 309: pbimuinfoserver.InnerUserOpReq.OpType:type_name -> pbimuinfoserver.InnerUserOpReq.OperType
	420, // 310: pbimuinfoserver.InnerUserOpRsp.UserArr:type_name -> pbimuinfoserver.InnerUser
	29,  // 311: pbimuinfoserver.Relation.Type:type_name -> pbimuinfoserver.Relation.RelationType
	426, // 312: pbimuinfoserver.GetUserRelationWithIdsRsp.Relations:type_name -> pbimuinfoserver.Relation
	446, // 313: pbimuinfoserver.UpdateUserVerifiedReq.debug:type_name -> pbcomm.Debug
	33,  // 314: pbimuinfoserver.UpdateUserVerifiedResult.Uinfo:type_name -> pbimuinfoserver.userInfo
	0,   // 315: pbimuinfoserver.UpdateUserVerifiedResult.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	431, // 316: pbimuinfoserver.AddPhoneBookContactsReply.Contacts:type_name -> pbimuinfoserver.Contact
	0,   // 317: pbimuinfoserver.AddPhoneBookContactsReply.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	0,   // 318: pbimuinfoserver.InviteCodeBindRsp.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	0,   // 319: pbimuinfoserver.MyTeamRsp.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	0,   // 320: pbimuinfoserver.RealNameCertificationRsp.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	0,   // 321: pbimuinfoserver.GetCertificationResultRsp.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	440, // 322: pbimuinfoserver.GetCertificationResultRsp.Result:type_name -> pbimuinfoserver.CertificationResult
	0,   // 323: pbimuinfoserver.VerifyCertificationRsp.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	0,   // 324: pbimuinfoserver.UpdateUserDetailV1Rsp.Errorcode:type_name -> pbimuinfoserver.ReErrCode
	433, // 325: pbimuinfoserver.UserServerService.InviteCodeBind:input_type -> pbimuinfoserver.InviteCodeBindReq
	435, // 326: pbimuinfoserver.UserServerService.MyTeam:input_type -> pbimuinfoserver.MyTeamReq
	437, // 327: pbimuinfoserver.UserServerService.RealNameCertification:input_type -> pbimuinfoserver.RealNameCertificationReq
	439, // 328: pbimuinfoserver.UserServerService.GetCertificationResult:input_type -> pbimuinfoserver.GetCertificationResultReq
	442, // 329: pbimuinfoserver.UserServerService.VerifyCertification:input_type -> pbimuinfoserver.VerifyCertificationReq
	444, // 330: pbimuinfoserver.UserServerService.UpdateUserDetailV1:input_type -> pbimuinfoserver.UpdateUserDetailV1Req
	430, // 331: pbimuinfoserver.UserServerService.AddPhoneBookContacts:input_type -> pbimuinfoserver.AddPhoneBookContactsReq
	411, // 332: pbimuinfoserver.UserServerService.SignUpV1:input_type -> pbimuinfoserver.SignUpV1Req
	216, // 333: pbimuinfoserver.UserServerService.UpdateUserTypeLable:input_type -> pbimuinfoserver.UpdateUserTypeLableReq
	208, // 334: pbimuinfoserver.UserServerService.UpdateUserDetail:input_type -> pbimuinfoserver.UpdateUserDetailReq
	210, // 335: pbimuinfoserver.UserServerService.UpdateUserDetailBirthday:input_type -> pbimuinfoserver.UpdateUserDetailBirthdayReq
	212, // 336: pbimuinfoserver.UserServerService.SetUserDetail:input_type -> pbimuinfoserver.SetUserDetailReq
	206, // 337: pbimuinfoserver.UserServerService.CheckUserHasPay:input_type -> pbimuinfoserver.CheckUserHasPayReq
	204, // 338: pbimuinfoserver.UserServerService.UpdateUserHasPay:input_type -> pbimuinfoserver.UpdateUserHasPayReq
	202, // 339: pbimuinfoserver.UserServerService.GetViplogPhoneList:input_type -> pbimuinfoserver.GetViplogPhoneListReq
	178, // 340: pbimuinfoserver.UserServerService.RegisterUserInfo:input_type -> pbimuinfoserver.RegisterUserInfoReq
	30,  // 341: pbimuinfoserver.UserServerService.GetUserInfoById:input_type -> pbimuinfoserver.GetUserInfoByIdReq
	31,  // 342: pbimuinfoserver.UserServerService.GetUserInfoByIdArr:input_type -> pbimuinfoserver.GetUserInfoByIdArrReq
	34,  // 343: pbimuinfoserver.UserServerService.GetUserExpierById:input_type -> pbimuinfoserver.GetUserExpireByIdReq
	36,  // 344: pbimuinfoserver.UserServerService.GetUserInfoByPhone:input_type -> pbimuinfoserver.GetUserByphone
	39,  // 345: pbimuinfoserver.UserServerService.GetUserInfoByUsername:input_type -> pbimuinfoserver.GetUserByUsername
	40,  // 346: pbimuinfoserver.UserServerService.UpdateUserPhoto:input_type -> pbimuinfoserver.updatePhotoInfoReq
	41,  // 347: pbimuinfoserver.UserServerService.GetUserPhoto:input_type -> pbimuinfoserver.GetPhotoInfoReq
	48,  // 348: pbimuinfoserver.UserServerService.UpdateUserStatus:input_type -> pbimuinfoserver.StatusReq
	48,  // 349: pbimuinfoserver.UserServerService.UpdateUserStatusV2:input_type -> pbimuinfoserver.StatusReq
	50,  // 350: pbimuinfoserver.UserServerService.UpdateUserExpire:input_type -> pbimuinfoserver.UpdateExpireReq
	52,  // 351: pbimuinfoserver.UserServerService.UpdateUserCluster:input_type -> pbimuinfoserver.UserClusterChange
	54,  // 352: pbimuinfoserver.UserServerService.UpdateUserName:input_type -> pbimuinfoserver.UpdateuserNameReq
	56,  // 353: pbimuinfoserver.UserServerService.UpdateUserLevel:input_type -> pbimuinfoserver.UpdateUserLevelReq
	58,  // 354: pbimuinfoserver.UserServerService.UpdateUserExtion:input_type -> pbimuinfoserver.UpdateUserExtionReq
	192, // 355: pbimuinfoserver.UserServerService.CheckUserNameOccupied:input_type -> pbimuinfoserver.CheckUserNameOccupiedReq
	60,  // 356: pbimuinfoserver.UserServerService.CheckPhoneRegister:input_type -> pbimuinfoserver.CheckPhoneRegisterReq
	62,  // 357: pbimuinfoserver.UserServerService.DeleteUserInfoById:input_type -> pbimuinfoserver.DeleteAccountByIdReq
	64,  // 358: pbimuinfoserver.UserServerService.UpdateBotInfo:input_type -> pbimuinfoserver.BotUpdateInfo
	187, // 359: pbimuinfoserver.UserServerService.UpdateBotPic:input_type -> pbimuinfoserver.UpdateBotPicRequest
	176, // 360: pbimuinfoserver.UserServerService.CheckUserAccessHashValid:input_type -> pbimuinfoserver.CheckUserAccessHashValidReq
	327, // 361: pbimuinfoserver.UserServerService.QueryUpdatesByUserid:input_type -> pbimuinfoserver.QueryUpdatesByUseridReq
	371, // 362: pbimuinfoserver.UserServerService.GetFullUser:input_type -> pbimuinfoserver.GetFullUserReq
	326, // 363: pbimuinfoserver.UserServerService.HistoryChangePhoneAdd:input_type -> pbimuinfoserver.HistoryChangePhoneAddReq
	314, // 364: pbimuinfoserver.UserServerService.AccountChangePhone:input_type -> pbimuinfoserver.ChangePhoneReq
	44,  // 365: pbimuinfoserver.UserServerService.UpdateUserProfile:input_type -> pbimuinfoserver.UpdateUserProfileReq
	365, // 366: pbimuinfoserver.UserServerService.SearchUserByPhone:input_type -> pbimuinfoserver.SearchUserByPhoneReq
	413, // 367: pbimuinfoserver.UserServerService.ContactsGetCommonContacts:input_type -> pbimuinfoserver.ContactsGetCommonContactsReq
	415, // 368: pbimuinfoserver.UserServerService.SearchUserByNickname:input_type -> pbimuinfoserver.SearchUserByNicknameReq
	335, // 369: pbimuinfoserver.UserServerService.DeleteUserUsername:input_type -> pbimuinfoserver.DeleteUserUsernameReq
	333, // 370: pbimuinfoserver.UserServerService.UpdateBotInfoSupp:input_type -> pbimuinfoserver.UpdateBotInfoSuppReq
	291, // 371: pbimuinfoserver.UserServerService.CheckIsMuteContact:input_type -> pbimuinfoserver.CheckIsMuteContactReq
	66,  // 372: pbimuinfoserver.UserServerService.ContactsDelContact:input_type -> pbimuinfoserver.DelContactReq
	68,  // 373: pbimuinfoserver.UserServerService.AcceptContact:input_type -> pbimuinfoserver.AcceptContactReq
	71,  // 374: pbimuinfoserver.UserServerService.ContactsDelContactsArr:input_type -> pbimuinfoserver.DelContactArrReq
	72,  // 375: pbimuinfoserver.UserServerService.CmdResetUserContacts:input_type -> pbimuinfoserver.CmdResetUserContactsReq
	75,  // 376: pbimuinfoserver.UserServerService.ContactsGetContacts:input_type -> pbimuinfoserver.ContatsGetContactsReq
	78,  // 377: pbimuinfoserver.UserServerService.ContactsGetContactsV1:input_type -> pbimuinfoserver.ContactsGetContactsV1Req
	224, // 378: pbimuinfoserver.UserServerService.GetContactsV1:input_type -> pbimuinfoserver.GetContactsV1Req
	80,  // 379: pbimuinfoserver.UserServerService.ContactsGetContactsId:input_type -> pbimuinfoserver.ContactsGetContactsIdReq
	83,  // 380: pbimuinfoserver.UserServerService.ImportContacts:input_type -> pbimuinfoserver.ContactsImportPhoneContactsReq
	184, // 381: pbimuinfoserver.UserServerService.GetContactsStatus:input_type -> pbimuinfoserver.GetContactsStatusReq
	196, // 382: pbimuinfoserver.UserServerService.CheckSelfIsContact:input_type -> pbimuinfoserver.CheckSelfIsContactReq
	220, // 383: pbimuinfoserver.UserServerService.CheckIsMutualContact:input_type -> pbimuinfoserver.CheckIsMutualContactReq
	87,  // 384: pbimuinfoserver.UserServerService.DialogUserRelation:input_type -> pbimuinfoserver.AddRelationIdInfo
	88,  // 385: pbimuinfoserver.UserServerService.DelDialogUserRelation:input_type -> pbimuinfoserver.DelRelationIdInfo
	343, // 386: pbimuinfoserver.UserServerService.UploadContacts:input_type -> pbimuinfoserver.UploadContactsReq
	345, // 387: pbimuinfoserver.UserServerService.ApplyContact:input_type -> pbimuinfoserver.ApplyContactReq
	347, // 388: pbimuinfoserver.UserServerService.ContactsGreetApply:input_type -> pbimuinfoserver.ContactsGreetApplyReq
	352, // 389: pbimuinfoserver.UserServerService.VerifyContact:input_type -> pbimuinfoserver.VerifyContactReq
	349, // 390: pbimuinfoserver.UserServerService.GetAppliedContacts:input_type -> pbimuinfoserver.GetAppliedContactsReq
	354, // 391: pbimuinfoserver.UserServerService.DeleteAppliedHistoryContact:input_type -> pbimuinfoserver.DeleteAppliedHistoryContactReq
	356, // 392: pbimuinfoserver.UserServerService.DeleteAppliedSomeContact:input_type -> pbimuinfoserver.DeleteAppliedSomeContactReq
	214, // 393: pbimuinfoserver.UserServerService.DeleteReceiveApplies:input_type -> pbimuinfoserver.DeleteReceiveAppliesReq
	358, // 394: pbimuinfoserver.UserServerService.ReadAppliedHistory:input_type -> pbimuinfoserver.ReadAppliedHistoryReq
	360, // 395: pbimuinfoserver.UserServerService.GetContactsApplyDifference:input_type -> pbimuinfoserver.GetContactsApplyDifferenceReq
	363, // 396: pbimuinfoserver.UserServerService.GetContactsApplyDifferenceV2:input_type -> pbimuinfoserver.GetContactsApplyDifferenceV2Req
	218, // 397: pbimuinfoserver.UserServerService.CheckSearchUserCountLimited:input_type -> pbimuinfoserver.CheckSearchUserCountLimitedReq
	367, // 398: pbimuinfoserver.UserServerService.CreateGroup:input_type -> pbimuinfoserver.CreateGroupReq
	369, // 399: pbimuinfoserver.UserServerService.SetUserGroup:input_type -> pbimuinfoserver.SetUserGroupReq
	222, // 400: pbimuinfoserver.UserServerService.ChangeGroupName:input_type -> pbimuinfoserver.ChangeGroupNameReq
	375, // 401: pbimuinfoserver.UserServerService.ChangeGroupOrder:input_type -> pbimuinfoserver.ChangeGroupOrderReq
	378, // 402: pbimuinfoserver.UserServerService.DeleteGroup:input_type -> pbimuinfoserver.DeleteGroupReq
	380, // 403: pbimuinfoserver.UserServerService.DeleteGroups:input_type -> pbimuinfoserver.DeleteGroupsReq
	91,  // 404: pbimuinfoserver.UserServerService.BlockedUser:input_type -> pbimuinfoserver.BlockeduserReq
	93,  // 405: pbimuinfoserver.UserServerService.ContactUnBlockedUser:input_type -> pbimuinfoserver.ContactUnblockedReq
	94,  // 406: pbimuinfoserver.UserServerService.ContactsGetBlocked:input_type -> pbimuinfoserver.ContactsGetBlockedReq
	172, // 407: pbimuinfoserver.UserServerService.CheckUserIsBlocked:input_type -> pbimuinfoserver.CheckUserIsBlockedReq
	98,  // 408: pbimuinfoserver.UserServerService.StoreSystemWhiteUser:input_type -> pbimuinfoserver.StoreSysWhiteUserReq
	100, // 409: pbimuinfoserver.UserServerService.UpdateSystemWhiteUserLevel:input_type -> pbimuinfoserver.UpdateSystemWhiteUserLevelReq
	102, // 410: pbimuinfoserver.UserServerService.GetSysWhiteUser:input_type -> pbimuinfoserver.GetSysWhiteUserReq
	104, // 411: pbimuinfoserver.UserServerService.GetSysWhiteUserArr:input_type -> pbimuinfoserver.GetSysWhiteUserArrReq
	106, // 412: pbimuinfoserver.UserServerService.DelSysWhiteUser:input_type -> pbimuinfoserver.DelSysWhiteUserReq
	109, // 413: pbimuinfoserver.UserServerService.GetAllUserDc:input_type -> pbimuinfoserver.GetAllDcReq
	110, // 414: pbimuinfoserver.UserServerService.SetUserPrivacy:input_type -> pbimuinfoserver.SetPrivacyReq
	112, // 415: pbimuinfoserver.UserServerService.GetUserPrivacy:input_type -> pbimuinfoserver.GetPrivacyReq
	113, // 416: pbimuinfoserver.UserServerService.CheckUserPrivacy:input_type -> pbimuinfoserver.CheckPrivacyReq
	180, // 417: pbimuinfoserver.UserServerService.GetNotifySettings:input_type -> pbimuinfoserver.GetNotifySettingsReq
	182, // 418: pbimuinfoserver.UserServerService.UpdateNotifySettings:input_type -> pbimuinfoserver.UpdateNotifySettingsReq
	194, // 419: pbimuinfoserver.UserServerService.GetUserGps:input_type -> pbimuinfoserver.GetUserGpsReq
	198, // 420: pbimuinfoserver.UserServerService.UpdateSwitch:input_type -> pbimuinfoserver.UpdateSwitchReq
	200, // 421: pbimuinfoserver.UserServerService.GetSwitchStatus:input_type -> pbimuinfoserver.GetSwitchStatusReq
	329, // 422: pbimuinfoserver.UserServerService.GetSwitchVersion:input_type -> pbimuinfoserver.GetSwitchVersionReq
	373, // 423: pbimuinfoserver.UserServerService.GetUserExpansion:input_type -> pbimuinfoserver.GetUserExpansionReq
	320, // 424: pbimuinfoserver.UserServerService.UserExpansionSet:input_type -> pbimuinfoserver.UserExpansionSetReq
	317, // 425: pbimuinfoserver.UserServerService.UserExpansionFind:input_type -> pbimuinfoserver.UserExpansionFindReq
	323, // 426: pbimuinfoserver.UserServerService.GetUserInfoExtend:input_type -> pbimuinfoserver.GetUserInfoExtendReq
	306, // 427: pbimuinfoserver.UserServerService.CheckUserSpaicl:input_type -> pbimuinfoserver.CheckUserSpaiclReq
	308, // 428: pbimuinfoserver.UserServerService.InsertUSerSpaicl:input_type -> pbimuinfoserver.InsertUSerSpaiclReq
	310, // 429: pbimuinfoserver.UserServerService.DelUSerSpaicl:input_type -> pbimuinfoserver.DelUSerSpaiclReq
	312, // 430: pbimuinfoserver.UserServerService.GetAllUSerSpaicl:input_type -> pbimuinfoserver.GetAllUSerSpaiclReq
	304, // 431: pbimuinfoserver.UserServerService.UserIpAddOrUpdate:input_type -> pbimuinfoserver.UserIpAddOrUpdateReq
	299, // 432: pbimuinfoserver.UserServerService.GetUserIpByAddr:input_type -> pbimuinfoserver.GetUserIpByAddrReq
	302, // 433: pbimuinfoserver.UserServerService.GetUserIpByUserId:input_type -> pbimuinfoserver.GetUserIpByUserIdReq
	297, // 434: pbimuinfoserver.UserServerService.GetRelationUsers:input_type -> pbimuinfoserver.GetRelationUsersReq
	293, // 435: pbimuinfoserver.UserServerService.SetUserUnsubscribe:input_type -> pbimuinfoserver.SetUserUnsubscribeReq
	295, // 436: pbimuinfoserver.UserServerService.GetUserUnsubscribe:input_type -> pbimuinfoserver.GetUserUnsubscribeReq
	285, // 437: pbimuinfoserver.UserServerService.RecvLockerAddUserId:input_type -> pbimuinfoserver.RecvLockerAddUserIdReq
	287, // 438: pbimuinfoserver.UserServerService.RecvLockerDelUserId:input_type -> pbimuinfoserver.RecvLockerDelUserIdReq
	289, // 439: pbimuinfoserver.UserServerService.RecvLockerGetUserIds:input_type -> pbimuinfoserver.RecvLockerGetUserIdsReq
	283, // 440: pbimuinfoserver.UserServerService.CheckDigitalWalletSwitch:input_type -> pbimuinfoserver.CheckDigitalWalletSwitchReq
	281, // 441: pbimuinfoserver.UserServerService.AddLoginDay:input_type -> pbimuinfoserver.AddLoginDayReq
	382, // 442: pbimuinfoserver.UserServerService.GetCustomerList:input_type -> pbimuinfoserver.GetCustomerListReq
	385, // 443: pbimuinfoserver.UserServerService.IsCustomerByUserId:input_type -> pbimuinfoserver.IsCustomerByUserIdReq
	387, // 444: pbimuinfoserver.UserServerService.GetCustomerOrientUsers:input_type -> pbimuinfoserver.GetCustomerOrientUsersReq
	389, // 445: pbimuinfoserver.UserServerService.CheckSpecialUser:input_type -> pbimuinfoserver.CheckSpecialUserReq
	391, // 446: pbimuinfoserver.UserServerService.GetForceGroupList:input_type -> pbimuinfoserver.GetForceGroupListReq
	393, // 447: pbimuinfoserver.UserServerService.GetNotForceGroupList:input_type -> pbimuinfoserver.GetNotForceGroupListReq
	279, // 448: pbimuinfoserver.UserServerService.GetPhoneBookInfos:input_type -> pbimuinfoserver.GetPhoneBookInfosReq
	395, // 449: pbimuinfoserver.UserServerService.PassWordRegistry:input_type -> pbimuinfoserver.PassWordRegistryReq
	401, // 450: pbimuinfoserver.UserServerService.RegistryUserByUsername:input_type -> pbimuinfoserver.RegistryUserByUsernameReq
	397, // 451: pbimuinfoserver.UserServerService.PassWordLogin:input_type -> pbimuinfoserver.PassWordLoginReq
	399, // 452: pbimuinfoserver.UserServerService.ChangePassWord:input_type -> pbimuinfoserver.ChangePassWordReq
	277, // 453: pbimuinfoserver.UserServerService.CheckIsSelfContact:input_type -> pbimuinfoserver.CheckIsSelfContactReq
	273, // 454: pbimuinfoserver.UserServerService.ChkCdnVip:input_type -> pbimuinfoserver.ChkCdnVipReq
	275, // 455: pbimuinfoserver.UserServerService.AddCdnVip:input_type -> pbimuinfoserver.AddCdnVipReq
	265, // 456: pbimuinfoserver.UserServerService.BuyCdnVip:input_type -> pbimuinfoserver.BuyCdnVipReq
	267, // 457: pbimuinfoserver.UserServerService.SetCdnVipAutoPay:input_type -> pbimuinfoserver.SetCdnVipAutoPayReq
	271, // 458: pbimuinfoserver.UserServerService.GetUserCdnVipInfo:input_type -> pbimuinfoserver.GetUserCdnVipInfoReq
	269, // 459: pbimuinfoserver.UserServerService.GetUserCdnPayList:input_type -> pbimuinfoserver.GetUserCdnPayListReq
	261, // 460: pbimuinfoserver.UserServerService.GenVitulaPhoneNumbers:input_type -> pbimuinfoserver.GenVitulaPhoneNumbersReq
	259, // 461: pbimuinfoserver.UserServerService.GetVitulPhoneNumbers:input_type -> pbimuinfoserver.GetVitulPhoneNumbersReq
	257, // 462: pbimuinfoserver.UserServerService.GetAllVitualUsersByFlags:input_type -> pbimuinfoserver.GetAllVitualUsersByFlagsReq
	254, // 463: pbimuinfoserver.UserServerService.CheckIsVitulaPhone:input_type -> pbimuinfoserver.CheckIsVitulaPhoneReq
	246, // 464: pbimuinfoserver.UserServerService.SignUpVitual:input_type -> pbimuinfoserver.SignUpVitualReq
	244, // 465: pbimuinfoserver.UserServerService.CheckIsVitulaPhoneArr:input_type -> pbimuinfoserver.CheckIsVitulaPhoneArrReq
	242, // 466: pbimuinfoserver.UserServerService.CheckIsPhoneVitulaPhone:input_type -> pbimuinfoserver.CheckIsPhoneVitulaPhoneReq
	252, // 467: pbimuinfoserver.UserServerService.JoinGroupCheck:input_type -> pbimuinfoserver.JoinGroupCheckReq
	240, // 468: pbimuinfoserver.UserServerService.VitualCheckCanAddContact:input_type -> pbimuinfoserver.VitualCheckCanAddContactReq
	238, // 469: pbimuinfoserver.UserServerService.GetVitualSendCodeChannel:input_type -> pbimuinfoserver.GetVitualSendCodeChannelReq
	236, // 470: pbimuinfoserver.UserServerService.BindVitualSendCodeChannel:input_type -> pbimuinfoserver.BindVitualSendCodeChannelReq
	248, // 471: pbimuinfoserver.UserServerService.VirtualBindRealPhone:input_type -> pbimuinfoserver.VirtualBindRealPhoneReq
	250, // 472: pbimuinfoserver.UserServerService.VirtualAddContactByPhone:input_type -> pbimuinfoserver.VirtualAddContactByPhoneReq
	230, // 473: pbimuinfoserver.UserServerService.GetVirtualBindByPhone:input_type -> pbimuinfoserver.GetVirtualBindByPhoneReq
	234, // 474: pbimuinfoserver.UserServerService.AddUserAdmin:input_type -> pbimuinfoserver.AddUserAdminReq
	232, // 475: pbimuinfoserver.UserServerService.GetuserAdminInfo:input_type -> pbimuinfoserver.GetuserAdminInfoReq
	226, // 476: pbimuinfoserver.UserServerService.SearchPrettyNumber:input_type -> pbimuinfoserver.SearchPrettyNumberReq
	228, // 477: pbimuinfoserver.UserServerService.ActivePrettyNumber:input_type -> pbimuinfoserver.ActivePrettyNumberReq
	417, // 478: pbimuinfoserver.UserServerService.GetUserRoleInfoByIds:input_type -> pbimuinfoserver.GetUserRoleInfoByIdsReq
	421, // 479: pbimuinfoserver.UserServerService.InnerUserOp:input_type -> pbimuinfoserver.InnerUserOpReq
	423, // 480: pbimuinfoserver.UserServerService.BindRealPhone:input_type -> pbimuinfoserver.BindRealPhoneReq
	425, // 481: pbimuinfoserver.UserServerService.GetUserRelationWithIds:input_type -> pbimuinfoserver.GetUserRelationWithIdsReq
	428, // 482: pbimuinfoserver.UserServerService.UpdateUserVerified:input_type -> pbimuinfoserver.UpdateUserVerifiedReq
	434, // 483: pbimuinfoserver.UserServerService.InviteCodeBind:output_type -> pbimuinfoserver.InviteCodeBindRsp
	436, // 484: pbimuinfoserver.UserServerService.MyTeam:output_type -> pbimuinfoserver.MyTeamRsp
	438, // 485: pbimuinfoserver.UserServerService.RealNameCertification:output_type -> pbimuinfoserver.RealNameCertificationRsp
	441, // 486: pbimuinfoserver.UserServerService.GetCertificationResult:output_type -> pbimuinfoserver.GetCertificationResultRsp
	443, // 487: pbimuinfoserver.UserServerService.VerifyCertification:output_type -> pbimuinfoserver.VerifyCertificationRsp
	445, // 488: pbimuinfoserver.UserServerService.UpdateUserDetailV1:output_type -> pbimuinfoserver.UpdateUserDetailV1Rsp
	432, // 489: pbimuinfoserver.UserServerService.AddPhoneBookContacts:output_type -> pbimuinfoserver.AddPhoneBookContactsReply
	412, // 490: pbimuinfoserver.UserServerService.SignUpV1:output_type -> pbimuinfoserver.SignUpV1Reply
	217, // 491: pbimuinfoserver.UserServerService.UpdateUserTypeLable:output_type -> pbimuinfoserver.UpdateUserTypeLableResult
	209, // 492: pbimuinfoserver.UserServerService.UpdateUserDetail:output_type -> pbimuinfoserver.UpdateUserDetailResult
	211, // 493: pbimuinfoserver.UserServerService.UpdateUserDetailBirthday:output_type -> pbimuinfoserver.UpdateUserDetailBirthdayResult
	213, // 494: pbimuinfoserver.UserServerService.SetUserDetail:output_type -> pbimuinfoserver.SetUserDetailResult
	207, // 495: pbimuinfoserver.UserServerService.CheckUserHasPay:output_type -> pbimuinfoserver.CheckUserHasPayResp
	205, // 496: pbimuinfoserver.UserServerService.UpdateUserHasPay:output_type -> pbimuinfoserver.UpdateUserHasPayResp
	203, // 497: pbimuinfoserver.UserServerService.GetViplogPhoneList:output_type -> pbimuinfoserver.GetViplogPhoneListResp
	179, // 498: pbimuinfoserver.UserServerService.RegisterUserInfo:output_type -> pbimuinfoserver.RegisterUserInfoResult
	37,  // 499: pbimuinfoserver.UserServerService.GetUserInfoById:output_type -> pbimuinfoserver.GetUserInfoResult
	38,  // 500: pbimuinfoserver.UserServerService.GetUserInfoByIdArr:output_type -> pbimuinfoserver.GetUserInfoByIdArrResult
	35,  // 501: pbimuinfoserver.UserServerService.GetUserExpierById:output_type -> pbimuinfoserver.GetUserExpireByIdResult
	37,  // 502: pbimuinfoserver.UserServerService.GetUserInfoByPhone:output_type -> pbimuinfoserver.GetUserInfoResult
	37,  // 503: pbimuinfoserver.UserServerService.GetUserInfoByUsername:output_type -> pbimuinfoserver.GetUserInfoResult
	42,  // 504: pbimuinfoserver.UserServerService.UpdateUserPhoto:output_type -> pbimuinfoserver.UpdateUserPhotoResult
	43,  // 505: pbimuinfoserver.UserServerService.GetUserPhoto:output_type -> pbimuinfoserver.GetUserPhotoResult
	49,  // 506: pbimuinfoserver.UserServerService.UpdateUserStatus:output_type -> pbimuinfoserver.StatusResult
	49,  // 507: pbimuinfoserver.UserServerService.UpdateUserStatusV2:output_type -> pbimuinfoserver.StatusResult
	51,  // 508: pbimuinfoserver.UserServerService.UpdateUserExpire:output_type -> pbimuinfoserver.UpdateExpireResult
	53,  // 509: pbimuinfoserver.UserServerService.UpdateUserCluster:output_type -> pbimuinfoserver.UserClusterChangeResult
	55,  // 510: pbimuinfoserver.UserServerService.UpdateUserName:output_type -> pbimuinfoserver.UpdateuserNameResult
	57,  // 511: pbimuinfoserver.UserServerService.UpdateUserLevel:output_type -> pbimuinfoserver.UpdateUserLevelResult
	59,  // 512: pbimuinfoserver.UserServerService.UpdateUserExtion:output_type -> pbimuinfoserver.UpdateUserExtionResult
	193, // 513: pbimuinfoserver.UserServerService.CheckUserNameOccupied:output_type -> pbimuinfoserver.CheckUserNameOccupiedResult
	61,  // 514: pbimuinfoserver.UserServerService.CheckPhoneRegister:output_type -> pbimuinfoserver.CheckPhoneRegisterResult
	63,  // 515: pbimuinfoserver.UserServerService.DeleteUserInfoById:output_type -> pbimuinfoserver.DelAccountResult
	65,  // 516: pbimuinfoserver.UserServerService.UpdateBotInfo:output_type -> pbimuinfoserver.BotUpdateInfoResult
	188, // 517: pbimuinfoserver.UserServerService.UpdateBotPic:output_type -> pbimuinfoserver.UpdateBotPicResult
	177, // 518: pbimuinfoserver.UserServerService.CheckUserAccessHashValid:output_type -> pbimuinfoserver.CheckUserAccessHashValidResult
	328, // 519: pbimuinfoserver.UserServerService.QueryUpdatesByUserid:output_type -> pbimuinfoserver.QueryUpdatesByUseridResult
	372, // 520: pbimuinfoserver.UserServerService.GetFullUser:output_type -> pbimuinfoserver.GetFullUserResult
	325, // 521: pbimuinfoserver.UserServerService.HistoryChangePhoneAdd:output_type -> pbimuinfoserver.HistoryChangePhoneAddResult
	315, // 522: pbimuinfoserver.UserServerService.AccountChangePhone:output_type -> pbimuinfoserver.ChangePhoneResult
	47,  // 523: pbimuinfoserver.UserServerService.UpdateUserProfile:output_type -> pbimuinfoserver.UpdateUserProfileResult
	366, // 524: pbimuinfoserver.UserServerService.SearchUserByPhone:output_type -> pbimuinfoserver.SearchUserByPhoneResult
	414, // 525: pbimuinfoserver.UserServerService.ContactsGetCommonContacts:output_type -> pbimuinfoserver.ContactsGetCommonContactsResult
	416, // 526: pbimuinfoserver.UserServerService.SearchUserByNickname:output_type -> pbimuinfoserver.SearchUserByNicknameResult
	336, // 527: pbimuinfoserver.UserServerService.DeleteUserUsername:output_type -> pbimuinfoserver.DeleteUserUsernameResult
	334, // 528: pbimuinfoserver.UserServerService.UpdateBotInfoSupp:output_type -> pbimuinfoserver.UpdateBotInfoSuppResult
	292, // 529: pbimuinfoserver.UserServerService.CheckIsMuteContact:output_type -> pbimuinfoserver.CheckIsMuteContactResult
	67,  // 530: pbimuinfoserver.UserServerService.ContactsDelContact:output_type -> pbimuinfoserver.DelContactResult
	69,  // 531: pbimuinfoserver.UserServerService.AcceptContact:output_type -> pbimuinfoserver.AcceptContactResult
	74,  // 532: pbimuinfoserver.UserServerService.ContactsDelContactsArr:output_type -> pbimuinfoserver.DelContactArrResult
	73,  // 533: pbimuinfoserver.UserServerService.CmdResetUserContacts:output_type -> pbimuinfoserver.CmdResetUserContactsResult
	77,  // 534: pbimuinfoserver.UserServerService.ContactsGetContacts:output_type -> pbimuinfoserver.ContatsGetContactsResult
	79,  // 535: pbimuinfoserver.UserServerService.ContactsGetContactsV1:output_type -> pbimuinfoserver.ContactsGetContactsV1Result
	225, // 536: pbimuinfoserver.UserServerService.GetContactsV1:output_type -> pbimuinfoserver.GetContactsV1Result
	81,  // 537: pbimuinfoserver.UserServerService.ContactsGetContactsId:output_type -> pbimuinfoserver.ContactsGetContactsIdResult
	86,  // 538: pbimuinfoserver.UserServerService.ImportContacts:output_type -> pbimuinfoserver.ContactsImportPhoneContactsResult
	186, // 539: pbimuinfoserver.UserServerService.GetContactsStatus:output_type -> pbimuinfoserver.GetContactsStatusResult
	197, // 540: pbimuinfoserver.UserServerService.CheckSelfIsContact:output_type -> pbimuinfoserver.CheckSelfIsContactResult
	221, // 541: pbimuinfoserver.UserServerService.CheckIsMutualContact:output_type -> pbimuinfoserver.CheckIsMutualContactResult
	89,  // 542: pbimuinfoserver.UserServerService.DialogUserRelation:output_type -> pbimuinfoserver.AddRelationIdInfoResult
	90,  // 543: pbimuinfoserver.UserServerService.DelDialogUserRelation:output_type -> pbimuinfoserver.DelRelationIdInfoResult
	344, // 544: pbimuinfoserver.UserServerService.UploadContacts:output_type -> pbimuinfoserver.UploadContactsResult
	346, // 545: pbimuinfoserver.UserServerService.ApplyContact:output_type -> pbimuinfoserver.ApplyContactResult
	348, // 546: pbimuinfoserver.UserServerService.ContactsGreetApply:output_type -> pbimuinfoserver.ContactsGreetApplyResult
	353, // 547: pbimuinfoserver.UserServerService.VerifyContact:output_type -> pbimuinfoserver.VerifyContactResult
	350, // 548: pbimuinfoserver.UserServerService.GetAppliedContacts:output_type -> pbimuinfoserver.GetAppliedContactsResult
	355, // 549: pbimuinfoserver.UserServerService.DeleteAppliedHistoryContact:output_type -> pbimuinfoserver.DeleteAppliedHistoryContactResult
	357, // 550: pbimuinfoserver.UserServerService.DeleteAppliedSomeContact:output_type -> pbimuinfoserver.DeleteAppliedSomeContactResult
	215, // 551: pbimuinfoserver.UserServerService.DeleteReceiveApplies:output_type -> pbimuinfoserver.DeleteReceiveAppliesResult
	359, // 552: pbimuinfoserver.UserServerService.ReadAppliedHistory:output_type -> pbimuinfoserver.ReadAppliedHistoryResult
	362, // 553: pbimuinfoserver.UserServerService.GetContactsApplyDifference:output_type -> pbimuinfoserver.GetContactsApplyDifferenceResult
	364, // 554: pbimuinfoserver.UserServerService.GetContactsApplyDifferenceV2:output_type -> pbimuinfoserver.GetContactsApplyDifferenceV2Result
	219, // 555: pbimuinfoserver.UserServerService.CheckSearchUserCountLimited:output_type -> pbimuinfoserver.CheckSearchUserCountLimitedResult
	368, // 556: pbimuinfoserver.UserServerService.CreateGroup:output_type -> pbimuinfoserver.CreateGroupResult
	370, // 557: pbimuinfoserver.UserServerService.SetUserGroup:output_type -> pbimuinfoserver.SetUserGroupResult
	223, // 558: pbimuinfoserver.UserServerService.ChangeGroupName:output_type -> pbimuinfoserver.ChangeGroupNameResult
	377, // 559: pbimuinfoserver.UserServerService.ChangeGroupOrder:output_type -> pbimuinfoserver.ChangeGroupOrderResult
	379, // 560: pbimuinfoserver.UserServerService.DeleteGroup:output_type -> pbimuinfoserver.DeleteGroupResult
	381, // 561: pbimuinfoserver.UserServerService.DeleteGroups:output_type -> pbimuinfoserver.DeleteGroupsResult
	92,  // 562: pbimuinfoserver.UserServerService.BlockedUser:output_type -> pbimuinfoserver.BlockeduserResult
	92,  // 563: pbimuinfoserver.UserServerService.ContactUnBlockedUser:output_type -> pbimuinfoserver.BlockeduserResult
	96,  // 564: pbimuinfoserver.UserServerService.ContactsGetBlocked:output_type -> pbimuinfoserver.ContactsGetBlockedResult
	173, // 565: pbimuinfoserver.UserServerService.CheckUserIsBlocked:output_type -> pbimuinfoserver.CheckUserIsBlockedResult
	99,  // 566: pbimuinfoserver.UserServerService.StoreSystemWhiteUser:output_type -> pbimuinfoserver.StoreSysWhiteUserResult
	101, // 567: pbimuinfoserver.UserServerService.UpdateSystemWhiteUserLevel:output_type -> pbimuinfoserver.UpdateSystemWhiteUserLevelResult
	103, // 568: pbimuinfoserver.UserServerService.GetSysWhiteUser:output_type -> pbimuinfoserver.GetSysWhiteUserResult
	105, // 569: pbimuinfoserver.UserServerService.GetSysWhiteUserArr:output_type -> pbimuinfoserver.GetSysWhiteUserArrResult
	107, // 570: pbimuinfoserver.UserServerService.DelSysWhiteUser:output_type -> pbimuinfoserver.DelSysWhiteUserResult
	108, // 571: pbimuinfoserver.UserServerService.GetAllUserDc:output_type -> pbimuinfoserver.UserDc
	111, // 572: pbimuinfoserver.UserServerService.SetUserPrivacy:output_type -> pbimuinfoserver.SetPrivacyResult
	115, // 573: pbimuinfoserver.UserServerService.GetUserPrivacy:output_type -> pbimuinfoserver.GetPrivacyResult
	114, // 574: pbimuinfoserver.UserServerService.CheckUserPrivacy:output_type -> pbimuinfoserver.CheckPrivacyResult
	181, // 575: pbimuinfoserver.UserServerService.GetNotifySettings:output_type -> pbimuinfoserver.GetNotifySettingsResult
	183, // 576: pbimuinfoserver.UserServerService.UpdateNotifySettings:output_type -> pbimuinfoserver.UpdateNotifySettingsResult
	195, // 577: pbimuinfoserver.UserServerService.GetUserGps:output_type -> pbimuinfoserver.GetUserGpsResult
	199, // 578: pbimuinfoserver.UserServerService.UpdateSwitch:output_type -> pbimuinfoserver.UpdateSwitchResult
	201, // 579: pbimuinfoserver.UserServerService.GetSwitchStatus:output_type -> pbimuinfoserver.GetSwitchStatusResult
	330, // 580: pbimuinfoserver.UserServerService.GetSwitchVersion:output_type -> pbimuinfoserver.GetSwitchVersionResult
	374, // 581: pbimuinfoserver.UserServerService.GetUserExpansion:output_type -> pbimuinfoserver.GetUserExpansionResult
	321, // 582: pbimuinfoserver.UserServerService.UserExpansionSet:output_type -> pbimuinfoserver.UserExpansionSetResult
	318, // 583: pbimuinfoserver.UserServerService.UserExpansionFind:output_type -> pbimuinfoserver.UserExpansionFindResult
	324, // 584: pbimuinfoserver.UserServerService.GetUserInfoExtend:output_type -> pbimuinfoserver.GetUserInfoExtendResult
	307, // 585: pbimuinfoserver.UserServerService.CheckUserSpaicl:output_type -> pbimuinfoserver.CheckUserSpaiclResult
	309, // 586: pbimuinfoserver.UserServerService.InsertUSerSpaicl:output_type -> pbimuinfoserver.InsertUSerSpaiclResult
	311, // 587: pbimuinfoserver.UserServerService.DelUSerSpaicl:output_type -> pbimuinfoserver.DelUSerSpaiclResult
	313, // 588: pbimuinfoserver.UserServerService.GetAllUSerSpaicl:output_type -> pbimuinfoserver.GetAllUSerSpaiclResult
	305, // 589: pbimuinfoserver.UserServerService.UserIpAddOrUpdate:output_type -> pbimuinfoserver.UserIpAddOrUpdateResult
	300, // 590: pbimuinfoserver.UserServerService.GetUserIpByAddr:output_type -> pbimuinfoserver.GetUserIpByAddrResult
	303, // 591: pbimuinfoserver.UserServerService.GetUserIpByUserId:output_type -> pbimuinfoserver.GetUserIpByUserIdResult
	298, // 592: pbimuinfoserver.UserServerService.GetRelationUsers:output_type -> pbimuinfoserver.GetRelationUsersResult
	294, // 593: pbimuinfoserver.UserServerService.SetUserUnsubscribe:output_type -> pbimuinfoserver.SetUserUnsubscribeResult
	296, // 594: pbimuinfoserver.UserServerService.GetUserUnsubscribe:output_type -> pbimuinfoserver.GetUserUnsubscribeResult
	286, // 595: pbimuinfoserver.UserServerService.RecvLockerAddUserId:output_type -> pbimuinfoserver.RecvLockerAddUserIdResult
	288, // 596: pbimuinfoserver.UserServerService.RecvLockerDelUserId:output_type -> pbimuinfoserver.RecvLockerDelUserIdResult
	290, // 597: pbimuinfoserver.UserServerService.RecvLockerGetUserIds:output_type -> pbimuinfoserver.RecvLockerGetUserIdsResult
	284, // 598: pbimuinfoserver.UserServerService.CheckDigitalWalletSwitch:output_type -> pbimuinfoserver.CheckDigitalWalletSwitchResult
	282, // 599: pbimuinfoserver.UserServerService.AddLoginDay:output_type -> pbimuinfoserver.AddLoginDayResult
	384, // 600: pbimuinfoserver.UserServerService.GetCustomerList:output_type -> pbimuinfoserver.GetCustomerListReply
	386, // 601: pbimuinfoserver.UserServerService.IsCustomerByUserId:output_type -> pbimuinfoserver.IsCustomerByUserIdReply
	388, // 602: pbimuinfoserver.UserServerService.GetCustomerOrientUsers:output_type -> pbimuinfoserver.GetCustomerOrientUsersReply
	390, // 603: pbimuinfoserver.UserServerService.CheckSpecialUser:output_type -> pbimuinfoserver.CheckSpecialUserReply
	392, // 604: pbimuinfoserver.UserServerService.GetForceGroupList:output_type -> pbimuinfoserver.GetForceGroupListReply
	394, // 605: pbimuinfoserver.UserServerService.GetNotForceGroupList:output_type -> pbimuinfoserver.GetNotForceGroupListReply
	280, // 606: pbimuinfoserver.UserServerService.GetPhoneBookInfos:output_type -> pbimuinfoserver.GetPhoneBookInfosResult
	396, // 607: pbimuinfoserver.UserServerService.PassWordRegistry:output_type -> pbimuinfoserver.PassWordRegistryReply
	402, // 608: pbimuinfoserver.UserServerService.RegistryUserByUsername:output_type -> pbimuinfoserver.RegistryUserByUsernameReply
	398, // 609: pbimuinfoserver.UserServerService.PassWordLogin:output_type -> pbimuinfoserver.PassWordLoginReply
	400, // 610: pbimuinfoserver.UserServerService.ChangePassWord:output_type -> pbimuinfoserver.ChangePassWordReply
	278, // 611: pbimuinfoserver.UserServerService.CheckIsSelfContact:output_type -> pbimuinfoserver.CheckIsSelfContactResult
	274, // 612: pbimuinfoserver.UserServerService.ChkCdnVip:output_type -> pbimuinfoserver.ChkCdnVipRsp
	276, // 613: pbimuinfoserver.UserServerService.AddCdnVip:output_type -> pbimuinfoserver.AddCdnVipRsp
	266, // 614: pbimuinfoserver.UserServerService.BuyCdnVip:output_type -> pbimuinfoserver.BuyCdnVipRsp
	268, // 615: pbimuinfoserver.UserServerService.SetCdnVipAutoPay:output_type -> pbimuinfoserver.SetCdnVipAutoPayRsp
	272, // 616: pbimuinfoserver.UserServerService.GetUserCdnVipInfo:output_type -> pbimuinfoserver.GetUserCdnVipInfoRsp
	270, // 617: pbimuinfoserver.UserServerService.GetUserCdnPayList:output_type -> pbimuinfoserver.GetUserCdnPayListRsp
	262, // 618: pbimuinfoserver.UserServerService.GenVitulaPhoneNumbers:output_type -> pbimuinfoserver.GenVitulaPhoneNumbersResp
	260, // 619: pbimuinfoserver.UserServerService.GetVitulPhoneNumbers:output_type -> pbimuinfoserver.GetVitulPhoneNumbersResp
	258, // 620: pbimuinfoserver.UserServerService.GetAllVitualUsersByFlags:output_type -> pbimuinfoserver.GetAllVitualUsersByFlagsResp
	255, // 621: pbimuinfoserver.UserServerService.CheckIsVitulaPhone:output_type -> pbimuinfoserver.CheckIsVitulaPhoneResp
	247, // 622: pbimuinfoserver.UserServerService.SignUpVitual:output_type -> pbimuinfoserver.SignUpVitualResp
	245, // 623: pbimuinfoserver.UserServerService.CheckIsVitulaPhoneArr:output_type -> pbimuinfoserver.CheckIsVitulaPhoneArrResp
	243, // 624: pbimuinfoserver.UserServerService.CheckIsPhoneVitulaPhone:output_type -> pbimuinfoserver.CheckIsPhoneVitulaPhoneResp
	253, // 625: pbimuinfoserver.UserServerService.JoinGroupCheck:output_type -> pbimuinfoserver.JoinGroupCheckRsp
	241, // 626: pbimuinfoserver.UserServerService.VitualCheckCanAddContact:output_type -> pbimuinfoserver.VitualCheckCanAddContactResp
	239, // 627: pbimuinfoserver.UserServerService.GetVitualSendCodeChannel:output_type -> pbimuinfoserver.GetVitualSendCodeChannelResp
	237, // 628: pbimuinfoserver.UserServerService.BindVitualSendCodeChannel:output_type -> pbimuinfoserver.BindVitualSendCodeChannelResp
	249, // 629: pbimuinfoserver.UserServerService.VirtualBindRealPhone:output_type -> pbimuinfoserver.VirtualBindRealPhoneRsp
	251, // 630: pbimuinfoserver.UserServerService.VirtualAddContactByPhone:output_type -> pbimuinfoserver.VirtualAddContactByPhoneRsp
	231, // 631: pbimuinfoserver.UserServerService.GetVirtualBindByPhone:output_type -> pbimuinfoserver.GetVirtualBindByPhoneRsp
	235, // 632: pbimuinfoserver.UserServerService.AddUserAdmin:output_type -> pbimuinfoserver.AddUserAdminResp
	233, // 633: pbimuinfoserver.UserServerService.GetuserAdminInfo:output_type -> pbimuinfoserver.GetuserAdminInfoResp
	227, // 634: pbimuinfoserver.UserServerService.SearchPrettyNumber:output_type -> pbimuinfoserver.SearchPrettyNumberRsp
	229, // 635: pbimuinfoserver.UserServerService.ActivePrettyNumber:output_type -> pbimuinfoserver.ActivePrettyNumberRsp
	419, // 636: pbimuinfoserver.UserServerService.GetUserRoleInfoByIds:output_type -> pbimuinfoserver.GetUserRoleInfoByIdsRsp
	422, // 637: pbimuinfoserver.UserServerService.InnerUserOp:output_type -> pbimuinfoserver.InnerUserOpRsp
	424, // 638: pbimuinfoserver.UserServerService.BindRealPhone:output_type -> pbimuinfoserver.BindRealPhoneRsp
	427, // 639: pbimuinfoserver.UserServerService.GetUserRelationWithIds:output_type -> pbimuinfoserver.GetUserRelationWithIdsRsp
	429, // 640: pbimuinfoserver.UserServerService.UpdateUserVerified:output_type -> pbimuinfoserver.UpdateUserVerifiedResult
	483, // [483:641] is the sub-list for method output_type
	325, // [325:483] is the sub-list for method input_type
	325, // [325:325] is the sub-list for extension type_name
	325, // [325:325] is the sub-list for extension extendee
	0,   // [0:325] is the sub-list for field type_name
}

func init() { file_imuinfoserver_proto_init() }
func file_imuinfoserver_proto_init() {
	if File_imuinfoserver_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_imuinfoserver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInfoByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInfoByIdArrReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserExpireByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserExpireByIdResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserByphone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInfoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInfoByIdArrResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserByUsername); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePhotoInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPhotoInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserPhotoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserPhotoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserProfileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserFullReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserFullResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserProfileResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateExpireReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateExpireResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserClusterChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserClusterChangeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateuserNameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateuserNameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserLevelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserLevelResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserExtionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserExtionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckPhoneRegisterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckPhoneRegisterResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAccountByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelAccountResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BotUpdateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BotUpdateInfoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelContactReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelContactResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptContactReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptContactResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactIdHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelContactArrReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdResetUserContactsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdResetUserContactsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelContactArrResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContatsGetContactsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContatsGetContactsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactsGetContactsV1Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactsGetContactsV1Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactsGetContactsIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactsGetContactsIdResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhoneBookContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactsImportPhoneContactsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PopularContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactsImportPhoneContactsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRelationIdInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelRelationIdInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRelationIdInfoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelRelationIdInfoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockeduserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockeduserResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactUnblockedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactsGetBlockedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Blockeduser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactsGetBlockedResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemWhiteUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreSysWhiteUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreSysWhiteUserResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSystemWhiteUserLevelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSystemWhiteUserLevelResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSysWhiteUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSysWhiteUserResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSysWhiteUserArrReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSysWhiteUserArrResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelSysWhiteUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelSysWhiteUserResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllDcReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPrivacyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPrivacyResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPrivacyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckPrivacyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckPrivacyResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPrivacyResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreShopStickerSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreShopStickerSetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreShopStickerSetDocumentsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreShopStickerSetDocumentsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStickerSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStickerSetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StickerSetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStickerSetInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStickerSetInfoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StickerPackDocumentBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StickerPackDocumentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreStickerPackDcReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreStickerPackDcResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreStickerPackDcArrReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreStickerPackDcArrResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStickerSetPackDcInfosReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStickerSetPackDcInfosResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOrDeleteFaveSticerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOrDeleteFaveSticerResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFavedStickersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFavedStickersResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StickerPack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreUserStickerSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreUserStickerSetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserStickerSetDisabledReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserStickerSetDisabledResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserStickerSetOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserStickerSetOrderResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserStickerSetInstallArReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserStickerSetInstallArResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteuserStickerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteuserStickerResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStickerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStickerInfoArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StickerSetInfoArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetuserAllStickersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetuserAllStickersResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllStickerSetsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllStickerSetsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStickerPackDocumentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStickerPackDocumentResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuthorStickerSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuthorStickerSetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuthorAllStickerSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuthorAllStickerSetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorStickerSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAuthorAllStickerSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAuthorAllStickerSetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGifInfoArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSaveGifInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveUserGifReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveUserGifResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelUserGifReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelUserGifResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserGifsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserGifsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserIsBlockedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserIsBlockedResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserInfoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserAccessHashValidReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserAccessHashValidResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterUserInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterUserInfoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNotifySettingsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNotifySettingsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNotifySettingsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNotifySettingsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContactsStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStaus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContactsStatusResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBotPicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBotPicResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllProxyConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyAddr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllProxyConfigResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserNameOccupiedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserNameOccupiedResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserGpsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserGpsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSelfIsContactReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSelfIsContactResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSwitchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSwitchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSwitchStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSwitchStatusResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetViplogPhoneListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetViplogPhoneListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserHasPayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserHasPayResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserHasPayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserHasPayResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserDetailResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserDetailBirthdayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserDetailBirthdayResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUserDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUserDetailResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReceiveAppliesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReceiveAppliesResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserTypeLableReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserTypeLableResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSearchUserCountLimitedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSearchUserCountLimitedResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckIsMutualContactReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckIsMutualContactResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeGroupNameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeGroupNameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContactsV1Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContactsV1Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchPrettyNumberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchPrettyNumberRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivePrettyNumberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivePrettyNumberRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVirtualBindByPhoneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVirtualBindByPhoneRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetuserAdminInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetuserAdminInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUserAdminReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUserAdminResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindVitualSendCodeChannelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindVitualSendCodeChannelResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVitualSendCodeChannelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVitualSendCodeChannelResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VitualCheckCanAddContactReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VitualCheckCanAddContactResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckIsPhoneVitulaPhoneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckIsPhoneVitulaPhoneResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckIsVitulaPhoneArrReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckIsVitulaPhoneArrResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignUpVitualReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignUpVitualResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualBindRealPhoneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualBindRealPhoneRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualAddContactByPhoneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualAddContactByPhoneRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinGroupCheckReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinGroupCheckRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckIsVitulaPhoneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckIsVitulaPhoneResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtulPhoneInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllVitualUsersByFlagsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllVitualUsersByFlagsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVitulPhoneNumbersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVitulPhoneNumbersResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenVitulaPhoneNumbersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenVitulaPhoneNumbersResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCdnVipInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCdnPayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuyCdnVipReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuyCdnVipRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCdnVipAutoPayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCdnVipAutoPayRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCdnPayListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCdnPayListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCdnVipInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCdnVipInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChkCdnVipReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChkCdnVipRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCdnVipReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCdnVipRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckIsSelfContactReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckIsSelfContactResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPhoneBookInfosReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPhoneBookInfosResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddLoginDayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddLoginDayResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckDigitalWalletSwitchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckDigitalWalletSwitchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecvLockerAddUserIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecvLockerAddUserIdResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecvLockerDelUserIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecvLockerDelUserIdResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecvLockerGetUserIdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecvLockerGetUserIdsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckIsMuteContactReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckIsMuteContactResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUserUnsubscribeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUserUnsubscribeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserUnsubscribeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserUnsubscribeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRelationUsersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRelationUsersResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserIpByAddrReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserIpByAddrResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIpAddr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserIpByUserIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserIpByUserIdResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIpAddOrUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIpAddOrUpdateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserSpaiclReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserSpaiclResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertUSerSpaiclReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertUSerSpaiclResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelUSerSpaiclReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelUSerSpaiclResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllUSerSpaiclReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllUSerSpaiclResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePhoneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePhoneResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualPhoneNumberInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserExpansionFindReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserExpansionFindResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserExpansion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserExpansionSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserExpansionSetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoExtend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInfoExtendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInfoExtendResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[295].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryChangePhoneAddResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[296].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryChangePhoneAddReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[297].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryUpdatesByUseridReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[298].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryUpdatesByUseridResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[299].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSwitchVersionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[300].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSwitchVersionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[301].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UGetUsersChatsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[302].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UGetUsersChatsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[303].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBotInfoSuppReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[304].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBotInfoSuppResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[305].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserUsernameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[306].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserUsernameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[307].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserLocationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[308].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserLocationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[309].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserGrenderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[310].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserGrenderResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[311].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserEmailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[312].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserEmailResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[313].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadContactsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[314].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadContactsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[315].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyContactReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[316].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyContactResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[317].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactsGreetApplyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[318].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactsGreetApplyResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[319].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppliedContactsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[320].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppliedContactsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[321].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Applied); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[322].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyContactReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[323].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyContactResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[324].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAppliedHistoryContactReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[325].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAppliedHistoryContactResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[326].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAppliedSomeContactReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[327].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAppliedSomeContactResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[328].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadAppliedHistoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[329].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadAppliedHistoryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[330].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContactsApplyDifferenceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[331].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyDifference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[332].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContactsApplyDifferenceResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[333].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContactsApplyDifferenceV2Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[334].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContactsApplyDifferenceV2Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[335].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchUserByPhoneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[336].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchUserByPhoneResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[337].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[338].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[339].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUserGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[340].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUserGroupResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[341].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFullUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[342].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFullUserResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[343].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserExpansionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[344].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserExpansionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[345].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeGroupOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[346].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[347].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeGroupOrderResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[348].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[349].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGroupResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[350].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGroupsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[351].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGroupsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[352].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[353].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[354].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[355].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsCustomerByUserIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[356].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsCustomerByUserIdReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[357].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerOrientUsersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[358].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerOrientUsersReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[359].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSpecialUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[360].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSpecialUserReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[361].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetForceGroupListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[362].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetForceGroupListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[363].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNotForceGroupListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[364].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNotForceGroupListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[365].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassWordRegistryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[366].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassWordRegistryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[367].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassWordLoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[368].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassWordLoginReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[369].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePassWordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[370].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePassWordReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[371].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistryUserByUsernameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[372].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistryUserByUsernameReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[373].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuthTokenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[374].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuthTokenReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[375].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindUserTokenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[376].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindUserTokenReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[377].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserByAuthTokenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[378].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserByAuthTokenReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[379].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyAuthTokenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[380].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyAuthTokenReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[381].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignUpV1Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[382].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignUpV1Reply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[383].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactsGetCommonContactsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[384].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactsGetCommonContactsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[385].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchUserByNicknameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[386].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchUserByNicknameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[387].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserRoleInfoByIdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[388].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRoleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[389].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserRoleInfoByIdsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[390].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InnerUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[391].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InnerUserOpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[392].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InnerUserOpRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[393].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindRealPhoneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[394].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindRealPhoneRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[395].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserRelationWithIdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[396].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Relation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[397].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserRelationWithIdsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[398].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserVerifiedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[399].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserVerifiedResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[400].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPhoneBookContactsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[401].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[402].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPhoneBookContactsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[403].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteCodeBindReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[404].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteCodeBindRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[405].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyTeamReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[406].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyTeamRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[407].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealNameCertificationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[408].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealNameCertificationRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[409].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCertificationResultReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[410].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[411].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCertificationResultRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[412].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyCertificationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[413].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyCertificationRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[414].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserDetailV1Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imuinfoserver_proto_msgTypes[415].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserDetailV1Rsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_imuinfoserver_proto_rawDesc,
			NumEnums:      30,
			NumMessages:   416,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_imuinfoserver_proto_goTypes,
		DependencyIndexes: file_imuinfoserver_proto_depIdxs,
		EnumInfos:         file_imuinfoserver_proto_enumTypes,
		MessageInfos:      file_imuinfoserver_proto_msgTypes,
	}.Build()
	File_imuinfoserver_proto = out.File
	file_imuinfoserver_proto_rawDesc = nil
	file_imuinfoserver_proto_goTypes = nil
	file_imuinfoserver_proto_depIdxs = nil
}
