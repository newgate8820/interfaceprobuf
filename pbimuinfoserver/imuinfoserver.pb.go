// Code generated by protoc-gen-gogo.
// source: gitlab.chatserver.im/interfaceprobuf/pbimuinfoserver/imuinfoserver.proto
// DO NOT EDIT!

/*
Package pbimuinfoserver is a generated protocol buffer package.

It is generated from these files:

	gitlab.chatserver.im/interfaceprobuf/pbimuinfoserver/imuinfoserver.proto

It has these top-level messages:

	GetUserInfoByIdReq
	GetUserInfoByIdArrReq
	UserInfoArray
	UserInfo
	GetUserExpireByIdReq
	GetUserExpireByIdResult
	GetUserByphone
	GetUserInfoResult
	GetUserInfoByIdArrResult
	GetUserByUsername
	UpdatePhotoInfoReq
	GetPhotoInfoReq
	UpdateUserPhotoResult
	GetUserPhotoResult
	UpdateUserProfileReq
	UpdateUserFullReq
	UpdateUserFullResult
	UpdateUserProfileResult
	StatusReq
	StatusResult
	UpdateExpireReq
	UpdateExpireResult
	UserClusterChange
	UserClusterChangeResult
	UpdateuserNameReq
	UpdateuserNameResult
	UpdateUserLevelReq
	UpdateUserLevelResult
	UpdateUserExtionReq
	UpdateUserExtionResult
	CheckPhoneRegisterReq
	CheckPhoneRegisterResult
	DeleteAccountByIdReq
	DelAccountResult
	BotUpdateInfo
	BotUpdateInfoResult
	DelContactReq
	DelContactResult
	AcceptContactReq
	AcceptContactResult
	ContactIdHash
	DelContactArrReq
	CmdResetUserContactsReq
	CmdResetUserContactsResult
	DelContactArrResult
	ContatsGetContactsReq
	ContactInfo
	ContatsGetContactsResult
	ContactsGetContactsV1Req
	ContactsGetContactsV1Result
	ContactsGetContactsIdReq
	ContactsGetContactsIdResult
	PhoneBookContact
	ContactsImportPhoneContactsReq
	ImportContact
	PopularContact
	ContactsImportPhoneContactsResult
	AddRelationIdInfo
	DelRelationIdInfo
	AddRelationIdInfoResult
	DelRelationIdInfoResult
	BlockeduserReq
	BlockeduserResult
	ContactUnblockedReq
	ContactsGetBlockedReq
	Blockeduser
	ContactsGetBlockedResult
	SystemWhiteUser
	StoreSysWhiteUserReq
	StoreSysWhiteUserResult
	UpdateSystemWhiteUserLevelReq
	UpdateSystemWhiteUserLevelResult
	GetSysWhiteUserReq
	GetSysWhiteUserResult
	GetSysWhiteUserArrReq
	GetSysWhiteUserArrResult
	DelSysWhiteUserReq
	DelSysWhiteUserResult
	UserDc
	GetAllDcReq
	SetPrivacyReq
	SetPrivacyResult
	GetPrivacyReq
	CheckPrivacyReq
	CheckPrivacyResult
	GetPrivacyResult
	StoreShopStickerSetReq
	StoreShopStickerSetResult
	StoreShopStickerSetDocumentsReq
	StoreShopStickerSetDocumentsResult
	DeleteStickerSetReq
	DeleteStickerSetResult
	StickerSetInfo
	GetStickerSetInfoReq
	GetStickerSetInfoResult
	StickerPackDocumentBase
	StickerPackDocumentInfo
	StoreStickerPackDcReq
	StoreStickerPackDcResult
	StoreStickerPackDcArrReq
	StoreStickerPackDcArrResult
	GetStickerSetPackDcInfosReq
	GetStickerSetPackDcInfosResult
	AddOrDeleteFaveSticerReq
	AddOrDeleteFaveSticerResult
	GetFavedStickersReq
	GetFavedStickersResult
	StickerPack
	StoreUserStickerSetReq
	StoreUserStickerSetResult
	UpdateUserStickerSetDisabledReq
	UpdateUserStickerSetDisabledResult
	UpdateUserStickerSetOrderReq
	UpdateUserStickerSetOrderResult
	UpdateUserStickerSetInstallArReq
	UpdateUserStickerSetInstallArResult
	DeleteuserStickerReq
	DeleteuserStickerResult
	UserStickerInfo
	UserStickerInfoArr
	StickerSetInfoArr
	GetuserAllStickersReq
	GetuserAllStickersResult
	GetAllStickerSetsReq
	GetAllStickerSetsResult
	DeleteStickerPackDocumentReq
	DeleteStickerPackDocumentResult
	GetAuthorStickerSetReq
	GetAuthorStickerSetResult
	GetAuthorAllStickerSetReq
	GetAuthorAllStickerSetResult
	AuthorStickerSet
	CountAuthorAllStickerSetReq
	CountAuthorAllStickerSetResult
	UserGifInfoArr
	UserSaveGifInfo
	SaveUserGifReq
	SaveUserGifResult
	DelUserGifReq
	DelUserGifResult
	GetUserGifsReq
	GetUserGifsResult
	CheckUserIsBlockedReq
	CheckUserIsBlockedResult
	RegisterUserInfo
	UpdateUserInfoResult
	CheckUserAccessHashValidReq
	CheckUserAccessHashValidResult
	RegisterUserInfoReq
	RegisterUserInfoResult
	GetNotifySettingsReq
	GetNotifySettingsResult
	UpdateNotifySettingsReq
	UpdateNotifySettingsResult
	GetContactsStatusReq
	UserStaus
	GetContactsStatusResult
	UpdateBotPicRequest
	UpdateBotPicResult
	GetAllProxyConfigReq
	ProxyAddr
	GetAllProxyConfigResult
	CheckUserNameOccupiedReq
	CheckUserNameOccupiedResult
	GetUserGpsReq
	GetUserGpsResult
	CheckSelfIsContactReq
	CheckSelfIsContactResult
	UpdateSwitchReq
	UpdateSwitchResult
	GetSwitchStatusReq
	GetSwitchStatusResult
	GetViplogPhoneListReq
	GetViplogPhoneListResp
	UpdateUserHasPayReq
	UpdateUserHasPayResp
	CheckUserHasPayReq
	CheckUserHasPayResp
	UpdateUserDetailReq
	UpdateUserDetailResult
	UpdateUserDetailBirthdayReq
	UpdateUserDetailBirthdayResult
	SetUserDetailReq
	SetUserDetailResult
	DeleteReceiveAppliesReq
	DeleteReceiveAppliesResult
	UpdateUserTypeLableReq
	UpdateUserTypeLableResult
	CheckSearchUserCountLimitedReq
	CheckSearchUserCountLimitedResult
	CheckIsMutualContactReq
	CheckIsMutualContactResult
	ChangeGroupNameReq
	ChangeGroupNameResult
	GetContactsV1Req
	GetContactsV1Result
	SearchPrettyNumberReq
	SearchPrettyNumberRsp
	ActivePrettyNumberReq
	ActivePrettyNumberRsp
	GetVirtualBindByPhoneReq
	GetVirtualBindByPhoneRsp
	GetuserAdminInfoReq
	GetuserAdminInfoResp
	AddUserAdminReq
	AddUserAdminResp
	BindVitualSendCodeChannelReq
	BindVitualSendCodeChannelResp
	GetVitualSendCodeChannelReq
	GetVitualSendCodeChannelResp
	VitualCheckCanAddContactReq
	VitualCheckCanAddContactResp
	CheckIsPhoneVitulaPhoneReq
	CheckIsPhoneVitulaPhoneResp
	CheckIsVitulaPhoneArrReq
	CheckIsVitulaPhoneArrResp
	SignUpVitualReq
	SignUpVitualResp
	VirtualBindRealPhoneReq
	VirtualBindRealPhoneRsp
	VirtualAddContactByPhoneReq
	VirtualAddContactByPhoneRsp
	JoinGroupCheckReq
	JoinGroupCheckRsp
	CheckIsVitulaPhoneReq
	CheckIsVitulaPhoneResp
	VirtulPhoneInfo
	GetAllVitualUsersByFlagsReq
	GetAllVitualUsersByFlagsResp
	GetVitulPhoneNumbersReq
	GetVitulPhoneNumbersResp
	GenVitulaPhoneNumbersReq
	GenVitulaPhoneNumbersResp
	UserCdnVipInfo
	UserCdnPayInfo
	BuyCdnVipReq
	BuyCdnVipRsp
	SetCdnVipAutoPayReq
	SetCdnVipAutoPayRsp
	GetUserCdnPayListReq
	GetUserCdnPayListRsp
	GetUserCdnVipInfoReq
	GetUserCdnVipInfoRsp
	ChkCdnVipReq
	ChkCdnVipRsp
	AddCdnVipReq
	AddCdnVipRsp
	CheckIsSelfContactReq
	CheckIsSelfContactResult
	GetPhoneBookInfosReq
	GetPhoneBookInfosResult
	AddLoginDayReq
	AddLoginDayResult
	CheckDigitalWalletSwitchReq
	CheckDigitalWalletSwitchResult
	RecvLockerAddUserIdReq
	RecvLockerAddUserIdResult
	RecvLockerDelUserIdReq
	RecvLockerDelUserIdResult
	RecvLockerGetUserIdsReq
	RecvLockerGetUserIdsResult
	CheckIsMuteContactReq
	CheckIsMuteContactResult
	SetUserUnsubscribeReq
	SetUserUnsubscribeResult
	GetUserUnsubscribeReq
	GetUserUnsubscribeResult
	GetRelationUsersReq
	GetRelationUsersResult
	GetUserIpByAddrReq
	GetUserIpByAddrResult
	UserIpAddr
	GetUserIpByUserIdReq
	GetUserIpByUserIdResult
	UserIpAddOrUpdateReq
	UserIpAddOrUpdateResult
	CheckUserSpaiclReq
	CheckUserSpaiclResult
	InsertUSerSpaiclReq
	InsertUSerSpaiclResult
	DelUSerSpaiclReq
	DelUSerSpaiclResult
	GetAllUSerSpaiclReq
	GetAllUSerSpaiclResult
	ChangePhoneReq
	ChangePhoneResult
	VirtualPhoneNumberInfo
	UserExpansionFindReq
	UserExpansionFindResult
	UserExpansion
	UserExpansionSetReq
	UserExpansionSetResult
	UserInfoExtend
	GetUserInfoExtendReq
	GetUserInfoExtendResult
	HistoryChangePhoneAddResult
	HistoryChangePhoneAddReq
	QueryUpdatesByUseridReq
	QueryUpdatesByUseridResult
	GetSwitchVersionReq
	GetSwitchVersionResult
	UGetUsersChatsReq
	UGetUsersChatsResult
	UpdateBotInfoSuppReq
	UpdateBotInfoSuppResult
	DeleteUserUsernameReq
	DeleteUserUsernameResult
	UpdateUserLocationReq
	UpdateUserLocationResult
	UpdateUserGrenderReq
	UpdateUserGrenderResult
	UpdateUserEmailReq
	UpdateUserEmailResult
	UploadContactsReq
	UploadContactsResult
	ApplyContactReq
	ApplyContactResult
	ContactsGreetApplyReq
	ContactsGreetApplyResult
	GetAppliedContactsReq
	GetAppliedContactsResult
	Applied
	VerifyContactReq
	VerifyContactResult
	DeleteAppliedHistoryContactReq
	DeleteAppliedHistoryContactResult
	DeleteAppliedSomeContactReq
	DeleteAppliedSomeContactResult
	ReadAppliedHistoryReq
	ReadAppliedHistoryResult
	GetContactsApplyDifferenceReq
	ApplyDifference
	GetContactsApplyDifferenceResult
	GetContactsApplyDifferenceV2Req
	GetContactsApplyDifferenceV2Result
	SearchUserByPhoneReq
	SearchUserByPhoneResult
	CreateGroupReq
	CreateGroupResult
	SetUserGroupReq
	SetUserGroupResult
	GetFullUserReq
	GetFullUserResult
	GetUserExpansionReq
	GetUserExpansionResult
	ChangeGroupOrderReq
	GroupOrder
	ChangeGroupOrderResult
	DeleteGroupReq
	DeleteGroupResult
	DeleteGroupsReq
	DeleteGroupsResult
	GetCustomerListReq
	CustomerList
	GetCustomerListReply
	IsCustomerByUserIdReq
	IsCustomerByUserIdReply
	GetCustomerOrientUsersReq
	GetCustomerOrientUsersReply
	CheckSpecialUserReq
	CheckSpecialUserReply
	GetForceGroupListReq
	GetForceGroupListReply
	GetNotForceGroupListReq
	GetNotForceGroupListReply
	PassWordRegistryReq
	PassWordRegistryReply
	PassWordLoginReq
	PassWordLoginReply
	ChangePassWordReq
	ChangePassWordReply
	RegistryUserByUsernameReq
	RegistryUserByUsernameReply
	GetAuthTokenReq
	GetAuthTokenReply
	BindUserTokenReq
	BindUserTokenReply
	GetUserByAuthTokenReq
	GetUserByAuthTokenReply
	VerifyAuthTokenReq
	VerifyAuthTokenReply
	SignUpV1Req
	SignUpV1Reply
	ContactsGetCommonContactsReq
	ContactsGetCommonContactsResult
	SearchUserByNicknameReq
	SearchUserByNicknameResult
	GetUserRoleInfoByIdsReq
	UserRoleInfo
	GetUserRoleInfoByIdsRsp
	InnerUser
	InnerUserOpReq
	InnerUserOpRsp
	BindRealPhoneReq
	BindRealPhoneRsp
	GetUserRelationWithIdsReq
	Relation
	GetUserRelationWithIdsRsp
	UpdateUserVerifiedReq
	UpdateUserVerifiedResult
	AddPhoneBookContactsReq
	Contact
	AddPhoneBookContactsReply
	InviteCodeBindReq
	InviteCodeBindRsp
	MyTeamReq
	MyTeamRsp
	RealNameCertificationReq
	RealNameCertificationRsp
	GetCertificationResultReq
	CertificationResult
	GetCertificationResultRsp
	VerifyCertificationReq
	VerifyCertificationRsp
	UpdateUserDetailV1Req
	UpdateUserDetailV1Rsp
*/
package pbimuinfoserver

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import pbcomm "gitlab.chatserver.im/interfaceprobuf/pbcomm"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ReErrCode int32

const (
	ReErrCode_Success                   ReErrCode = 0
	ReErrCode_DBError                   ReErrCode = 1
	ReErrCode_InternalError             ReErrCode = 2
	ReErrCode_NotExist                  ReErrCode = 3
	ReErrCode_UserNameOccupied          ReErrCode = 4
	ReErrCode_Register                  ReErrCode = 5
	ReErrCode_Unregister                ReErrCode = 6
	ReErrCode_NotModify                 ReErrCode = 7
	ReErrCode_Blocked                   ReErrCode = 8
	ReErrCode_UnBlocked                 ReErrCode = 9
	ReErrCode_Valid                     ReErrCode = 10
	ReErrCode_UnValid                   ReErrCode = 11
	ReErrCode_Failed                    ReErrCode = 12
	ReErrCode_HashNotSuccess            ReErrCode = 13
	ReErrCode_UsernameNotEmpty          ReErrCode = 14
	ReErrCode_VipOnly                   ReErrCode = 15
	ReErrCode_IllegalUserId             ReErrCode = 16
	ReErrCode_CanNotBeSelf              ReErrCode = 17
	ReErrCode_ContactHasAdded           ReErrCode = 18
	ReErrCode_AppliedNotExist           ReErrCode = 19
	ReErrCode_Params                    ReErrCode = 20
	ReErrCode_Unknown                   ReErrCode = 21
	ReErrCode_RedisError                ReErrCode = 22
	ReErrCode_GroupNotExist             ReErrCode = 23
	ReErrCode_AppliedNotModify          ReErrCode = 24
	ReErrCode_UserNotDefaultGroup       ReErrCode = 25
	ReErrCode_UserNotExist              ReErrCode = 26
	ReErrCode_UserAddContactToManyByDay ReErrCode = 27
	ReErrCode_InviteCodeIsBind          ReErrCode = 28
	ReErrCode_CertificateIsBind         ReErrCode = 29
	ReErrCode_NoCertification           ReErrCode = 30
	ReErrCode_NOT_ALLOWED_MODIFY        ReErrCode = 31
)

var ReErrCode_name = map[int32]string{
	0:  "Success",
	1:  "DBError",
	2:  "InternalError",
	3:  "NotExist",
	4:  "UserNameOccupied",
	5:  "Register",
	6:  "Unregister",
	7:  "NotModify",
	8:  "Blocked",
	9:  "UnBlocked",
	10: "Valid",
	11: "UnValid",
	12: "Failed",
	13: "HashNotSuccess",
	14: "UsernameNotEmpty",
	15: "VipOnly",
	16: "IllegalUserId",
	17: "CanNotBeSelf",
	18: "ContactHasAdded",
	19: "AppliedNotExist",
	20: "Params",
	21: "Unknown",
	22: "RedisError",
	23: "GroupNotExist",
	24: "AppliedNotModify",
	25: "UserNotDefaultGroup",
	26: "UserNotExist",
	27: "UserAddContactToManyByDay",
	28: "InviteCodeIsBind",
	29: "CertificateIsBind",
	30: "NoCertification",
	31: "NOT_ALLOWED_MODIFY",
}
var ReErrCode_value = map[string]int32{
	"Success":                   0,
	"DBError":                   1,
	"InternalError":             2,
	"NotExist":                  3,
	"UserNameOccupied":          4,
	"Register":                  5,
	"Unregister":                6,
	"NotModify":                 7,
	"Blocked":                   8,
	"UnBlocked":                 9,
	"Valid":                     10,
	"UnValid":                   11,
	"Failed":                    12,
	"HashNotSuccess":            13,
	"UsernameNotEmpty":          14,
	"VipOnly":                   15,
	"IllegalUserId":             16,
	"CanNotBeSelf":              17,
	"ContactHasAdded":           18,
	"AppliedNotExist":           19,
	"Params":                    20,
	"Unknown":                   21,
	"RedisError":                22,
	"GroupNotExist":             23,
	"AppliedNotModify":          24,
	"UserNotDefaultGroup":       25,
	"UserNotExist":              26,
	"UserAddContactToManyByDay": 27,
	"InviteCodeIsBind":          28,
	"CertificateIsBind":         29,
	"NoCertification":           30,
	"NOT_ALLOWED_MODIFY":        31,
}

func (x ReErrCode) String() string {
	return proto.EnumName(ReErrCode_name, int32(x))
}
func (ReErrCode) EnumDescriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{0} }

// 密码注册错误码
type PasswordRegistryErrorCode int32

const (
	// 成功
	PasswordRegistryErrorCode_SUCCESS PasswordRegistryErrorCode = 0
	// 用户名已存在
	PasswordRegistryErrorCode_USERNAME_EXIST PasswordRegistryErrorCode = 1
	// 用户不存在
	PasswordRegistryErrorCode_USERNAME_NOT_EXIST PasswordRegistryErrorCode = 2
	// 用户名无效
	PasswordRegistryErrorCode_USERNAME_INVALID PasswordRegistryErrorCode = 3
	// 用户名错误
	PasswordRegistryErrorCode_USERNAME_ERROR PasswordRegistryErrorCode = 4
	// 密码错误
	PasswordRegistryErrorCode_PASSWORD_ERROR PasswordRegistryErrorCode = 5
	// 密码无效
	PasswordRegistryErrorCode_PASSWORD_INVALID PasswordRegistryErrorCode = 6
	// 内部错误
	PasswordRegistryErrorCode_INTERNAL_ERROR PasswordRegistryErrorCode = 7
	// 密码错误次数过多
	PasswordRegistryErrorCode_PASSWORD_ERROR_MANY PasswordRegistryErrorCode = 8
)

var PasswordRegistryErrorCode_name = map[int32]string{
	0: "SUCCESS",
	1: "USERNAME_EXIST",
	2: "USERNAME_NOT_EXIST",
	3: "USERNAME_INVALID",
	4: "USERNAME_ERROR",
	5: "PASSWORD_ERROR",
	6: "PASSWORD_INVALID",
	7: "INTERNAL_ERROR",
	8: "PASSWORD_ERROR_MANY",
}
var PasswordRegistryErrorCode_value = map[string]int32{
	"SUCCESS":             0,
	"USERNAME_EXIST":      1,
	"USERNAME_NOT_EXIST":  2,
	"USERNAME_INVALID":    3,
	"USERNAME_ERROR":      4,
	"PASSWORD_ERROR":      5,
	"PASSWORD_INVALID":    6,
	"INTERNAL_ERROR":      7,
	"PASSWORD_ERROR_MANY": 8,
}

func (x PasswordRegistryErrorCode) String() string {
	return proto.EnumName(PasswordRegistryErrorCode_name, int32(x))
}
func (PasswordRegistryErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{1}
}

// user switch type
type Switch int32

const (
	Switch_Unused             Switch = 0
	Switch_UsernameSearch     Switch = 1
	Switch_UnreadIncludeMuted Switch = 2
	Switch_DisableMultiSignIn Switch = 3
)

var Switch_name = map[int32]string{
	0: "Unused",
	1: "UsernameSearch",
	2: "UnreadIncludeMuted",
	3: "DisableMultiSignIn",
}
var Switch_value = map[string]int32{
	"Unused":             0,
	"UsernameSearch":     1,
	"UnreadIncludeMuted": 2,
	"DisableMultiSignIn": 3,
}

func (x Switch) String() string {
	return proto.EnumName(Switch_name, int32(x))
}
func (Switch) EnumDescriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{2} }

type UChatResultCode int32

const (
	UChatResultCode_Chat_RPC_OK                     UChatResultCode = 0
	UChatResultCode_Chat_ADDUSER3549_EXP            UChatResultCode = 4000
	UChatResultCode_Chat_User_Priavcay              UChatResultCode = 4001
	UChatResultCode_Chat_To_User_Blocked            UChatResultCode = 4002
	UChatResultCode_Chat_User_Blocked               UChatResultCode = 4003
	UChatResultCode_Chat_REPEAT_CREAT               UChatResultCode = 4004
	UChatResultCode_Chat_REPEAT_ADD_USER            UChatResultCode = 4005
	UChatResultCode_Chat_EXCEED_CREATE_MAXNUM       UChatResultCode = 4006
	UChatResultCode_Chat_EXCEED_TODAY_CREATE_MAXNUM UChatResultCode = 4007
	UChatResultCode_Chat_EXCEED_ADD_USER_MAXNUM     UChatResultCode = 4008
	UChatResultCode_Chat_PROHIBIT_ADD_GROUP         UChatResultCode = 4009
	UChatResultCode_Chat_ADMINLEVEL_EXCEPTION       UChatResultCode = 4010
	UChatResultCode_Chat_ALREADYLEFT_EXCEPTION      UChatResultCode = 4011
	UChatResultCode_Chat_GROUP_DISBAND              UChatResultCode = 4012
	UChatResultCode_Chat_GROUP_KICKED               UChatResultCode = 4013
	UChatResultCode_Chat_HOURS_ADD_USER_MAXNUM      UChatResultCode = 4114
	UChatResultCode_Chat_ONCE_ADD_USER_MAXNUM       UChatResultCode = 4115
	//
	UChatResultCode_Chat_UNKNOWN               UChatResultCode = 4100
	UChatResultCode_Chat_PARAMETER_EXCEPTION   UChatResultCode = 4101
	UChatResultCode_Chat_LOGIC_EXCEPTION       UChatResultCode = 4102
	UChatResultCode_Chat_REDIS_EXCEPTION       UChatResultCode = 4103
	UChatResultCode_Chat_DB_EXCEPTION          UChatResultCode = 4104
	UChatResultCode_Chat_AllocId_EXCEPTION     UChatResultCode = 4105
	UChatResultCode_Chat_CallGetUser_EXCEPTION UChatResultCode = 4106
	UChatResultCode_Chat_DB_NORECORD           UChatResultCode = 4107
	UChatResultCode_Chat_Group_NORECORD        UChatResultCode = 4108
)

var UChatResultCode_name = map[int32]string{
	0:    "Chat_RPC_OK",
	4000: "Chat_ADDUSER3549_EXP",
	4001: "Chat_User_Priavcay",
	4002: "Chat_To_User_Blocked",
	4003: "Chat_User_Blocked",
	4004: "Chat_REPEAT_CREAT",
	4005: "Chat_REPEAT_ADD_USER",
	4006: "Chat_EXCEED_CREATE_MAXNUM",
	4007: "Chat_EXCEED_TODAY_CREATE_MAXNUM",
	4008: "Chat_EXCEED_ADD_USER_MAXNUM",
	4009: "Chat_PROHIBIT_ADD_GROUP",
	4010: "Chat_ADMINLEVEL_EXCEPTION",
	4011: "Chat_ALREADYLEFT_EXCEPTION",
	4012: "Chat_GROUP_DISBAND",
	4013: "Chat_GROUP_KICKED",
	4114: "Chat_HOURS_ADD_USER_MAXNUM",
	4115: "Chat_ONCE_ADD_USER_MAXNUM",
	4100: "Chat_UNKNOWN",
	4101: "Chat_PARAMETER_EXCEPTION",
	4102: "Chat_LOGIC_EXCEPTION",
	4103: "Chat_REDIS_EXCEPTION",
	4104: "Chat_DB_EXCEPTION",
	4105: "Chat_AllocId_EXCEPTION",
	4106: "Chat_CallGetUser_EXCEPTION",
	4107: "Chat_DB_NORECORD",
	4108: "Chat_Group_NORECORD",
}
var UChatResultCode_value = map[string]int32{
	"Chat_RPC_OK":                     0,
	"Chat_ADDUSER3549_EXP":            4000,
	"Chat_User_Priavcay":              4001,
	"Chat_To_User_Blocked":            4002,
	"Chat_User_Blocked":               4003,
	"Chat_REPEAT_CREAT":               4004,
	"Chat_REPEAT_ADD_USER":            4005,
	"Chat_EXCEED_CREATE_MAXNUM":       4006,
	"Chat_EXCEED_TODAY_CREATE_MAXNUM": 4007,
	"Chat_EXCEED_ADD_USER_MAXNUM":     4008,
	"Chat_PROHIBIT_ADD_GROUP":         4009,
	"Chat_ADMINLEVEL_EXCEPTION":       4010,
	"Chat_ALREADYLEFT_EXCEPTION":      4011,
	"Chat_GROUP_DISBAND":              4012,
	"Chat_GROUP_KICKED":               4013,
	"Chat_HOURS_ADD_USER_MAXNUM":      4114,
	"Chat_ONCE_ADD_USER_MAXNUM":       4115,
	"Chat_UNKNOWN":                    4100,
	"Chat_PARAMETER_EXCEPTION":        4101,
	"Chat_LOGIC_EXCEPTION":            4102,
	"Chat_REDIS_EXCEPTION":            4103,
	"Chat_DB_EXCEPTION":               4104,
	"Chat_AllocId_EXCEPTION":          4105,
	"Chat_CallGetUser_EXCEPTION":      4106,
	"Chat_DB_NORECORD":                4107,
	"Chat_Group_NORECORD":             4108,
}

func (x UChatResultCode) String() string {
	return proto.EnumName(UChatResultCode_name, int32(x))
}
func (UChatResultCode) EnumDescriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{3} }

// ************* 授权登录 ********************
// 授权登录错误码
type OAuthLoginError int32

const (
	// 成功
	OAuthLoginError_OAUTH_LOGIN_SUCCESS OAuthLoginError = 0
	// 内部错误
	OAuthLoginError_OAUTH_LOGIN_INTERNAL_ERROR OAuthLoginError = 1
	// user id 错误
	OAuthLoginError_OAUTH_LOGIN_USER_ID_ERROR OAuthLoginError = 2
	// token 过期
	OAuthLoginError_OAUTH_LOGIN_TOKEN_EXPIRE OAuthLoginError = 3
)

var OAuthLoginError_name = map[int32]string{
	0: "OAUTH_LOGIN_SUCCESS",
	1: "OAUTH_LOGIN_INTERNAL_ERROR",
	2: "OAUTH_LOGIN_USER_ID_ERROR",
	3: "OAUTH_LOGIN_TOKEN_EXPIRE",
}
var OAuthLoginError_value = map[string]int32{
	"OAUTH_LOGIN_SUCCESS":        0,
	"OAUTH_LOGIN_INTERNAL_ERROR": 1,
	"OAUTH_LOGIN_USER_ID_ERROR":  2,
	"OAUTH_LOGIN_TOKEN_EXPIRE":   3,
}

func (x OAuthLoginError) String() string {
	return proto.EnumName(OAuthLoginError_name, int32(x))
}
func (OAuthLoginError) EnumDescriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{4} }

type UpdateSwitchResult_ResultCode int32

const (
	UpdateSwitchResult_Success       UpdateSwitchResult_ResultCode = 0
	UpdateSwitchResult_InternalError UpdateSwitchResult_ResultCode = 1
)

var UpdateSwitchResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var UpdateSwitchResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x UpdateSwitchResult_ResultCode) String() string {
	return proto.EnumName(UpdateSwitchResult_ResultCode_name, int32(x))
}
func (UpdateSwitchResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{169, 0}
}

type GetSwitchStatusResult_ResultCode int32

const (
	GetSwitchStatusResult_Success       GetSwitchStatusResult_ResultCode = 0
	GetSwitchStatusResult_InternalError GetSwitchStatusResult_ResultCode = 1
)

var GetSwitchStatusResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var GetSwitchStatusResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x GetSwitchStatusResult_ResultCode) String() string {
	return proto.EnumName(GetSwitchStatusResult_ResultCode_name, int32(x))
}
func (GetSwitchStatusResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{171, 0}
}

type SignUpVitualResp_ResultCode int32

const (
	SignUpVitualResp_Success             SignUpVitualResp_ResultCode = 0
	SignUpVitualResp_InternalError       SignUpVitualResp_ResultCode = 1
	SignUpVitualResp_PhoneNumberInvalid  SignUpVitualResp_ResultCode = 2
	SignUpVitualResp_PhoneNumberOccupied SignUpVitualResp_ResultCode = 3
	SignUpVitualResp_CaptchaExpired      SignUpVitualResp_ResultCode = 4
	SignUpVitualResp_CaptchaInvalid      SignUpVitualResp_ResultCode = 5
	SignUpVitualResp_FloodWait           SignUpVitualResp_ResultCode = 6
	SignUpVitualResp_SignUpRobotBlocked  SignUpVitualResp_ResultCode = 7
)

var SignUpVitualResp_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
	2: "PhoneNumberInvalid",
	3: "PhoneNumberOccupied",
	4: "CaptchaExpired",
	5: "CaptchaInvalid",
	6: "FloodWait",
	7: "SignUpRobotBlocked",
}
var SignUpVitualResp_ResultCode_value = map[string]int32{
	"Success":             0,
	"InternalError":       1,
	"PhoneNumberInvalid":  2,
	"PhoneNumberOccupied": 3,
	"CaptchaExpired":      4,
	"CaptchaInvalid":      5,
	"FloodWait":           6,
	"SignUpRobotBlocked":  7,
}

func (x SignUpVitualResp_ResultCode) String() string {
	return proto.EnumName(SignUpVitualResp_ResultCode_name, int32(x))
}
func (SignUpVitualResp_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{217, 0}
}

type GetPhoneBookInfosResult_ResultCode int32

const (
	GetPhoneBookInfosResult_Success       GetPhoneBookInfosResult_ResultCode = 0
	GetPhoneBookInfosResult_InternalError GetPhoneBookInfosResult_ResultCode = 1
	GetPhoneBookInfosResult_Failed        GetPhoneBookInfosResult_ResultCode = 2
)

var GetPhoneBookInfosResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
	2: "Failed",
}
var GetPhoneBookInfosResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
	"Failed":        2,
}

func (x GetPhoneBookInfosResult_ResultCode) String() string {
	return proto.EnumName(GetPhoneBookInfosResult_ResultCode_name, int32(x))
}
func (GetPhoneBookInfosResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{250, 0}
}

type AddLoginDayResult_ResultCode int32

const (
	AddLoginDayResult_Success       AddLoginDayResult_ResultCode = 0
	AddLoginDayResult_InternalError AddLoginDayResult_ResultCode = 1
)

var AddLoginDayResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var AddLoginDayResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x AddLoginDayResult_ResultCode) String() string {
	return proto.EnumName(AddLoginDayResult_ResultCode_name, int32(x))
}
func (AddLoginDayResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{252, 0}
}

type CheckDigitalWalletSwitchResult_ResultCode int32

const (
	CheckDigitalWalletSwitchResult_Success       CheckDigitalWalletSwitchResult_ResultCode = 0
	CheckDigitalWalletSwitchResult_InternalError CheckDigitalWalletSwitchResult_ResultCode = 1
)

var CheckDigitalWalletSwitchResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var CheckDigitalWalletSwitchResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x CheckDigitalWalletSwitchResult_ResultCode) String() string {
	return proto.EnumName(CheckDigitalWalletSwitchResult_ResultCode_name, int32(x))
}
func (CheckDigitalWalletSwitchResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{254, 0}
}

type RecvLockerAddUserIdResult_ResultCode int32

const (
	RecvLockerAddUserIdResult_Success       RecvLockerAddUserIdResult_ResultCode = 0
	RecvLockerAddUserIdResult_InternalError RecvLockerAddUserIdResult_ResultCode = 1
)

var RecvLockerAddUserIdResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var RecvLockerAddUserIdResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x RecvLockerAddUserIdResult_ResultCode) String() string {
	return proto.EnumName(RecvLockerAddUserIdResult_ResultCode_name, int32(x))
}
func (RecvLockerAddUserIdResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{256, 0}
}

type RecvLockerDelUserIdResult_ResultCode int32

const (
	RecvLockerDelUserIdResult_Success       RecvLockerDelUserIdResult_ResultCode = 0
	RecvLockerDelUserIdResult_InternalError RecvLockerDelUserIdResult_ResultCode = 1
)

var RecvLockerDelUserIdResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var RecvLockerDelUserIdResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x RecvLockerDelUserIdResult_ResultCode) String() string {
	return proto.EnumName(RecvLockerDelUserIdResult_ResultCode_name, int32(x))
}
func (RecvLockerDelUserIdResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{258, 0}
}

type RecvLockerGetUserIdsResult_ResultCode int32

const (
	RecvLockerGetUserIdsResult_Success       RecvLockerGetUserIdsResult_ResultCode = 0
	RecvLockerGetUserIdsResult_InternalError RecvLockerGetUserIdsResult_ResultCode = 1
)

var RecvLockerGetUserIdsResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var RecvLockerGetUserIdsResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x RecvLockerGetUserIdsResult_ResultCode) String() string {
	return proto.EnumName(RecvLockerGetUserIdsResult_ResultCode_name, int32(x))
}
func (RecvLockerGetUserIdsResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{260, 0}
}

type CheckIsMuteContactResult_ResultCode int32

const (
	CheckIsMuteContactResult_Success       CheckIsMuteContactResult_ResultCode = 0
	CheckIsMuteContactResult_InternalError CheckIsMuteContactResult_ResultCode = 1
)

var CheckIsMuteContactResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var CheckIsMuteContactResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x CheckIsMuteContactResult_ResultCode) String() string {
	return proto.EnumName(CheckIsMuteContactResult_ResultCode_name, int32(x))
}
func (CheckIsMuteContactResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{262, 0}
}

type SetUserUnsubscribeResult_ResultCode int32

const (
	SetUserUnsubscribeResult_Success       SetUserUnsubscribeResult_ResultCode = 0
	SetUserUnsubscribeResult_InternalError SetUserUnsubscribeResult_ResultCode = 1
)

var SetUserUnsubscribeResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var SetUserUnsubscribeResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x SetUserUnsubscribeResult_ResultCode) String() string {
	return proto.EnumName(SetUserUnsubscribeResult_ResultCode_name, int32(x))
}
func (SetUserUnsubscribeResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{264, 0}
}

type GetUserUnsubscribeResult_ResultCode int32

const (
	GetUserUnsubscribeResult_Success       GetUserUnsubscribeResult_ResultCode = 0
	GetUserUnsubscribeResult_InternalError GetUserUnsubscribeResult_ResultCode = 1
)

var GetUserUnsubscribeResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var GetUserUnsubscribeResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x GetUserUnsubscribeResult_ResultCode) String() string {
	return proto.EnumName(GetUserUnsubscribeResult_ResultCode_name, int32(x))
}
func (GetUserUnsubscribeResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{266, 0}
}

type GetRelationUsersResult_ResultCode int32

const (
	GetRelationUsersResult_Success       GetRelationUsersResult_ResultCode = 0
	GetRelationUsersResult_InternalError GetRelationUsersResult_ResultCode = 1
)

var GetRelationUsersResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var GetRelationUsersResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x GetRelationUsersResult_ResultCode) String() string {
	return proto.EnumName(GetRelationUsersResult_ResultCode_name, int32(x))
}
func (GetRelationUsersResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{268, 0}
}

type GetUserIpByAddrResult_ResultCode int32

const (
	GetUserIpByAddrResult_Success       GetUserIpByAddrResult_ResultCode = 0
	GetUserIpByAddrResult_InternalError GetUserIpByAddrResult_ResultCode = 1
)

var GetUserIpByAddrResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var GetUserIpByAddrResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x GetUserIpByAddrResult_ResultCode) String() string {
	return proto.EnumName(GetUserIpByAddrResult_ResultCode_name, int32(x))
}
func (GetUserIpByAddrResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{270, 0}
}

type GetUserIpByUserIdResult_ResultCode int32

const (
	GetUserIpByUserIdResult_Success       GetUserIpByUserIdResult_ResultCode = 0
	GetUserIpByUserIdResult_InternalError GetUserIpByUserIdResult_ResultCode = 1
)

var GetUserIpByUserIdResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var GetUserIpByUserIdResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x GetUserIpByUserIdResult_ResultCode) String() string {
	return proto.EnumName(GetUserIpByUserIdResult_ResultCode_name, int32(x))
}
func (GetUserIpByUserIdResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{273, 0}
}

type UserIpAddOrUpdateResult_ResultCode int32

const (
	UserIpAddOrUpdateResult_Success       UserIpAddOrUpdateResult_ResultCode = 0
	UserIpAddOrUpdateResult_InternalError UserIpAddOrUpdateResult_ResultCode = 1
)

var UserIpAddOrUpdateResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var UserIpAddOrUpdateResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x UserIpAddOrUpdateResult_ResultCode) String() string {
	return proto.EnumName(UserIpAddOrUpdateResult_ResultCode_name, int32(x))
}
func (UserIpAddOrUpdateResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{275, 0}
}

type CheckUserSpaiclResult_ResultCode int32

const (
	CheckUserSpaiclResult_Success       CheckUserSpaiclResult_ResultCode = 0
	CheckUserSpaiclResult_InternalError CheckUserSpaiclResult_ResultCode = 1
)

var CheckUserSpaiclResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var CheckUserSpaiclResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x CheckUserSpaiclResult_ResultCode) String() string {
	return proto.EnumName(CheckUserSpaiclResult_ResultCode_name, int32(x))
}
func (CheckUserSpaiclResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{277, 0}
}

type InsertUSerSpaiclResult_ResultCode int32

const (
	InsertUSerSpaiclResult_Success       InsertUSerSpaiclResult_ResultCode = 0
	InsertUSerSpaiclResult_InternalError InsertUSerSpaiclResult_ResultCode = 1
)

var InsertUSerSpaiclResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var InsertUSerSpaiclResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x InsertUSerSpaiclResult_ResultCode) String() string {
	return proto.EnumName(InsertUSerSpaiclResult_ResultCode_name, int32(x))
}
func (InsertUSerSpaiclResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{279, 0}
}

type DelUSerSpaiclResult_ResultCode int32

const (
	DelUSerSpaiclResult_Success       DelUSerSpaiclResult_ResultCode = 0
	DelUSerSpaiclResult_InternalError DelUSerSpaiclResult_ResultCode = 1
)

var DelUSerSpaiclResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var DelUSerSpaiclResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x DelUSerSpaiclResult_ResultCode) String() string {
	return proto.EnumName(DelUSerSpaiclResult_ResultCode_name, int32(x))
}
func (DelUSerSpaiclResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{281, 0}
}

type GetAllUSerSpaiclResult_ResultCode int32

const (
	GetAllUSerSpaiclResult_Success       GetAllUSerSpaiclResult_ResultCode = 0
	GetAllUSerSpaiclResult_InternalError GetAllUSerSpaiclResult_ResultCode = 1
)

var GetAllUSerSpaiclResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var GetAllUSerSpaiclResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x GetAllUSerSpaiclResult_ResultCode) String() string {
	return proto.EnumName(GetAllUSerSpaiclResult_ResultCode_name, int32(x))
}
func (GetAllUSerSpaiclResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{283, 0}
}

type ChangePhoneResult_ResultCode int32

const (
	ChangePhoneResult_Success             ChangePhoneResult_ResultCode = 0
	ChangePhoneResult_InternalError       ChangePhoneResult_ResultCode = 1
	ChangePhoneResult_PhoneNumberOccupied ChangePhoneResult_ResultCode = 2
	ChangePhoneResult_PhoneCodeExpired    ChangePhoneResult_ResultCode = 3
	ChangePhoneResult_PhoneCodeInvalid    ChangePhoneResult_ResultCode = 4
	ChangePhoneResult_FloodWait           ChangePhoneResult_ResultCode = 5
)

var ChangePhoneResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
	2: "PhoneNumberOccupied",
	3: "PhoneCodeExpired",
	4: "PhoneCodeInvalid",
	5: "FloodWait",
}
var ChangePhoneResult_ResultCode_value = map[string]int32{
	"Success":             0,
	"InternalError":       1,
	"PhoneNumberOccupied": 2,
	"PhoneCodeExpired":    3,
	"PhoneCodeInvalid":    4,
	"FloodWait":           5,
}

func (x ChangePhoneResult_ResultCode) String() string {
	return proto.EnumName(ChangePhoneResult_ResultCode_name, int32(x))
}
func (ChangePhoneResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{285, 0}
}

type DeleteUserUsernameResult_Code int32

const (
	DeleteUserUsernameResult_Success          DeleteUserUsernameResult_Code = 0
	DeleteUserUsernameResult_PermissionDenied DeleteUserUsernameResult_Code = 1
	DeleteUserUsernameResult_UsernameNotExist DeleteUserUsernameResult_Code = 2
	DeleteUserUsernameResult_InvalidUsername  DeleteUserUsernameResult_Code = 3
	DeleteUserUsernameResult_UserIsBot        DeleteUserUsernameResult_Code = 4
	DeleteUserUsernameResult_UsernameOccupied DeleteUserUsernameResult_Code = 5
	DeleteUserUsernameResult_InternalError    DeleteUserUsernameResult_Code = 6
)

var DeleteUserUsernameResult_Code_name = map[int32]string{
	0: "Success",
	1: "PermissionDenied",
	2: "UsernameNotExist",
	3: "InvalidUsername",
	4: "UserIsBot",
	5: "UsernameOccupied",
	6: "InternalError",
}
var DeleteUserUsernameResult_Code_value = map[string]int32{
	"Success":          0,
	"PermissionDenied": 1,
	"UsernameNotExist": 2,
	"InvalidUsername":  3,
	"UserIsBot":        4,
	"UsernameOccupied": 5,
	"InternalError":    6,
}

func (x DeleteUserUsernameResult_Code) String() string {
	return proto.EnumName(DeleteUserUsernameResult_Code_name, int32(x))
}
func (DeleteUserUsernameResult_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{306, 0}
}

type SignUpV1Reply_ResultCode int32

const (
	SignUpV1Reply_Success             SignUpV1Reply_ResultCode = 0
	SignUpV1Reply_InternalError       SignUpV1Reply_ResultCode = 1
	SignUpV1Reply_PhoneNumberInvalid  SignUpV1Reply_ResultCode = 2
	SignUpV1Reply_PhoneNumberOccupied SignUpV1Reply_ResultCode = 3
	SignUpV1Reply_CaptchaExpired      SignUpV1Reply_ResultCode = 4
	SignUpV1Reply_CaptchaInvalid      SignUpV1Reply_ResultCode = 5
	SignUpV1Reply_FloodWait           SignUpV1Reply_ResultCode = 6
	SignUpV1Reply_SignUpRobotBlocked  SignUpV1Reply_ResultCode = 7
)

var SignUpV1Reply_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
	2: "PhoneNumberInvalid",
	3: "PhoneNumberOccupied",
	4: "CaptchaExpired",
	5: "CaptchaInvalid",
	6: "FloodWait",
	7: "SignUpRobotBlocked",
}
var SignUpV1Reply_ResultCode_value = map[string]int32{
	"Success":             0,
	"InternalError":       1,
	"PhoneNumberInvalid":  2,
	"PhoneNumberOccupied": 3,
	"CaptchaExpired":      4,
	"CaptchaInvalid":      5,
	"FloodWait":           6,
	"SignUpRobotBlocked":  7,
}

func (x SignUpV1Reply_ResultCode) String() string {
	return proto.EnumName(SignUpV1Reply_ResultCode_name, int32(x))
}
func (SignUpV1Reply_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{382, 0}
}

type InnerUserOpReq_OperType int32

const (
	InnerUserOpReq_OperTypeBeginAt InnerUserOpReq_OperType = 0
	InnerUserOpReq_EnableInnerUser InnerUserOpReq_OperType = 1
	InnerUserOpReq_RevokeInnerUser InnerUserOpReq_OperType = 2
	InnerUserOpReq_QueryEnableUser InnerUserOpReq_OperType = 3
	InnerUserOpReq_BindRealPhoneNo InnerUserOpReq_OperType = 4
	InnerUserOpReq_NewPrettyNumber InnerUserOpReq_OperType = 5
)

var InnerUserOpReq_OperType_name = map[int32]string{
	0: "OperTypeBeginAt",
	1: "EnableInnerUser",
	2: "RevokeInnerUser",
	3: "QueryEnableUser",
	4: "BindRealPhoneNo",
	5: "NewPrettyNumber",
}
var InnerUserOpReq_OperType_value = map[string]int32{
	"OperTypeBeginAt": 0,
	"EnableInnerUser": 1,
	"RevokeInnerUser": 2,
	"QueryEnableUser": 3,
	"BindRealPhoneNo": 4,
	"NewPrettyNumber": 5,
}

func (x InnerUserOpReq_OperType) String() string {
	return proto.EnumName(InnerUserOpReq_OperType_name, int32(x))
}
func (InnerUserOpReq_OperType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{391, 0}
}

type Relation_RelationType int32

const (
	Relation_Stranger    Relation_RelationType = 0
	Relation_Contacts    Relation_RelationType = 1
	Relation_Blacklisted Relation_RelationType = 2
)

var Relation_RelationType_name = map[int32]string{
	0: "Stranger",
	1: "Contacts",
	2: "Blacklisted",
}
var Relation_RelationType_value = map[string]int32{
	"Stranger":    0,
	"Contacts":    1,
	"Blacklisted": 2,
}

func (x Relation_RelationType) String() string {
	return proto.EnumName(Relation_RelationType_name, int32(x))
}
func (Relation_RelationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{396, 0}
}

// 根据用户id获取用户ID
type GetUserInfoByIdReq struct {
	SelfId int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	UserId int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetUserInfoByIdReq) Reset()                    { *m = GetUserInfoByIdReq{} }
func (m *GetUserInfoByIdReq) String() string            { return proto.CompactTextString(m) }
func (*GetUserInfoByIdReq) ProtoMessage()               {}
func (*GetUserInfoByIdReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{0} }

func (m *GetUserInfoByIdReq) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *GetUserInfoByIdReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetUserInfoByIdReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type GetUserInfoByIdArrReq struct {
	SelfId  int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	UserIds []int32       `protobuf:"varint,2,rep,packed,name=user_ids,json=userIds" json:"user_ids,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetUserInfoByIdArrReq) Reset()         { *m = GetUserInfoByIdArrReq{} }
func (m *GetUserInfoByIdArrReq) String() string { return proto.CompactTextString(m) }
func (*GetUserInfoByIdArrReq) ProtoMessage()    {}
func (*GetUserInfoByIdArrReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{1}
}

func (m *GetUserInfoByIdArrReq) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *GetUserInfoByIdArrReq) GetUserIds() []int32 {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func (m *GetUserInfoByIdArrReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 用户信息数组
type UserInfoArray struct {
	Userin []*UserInfo `protobuf:"bytes,1,rep,name=userin" json:"userin,omitempty"`
}

func (m *UserInfoArray) Reset()                    { *m = UserInfoArray{} }
func (m *UserInfoArray) String() string            { return proto.CompactTextString(m) }
func (*UserInfoArray) ProtoMessage()               {}
func (*UserInfoArray) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{2} }

func (m *UserInfoArray) GetUserin() []*UserInfo {
	if m != nil {
		return m.Userin
	}
	return nil
}

// 查询出来的用户基础信息（self 、contact、 mutual_contact 需要在逻辑中判断 ）
type UserInfo struct {
	UserId               int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccessHash           int64  `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	FirstName            string `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName             string `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Username             string `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	Phone                string `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`
	Status               int32  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	LastLogout           int32  `protobuf:"varint,8,opt,name=last_logout,json=lastLogout,proto3" json:"last_logout,omitempty"`
	ClusterRegion        int32  `protobuf:"varint,9,opt,name=cluster_region,json=clusterRegion,proto3" json:"cluster_region,omitempty"`
	FontRgb              string `protobuf:"bytes,10,opt,name=font_rgb,json=fontRgb,proto3" json:"font_rgb,omitempty"`
	CountryCode          string `protobuf:"bytes,11,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	Photo                string `protobuf:"bytes,12,opt,name=photo,proto3" json:"photo,omitempty"`
	BotInfoVersion       int32  `protobuf:"varint,13,opt,name=bot_info_version,json=botInfoVersion,proto3" json:"bot_info_version,omitempty"`
	BotInlinePlaceholder string `protobuf:"bytes,14,opt,name=bot_inline_placeholder,json=botInlinePlaceholder,proto3" json:"bot_inline_placeholder,omitempty"`
	RestrictionReason    string `protobuf:"bytes,15,opt,name=restriction_reason,json=restrictionReason,proto3" json:"restriction_reason,omitempty"`
	LangCode             string `protobuf:"bytes,16,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	LocalPhone           string `protobuf:"bytes,17,opt,name=local_phone,json=localPhone,proto3" json:"local_phone,omitempty"`
	Deleted              bool   `protobuf:"varint,18,opt,name=deleted,proto3" json:"deleted,omitempty"`
	Bot                  bool   `protobuf:"varint,19,opt,name=bot,proto3" json:"bot,omitempty"`
	BotChatHistory       bool   `protobuf:"varint,20,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNochats           bool   `protobuf:"varint,21,opt,name=bot_nochats,json=botNochats,proto3" json:"bot_nochats,omitempty"`
	Verified             bool   `protobuf:"varint,22,opt,name=verified,proto3" json:"verified,omitempty"`
	Restricted           bool   `protobuf:"varint,23,opt,name=restricted,proto3" json:"restricted,omitempty"`
	Min                  bool   `protobuf:"varint,24,opt,name=min,proto3" json:"min,omitempty"`
	BotInlineGeo         bool   `protobuf:"varint,25,opt,name=bot_inline_geo,json=botInlineGeo,proto3" json:"bot_inline_geo,omitempty"`
	Self                 bool   `protobuf:"varint,26,opt,name=self,proto3" json:"self,omitempty"`
	Contact              bool   `protobuf:"varint,27,opt,name=contact,proto3" json:"contact,omitempty"`
	MutalContact         bool   `protobuf:"varint,28,opt,name=mutal_contact,json=mutalContact,proto3" json:"mutal_contact,omitempty"`
	StarMark             bool   `protobuf:"varint,29,opt,name=star_mark,json=starMark,proto3" json:"star_mark,omitempty"`
	ShowContactPhone     bool   `protobuf:"varint,30,opt,name=show_contact_phone,json=showContactPhone,proto3" json:"show_contact_phone,omitempty"`
	GroupId              int32  `protobuf:"varint,31,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Created              int32  `protobuf:"varint,32,opt,name=created,proto3" json:"created,omitempty"`
	UserType             int32  `protobuf:"varint,33,opt,name=user_type,json=userType,proto3" json:"user_type,omitempty"`
	UserLable            int32  `protobuf:"varint,34,opt,name=user_lable,json=userLable,proto3" json:"user_lable,omitempty"`
	UserLevel            int32  `protobuf:"varint,35,opt,name=user_level,json=userLevel,proto3" json:"user_level,omitempty"`
	About                string `protobuf:"bytes,36,opt,name=about,proto3" json:"about,omitempty"`
	Birthday             int32  `protobuf:"varint,37,opt,name=birthday,proto3" json:"birthday,omitempty"`
	Sex                  int32  `protobuf:"varint,38,opt,name=sex,proto3" json:"sex,omitempty"`
	Flags                int32  `protobuf:"varint,39,opt,name=flags,proto3" json:"flags,omitempty"`
	Addr                 string `protobuf:"bytes,40,opt,name=addr,proto3" json:"addr,omitempty"`
	Extend               string `protobuf:"bytes,41,opt,name=extend,proto3" json:"extend,omitempty"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{3} }

func (m *UserInfo) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserInfo) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *UserInfo) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *UserInfo) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *UserInfo) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UserInfo) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *UserInfo) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *UserInfo) GetLastLogout() int32 {
	if m != nil {
		return m.LastLogout
	}
	return 0
}

func (m *UserInfo) GetClusterRegion() int32 {
	if m != nil {
		return m.ClusterRegion
	}
	return 0
}

func (m *UserInfo) GetFontRgb() string {
	if m != nil {
		return m.FontRgb
	}
	return ""
}

func (m *UserInfo) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *UserInfo) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *UserInfo) GetBotInfoVersion() int32 {
	if m != nil {
		return m.BotInfoVersion
	}
	return 0
}

func (m *UserInfo) GetBotInlinePlaceholder() string {
	if m != nil {
		return m.BotInlinePlaceholder
	}
	return ""
}

func (m *UserInfo) GetRestrictionReason() string {
	if m != nil {
		return m.RestrictionReason
	}
	return ""
}

func (m *UserInfo) GetLangCode() string {
	if m != nil {
		return m.LangCode
	}
	return ""
}

func (m *UserInfo) GetLocalPhone() string {
	if m != nil {
		return m.LocalPhone
	}
	return ""
}

func (m *UserInfo) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

func (m *UserInfo) GetBot() bool {
	if m != nil {
		return m.Bot
	}
	return false
}

func (m *UserInfo) GetBotChatHistory() bool {
	if m != nil {
		return m.BotChatHistory
	}
	return false
}

func (m *UserInfo) GetBotNochats() bool {
	if m != nil {
		return m.BotNochats
	}
	return false
}

func (m *UserInfo) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

func (m *UserInfo) GetRestricted() bool {
	if m != nil {
		return m.Restricted
	}
	return false
}

func (m *UserInfo) GetMin() bool {
	if m != nil {
		return m.Min
	}
	return false
}

func (m *UserInfo) GetBotInlineGeo() bool {
	if m != nil {
		return m.BotInlineGeo
	}
	return false
}

func (m *UserInfo) GetSelf() bool {
	if m != nil {
		return m.Self
	}
	return false
}

func (m *UserInfo) GetContact() bool {
	if m != nil {
		return m.Contact
	}
	return false
}

func (m *UserInfo) GetMutalContact() bool {
	if m != nil {
		return m.MutalContact
	}
	return false
}

func (m *UserInfo) GetStarMark() bool {
	if m != nil {
		return m.StarMark
	}
	return false
}

func (m *UserInfo) GetShowContactPhone() bool {
	if m != nil {
		return m.ShowContactPhone
	}
	return false
}

func (m *UserInfo) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UserInfo) GetCreated() int32 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *UserInfo) GetUserType() int32 {
	if m != nil {
		return m.UserType
	}
	return 0
}

func (m *UserInfo) GetUserLable() int32 {
	if m != nil {
		return m.UserLable
	}
	return 0
}

func (m *UserInfo) GetUserLevel() int32 {
	if m != nil {
		return m.UserLevel
	}
	return 0
}

func (m *UserInfo) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *UserInfo) GetBirthday() int32 {
	if m != nil {
		return m.Birthday
	}
	return 0
}

func (m *UserInfo) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *UserInfo) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *UserInfo) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *UserInfo) GetExtend() string {
	if m != nil {
		return m.Extend
	}
	return ""
}

// 根据用户id获取用户销毁时间
type GetUserExpireByIdReq struct {
	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetUserExpireByIdReq) Reset()         { *m = GetUserExpireByIdReq{} }
func (m *GetUserExpireByIdReq) String() string { return proto.CompactTextString(m) }
func (*GetUserExpireByIdReq) ProtoMessage()    {}
func (*GetUserExpireByIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{4}
}

func (m *GetUserExpireByIdReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetUserExpireByIdReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 获取用户账号销毁时间返回
type GetUserExpireByIdResult struct {
	Expire    int32     `protobuf:"varint,1,opt,name=expire,proto3" json:"expire,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *GetUserExpireByIdResult) Reset()         { *m = GetUserExpireByIdResult{} }
func (m *GetUserExpireByIdResult) String() string { return proto.CompactTextString(m) }
func (*GetUserExpireByIdResult) ProtoMessage()    {}
func (*GetUserExpireByIdResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{5}
}

func (m *GetUserExpireByIdResult) GetExpire() int32 {
	if m != nil {
		return m.Expire
	}
	return 0
}

func (m *GetUserExpireByIdResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 根据用户电话号码来获取用户信息
type GetUserByphone struct {
	Phone string        `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	Debug *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetUserByphone) Reset()                    { *m = GetUserByphone{} }
func (m *GetUserByphone) String() string            { return proto.CompactTextString(m) }
func (*GetUserByphone) ProtoMessage()               {}
func (*GetUserByphone) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{6} }

func (m *GetUserByphone) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *GetUserByphone) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 获取用户基本信息的返回结果
type GetUserInfoResult struct {
	Uinfo     *UserInfo `protobuf:"bytes,1,opt,name=Uinfo" json:"Uinfo,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *GetUserInfoResult) Reset()                    { *m = GetUserInfoResult{} }
func (m *GetUserInfoResult) String() string            { return proto.CompactTextString(m) }
func (*GetUserInfoResult) ProtoMessage()               {}
func (*GetUserInfoResult) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{7} }

func (m *GetUserInfoResult) GetUinfo() *UserInfo {
	if m != nil {
		return m.Uinfo
	}
	return nil
}

func (m *GetUserInfoResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

type GetUserInfoByIdArrResult struct {
	Uinfo     []*UserInfo `protobuf:"bytes,1,rep,name=Uinfo" json:"Uinfo,omitempty"`
	Errorcode ReErrCode   `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *GetUserInfoByIdArrResult) Reset()         { *m = GetUserInfoByIdArrResult{} }
func (m *GetUserInfoByIdArrResult) String() string { return proto.CompactTextString(m) }
func (*GetUserInfoByIdArrResult) ProtoMessage()    {}
func (*GetUserInfoByIdArrResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{8}
}

func (m *GetUserInfoByIdArrResult) GetUinfo() []*UserInfo {
	if m != nil {
		return m.Uinfo
	}
	return nil
}

func (m *GetUserInfoByIdArrResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 根据用户userName来获取用户基本信息
type GetUserByUsername struct {
	SelfId   int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	Username string        `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Debug    *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetUserByUsername) Reset()                    { *m = GetUserByUsername{} }
func (m *GetUserByUsername) String() string            { return proto.CompactTextString(m) }
func (*GetUserByUsername) ProtoMessage()               {}
func (*GetUserByUsername) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{9} }

func (m *GetUserByUsername) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *GetUserByUsername) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *GetUserByUsername) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 更新用户头像请求
type UpdatePhotoInfoReq struct {
	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Photo  string        `protobuf:"bytes,2,opt,name=photo,proto3" json:"photo,omitempty"`
	KeyId  int64         `protobuf:"varint,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *UpdatePhotoInfoReq) Reset()         { *m = UpdatePhotoInfoReq{} }
func (m *UpdatePhotoInfoReq) String() string { return proto.CompactTextString(m) }
func (*UpdatePhotoInfoReq) ProtoMessage()    {}
func (*UpdatePhotoInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{10}
}

func (m *UpdatePhotoInfoReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdatePhotoInfoReq) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *UpdatePhotoInfoReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *UpdatePhotoInfoReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type GetPhotoInfoReq struct {
	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetPhotoInfoReq) Reset()                    { *m = GetPhotoInfoReq{} }
func (m *GetPhotoInfoReq) String() string            { return proto.CompactTextString(m) }
func (*GetPhotoInfoReq) ProtoMessage()               {}
func (*GetPhotoInfoReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{11} }

func (m *GetPhotoInfoReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetPhotoInfoReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 更新用户头像的返回
type UpdateUserPhotoResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *UpdateUserPhotoResult) Reset()         { *m = UpdateUserPhotoResult{} }
func (m *UpdateUserPhotoResult) String() string { return proto.CompactTextString(m) }
func (*UpdateUserPhotoResult) ProtoMessage()    {}
func (*UpdateUserPhotoResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{12}
}

func (m *UpdateUserPhotoResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

type GetUserPhotoResult struct {
	Photo     string    `protobuf:"bytes,1,opt,name=Photo,proto3" json:"Photo,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *GetUserPhotoResult) Reset()         { *m = GetUserPhotoResult{} }
func (m *GetUserPhotoResult) String() string { return proto.CompactTextString(m) }
func (*GetUserPhotoResult) ProtoMessage()    {}
func (*GetUserPhotoResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{13}
}

func (m *GetUserPhotoResult) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *GetUserPhotoResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 更新用户信息
type UpdateUserProfileReq struct {
	UserId    int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Flags     int32         `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	FirstName string        `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string        `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	About     string        `protobuf:"bytes,5,opt,name=about,proto3" json:"about,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug" json:"debug,omitempty"`
}

func (m *UpdateUserProfileReq) Reset()         { *m = UpdateUserProfileReq{} }
func (m *UpdateUserProfileReq) String() string { return proto.CompactTextString(m) }
func (*UpdateUserProfileReq) ProtoMessage()    {}
func (*UpdateUserProfileReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{14}
}

func (m *UpdateUserProfileReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateUserProfileReq) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *UpdateUserProfileReq) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *UpdateUserProfileReq) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *UpdateUserProfileReq) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *UpdateUserProfileReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 更新用户信息
type UpdateUserFullReq struct {
	UserId  int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	KeyId   int64  `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Flags   int32  `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"`
	Sex     int32  `protobuf:"varint,4,opt,name=Sex,proto3" json:"Sex,omitempty"`
	Age     int32  `protobuf:"varint,5,opt,name=Age,proto3" json:"Age,omitempty"`
	Address string `protobuf:"bytes,6,opt,name=Address,proto3" json:"Address,omitempty"`
	Extened string `protobuf:"bytes,7,opt,name=Extened,proto3" json:"Extened,omitempty"`
}

func (m *UpdateUserFullReq) Reset()                    { *m = UpdateUserFullReq{} }
func (m *UpdateUserFullReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserFullReq) ProtoMessage()               {}
func (*UpdateUserFullReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{15} }

func (m *UpdateUserFullReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateUserFullReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *UpdateUserFullReq) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *UpdateUserFullReq) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *UpdateUserFullReq) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *UpdateUserFullReq) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UpdateUserFullReq) GetExtened() string {
	if m != nil {
		return m.Extened
	}
	return ""
}

// 更新用户详情返回
type UpdateUserFullResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *UpdateUserFullResult) Reset()         { *m = UpdateUserFullResult{} }
func (m *UpdateUserFullResult) String() string { return proto.CompactTextString(m) }
func (*UpdateUserFullResult) ProtoMessage()    {}
func (*UpdateUserFullResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{16}
}

func (m *UpdateUserFullResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 更新用户昵称等的返回结果
type UpdateUserProfileResult struct {
	Uinfo     *UserInfo `protobuf:"bytes,1,opt,name=Uinfo" json:"Uinfo,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *UpdateUserProfileResult) Reset()         { *m = UpdateUserProfileResult{} }
func (m *UpdateUserProfileResult) String() string { return proto.CompactTextString(m) }
func (*UpdateUserProfileResult) ProtoMessage()    {}
func (*UpdateUserProfileResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{17}
}

func (m *UpdateUserProfileResult) GetUinfo() *UserInfo {
	if m != nil {
		return m.Uinfo
	}
	return nil
}

func (m *UpdateUserProfileResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 用户在线状态的更新
type StatusReq struct {
	SelfId    int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	KeyId     int64         `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Status    bool          `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Offline   int32         `protobuf:"varint,4,opt,name=offline,proto3" json:"offline,omitempty"`
	Longitude float64       `protobuf:"fixed64,5,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Latitude  float64       `protobuf:"fixed64,6,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug" json:"debug,omitempty"`
}

func (m *StatusReq) Reset()                    { *m = StatusReq{} }
func (m *StatusReq) String() string            { return proto.CompactTextString(m) }
func (*StatusReq) ProtoMessage()               {}
func (*StatusReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{18} }

func (m *StatusReq) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *StatusReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *StatusReq) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *StatusReq) GetOffline() int32 {
	if m != nil {
		return m.Offline
	}
	return 0
}

func (m *StatusReq) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *StatusReq) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *StatusReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 用户在线状态的结果
type StatusResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *StatusResult) Reset()                    { *m = StatusResult{} }
func (m *StatusResult) String() string            { return proto.CompactTextString(m) }
func (*StatusResult) ProtoMessage()               {}
func (*StatusResult) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{19} }

func (m *StatusResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 用户销毁时间的设置
type UpdateExpireReq struct {
	SelfId int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	Expire int32         `protobuf:"varint,2,opt,name=expire,proto3" json:"expire,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *UpdateExpireReq) Reset()                    { *m = UpdateExpireReq{} }
func (m *UpdateExpireReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateExpireReq) ProtoMessage()               {}
func (*UpdateExpireReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{20} }

func (m *UpdateExpireReq) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *UpdateExpireReq) GetExpire() int32 {
	if m != nil {
		return m.Expire
	}
	return 0
}

func (m *UpdateExpireReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 设置账号销毁时间的返回结果
type UpdateExpireResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *UpdateExpireResult) Reset()         { *m = UpdateExpireResult{} }
func (m *UpdateExpireResult) String() string { return proto.CompactTextString(m) }
func (*UpdateExpireResult) ProtoMessage()    {}
func (*UpdateExpireResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{21}
}

func (m *UpdateExpireResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 用户dc的迁移
type UserClusterChange struct {
	SelfId    int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	ClusterId int32         `protobuf:"varint,2,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	FromIp    string        `protobuf:"bytes,4,opt,name=from_ip,json=fromIp,proto3" json:"from_ip,omitempty"`
	FromId    int32         `protobuf:"varint,5,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug" json:"debug,omitempty"`
}

func (m *UserClusterChange) Reset()                    { *m = UserClusterChange{} }
func (m *UserClusterChange) String() string            { return proto.CompactTextString(m) }
func (*UserClusterChange) ProtoMessage()               {}
func (*UserClusterChange) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{22} }

func (m *UserClusterChange) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *UserClusterChange) GetClusterId() int32 {
	if m != nil {
		return m.ClusterId
	}
	return 0
}

func (m *UserClusterChange) GetFromIp() string {
	if m != nil {
		return m.FromIp
	}
	return ""
}

func (m *UserClusterChange) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *UserClusterChange) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 用户域的迁移结果
type UserClusterChangeResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *UserClusterChangeResult) Reset()         { *m = UserClusterChangeResult{} }
func (m *UserClusterChangeResult) String() string { return proto.CompactTextString(m) }
func (*UserClusterChangeResult) ProtoMessage()    {}
func (*UserClusterChangeResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{23}
}

func (m *UserClusterChangeResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 更新用户的username的请求
type UpdateuserNameReq struct {
	UserId   int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName string        `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	Debug    *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
	KeyId    int64         `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (m *UpdateuserNameReq) Reset()                    { *m = UpdateuserNameReq{} }
func (m *UpdateuserNameReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateuserNameReq) ProtoMessage()               {}
func (*UpdateuserNameReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{24} }

func (m *UpdateuserNameReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateuserNameReq) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *UpdateuserNameReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *UpdateuserNameReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

// 更新用户的username的返回结果
type UpdateuserNameResult struct {
	Uinfo     *UserInfo `protobuf:"bytes,1,opt,name=Uinfo" json:"Uinfo,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *UpdateuserNameResult) Reset()         { *m = UpdateuserNameResult{} }
func (m *UpdateuserNameResult) String() string { return proto.CompactTextString(m) }
func (*UpdateuserNameResult) ProtoMessage()    {}
func (*UpdateuserNameResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{25}
}

func (m *UpdateuserNameResult) GetUinfo() *UserInfo {
	if m != nil {
		return m.Uinfo
	}
	return nil
}

func (m *UpdateuserNameResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 更新用户的leve
type UpdateUserLevelReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	KeyId  int64 `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Levl   int32 `protobuf:"varint,3,opt,name=levl,proto3" json:"levl,omitempty"`
}

func (m *UpdateUserLevelReq) Reset()         { *m = UpdateUserLevelReq{} }
func (m *UpdateUserLevelReq) String() string { return proto.CompactTextString(m) }
func (*UpdateUserLevelReq) ProtoMessage()    {}
func (*UpdateUserLevelReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{26}
}

func (m *UpdateUserLevelReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateUserLevelReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *UpdateUserLevelReq) GetLevl() int32 {
	if m != nil {
		return m.Levl
	}
	return 0
}

// 的返回结果
type UpdateUserLevelResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *UpdateUserLevelResult) Reset()         { *m = UpdateUserLevelResult{} }
func (m *UpdateUserLevelResult) String() string { return proto.CompactTextString(m) }
func (*UpdateUserLevelResult) ProtoMessage()    {}
func (*UpdateUserLevelResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{27}
}

func (m *UpdateUserLevelResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 更新用户的扩展字段
type UpdateUserExtionReq struct {
	UserId     int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	KeyId      int64  `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Extionsion string `protobuf:"bytes,3,opt,name=extionsion,proto3" json:"extionsion,omitempty"`
}

func (m *UpdateUserExtionReq) Reset()         { *m = UpdateUserExtionReq{} }
func (m *UpdateUserExtionReq) String() string { return proto.CompactTextString(m) }
func (*UpdateUserExtionReq) ProtoMessage()    {}
func (*UpdateUserExtionReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{28}
}

func (m *UpdateUserExtionReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateUserExtionReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *UpdateUserExtionReq) GetExtionsion() string {
	if m != nil {
		return m.Extionsion
	}
	return ""
}

// 删除账号的返回结果
type UpdateUserExtionResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *UpdateUserExtionResult) Reset()         { *m = UpdateUserExtionResult{} }
func (m *UpdateUserExtionResult) String() string { return proto.CompactTextString(m) }
func (*UpdateUserExtionResult) ProtoMessage()    {}
func (*UpdateUserExtionResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{29}
}

func (m *UpdateUserExtionResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 检查电话号码是否已经注册
type CheckPhoneRegisterReq struct {
	Phone string        `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	Debug *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
}

func (m *CheckPhoneRegisterReq) Reset()         { *m = CheckPhoneRegisterReq{} }
func (m *CheckPhoneRegisterReq) String() string { return proto.CompactTextString(m) }
func (*CheckPhoneRegisterReq) ProtoMessage()    {}
func (*CheckPhoneRegisterReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{30}
}

func (m *CheckPhoneRegisterReq) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *CheckPhoneRegisterReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 检查电话号码是否已经注册的返回结果
type CheckPhoneRegisterResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *CheckPhoneRegisterResult) Reset()         { *m = CheckPhoneRegisterResult{} }
func (m *CheckPhoneRegisterResult) String() string { return proto.CompactTextString(m) }
func (*CheckPhoneRegisterResult) ProtoMessage()    {}
func (*CheckPhoneRegisterResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{31}
}

func (m *CheckPhoneRegisterResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 删除账号的请求
type DeleteAccountByIdReq struct {
	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DelId  int32         `protobuf:"varint,2,opt,name=del_id,json=delId,proto3" json:"del_id,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *DeleteAccountByIdReq) Reset()         { *m = DeleteAccountByIdReq{} }
func (m *DeleteAccountByIdReq) String() string { return proto.CompactTextString(m) }
func (*DeleteAccountByIdReq) ProtoMessage()    {}
func (*DeleteAccountByIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{32}
}

func (m *DeleteAccountByIdReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DeleteAccountByIdReq) GetDelId() int32 {
	if m != nil {
		return m.DelId
	}
	return 0
}

func (m *DeleteAccountByIdReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 删除账号的返回结果
type DelAccountResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *DelAccountResult) Reset()                    { *m = DelAccountResult{} }
func (m *DelAccountResult) String() string            { return proto.CompactTextString(m) }
func (*DelAccountResult) ProtoMessage()               {}
func (*DelAccountResult) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{33} }

func (m *DelAccountResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 机器人基础信息更改
type BotUpdateInfo struct {
	UserId         int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BotInfoVersion int32         `protobuf:"varint,2,opt,name=bot_info_version,json=botInfoVersion,proto3" json:"bot_info_version,omitempty"`
	BotChatHistory bool          `protobuf:"varint,3,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNoChat      bool          `protobuf:"varint,4,opt,name=bot_no_chat,json=botNoChat,proto3" json:"bot_no_chat,omitempty"`
	Debug          *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *BotUpdateInfo) Reset()                    { *m = BotUpdateInfo{} }
func (m *BotUpdateInfo) String() string            { return proto.CompactTextString(m) }
func (*BotUpdateInfo) ProtoMessage()               {}
func (*BotUpdateInfo) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{34} }

func (m *BotUpdateInfo) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *BotUpdateInfo) GetBotInfoVersion() int32 {
	if m != nil {
		return m.BotInfoVersion
	}
	return 0
}

func (m *BotUpdateInfo) GetBotChatHistory() bool {
	if m != nil {
		return m.BotChatHistory
	}
	return false
}

func (m *BotUpdateInfo) GetBotNoChat() bool {
	if m != nil {
		return m.BotNoChat
	}
	return false
}

func (m *BotUpdateInfo) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 机器人更改信息的返回结果
type BotUpdateInfoResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *BotUpdateInfoResult) Reset()         { *m = BotUpdateInfoResult{} }
func (m *BotUpdateInfoResult) String() string { return proto.CompactTextString(m) }
func (*BotUpdateInfoResult) ProtoMessage()    {}
func (*BotUpdateInfoResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{35}
}

func (m *BotUpdateInfoResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 删除单个联系人的请求
type DelContactReq struct {
	// 联系人的基本信息
	UserId     int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ContactId  int32         `protobuf:"varint,2,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	AccessHash int64         `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	KeyId      int64         `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *DelContactReq) Reset()                    { *m = DelContactReq{} }
func (m *DelContactReq) String() string            { return proto.CompactTextString(m) }
func (*DelContactReq) ProtoMessage()               {}
func (*DelContactReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{36} }

func (m *DelContactReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DelContactReq) GetContactId() int32 {
	if m != nil {
		return m.ContactId
	}
	return 0
}

func (m *DelContactReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *DelContactReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *DelContactReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 删除联系人的返回结果
type DelContactResult struct {
	Uinfo     *UserInfo `protobuf:"bytes,1,opt,name=Uinfo" json:"Uinfo,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *DelContactResult) Reset()                    { *m = DelContactResult{} }
func (m *DelContactResult) String() string            { return proto.CompactTextString(m) }
func (*DelContactResult) ProtoMessage()               {}
func (*DelContactResult) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{37} }

func (m *DelContactResult) GetUinfo() *UserInfo {
	if m != nil {
		return m.Uinfo
	}
	return nil
}

func (m *DelContactResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

type AcceptContactReq struct {
	UserId    int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ApplyId   int32         `protobuf:"varint,2,opt,name=apply_id,json=applyId,proto3" json:"apply_id,omitempty"`
	FirstName string        `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string        `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
	GroupId   int32         `protobuf:"varint,6,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (m *AcceptContactReq) Reset()                    { *m = AcceptContactReq{} }
func (m *AcceptContactReq) String() string            { return proto.CompactTextString(m) }
func (*AcceptContactReq) ProtoMessage()               {}
func (*AcceptContactReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{38} }

func (m *AcceptContactReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *AcceptContactReq) GetApplyId() int32 {
	if m != nil {
		return m.ApplyId
	}
	return 0
}

func (m *AcceptContactReq) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *AcceptContactReq) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *AcceptContactReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *AcceptContactReq) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

type AcceptContactResult struct {
	FromId    int32     `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *AcceptContactResult) Reset()         { *m = AcceptContactResult{} }
func (m *AcceptContactResult) String() string { return proto.CompactTextString(m) }
func (*AcceptContactResult) ProtoMessage()    {}
func (*AcceptContactResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{39}
}

func (m *AcceptContactResult) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *AcceptContactResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 需要删除联系人的信息
type ContactIdHash struct {
	ContactId  int32 `protobuf:"varint,1,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	AccessHash int64 `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
}

func (m *ContactIdHash) Reset()                    { *m = ContactIdHash{} }
func (m *ContactIdHash) String() string            { return proto.CompactTextString(m) }
func (*ContactIdHash) ProtoMessage()               {}
func (*ContactIdHash) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{40} }

func (m *ContactIdHash) GetContactId() int32 {
	if m != nil {
		return m.ContactId
	}
	return 0
}

func (m *ContactIdHash) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

// 批量删除用户的联系人
type DelContactArrReq struct {
	UserId       int32            `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ContactidArr []*ContactIdHash `protobuf:"bytes,2,rep,name=contactidArr" json:"contactidArr,omitempty"`
	KeyId        int64            `protobuf:"varint,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Debug        *pbcomm.Debug    `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *DelContactArrReq) Reset()                    { *m = DelContactArrReq{} }
func (m *DelContactArrReq) String() string            { return proto.CompactTextString(m) }
func (*DelContactArrReq) ProtoMessage()               {}
func (*DelContactArrReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{41} }

func (m *DelContactArrReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DelContactArrReq) GetContactidArr() []*ContactIdHash {
	if m != nil {
		return m.ContactidArr
	}
	return nil
}

func (m *DelContactArrReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *DelContactArrReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 重置user联系人信息
type CmdResetUserContactsReq struct {
	AmdinId     int32  `protobuf:"varint,1,opt,name=amdin_id,json=amdinId,proto3" json:"amdin_id,omitempty"`
	PhoneNumber string `protobuf:"bytes,2,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
}

func (m *CmdResetUserContactsReq) Reset()         { *m = CmdResetUserContactsReq{} }
func (m *CmdResetUserContactsReq) String() string { return proto.CompactTextString(m) }
func (*CmdResetUserContactsReq) ProtoMessage()    {}
func (*CmdResetUserContactsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{42}
}

func (m *CmdResetUserContactsReq) GetAmdinId() int32 {
	if m != nil {
		return m.AmdinId
	}
	return 0
}

func (m *CmdResetUserContactsReq) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

type CmdResetUserContactsResult struct {
	CurrentContactIds []int32 `protobuf:"varint,1,rep,packed,name=current_contact_ids,json=currentContactIds" json:"current_contact_ids,omitempty"`
}

func (m *CmdResetUserContactsResult) Reset()         { *m = CmdResetUserContactsResult{} }
func (m *CmdResetUserContactsResult) String() string { return proto.CompactTextString(m) }
func (*CmdResetUserContactsResult) ProtoMessage()    {}
func (*CmdResetUserContactsResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{43}
}

func (m *CmdResetUserContactsResult) GetCurrentContactIds() []int32 {
	if m != nil {
		return m.CurrentContactIds
	}
	return nil
}

// 批量删除用户的联系人的返回
type DelContactArrResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *DelContactArrResult) Reset()         { *m = DelContactArrResult{} }
func (m *DelContactArrResult) String() string { return proto.CompactTextString(m) }
func (*DelContactArrResult) ProtoMessage()    {}
func (*DelContactArrResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{44}
}

func (m *DelContactArrResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 获取用户联系人列表的请求
type ContatsGetContactsReq struct {
	UserId      int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	KeyId       int64         `protobuf:"varint,2,opt,name=keyId,proto3" json:"keyId,omitempty"`
	Contacthash string        `protobuf:"bytes,3,opt,name=contacthash,proto3" json:"contacthash,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ContatsGetContactsReq) Reset()         { *m = ContatsGetContactsReq{} }
func (m *ContatsGetContactsReq) String() string { return proto.CompactTextString(m) }
func (*ContatsGetContactsReq) ProtoMessage()    {}
func (*ContatsGetContactsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{45}
}

func (m *ContatsGetContactsReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ContatsGetContactsReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *ContatsGetContactsReq) GetContacthash() string {
	if m != nil {
		return m.Contacthash
	}
	return ""
}

func (m *ContatsGetContactsReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 联系人的基本信息
type ContactInfo struct {
	UserId          int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ContactId       int32  `protobuf:"varint,2,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	FirstName       string `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName        string `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	IsSelfContacted bool   `protobuf:"varint,5,opt,name=is_self_contacted,json=isSelfContacted,proto3" json:"is_self_contacted,omitempty"`
	SelfIsContacted bool   `protobuf:"varint,6,opt,name=self_is_contacted,json=selfIsContacted,proto3" json:"self_is_contacted,omitempty"`
	StarMark        bool   `protobuf:"varint,7,opt,name=star_mark,json=starMark,proto3" json:"star_mark,omitempty"`
	HasPhone        bool   `protobuf:"varint,8,opt,name=has_phone,json=hasPhone,proto3" json:"has_phone,omitempty"`
	GroupId         int32  `protobuf:"varint,9,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	About           string `protobuf:"bytes,10,opt,name=about,proto3" json:"about,omitempty"`
}

func (m *ContactInfo) Reset()                    { *m = ContactInfo{} }
func (m *ContactInfo) String() string            { return proto.CompactTextString(m) }
func (*ContactInfo) ProtoMessage()               {}
func (*ContactInfo) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{46} }

func (m *ContactInfo) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ContactInfo) GetContactId() int32 {
	if m != nil {
		return m.ContactId
	}
	return 0
}

func (m *ContactInfo) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *ContactInfo) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *ContactInfo) GetIsSelfContacted() bool {
	if m != nil {
		return m.IsSelfContacted
	}
	return false
}

func (m *ContactInfo) GetSelfIsContacted() bool {
	if m != nil {
		return m.SelfIsContacted
	}
	return false
}

func (m *ContactInfo) GetStarMark() bool {
	if m != nil {
		return m.StarMark
	}
	return false
}

func (m *ContactInfo) GetHasPhone() bool {
	if m != nil {
		return m.HasPhone
	}
	return false
}

func (m *ContactInfo) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *ContactInfo) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

// 用户联系人列表获取的返回
type ContatsGetContactsResult struct {
	ContactArr  []*ContactInfo `protobuf:"bytes,1,rep,name=contactArr" json:"contactArr,omitempty"`
	UserInfoArr []*UserInfo    `protobuf:"bytes,2,rep,name=userInfoArr" json:"userInfoArr,omitempty"`
	Errorcode   ReErrCode      `protobuf:"varint,3,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *ContatsGetContactsResult) Reset()         { *m = ContatsGetContactsResult{} }
func (m *ContatsGetContactsResult) String() string { return proto.CompactTextString(m) }
func (*ContatsGetContactsResult) ProtoMessage()    {}
func (*ContatsGetContactsResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{47}
}

func (m *ContatsGetContactsResult) GetContactArr() []*ContactInfo {
	if m != nil {
		return m.ContactArr
	}
	return nil
}

func (m *ContatsGetContactsResult) GetUserInfoArr() []*UserInfo {
	if m != nil {
		return m.UserInfoArr
	}
	return nil
}

func (m *ContatsGetContactsResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

type ContactsGetContactsV1Req struct {
	UserId int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	KeyId  int64         `protobuf:"varint,2,opt,name=keyId,proto3" json:"keyId,omitempty"`
	Hash   int32         `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ContactsGetContactsV1Req) Reset()         { *m = ContactsGetContactsV1Req{} }
func (m *ContactsGetContactsV1Req) String() string { return proto.CompactTextString(m) }
func (*ContactsGetContactsV1Req) ProtoMessage()    {}
func (*ContactsGetContactsV1Req) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{48}
}

func (m *ContactsGetContactsV1Req) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ContactsGetContactsV1Req) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *ContactsGetContactsV1Req) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *ContactsGetContactsV1Req) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ContactsGetContactsV1Result struct {
	ContactArr    []*ContactInfo `protobuf:"bytes,1,rep,name=contactArr" json:"contactArr,omitempty"`
	UserInfoArr   []*UserInfo    `protobuf:"bytes,2,rep,name=userInfoArr" json:"userInfoArr,omitempty"`
	GroupOrderArr []*GroupOrder  `protobuf:"bytes,3,rep,name=groupOrderArr" json:"groupOrderArr,omitempty"`
	SavedCount    int32          `protobuf:"varint,4,opt,name=savedCount,proto3" json:"savedCount,omitempty"`
	Errorcode     ReErrCode      `protobuf:"varint,5,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *ContactsGetContactsV1Result) Reset()         { *m = ContactsGetContactsV1Result{} }
func (m *ContactsGetContactsV1Result) String() string { return proto.CompactTextString(m) }
func (*ContactsGetContactsV1Result) ProtoMessage()    {}
func (*ContactsGetContactsV1Result) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{49}
}

func (m *ContactsGetContactsV1Result) GetContactArr() []*ContactInfo {
	if m != nil {
		return m.ContactArr
	}
	return nil
}

func (m *ContactsGetContactsV1Result) GetUserInfoArr() []*UserInfo {
	if m != nil {
		return m.UserInfoArr
	}
	return nil
}

func (m *ContactsGetContactsV1Result) GetGroupOrderArr() []*GroupOrder {
	if m != nil {
		return m.GroupOrderArr
	}
	return nil
}

func (m *ContactsGetContactsV1Result) GetSavedCount() int32 {
	if m != nil {
		return m.SavedCount
	}
	return 0
}

func (m *ContactsGetContactsV1Result) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

type ContactsGetContactsIdReq struct {
	UserId int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	KeyId  int64         `protobuf:"varint,2,opt,name=keyId,proto3" json:"keyId,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *ContactsGetContactsIdReq) Reset()         { *m = ContactsGetContactsIdReq{} }
func (m *ContactsGetContactsIdReq) String() string { return proto.CompactTextString(m) }
func (*ContactsGetContactsIdReq) ProtoMessage()    {}
func (*ContactsGetContactsIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{50}
}

func (m *ContactsGetContactsIdReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ContactsGetContactsIdReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *ContactsGetContactsIdReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ContactsGetContactsIdResult struct {
	ContactsId []int32   `protobuf:"varint,1,rep,packed,name=contactsId" json:"contactsId,omitempty"`
	Errorcode  ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *ContactsGetContactsIdResult) Reset()         { *m = ContactsGetContactsIdResult{} }
func (m *ContactsGetContactsIdResult) String() string { return proto.CompactTextString(m) }
func (*ContactsGetContactsIdResult) ProtoMessage()    {}
func (*ContactsGetContactsIdResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{51}
}

func (m *ContactsGetContactsIdResult) GetContactsId() []int32 {
	if m != nil {
		return m.ContactsId
	}
	return nil
}

func (m *ContactsGetContactsIdResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 电话本联系人信息
type PhoneBookContact struct {
	ClientId  int64  `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Phone     string `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
	FirstName string `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
}

func (m *PhoneBookContact) Reset()                    { *m = PhoneBookContact{} }
func (m *PhoneBookContact) String() string            { return proto.CompactTextString(m) }
func (*PhoneBookContact) ProtoMessage()               {}
func (*PhoneBookContact) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{52} }

func (m *PhoneBookContact) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *PhoneBookContact) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *PhoneBookContact) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *PhoneBookContact) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

// 导入\添加联系人的请求包
type ContactsImportPhoneContactsReq struct {
	KeyId           int64               `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId          int32               `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PhoneContactArr []*PhoneBookContact `protobuf:"bytes,3,rep,name=phoneContactArr" json:"phoneContactArr,omitempty"`
	Debug           *pbcomm.Debug       `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ContactsImportPhoneContactsReq) Reset()         { *m = ContactsImportPhoneContactsReq{} }
func (m *ContactsImportPhoneContactsReq) String() string { return proto.CompactTextString(m) }
func (*ContactsImportPhoneContactsReq) ProtoMessage()    {}
func (*ContactsImportPhoneContactsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{53}
}

func (m *ContactsImportPhoneContactsReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *ContactsImportPhoneContactsReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ContactsImportPhoneContactsReq) GetPhoneContactArr() []*PhoneBookContact {
	if m != nil {
		return m.PhoneContactArr
	}
	return nil
}

func (m *ContactsImportPhoneContactsReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 导入联系人详细信息
type ImportContact struct {
	UserId   int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ClientId int64 `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (m *ImportContact) Reset()                    { *m = ImportContact{} }
func (m *ImportContact) String() string            { return proto.CompactTextString(m) }
func (*ImportContact) ProtoMessage()               {}
func (*ImportContact) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{54} }

func (m *ImportContact) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ImportContact) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

type PopularContact struct {
	ClientId  int64 `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Importers int32 `protobuf:"varint,2,opt,name=importers,proto3" json:"importers,omitempty"`
}

func (m *PopularContact) Reset()                    { *m = PopularContact{} }
func (m *PopularContact) String() string            { return proto.CompactTextString(m) }
func (*PopularContact) ProtoMessage()               {}
func (*PopularContact) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{55} }

func (m *PopularContact) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *PopularContact) GetImporters() int32 {
	if m != nil {
		return m.Importers
	}
	return 0
}

// 导入联系人的返回结果
type ContactsImportPhoneContactsResult struct {
	ImContactDetail []*ImportContact  `protobuf:"bytes,1,rep,name=imContactDetail" json:"imContactDetail,omitempty"`
	UserInfoArr     []*UserInfo       `protobuf:"bytes,2,rep,name=userInfoArr" json:"userInfoArr,omitempty"`
	PopuContact     []*PopularContact `protobuf:"bytes,3,rep,name=PopuContact" json:"PopuContact,omitempty"`
	Errorcode       ReErrCode         `protobuf:"varint,4,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *ContactsImportPhoneContactsResult) Reset()         { *m = ContactsImportPhoneContactsResult{} }
func (m *ContactsImportPhoneContactsResult) String() string { return proto.CompactTextString(m) }
func (*ContactsImportPhoneContactsResult) ProtoMessage()    {}
func (*ContactsImportPhoneContactsResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{56}
}

func (m *ContactsImportPhoneContactsResult) GetImContactDetail() []*ImportContact {
	if m != nil {
		return m.ImContactDetail
	}
	return nil
}

func (m *ContactsImportPhoneContactsResult) GetUserInfoArr() []*UserInfo {
	if m != nil {
		return m.UserInfoArr
	}
	return nil
}

func (m *ContactsImportPhoneContactsResult) GetPopuContact() []*PopularContact {
	if m != nil {
		return m.PopuContact
	}
	return nil
}

func (m *ContactsImportPhoneContactsResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 关联用户ｉＤ结构
type AddRelationIdInfo struct {
	UserId     int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RelationId int32         `protobuf:"varint,2,opt,name=relation_id,json=relationId,proto3" json:"relation_id,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *AddRelationIdInfo) Reset()                    { *m = AddRelationIdInfo{} }
func (m *AddRelationIdInfo) String() string            { return proto.CompactTextString(m) }
func (*AddRelationIdInfo) ProtoMessage()               {}
func (*AddRelationIdInfo) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{57} }

func (m *AddRelationIdInfo) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *AddRelationIdInfo) GetRelationId() int32 {
	if m != nil {
		return m.RelationId
	}
	return 0
}

func (m *AddRelationIdInfo) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 解除用户关联的
type DelRelationIdInfo struct {
	UserId     int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RelationId int32         `protobuf:"varint,2,opt,name=relation_id,json=relationId,proto3" json:"relation_id,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *DelRelationIdInfo) Reset()                    { *m = DelRelationIdInfo{} }
func (m *DelRelationIdInfo) String() string            { return proto.CompactTextString(m) }
func (*DelRelationIdInfo) ProtoMessage()               {}
func (*DelRelationIdInfo) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{58} }

func (m *DelRelationIdInfo) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DelRelationIdInfo) GetRelationId() int32 {
	if m != nil {
		return m.RelationId
	}
	return 0
}

func (m *DelRelationIdInfo) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 关联用户用户关系的返回
type AddRelationIdInfoResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *AddRelationIdInfoResult) Reset()         { *m = AddRelationIdInfoResult{} }
func (m *AddRelationIdInfoResult) String() string { return proto.CompactTextString(m) }
func (*AddRelationIdInfoResult) ProtoMessage()    {}
func (*AddRelationIdInfoResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{59}
}

func (m *AddRelationIdInfoResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 解除用户用户关系的返回
type DelRelationIdInfoResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *DelRelationIdInfoResult) Reset()         { *m = DelRelationIdInfoResult{} }
func (m *DelRelationIdInfoResult) String() string { return proto.CompactTextString(m) }
func (*DelRelationIdInfoResult) ProtoMessage()    {}
func (*DelRelationIdInfoResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{60}
}

func (m *DelRelationIdInfoResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 拉黑用户的请求
type BlockeduserReq struct {
	UserId     int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BlockedId  int32         `protobuf:"varint,2,opt,name=blocked_id,json=blockedId,proto3" json:"blocked_id,omitempty"`
	AccessHash int64         `protobuf:"varint,3,opt,name=Access_hash,json=AccessHash,proto3" json:"Access_hash,omitempty"`
	KeyId      int64         `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *BlockeduserReq) Reset()                    { *m = BlockeduserReq{} }
func (m *BlockeduserReq) String() string            { return proto.CompactTextString(m) }
func (*BlockeduserReq) ProtoMessage()               {}
func (*BlockeduserReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{61} }

func (m *BlockeduserReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *BlockeduserReq) GetBlockedId() int32 {
	if m != nil {
		return m.BlockedId
	}
	return 0
}

func (m *BlockeduserReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *BlockeduserReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *BlockeduserReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 拉黑用户的返回
type BlockeduserResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *BlockeduserResult) Reset()                    { *m = BlockeduserResult{} }
func (m *BlockeduserResult) String() string            { return proto.CompactTextString(m) }
func (*BlockeduserResult) ProtoMessage()               {}
func (*BlockeduserResult) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{62} }

func (m *BlockeduserResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 将用户从黑明单中移除的请求
type ContactUnblockedReq struct {
	UserId     int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BlockedId  int32         `protobuf:"varint,2,opt,name=blocked_id,json=blockedId,proto3" json:"blocked_id,omitempty"`
	AccessHash int64         `protobuf:"varint,3,opt,name=Access_hash,json=AccessHash,proto3" json:"Access_hash,omitempty"`
	KeyId      int64         `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *ContactUnblockedReq) Reset()         { *m = ContactUnblockedReq{} }
func (m *ContactUnblockedReq) String() string { return proto.CompactTextString(m) }
func (*ContactUnblockedReq) ProtoMessage()    {}
func (*ContactUnblockedReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{63}
}

func (m *ContactUnblockedReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ContactUnblockedReq) GetBlockedId() int32 {
	if m != nil {
		return m.BlockedId
	}
	return 0
}

func (m *ContactUnblockedReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ContactUnblockedReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *ContactUnblockedReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 获取黑明单列表
type ContactsGetBlockedReq struct {
	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *ContactsGetBlockedReq) Reset()         { *m = ContactsGetBlockedReq{} }
func (m *ContactsGetBlockedReq) String() string { return proto.CompactTextString(m) }
func (*ContactsGetBlockedReq) ProtoMessage()    {}
func (*ContactsGetBlockedReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{64}
}

func (m *ContactsGetBlockedReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ContactsGetBlockedReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 黑名单用户的信息
type Blockeduser struct {
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Date   int32 `protobuf:"varint,2,opt,name=date,proto3" json:"date,omitempty"`
}

func (m *Blockeduser) Reset()                    { *m = Blockeduser{} }
func (m *Blockeduser) String() string            { return proto.CompactTextString(m) }
func (*Blockeduser) ProtoMessage()               {}
func (*Blockeduser) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{65} }

func (m *Blockeduser) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Blockeduser) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

// 获取黑明单列表的返回
type ContactsGetBlockedResult struct {
	Blockeduser []int32     `protobuf:"varint,1,rep,packed,name=blockeduser" json:"blockeduser,omitempty"`
	InfoArr     []*UserInfo `protobuf:"bytes,2,rep,name=InfoArr" json:"InfoArr,omitempty"`
	Errorcode   ReErrCode   `protobuf:"varint,3,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *ContactsGetBlockedResult) Reset()         { *m = ContactsGetBlockedResult{} }
func (m *ContactsGetBlockedResult) String() string { return proto.CompactTextString(m) }
func (*ContactsGetBlockedResult) ProtoMessage()    {}
func (*ContactsGetBlockedResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{66}
}

func (m *ContactsGetBlockedResult) GetBlockeduser() []int32 {
	if m != nil {
		return m.Blockeduser
	}
	return nil
}

func (m *ContactsGetBlockedResult) GetInfoArr() []*UserInfo {
	if m != nil {
		return m.InfoArr
	}
	return nil
}

func (m *ContactsGetBlockedResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 系统白名单的基础信息
type SystemWhiteUser struct {
	UserId  int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Level   int32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Proby   int32 `protobuf:"varint,3,opt,name=proby,proto3" json:"proby,omitempty"`
	IsWhite bool  `protobuf:"varint,4,opt,name=is_white,json=isWhite,proto3" json:"is_white,omitempty"`
}

func (m *SystemWhiteUser) Reset()                    { *m = SystemWhiteUser{} }
func (m *SystemWhiteUser) String() string            { return proto.CompactTextString(m) }
func (*SystemWhiteUser) ProtoMessage()               {}
func (*SystemWhiteUser) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{67} }

func (m *SystemWhiteUser) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SystemWhiteUser) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *SystemWhiteUser) GetProby() int32 {
	if m != nil {
		return m.Proby
	}
	return 0
}

func (m *SystemWhiteUser) GetIsWhite() bool {
	if m != nil {
		return m.IsWhite
	}
	return false
}

// 存储系统白名单的请求
type StoreSysWhiteUserReq struct {
	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Level  int32         `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Proby  int32         `protobuf:"varint,3,opt,name=proby,proto3" json:"proby,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *StoreSysWhiteUserReq) Reset()         { *m = StoreSysWhiteUserReq{} }
func (m *StoreSysWhiteUserReq) String() string { return proto.CompactTextString(m) }
func (*StoreSysWhiteUserReq) ProtoMessage()    {}
func (*StoreSysWhiteUserReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{68}
}

func (m *StoreSysWhiteUserReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *StoreSysWhiteUserReq) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *StoreSysWhiteUserReq) GetProby() int32 {
	if m != nil {
		return m.Proby
	}
	return 0
}

func (m *StoreSysWhiteUserReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 存储系统白名单的返回结果
type StoreSysWhiteUserResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *StoreSysWhiteUserResult) Reset()         { *m = StoreSysWhiteUserResult{} }
func (m *StoreSysWhiteUserResult) String() string { return proto.CompactTextString(m) }
func (*StoreSysWhiteUserResult) ProtoMessage()    {}
func (*StoreSysWhiteUserResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{69}
}

func (m *StoreSysWhiteUserResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 更新用户系统白名单的请求
type UpdateSystemWhiteUserLevelReq struct {
	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Level  int32         `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Proby  int32         `protobuf:"varint,3,opt,name=proby,proto3" json:"proby,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *UpdateSystemWhiteUserLevelReq) Reset()         { *m = UpdateSystemWhiteUserLevelReq{} }
func (m *UpdateSystemWhiteUserLevelReq) String() string { return proto.CompactTextString(m) }
func (*UpdateSystemWhiteUserLevelReq) ProtoMessage()    {}
func (*UpdateSystemWhiteUserLevelReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{70}
}

func (m *UpdateSystemWhiteUserLevelReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateSystemWhiteUserLevelReq) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *UpdateSystemWhiteUserLevelReq) GetProby() int32 {
	if m != nil {
		return m.Proby
	}
	return 0
}

func (m *UpdateSystemWhiteUserLevelReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 更新用户系统白名单的返回结果
type UpdateSystemWhiteUserLevelResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *UpdateSystemWhiteUserLevelResult) Reset()         { *m = UpdateSystemWhiteUserLevelResult{} }
func (m *UpdateSystemWhiteUserLevelResult) String() string { return proto.CompactTextString(m) }
func (*UpdateSystemWhiteUserLevelResult) ProtoMessage()    {}
func (*UpdateSystemWhiteUserLevelResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{71}
}

func (m *UpdateSystemWhiteUserLevelResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 获取系统白名单权限
type GetSysWhiteUserReq struct {
	UserId int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetSysWhiteUserReq) Reset()         { *m = GetSysWhiteUserReq{} }
func (m *GetSysWhiteUserReq) String() string { return proto.CompactTextString(m) }
func (*GetSysWhiteUserReq) ProtoMessage()    {}
func (*GetSysWhiteUserReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{72}
}

func (m *GetSysWhiteUserReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetSysWhiteUserReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 获取系统白名单权限结果
type GetSysWhiteUserResult struct {
	SysWhiteInfo *SystemWhiteUser `protobuf:"bytes,1,opt,name=sysWhiteInfo" json:"sysWhiteInfo,omitempty"`
	Errorcode    ReErrCode        `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *GetSysWhiteUserResult) Reset()         { *m = GetSysWhiteUserResult{} }
func (m *GetSysWhiteUserResult) String() string { return proto.CompactTextString(m) }
func (*GetSysWhiteUserResult) ProtoMessage()    {}
func (*GetSysWhiteUserResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{73}
}

func (m *GetSysWhiteUserResult) GetSysWhiteInfo() *SystemWhiteUser {
	if m != nil {
		return m.SysWhiteInfo
	}
	return nil
}

func (m *GetSysWhiteUserResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 获取系统所有白名单请求
type GetSysWhiteUserArrReq struct {
	Debug *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetSysWhiteUserArrReq) Reset()         { *m = GetSysWhiteUserArrReq{} }
func (m *GetSysWhiteUserArrReq) String() string { return proto.CompactTextString(m) }
func (*GetSysWhiteUserArrReq) ProtoMessage()    {}
func (*GetSysWhiteUserArrReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{74}
}

func (m *GetSysWhiteUserArrReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 获取系统所有白名单返回
type GetSysWhiteUserArrResult struct {
	SysWhiteInfoArr []*SystemWhiteUser `protobuf:"bytes,1,rep,name=sysWhiteInfoArr" json:"sysWhiteInfoArr,omitempty"`
	Errorcode       ReErrCode          `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *GetSysWhiteUserArrResult) Reset()         { *m = GetSysWhiteUserArrResult{} }
func (m *GetSysWhiteUserArrResult) String() string { return proto.CompactTextString(m) }
func (*GetSysWhiteUserArrResult) ProtoMessage()    {}
func (*GetSysWhiteUserArrResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{75}
}

func (m *GetSysWhiteUserArrResult) GetSysWhiteInfoArr() []*SystemWhiteUser {
	if m != nil {
		return m.SysWhiteInfoArr
	}
	return nil
}

func (m *GetSysWhiteUserArrResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 删除系统白名单用户的请求
type DelSysWhiteUserReq struct {
	UserId  int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	ProUser int32         `protobuf:"varint,2,opt,name=ProUser,proto3" json:"ProUser,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *DelSysWhiteUserReq) Reset()         { *m = DelSysWhiteUserReq{} }
func (m *DelSysWhiteUserReq) String() string { return proto.CompactTextString(m) }
func (*DelSysWhiteUserReq) ProtoMessage()    {}
func (*DelSysWhiteUserReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{76}
}

func (m *DelSysWhiteUserReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DelSysWhiteUserReq) GetProUser() int32 {
	if m != nil {
		return m.ProUser
	}
	return 0
}

func (m *DelSysWhiteUserReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 删除系统白名单用户的返回结果
type DelSysWhiteUserResult struct {
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *DelSysWhiteUserResult) Reset()         { *m = DelSysWhiteUserResult{} }
func (m *DelSysWhiteUserResult) String() string { return proto.CompactTextString(m) }
func (*DelSysWhiteUserResult) ProtoMessage()    {}
func (*DelSysWhiteUserResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{77}
}

func (m *DelSysWhiteUserResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// user的ＤＣ的信息
type UserDc struct {
	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DcId   int32         `protobuf:"varint,2,opt,name=dc_id,json=dcId,proto3" json:"dc_id,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *UserDc) Reset()                    { *m = UserDc{} }
func (m *UserDc) String() string            { return proto.CompactTextString(m) }
func (*UserDc) ProtoMessage()               {}
func (*UserDc) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{78} }

func (m *UserDc) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserDc) GetDcId() int32 {
	if m != nil {
		return m.DcId
	}
	return 0
}

func (m *UserDc) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 拉取所有用户的DC的请求
type GetAllDcReq struct {
	Debug *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetAllDcReq) Reset()                    { *m = GetAllDcReq{} }
func (m *GetAllDcReq) String() string            { return proto.CompactTextString(m) }
func (*GetAllDcReq) ProtoMessage()               {}
func (*GetAllDcReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{79} }

func (m *GetAllDcReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 设置隐私选项的接口的请求
type SetPrivacyReq struct {
	UserId         int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PrivacyType    int32         `protobuf:"varint,2,opt,name=privacy_type,json=privacyType,proto3" json:"privacy_type,omitempty"`
	Range          int32         `protobuf:"varint,3,opt,name=range,proto3" json:"range,omitempty"`
	AlwaysDisallow []int32       `protobuf:"varint,4,rep,packed,name=always_disallow,json=alwaysDisallow" json:"always_disallow,omitempty"`
	AlwaysAllow    []int32       `protobuf:"varint,5,rep,packed,name=always_allow,json=alwaysAllow" json:"always_allow,omitempty"`
	Ip             string        `protobuf:"bytes,6,opt,name=ip,proto3" json:"ip,omitempty"`
	KeyId          int64         `protobuf:"varint,7,opt,name=keyId,proto3" json:"keyId,omitempty"`
	SessionId      int64         `protobuf:"varint,8,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Phone          string        `protobuf:"bytes,9,opt,name=phone,proto3" json:"phone,omitempty"`
	Debug          *pbcomm.Debug `protobuf:"bytes,10,opt,name=debug" json:"debug,omitempty"`
}

func (m *SetPrivacyReq) Reset()                    { *m = SetPrivacyReq{} }
func (m *SetPrivacyReq) String() string            { return proto.CompactTextString(m) }
func (*SetPrivacyReq) ProtoMessage()               {}
func (*SetPrivacyReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{80} }

func (m *SetPrivacyReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SetPrivacyReq) GetPrivacyType() int32 {
	if m != nil {
		return m.PrivacyType
	}
	return 0
}

func (m *SetPrivacyReq) GetRange() int32 {
	if m != nil {
		return m.Range
	}
	return 0
}

func (m *SetPrivacyReq) GetAlwaysDisallow() []int32 {
	if m != nil {
		return m.AlwaysDisallow
	}
	return nil
}

func (m *SetPrivacyReq) GetAlwaysAllow() []int32 {
	if m != nil {
		return m.AlwaysAllow
	}
	return nil
}

func (m *SetPrivacyReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *SetPrivacyReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *SetPrivacyReq) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *SetPrivacyReq) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *SetPrivacyReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 设置隐私选项的接口的返回
type SetPrivacyResult struct {
	UinfoArr  []*UserInfo `protobuf:"bytes,1,rep,name=UinfoArr" json:"UinfoArr,omitempty"`
	Errorcode ReErrCode   `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *SetPrivacyResult) Reset()                    { *m = SetPrivacyResult{} }
func (m *SetPrivacyResult) String() string            { return proto.CompactTextString(m) }
func (*SetPrivacyResult) ProtoMessage()               {}
func (*SetPrivacyResult) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{81} }

func (m *SetPrivacyResult) GetUinfoArr() []*UserInfo {
	if m != nil {
		return m.UinfoArr
	}
	return nil
}

func (m *SetPrivacyResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 获取隐私选项的接口
type GetPrivacyReq struct {
	UserId      int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PrivacyType int32         `protobuf:"varint,2,opt,name=privacy_type,json=privacyType,proto3" json:"privacy_type,omitempty"`
	KeyId       int64         `protobuf:"varint,3,opt,name=keyId,proto3" json:"keyId,omitempty"`
	SessionId   int64         `protobuf:"varint,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Ip          string        `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip,omitempty"`
	Phone       string        `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetPrivacyReq) Reset()                    { *m = GetPrivacyReq{} }
func (m *GetPrivacyReq) String() string            { return proto.CompactTextString(m) }
func (*GetPrivacyReq) ProtoMessage()               {}
func (*GetPrivacyReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{82} }

func (m *GetPrivacyReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetPrivacyReq) GetPrivacyType() int32 {
	if m != nil {
		return m.PrivacyType
	}
	return 0
}

func (m *GetPrivacyReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *GetPrivacyReq) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *GetPrivacyReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *GetPrivacyReq) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *GetPrivacyReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 检查相应的隐私设置是否被允许的请求接口
type CheckPrivacyReq struct {
	SelfId      int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	UserId      int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PrivacyType int32         `protobuf:"varint,3,opt,name=privacy_type,json=privacyType,proto3" json:"privacy_type,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *CheckPrivacyReq) Reset()                    { *m = CheckPrivacyReq{} }
func (m *CheckPrivacyReq) String() string            { return proto.CompactTextString(m) }
func (*CheckPrivacyReq) ProtoMessage()               {}
func (*CheckPrivacyReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{83} }

func (m *CheckPrivacyReq) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *CheckPrivacyReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CheckPrivacyReq) GetPrivacyType() int32 {
	if m != nil {
		return m.PrivacyType
	}
	return 0
}

func (m *CheckPrivacyReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 检查相应的隐私设置是否被允许的请求返回
type CheckPrivacyResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *CheckPrivacyResult) Reset()         { *m = CheckPrivacyResult{} }
func (m *CheckPrivacyResult) String() string { return proto.CompactTextString(m) }
func (*CheckPrivacyResult) ProtoMessage()    {}
func (*CheckPrivacyResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{84}
}

func (m *CheckPrivacyResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 隐私选项获取的结果
type GetPrivacyResult struct {
	Range          int32       `protobuf:"varint,1,opt,name=range,proto3" json:"range,omitempty"`
	AlwaysDisallow []int32     `protobuf:"varint,2,rep,packed,name=always_disallow,json=alwaysDisallow" json:"always_disallow,omitempty"`
	AlwaysAllow    []int32     `protobuf:"varint,3,rep,packed,name=always_allow,json=alwaysAllow" json:"always_allow,omitempty"`
	UserInfos      []*UserInfo `protobuf:"bytes,4,rep,name=userInfos" json:"userInfos,omitempty"`
	Errorcode      ReErrCode   `protobuf:"varint,5,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *GetPrivacyResult) Reset()                    { *m = GetPrivacyResult{} }
func (m *GetPrivacyResult) String() string            { return proto.CompactTextString(m) }
func (*GetPrivacyResult) ProtoMessage()               {}
func (*GetPrivacyResult) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{85} }

func (m *GetPrivacyResult) GetRange() int32 {
	if m != nil {
		return m.Range
	}
	return 0
}

func (m *GetPrivacyResult) GetAlwaysDisallow() []int32 {
	if m != nil {
		return m.AlwaysDisallow
	}
	return nil
}

func (m *GetPrivacyResult) GetAlwaysAllow() []int32 {
	if m != nil {
		return m.AlwaysAllow
	}
	return nil
}

func (m *GetPrivacyResult) GetUserInfos() []*UserInfo {
	if m != nil {
		return m.UserInfos
	}
	return nil
}

func (m *GetPrivacyResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 存储sticker 集合概要的请求参数
type StoreShopStickerSetReq struct {
	AccessHash int64         `protobuf:"varint,1,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Free       bool          `protobuf:"varint,2,opt,name=free,proto3" json:"free,omitempty"`
	Official   bool          `protobuf:"varint,3,opt,name=official,proto3" json:"official,omitempty"`
	Masks      bool          `protobuf:"varint,4,opt,name=masks,proto3" json:"masks,omitempty"`
	Title      string        `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	ShortName  string        `protobuf:"bytes,6,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Count      int32         `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`
	Hash       int64         `protobuf:"varint,8,opt,name=hash,proto3" json:"hash,omitempty"`
	Emoticon   string        `protobuf:"bytes,9,opt,name=emoticon,proto3" json:"emoticon,omitempty"`
	Documents  []int32       `protobuf:"varint,10,rep,packed,name=documents" json:"documents,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,11,opt,name=debug" json:"debug,omitempty"`
	UserId     int32         `protobuf:"varint,12,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *StoreShopStickerSetReq) Reset()         { *m = StoreShopStickerSetReq{} }
func (m *StoreShopStickerSetReq) String() string { return proto.CompactTextString(m) }
func (*StoreShopStickerSetReq) ProtoMessage()    {}
func (*StoreShopStickerSetReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{86}
}

func (m *StoreShopStickerSetReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *StoreShopStickerSetReq) GetFree() bool {
	if m != nil {
		return m.Free
	}
	return false
}

func (m *StoreShopStickerSetReq) GetOfficial() bool {
	if m != nil {
		return m.Official
	}
	return false
}

func (m *StoreShopStickerSetReq) GetMasks() bool {
	if m != nil {
		return m.Masks
	}
	return false
}

func (m *StoreShopStickerSetReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *StoreShopStickerSetReq) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *StoreShopStickerSetReq) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *StoreShopStickerSetReq) GetHash() int64 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *StoreShopStickerSetReq) GetEmoticon() string {
	if m != nil {
		return m.Emoticon
	}
	return ""
}

func (m *StoreShopStickerSetReq) GetDocuments() []int32 {
	if m != nil {
		return m.Documents
	}
	return nil
}

func (m *StoreShopStickerSetReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *StoreShopStickerSetReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// 存储sticker 集合概要的返回
type StoreShopStickerSetResult struct {
	Id        int32     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *StoreShopStickerSetResult) Reset()         { *m = StoreShopStickerSetResult{} }
func (m *StoreShopStickerSetResult) String() string { return proto.CompactTextString(m) }
func (*StoreShopStickerSetResult) ProtoMessage()    {}
func (*StoreShopStickerSetResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{87}
}

func (m *StoreShopStickerSetResult) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *StoreShopStickerSetResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 存储sticker 集合概要 Documents请求
type StoreShopStickerSetDocumentsReq struct {
	Id        int32         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Documents []int32       `protobuf:"varint,2,rep,packed,name=documents" json:"documents,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *StoreShopStickerSetDocumentsReq) Reset()         { *m = StoreShopStickerSetDocumentsReq{} }
func (m *StoreShopStickerSetDocumentsReq) String() string { return proto.CompactTextString(m) }
func (*StoreShopStickerSetDocumentsReq) ProtoMessage()    {}
func (*StoreShopStickerSetDocumentsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{88}
}

func (m *StoreShopStickerSetDocumentsReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *StoreShopStickerSetDocumentsReq) GetDocuments() []int32 {
	if m != nil {
		return m.Documents
	}
	return nil
}

func (m *StoreShopStickerSetDocumentsReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 存储sticker 集合概要 Documents返回结果
type StoreShopStickerSetDocumentsResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *StoreShopStickerSetDocumentsResult) Reset()         { *m = StoreShopStickerSetDocumentsResult{} }
func (m *StoreShopStickerSetDocumentsResult) String() string { return proto.CompactTextString(m) }
func (*StoreShopStickerSetDocumentsResult) ProtoMessage()    {}
func (*StoreShopStickerSetDocumentsResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{89}
}

func (m *StoreShopStickerSetDocumentsResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 删除sticker商城的请求
type DeleteStickerSetReq struct {
	StickerId int32         `protobuf:"varint,1,opt,name=stickerId,proto3" json:"stickerId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
	UserId    int32         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *DeleteStickerSetReq) Reset()         { *m = DeleteStickerSetReq{} }
func (m *DeleteStickerSetReq) String() string { return proto.CompactTextString(m) }
func (*DeleteStickerSetReq) ProtoMessage()    {}
func (*DeleteStickerSetReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{90}
}

func (m *DeleteStickerSetReq) GetStickerId() int32 {
	if m != nil {
		return m.StickerId
	}
	return 0
}

func (m *DeleteStickerSetReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *DeleteStickerSetReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// 删除sticker商城的返回
type DeleteStickerSetResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *DeleteStickerSetResult) Reset()         { *m = DeleteStickerSetResult{} }
func (m *DeleteStickerSetResult) String() string { return proto.CompactTextString(m) }
func (*DeleteStickerSetResult) ProtoMessage()    {}
func (*DeleteStickerSetResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{91}
}

func (m *DeleteStickerSetResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// sticker set 的基础信息
type StickerSetInfo struct {
	Id         int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AccessHash int64   `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Free       bool    `protobuf:"varint,3,opt,name=free,proto3" json:"free,omitempty"`
	Official   bool    `protobuf:"varint,4,opt,name=official,proto3" json:"official,omitempty"`
	Masks      bool    `protobuf:"varint,5,opt,name=masks,proto3" json:"masks,omitempty"`
	Title      string  `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	ShortName  string  `protobuf:"bytes,7,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Count      int32   `protobuf:"varint,8,opt,name=count,proto3" json:"count,omitempty"`
	Hash       int64   `protobuf:"varint,9,opt,name=hash,proto3" json:"hash,omitempty"`
	Emoticon   string  `protobuf:"bytes,10,opt,name=emoticon,proto3" json:"emoticon,omitempty"`
	Documents  []int32 `protobuf:"varint,11,rep,packed,name=documents" json:"documents,omitempty"`
}

func (m *StickerSetInfo) Reset()                    { *m = StickerSetInfo{} }
func (m *StickerSetInfo) String() string            { return proto.CompactTextString(m) }
func (*StickerSetInfo) ProtoMessage()               {}
func (*StickerSetInfo) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{92} }

func (m *StickerSetInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *StickerSetInfo) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *StickerSetInfo) GetFree() bool {
	if m != nil {
		return m.Free
	}
	return false
}

func (m *StickerSetInfo) GetOfficial() bool {
	if m != nil {
		return m.Official
	}
	return false
}

func (m *StickerSetInfo) GetMasks() bool {
	if m != nil {
		return m.Masks
	}
	return false
}

func (m *StickerSetInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *StickerSetInfo) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *StickerSetInfo) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *StickerSetInfo) GetHash() int64 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *StickerSetInfo) GetEmoticon() string {
	if m != nil {
		return m.Emoticon
	}
	return ""
}

func (m *StickerSetInfo) GetDocuments() []int32 {
	if m != nil {
		return m.Documents
	}
	return nil
}

// 获取指定的sticker集合的请求
type GetStickerSetInfoReq struct {
	Id        int32         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ShortName string        `protobuf:"bytes,2,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	IsId      bool          `protobuf:"varint,3,opt,name=is_id,json=isId,proto3" json:"is_id,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetStickerSetInfoReq) Reset()         { *m = GetStickerSetInfoReq{} }
func (m *GetStickerSetInfoReq) String() string { return proto.CompactTextString(m) }
func (*GetStickerSetInfoReq) ProtoMessage()    {}
func (*GetStickerSetInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{93}
}

func (m *GetStickerSetInfoReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetStickerSetInfoReq) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *GetStickerSetInfoReq) GetIsId() bool {
	if m != nil {
		return m.IsId
	}
	return false
}

func (m *GetStickerSetInfoReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// //获取指定的sticker集合的返回
type GetStickerSetInfoResult struct {
	StickerSetInfo *StickerSetInfo `protobuf:"bytes,1,opt,name=stickerSetInfo" json:"stickerSetInfo,omitempty"`
	Errorcode      ReErrCode       `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *GetStickerSetInfoResult) Reset()         { *m = GetStickerSetInfoResult{} }
func (m *GetStickerSetInfoResult) String() string { return proto.CompactTextString(m) }
func (*GetStickerSetInfoResult) ProtoMessage()    {}
func (*GetStickerSetInfoResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{94}
}

func (m *GetStickerSetInfoResult) GetStickerSetInfo() *StickerSetInfo {
	if m != nil {
		return m.StickerSetInfo
	}
	return nil
}

func (m *GetStickerSetInfoResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// sticker集合里面具体内容
// 存储单个sticker内容请求
type StickerPackDocumentBase struct {
	AttributesStikerSetId         int64  `protobuf:"varint,1,opt,name=attributes_stiker_set_id,json=attributesStikerSetId,proto3" json:"attributes_stiker_set_id,omitempty"`
	DocumentId                    uint64 `protobuf:"varint,2,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	AccessHash                    int64  `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	MimeType                      string `protobuf:"bytes,4,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	Size_                         int32  `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	Thumb                         string `protobuf:"bytes,6,opt,name=thumb,proto3" json:"thumb,omitempty"`
	DcId                          int32  `protobuf:"varint,7,opt,name=dc_id,json=dcId,proto3" json:"dc_id,omitempty"`
	Date                          int32  `protobuf:"varint,8,opt,name=date,proto3" json:"date,omitempty"`
	AttributesImageSizeW          int32  `protobuf:"varint,9,opt,name=attributes_image_size_w,json=attributesImageSizeW,proto3" json:"attributes_image_size_w,omitempty"`
	AttributesImageSizeH          int32  `protobuf:"varint,10,opt,name=attributes_image_size_h,json=attributesImageSizeH,proto3" json:"attributes_image_size_h,omitempty"`
	AttributesStikerAlt           string `protobuf:"bytes,11,opt,name=attributes_stiker_alt,json=attributesStikerAlt,proto3" json:"attributes_stiker_alt,omitempty"`
	AttributesStikerSetAccessHash int64  `protobuf:"varint,12,opt,name=attributes_stiker_set_access_hash,json=attributesStikerSetAccessHash,proto3" json:"attributes_stiker_set_access_hash,omitempty"`
	AttributesFileName            string `protobuf:"bytes,13,opt,name=attributes_file_name,json=attributesFileName,proto3" json:"attributes_file_name,omitempty"`
}

func (m *StickerPackDocumentBase) Reset()         { *m = StickerPackDocumentBase{} }
func (m *StickerPackDocumentBase) String() string { return proto.CompactTextString(m) }
func (*StickerPackDocumentBase) ProtoMessage()    {}
func (*StickerPackDocumentBase) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{95}
}

func (m *StickerPackDocumentBase) GetAttributesStikerSetId() int64 {
	if m != nil {
		return m.AttributesStikerSetId
	}
	return 0
}

func (m *StickerPackDocumentBase) GetDocumentId() uint64 {
	if m != nil {
		return m.DocumentId
	}
	return 0
}

func (m *StickerPackDocumentBase) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *StickerPackDocumentBase) GetMimeType() string {
	if m != nil {
		return m.MimeType
	}
	return ""
}

func (m *StickerPackDocumentBase) GetSize_() int32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *StickerPackDocumentBase) GetThumb() string {
	if m != nil {
		return m.Thumb
	}
	return ""
}

func (m *StickerPackDocumentBase) GetDcId() int32 {
	if m != nil {
		return m.DcId
	}
	return 0
}

func (m *StickerPackDocumentBase) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *StickerPackDocumentBase) GetAttributesImageSizeW() int32 {
	if m != nil {
		return m.AttributesImageSizeW
	}
	return 0
}

func (m *StickerPackDocumentBase) GetAttributesImageSizeH() int32 {
	if m != nil {
		return m.AttributesImageSizeH
	}
	return 0
}

func (m *StickerPackDocumentBase) GetAttributesStikerAlt() string {
	if m != nil {
		return m.AttributesStikerAlt
	}
	return ""
}

func (m *StickerPackDocumentBase) GetAttributesStikerSetAccessHash() int64 {
	if m != nil {
		return m.AttributesStikerSetAccessHash
	}
	return 0
}

func (m *StickerPackDocumentBase) GetAttributesFileName() string {
	if m != nil {
		return m.AttributesFileName
	}
	return ""
}

type StickerPackDocumentInfo struct {
	Id       int32                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	InfoBase *StickerPackDocumentBase `protobuf:"bytes,2,opt,name=infoBase" json:"infoBase,omitempty"`
}

func (m *StickerPackDocumentInfo) Reset()         { *m = StickerPackDocumentInfo{} }
func (m *StickerPackDocumentInfo) String() string { return proto.CompactTextString(m) }
func (*StickerPackDocumentInfo) ProtoMessage()    {}
func (*StickerPackDocumentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{96}
}

func (m *StickerPackDocumentInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *StickerPackDocumentInfo) GetInfoBase() *StickerPackDocumentBase {
	if m != nil {
		return m.InfoBase
	}
	return nil
}

// 存储sticker文档的请求
type StoreStickerPackDcReq struct {
	Stickpackbase *StickerPackDocumentBase `protobuf:"bytes,1,opt,name=stickpackbase" json:"stickpackbase,omitempty"`
	Debug         *pbcomm.Debug            `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
}

func (m *StoreStickerPackDcReq) Reset()         { *m = StoreStickerPackDcReq{} }
func (m *StoreStickerPackDcReq) String() string { return proto.CompactTextString(m) }
func (*StoreStickerPackDcReq) ProtoMessage()    {}
func (*StoreStickerPackDcReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{97}
}

func (m *StoreStickerPackDcReq) GetStickpackbase() *StickerPackDocumentBase {
	if m != nil {
		return m.Stickpackbase
	}
	return nil
}

func (m *StoreStickerPackDcReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 存储sticker文档的返回
type StoreStickerPackDcResult struct {
	Id        int32     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *StoreStickerPackDcResult) Reset()         { *m = StoreStickerPackDcResult{} }
func (m *StoreStickerPackDcResult) String() string { return proto.CompactTextString(m) }
func (*StoreStickerPackDcResult) ProtoMessage()    {}
func (*StoreStickerPackDcResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{98}
}

func (m *StoreStickerPackDcResult) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *StoreStickerPackDcResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 批量导入sticker的请求
type StoreStickerPackDcArrReq struct {
	StPDB []*StickerPackDocumentBase `protobuf:"bytes,1,rep,name=StPDB" json:"StPDB,omitempty"`
	Debug *pbcomm.Debug              `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
}

func (m *StoreStickerPackDcArrReq) Reset()         { *m = StoreStickerPackDcArrReq{} }
func (m *StoreStickerPackDcArrReq) String() string { return proto.CompactTextString(m) }
func (*StoreStickerPackDcArrReq) ProtoMessage()    {}
func (*StoreStickerPackDcArrReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{99}
}

func (m *StoreStickerPackDcArrReq) GetStPDB() []*StickerPackDocumentBase {
	if m != nil {
		return m.StPDB
	}
	return nil
}

func (m *StoreStickerPackDcArrReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 批量导入sticker的返回
type StoreStickerPackDcArrResult struct {
	IdArr     []int32   `protobuf:"varint,1,rep,packed,name=idArr" json:"idArr,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *StoreStickerPackDcArrResult) Reset()         { *m = StoreStickerPackDcArrResult{} }
func (m *StoreStickerPackDcArrResult) String() string { return proto.CompactTextString(m) }
func (*StoreStickerPackDcArrResult) ProtoMessage()    {}
func (*StoreStickerPackDcArrResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{100}
}

func (m *StoreStickerPackDcArrResult) GetIdArr() []int32 {
	if m != nil {
		return m.IdArr
	}
	return nil
}

func (m *StoreStickerPackDcArrResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 获取一个sticker下面的所有贴图信息的请求
type GetStickerSetPackDcInfosReq struct {
	Id    int32         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Debug *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetStickerSetPackDcInfosReq) Reset()         { *m = GetStickerSetPackDcInfosReq{} }
func (m *GetStickerSetPackDcInfosReq) String() string { return proto.CompactTextString(m) }
func (*GetStickerSetPackDcInfosReq) ProtoMessage()    {}
func (*GetStickerSetPackDcInfosReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{101}
}

func (m *GetStickerSetPackDcInfosReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetStickerSetPackDcInfosReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 获取一个sticker下面的所有贴图信息的返回
type GetStickerSetPackDcInfosResult struct {
	StPDcInfo []*StickerPackDocumentInfo `protobuf:"bytes,1,rep,name=StPDcInfo" json:"StPDcInfo,omitempty"`
}

func (m *GetStickerSetPackDcInfosResult) Reset()         { *m = GetStickerSetPackDcInfosResult{} }
func (m *GetStickerSetPackDcInfosResult) String() string { return proto.CompactTextString(m) }
func (*GetStickerSetPackDcInfosResult) ProtoMessage()    {}
func (*GetStickerSetPackDcInfosResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{102}
}

func (m *GetStickerSetPackDcInfosResult) GetStPDcInfo() []*StickerPackDocumentInfo {
	if m != nil {
		return m.StPDcInfo
	}
	return nil
}

// 添加喜欢的sticker 请求
type AddOrDeleteFaveSticerReq struct {
	UserId    int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	StickerId int64         `protobuf:"varint,2,opt,name=StickerId,proto3" json:"StickerId,omitempty"`
	Unfave    bool          `protobuf:"varint,3,opt,name=Unfave,proto3" json:"Unfave,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *AddOrDeleteFaveSticerReq) Reset()         { *m = AddOrDeleteFaveSticerReq{} }
func (m *AddOrDeleteFaveSticerReq) String() string { return proto.CompactTextString(m) }
func (*AddOrDeleteFaveSticerReq) ProtoMessage()    {}
func (*AddOrDeleteFaveSticerReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{103}
}

func (m *AddOrDeleteFaveSticerReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *AddOrDeleteFaveSticerReq) GetStickerId() int64 {
	if m != nil {
		return m.StickerId
	}
	return 0
}

func (m *AddOrDeleteFaveSticerReq) GetUnfave() bool {
	if m != nil {
		return m.Unfave
	}
	return false
}

func (m *AddOrDeleteFaveSticerReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 添加喜欢的sticker 返回
type AddOrDeleteFaveSticerResult struct {
	ErrorCode ReErrCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.ReErrCode" json:"ErrorCode,omitempty"`
}

func (m *AddOrDeleteFaveSticerResult) Reset()         { *m = AddOrDeleteFaveSticerResult{} }
func (m *AddOrDeleteFaveSticerResult) String() string { return proto.CompactTextString(m) }
func (*AddOrDeleteFaveSticerResult) ProtoMessage()    {}
func (*AddOrDeleteFaveSticerResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{104}
}

func (m *AddOrDeleteFaveSticerResult) GetErrorCode() ReErrCode {
	if m != nil {
		return m.ErrorCode
	}
	return ReErrCode_Success
}

// 获取已经添加的的喜爱单个贴图 请求
type GetFavedStickersReq struct {
	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Hash   int32         `protobuf:"varint,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetFavedStickersReq) Reset()         { *m = GetFavedStickersReq{} }
func (m *GetFavedStickersReq) String() string { return proto.CompactTextString(m) }
func (*GetFavedStickersReq) ProtoMessage()    {}
func (*GetFavedStickersReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{105}
}

func (m *GetFavedStickersReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetFavedStickersReq) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *GetFavedStickersReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 获取已经添加的的喜爱单个贴图 返回
type GetFavedStickersResult struct {
	Hash      int32                      `protobuf:"varint,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Packs     []*StickerPack             `protobuf:"bytes,2,rep,name=packs" json:"packs,omitempty"`
	Stickers  []*StickerPackDocumentBase `protobuf:"bytes,3,rep,name=stickers" json:"stickers,omitempty"`
	ErrorCode ReErrCode                  `protobuf:"varint,4,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.ReErrCode" json:"ErrorCode,omitempty"`
}

func (m *GetFavedStickersResult) Reset()         { *m = GetFavedStickersResult{} }
func (m *GetFavedStickersResult) String() string { return proto.CompactTextString(m) }
func (*GetFavedStickersResult) ProtoMessage()    {}
func (*GetFavedStickersResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{106}
}

func (m *GetFavedStickersResult) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *GetFavedStickersResult) GetPacks() []*StickerPack {
	if m != nil {
		return m.Packs
	}
	return nil
}

func (m *GetFavedStickersResult) GetStickers() []*StickerPackDocumentBase {
	if m != nil {
		return m.Stickers
	}
	return nil
}

func (m *GetFavedStickersResult) GetErrorCode() ReErrCode {
	if m != nil {
		return m.ErrorCode
	}
	return ReErrCode_Success
}

type StickerPack struct {
	Emoticon   string `protobuf:"bytes,1,opt,name=Emoticon,proto3" json:"Emoticon,omitempty"`
	DocumentId int64  `protobuf:"varint,2,opt,name=DocumentId,proto3" json:"DocumentId,omitempty"`
}

func (m *StickerPack) Reset()                    { *m = StickerPack{} }
func (m *StickerPack) String() string            { return proto.CompactTextString(m) }
func (*StickerPack) ProtoMessage()               {}
func (*StickerPack) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{107} }

func (m *StickerPack) GetEmoticon() string {
	if m != nil {
		return m.Emoticon
	}
	return ""
}

func (m *StickerPack) GetDocumentId() int64 {
	if m != nil {
		return m.DocumentId
	}
	return 0
}

// 用户安装sticker集合的请求
type StoreUserStickerSetReq struct {
	UserId       int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StickersetId int32         `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	Installed    bool          `protobuf:"varint,3,opt,name=installed,proto3" json:"installed,omitempty"`
	Disabled     bool          `protobuf:"varint,4,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Order        int32         `protobuf:"varint,5,opt,name=order,proto3" json:"order,omitempty"`
	Archived     bool          `protobuf:"varint,6,opt,name=archived,proto3" json:"archived,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug" json:"debug,omitempty"`
}

func (m *StoreUserStickerSetReq) Reset()         { *m = StoreUserStickerSetReq{} }
func (m *StoreUserStickerSetReq) String() string { return proto.CompactTextString(m) }
func (*StoreUserStickerSetReq) ProtoMessage()    {}
func (*StoreUserStickerSetReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{108}
}

func (m *StoreUserStickerSetReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *StoreUserStickerSetReq) GetStickersetId() int32 {
	if m != nil {
		return m.StickersetId
	}
	return 0
}

func (m *StoreUserStickerSetReq) GetInstalled() bool {
	if m != nil {
		return m.Installed
	}
	return false
}

func (m *StoreUserStickerSetReq) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *StoreUserStickerSetReq) GetOrder() int32 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *StoreUserStickerSetReq) GetArchived() bool {
	if m != nil {
		return m.Archived
	}
	return false
}

func (m *StoreUserStickerSetReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 用户安装sticker集合的返回
type StoreUserStickerSetResult struct {
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *StoreUserStickerSetResult) Reset()         { *m = StoreUserStickerSetResult{} }
func (m *StoreUserStickerSetResult) String() string { return proto.CompactTextString(m) }
func (*StoreUserStickerSetResult) ProtoMessage()    {}
func (*StoreUserStickerSetResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{109}
}

func (m *StoreUserStickerSetResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 更新用户stickerdisable请求
type UpdateUserStickerSetDisabledReq struct {
	UserId       int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StickersetId int32         `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	Disabled     bool          `protobuf:"varint,4,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *UpdateUserStickerSetDisabledReq) Reset()         { *m = UpdateUserStickerSetDisabledReq{} }
func (m *UpdateUserStickerSetDisabledReq) String() string { return proto.CompactTextString(m) }
func (*UpdateUserStickerSetDisabledReq) ProtoMessage()    {}
func (*UpdateUserStickerSetDisabledReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{110}
}

func (m *UpdateUserStickerSetDisabledReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateUserStickerSetDisabledReq) GetStickersetId() int32 {
	if m != nil {
		return m.StickersetId
	}
	return 0
}

func (m *UpdateUserStickerSetDisabledReq) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *UpdateUserStickerSetDisabledReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 更新用户stickerdisable结果
type UpdateUserStickerSetDisabledResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *UpdateUserStickerSetDisabledResult) Reset()         { *m = UpdateUserStickerSetDisabledResult{} }
func (m *UpdateUserStickerSetDisabledResult) String() string { return proto.CompactTextString(m) }
func (*UpdateUserStickerSetDisabledResult) ProtoMessage()    {}
func (*UpdateUserStickerSetDisabledResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{111}
}

func (m *UpdateUserStickerSetDisabledResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 更新用户的Sticker的顺序
type UpdateUserStickerSetOrderReq struct {
	UserId       int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StickersetId int32         `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	Order        int32         `protobuf:"varint,3,opt,name=order,proto3" json:"order,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *UpdateUserStickerSetOrderReq) Reset()         { *m = UpdateUserStickerSetOrderReq{} }
func (m *UpdateUserStickerSetOrderReq) String() string { return proto.CompactTextString(m) }
func (*UpdateUserStickerSetOrderReq) ProtoMessage()    {}
func (*UpdateUserStickerSetOrderReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{112}
}

func (m *UpdateUserStickerSetOrderReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateUserStickerSetOrderReq) GetStickersetId() int32 {
	if m != nil {
		return m.StickersetId
	}
	return 0
}

func (m *UpdateUserStickerSetOrderReq) GetOrder() int32 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *UpdateUserStickerSetOrderReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 更新用户的Sticker的顺序返回
type UpdateUserStickerSetOrderResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *UpdateUserStickerSetOrderResult) Reset()         { *m = UpdateUserStickerSetOrderResult{} }
func (m *UpdateUserStickerSetOrderResult) String() string { return proto.CompactTextString(m) }
func (*UpdateUserStickerSetOrderResult) ProtoMessage()    {}
func (*UpdateUserStickerSetOrderResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{113}
}

func (m *UpdateUserStickerSetOrderResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 更新用户的Sticker install和archived
type UpdateUserStickerSetInstallArReq struct {
	UserId       int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StickersetId int32         `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	Archived     bool          `protobuf:"varint,3,opt,name=archived,proto3" json:"archived,omitempty"`
	Installed    bool          `protobuf:"varint,4,opt,name=installed,proto3" json:"installed,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *UpdateUserStickerSetInstallArReq) Reset()         { *m = UpdateUserStickerSetInstallArReq{} }
func (m *UpdateUserStickerSetInstallArReq) String() string { return proto.CompactTextString(m) }
func (*UpdateUserStickerSetInstallArReq) ProtoMessage()    {}
func (*UpdateUserStickerSetInstallArReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{114}
}

func (m *UpdateUserStickerSetInstallArReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateUserStickerSetInstallArReq) GetStickersetId() int32 {
	if m != nil {
		return m.StickersetId
	}
	return 0
}

func (m *UpdateUserStickerSetInstallArReq) GetArchived() bool {
	if m != nil {
		return m.Archived
	}
	return false
}

func (m *UpdateUserStickerSetInstallArReq) GetInstalled() bool {
	if m != nil {
		return m.Installed
	}
	return false
}

func (m *UpdateUserStickerSetInstallArReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 更新用户的Sticker install和archived的返回
type UpdateUserStickerSetInstallArResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *UpdateUserStickerSetInstallArResult) Reset()         { *m = UpdateUserStickerSetInstallArResult{} }
func (m *UpdateUserStickerSetInstallArResult) String() string { return proto.CompactTextString(m) }
func (*UpdateUserStickerSetInstallArResult) ProtoMessage()    {}
func (*UpdateUserStickerSetInstallArResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{115}
}

func (m *UpdateUserStickerSetInstallArResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 删除sticker的请求
type DeleteuserStickerReq struct {
	UserId       int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StickersetId int32         `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *DeleteuserStickerReq) Reset()         { *m = DeleteuserStickerReq{} }
func (m *DeleteuserStickerReq) String() string { return proto.CompactTextString(m) }
func (*DeleteuserStickerReq) ProtoMessage()    {}
func (*DeleteuserStickerReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{116}
}

func (m *DeleteuserStickerReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DeleteuserStickerReq) GetStickersetId() int32 {
	if m != nil {
		return m.StickersetId
	}
	return 0
}

func (m *DeleteuserStickerReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 删除sticker的返回
type DeleteuserStickerResult struct {
	UserId       int32     `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StickersetId int32     `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	Errorcode    ReErrCode `protobuf:"varint,3,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *DeleteuserStickerResult) Reset()         { *m = DeleteuserStickerResult{} }
func (m *DeleteuserStickerResult) String() string { return proto.CompactTextString(m) }
func (*DeleteuserStickerResult) ProtoMessage()    {}
func (*DeleteuserStickerResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{117}
}

func (m *DeleteuserStickerResult) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DeleteuserStickerResult) GetStickersetId() int32 {
	if m != nil {
		return m.StickersetId
	}
	return 0
}

func (m *DeleteuserStickerResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 用户Sticker的信息
type UserStickerInfo struct {
	StickersetId int32   `protobuf:"varint,1,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	Installed    bool    `protobuf:"varint,2,opt,name=installed,proto3" json:"installed,omitempty"`
	Disabled     bool    `protobuf:"varint,3,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Order        int32   `protobuf:"varint,4,opt,name=order,proto3" json:"order,omitempty"`
	AccessHash   int64   `protobuf:"varint,5,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Free         bool    `protobuf:"varint,6,opt,name=free,proto3" json:"free,omitempty"`
	Official     bool    `protobuf:"varint,7,opt,name=official,proto3" json:"official,omitempty"`
	Archived     bool    `protobuf:"varint,8,opt,name=archived,proto3" json:"archived,omitempty"`
	Masks        bool    `protobuf:"varint,9,opt,name=masks,proto3" json:"masks,omitempty"`
	Title        string  `protobuf:"bytes,10,opt,name=title,proto3" json:"title,omitempty"`
	ShortName    string  `protobuf:"bytes,11,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Count        int32   `protobuf:"varint,12,opt,name=count,proto3" json:"count,omitempty"`
	Hash         int64   `protobuf:"varint,13,opt,name=hash,proto3" json:"hash,omitempty"`
	Emotico      string  `protobuf:"bytes,14,opt,name=emotico,proto3" json:"emotico,omitempty"`
	Documents    []int32 `protobuf:"varint,15,rep,packed,name=documents" json:"documents,omitempty"`
}

func (m *UserStickerInfo) Reset()                    { *m = UserStickerInfo{} }
func (m *UserStickerInfo) String() string            { return proto.CompactTextString(m) }
func (*UserStickerInfo) ProtoMessage()               {}
func (*UserStickerInfo) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{118} }

func (m *UserStickerInfo) GetStickersetId() int32 {
	if m != nil {
		return m.StickersetId
	}
	return 0
}

func (m *UserStickerInfo) GetInstalled() bool {
	if m != nil {
		return m.Installed
	}
	return false
}

func (m *UserStickerInfo) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *UserStickerInfo) GetOrder() int32 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *UserStickerInfo) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *UserStickerInfo) GetFree() bool {
	if m != nil {
		return m.Free
	}
	return false
}

func (m *UserStickerInfo) GetOfficial() bool {
	if m != nil {
		return m.Official
	}
	return false
}

func (m *UserStickerInfo) GetArchived() bool {
	if m != nil {
		return m.Archived
	}
	return false
}

func (m *UserStickerInfo) GetMasks() bool {
	if m != nil {
		return m.Masks
	}
	return false
}

func (m *UserStickerInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *UserStickerInfo) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *UserStickerInfo) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *UserStickerInfo) GetHash() int64 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *UserStickerInfo) GetEmotico() string {
	if m != nil {
		return m.Emotico
	}
	return ""
}

func (m *UserStickerInfo) GetDocuments() []int32 {
	if m != nil {
		return m.Documents
	}
	return nil
}

// 获取的sticker信息的列表
type UserStickerInfoArr struct {
	StickerInfo []*UserStickerInfo `protobuf:"bytes,1,rep,name=stickerInfo" json:"stickerInfo,omitempty"`
}

func (m *UserStickerInfoArr) Reset()         { *m = UserStickerInfoArr{} }
func (m *UserStickerInfoArr) String() string { return proto.CompactTextString(m) }
func (*UserStickerInfoArr) ProtoMessage()    {}
func (*UserStickerInfoArr) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{119}
}

func (m *UserStickerInfoArr) GetStickerInfo() []*UserStickerInfo {
	if m != nil {
		return m.StickerInfo
	}
	return nil
}

// 获取的sticker集合的所有信息
type StickerSetInfoArr struct {
	StickerInfo []*StickerSetInfo `protobuf:"bytes,1,rep,name=stickerInfo" json:"stickerInfo,omitempty"`
}

func (m *StickerSetInfoArr) Reset()         { *m = StickerSetInfoArr{} }
func (m *StickerSetInfoArr) String() string { return proto.CompactTextString(m) }
func (*StickerSetInfoArr) ProtoMessage()    {}
func (*StickerSetInfoArr) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{120}
}

func (m *StickerSetInfoArr) GetStickerInfo() []*StickerSetInfo {
	if m != nil {
		return m.StickerInfo
	}
	return nil
}

// 获取用户的所有的贴图请求
type GetuserAllStickersReq struct {
	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetuserAllStickersReq) Reset()         { *m = GetuserAllStickersReq{} }
func (m *GetuserAllStickersReq) String() string { return proto.CompactTextString(m) }
func (*GetuserAllStickersReq) ProtoMessage()    {}
func (*GetuserAllStickersReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{121}
}

func (m *GetuserAllStickersReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetuserAllStickersReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 获取用户的所有的贴图的返回
type GetuserAllStickersResult struct {
	StickerInfoArr []*UserStickerInfo `protobuf:"bytes,1,rep,name=stickerInfoArr" json:"stickerInfoArr,omitempty"`
	Errorcode      ReErrCode          `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *GetuserAllStickersResult) Reset()         { *m = GetuserAllStickersResult{} }
func (m *GetuserAllStickersResult) String() string { return proto.CompactTextString(m) }
func (*GetuserAllStickersResult) ProtoMessage()    {}
func (*GetuserAllStickersResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{122}
}

func (m *GetuserAllStickersResult) GetStickerInfoArr() []*UserStickerInfo {
	if m != nil {
		return m.StickerInfoArr
	}
	return nil
}

func (m *GetuserAllStickersResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 获取所有sticker集合信息
type GetAllStickerSetsReq struct {
	Debug *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetAllStickerSetsReq) Reset()         { *m = GetAllStickerSetsReq{} }
func (m *GetAllStickerSetsReq) String() string { return proto.CompactTextString(m) }
func (*GetAllStickerSetsReq) ProtoMessage()    {}
func (*GetAllStickerSetsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{123}
}

func (m *GetAllStickerSetsReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 获取所有sticker集合信息的返回
type GetAllStickerSetsResult struct {
	StickerInfoArr []*StickerSetInfo `protobuf:"bytes,1,rep,name=stickerInfoArr" json:"stickerInfoArr,omitempty"`
	Errorcode      ReErrCode         `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *GetAllStickerSetsResult) Reset()         { *m = GetAllStickerSetsResult{} }
func (m *GetAllStickerSetsResult) String() string { return proto.CompactTextString(m) }
func (*GetAllStickerSetsResult) ProtoMessage()    {}
func (*GetAllStickerSetsResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{124}
}

func (m *GetAllStickerSetsResult) GetStickerInfoArr() []*StickerSetInfo {
	if m != nil {
		return m.StickerInfoArr
	}
	return nil
}

func (m *GetAllStickerSetsResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 删除单个sticker
type DeleteStickerPackDocumentReq struct {
	Id           int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StickersetId int64 `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
}

func (m *DeleteStickerPackDocumentReq) Reset()         { *m = DeleteStickerPackDocumentReq{} }
func (m *DeleteStickerPackDocumentReq) String() string { return proto.CompactTextString(m) }
func (*DeleteStickerPackDocumentReq) ProtoMessage()    {}
func (*DeleteStickerPackDocumentReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{125}
}

func (m *DeleteStickerPackDocumentReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DeleteStickerPackDocumentReq) GetStickersetId() int64 {
	if m != nil {
		return m.StickersetId
	}
	return 0
}

// 删除单个sticker返回
type DeleteStickerPackDocumentResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *DeleteStickerPackDocumentResult) Reset()         { *m = DeleteStickerPackDocumentResult{} }
func (m *DeleteStickerPackDocumentResult) String() string { return proto.CompactTextString(m) }
func (*DeleteStickerPackDocumentResult) ProtoMessage()    {}
func (*DeleteStickerPackDocumentResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{126}
}

func (m *DeleteStickerPackDocumentResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 获取作者sticker
type GetAuthorStickerSetReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SetId  int64 `protobuf:"varint,2,opt,name=set_id,json=setId,proto3" json:"set_id,omitempty"`
}

func (m *GetAuthorStickerSetReq) Reset()         { *m = GetAuthorStickerSetReq{} }
func (m *GetAuthorStickerSetReq) String() string { return proto.CompactTextString(m) }
func (*GetAuthorStickerSetReq) ProtoMessage()    {}
func (*GetAuthorStickerSetReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{127}
}

func (m *GetAuthorStickerSetReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetAuthorStickerSetReq) GetSetId() int64 {
	if m != nil {
		return m.SetId
	}
	return 0
}

// 获取作者sticker返回
type GetAuthorStickerSetResult struct {
	ErrorCode ReErrCode         `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.ReErrCode" json:"ErrorCode,omitempty"`
	Set       *AuthorStickerSet `protobuf:"bytes,2,opt,name=set" json:"set,omitempty"`
}

func (m *GetAuthorStickerSetResult) Reset()         { *m = GetAuthorStickerSetResult{} }
func (m *GetAuthorStickerSetResult) String() string { return proto.CompactTextString(m) }
func (*GetAuthorStickerSetResult) ProtoMessage()    {}
func (*GetAuthorStickerSetResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{128}
}

func (m *GetAuthorStickerSetResult) GetErrorCode() ReErrCode {
	if m != nil {
		return m.ErrorCode
	}
	return ReErrCode_Success
}

func (m *GetAuthorStickerSetResult) GetSet() *AuthorStickerSet {
	if m != nil {
		return m.Set
	}
	return nil
}

// 获取作者所有sticker
type GetAuthorAllStickerSetReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *GetAuthorAllStickerSetReq) Reset()         { *m = GetAuthorAllStickerSetReq{} }
func (m *GetAuthorAllStickerSetReq) String() string { return proto.CompactTextString(m) }
func (*GetAuthorAllStickerSetReq) ProtoMessage()    {}
func (*GetAuthorAllStickerSetReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{129}
}

func (m *GetAuthorAllStickerSetReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// 获取作者所有sticker返回
type GetAuthorAllStickerSetResult struct {
	ErrorCode ReErrCode           `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.ReErrCode" json:"ErrorCode,omitempty"`
	Sets      []*AuthorStickerSet `protobuf:"bytes,2,rep,name=sets" json:"sets,omitempty"`
}

func (m *GetAuthorAllStickerSetResult) Reset()         { *m = GetAuthorAllStickerSetResult{} }
func (m *GetAuthorAllStickerSetResult) String() string { return proto.CompactTextString(m) }
func (*GetAuthorAllStickerSetResult) ProtoMessage()    {}
func (*GetAuthorAllStickerSetResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{130}
}

func (m *GetAuthorAllStickerSetResult) GetErrorCode() ReErrCode {
	if m != nil {
		return m.ErrorCode
	}
	return ReErrCode_Success
}

func (m *GetAuthorAllStickerSetResult) GetSets() []*AuthorStickerSet {
	if m != nil {
		return m.Sets
	}
	return nil
}

// 结构体AuthorStickerSet
type AuthorStickerSet struct {
	UserId       int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StickersetId int64  `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	ShortName    string `protobuf:"bytes,3,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Archived     bool   `protobuf:"varint,4,opt,name=archived,proto3" json:"archived,omitempty"`
	Installed    bool   `protobuf:"varint,5,opt,name=installed,proto3" json:"installed,omitempty"`
	Disabled     bool   `protobuf:"varint,6,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Ordered      int32  `protobuf:"varint,7,opt,name=ordered,proto3" json:"ordered,omitempty"`
	Created      int32  `protobuf:"varint,8,opt,name=created,proto3" json:"created,omitempty"`
	Updated      int32  `protobuf:"varint,9,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (m *AuthorStickerSet) Reset()                    { *m = AuthorStickerSet{} }
func (m *AuthorStickerSet) String() string            { return proto.CompactTextString(m) }
func (*AuthorStickerSet) ProtoMessage()               {}
func (*AuthorStickerSet) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{131} }

func (m *AuthorStickerSet) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *AuthorStickerSet) GetStickersetId() int64 {
	if m != nil {
		return m.StickersetId
	}
	return 0
}

func (m *AuthorStickerSet) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *AuthorStickerSet) GetArchived() bool {
	if m != nil {
		return m.Archived
	}
	return false
}

func (m *AuthorStickerSet) GetInstalled() bool {
	if m != nil {
		return m.Installed
	}
	return false
}

func (m *AuthorStickerSet) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *AuthorStickerSet) GetOrdered() int32 {
	if m != nil {
		return m.Ordered
	}
	return 0
}

func (m *AuthorStickerSet) GetCreated() int32 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *AuthorStickerSet) GetUpdated() int32 {
	if m != nil {
		return m.Updated
	}
	return 0
}

// 统计sticker数量
type CountAuthorAllStickerSetReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *CountAuthorAllStickerSetReq) Reset()         { *m = CountAuthorAllStickerSetReq{} }
func (m *CountAuthorAllStickerSetReq) String() string { return proto.CompactTextString(m) }
func (*CountAuthorAllStickerSetReq) ProtoMessage()    {}
func (*CountAuthorAllStickerSetReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{132}
}

func (m *CountAuthorAllStickerSetReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// 统计拥有sticker数量返回
type CountAuthorAllStickerSetResult struct {
	ErrorCode ReErrCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.ReErrCode" json:"ErrorCode,omitempty"`
	Count     int64     `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *CountAuthorAllStickerSetResult) Reset()         { *m = CountAuthorAllStickerSetResult{} }
func (m *CountAuthorAllStickerSetResult) String() string { return proto.CompactTextString(m) }
func (*CountAuthorAllStickerSetResult) ProtoMessage()    {}
func (*CountAuthorAllStickerSetResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{133}
}

func (m *CountAuthorAllStickerSetResult) GetErrorCode() ReErrCode {
	if m != nil {
		return m.ErrorCode
	}
	return ReErrCode_Success
}

func (m *CountAuthorAllStickerSetResult) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

// 用户gif的动态图集合
type UserGifInfoArr struct {
	GifArr []*UserSaveGifInfo `protobuf:"bytes,1,rep,name=gif_arr,json=gifArr" json:"gif_arr,omitempty"`
}

func (m *UserGifInfoArr) Reset()                    { *m = UserGifInfoArr{} }
func (m *UserGifInfoArr) String() string            { return proto.CompactTextString(m) }
func (*UserGifInfoArr) ProtoMessage()               {}
func (*UserGifInfoArr) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{134} }

func (m *UserGifInfoArr) GetGifArr() []*UserSaveGifInfo {
	if m != nil {
		return m.GifArr
	}
	return nil
}

// 保存用户动态图的请求
type UserSaveGifInfo struct {
	UserId  int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GifId   string `protobuf:"bytes,2,opt,name=gif_id,json=gifId,proto3" json:"gif_id,omitempty"`
	Fid     uint64 `protobuf:"varint,3,opt,name=fid,proto3" json:"fid,omitempty"`
	GitHash int64  `protobuf:"varint,4,opt,name=git_hash,json=gitHash,proto3" json:"git_hash,omitempty"`
}

func (m *UserSaveGifInfo) Reset()                    { *m = UserSaveGifInfo{} }
func (m *UserSaveGifInfo) String() string            { return proto.CompactTextString(m) }
func (*UserSaveGifInfo) ProtoMessage()               {}
func (*UserSaveGifInfo) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{135} }

func (m *UserSaveGifInfo) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserSaveGifInfo) GetGifId() string {
	if m != nil {
		return m.GifId
	}
	return ""
}

func (m *UserSaveGifInfo) GetFid() uint64 {
	if m != nil {
		return m.Fid
	}
	return 0
}

func (m *UserSaveGifInfo) GetGitHash() int64 {
	if m != nil {
		return m.GitHash
	}
	return 0
}

// 保存gif动态图的请求
type SaveUserGifReq struct {
	UserId  int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GifId   string        `protobuf:"bytes,2,opt,name=gif_id,json=gifId,proto3" json:"gif_id,omitempty"`
	Fid     uint64        `protobuf:"varint,3,opt,name=fid,proto3" json:"fid,omitempty"`
	GitHash int64         `protobuf:"varint,4,opt,name=git_hash,json=gitHash,proto3" json:"git_hash,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *SaveUserGifReq) Reset()                    { *m = SaveUserGifReq{} }
func (m *SaveUserGifReq) String() string            { return proto.CompactTextString(m) }
func (*SaveUserGifReq) ProtoMessage()               {}
func (*SaveUserGifReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{136} }

func (m *SaveUserGifReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SaveUserGifReq) GetGifId() string {
	if m != nil {
		return m.GifId
	}
	return ""
}

func (m *SaveUserGifReq) GetFid() uint64 {
	if m != nil {
		return m.Fid
	}
	return 0
}

func (m *SaveUserGifReq) GetGitHash() int64 {
	if m != nil {
		return m.GitHash
	}
	return 0
}

func (m *SaveUserGifReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 保存gif动态图的请求返回
type SaveUserGifResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *SaveUserGifResult) Reset()         { *m = SaveUserGifResult{} }
func (m *SaveUserGifResult) String() string { return proto.CompactTextString(m) }
func (*SaveUserGifResult) ProtoMessage()    {}
func (*SaveUserGifResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{137}
}

func (m *SaveUserGifResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 删除动态图的请求
type DelUserGifReq struct {
	UserId  int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Fid     uint64        `protobuf:"varint,3,opt,name=fid,proto3" json:"fid,omitempty"`
	GitHash int64         `protobuf:"varint,4,opt,name=git_hash,json=gitHash,proto3" json:"git_hash,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *DelUserGifReq) Reset()                    { *m = DelUserGifReq{} }
func (m *DelUserGifReq) String() string            { return proto.CompactTextString(m) }
func (*DelUserGifReq) ProtoMessage()               {}
func (*DelUserGifReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{138} }

func (m *DelUserGifReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DelUserGifReq) GetFid() uint64 {
	if m != nil {
		return m.Fid
	}
	return 0
}

func (m *DelUserGifReq) GetGitHash() int64 {
	if m != nil {
		return m.GitHash
	}
	return 0
}

func (m *DelUserGifReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 删除动态图的返回
type DelUserGifResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *DelUserGifResult) Reset()                    { *m = DelUserGifResult{} }
func (m *DelUserGifResult) String() string            { return proto.CompactTextString(m) }
func (*DelUserGifResult) ProtoMessage()               {}
func (*DelUserGifResult) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{139} }

func (m *DelUserGifResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 获取用户的gifs
type GetUserGifsReq struct {
	UserId int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Hash   int32         `protobuf:"varint,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetUserGifsReq) Reset()                    { *m = GetUserGifsReq{} }
func (m *GetUserGifsReq) String() string            { return proto.CompactTextString(m) }
func (*GetUserGifsReq) ProtoMessage()               {}
func (*GetUserGifsReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{140} }

func (m *GetUserGifsReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetUserGifsReq) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *GetUserGifsReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 获取用户的gifs返回
type GetUserGifsResult struct {
	UserId    int32              `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Hash      int32              `protobuf:"varint,2,opt,name=hash,proto3" json:"hash,omitempty"`
	GifArr    []*UserSaveGifInfo `protobuf:"bytes,3,rep,name=gif_arr,json=gifArr" json:"gif_arr,omitempty"`
	Errorcode ReErrCode          `protobuf:"varint,4,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *GetUserGifsResult) Reset()         { *m = GetUserGifsResult{} }
func (m *GetUserGifsResult) String() string { return proto.CompactTextString(m) }
func (*GetUserGifsResult) ProtoMessage()    {}
func (*GetUserGifsResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{141}
}

func (m *GetUserGifsResult) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetUserGifsResult) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *GetUserGifsResult) GetGifArr() []*UserSaveGifInfo {
	if m != nil {
		return m.GifArr
	}
	return nil
}

func (m *GetUserGifsResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 检测用户是否是黑名单的请求
type CheckUserIsBlockedReq struct {
	SelfId int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	UserId int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *CheckUserIsBlockedReq) Reset()         { *m = CheckUserIsBlockedReq{} }
func (m *CheckUserIsBlockedReq) String() string { return proto.CompactTextString(m) }
func (*CheckUserIsBlockedReq) ProtoMessage()    {}
func (*CheckUserIsBlockedReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{142}
}

func (m *CheckUserIsBlockedReq) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *CheckUserIsBlockedReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CheckUserIsBlockedReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 检测用户黑名单的返回
type CheckUserIsBlockedResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *CheckUserIsBlockedResult) Reset()         { *m = CheckUserIsBlockedResult{} }
func (m *CheckUserIsBlockedResult) String() string { return proto.CompactTextString(m) }
func (*CheckUserIsBlockedResult) ProtoMessage()    {}
func (*CheckUserIsBlockedResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{143}
}

func (m *CheckUserIsBlockedResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 注册用户请求的基础信息
type RegisterUserInfo struct {
	UserId         int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccessHash     int64  `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Phone          string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	CountryCode    string `protobuf:"bytes,4,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	LocalPhone     string `protobuf:"bytes,5,opt,name=local_phone,json=localPhone,proto3" json:"local_phone,omitempty"`
	FirstName      string `protobuf:"bytes,6,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName       string `protobuf:"bytes,7,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	IsBot          bool   `protobuf:"varint,8,opt,name=is_bot,json=isBot,proto3" json:"is_bot,omitempty"`
	BotInfoVersion int32  `protobuf:"varint,9,opt,name=bot_info_version,json=botInfoVersion,proto3" json:"bot_info_version,omitempty"`
	BotChatHistory bool   `protobuf:"varint,10,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNoChats     bool   `protobuf:"varint,11,opt,name=bot_no_chats,json=botNoChats,proto3" json:"bot_no_chats,omitempty"`
	Sex            int32  `protobuf:"varint,12,opt,name=sex,proto3" json:"sex,omitempty"`
	Birthday       int32  `protobuf:"varint,13,opt,name=birthday,proto3" json:"birthday,omitempty"`
	Photo          string `protobuf:"bytes,14,opt,name=photo,proto3" json:"photo,omitempty"`
}

func (m *RegisterUserInfo) Reset()                    { *m = RegisterUserInfo{} }
func (m *RegisterUserInfo) String() string            { return proto.CompactTextString(m) }
func (*RegisterUserInfo) ProtoMessage()               {}
func (*RegisterUserInfo) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{144} }

func (m *RegisterUserInfo) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *RegisterUserInfo) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *RegisterUserInfo) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *RegisterUserInfo) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *RegisterUserInfo) GetLocalPhone() string {
	if m != nil {
		return m.LocalPhone
	}
	return ""
}

func (m *RegisterUserInfo) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *RegisterUserInfo) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *RegisterUserInfo) GetIsBot() bool {
	if m != nil {
		return m.IsBot
	}
	return false
}

func (m *RegisterUserInfo) GetBotInfoVersion() int32 {
	if m != nil {
		return m.BotInfoVersion
	}
	return 0
}

func (m *RegisterUserInfo) GetBotChatHistory() bool {
	if m != nil {
		return m.BotChatHistory
	}
	return false
}

func (m *RegisterUserInfo) GetBotNoChats() bool {
	if m != nil {
		return m.BotNoChats
	}
	return false
}

func (m *RegisterUserInfo) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *RegisterUserInfo) GetBirthday() int32 {
	if m != nil {
		return m.Birthday
	}
	return 0
}

func (m *RegisterUserInfo) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

// 更新用户信息返回
type UpdateUserInfoResult struct {
	Uinfo     *UserInfo `protobuf:"bytes,1,opt,name=uinfo" json:"uinfo,omitempty"`
	ErrorCode int32     `protobuf:"varint,2,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Result    bool      `protobuf:"varint,3,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (m *UpdateUserInfoResult) Reset()         { *m = UpdateUserInfoResult{} }
func (m *UpdateUserInfoResult) String() string { return proto.CompactTextString(m) }
func (*UpdateUserInfoResult) ProtoMessage()    {}
func (*UpdateUserInfoResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{145}
}

func (m *UpdateUserInfoResult) GetUinfo() *UserInfo {
	if m != nil {
		return m.Uinfo
	}
	return nil
}

func (m *UpdateUserInfoResult) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *UpdateUserInfoResult) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// 检测用户哈希值是否合法请求参数
type CheckUserAccessHashValidReq struct {
	UserId     int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	AccessHash int64         `protobuf:"varint,2,opt,name=AccessHash,proto3" json:"AccessHash,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *CheckUserAccessHashValidReq) Reset()         { *m = CheckUserAccessHashValidReq{} }
func (m *CheckUserAccessHashValidReq) String() string { return proto.CompactTextString(m) }
func (*CheckUserAccessHashValidReq) ProtoMessage()    {}
func (*CheckUserAccessHashValidReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{146}
}

func (m *CheckUserAccessHashValidReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CheckUserAccessHashValidReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *CheckUserAccessHashValidReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 检测用户哈希值是否合法返回结构
type CheckUserAccessHashValidResult struct {
	IsValid   bool      `protobuf:"varint,1,opt,name=isValid,proto3" json:"isValid,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *CheckUserAccessHashValidResult) Reset()         { *m = CheckUserAccessHashValidResult{} }
func (m *CheckUserAccessHashValidResult) String() string { return proto.CompactTextString(m) }
func (*CheckUserAccessHashValidResult) ProtoMessage()    {}
func (*CheckUserAccessHashValidResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{147}
}

func (m *CheckUserAccessHashValidResult) GetIsValid() bool {
	if m != nil {
		return m.IsValid
	}
	return false
}

func (m *CheckUserAccessHashValidResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 注册指定用户的请求
type RegisterUserInfoReq struct {
	UserId         int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccessHash     int64         `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	PhoneNumber    string        `protobuf:"bytes,3,opt,name=PhoneNumber,proto3" json:"PhoneNumber,omitempty"`
	FirstName      string        `protobuf:"bytes,4,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	LastName       string        `protobuf:"bytes,5,opt,name=LastName,proto3" json:"LastName,omitempty"`
	IsBot          bool          `protobuf:"varint,6,opt,name=is_bot,json=isBot,proto3" json:"is_bot,omitempty"`
	BotInfoVersion int32         `protobuf:"varint,7,opt,name=bot_info_version,json=botInfoVersion,proto3" json:"bot_info_version,omitempty"`
	BotChatHistory bool          `protobuf:"varint,8,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNoChats     bool          `protobuf:"varint,9,opt,name=bot_no_chats,json=botNoChats,proto3" json:"bot_no_chats,omitempty"`
	CountryCode    string        `protobuf:"bytes,10,opt,name=CountryCode,proto3" json:"CountryCode,omitempty"`
	LocalPhone     string        `protobuf:"bytes,11,opt,name=LocalPhone,proto3" json:"LocalPhone,omitempty"`
	Dc             int32         `protobuf:"varint,12,opt,name=dc,proto3" json:"dc,omitempty"`
	GroupNow       int32         `protobuf:"varint,13,opt,name=GroupNow,proto3" json:"GroupNow,omitempty"`
	Debug          *pbcomm.Debug `protobuf:"bytes,14,opt,name=debug" json:"debug,omitempty"`
	Sex            int32         `protobuf:"varint,15,opt,name=Sex,proto3" json:"Sex,omitempty"`
	Birthday       int32         `protobuf:"varint,16,opt,name=birthday,proto3" json:"birthday,omitempty"`
}

func (m *RegisterUserInfoReq) Reset()         { *m = RegisterUserInfoReq{} }
func (m *RegisterUserInfoReq) String() string { return proto.CompactTextString(m) }
func (*RegisterUserInfoReq) ProtoMessage()    {}
func (*RegisterUserInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{148}
}

func (m *RegisterUserInfoReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *RegisterUserInfoReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *RegisterUserInfoReq) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *RegisterUserInfoReq) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *RegisterUserInfoReq) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *RegisterUserInfoReq) GetIsBot() bool {
	if m != nil {
		return m.IsBot
	}
	return false
}

func (m *RegisterUserInfoReq) GetBotInfoVersion() int32 {
	if m != nil {
		return m.BotInfoVersion
	}
	return 0
}

func (m *RegisterUserInfoReq) GetBotChatHistory() bool {
	if m != nil {
		return m.BotChatHistory
	}
	return false
}

func (m *RegisterUserInfoReq) GetBotNoChats() bool {
	if m != nil {
		return m.BotNoChats
	}
	return false
}

func (m *RegisterUserInfoReq) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *RegisterUserInfoReq) GetLocalPhone() string {
	if m != nil {
		return m.LocalPhone
	}
	return ""
}

func (m *RegisterUserInfoReq) GetDc() int32 {
	if m != nil {
		return m.Dc
	}
	return 0
}

func (m *RegisterUserInfoReq) GetGroupNow() int32 {
	if m != nil {
		return m.GroupNow
	}
	return 0
}

func (m *RegisterUserInfoReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *RegisterUserInfoReq) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *RegisterUserInfoReq) GetBirthday() int32 {
	if m != nil {
		return m.Birthday
	}
	return 0
}

// 注册指定用户的请求
type RegisterUserInfoResult struct {
	Uinfo     *UserInfo `protobuf:"bytes,1,opt,name=uinfo" json:"uinfo,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *RegisterUserInfoResult) Reset()         { *m = RegisterUserInfoResult{} }
func (m *RegisterUserInfoResult) String() string { return proto.CompactTextString(m) }
func (*RegisterUserInfoResult) ProtoMessage()    {}
func (*RegisterUserInfoResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{149}
}

func (m *RegisterUserInfoResult) GetUinfo() *UserInfo {
	if m != nil {
		return m.Uinfo
	}
	return nil
}

func (m *RegisterUserInfoResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 获取音效设置
type GetNotifySettingsReq struct {
	FromId  int32         `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	ReqType int32         `protobuf:"varint,2,opt,name=req_type,json=reqType,proto3" json:"req_type,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetNotifySettingsReq) Reset()         { *m = GetNotifySettingsReq{} }
func (m *GetNotifySettingsReq) String() string { return proto.CompactTextString(m) }
func (*GetNotifySettingsReq) ProtoMessage()    {}
func (*GetNotifySettingsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{150}
}

func (m *GetNotifySettingsReq) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *GetNotifySettingsReq) GetReqType() int32 {
	if m != nil {
		return m.ReqType
	}
	return 0
}

func (m *GetNotifySettingsReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 音效设置返回
type GetNotifySettingsResult struct {
	ShowPreviews bool      `protobuf:"varint,1,opt,name=Show_previews,json=ShowPreviews,proto3" json:"Show_previews,omitempty"`
	Silent       bool      `protobuf:"varint,2,opt,name=Silent,proto3" json:"Silent,omitempty"`
	MuteUntil    int32     `protobuf:"varint,3,opt,name=Mute_until,json=MuteUntil,proto3" json:"Mute_until,omitempty"`
	Sound        string    `protobuf:"bytes,4,opt,name=Sound,proto3" json:"Sound,omitempty"`
	Errorcode    ReErrCode `protobuf:"varint,5,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *GetNotifySettingsResult) Reset()         { *m = GetNotifySettingsResult{} }
func (m *GetNotifySettingsResult) String() string { return proto.CompactTextString(m) }
func (*GetNotifySettingsResult) ProtoMessage()    {}
func (*GetNotifySettingsResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{151}
}

func (m *GetNotifySettingsResult) GetShowPreviews() bool {
	if m != nil {
		return m.ShowPreviews
	}
	return false
}

func (m *GetNotifySettingsResult) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *GetNotifySettingsResult) GetMuteUntil() int32 {
	if m != nil {
		return m.MuteUntil
	}
	return 0
}

func (m *GetNotifySettingsResult) GetSound() string {
	if m != nil {
		return m.Sound
	}
	return ""
}

func (m *GetNotifySettingsResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 更新音效设置
type UpdateNotifySettingsReq struct {
	FromId       int32         `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	ReqType      int32         `protobuf:"varint,2,opt,name=req_type,json=reqType,proto3" json:"req_type,omitempty"`
	ShowPreviews bool          `protobuf:"varint,3,opt,name=Show_previews,json=ShowPreviews,proto3" json:"Show_previews,omitempty"`
	Silent       bool          `protobuf:"varint,4,opt,name=Silent,proto3" json:"Silent,omitempty"`
	MuteUntil    int32         `protobuf:"varint,5,opt,name=Mute_until,json=MuteUntil,proto3" json:"Mute_until,omitempty"`
	Sound        string        `protobuf:"bytes,6,opt,name=Sound,proto3" json:"Sound,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug" json:"debug,omitempty"`
}

func (m *UpdateNotifySettingsReq) Reset()         { *m = UpdateNotifySettingsReq{} }
func (m *UpdateNotifySettingsReq) String() string { return proto.CompactTextString(m) }
func (*UpdateNotifySettingsReq) ProtoMessage()    {}
func (*UpdateNotifySettingsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{152}
}

func (m *UpdateNotifySettingsReq) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *UpdateNotifySettingsReq) GetReqType() int32 {
	if m != nil {
		return m.ReqType
	}
	return 0
}

func (m *UpdateNotifySettingsReq) GetShowPreviews() bool {
	if m != nil {
		return m.ShowPreviews
	}
	return false
}

func (m *UpdateNotifySettingsReq) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *UpdateNotifySettingsReq) GetMuteUntil() int32 {
	if m != nil {
		return m.MuteUntil
	}
	return 0
}

func (m *UpdateNotifySettingsReq) GetSound() string {
	if m != nil {
		return m.Sound
	}
	return ""
}

func (m *UpdateNotifySettingsReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 更新音效
type UpdateNotifySettingsResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *UpdateNotifySettingsResult) Reset()         { *m = UpdateNotifySettingsResult{} }
func (m *UpdateNotifySettingsResult) String() string { return proto.CompactTextString(m) }
func (*UpdateNotifySettingsResult) ProtoMessage()    {}
func (*UpdateNotifySettingsResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{153}
}

func (m *UpdateNotifySettingsResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 获取自己所有联系人的在线状态请求
type GetContactsStatusReq struct {
	SelfId int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetContactsStatusReq) Reset()         { *m = GetContactsStatusReq{} }
func (m *GetContactsStatusReq) String() string { return proto.CompactTextString(m) }
func (*GetContactsStatusReq) ProtoMessage()    {}
func (*GetContactsStatusReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{154}
}

func (m *GetContactsStatusReq) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *GetContactsStatusReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 联系人的在线状态
type UserStaus struct {
	UserId      int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Status      int32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	OfflineTime int32 `protobuf:"varint,3,opt,name=offline_time,json=offlineTime,proto3" json:"offline_time,omitempty"`
}

func (m *UserStaus) Reset()                    { *m = UserStaus{} }
func (m *UserStaus) String() string            { return proto.CompactTextString(m) }
func (*UserStaus) ProtoMessage()               {}
func (*UserStaus) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{155} }

func (m *UserStaus) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserStaus) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *UserStaus) GetOfflineTime() int32 {
	if m != nil {
		return m.OfflineTime
	}
	return 0
}

// 获取自己所有联系人的在线状态返回
type GetContactsStatusResult struct {
	ContactStatusArr []*UserStaus `protobuf:"bytes,1,rep,name=contactStatusArr" json:"contactStatusArr,omitempty"`
	Errorcode        ReErrCode    `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *GetContactsStatusResult) Reset()         { *m = GetContactsStatusResult{} }
func (m *GetContactsStatusResult) String() string { return proto.CompactTextString(m) }
func (*GetContactsStatusResult) ProtoMessage()    {}
func (*GetContactsStatusResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{156}
}

func (m *GetContactsStatusResult) GetContactStatusArr() []*UserStaus {
	if m != nil {
		return m.ContactStatusArr
	}
	return nil
}

func (m *GetContactsStatusResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 更新机器人头像请求
type UpdateBotPicRequest struct {
	BotId int32         `protobuf:"varint,1,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	Photo []byte        `protobuf:"bytes,2,opt,name=photo,proto3" json:"photo,omitempty"`
	Debug *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *UpdateBotPicRequest) Reset()         { *m = UpdateBotPicRequest{} }
func (m *UpdateBotPicRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateBotPicRequest) ProtoMessage()    {}
func (*UpdateBotPicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{157}
}

func (m *UpdateBotPicRequest) GetBotId() int32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *UpdateBotPicRequest) GetPhoto() []byte {
	if m != nil {
		return m.Photo
	}
	return nil
}

func (m *UpdateBotPicRequest) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type UpdateBotPicResult struct {
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *UpdateBotPicResult) Reset()         { *m = UpdateBotPicResult{} }
func (m *UpdateBotPicResult) String() string { return proto.CompactTextString(m) }
func (*UpdateBotPicResult) ProtoMessage()    {}
func (*UpdateBotPicResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{158}
}

func (m *UpdateBotPicResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 获取所有代理的IP和端口请求
type GetAllProxyConfigReq struct {
	Debug *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetAllProxyConfigReq) Reset()         { *m = GetAllProxyConfigReq{} }
func (m *GetAllProxyConfigReq) String() string { return proto.CompactTextString(m) }
func (*GetAllProxyConfigReq) ProtoMessage()    {}
func (*GetAllProxyConfigReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{159}
}

func (m *GetAllProxyConfigReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 代理的配置的地址结构
type ProxyAddr struct {
	Ip      string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	InnerIp string `protobuf:"bytes,2,opt,name=innerIp,proto3" json:"innerIp,omitempty"`
	Port    int32  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (m *ProxyAddr) Reset()                    { *m = ProxyAddr{} }
func (m *ProxyAddr) String() string            { return proto.CompactTextString(m) }
func (*ProxyAddr) ProtoMessage()               {}
func (*ProxyAddr) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{160} }

func (m *ProxyAddr) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *ProxyAddr) GetInnerIp() string {
	if m != nil {
		return m.InnerIp
	}
	return ""
}

func (m *ProxyAddr) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// 获取所有代理的IP和端口返回结构
type GetAllProxyConfigResult struct {
	Addrs     []*ProxyAddr `protobuf:"bytes,1,rep,name=addrs" json:"addrs,omitempty"`
	Errorcode ReErrCode    `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *GetAllProxyConfigResult) Reset()         { *m = GetAllProxyConfigResult{} }
func (m *GetAllProxyConfigResult) String() string { return proto.CompactTextString(m) }
func (*GetAllProxyConfigResult) ProtoMessage()    {}
func (*GetAllProxyConfigResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{161}
}

func (m *GetAllProxyConfigResult) GetAddrs() []*ProxyAddr {
	if m != nil {
		return m.Addrs
	}
	return nil
}

func (m *GetAllProxyConfigResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 检查用户名是否经被占用请求
type CheckUserNameOccupiedReq struct {
	Userid   int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	UserName string        `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Debug    *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *CheckUserNameOccupiedReq) Reset()         { *m = CheckUserNameOccupiedReq{} }
func (m *CheckUserNameOccupiedReq) String() string { return proto.CompactTextString(m) }
func (*CheckUserNameOccupiedReq) ProtoMessage()    {}
func (*CheckUserNameOccupiedReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{162}
}

func (m *CheckUserNameOccupiedReq) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *CheckUserNameOccupiedReq) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *CheckUserNameOccupiedReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 检查用户名是否经被占用返回结果
type CheckUserNameOccupiedResult struct {
	Occpuy bool `protobuf:"varint,1,opt,name=occpuy,proto3" json:"occpuy,omitempty"`
}

func (m *CheckUserNameOccupiedResult) Reset()         { *m = CheckUserNameOccupiedResult{} }
func (m *CheckUserNameOccupiedResult) String() string { return proto.CompactTextString(m) }
func (*CheckUserNameOccupiedResult) ProtoMessage()    {}
func (*CheckUserNameOccupiedResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{163}
}

func (m *CheckUserNameOccupiedResult) GetOccpuy() bool {
	if m != nil {
		return m.Occpuy
	}
	return false
}

// 获取用户最新的GPS的请求
type GetUserGpsReq struct {
	Userid int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetUserGpsReq) Reset()                    { *m = GetUserGpsReq{} }
func (m *GetUserGpsReq) String() string            { return proto.CompactTextString(m) }
func (*GetUserGpsReq) ProtoMessage()               {}
func (*GetUserGpsReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{164} }

func (m *GetUserGpsReq) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *GetUserGpsReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 获取用户的GPS的请求
type GetUserGpsResult struct {
	Latitude     float64   `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude    float64   `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	DeviceModule string    `protobuf:"bytes,3,opt,name=device_module,json=deviceModule,proto3" json:"device_module,omitempty"`
	Timestamp    int32     `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Errorcode    ReErrCode `protobuf:"varint,5,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *GetUserGpsResult) Reset()                    { *m = GetUserGpsResult{} }
func (m *GetUserGpsResult) String() string            { return proto.CompactTextString(m) }
func (*GetUserGpsResult) ProtoMessage()               {}
func (*GetUserGpsResult) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{165} }

func (m *GetUserGpsResult) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *GetUserGpsResult) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *GetUserGpsResult) GetDeviceModule() string {
	if m != nil {
		return m.DeviceModule
	}
	return ""
}

func (m *GetUserGpsResult) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *GetUserGpsResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 检测是否是自己是否是对方的联系人
type CheckSelfIsContactReq struct {
	SelfId int32         `protobuf:"varint,1,opt,name=selfId,proto3" json:"selfId,omitempty"`
	UserId int32         `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *CheckSelfIsContactReq) Reset()         { *m = CheckSelfIsContactReq{} }
func (m *CheckSelfIsContactReq) String() string { return proto.CompactTextString(m) }
func (*CheckSelfIsContactReq) ProtoMessage()    {}
func (*CheckSelfIsContactReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{166}
}

func (m *CheckSelfIsContactReq) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *CheckSelfIsContactReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CheckSelfIsContactReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 检测是否是自己是否是对方的联系人的返回结果
type CheckSelfIsContactResult struct {
	SelfIsContact bool      `protobuf:"varint,1,opt,name=SelfIsContact,proto3" json:"SelfIsContact,omitempty"`
	Errorcode     ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *CheckSelfIsContactResult) Reset()         { *m = CheckSelfIsContactResult{} }
func (m *CheckSelfIsContactResult) String() string { return proto.CompactTextString(m) }
func (*CheckSelfIsContactResult) ProtoMessage()    {}
func (*CheckSelfIsContactResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{167}
}

func (m *CheckSelfIsContactResult) GetSelfIsContact() bool {
	if m != nil {
		return m.SelfIsContact
	}
	return false
}

func (m *CheckSelfIsContactResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// update switch setting
type UpdateSwitchReq struct {
	UserId int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Switch Switch `protobuf:"varint,2,opt,name=switch,proto3,enum=pbimuinfoserver.Switch" json:"switch,omitempty"`
	OnOff  bool   `protobuf:"varint,3,opt,name=on_off,json=onOff,proto3" json:"on_off,omitempty"`
}

func (m *UpdateSwitchReq) Reset()                    { *m = UpdateSwitchReq{} }
func (m *UpdateSwitchReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateSwitchReq) ProtoMessage()               {}
func (*UpdateSwitchReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{168} }

func (m *UpdateSwitchReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateSwitchReq) GetSwitch() Switch {
	if m != nil {
		return m.Switch
	}
	return Switch_Unused
}

func (m *UpdateSwitchReq) GetOnOff() bool {
	if m != nil {
		return m.OnOff
	}
	return false
}

type UpdateSwitchResult struct {
	Code UpdateSwitchResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=pbimuinfoserver.UpdateSwitchResult_ResultCode" json:"code,omitempty"`
}

func (m *UpdateSwitchResult) Reset()         { *m = UpdateSwitchResult{} }
func (m *UpdateSwitchResult) String() string { return proto.CompactTextString(m) }
func (*UpdateSwitchResult) ProtoMessage()    {}
func (*UpdateSwitchResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{169}
}

func (m *UpdateSwitchResult) GetCode() UpdateSwitchResult_ResultCode {
	if m != nil {
		return m.Code
	}
	return UpdateSwitchResult_Success
}

// get switch setting
type GetSwitchStatusReq struct {
	UserId int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Switch Switch `protobuf:"varint,2,opt,name=switch,proto3,enum=pbimuinfoserver.Switch" json:"switch,omitempty"`
}

func (m *GetSwitchStatusReq) Reset()         { *m = GetSwitchStatusReq{} }
func (m *GetSwitchStatusReq) String() string { return proto.CompactTextString(m) }
func (*GetSwitchStatusReq) ProtoMessage()    {}
func (*GetSwitchStatusReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{170}
}

func (m *GetSwitchStatusReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetSwitchStatusReq) GetSwitch() Switch {
	if m != nil {
		return m.Switch
	}
	return Switch_Unused
}

type GetSwitchStatusResult struct {
	OnOff bool                             `protobuf:"varint,1,opt,name=on_off,json=onOff,proto3" json:"on_off,omitempty"`
	Code  GetSwitchStatusResult_ResultCode `protobuf:"varint,2,opt,name=code,proto3,enum=pbimuinfoserver.GetSwitchStatusResult_ResultCode" json:"code,omitempty"`
}

func (m *GetSwitchStatusResult) Reset()         { *m = GetSwitchStatusResult{} }
func (m *GetSwitchStatusResult) String() string { return proto.CompactTextString(m) }
func (*GetSwitchStatusResult) ProtoMessage()    {}
func (*GetSwitchStatusResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{171}
}

func (m *GetSwitchStatusResult) GetOnOff() bool {
	if m != nil {
		return m.OnOff
	}
	return false
}

func (m *GetSwitchStatusResult) GetCode() GetSwitchStatusResult_ResultCode {
	if m != nil {
		return m.Code
	}
	return GetSwitchStatusResult_Success
}

// 获取viplog 用户电话号码的列表请求
type GetViplogPhoneListReq struct {
}

func (m *GetViplogPhoneListReq) Reset()         { *m = GetViplogPhoneListReq{} }
func (m *GetViplogPhoneListReq) String() string { return proto.CompactTextString(m) }
func (*GetViplogPhoneListReq) ProtoMessage()    {}
func (*GetViplogPhoneListReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{172}
}

// 获取viplog 用户电话号码的列表返回
type GetViplogPhoneListResp struct {
	Phones []string `protobuf:"bytes,1,rep,name=phones" json:"phones,omitempty"`
}

func (m *GetViplogPhoneListResp) Reset()         { *m = GetViplogPhoneListResp{} }
func (m *GetViplogPhoneListResp) String() string { return proto.CompactTextString(m) }
func (*GetViplogPhoneListResp) ProtoMessage()    {}
func (*GetViplogPhoneListResp) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{173}
}

func (m *GetViplogPhoneListResp) GetPhones() []string {
	if m != nil {
		return m.Phones
	}
	return nil
}

// 更新用户已经开通支付帐号请求
type UpdateUserHasPayReq struct {
	UserId    int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	KeyId     int64 `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	HasCreate bool  `protobuf:"varint,3,opt,name=Has_create,json=HasCreate,proto3" json:"Has_create,omitempty"`
}

func (m *UpdateUserHasPayReq) Reset()         { *m = UpdateUserHasPayReq{} }
func (m *UpdateUserHasPayReq) String() string { return proto.CompactTextString(m) }
func (*UpdateUserHasPayReq) ProtoMessage()    {}
func (*UpdateUserHasPayReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{174}
}

func (m *UpdateUserHasPayReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateUserHasPayReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *UpdateUserHasPayReq) GetHasCreate() bool {
	if m != nil {
		return m.HasCreate
	}
	return false
}

// 更新用户已经开通支付帐号返回
type UpdateUserHasPayResp struct {
	Sucess bool `protobuf:"varint,1,opt,name=sucess,proto3" json:"sucess,omitempty"`
}

func (m *UpdateUserHasPayResp) Reset()         { *m = UpdateUserHasPayResp{} }
func (m *UpdateUserHasPayResp) String() string { return proto.CompactTextString(m) }
func (*UpdateUserHasPayResp) ProtoMessage()    {}
func (*UpdateUserHasPayResp) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{175}
}

func (m *UpdateUserHasPayResp) GetSucess() bool {
	if m != nil {
		return m.Sucess
	}
	return false
}

// 检查用户是否已经创建帐号
type CheckUserHasPayReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *CheckUserHasPayReq) Reset()         { *m = CheckUserHasPayReq{} }
func (m *CheckUserHasPayReq) String() string { return proto.CompactTextString(m) }
func (*CheckUserHasPayReq) ProtoMessage()    {}
func (*CheckUserHasPayReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{176}
}

func (m *CheckUserHasPayReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// 检查用户是否已经创建帐号的返回
type CheckUserHasPayResp struct {
	Has bool `protobuf:"varint,1,opt,name=has,proto3" json:"has,omitempty"`
}

func (m *CheckUserHasPayResp) Reset()         { *m = CheckUserHasPayResp{} }
func (m *CheckUserHasPayResp) String() string { return proto.CompactTextString(m) }
func (*CheckUserHasPayResp) ProtoMessage()    {}
func (*CheckUserHasPayResp) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{177}
}

func (m *CheckUserHasPayResp) GetHas() bool {
	if m != nil {
		return m.Has
	}
	return false
}

// 更新用户年龄，性别，区域等等  flags:# sex:flags.0?int age:flags.1?int address:flags.2?string extend:flags.3?DataJSON
type UpdateUserDetailReq struct {
	UserId  int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Flags   int32  `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	Sex     int32  `protobuf:"varint,3,opt,name=sex,proto3" json:"sex,omitempty"`
	Age     int32  `protobuf:"varint,4,opt,name=age,proto3" json:"age,omitempty"`
	Address string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	Extend  string `protobuf:"bytes,6,opt,name=extend,proto3" json:"extend,omitempty"`
}

func (m *UpdateUserDetailReq) Reset()         { *m = UpdateUserDetailReq{} }
func (m *UpdateUserDetailReq) String() string { return proto.CompactTextString(m) }
func (*UpdateUserDetailReq) ProtoMessage()    {}
func (*UpdateUserDetailReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{178}
}

func (m *UpdateUserDetailReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateUserDetailReq) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *UpdateUserDetailReq) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *UpdateUserDetailReq) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *UpdateUserDetailReq) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UpdateUserDetailReq) GetExtend() string {
	if m != nil {
		return m.Extend
	}
	return ""
}

type UpdateUserDetailResult struct {
	Sucessful bool `protobuf:"varint,1,opt,name=sucessful,proto3" json:"sucessful,omitempty"`
}

func (m *UpdateUserDetailResult) Reset()         { *m = UpdateUserDetailResult{} }
func (m *UpdateUserDetailResult) String() string { return proto.CompactTextString(m) }
func (*UpdateUserDetailResult) ProtoMessage()    {}
func (*UpdateUserDetailResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{179}
}

func (m *UpdateUserDetailResult) GetSucessful() bool {
	if m != nil {
		return m.Sucessful
	}
	return false
}

// 更新用户年龄，性别，区域等等  flags:# birthday:int extend: flags.0?DataJson
type UpdateUserDetailBirthdayReq struct {
	UserId   int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Flags    int32  `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	Birthday int32  `protobuf:"varint,3,opt,name=birthday,proto3" json:"birthday,omitempty"`
	Extend   string `protobuf:"bytes,4,opt,name=extend,proto3" json:"extend,omitempty"`
}

func (m *UpdateUserDetailBirthdayReq) Reset()         { *m = UpdateUserDetailBirthdayReq{} }
func (m *UpdateUserDetailBirthdayReq) String() string { return proto.CompactTextString(m) }
func (*UpdateUserDetailBirthdayReq) ProtoMessage()    {}
func (*UpdateUserDetailBirthdayReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{180}
}

func (m *UpdateUserDetailBirthdayReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateUserDetailBirthdayReq) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *UpdateUserDetailBirthdayReq) GetBirthday() int32 {
	if m != nil {
		return m.Birthday
	}
	return 0
}

func (m *UpdateUserDetailBirthdayReq) GetExtend() string {
	if m != nil {
		return m.Extend
	}
	return ""
}

type UpdateUserDetailBirthdayResult struct {
	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (m *UpdateUserDetailBirthdayResult) Reset()         { *m = UpdateUserDetailBirthdayResult{} }
func (m *UpdateUserDetailBirthdayResult) String() string { return proto.CompactTextString(m) }
func (*UpdateUserDetailBirthdayResult) ProtoMessage()    {}
func (*UpdateUserDetailBirthdayResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{181}
}

func (m *UpdateUserDetailBirthdayResult) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

// flags:# first_name:string flags.0?photo:InputFile sex:int birthday:int extend:flags.1?DataJson = UserFull;
type SetUserDetailReq struct {
	UserId    int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Flags     int32  `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	FirstName string `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	Photo     string `protobuf:"bytes,4,opt,name=photo,proto3" json:"photo,omitempty"`
	Sex       int32  `protobuf:"varint,5,opt,name=sex,proto3" json:"sex,omitempty"`
	Birthday  int32  `protobuf:"varint,6,opt,name=birthday,proto3" json:"birthday,omitempty"`
	Extend    string `protobuf:"bytes,7,opt,name=extend,proto3" json:"extend,omitempty"`
}

func (m *SetUserDetailReq) Reset()                    { *m = SetUserDetailReq{} }
func (m *SetUserDetailReq) String() string            { return proto.CompactTextString(m) }
func (*SetUserDetailReq) ProtoMessage()               {}
func (*SetUserDetailReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{182} }

func (m *SetUserDetailReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SetUserDetailReq) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *SetUserDetailReq) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *SetUserDetailReq) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *SetUserDetailReq) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *SetUserDetailReq) GetBirthday() int32 {
	if m != nil {
		return m.Birthday
	}
	return 0
}

func (m *SetUserDetailReq) GetExtend() string {
	if m != nil {
		return m.Extend
	}
	return ""
}

type SetUserDetailResult struct {
	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (m *SetUserDetailResult) Reset()         { *m = SetUserDetailResult{} }
func (m *SetUserDetailResult) String() string { return proto.CompactTextString(m) }
func (*SetUserDetailResult) ProtoMessage()    {}
func (*SetUserDetailResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{183}
}

func (m *SetUserDetailResult) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

type DeleteReceiveAppliesReq struct {
	SelfId    int32         `protobuf:"varint,1,opt,name=selfId,proto3" json:"selfId,omitempty"`
	UserIdArr []int32       `protobuf:"varint,2,rep,packed,name=userIdArr" json:"userIdArr,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *DeleteReceiveAppliesReq) Reset()         { *m = DeleteReceiveAppliesReq{} }
func (m *DeleteReceiveAppliesReq) String() string { return proto.CompactTextString(m) }
func (*DeleteReceiveAppliesReq) ProtoMessage()    {}
func (*DeleteReceiveAppliesReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{184}
}

func (m *DeleteReceiveAppliesReq) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *DeleteReceiveAppliesReq) GetUserIdArr() []int32 {
	if m != nil {
		return m.UserIdArr
	}
	return nil
}

func (m *DeleteReceiveAppliesReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type DeleteReceiveAppliesResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *DeleteReceiveAppliesResult) Reset()         { *m = DeleteReceiveAppliesResult{} }
func (m *DeleteReceiveAppliesResult) String() string { return proto.CompactTextString(m) }
func (*DeleteReceiveAppliesResult) ProtoMessage()    {}
func (*DeleteReceiveAppliesResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{185}
}

func (m *DeleteReceiveAppliesResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

type UpdateUserTypeLableReq struct {
	UserId    int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	UserType  int32         `protobuf:"varint,2,opt,name=userType,proto3" json:"userType,omitempty"`
	UserLable int32         `protobuf:"varint,3,opt,name=userLable,proto3" json:"userLable,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *UpdateUserTypeLableReq) Reset()         { *m = UpdateUserTypeLableReq{} }
func (m *UpdateUserTypeLableReq) String() string { return proto.CompactTextString(m) }
func (*UpdateUserTypeLableReq) ProtoMessage()    {}
func (*UpdateUserTypeLableReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{186}
}

func (m *UpdateUserTypeLableReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateUserTypeLableReq) GetUserType() int32 {
	if m != nil {
		return m.UserType
	}
	return 0
}

func (m *UpdateUserTypeLableReq) GetUserLable() int32 {
	if m != nil {
		return m.UserLable
	}
	return 0
}

func (m *UpdateUserTypeLableReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type UpdateUserTypeLableResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *UpdateUserTypeLableResult) Reset()         { *m = UpdateUserTypeLableResult{} }
func (m *UpdateUserTypeLableResult) String() string { return proto.CompactTextString(m) }
func (*UpdateUserTypeLableResult) ProtoMessage()    {}
func (*UpdateUserTypeLableResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{187}
}

func (m *UpdateUserTypeLableResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

type CheckSearchUserCountLimitedReq struct {
	UserId int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
}

func (m *CheckSearchUserCountLimitedReq) Reset()         { *m = CheckSearchUserCountLimitedReq{} }
func (m *CheckSearchUserCountLimitedReq) String() string { return proto.CompactTextString(m) }
func (*CheckSearchUserCountLimitedReq) ProtoMessage()    {}
func (*CheckSearchUserCountLimitedReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{188}
}

func (m *CheckSearchUserCountLimitedReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CheckSearchUserCountLimitedReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type CheckSearchUserCountLimitedResult struct {
	IsLimited bool  `protobuf:"varint,1,opt,name=isLimited,proto3" json:"isLimited,omitempty"`
	TimeLeft  int32 `protobuf:"varint,2,opt,name=timeLeft,proto3" json:"timeLeft,omitempty"`
}

func (m *CheckSearchUserCountLimitedResult) Reset()         { *m = CheckSearchUserCountLimitedResult{} }
func (m *CheckSearchUserCountLimitedResult) String() string { return proto.CompactTextString(m) }
func (*CheckSearchUserCountLimitedResult) ProtoMessage()    {}
func (*CheckSearchUserCountLimitedResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{189}
}

func (m *CheckSearchUserCountLimitedResult) GetIsLimited() bool {
	if m != nil {
		return m.IsLimited
	}
	return false
}

func (m *CheckSearchUserCountLimitedResult) GetTimeLeft() int32 {
	if m != nil {
		return m.TimeLeft
	}
	return 0
}

type CheckIsMutualContactReq struct {
	UserId    int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	ContactId int32         `protobuf:"varint,2,opt,name=contactId,proto3" json:"contactId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *CheckIsMutualContactReq) Reset()         { *m = CheckIsMutualContactReq{} }
func (m *CheckIsMutualContactReq) String() string { return proto.CompactTextString(m) }
func (*CheckIsMutualContactReq) ProtoMessage()    {}
func (*CheckIsMutualContactReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{190}
}

func (m *CheckIsMutualContactReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CheckIsMutualContactReq) GetContactId() int32 {
	if m != nil {
		return m.ContactId
	}
	return 0
}

func (m *CheckIsMutualContactReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type CheckIsMutualContactResult struct {
	IsMutualContact bool      `protobuf:"varint,1,opt,name=isMutualContact,proto3" json:"isMutualContact,omitempty"`
	Errorcode       ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *CheckIsMutualContactResult) Reset()         { *m = CheckIsMutualContactResult{} }
func (m *CheckIsMutualContactResult) String() string { return proto.CompactTextString(m) }
func (*CheckIsMutualContactResult) ProtoMessage()    {}
func (*CheckIsMutualContactResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{191}
}

func (m *CheckIsMutualContactResult) GetIsMutualContact() bool {
	if m != nil {
		return m.IsMutualContact
	}
	return false
}

func (m *CheckIsMutualContactResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

type ChangeGroupNameReq struct {
	GroupId int32         `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Title   string        `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	UserId  int32         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ChangeGroupNameReq) Reset()         { *m = ChangeGroupNameReq{} }
func (m *ChangeGroupNameReq) String() string { return proto.CompactTextString(m) }
func (*ChangeGroupNameReq) ProtoMessage()    {}
func (*ChangeGroupNameReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{192}
}

func (m *ChangeGroupNameReq) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *ChangeGroupNameReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ChangeGroupNameReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ChangeGroupNameReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ChangeGroupNameResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *ChangeGroupNameResult) Reset()         { *m = ChangeGroupNameResult{} }
func (m *ChangeGroupNameResult) String() string { return proto.CompactTextString(m) }
func (*ChangeGroupNameResult) ProtoMessage()    {}
func (*ChangeGroupNameResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{193}
}

func (m *ChangeGroupNameResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

type GetContactsV1Req struct {
	UserId int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	KeyId  int64         `protobuf:"varint,2,opt,name=keyId,proto3" json:"keyId,omitempty"`
	Hash   int32         `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetContactsV1Req) Reset()                    { *m = GetContactsV1Req{} }
func (m *GetContactsV1Req) String() string            { return proto.CompactTextString(m) }
func (*GetContactsV1Req) ProtoMessage()               {}
func (*GetContactsV1Req) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{194} }

func (m *GetContactsV1Req) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetContactsV1Req) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *GetContactsV1Req) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *GetContactsV1Req) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type GetContactsV1Result struct {
	ContactArr    []*ContactInfo `protobuf:"bytes,1,rep,name=contactArr" json:"contactArr,omitempty"`
	UserInfoArr   []*UserInfo    `protobuf:"bytes,2,rep,name=userInfoArr" json:"userInfoArr,omitempty"`
	GroupOrderArr []*GroupOrder  `protobuf:"bytes,3,rep,name=groupOrderArr" json:"groupOrderArr,omitempty"`
	SavedCount    int32          `protobuf:"varint,4,opt,name=savedCount,proto3" json:"savedCount,omitempty"`
	Hash          int32          `protobuf:"varint,5,opt,name=hash,proto3" json:"hash,omitempty"`
	Errorcode     ReErrCode      `protobuf:"varint,6,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *GetContactsV1Result) Reset()         { *m = GetContactsV1Result{} }
func (m *GetContactsV1Result) String() string { return proto.CompactTextString(m) }
func (*GetContactsV1Result) ProtoMessage()    {}
func (*GetContactsV1Result) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{195}
}

func (m *GetContactsV1Result) GetContactArr() []*ContactInfo {
	if m != nil {
		return m.ContactArr
	}
	return nil
}

func (m *GetContactsV1Result) GetUserInfoArr() []*UserInfo {
	if m != nil {
		return m.UserInfoArr
	}
	return nil
}

func (m *GetContactsV1Result) GetGroupOrderArr() []*GroupOrder {
	if m != nil {
		return m.GroupOrderArr
	}
	return nil
}

func (m *GetContactsV1Result) GetSavedCount() int32 {
	if m != nil {
		return m.SavedCount
	}
	return 0
}

func (m *GetContactsV1Result) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *GetContactsV1Result) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// @ added by qingsong at 2021.03.17 for virtual pretty number
// rpc SearchPrettyNumber(SearchPrettyNumberReq) returns (SearchPrettyNumberRsp) {}
type SearchPrettyNumberReq struct {
	CountryCode string `protobuf:"bytes,1,opt,name=CountryCode,proto3" json:"CountryCode,omitempty"`
	MatchNumber string `protobuf:"bytes,2,opt,name=MatchNumber,proto3" json:"MatchNumber,omitempty"`
}

func (m *SearchPrettyNumberReq) Reset()         { *m = SearchPrettyNumberReq{} }
func (m *SearchPrettyNumberReq) String() string { return proto.CompactTextString(m) }
func (*SearchPrettyNumberReq) ProtoMessage()    {}
func (*SearchPrettyNumberReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{196}
}

func (m *SearchPrettyNumberReq) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *SearchPrettyNumberReq) GetMatchNumber() string {
	if m != nil {
		return m.MatchNumber
	}
	return ""
}

type SearchPrettyNumberRsp struct {
	Message       string   `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	PrettyNumbers []string `protobuf:"bytes,2,rep,name=PrettyNumbers" json:"PrettyNumbers,omitempty"`
}

func (m *SearchPrettyNumberRsp) Reset()         { *m = SearchPrettyNumberRsp{} }
func (m *SearchPrettyNumberRsp) String() string { return proto.CompactTextString(m) }
func (*SearchPrettyNumberRsp) ProtoMessage()    {}
func (*SearchPrettyNumberRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{197}
}

func (m *SearchPrettyNumberRsp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SearchPrettyNumberRsp) GetPrettyNumbers() []string {
	if m != nil {
		return m.PrettyNumbers
	}
	return nil
}

// rpc ActivePrettyNumber(ActivePrettyNumberReq) returns (ActivePrettyNumberRsp) {}
type ActivePrettyNumberReq struct {
	CountryCode string `protobuf:"bytes,1,opt,name=CountryCode,proto3" json:"CountryCode,omitempty"`
	ActivePhone string `protobuf:"bytes,2,opt,name=ActivePhone,proto3" json:"ActivePhone,omitempty"`
	AssginFlags string `protobuf:"bytes,3,opt,name=AssginFlags,proto3" json:"AssginFlags,omitempty"`
	Operator    int32  `protobuf:"varint,4,opt,name=Operator,proto3" json:"Operator,omitempty"`
}

func (m *ActivePrettyNumberReq) Reset()         { *m = ActivePrettyNumberReq{} }
func (m *ActivePrettyNumberReq) String() string { return proto.CompactTextString(m) }
func (*ActivePrettyNumberReq) ProtoMessage()    {}
func (*ActivePrettyNumberReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{198}
}

func (m *ActivePrettyNumberReq) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *ActivePrettyNumberReq) GetActivePhone() string {
	if m != nil {
		return m.ActivePhone
	}
	return ""
}

func (m *ActivePrettyNumberReq) GetAssginFlags() string {
	if m != nil {
		return m.AssginFlags
	}
	return ""
}

func (m *ActivePrettyNumberReq) GetOperator() int32 {
	if m != nil {
		return m.Operator
	}
	return 0
}

type ActivePrettyNumberRsp struct {
	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (m *ActivePrettyNumberRsp) Reset()         { *m = ActivePrettyNumberRsp{} }
func (m *ActivePrettyNumberRsp) String() string { return proto.CompactTextString(m) }
func (*ActivePrettyNumberRsp) ProtoMessage()    {}
func (*ActivePrettyNumberRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{199}
}

func (m *ActivePrettyNumberRsp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ActivePrettyNumberRsp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// 获取虚拟帐号绑定信息
// rpc GetVirtualBindByPhone(GetVirtualBindByPhoneReq) returns (GetVirtualBindByPhoneRsp) {}
type GetVirtualBindByPhoneReq struct {
	VirtualPhone string `protobuf:"bytes,1,opt,name=VirtualPhone,proto3" json:"VirtualPhone,omitempty"`
}

func (m *GetVirtualBindByPhoneReq) Reset()         { *m = GetVirtualBindByPhoneReq{} }
func (m *GetVirtualBindByPhoneReq) String() string { return proto.CompactTextString(m) }
func (*GetVirtualBindByPhoneReq) ProtoMessage()    {}
func (*GetVirtualBindByPhoneReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{200}
}

func (m *GetVirtualBindByPhoneReq) GetVirtualPhone() string {
	if m != nil {
		return m.VirtualPhone
	}
	return ""
}

type GetVirtualBindByPhoneRsp struct {
	IsVirtualAcct bool   `protobuf:"varint,1,opt,name=IsVirtualAcct,proto3" json:"IsVirtualAcct,omitempty"`
	BindRealPhone string `protobuf:"bytes,2,opt,name=BindRealPhone,proto3" json:"BindRealPhone,omitempty"`
	BindContactId int32  `protobuf:"varint,3,opt,name=BindContactId,proto3" json:"BindContactId,omitempty"`
	AssingFlags   string `protobuf:"bytes,4,opt,name=Assing_flags,json=AssingFlags,proto3" json:"Assing_flags,omitempty"`
}

func (m *GetVirtualBindByPhoneRsp) Reset()         { *m = GetVirtualBindByPhoneRsp{} }
func (m *GetVirtualBindByPhoneRsp) String() string { return proto.CompactTextString(m) }
func (*GetVirtualBindByPhoneRsp) ProtoMessage()    {}
func (*GetVirtualBindByPhoneRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{201}
}

func (m *GetVirtualBindByPhoneRsp) GetIsVirtualAcct() bool {
	if m != nil {
		return m.IsVirtualAcct
	}
	return false
}

func (m *GetVirtualBindByPhoneRsp) GetBindRealPhone() string {
	if m != nil {
		return m.BindRealPhone
	}
	return ""
}

func (m *GetVirtualBindByPhoneRsp) GetBindContactId() int32 {
	if m != nil {
		return m.BindContactId
	}
	return 0
}

func (m *GetVirtualBindByPhoneRsp) GetAssingFlags() string {
	if m != nil {
		return m.AssingFlags
	}
	return ""
}

type GetuserAdminInfoReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (m *GetuserAdminInfoReq) Reset()         { *m = GetuserAdminInfoReq{} }
func (m *GetuserAdminInfoReq) String() string { return proto.CompactTextString(m) }
func (*GetuserAdminInfoReq) ProtoMessage()    {}
func (*GetuserAdminInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{202}
}

func (m *GetuserAdminInfoReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GetuserAdminInfoResp struct {
	IsAdmin bool  `protobuf:"varint,1,opt,name=isAdmin,proto3" json:"isAdmin,omitempty"`
	Level   int32 `protobuf:"varint,2,opt,name=Level,proto3" json:"Level,omitempty"`
}

func (m *GetuserAdminInfoResp) Reset()         { *m = GetuserAdminInfoResp{} }
func (m *GetuserAdminInfoResp) String() string { return proto.CompactTextString(m) }
func (*GetuserAdminInfoResp) ProtoMessage()    {}
func (*GetuserAdminInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{203}
}

func (m *GetuserAdminInfoResp) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

func (m *GetuserAdminInfoResp) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

type AddUserAdminReq struct {
	UserId   int32 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Operator int32 `protobuf:"varint,2,opt,name=operator,proto3" json:"operator,omitempty"`
	Level    int32 `protobuf:"varint,3,opt,name=Level,proto3" json:"Level,omitempty"`
}

func (m *AddUserAdminReq) Reset()                    { *m = AddUserAdminReq{} }
func (m *AddUserAdminReq) String() string            { return proto.CompactTextString(m) }
func (*AddUserAdminReq) ProtoMessage()               {}
func (*AddUserAdminReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{204} }

func (m *AddUserAdminReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *AddUserAdminReq) GetOperator() int32 {
	if m != nil {
		return m.Operator
	}
	return 0
}

func (m *AddUserAdminReq) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

type AddUserAdminResp struct {
	SUcessful bool   `protobuf:"varint,1,opt,name=SUcessful,proto3" json:"SUcessful,omitempty"`
	ErrStr    string `protobuf:"bytes,2,opt,name=ErrStr,proto3" json:"ErrStr,omitempty"`
}

func (m *AddUserAdminResp) Reset()                    { *m = AddUserAdminResp{} }
func (m *AddUserAdminResp) String() string            { return proto.CompactTextString(m) }
func (*AddUserAdminResp) ProtoMessage()               {}
func (*AddUserAdminResp) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{205} }

func (m *AddUserAdminResp) GetSUcessful() bool {
	if m != nil {
		return m.SUcessful
	}
	return false
}

func (m *AddUserAdminResp) GetErrStr() string {
	if m != nil {
		return m.ErrStr
	}
	return ""
}

type BindVitualSendCodeChannelReq struct {
	AssigFlag  string `protobuf:"bytes,1,opt,name=assigFlag,proto3" json:"assigFlag,omitempty"`
	SendId     int32  `protobuf:"varint,2,opt,name=sendId,proto3" json:"sendId,omitempty"`
	ChannelId  int32  `protobuf:"varint,3,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	AccessHash int64  `protobuf:"varint,4,opt,name=Access_hash,json=AccessHash,proto3" json:"Access_hash,omitempty"`
}

func (m *BindVitualSendCodeChannelReq) Reset()         { *m = BindVitualSendCodeChannelReq{} }
func (m *BindVitualSendCodeChannelReq) String() string { return proto.CompactTextString(m) }
func (*BindVitualSendCodeChannelReq) ProtoMessage()    {}
func (*BindVitualSendCodeChannelReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{206}
}

func (m *BindVitualSendCodeChannelReq) GetAssigFlag() string {
	if m != nil {
		return m.AssigFlag
	}
	return ""
}

func (m *BindVitualSendCodeChannelReq) GetSendId() int32 {
	if m != nil {
		return m.SendId
	}
	return 0
}

func (m *BindVitualSendCodeChannelReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *BindVitualSendCodeChannelReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

type BindVitualSendCodeChannelResp struct {
	ErrorCode int32  `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	ErrStr    string `protobuf:"bytes,2,opt,name=ErrStr,proto3" json:"ErrStr,omitempty"`
}

func (m *BindVitualSendCodeChannelResp) Reset()         { *m = BindVitualSendCodeChannelResp{} }
func (m *BindVitualSendCodeChannelResp) String() string { return proto.CompactTextString(m) }
func (*BindVitualSendCodeChannelResp) ProtoMessage()    {}
func (*BindVitualSendCodeChannelResp) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{207}
}

func (m *BindVitualSendCodeChannelResp) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *BindVitualSendCodeChannelResp) GetErrStr() string {
	if m != nil {
		return m.ErrStr
	}
	return ""
}

type GetVitualSendCodeChannelReq struct {
	PhoneNumber string `protobuf:"bytes,1,opt,name=phoneNumber,proto3" json:"phoneNumber,omitempty"`
}

func (m *GetVitualSendCodeChannelReq) Reset()         { *m = GetVitualSendCodeChannelReq{} }
func (m *GetVitualSendCodeChannelReq) String() string { return proto.CompactTextString(m) }
func (*GetVitualSendCodeChannelReq) ProtoMessage()    {}
func (*GetVitualSendCodeChannelReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{208}
}

func (m *GetVitualSendCodeChannelReq) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

type GetVitualSendCodeChannelResp struct {
	IsNeedSendChannel bool  `protobuf:"varint,1,opt,name=isNeedSendChannel,proto3" json:"isNeedSendChannel,omitempty"`
	SendId            int32 `protobuf:"varint,2,opt,name=sendId,proto3" json:"sendId,omitempty"`
	ChannelId         int32 `protobuf:"varint,3,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	AccessHash        int64 `protobuf:"varint,4,opt,name=Access_hash,json=AccessHash,proto3" json:"Access_hash,omitempty"`
}

func (m *GetVitualSendCodeChannelResp) Reset()         { *m = GetVitualSendCodeChannelResp{} }
func (m *GetVitualSendCodeChannelResp) String() string { return proto.CompactTextString(m) }
func (*GetVitualSendCodeChannelResp) ProtoMessage()    {}
func (*GetVitualSendCodeChannelResp) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{209}
}

func (m *GetVitualSendCodeChannelResp) GetIsNeedSendChannel() bool {
	if m != nil {
		return m.IsNeedSendChannel
	}
	return false
}

func (m *GetVitualSendCodeChannelResp) GetSendId() int32 {
	if m != nil {
		return m.SendId
	}
	return 0
}

func (m *GetVitualSendCodeChannelResp) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *GetVitualSendCodeChannelResp) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

type VitualCheckCanAddContactReq struct {
	UserId    int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ContactId int32 `protobuf:"varint,2,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
}

func (m *VitualCheckCanAddContactReq) Reset()         { *m = VitualCheckCanAddContactReq{} }
func (m *VitualCheckCanAddContactReq) String() string { return proto.CompactTextString(m) }
func (*VitualCheckCanAddContactReq) ProtoMessage()    {}
func (*VitualCheckCanAddContactReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{210}
}

func (m *VitualCheckCanAddContactReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *VitualCheckCanAddContactReq) GetContactId() int32 {
	if m != nil {
		return m.ContactId
	}
	return 0
}

type VitualCheckCanAddContactResp struct {
	CanAdd bool `protobuf:"varint,1,opt,name=canAdd,proto3" json:"canAdd,omitempty"`
}

func (m *VitualCheckCanAddContactResp) Reset()         { *m = VitualCheckCanAddContactResp{} }
func (m *VitualCheckCanAddContactResp) String() string { return proto.CompactTextString(m) }
func (*VitualCheckCanAddContactResp) ProtoMessage()    {}
func (*VitualCheckCanAddContactResp) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{211}
}

func (m *VitualCheckCanAddContactResp) GetCanAdd() bool {
	if m != nil {
		return m.CanAdd
	}
	return false
}

type CheckIsPhoneVitulaPhoneReq struct {
	Phone string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (m *CheckIsPhoneVitulaPhoneReq) Reset()         { *m = CheckIsPhoneVitulaPhoneReq{} }
func (m *CheckIsPhoneVitulaPhoneReq) String() string { return proto.CompactTextString(m) }
func (*CheckIsPhoneVitulaPhoneReq) ProtoMessage()    {}
func (*CheckIsPhoneVitulaPhoneReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{212}
}

func (m *CheckIsPhoneVitulaPhoneReq) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

type CheckIsPhoneVitulaPhoneResp struct {
	IsVirtal bool `protobuf:"varint,1,opt,name=isVirtal,proto3" json:"isVirtal,omitempty"`
}

func (m *CheckIsPhoneVitulaPhoneResp) Reset()         { *m = CheckIsPhoneVitulaPhoneResp{} }
func (m *CheckIsPhoneVitulaPhoneResp) String() string { return proto.CompactTextString(m) }
func (*CheckIsPhoneVitulaPhoneResp) ProtoMessage()    {}
func (*CheckIsPhoneVitulaPhoneResp) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{213}
}

func (m *CheckIsPhoneVitulaPhoneResp) GetIsVirtal() bool {
	if m != nil {
		return m.IsVirtal
	}
	return false
}

type CheckIsVitulaPhoneArrReq struct {
	UserId []int32 `protobuf:"varint,1,rep,packed,name=userId" json:"userId,omitempty"`
}

func (m *CheckIsVitulaPhoneArrReq) Reset()         { *m = CheckIsVitulaPhoneArrReq{} }
func (m *CheckIsVitulaPhoneArrReq) String() string { return proto.CompactTextString(m) }
func (*CheckIsVitulaPhoneArrReq) ProtoMessage()    {}
func (*CheckIsVitulaPhoneArrReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{214}
}

func (m *CheckIsVitulaPhoneArrReq) GetUserId() []int32 {
	if m != nil {
		return m.UserId
	}
	return nil
}

type CheckIsVitulaPhoneArrResp struct {
	IsVitual bool `protobuf:"varint,1,opt,name=IsVitual,proto3" json:"IsVitual,omitempty"`
}

func (m *CheckIsVitulaPhoneArrResp) Reset()         { *m = CheckIsVitulaPhoneArrResp{} }
func (m *CheckIsVitulaPhoneArrResp) String() string { return proto.CompactTextString(m) }
func (*CheckIsVitulaPhoneArrResp) ProtoMessage()    {}
func (*CheckIsVitulaPhoneArrResp) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{215}
}

func (m *CheckIsVitulaPhoneArrResp) GetIsVitual() bool {
	if m != nil {
		return m.IsVitual
	}
	return false
}

type SignUpVitualReq struct {
	PhoneNumber    string `protobuf:"bytes,1,opt,name=PhoneNumber,proto3" json:"PhoneNumber,omitempty"`
	PhoneCodeHash  string `protobuf:"bytes,2,opt,name=PhoneCodeHash,proto3" json:"PhoneCodeHash,omitempty"`
	PhoneCode      string `protobuf:"bytes,3,opt,name=PhoneCode,proto3" json:"PhoneCode,omitempty"`
	FirstName      string `protobuf:"bytes,4,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	Sex            int32  `protobuf:"varint,5,opt,name=sex,proto3" json:"sex,omitempty"`
	IsBot          bool   `protobuf:"varint,6,opt,name=is_bot,json=isBot,proto3" json:"is_bot,omitempty"`
	BotInfoVersion int32  `protobuf:"varint,7,opt,name=bot_info_version,json=botInfoVersion,proto3" json:"bot_info_version,omitempty"`
	BotChatHistory bool   `protobuf:"varint,8,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNoChats     bool   `protobuf:"varint,9,opt,name=bot_no_chats,json=botNoChats,proto3" json:"bot_no_chats,omitempty"`
	CountryCode    string `protobuf:"bytes,10,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	LocalPhone     string `protobuf:"bytes,11,opt,name=local_phone,json=localPhone,proto3" json:"local_phone,omitempty"`
	Birthday       int32  `protobuf:"varint,12,opt,name=birthday,proto3" json:"birthday,omitempty"`
	Photo          string `protobuf:"bytes,13,opt,name=photo,proto3" json:"photo,omitempty"`
	ProxyCode      int32  `protobuf:"varint,14,opt,name=proxyCode,proto3" json:"proxyCode,omitempty"`
}

func (m *SignUpVitualReq) Reset()                    { *m = SignUpVitualReq{} }
func (m *SignUpVitualReq) String() string            { return proto.CompactTextString(m) }
func (*SignUpVitualReq) ProtoMessage()               {}
func (*SignUpVitualReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{216} }

func (m *SignUpVitualReq) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *SignUpVitualReq) GetPhoneCodeHash() string {
	if m != nil {
		return m.PhoneCodeHash
	}
	return ""
}

func (m *SignUpVitualReq) GetPhoneCode() string {
	if m != nil {
		return m.PhoneCode
	}
	return ""
}

func (m *SignUpVitualReq) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *SignUpVitualReq) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *SignUpVitualReq) GetIsBot() bool {
	if m != nil {
		return m.IsBot
	}
	return false
}

func (m *SignUpVitualReq) GetBotInfoVersion() int32 {
	if m != nil {
		return m.BotInfoVersion
	}
	return 0
}

func (m *SignUpVitualReq) GetBotChatHistory() bool {
	if m != nil {
		return m.BotChatHistory
	}
	return false
}

func (m *SignUpVitualReq) GetBotNoChats() bool {
	if m != nil {
		return m.BotNoChats
	}
	return false
}

func (m *SignUpVitualReq) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *SignUpVitualReq) GetLocalPhone() string {
	if m != nil {
		return m.LocalPhone
	}
	return ""
}

func (m *SignUpVitualReq) GetBirthday() int32 {
	if m != nil {
		return m.Birthday
	}
	return 0
}

func (m *SignUpVitualReq) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *SignUpVitualReq) GetProxyCode() int32 {
	if m != nil {
		return m.ProxyCode
	}
	return 0
}

type SignUpVitualResp struct {
	Code     SignUpVitualResp_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=pbimuinfoserver.SignUpVitualResp_ResultCode" json:"code,omitempty"`
	UserInfo *UserInfo                   `protobuf:"bytes,2,opt,name=userInfo" json:"userInfo,omitempty"`
}

func (m *SignUpVitualResp) Reset()                    { *m = SignUpVitualResp{} }
func (m *SignUpVitualResp) String() string            { return proto.CompactTextString(m) }
func (*SignUpVitualResp) ProtoMessage()               {}
func (*SignUpVitualResp) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{217} }

func (m *SignUpVitualResp) GetCode() SignUpVitualResp_ResultCode {
	if m != nil {
		return m.Code
	}
	return SignUpVitualResp_Success
}

func (m *SignUpVitualResp) GetUserInfo() *UserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

// rpc VirtualBindRealPhone(VirtualBindRealPhoneReq) returns (VirtualBindRealPhoneRsp) {}
type VirtualBindRealPhoneReq struct {
	VPhone string `protobuf:"bytes,1,opt,name=VPhone,proto3" json:"VPhone,omitempty"`
	RPhone string `protobuf:"bytes,2,opt,name=RPhone,proto3" json:"RPhone,omitempty"`
}

func (m *VirtualBindRealPhoneReq) Reset()         { *m = VirtualBindRealPhoneReq{} }
func (m *VirtualBindRealPhoneReq) String() string { return proto.CompactTextString(m) }
func (*VirtualBindRealPhoneReq) ProtoMessage()    {}
func (*VirtualBindRealPhoneReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{218}
}

func (m *VirtualBindRealPhoneReq) GetVPhone() string {
	if m != nil {
		return m.VPhone
	}
	return ""
}

func (m *VirtualBindRealPhoneReq) GetRPhone() string {
	if m != nil {
		return m.RPhone
	}
	return ""
}

type VirtualBindRealPhoneRsp struct {
	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (m *VirtualBindRealPhoneRsp) Reset()         { *m = VirtualBindRealPhoneRsp{} }
func (m *VirtualBindRealPhoneRsp) String() string { return proto.CompactTextString(m) }
func (*VirtualBindRealPhoneRsp) ProtoMessage()    {}
func (*VirtualBindRealPhoneRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{219}
}

func (m *VirtualBindRealPhoneRsp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *VirtualBindRealPhoneRsp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// rpc VirtualAddContactByPhone(VirtualAddContactByPhoneReq) returns (VirtualAddContactByPhoneRsp) {}
type VirtualAddContactByPhoneReq struct {
	VPhone string `protobuf:"bytes,1,opt,name=VPhone,proto3" json:"VPhone,omitempty"`
	RPhone string `protobuf:"bytes,2,opt,name=RPhone,proto3" json:"RPhone,omitempty"`
}

func (m *VirtualAddContactByPhoneReq) Reset()         { *m = VirtualAddContactByPhoneReq{} }
func (m *VirtualAddContactByPhoneReq) String() string { return proto.CompactTextString(m) }
func (*VirtualAddContactByPhoneReq) ProtoMessage()    {}
func (*VirtualAddContactByPhoneReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{220}
}

func (m *VirtualAddContactByPhoneReq) GetVPhone() string {
	if m != nil {
		return m.VPhone
	}
	return ""
}

func (m *VirtualAddContactByPhoneReq) GetRPhone() string {
	if m != nil {
		return m.RPhone
	}
	return ""
}

type VirtualAddContactByPhoneRsp struct {
	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (m *VirtualAddContactByPhoneRsp) Reset()         { *m = VirtualAddContactByPhoneRsp{} }
func (m *VirtualAddContactByPhoneRsp) String() string { return proto.CompactTextString(m) }
func (*VirtualAddContactByPhoneRsp) ProtoMessage()    {}
func (*VirtualAddContactByPhoneRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{221}
}

func (m *VirtualAddContactByPhoneRsp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *VirtualAddContactByPhoneRsp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type JoinGroupCheckReq struct {
	InviterId int32   `protobuf:"varint,1,opt,name=InviterId,proto3" json:"InviterId,omitempty"`
	MemberIds []int32 `protobuf:"varint,2,rep,packed,name=MemberIds" json:"MemberIds,omitempty"`
}

func (m *JoinGroupCheckReq) Reset()         { *m = JoinGroupCheckReq{} }
func (m *JoinGroupCheckReq) String() string { return proto.CompactTextString(m) }
func (*JoinGroupCheckReq) ProtoMessage()    {}
func (*JoinGroupCheckReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{222}
}

func (m *JoinGroupCheckReq) GetInviterId() int32 {
	if m != nil {
		return m.InviterId
	}
	return 0
}

func (m *JoinGroupCheckReq) GetMemberIds() []int32 {
	if m != nil {
		return m.MemberIds
	}
	return nil
}

type JoinGroupCheckRsp struct {
	CanJoinIds []int32 `protobuf:"varint,1,rep,packed,name=CanJoinIds" json:"CanJoinIds,omitempty"`
}

func (m *JoinGroupCheckRsp) Reset()         { *m = JoinGroupCheckRsp{} }
func (m *JoinGroupCheckRsp) String() string { return proto.CompactTextString(m) }
func (*JoinGroupCheckRsp) ProtoMessage()    {}
func (*JoinGroupCheckRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{223}
}

func (m *JoinGroupCheckRsp) GetCanJoinIds() []int32 {
	if m != nil {
		return m.CanJoinIds
	}
	return nil
}

type CheckIsVitulaPhoneReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (m *CheckIsVitulaPhoneReq) Reset()         { *m = CheckIsVitulaPhoneReq{} }
func (m *CheckIsVitulaPhoneReq) String() string { return proto.CompactTextString(m) }
func (*CheckIsVitulaPhoneReq) ProtoMessage()    {}
func (*CheckIsVitulaPhoneReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{224}
}

func (m *CheckIsVitulaPhoneReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type CheckIsVitulaPhoneResp struct {
	IsVitulal bool `protobuf:"varint,1,opt,name=isVitulal,proto3" json:"isVitulal,omitempty"`
}

func (m *CheckIsVitulaPhoneResp) Reset()         { *m = CheckIsVitulaPhoneResp{} }
func (m *CheckIsVitulaPhoneResp) String() string { return proto.CompactTextString(m) }
func (*CheckIsVitulaPhoneResp) ProtoMessage()    {}
func (*CheckIsVitulaPhoneResp) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{225}
}

func (m *CheckIsVitulaPhoneResp) GetIsVitulal() bool {
	if m != nil {
		return m.IsVitulal
	}
	return false
}

type VirtulPhoneInfo struct {
	UserId      int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PhoneNumber string `protobuf:"bytes,2,opt,name=phoneNumber,proto3" json:"phoneNumber,omitempty"`
}

func (m *VirtulPhoneInfo) Reset()                    { *m = VirtulPhoneInfo{} }
func (m *VirtulPhoneInfo) String() string            { return proto.CompactTextString(m) }
func (*VirtulPhoneInfo) ProtoMessage()               {}
func (*VirtulPhoneInfo) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{226} }

func (m *VirtulPhoneInfo) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *VirtulPhoneInfo) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

type GetAllVitualUsersByFlagsReq struct {
	AssginFlags string `protobuf:"bytes,1,opt,name=assgin_flags,json=assginFlags,proto3" json:"assgin_flags,omitempty"`
}

func (m *GetAllVitualUsersByFlagsReq) Reset()         { *m = GetAllVitualUsersByFlagsReq{} }
func (m *GetAllVitualUsersByFlagsReq) String() string { return proto.CompactTextString(m) }
func (*GetAllVitualUsersByFlagsReq) ProtoMessage()    {}
func (*GetAllVitualUsersByFlagsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{227}
}

func (m *GetAllVitualUsersByFlagsReq) GetAssginFlags() string {
	if m != nil {
		return m.AssginFlags
	}
	return ""
}

type GetAllVitualUsersByFlagsResp struct {
	Sucess bool               `protobuf:"varint,1,opt,name=sucess,proto3" json:"sucess,omitempty"`
	Infos  []*VirtulPhoneInfo `protobuf:"bytes,2,rep,name=infos" json:"infos,omitempty"`
}

func (m *GetAllVitualUsersByFlagsResp) Reset()         { *m = GetAllVitualUsersByFlagsResp{} }
func (m *GetAllVitualUsersByFlagsResp) String() string { return proto.CompactTextString(m) }
func (*GetAllVitualUsersByFlagsResp) ProtoMessage()    {}
func (*GetAllVitualUsersByFlagsResp) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{228}
}

func (m *GetAllVitualUsersByFlagsResp) GetSucess() bool {
	if m != nil {
		return m.Sucess
	}
	return false
}

func (m *GetAllVitualUsersByFlagsResp) GetInfos() []*VirtulPhoneInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

type GetVitulPhoneNumbersReq struct {
	Number      int32  `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	AdminId     int32  `protobuf:"varint,2,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`
	AssginFlags string `protobuf:"bytes,3,opt,name=assgin_flags,json=assginFlags,proto3" json:"assgin_flags,omitempty"`
	UtilDate    int64  `protobuf:"varint,4,opt,name=util_date,json=utilDate,proto3" json:"util_date,omitempty"`
	CountryCode string `protobuf:"bytes,5,opt,name=countryCode,proto3" json:"countryCode,omitempty"`
}

func (m *GetVitulPhoneNumbersReq) Reset()         { *m = GetVitulPhoneNumbersReq{} }
func (m *GetVitulPhoneNumbersReq) String() string { return proto.CompactTextString(m) }
func (*GetVitulPhoneNumbersReq) ProtoMessage()    {}
func (*GetVitulPhoneNumbersReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{229}
}

func (m *GetVitulPhoneNumbersReq) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *GetVitulPhoneNumbersReq) GetAdminId() int32 {
	if m != nil {
		return m.AdminId
	}
	return 0
}

func (m *GetVitulPhoneNumbersReq) GetAssginFlags() string {
	if m != nil {
		return m.AssginFlags
	}
	return ""
}

func (m *GetVitulPhoneNumbersReq) GetUtilDate() int64 {
	if m != nil {
		return m.UtilDate
	}
	return 0
}

func (m *GetVitulPhoneNumbersReq) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

type GetVitulPhoneNumbersResp struct {
	ErrCode      int32    `protobuf:"varint,1,opt,name=errCode,proto3" json:"errCode,omitempty"`
	ErrStr       string   `protobuf:"bytes,2,opt,name=errStr,proto3" json:"errStr,omitempty"`
	Phonenumbers []string `protobuf:"bytes,3,rep,name=phonenumbers" json:"phonenumbers,omitempty"`
}

func (m *GetVitulPhoneNumbersResp) Reset()         { *m = GetVitulPhoneNumbersResp{} }
func (m *GetVitulPhoneNumbersResp) String() string { return proto.CompactTextString(m) }
func (*GetVitulPhoneNumbersResp) ProtoMessage()    {}
func (*GetVitulPhoneNumbersResp) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{230}
}

func (m *GetVitulPhoneNumbersResp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *GetVitulPhoneNumbersResp) GetErrStr() string {
	if m != nil {
		return m.ErrStr
	}
	return ""
}

func (m *GetVitulPhoneNumbersResp) GetPhonenumbers() []string {
	if m != nil {
		return m.Phonenumbers
	}
	return nil
}

type GenVitulaPhoneNumbersReq struct {
	CountryCode string `protobuf:"bytes,1,opt,name=CountryCode,proto3" json:"CountryCode,omitempty"`
}

func (m *GenVitulaPhoneNumbersReq) Reset()         { *m = GenVitulaPhoneNumbersReq{} }
func (m *GenVitulaPhoneNumbersReq) String() string { return proto.CompactTextString(m) }
func (*GenVitulaPhoneNumbersReq) ProtoMessage()    {}
func (*GenVitulaPhoneNumbersReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{231}
}

func (m *GenVitulaPhoneNumbersReq) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

type GenVitulaPhoneNumbersResp struct {
	ErrCode int32  `protobuf:"varint,1,opt,name=errCode,proto3" json:"errCode,omitempty"`
	ErrStr  string `protobuf:"bytes,2,opt,name=errStr,proto3" json:"errStr,omitempty"`
}

func (m *GenVitulaPhoneNumbersResp) Reset()         { *m = GenVitulaPhoneNumbersResp{} }
func (m *GenVitulaPhoneNumbersResp) String() string { return proto.CompactTextString(m) }
func (*GenVitulaPhoneNumbersResp) ProtoMessage()    {}
func (*GenVitulaPhoneNumbersResp) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{232}
}

func (m *GenVitulaPhoneNumbersResp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *GenVitulaPhoneNumbersResp) GetErrStr() string {
	if m != nil {
		return m.ErrStr
	}
	return ""
}

// 用户 vip 信息
type UserCdnVipInfo struct {
	State   int32 `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	Level   int32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	BgnTime int32 `protobuf:"varint,3,opt,name=BgnTime,proto3" json:"BgnTime,omitempty"`
	EndTime int32 `protobuf:"varint,4,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	AutoPay bool  `protobuf:"varint,5,opt,name=AutoPay,proto3" json:"AutoPay,omitempty"`
}

func (m *UserCdnVipInfo) Reset()                    { *m = UserCdnVipInfo{} }
func (m *UserCdnVipInfo) String() string            { return proto.CompactTextString(m) }
func (*UserCdnVipInfo) ProtoMessage()               {}
func (*UserCdnVipInfo) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{233} }

func (m *UserCdnVipInfo) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *UserCdnVipInfo) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *UserCdnVipInfo) GetBgnTime() int32 {
	if m != nil {
		return m.BgnTime
	}
	return 0
}

func (m *UserCdnVipInfo) GetEndTime() int32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *UserCdnVipInfo) GetAutoPay() bool {
	if m != nil {
		return m.AutoPay
	}
	return false
}

// 用户 vip 支付信息
type UserCdnPayInfo struct {
	PayId int64 `protobuf:"varint,1,opt,name=PayId,proto3" json:"PayId,omitempty"`
	//    int32   UserId = 2; // 用户ID
	//    int32   Month = 3;
	//    int32   Price = 4;  // 支付单价
	//    int32   state = 5;
	PayAmt  int32 `protobuf:"varint,2,opt,name=PayAmt,proto3" json:"PayAmt,omitempty"`
	BgnTime int32 `protobuf:"varint,3,opt,name=BgnTime,proto3" json:"BgnTime,omitempty"`
	EndTime int32 `protobuf:"varint,4,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
}

func (m *UserCdnPayInfo) Reset()                    { *m = UserCdnPayInfo{} }
func (m *UserCdnPayInfo) String() string            { return proto.CompactTextString(m) }
func (*UserCdnPayInfo) ProtoMessage()               {}
func (*UserCdnPayInfo) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{234} }

func (m *UserCdnPayInfo) GetPayId() int64 {
	if m != nil {
		return m.PayId
	}
	return 0
}

func (m *UserCdnPayInfo) GetPayAmt() int32 {
	if m != nil {
		return m.PayAmt
	}
	return 0
}

func (m *UserCdnPayInfo) GetBgnTime() int32 {
	if m != nil {
		return m.BgnTime
	}
	return 0
}

func (m *UserCdnPayInfo) GetEndTime() int32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

// @ added by qingsong at 2021.03.03 for buy CDN VIP.
// rpc BuyCdnVip(BuyCdnVipReq) returns (BuyCdnVipRsp) {}
type BuyCdnVipReq struct {
	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	VipLvl int32         `protobuf:"varint,2,opt,name=VipLvl,proto3" json:"VipLvl,omitempty"`
	Months int32         `protobuf:"varint,3,opt,name=Months,proto3" json:"Months,omitempty"`
	Passwd string        `protobuf:"bytes,4,opt,name=Passwd,proto3" json:"Passwd,omitempty"`
	Debugs *pbcomm.Debug `protobuf:"bytes,6,opt,name=Debugs" json:"Debugs,omitempty"`
}

func (m *BuyCdnVipReq) Reset()                    { *m = BuyCdnVipReq{} }
func (m *BuyCdnVipReq) String() string            { return proto.CompactTextString(m) }
func (*BuyCdnVipReq) ProtoMessage()               {}
func (*BuyCdnVipReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{235} }

func (m *BuyCdnVipReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *BuyCdnVipReq) GetVipLvl() int32 {
	if m != nil {
		return m.VipLvl
	}
	return 0
}

func (m *BuyCdnVipReq) GetMonths() int32 {
	if m != nil {
		return m.Months
	}
	return 0
}

func (m *BuyCdnVipReq) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

func (m *BuyCdnVipReq) GetDebugs() *pbcomm.Debug {
	if m != nil {
		return m.Debugs
	}
	return nil
}

type BuyCdnVipRsp struct {
	RetCode int32           `protobuf:"varint,1,opt,name=RetCode,proto3" json:"RetCode,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	VipInfo *UserCdnVipInfo `protobuf:"bytes,3,opt,name=VipInfo" json:"VipInfo,omitempty"`
}

func (m *BuyCdnVipRsp) Reset()                    { *m = BuyCdnVipRsp{} }
func (m *BuyCdnVipRsp) String() string            { return proto.CompactTextString(m) }
func (*BuyCdnVipRsp) ProtoMessage()               {}
func (*BuyCdnVipRsp) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{236} }

func (m *BuyCdnVipRsp) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *BuyCdnVipRsp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *BuyCdnVipRsp) GetVipInfo() *UserCdnVipInfo {
	if m != nil {
		return m.VipInfo
	}
	return nil
}

// @ added by qingsong at 2021.03.03 for set CDN VIP auto renew.
// rpc SetCdnVipAutoPay(SetCdnVipAutoPayReq) returns (SetCdnVipAutoPayRsp) {}
type SetCdnVipAutoPayReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	IsOpen bool  `protobuf:"varint,2,opt,name=IsOpen,proto3" json:"IsOpen,omitempty"`
}

func (m *SetCdnVipAutoPayReq) Reset()         { *m = SetCdnVipAutoPayReq{} }
func (m *SetCdnVipAutoPayReq) String() string { return proto.CompactTextString(m) }
func (*SetCdnVipAutoPayReq) ProtoMessage()    {}
func (*SetCdnVipAutoPayReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{237}
}

func (m *SetCdnVipAutoPayReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SetCdnVipAutoPayReq) GetIsOpen() bool {
	if m != nil {
		return m.IsOpen
	}
	return false
}

type SetCdnVipAutoPayRsp struct {
	Success bool            `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	VipInfo *UserCdnVipInfo `protobuf:"bytes,3,opt,name=VipInfo" json:"VipInfo,omitempty"`
}

func (m *SetCdnVipAutoPayRsp) Reset()         { *m = SetCdnVipAutoPayRsp{} }
func (m *SetCdnVipAutoPayRsp) String() string { return proto.CompactTextString(m) }
func (*SetCdnVipAutoPayRsp) ProtoMessage()    {}
func (*SetCdnVipAutoPayRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{238}
}

func (m *SetCdnVipAutoPayRsp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *SetCdnVipAutoPayRsp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SetCdnVipAutoPayRsp) GetVipInfo() *UserCdnVipInfo {
	if m != nil {
		return m.VipInfo
	}
	return nil
}

// @ added by qingsong at 2021.03.03 for get user cdn-vip pay list.
// rpc GetUserCdnPayList(GetUserCdnPayListReq) returns (GetUserCdnPayListRsp) {}
type GetUserCdnPayListReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (m *GetUserCdnPayListReq) Reset()         { *m = GetUserCdnPayListReq{} }
func (m *GetUserCdnPayListReq) String() string { return proto.CompactTextString(m) }
func (*GetUserCdnPayListReq) ProtoMessage()    {}
func (*GetUserCdnPayListReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{239}
}

func (m *GetUserCdnPayListReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GetUserCdnPayListRsp struct {
	RetCode int32             `protobuf:"varint,1,opt,name=RetCode,proto3" json:"RetCode,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	VipInfo *UserCdnVipInfo   `protobuf:"bytes,3,opt,name=VipInfo" json:"VipInfo,omitempty"`
	PayList []*UserCdnPayInfo `protobuf:"bytes,4,rep,name=PayList" json:"PayList,omitempty"`
}

func (m *GetUserCdnPayListRsp) Reset()         { *m = GetUserCdnPayListRsp{} }
func (m *GetUserCdnPayListRsp) String() string { return proto.CompactTextString(m) }
func (*GetUserCdnPayListRsp) ProtoMessage()    {}
func (*GetUserCdnPayListRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{240}
}

func (m *GetUserCdnPayListRsp) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *GetUserCdnPayListRsp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *GetUserCdnPayListRsp) GetVipInfo() *UserCdnVipInfo {
	if m != nil {
		return m.VipInfo
	}
	return nil
}

func (m *GetUserCdnPayListRsp) GetPayList() []*UserCdnPayInfo {
	if m != nil {
		return m.PayList
	}
	return nil
}

// @ added by qingsong at 2021.03.03 for get user cdn-vip info.
// rpc GetUserCdnVipInfo(GetUserCdnVipInfoReq) returns (GetUserCdnVipInfoRsp) {}
type GetUserCdnVipInfoReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (m *GetUserCdnVipInfoReq) Reset()         { *m = GetUserCdnVipInfoReq{} }
func (m *GetUserCdnVipInfoReq) String() string { return proto.CompactTextString(m) }
func (*GetUserCdnVipInfoReq) ProtoMessage()    {}
func (*GetUserCdnVipInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{241}
}

func (m *GetUserCdnVipInfoReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GetUserCdnVipInfoRsp struct {
	RetCode int32           `protobuf:"varint,1,opt,name=RetCode,proto3" json:"RetCode,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	VipInfo *UserCdnVipInfo `protobuf:"bytes,3,opt,name=VipInfo" json:"VipInfo,omitempty"`
}

func (m *GetUserCdnVipInfoRsp) Reset()         { *m = GetUserCdnVipInfoRsp{} }
func (m *GetUserCdnVipInfoRsp) String() string { return proto.CompactTextString(m) }
func (*GetUserCdnVipInfoRsp) ProtoMessage()    {}
func (*GetUserCdnVipInfoRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{242}
}

func (m *GetUserCdnVipInfoRsp) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *GetUserCdnVipInfoRsp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *GetUserCdnVipInfoRsp) GetVipInfo() *UserCdnVipInfo {
	if m != nil {
		return m.VipInfo
	}
	return nil
}

// 检查用户是否是 vip
type ChkCdnVipReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (m *ChkCdnVipReq) Reset()                    { *m = ChkCdnVipReq{} }
func (m *ChkCdnVipReq) String() string            { return proto.CompactTextString(m) }
func (*ChkCdnVipReq) ProtoMessage()               {}
func (*ChkCdnVipReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{243} }

func (m *ChkCdnVipReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type ChkCdnVipRsp struct {
	IsVip bool `protobuf:"varint,1,opt,name=IsVip,proto3" json:"IsVip,omitempty"`
}

func (m *ChkCdnVipRsp) Reset()                    { *m = ChkCdnVipRsp{} }
func (m *ChkCdnVipRsp) String() string            { return proto.CompactTextString(m) }
func (*ChkCdnVipRsp) ProtoMessage()               {}
func (*ChkCdnVipRsp) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{244} }

func (m *ChkCdnVipRsp) GetIsVip() bool {
	if m != nil {
		return m.IsVip
	}
	return false
}

type AddCdnVipReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	VipLvl int32 `protobuf:"varint,2,opt,name=VipLvl,proto3" json:"VipLvl,omitempty"`
	Months int32 `protobuf:"varint,3,opt,name=Months,proto3" json:"Months,omitempty"`
}

func (m *AddCdnVipReq) Reset()                    { *m = AddCdnVipReq{} }
func (m *AddCdnVipReq) String() string            { return proto.CompactTextString(m) }
func (*AddCdnVipReq) ProtoMessage()               {}
func (*AddCdnVipReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{245} }

func (m *AddCdnVipReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *AddCdnVipReq) GetVipLvl() int32 {
	if m != nil {
		return m.VipLvl
	}
	return 0
}

func (m *AddCdnVipReq) GetMonths() int32 {
	if m != nil {
		return m.Months
	}
	return 0
}

type AddCdnVipRsp struct {
	Sucess  bool   `protobuf:"varint,1,opt,name=Sucess,proto3" json:"Sucess,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (m *AddCdnVipRsp) Reset()                    { *m = AddCdnVipRsp{} }
func (m *AddCdnVipRsp) String() string            { return proto.CompactTextString(m) }
func (*AddCdnVipRsp) ProtoMessage()               {}
func (*AddCdnVipRsp) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{246} }

func (m *AddCdnVipRsp) GetSucess() bool {
	if m != nil {
		return m.Sucess
	}
	return false
}

func (m *AddCdnVipRsp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// 检测是否是对方是否是自己的联系人
type CheckIsSelfContactReq struct {
	SelfId int32         `protobuf:"varint,1,opt,name=selfId,proto3" json:"selfId,omitempty"`
	UserId int32         `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *CheckIsSelfContactReq) Reset()         { *m = CheckIsSelfContactReq{} }
func (m *CheckIsSelfContactReq) String() string { return proto.CompactTextString(m) }
func (*CheckIsSelfContactReq) ProtoMessage()    {}
func (*CheckIsSelfContactReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{247}
}

func (m *CheckIsSelfContactReq) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *CheckIsSelfContactReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CheckIsSelfContactReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 检测是否是自己是否是对方的联系人的返回结果
type CheckIsSelfContactResult struct {
	IsSelfContact bool      `protobuf:"varint,1,opt,name=IsSelfContact,proto3" json:"IsSelfContact,omitempty"`
	Errorcode     ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *CheckIsSelfContactResult) Reset()         { *m = CheckIsSelfContactResult{} }
func (m *CheckIsSelfContactResult) String() string { return proto.CompactTextString(m) }
func (*CheckIsSelfContactResult) ProtoMessage()    {}
func (*CheckIsSelfContactResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{248}
}

func (m *CheckIsSelfContactResult) GetIsSelfContact() bool {
	if m != nil {
		return m.IsSelfContact
	}
	return false
}

func (m *CheckIsSelfContactResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

type GetPhoneBookInfosReq struct {
	KeyId           int64               `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId          int32               `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PhoneContactArr []*PhoneBookContact `protobuf:"bytes,3,rep,name=phoneContactArr" json:"phoneContactArr,omitempty"`
}

func (m *GetPhoneBookInfosReq) Reset()         { *m = GetPhoneBookInfosReq{} }
func (m *GetPhoneBookInfosReq) String() string { return proto.CompactTextString(m) }
func (*GetPhoneBookInfosReq) ProtoMessage()    {}
func (*GetPhoneBookInfosReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{249}
}

func (m *GetPhoneBookInfosReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *GetPhoneBookInfosReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetPhoneBookInfosReq) GetPhoneContactArr() []*PhoneBookContact {
	if m != nil {
		return m.PhoneContactArr
	}
	return nil
}

type GetPhoneBookInfosResult struct {
	ReCode GetPhoneBookInfosResult_ResultCode `protobuf:"varint,1,opt,name=reCode,proto3,enum=pbimuinfoserver.GetPhoneBookInfosResult_ResultCode" json:"reCode,omitempty"`
	Uinfo  []*UserInfo                        `protobuf:"bytes,2,rep,name=Uinfo" json:"Uinfo,omitempty"`
}

func (m *GetPhoneBookInfosResult) Reset()         { *m = GetPhoneBookInfosResult{} }
func (m *GetPhoneBookInfosResult) String() string { return proto.CompactTextString(m) }
func (*GetPhoneBookInfosResult) ProtoMessage()    {}
func (*GetPhoneBookInfosResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{250}
}

func (m *GetPhoneBookInfosResult) GetReCode() GetPhoneBookInfosResult_ResultCode {
	if m != nil {
		return m.ReCode
	}
	return GetPhoneBookInfosResult_Success
}

func (m *GetPhoneBookInfosResult) GetUinfo() []*UserInfo {
	if m != nil {
		return m.Uinfo
	}
	return nil
}

type AddLoginDayReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *AddLoginDayReq) Reset()                    { *m = AddLoginDayReq{} }
func (m *AddLoginDayReq) String() string            { return proto.CompactTextString(m) }
func (*AddLoginDayReq) ProtoMessage()               {}
func (*AddLoginDayReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{251} }

func (m *AddLoginDayReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type AddLoginDayResult struct {
	ErrorCode AddLoginDayResult_ResultCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.AddLoginDayResult_ResultCode" json:"ErrorCode,omitempty"`
	Result    bool                         `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *AddLoginDayResult) Reset()         { *m = AddLoginDayResult{} }
func (m *AddLoginDayResult) String() string { return proto.CompactTextString(m) }
func (*AddLoginDayResult) ProtoMessage()    {}
func (*AddLoginDayResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{252}
}

func (m *AddLoginDayResult) GetErrorCode() AddLoginDayResult_ResultCode {
	if m != nil {
		return m.ErrorCode
	}
	return AddLoginDayResult_Success
}

func (m *AddLoginDayResult) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type CheckDigitalWalletSwitchReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *CheckDigitalWalletSwitchReq) Reset()         { *m = CheckDigitalWalletSwitchReq{} }
func (m *CheckDigitalWalletSwitchReq) String() string { return proto.CompactTextString(m) }
func (*CheckDigitalWalletSwitchReq) ProtoMessage()    {}
func (*CheckDigitalWalletSwitchReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{253}
}

func (m *CheckDigitalWalletSwitchReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type CheckDigitalWalletSwitchResult struct {
	ErrorCode CheckDigitalWalletSwitchResult_ResultCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.CheckDigitalWalletSwitchResult_ResultCode" json:"ErrorCode,omitempty"`
	Result    bool                                      `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *CheckDigitalWalletSwitchResult) Reset()         { *m = CheckDigitalWalletSwitchResult{} }
func (m *CheckDigitalWalletSwitchResult) String() string { return proto.CompactTextString(m) }
func (*CheckDigitalWalletSwitchResult) ProtoMessage()    {}
func (*CheckDigitalWalletSwitchResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{254}
}

func (m *CheckDigitalWalletSwitchResult) GetErrorCode() CheckDigitalWalletSwitchResult_ResultCode {
	if m != nil {
		return m.ErrorCode
	}
	return CheckDigitalWalletSwitchResult_Success
}

func (m *CheckDigitalWalletSwitchResult) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type RecvLockerAddUserIdReq struct {
	UserId uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *RecvLockerAddUserIdReq) Reset()         { *m = RecvLockerAddUserIdReq{} }
func (m *RecvLockerAddUserIdReq) String() string { return proto.CompactTextString(m) }
func (*RecvLockerAddUserIdReq) ProtoMessage()    {}
func (*RecvLockerAddUserIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{255}
}

func (m *RecvLockerAddUserIdReq) GetUserId() uint32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type RecvLockerAddUserIdResult struct {
	ErrorCode RecvLockerAddUserIdResult_ResultCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.RecvLockerAddUserIdResult_ResultCode" json:"ErrorCode,omitempty"`
}

func (m *RecvLockerAddUserIdResult) Reset()         { *m = RecvLockerAddUserIdResult{} }
func (m *RecvLockerAddUserIdResult) String() string { return proto.CompactTextString(m) }
func (*RecvLockerAddUserIdResult) ProtoMessage()    {}
func (*RecvLockerAddUserIdResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{256}
}

func (m *RecvLockerAddUserIdResult) GetErrorCode() RecvLockerAddUserIdResult_ResultCode {
	if m != nil {
		return m.ErrorCode
	}
	return RecvLockerAddUserIdResult_Success
}

type RecvLockerDelUserIdReq struct {
	UserId uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *RecvLockerDelUserIdReq) Reset()         { *m = RecvLockerDelUserIdReq{} }
func (m *RecvLockerDelUserIdReq) String() string { return proto.CompactTextString(m) }
func (*RecvLockerDelUserIdReq) ProtoMessage()    {}
func (*RecvLockerDelUserIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{257}
}

func (m *RecvLockerDelUserIdReq) GetUserId() uint32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type RecvLockerDelUserIdResult struct {
	ErrorCode RecvLockerDelUserIdResult_ResultCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.RecvLockerDelUserIdResult_ResultCode" json:"ErrorCode,omitempty"`
}

func (m *RecvLockerDelUserIdResult) Reset()         { *m = RecvLockerDelUserIdResult{} }
func (m *RecvLockerDelUserIdResult) String() string { return proto.CompactTextString(m) }
func (*RecvLockerDelUserIdResult) ProtoMessage()    {}
func (*RecvLockerDelUserIdResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{258}
}

func (m *RecvLockerDelUserIdResult) GetErrorCode() RecvLockerDelUserIdResult_ResultCode {
	if m != nil {
		return m.ErrorCode
	}
	return RecvLockerDelUserIdResult_Success
}

type RecvLockerGetUserIdsReq struct {
}

func (m *RecvLockerGetUserIdsReq) Reset()         { *m = RecvLockerGetUserIdsReq{} }
func (m *RecvLockerGetUserIdsReq) String() string { return proto.CompactTextString(m) }
func (*RecvLockerGetUserIdsReq) ProtoMessage()    {}
func (*RecvLockerGetUserIdsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{259}
}

type RecvLockerGetUserIdsResult struct {
	ErrorCode RecvLockerGetUserIdsResult_ResultCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.RecvLockerGetUserIdsResult_ResultCode" json:"ErrorCode,omitempty"`
	UserId    []uint32                              `protobuf:"varint,2,rep,packed,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *RecvLockerGetUserIdsResult) Reset()         { *m = RecvLockerGetUserIdsResult{} }
func (m *RecvLockerGetUserIdsResult) String() string { return proto.CompactTextString(m) }
func (*RecvLockerGetUserIdsResult) ProtoMessage()    {}
func (*RecvLockerGetUserIdsResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{260}
}

func (m *RecvLockerGetUserIdsResult) GetErrorCode() RecvLockerGetUserIdsResult_ResultCode {
	if m != nil {
		return m.ErrorCode
	}
	return RecvLockerGetUserIdsResult_Success
}

func (m *RecvLockerGetUserIdsResult) GetUserId() []uint32 {
	if m != nil {
		return m.UserId
	}
	return nil
}

// 根据用户Id来获取用户信息selfId 代表自己的Id userId 代表需要获取的用户的Id
type CheckIsMuteContactReq struct {
	SelfId int32 `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	UserId int32 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *CheckIsMuteContactReq) Reset()         { *m = CheckIsMuteContactReq{} }
func (m *CheckIsMuteContactReq) String() string { return proto.CompactTextString(m) }
func (*CheckIsMuteContactReq) ProtoMessage()    {}
func (*CheckIsMuteContactReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{261}
}

func (m *CheckIsMuteContactReq) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *CheckIsMuteContactReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type CheckIsMuteContactResult struct {
	ErrorCode CheckIsMuteContactResult_ResultCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.CheckIsMuteContactResult_ResultCode" json:"ErrorCode,omitempty"`
	Result    bool                                `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *CheckIsMuteContactResult) Reset()         { *m = CheckIsMuteContactResult{} }
func (m *CheckIsMuteContactResult) String() string { return proto.CompactTextString(m) }
func (*CheckIsMuteContactResult) ProtoMessage()    {}
func (*CheckIsMuteContactResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{262}
}

func (m *CheckIsMuteContactResult) GetErrorCode() CheckIsMuteContactResult_ResultCode {
	if m != nil {
		return m.ErrorCode
	}
	return CheckIsMuteContactResult_Success
}

func (m *CheckIsMuteContactResult) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// 设置退订
type SetUserUnsubscribeReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Val    int32 `protobuf:"varint,2,opt,name=val,proto3" json:"val,omitempty"`
}

func (m *SetUserUnsubscribeReq) Reset()         { *m = SetUserUnsubscribeReq{} }
func (m *SetUserUnsubscribeReq) String() string { return proto.CompactTextString(m) }
func (*SetUserUnsubscribeReq) ProtoMessage()    {}
func (*SetUserUnsubscribeReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{263}
}

func (m *SetUserUnsubscribeReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SetUserUnsubscribeReq) GetVal() int32 {
	if m != nil {
		return m.Val
	}
	return 0
}

type SetUserUnsubscribeResult struct {
	ErrorCode SetUserUnsubscribeResult_ResultCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.SetUserUnsubscribeResult_ResultCode" json:"ErrorCode,omitempty"`
}

func (m *SetUserUnsubscribeResult) Reset()         { *m = SetUserUnsubscribeResult{} }
func (m *SetUserUnsubscribeResult) String() string { return proto.CompactTextString(m) }
func (*SetUserUnsubscribeResult) ProtoMessage()    {}
func (*SetUserUnsubscribeResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{264}
}

func (m *SetUserUnsubscribeResult) GetErrorCode() SetUserUnsubscribeResult_ResultCode {
	if m != nil {
		return m.ErrorCode
	}
	return SetUserUnsubscribeResult_Success
}

// 获取退订
type GetUserUnsubscribeReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (m *GetUserUnsubscribeReq) Reset()         { *m = GetUserUnsubscribeReq{} }
func (m *GetUserUnsubscribeReq) String() string { return proto.CompactTextString(m) }
func (*GetUserUnsubscribeReq) ProtoMessage()    {}
func (*GetUserUnsubscribeReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{265}
}

func (m *GetUserUnsubscribeReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GetUserUnsubscribeResult struct {
	ErrorCode GetUserUnsubscribeResult_ResultCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.GetUserUnsubscribeResult_ResultCode" json:"ErrorCode,omitempty"`
	Val       int32                               `protobuf:"varint,2,opt,name=val,proto3" json:"val,omitempty"`
}

func (m *GetUserUnsubscribeResult) Reset()         { *m = GetUserUnsubscribeResult{} }
func (m *GetUserUnsubscribeResult) String() string { return proto.CompactTextString(m) }
func (*GetUserUnsubscribeResult) ProtoMessage()    {}
func (*GetUserUnsubscribeResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{266}
}

func (m *GetUserUnsubscribeResult) GetErrorCode() GetUserUnsubscribeResult_ResultCode {
	if m != nil {
		return m.ErrorCode
	}
	return GetUserUnsubscribeResult_Success
}

func (m *GetUserUnsubscribeResult) GetVal() int32 {
	if m != nil {
		return m.Val
	}
	return 0
}

// 检查
type GetRelationUsersReq struct {
	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Phone  string        `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetRelationUsersReq) Reset()         { *m = GetRelationUsersReq{} }
func (m *GetRelationUsersReq) String() string { return proto.CompactTextString(m) }
func (*GetRelationUsersReq) ProtoMessage()    {}
func (*GetRelationUsersReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{267}
}

func (m *GetRelationUsersReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetRelationUsersReq) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *GetRelationUsersReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type GetRelationUsersResult struct {
	ErrorCode GetRelationUsersResult_ResultCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.GetRelationUsersResult_ResultCode" json:"ErrorCode,omitempty"`
	Infos     []*UserInfo                       `protobuf:"bytes,2,rep,name=infos" json:"infos,omitempty"`
}

func (m *GetRelationUsersResult) Reset()         { *m = GetRelationUsersResult{} }
func (m *GetRelationUsersResult) String() string { return proto.CompactTextString(m) }
func (*GetRelationUsersResult) ProtoMessage()    {}
func (*GetRelationUsersResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{268}
}

func (m *GetRelationUsersResult) GetErrorCode() GetRelationUsersResult_ResultCode {
	if m != nil {
		return m.ErrorCode
	}
	return GetRelationUsersResult_Success
}

func (m *GetRelationUsersResult) GetInfos() []*UserInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

type GetUserIpByAddrReq struct {
	Addr     string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	IsSignUp bool   `protobuf:"varint,2,opt,name=is_sign_up,json=isSignUp,proto3" json:"is_sign_up,omitempty"`
}

func (m *GetUserIpByAddrReq) Reset()         { *m = GetUserIpByAddrReq{} }
func (m *GetUserIpByAddrReq) String() string { return proto.CompactTextString(m) }
func (*GetUserIpByAddrReq) ProtoMessage()    {}
func (*GetUserIpByAddrReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{269}
}

func (m *GetUserIpByAddrReq) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *GetUserIpByAddrReq) GetIsSignUp() bool {
	if m != nil {
		return m.IsSignUp
	}
	return false
}

type GetUserIpByAddrResult struct {
	ErrorCode GetUserIpByAddrResult_ResultCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.GetUserIpByAddrResult_ResultCode" json:"ErrorCode,omitempty"`
	UserId    []int32                          `protobuf:"varint,2,rep,packed,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *GetUserIpByAddrResult) Reset()         { *m = GetUserIpByAddrResult{} }
func (m *GetUserIpByAddrResult) String() string { return proto.CompactTextString(m) }
func (*GetUserIpByAddrResult) ProtoMessage()    {}
func (*GetUserIpByAddrResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{270}
}

func (m *GetUserIpByAddrResult) GetErrorCode() GetUserIpByAddrResult_ResultCode {
	if m != nil {
		return m.ErrorCode
	}
	return GetUserIpByAddrResult_Success
}

func (m *GetUserIpByAddrResult) GetUserId() []int32 {
	if m != nil {
		return m.UserId
	}
	return nil
}

type UserIpAddr struct {
	Id         int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	UserId     int32  `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	IpAddr     string `protobuf:"bytes,3,opt,name=IpAddr,proto3" json:"IpAddr,omitempty"`
	IpPort     int32  `protobuf:"varint,4,opt,name=IpPort,proto3" json:"IpPort,omitempty"`
	LastOnline int64  `protobuf:"varint,5,opt,name=LastOnline,proto3" json:"LastOnline,omitempty"`
	IsSignUp   bool   `protobuf:"varint,6,opt,name=IsSignUp,proto3" json:"IsSignUp,omitempty"`
}

func (m *UserIpAddr) Reset()                    { *m = UserIpAddr{} }
func (m *UserIpAddr) String() string            { return proto.CompactTextString(m) }
func (*UserIpAddr) ProtoMessage()               {}
func (*UserIpAddr) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{271} }

func (m *UserIpAddr) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserIpAddr) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserIpAddr) GetIpAddr() string {
	if m != nil {
		return m.IpAddr
	}
	return ""
}

func (m *UserIpAddr) GetIpPort() int32 {
	if m != nil {
		return m.IpPort
	}
	return 0
}

func (m *UserIpAddr) GetLastOnline() int64 {
	if m != nil {
		return m.LastOnline
	}
	return 0
}

func (m *UserIpAddr) GetIsSignUp() bool {
	if m != nil {
		return m.IsSignUp
	}
	return false
}

type GetUserIpByUserIdReq struct {
	UserId   int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IsSignUp bool  `protobuf:"varint,2,opt,name=is_sign_up,json=isSignUp,proto3" json:"is_sign_up,omitempty"`
}

func (m *GetUserIpByUserIdReq) Reset()         { *m = GetUserIpByUserIdReq{} }
func (m *GetUserIpByUserIdReq) String() string { return proto.CompactTextString(m) }
func (*GetUserIpByUserIdReq) ProtoMessage()    {}
func (*GetUserIpByUserIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{272}
}

func (m *GetUserIpByUserIdReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetUserIpByUserIdReq) GetIsSignUp() bool {
	if m != nil {
		return m.IsSignUp
	}
	return false
}

type GetUserIpByUserIdResult struct {
	ErrorCode GetUserIpByUserIdResult_ResultCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.GetUserIpByUserIdResult_ResultCode" json:"ErrorCode,omitempty"`
	Addrs     []*UserIpAddr                      `protobuf:"bytes,2,rep,name=addrs" json:"addrs,omitempty"`
}

func (m *GetUserIpByUserIdResult) Reset()         { *m = GetUserIpByUserIdResult{} }
func (m *GetUserIpByUserIdResult) String() string { return proto.CompactTextString(m) }
func (*GetUserIpByUserIdResult) ProtoMessage()    {}
func (*GetUserIpByUserIdResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{273}
}

func (m *GetUserIpByUserIdResult) GetErrorCode() GetUserIpByUserIdResult_ResultCode {
	if m != nil {
		return m.ErrorCode
	}
	return GetUserIpByUserIdResult_Success
}

func (m *GetUserIpByUserIdResult) GetAddrs() []*UserIpAddr {
	if m != nil {
		return m.Addrs
	}
	return nil
}

type UserIpAddOrUpdateReq struct {
	UserId   int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Addr     string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	IsSignUp bool   `protobuf:"varint,3,opt,name=is_sign_up,json=isSignUp,proto3" json:"is_sign_up,omitempty"`
}

func (m *UserIpAddOrUpdateReq) Reset()         { *m = UserIpAddOrUpdateReq{} }
func (m *UserIpAddOrUpdateReq) String() string { return proto.CompactTextString(m) }
func (*UserIpAddOrUpdateReq) ProtoMessage()    {}
func (*UserIpAddOrUpdateReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{274}
}

func (m *UserIpAddOrUpdateReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserIpAddOrUpdateReq) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *UserIpAddOrUpdateReq) GetIsSignUp() bool {
	if m != nil {
		return m.IsSignUp
	}
	return false
}

type UserIpAddOrUpdateResult struct {
	ErrorCode UserIpAddOrUpdateResult_ResultCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.UserIpAddOrUpdateResult_ResultCode" json:"ErrorCode,omitempty"`
}

func (m *UserIpAddOrUpdateResult) Reset()         { *m = UserIpAddOrUpdateResult{} }
func (m *UserIpAddOrUpdateResult) String() string { return proto.CompactTextString(m) }
func (*UserIpAddOrUpdateResult) ProtoMessage()    {}
func (*UserIpAddOrUpdateResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{275}
}

func (m *UserIpAddOrUpdateResult) GetErrorCode() UserIpAddOrUpdateResult_ResultCode {
	if m != nil {
		return m.ErrorCode
	}
	return UserIpAddOrUpdateResult_Success
}

// 检查
type CheckUserSpaiclReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Type   int32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *CheckUserSpaiclReq) Reset()         { *m = CheckUserSpaiclReq{} }
func (m *CheckUserSpaiclReq) String() string { return proto.CompactTextString(m) }
func (*CheckUserSpaiclReq) ProtoMessage()    {}
func (*CheckUserSpaiclReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{276}
}

func (m *CheckUserSpaiclReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CheckUserSpaiclReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type CheckUserSpaiclResult struct {
	ErrorCode CheckUserSpaiclResult_ResultCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.CheckUserSpaiclResult_ResultCode" json:"ErrorCode,omitempty"`
	Result    bool                             `protobuf:"varint,2,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (m *CheckUserSpaiclResult) Reset()         { *m = CheckUserSpaiclResult{} }
func (m *CheckUserSpaiclResult) String() string { return proto.CompactTextString(m) }
func (*CheckUserSpaiclResult) ProtoMessage()    {}
func (*CheckUserSpaiclResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{277}
}

func (m *CheckUserSpaiclResult) GetErrorCode() CheckUserSpaiclResult_ResultCode {
	if m != nil {
		return m.ErrorCode
	}
	return CheckUserSpaiclResult_Success
}

func (m *CheckUserSpaiclResult) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// 增加
type InsertUSerSpaiclReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Type   int32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *InsertUSerSpaiclReq) Reset()         { *m = InsertUSerSpaiclReq{} }
func (m *InsertUSerSpaiclReq) String() string { return proto.CompactTextString(m) }
func (*InsertUSerSpaiclReq) ProtoMessage()    {}
func (*InsertUSerSpaiclReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{278}
}

func (m *InsertUSerSpaiclReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *InsertUSerSpaiclReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type InsertUSerSpaiclResult struct {
	ErrorCode InsertUSerSpaiclResult_ResultCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.InsertUSerSpaiclResult_ResultCode" json:"ErrorCode,omitempty"`
	Result    bool                              `protobuf:"varint,2,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (m *InsertUSerSpaiclResult) Reset()         { *m = InsertUSerSpaiclResult{} }
func (m *InsertUSerSpaiclResult) String() string { return proto.CompactTextString(m) }
func (*InsertUSerSpaiclResult) ProtoMessage()    {}
func (*InsertUSerSpaiclResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{279}
}

func (m *InsertUSerSpaiclResult) GetErrorCode() InsertUSerSpaiclResult_ResultCode {
	if m != nil {
		return m.ErrorCode
	}
	return InsertUSerSpaiclResult_Success
}

func (m *InsertUSerSpaiclResult) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// 删除
type DelUSerSpaiclReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Type   int32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *DelUSerSpaiclReq) Reset()                    { *m = DelUSerSpaiclReq{} }
func (m *DelUSerSpaiclReq) String() string            { return proto.CompactTextString(m) }
func (*DelUSerSpaiclReq) ProtoMessage()               {}
func (*DelUSerSpaiclReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{280} }

func (m *DelUSerSpaiclReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DelUSerSpaiclReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type DelUSerSpaiclResult struct {
	ErrorCode DelUSerSpaiclResult_ResultCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.DelUSerSpaiclResult_ResultCode" json:"ErrorCode,omitempty"`
	Result    bool                           `protobuf:"varint,2,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (m *DelUSerSpaiclResult) Reset()         { *m = DelUSerSpaiclResult{} }
func (m *DelUSerSpaiclResult) String() string { return proto.CompactTextString(m) }
func (*DelUSerSpaiclResult) ProtoMessage()    {}
func (*DelUSerSpaiclResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{281}
}

func (m *DelUSerSpaiclResult) GetErrorCode() DelUSerSpaiclResult_ResultCode {
	if m != nil {
		return m.ErrorCode
	}
	return DelUSerSpaiclResult_Success
}

func (m *DelUSerSpaiclResult) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// 获取所有
type GetAllUSerSpaiclReq struct {
	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *GetAllUSerSpaiclReq) Reset()         { *m = GetAllUSerSpaiclReq{} }
func (m *GetAllUSerSpaiclReq) String() string { return proto.CompactTextString(m) }
func (*GetAllUSerSpaiclReq) ProtoMessage()    {}
func (*GetAllUSerSpaiclReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{282}
}

func (m *GetAllUSerSpaiclReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type GetAllUSerSpaiclResult struct {
	ErrorCode   GetAllUSerSpaiclResult_ResultCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.GetAllUSerSpaiclResult_ResultCode" json:"ErrorCode,omitempty"`
	TrueUserId  []int32                           `protobuf:"varint,2,rep,packed,name=true_user_id,json=trueUserId" json:"true_user_id,omitempty"`
	FalseUserId []int32                           `protobuf:"varint,3,rep,packed,name=false_user_id,json=falseUserId" json:"false_user_id,omitempty"`
}

func (m *GetAllUSerSpaiclResult) Reset()         { *m = GetAllUSerSpaiclResult{} }
func (m *GetAllUSerSpaiclResult) String() string { return proto.CompactTextString(m) }
func (*GetAllUSerSpaiclResult) ProtoMessage()    {}
func (*GetAllUSerSpaiclResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{283}
}

func (m *GetAllUSerSpaiclResult) GetErrorCode() GetAllUSerSpaiclResult_ResultCode {
	if m != nil {
		return m.ErrorCode
	}
	return GetAllUSerSpaiclResult_Success
}

func (m *GetAllUSerSpaiclResult) GetTrueUserId() []int32 {
	if m != nil {
		return m.TrueUserId
	}
	return nil
}

func (m *GetAllUSerSpaiclResult) GetFalseUserId() []int32 {
	if m != nil {
		return m.FalseUserId
	}
	return nil
}

// 更改电话号码的请求参数
type ChangePhoneReq struct {
	UserId        int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	KeyId         int64         `protobuf:"varint,2,opt,name=keyId,proto3" json:"keyId,omitempty"`
	PhoneNumber   string        `protobuf:"bytes,3,opt,name=Phone_number,json=PhoneNumber,proto3" json:"Phone_number,omitempty"`
	PhoneCodeHash string        `protobuf:"bytes,4,opt,name=PhoneCodeHash,proto3" json:"PhoneCodeHash,omitempty"`
	PhoneCode     string        `protobuf:"bytes,5,opt,name=PhoneCode,proto3" json:"PhoneCode,omitempty"`
	Debug         *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug" json:"debug,omitempty"`
	CountryCode   string        `protobuf:"bytes,7,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	LocalPhone    string        `protobuf:"bytes,8,opt,name=local_phone,json=localPhone,proto3" json:"local_phone,omitempty"`
}

func (m *ChangePhoneReq) Reset()                    { *m = ChangePhoneReq{} }
func (m *ChangePhoneReq) String() string            { return proto.CompactTextString(m) }
func (*ChangePhoneReq) ProtoMessage()               {}
func (*ChangePhoneReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{284} }

func (m *ChangePhoneReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ChangePhoneReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *ChangePhoneReq) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *ChangePhoneReq) GetPhoneCodeHash() string {
	if m != nil {
		return m.PhoneCodeHash
	}
	return ""
}

func (m *ChangePhoneReq) GetPhoneCode() string {
	if m != nil {
		return m.PhoneCode
	}
	return ""
}

func (m *ChangePhoneReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *ChangePhoneReq) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *ChangePhoneReq) GetLocalPhone() string {
	if m != nil {
		return m.LocalPhone
	}
	return ""
}

// 更改电话号码的返回
type ChangePhoneResult struct {
	// userInfo userInfo = 1; //用户的具体信息
	ErrorCode ChangePhoneResult_ResultCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.ChangePhoneResult_ResultCode" json:"ErrorCode,omitempty"`
	Result    bool                         `protobuf:"varint,2,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (m *ChangePhoneResult) Reset()         { *m = ChangePhoneResult{} }
func (m *ChangePhoneResult) String() string { return proto.CompactTextString(m) }
func (*ChangePhoneResult) ProtoMessage()    {}
func (*ChangePhoneResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{285}
}

func (m *ChangePhoneResult) GetErrorCode() ChangePhoneResult_ResultCode {
	if m != nil {
		return m.ErrorCode
	}
	return ChangePhoneResult_Success
}

func (m *ChangePhoneResult) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// 虚拟号信息
type VirtualPhoneNumberInfo struct {
	VirtualPhone     string `protobuf:"bytes,1,opt,name=virtual_phone,json=virtualPhone,proto3" json:"virtual_phone,omitempty"`
	RealPhone        string `protobuf:"bytes,2,opt,name=real_phone,json=realPhone,proto3" json:"real_phone,omitempty"`
	Activated        uint32 `protobuf:"varint,3,opt,name=activated,proto3" json:"activated,omitempty"`
	BindTime         int64  `protobuf:"varint,4,opt,name=bind_time,json=bindTime,proto3" json:"bind_time,omitempty"`
	ActivateTime     int64  `protobuf:"varint,5,opt,name=activate_time,json=activateTime,proto3" json:"activate_time,omitempty"`
	ActivateAdminId  int32  `protobuf:"varint,6,opt,name=activate_admin_id,json=activateAdminId,proto3" json:"activate_admin_id,omitempty"`
	BindAdminId      int32  `protobuf:"varint,7,opt,name=bind_admin_id,json=bindAdminId,proto3" json:"bind_admin_id,omitempty"`
	OwnerId          int32  `protobuf:"varint,8,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	InitialPhoneCode string `protobuf:"bytes,9,opt,name=initial_phone_code,json=initialPhoneCode,proto3" json:"initial_phone_code,omitempty"`
}

func (m *VirtualPhoneNumberInfo) Reset()         { *m = VirtualPhoneNumberInfo{} }
func (m *VirtualPhoneNumberInfo) String() string { return proto.CompactTextString(m) }
func (*VirtualPhoneNumberInfo) ProtoMessage()    {}
func (*VirtualPhoneNumberInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{286}
}

func (m *VirtualPhoneNumberInfo) GetVirtualPhone() string {
	if m != nil {
		return m.VirtualPhone
	}
	return ""
}

func (m *VirtualPhoneNumberInfo) GetRealPhone() string {
	if m != nil {
		return m.RealPhone
	}
	return ""
}

func (m *VirtualPhoneNumberInfo) GetActivated() uint32 {
	if m != nil {
		return m.Activated
	}
	return 0
}

func (m *VirtualPhoneNumberInfo) GetBindTime() int64 {
	if m != nil {
		return m.BindTime
	}
	return 0
}

func (m *VirtualPhoneNumberInfo) GetActivateTime() int64 {
	if m != nil {
		return m.ActivateTime
	}
	return 0
}

func (m *VirtualPhoneNumberInfo) GetActivateAdminId() int32 {
	if m != nil {
		return m.ActivateAdminId
	}
	return 0
}

func (m *VirtualPhoneNumberInfo) GetBindAdminId() int32 {
	if m != nil {
		return m.BindAdminId
	}
	return 0
}

func (m *VirtualPhoneNumberInfo) GetOwnerId() int32 {
	if m != nil {
		return m.OwnerId
	}
	return 0
}

func (m *VirtualPhoneNumberInfo) GetInitialPhoneCode() string {
	if m != nil {
		return m.InitialPhoneCode
	}
	return ""
}

type UserExpansionFindReq struct {
	UserID int32 `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (m *UserExpansionFindReq) Reset()         { *m = UserExpansionFindReq{} }
func (m *UserExpansionFindReq) String() string { return proto.CompactTextString(m) }
func (*UserExpansionFindReq) ProtoMessage()    {}
func (*UserExpansionFindReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{287}
}

func (m *UserExpansionFindReq) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

type UserExpansionFindResult struct {
	UserExpansion *UserExpansion `protobuf:"bytes,1,opt,name=user_expansion,json=userExpansion" json:"user_expansion,omitempty"`
	Errorcode     ReErrCode      `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *UserExpansionFindResult) Reset()         { *m = UserExpansionFindResult{} }
func (m *UserExpansionFindResult) String() string { return proto.CompactTextString(m) }
func (*UserExpansionFindResult) ProtoMessage()    {}
func (*UserExpansionFindResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{288}
}

func (m *UserExpansionFindResult) GetUserExpansion() *UserExpansion {
	if m != nil {
		return m.UserExpansion
	}
	return nil
}

func (m *UserExpansionFindResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

type UserExpansion struct {
	UserID  int32  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	Data    string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Version int32  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *UserExpansion) Reset()                    { *m = UserExpansion{} }
func (m *UserExpansion) String() string            { return proto.CompactTextString(m) }
func (*UserExpansion) ProtoMessage()               {}
func (*UserExpansion) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{289} }

func (m *UserExpansion) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *UserExpansion) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *UserExpansion) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type UserExpansionSetReq struct {
	UserID        int32          `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	UserExpansion *UserExpansion `protobuf:"bytes,2,opt,name=user_expansion,json=userExpansion" json:"user_expansion,omitempty"`
}

func (m *UserExpansionSetReq) Reset()         { *m = UserExpansionSetReq{} }
func (m *UserExpansionSetReq) String() string { return proto.CompactTextString(m) }
func (*UserExpansionSetReq) ProtoMessage()    {}
func (*UserExpansionSetReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{290}
}

func (m *UserExpansionSetReq) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *UserExpansionSetReq) GetUserExpansion() *UserExpansion {
	if m != nil {
		return m.UserExpansion
	}
	return nil
}

type UserExpansionSetResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *UserExpansionSetResult) Reset()         { *m = UserExpansionSetResult{} }
func (m *UserExpansionSetResult) String() string { return proto.CompactTextString(m) }
func (*UserExpansionSetResult) ProtoMessage()    {}
func (*UserExpansionSetResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{291}
}

func (m *UserExpansionSetResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// UserInfoExtend add by xiaoming.
type UserInfoExtend struct {
	UserType       int64  `protobuf:"varint,1,opt,name=user_type,json=userType,proto3" json:"user_type,omitempty"`
	UselableFid    string `protobuf:"bytes,2,opt,name=uselable_fid,json=uselableFid,proto3" json:"uselable_fid,omitempty"`
	UselableSize   int64  `protobuf:"varint,3,opt,name=uselable_size,json=uselableSize,proto3" json:"uselable_size,omitempty"`
	UselableWidth  int64  `protobuf:"varint,4,opt,name=uselable_width,json=uselableWidth,proto3" json:"uselable_width,omitempty"`
	UselableHeight int64  `protobuf:"varint,5,opt,name=uselable_height,json=uselableHeight,proto3" json:"uselable_height,omitempty"`
}

func (m *UserInfoExtend) Reset()                    { *m = UserInfoExtend{} }
func (m *UserInfoExtend) String() string            { return proto.CompactTextString(m) }
func (*UserInfoExtend) ProtoMessage()               {}
func (*UserInfoExtend) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{292} }

func (m *UserInfoExtend) GetUserType() int64 {
	if m != nil {
		return m.UserType
	}
	return 0
}

func (m *UserInfoExtend) GetUselableFid() string {
	if m != nil {
		return m.UselableFid
	}
	return ""
}

func (m *UserInfoExtend) GetUselableSize() int64 {
	if m != nil {
		return m.UselableSize
	}
	return 0
}

func (m *UserInfoExtend) GetUselableWidth() int64 {
	if m != nil {
		return m.UselableWidth
	}
	return 0
}

func (m *UserInfoExtend) GetUselableHeight() int64 {
	if m != nil {
		return m.UselableHeight
	}
	return 0
}

type GetUserInfoExtendReq struct {
}

func (m *GetUserInfoExtendReq) Reset()         { *m = GetUserInfoExtendReq{} }
func (m *GetUserInfoExtendReq) String() string { return proto.CompactTextString(m) }
func (*GetUserInfoExtendReq) ProtoMessage()    {}
func (*GetUserInfoExtendReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{293}
}

type GetUserInfoExtendResult struct {
	Errorcode      ReErrCode         `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
	Hash           int64             `protobuf:"varint,2,opt,name=hash,proto3" json:"hash,omitempty"`
	UserInfoExtend []*UserInfoExtend `protobuf:"bytes,3,rep,name=userInfoExtend" json:"userInfoExtend,omitempty"`
}

func (m *GetUserInfoExtendResult) Reset()         { *m = GetUserInfoExtendResult{} }
func (m *GetUserInfoExtendResult) String() string { return proto.CompactTextString(m) }
func (*GetUserInfoExtendResult) ProtoMessage()    {}
func (*GetUserInfoExtendResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{294}
}

func (m *GetUserInfoExtendResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

func (m *GetUserInfoExtendResult) GetHash() int64 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *GetUserInfoExtendResult) GetUserInfoExtend() []*UserInfoExtend {
	if m != nil {
		return m.UserInfoExtend
	}
	return nil
}

type HistoryChangePhoneAddResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *HistoryChangePhoneAddResult) Reset()         { *m = HistoryChangePhoneAddResult{} }
func (m *HistoryChangePhoneAddResult) String() string { return proto.CompactTextString(m) }
func (*HistoryChangePhoneAddResult) ProtoMessage()    {}
func (*HistoryChangePhoneAddResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{295}
}

func (m *HistoryChangePhoneAddResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

type HistoryChangePhoneAddReq struct {
	UserID     int32  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	FromNumber string `protobuf:"bytes,2,opt,name=fromNumber,proto3" json:"fromNumber,omitempty"`
	ToNumber   string `protobuf:"bytes,3,opt,name=toNumber,proto3" json:"toNumber,omitempty"`
	Addr       string `protobuf:"bytes,4,opt,name=addr,proto3" json:"addr,omitempty"`
	Port       int32  `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
}

func (m *HistoryChangePhoneAddReq) Reset()         { *m = HistoryChangePhoneAddReq{} }
func (m *HistoryChangePhoneAddReq) String() string { return proto.CompactTextString(m) }
func (*HistoryChangePhoneAddReq) ProtoMessage()    {}
func (*HistoryChangePhoneAddReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{296}
}

func (m *HistoryChangePhoneAddReq) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *HistoryChangePhoneAddReq) GetFromNumber() string {
	if m != nil {
		return m.FromNumber
	}
	return ""
}

func (m *HistoryChangePhoneAddReq) GetToNumber() string {
	if m != nil {
		return m.ToNumber
	}
	return ""
}

func (m *HistoryChangePhoneAddReq) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *HistoryChangePhoneAddReq) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type QueryUpdatesByUseridReq struct {
	UserId    int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	KeyId     uint64 `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Timestamp int64  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *QueryUpdatesByUseridReq) Reset()         { *m = QueryUpdatesByUseridReq{} }
func (m *QueryUpdatesByUseridReq) String() string { return proto.CompactTextString(m) }
func (*QueryUpdatesByUseridReq) ProtoMessage()    {}
func (*QueryUpdatesByUseridReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{297}
}

func (m *QueryUpdatesByUseridReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *QueryUpdatesByUseridReq) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *QueryUpdatesByUseridReq) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type QueryUpdatesByUseridResult struct {
	JsonContent []byte `protobuf:"bytes,1,opt,name=jsonContent,proto3" json:"jsonContent,omitempty"`
}

func (m *QueryUpdatesByUseridResult) Reset()         { *m = QueryUpdatesByUseridResult{} }
func (m *QueryUpdatesByUseridResult) String() string { return proto.CompactTextString(m) }
func (*QueryUpdatesByUseridResult) ProtoMessage()    {}
func (*QueryUpdatesByUseridResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{298}
}

func (m *QueryUpdatesByUseridResult) GetJsonContent() []byte {
	if m != nil {
		return m.JsonContent
	}
	return nil
}

type GetSwitchVersionReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *GetSwitchVersionReq) Reset()         { *m = GetSwitchVersionReq{} }
func (m *GetSwitchVersionReq) String() string { return proto.CompactTextString(m) }
func (*GetSwitchVersionReq) ProtoMessage()    {}
func (*GetSwitchVersionReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{299}
}

func (m *GetSwitchVersionReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GetSwitchVersionResult struct {
	Version int64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *GetSwitchVersionResult) Reset()         { *m = GetSwitchVersionResult{} }
func (m *GetSwitchVersionResult) String() string { return proto.CompactTextString(m) }
func (*GetSwitchVersionResult) ProtoMessage()    {}
func (*GetSwitchVersionResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{300}
}

func (m *GetSwitchVersionResult) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

// 获取用户信息、群、超级群信息的请求
type UGetUsersChatsReq struct {
	Userid        int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Users         []int32       `protobuf:"varint,2,rep,packed,name=users" json:"users,omitempty"`
	Chatid        []int32       `protobuf:"varint,3,rep,packed,name=chatid" json:"chatid,omitempty"`
	Channelid     []int32       `protobuf:"varint,4,rep,packed,name=channelid" json:"channelid,omitempty"`
	ProtocolLayer int32         `protobuf:"varint,5,opt,name=protocol_layer,json=protocolLayer,proto3" json:"protocol_layer,omitempty"`
	Dlog          *pbcomm.Debug `protobuf:"bytes,6,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *UGetUsersChatsReq) Reset()         { *m = UGetUsersChatsReq{} }
func (m *UGetUsersChatsReq) String() string { return proto.CompactTextString(m) }
func (*UGetUsersChatsReq) ProtoMessage()    {}
func (*UGetUsersChatsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{301}
}

func (m *UGetUsersChatsReq) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *UGetUsersChatsReq) GetUsers() []int32 {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *UGetUsersChatsReq) GetChatid() []int32 {
	if m != nil {
		return m.Chatid
	}
	return nil
}

func (m *UGetUsersChatsReq) GetChannelid() []int32 {
	if m != nil {
		return m.Channelid
	}
	return nil
}

func (m *UGetUsersChatsReq) GetProtocolLayer() int32 {
	if m != nil {
		return m.ProtocolLayer
	}
	return 0
}

func (m *UGetUsersChatsReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 获取用户信息、群、超级群信息的返回
type UGetUsersChatsResult struct {
	// repeated ChannelInfoBase channels = 1;
	// repeated GetChatInfoResp chats = 3;
	Channels   [][]byte        `protobuf:"bytes,1,rep,name=channels" json:"channels,omitempty"`
	Users      *UserInfoArray  `protobuf:"bytes,2,opt,name=users" json:"users,omitempty"`
	Chats      [][]byte        `protobuf:"bytes,3,rep,name=chats" json:"chats,omitempty"`
	NoChats    []int32         `protobuf:"varint,4,rep,packed,name=no_chats,json=noChats" json:"no_chats,omitempty"`
	NoChans    []int32         `protobuf:"varint,5,rep,packed,name=no_chans,json=noChans" json:"no_chans,omitempty"`
	Resultcode UChatResultCode `protobuf:"varint,6,opt,name=resultcode,proto3,enum=pbimuinfoserver.UChatResultCode" json:"resultcode,omitempty"`
}

func (m *UGetUsersChatsResult) Reset()         { *m = UGetUsersChatsResult{} }
func (m *UGetUsersChatsResult) String() string { return proto.CompactTextString(m) }
func (*UGetUsersChatsResult) ProtoMessage()    {}
func (*UGetUsersChatsResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{302}
}

func (m *UGetUsersChatsResult) GetChannels() [][]byte {
	if m != nil {
		return m.Channels
	}
	return nil
}

func (m *UGetUsersChatsResult) GetUsers() *UserInfoArray {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *UGetUsersChatsResult) GetChats() [][]byte {
	if m != nil {
		return m.Chats
	}
	return nil
}

func (m *UGetUsersChatsResult) GetNoChats() []int32 {
	if m != nil {
		return m.NoChats
	}
	return nil
}

func (m *UGetUsersChatsResult) GetNoChans() []int32 {
	if m != nil {
		return m.NoChans
	}
	return nil
}

func (m *UGetUsersChatsResult) GetResultcode() UChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return UChatResultCode_Chat_RPC_OK
}

type UpdateBotInfoSuppReq struct {
	UserId      int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Placeholder string        `protobuf:"bytes,2,opt,name=Placeholder,proto3" json:"Placeholder,omitempty"`
	Geo         bool          `protobuf:"varint,3,opt,name=geo,proto3" json:"geo,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *UpdateBotInfoSuppReq) Reset()         { *m = UpdateBotInfoSuppReq{} }
func (m *UpdateBotInfoSuppReq) String() string { return proto.CompactTextString(m) }
func (*UpdateBotInfoSuppReq) ProtoMessage()    {}
func (*UpdateBotInfoSuppReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{303}
}

func (m *UpdateBotInfoSuppReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateBotInfoSuppReq) GetPlaceholder() string {
	if m != nil {
		return m.Placeholder
	}
	return ""
}

func (m *UpdateBotInfoSuppReq) GetGeo() bool {
	if m != nil {
		return m.Geo
	}
	return false
}

func (m *UpdateBotInfoSuppReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type UpdateBotInfoSuppResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *UpdateBotInfoSuppResult) Reset()         { *m = UpdateBotInfoSuppResult{} }
func (m *UpdateBotInfoSuppResult) String() string { return proto.CompactTextString(m) }
func (*UpdateBotInfoSuppResult) ProtoMessage()    {}
func (*UpdateBotInfoSuppResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{304}
}

func (m *UpdateBotInfoSuppResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

type DeleteUserUsernameReq struct {
	AdminId     int32         `protobuf:"varint,1,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`
	Username    string        `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	ForceDelete bool          `protobuf:"varint,3,opt,name=force_delete,json=forceDelete,proto3" json:"force_delete,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *DeleteUserUsernameReq) Reset()         { *m = DeleteUserUsernameReq{} }
func (m *DeleteUserUsernameReq) String() string { return proto.CompactTextString(m) }
func (*DeleteUserUsernameReq) ProtoMessage()    {}
func (*DeleteUserUsernameReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{305}
}

func (m *DeleteUserUsernameReq) GetAdminId() int32 {
	if m != nil {
		return m.AdminId
	}
	return 0
}

func (m *DeleteUserUsernameReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *DeleteUserUsernameReq) GetForceDelete() bool {
	if m != nil {
		return m.ForceDelete
	}
	return false
}

func (m *DeleteUserUsernameReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type DeleteUserUsernameResult struct {
	Code                 DeleteUserUsernameResult_Code `protobuf:"varint,1,opt,name=code,proto3,enum=pbimuinfoserver.DeleteUserUsernameResult_Code" json:"code,omitempty"`
	InternalErrorMessage string                        `protobuf:"bytes,2,opt,name=internal_error_message,json=internalErrorMessage,proto3" json:"internal_error_message,omitempty"`
	OwnerId              int32                         `protobuf:"varint,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
}

func (m *DeleteUserUsernameResult) Reset()         { *m = DeleteUserUsernameResult{} }
func (m *DeleteUserUsernameResult) String() string { return proto.CompactTextString(m) }
func (*DeleteUserUsernameResult) ProtoMessage()    {}
func (*DeleteUserUsernameResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{306}
}

func (m *DeleteUserUsernameResult) GetCode() DeleteUserUsernameResult_Code {
	if m != nil {
		return m.Code
	}
	return DeleteUserUsernameResult_Success
}

func (m *DeleteUserUsernameResult) GetInternalErrorMessage() string {
	if m != nil {
		return m.InternalErrorMessage
	}
	return ""
}

func (m *DeleteUserUsernameResult) GetOwnerId() int32 {
	if m != nil {
		return m.OwnerId
	}
	return 0
}

type UpdateUserLocationReq struct {
	UserId  int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Country string        `protobuf:"bytes,2,opt,name=Country,proto3" json:"Country,omitempty"`
	City    string        `protobuf:"bytes,3,opt,name=City,proto3" json:"City,omitempty"`
	Detail  string        `protobuf:"bytes,4,opt,name=Detail,proto3" json:"Detail,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *UpdateUserLocationReq) Reset()         { *m = UpdateUserLocationReq{} }
func (m *UpdateUserLocationReq) String() string { return proto.CompactTextString(m) }
func (*UpdateUserLocationReq) ProtoMessage()    {}
func (*UpdateUserLocationReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{307}
}

func (m *UpdateUserLocationReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateUserLocationReq) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *UpdateUserLocationReq) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *UpdateUserLocationReq) GetDetail() string {
	if m != nil {
		return m.Detail
	}
	return ""
}

func (m *UpdateUserLocationReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type UpdateUserLocationResult struct {
	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=Reason,proto3" json:"Reason,omitempty"`
}

func (m *UpdateUserLocationResult) Reset()         { *m = UpdateUserLocationResult{} }
func (m *UpdateUserLocationResult) String() string { return proto.CompactTextString(m) }
func (*UpdateUserLocationResult) ProtoMessage()    {}
func (*UpdateUserLocationResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{308}
}

func (m *UpdateUserLocationResult) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *UpdateUserLocationResult) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type UpdateUserGrenderReq struct {
	UserId  int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Grender int32         `protobuf:"varint,2,opt,name=Grender,proto3" json:"Grender,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *UpdateUserGrenderReq) Reset()         { *m = UpdateUserGrenderReq{} }
func (m *UpdateUserGrenderReq) String() string { return proto.CompactTextString(m) }
func (*UpdateUserGrenderReq) ProtoMessage()    {}
func (*UpdateUserGrenderReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{309}
}

func (m *UpdateUserGrenderReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateUserGrenderReq) GetGrender() int32 {
	if m != nil {
		return m.Grender
	}
	return 0
}

func (m *UpdateUserGrenderReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type UpdateUserGrenderResult struct {
	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=Reason,proto3" json:"Reason,omitempty"`
}

func (m *UpdateUserGrenderResult) Reset()         { *m = UpdateUserGrenderResult{} }
func (m *UpdateUserGrenderResult) String() string { return proto.CompactTextString(m) }
func (*UpdateUserGrenderResult) ProtoMessage()    {}
func (*UpdateUserGrenderResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{310}
}

func (m *UpdateUserGrenderResult) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *UpdateUserGrenderResult) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type UpdateUserEmailReq struct {
	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Email  string        `protobuf:"bytes,2,opt,name=Email,proto3" json:"Email,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *UpdateUserEmailReq) Reset()         { *m = UpdateUserEmailReq{} }
func (m *UpdateUserEmailReq) String() string { return proto.CompactTextString(m) }
func (*UpdateUserEmailReq) ProtoMessage()    {}
func (*UpdateUserEmailReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{311}
}

func (m *UpdateUserEmailReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateUserEmailReq) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UpdateUserEmailReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type UpdateUserEmailResult struct {
	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=Reason,proto3" json:"Reason,omitempty"`
}

func (m *UpdateUserEmailResult) Reset()         { *m = UpdateUserEmailResult{} }
func (m *UpdateUserEmailResult) String() string { return proto.CompactTextString(m) }
func (*UpdateUserEmailResult) ProtoMessage()    {}
func (*UpdateUserEmailResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{312}
}

func (m *UpdateUserEmailResult) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *UpdateUserEmailResult) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type UploadContactsReq struct {
	KeyId           int64               `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId          int32               `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PhoneContactArr []*PhoneBookContact `protobuf:"bytes,3,rep,name=phoneContactArr" json:"phoneContactArr,omitempty"`
}

func (m *UploadContactsReq) Reset()         { *m = UploadContactsReq{} }
func (m *UploadContactsReq) String() string { return proto.CompactTextString(m) }
func (*UploadContactsReq) ProtoMessage()    {}
func (*UploadContactsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{313}
}

func (m *UploadContactsReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *UploadContactsReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UploadContactsReq) GetPhoneContactArr() []*PhoneBookContact {
	if m != nil {
		return m.PhoneContactArr
	}
	return nil
}

type UploadContactsResult struct {
	Error   bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *UploadContactsResult) Reset()         { *m = UploadContactsResult{} }
func (m *UploadContactsResult) String() string { return proto.CompactTextString(m) }
func (*UploadContactsResult) ProtoMessage()    {}
func (*UploadContactsResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{314}
}

func (m *UploadContactsResult) GetError() bool {
	if m != nil {
		return m.Error
	}
	return false
}

func (m *UploadContactsResult) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ApplyContactReq struct {
	UserId      int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ApplyUserId int32         `protobuf:"varint,2,opt,name=apply_user_id,json=applyUserId,proto3" json:"apply_user_id,omitempty"`
	WithMessage string        `protobuf:"bytes,3,opt,name=with_message,json=withMessage,proto3" json:"with_message,omitempty"`
	FromType    int32         `protobuf:"varint,4,opt,name=from_type,json=fromType,proto3" json:"from_type,omitempty"`
	GroupId     int32         `protobuf:"varint,5,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	FirstName   string        `protobuf:"bytes,6,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName    string        `protobuf:"bytes,7,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,8,opt,name=debug" json:"debug,omitempty"`
	AccessHash  int64         `protobuf:"varint,9,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
}

func (m *ApplyContactReq) Reset()                    { *m = ApplyContactReq{} }
func (m *ApplyContactReq) String() string            { return proto.CompactTextString(m) }
func (*ApplyContactReq) ProtoMessage()               {}
func (*ApplyContactReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{315} }

func (m *ApplyContactReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ApplyContactReq) GetApplyUserId() int32 {
	if m != nil {
		return m.ApplyUserId
	}
	return 0
}

func (m *ApplyContactReq) GetWithMessage() string {
	if m != nil {
		return m.WithMessage
	}
	return ""
}

func (m *ApplyContactReq) GetFromType() int32 {
	if m != nil {
		return m.FromType
	}
	return 0
}

func (m *ApplyContactReq) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *ApplyContactReq) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *ApplyContactReq) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *ApplyContactReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *ApplyContactReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

type ApplyContactResult struct {
	FromApplyId   int32     `protobuf:"varint,1,opt,name=from_apply_id,json=fromApplyId,proto3" json:"from_apply_id,omitempty"`
	FromReplyId   int32     `protobuf:"varint,2,opt,name=from_reply_id,json=fromReplyId,proto3" json:"from_reply_id,omitempty"`
	ToApplyId     int32     `protobuf:"varint,3,opt,name=to_apply_id,json=toApplyId,proto3" json:"to_apply_id,omitempty"`
	ToReplyId     int32     `protobuf:"varint,4,opt,name=to_reply_id,json=toReplyId,proto3" json:"to_reply_id,omitempty"`
	Date          int32     `protobuf:"varint,5,opt,name=date,proto3" json:"date,omitempty"`
	ToUnreadCount int32     `protobuf:"varint,6,opt,name=to_unread_count,json=toUnreadCount,proto3" json:"to_unread_count,omitempty"`
	AddContact    bool      `protobuf:"varint,7,opt,name=add_contact,json=addContact,proto3" json:"add_contact,omitempty"`
	Errorcode     ReErrCode `protobuf:"varint,8,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *ApplyContactResult) Reset()         { *m = ApplyContactResult{} }
func (m *ApplyContactResult) String() string { return proto.CompactTextString(m) }
func (*ApplyContactResult) ProtoMessage()    {}
func (*ApplyContactResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{316}
}

func (m *ApplyContactResult) GetFromApplyId() int32 {
	if m != nil {
		return m.FromApplyId
	}
	return 0
}

func (m *ApplyContactResult) GetFromReplyId() int32 {
	if m != nil {
		return m.FromReplyId
	}
	return 0
}

func (m *ApplyContactResult) GetToApplyId() int32 {
	if m != nil {
		return m.ToApplyId
	}
	return 0
}

func (m *ApplyContactResult) GetToReplyId() int32 {
	if m != nil {
		return m.ToReplyId
	}
	return 0
}

func (m *ApplyContactResult) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *ApplyContactResult) GetToUnreadCount() int32 {
	if m != nil {
		return m.ToUnreadCount
	}
	return 0
}

func (m *ApplyContactResult) GetAddContact() bool {
	if m != nil {
		return m.AddContact
	}
	return false
}

func (m *ApplyContactResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

type ContactsGreetApplyReq struct {
	UserId  int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ApplyId int32         `protobuf:"varint,2,opt,name=apply_id,json=applyId,proto3" json:"apply_id,omitempty"`
	Greet   string        `protobuf:"bytes,3,opt,name=greet,proto3" json:"greet,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ContactsGreetApplyReq) Reset()         { *m = ContactsGreetApplyReq{} }
func (m *ContactsGreetApplyReq) String() string { return proto.CompactTextString(m) }
func (*ContactsGreetApplyReq) ProtoMessage()    {}
func (*ContactsGreetApplyReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{317}
}

func (m *ContactsGreetApplyReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ContactsGreetApplyReq) GetApplyId() int32 {
	if m != nil {
		return m.ApplyId
	}
	return 0
}

func (m *ContactsGreetApplyReq) GetGreet() string {
	if m != nil {
		return m.Greet
	}
	return ""
}

func (m *ContactsGreetApplyReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ContactsGreetApplyResult struct {
	FromApplyId int32     `protobuf:"varint,1,opt,name=from_apply_id,json=fromApplyId,proto3" json:"from_apply_id,omitempty"`
	FromReplyId int32     `protobuf:"varint,2,opt,name=from_reply_id,json=fromReplyId,proto3" json:"from_reply_id,omitempty"`
	ToApplyId   int32     `protobuf:"varint,3,opt,name=to_apply_id,json=toApplyId,proto3" json:"to_apply_id,omitempty"`
	ToReplyId   int32     `protobuf:"varint,4,opt,name=to_reply_id,json=toReplyId,proto3" json:"to_reply_id,omitempty"`
	UserId      int32     `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UnreadCount int32     `protobuf:"varint,6,opt,name=unread_count,json=unreadCount,proto3" json:"unread_count,omitempty"`
	Errorcode   ReErrCode `protobuf:"varint,7,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *ContactsGreetApplyResult) Reset()         { *m = ContactsGreetApplyResult{} }
func (m *ContactsGreetApplyResult) String() string { return proto.CompactTextString(m) }
func (*ContactsGreetApplyResult) ProtoMessage()    {}
func (*ContactsGreetApplyResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{318}
}

func (m *ContactsGreetApplyResult) GetFromApplyId() int32 {
	if m != nil {
		return m.FromApplyId
	}
	return 0
}

func (m *ContactsGreetApplyResult) GetFromReplyId() int32 {
	if m != nil {
		return m.FromReplyId
	}
	return 0
}

func (m *ContactsGreetApplyResult) GetToApplyId() int32 {
	if m != nil {
		return m.ToApplyId
	}
	return 0
}

func (m *ContactsGreetApplyResult) GetToReplyId() int32 {
	if m != nil {
		return m.ToReplyId
	}
	return 0
}

func (m *ContactsGreetApplyResult) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ContactsGreetApplyResult) GetUnreadCount() int32 {
	if m != nil {
		return m.UnreadCount
	}
	return 0
}

func (m *ContactsGreetApplyResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

type GetAppliedContactsReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *GetAppliedContactsReq) Reset()         { *m = GetAppliedContactsReq{} }
func (m *GetAppliedContactsReq) String() string { return proto.CompactTextString(m) }
func (*GetAppliedContactsReq) ProtoMessage()    {}
func (*GetAppliedContactsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{319}
}

func (m *GetAppliedContactsReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GetAppliedContactsResult struct {
	Error      bool       `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Message    string     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	AppliedArr []*Applied `protobuf:"bytes,3,rep,name=applied_arr,json=appliedArr" json:"applied_arr,omitempty"`
}

func (m *GetAppliedContactsResult) Reset()         { *m = GetAppliedContactsResult{} }
func (m *GetAppliedContactsResult) String() string { return proto.CompactTextString(m) }
func (*GetAppliedContactsResult) ProtoMessage()    {}
func (*GetAppliedContactsResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{320}
}

func (m *GetAppliedContactsResult) GetError() bool {
	if m != nil {
		return m.Error
	}
	return false
}

func (m *GetAppliedContactsResult) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *GetAppliedContactsResult) GetAppliedArr() []*Applied {
	if m != nil {
		return m.AppliedArr
	}
	return nil
}

type Applied struct {
	Id          int64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId      int32     `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ApplyUser   *UserInfo `protobuf:"bytes,3,opt,name=apply_user,json=applyUser" json:"apply_user,omitempty"`
	WithMessage string    `protobuf:"bytes,4,opt,name=with_message,json=withMessage,proto3" json:"with_message,omitempty"`
	Status      int32     `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	Flag        int32     `protobuf:"varint,6,opt,name=flag,proto3" json:"flag,omitempty"`
	Gender      int32     `protobuf:"varint,7,opt,name=gender,proto3" json:"gender,omitempty"`
	Email       string    `protobuf:"bytes,8,opt,name=email,proto3" json:"email,omitempty"`
	Country     string    `protobuf:"bytes,9,opt,name=Country,proto3" json:"Country,omitempty"`
	City        string    `protobuf:"bytes,10,opt,name=City,proto3" json:"City,omitempty"`
	Detail      string    `protobuf:"bytes,11,opt,name=Detail,proto3" json:"Detail,omitempty"`
}

func (m *Applied) Reset()                    { *m = Applied{} }
func (m *Applied) String() string            { return proto.CompactTextString(m) }
func (*Applied) ProtoMessage()               {}
func (*Applied) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{321} }

func (m *Applied) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Applied) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Applied) GetApplyUser() *UserInfo {
	if m != nil {
		return m.ApplyUser
	}
	return nil
}

func (m *Applied) GetWithMessage() string {
	if m != nil {
		return m.WithMessage
	}
	return ""
}

func (m *Applied) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Applied) GetFlag() int32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (m *Applied) GetGender() int32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *Applied) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Applied) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Applied) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Applied) GetDetail() string {
	if m != nil {
		return m.Detail
	}
	return ""
}

type VerifyContactReq struct {
	Id           int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	VerifyUserId int32 `protobuf:"varint,3,opt,name=verify_user_id,json=verifyUserId,proto3" json:"verify_user_id,omitempty"`
	Status       int32 `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *VerifyContactReq) Reset()                    { *m = VerifyContactReq{} }
func (m *VerifyContactReq) String() string            { return proto.CompactTextString(m) }
func (*VerifyContactReq) ProtoMessage()               {}
func (*VerifyContactReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{322} }

func (m *VerifyContactReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *VerifyContactReq) GetVerifyUserId() int32 {
	if m != nil {
		return m.VerifyUserId
	}
	return 0
}

func (m *VerifyContactReq) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type VerifyContactResult struct {
	Error   bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *VerifyContactResult) Reset()         { *m = VerifyContactResult{} }
func (m *VerifyContactResult) String() string { return proto.CompactTextString(m) }
func (*VerifyContactResult) ProtoMessage()    {}
func (*VerifyContactResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{323}
}

func (m *VerifyContactResult) GetError() bool {
	if m != nil {
		return m.Error
	}
	return false
}

func (m *VerifyContactResult) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DeleteAppliedHistoryContactReq struct {
	MaxId  int32         `protobuf:"varint,1,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	UserId int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *DeleteAppliedHistoryContactReq) Reset()         { *m = DeleteAppliedHistoryContactReq{} }
func (m *DeleteAppliedHistoryContactReq) String() string { return proto.CompactTextString(m) }
func (*DeleteAppliedHistoryContactReq) ProtoMessage()    {}
func (*DeleteAppliedHistoryContactReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{324}
}

func (m *DeleteAppliedHistoryContactReq) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *DeleteAppliedHistoryContactReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DeleteAppliedHistoryContactReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type DeleteAppliedHistoryContactResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *DeleteAppliedHistoryContactResult) Reset()         { *m = DeleteAppliedHistoryContactResult{} }
func (m *DeleteAppliedHistoryContactResult) String() string { return proto.CompactTextString(m) }
func (*DeleteAppliedHistoryContactResult) ProtoMessage()    {}
func (*DeleteAppliedHistoryContactResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{325}
}

func (m *DeleteAppliedHistoryContactResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

type DeleteAppliedSomeContactReq struct {
	Id     []int32       `protobuf:"varint,1,rep,packed,name=id" json:"id,omitempty"`
	UserId int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *DeleteAppliedSomeContactReq) Reset()         { *m = DeleteAppliedSomeContactReq{} }
func (m *DeleteAppliedSomeContactReq) String() string { return proto.CompactTextString(m) }
func (*DeleteAppliedSomeContactReq) ProtoMessage()    {}
func (*DeleteAppliedSomeContactReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{326}
}

func (m *DeleteAppliedSomeContactReq) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *DeleteAppliedSomeContactReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DeleteAppliedSomeContactReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type DeleteAppliedSomeContactResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *DeleteAppliedSomeContactResult) Reset()         { *m = DeleteAppliedSomeContactResult{} }
func (m *DeleteAppliedSomeContactResult) String() string { return proto.CompactTextString(m) }
func (*DeleteAppliedSomeContactResult) ProtoMessage()    {}
func (*DeleteAppliedSomeContactResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{327}
}

func (m *DeleteAppliedSomeContactResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

type ReadAppliedHistoryReq struct {
	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReadAppliedHistoryReq) Reset()         { *m = ReadAppliedHistoryReq{} }
func (m *ReadAppliedHistoryReq) String() string { return proto.CompactTextString(m) }
func (*ReadAppliedHistoryReq) ProtoMessage()    {}
func (*ReadAppliedHistoryReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{328}
}

func (m *ReadAppliedHistoryReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReadAppliedHistoryReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReadAppliedHistoryResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *ReadAppliedHistoryResult) Reset()         { *m = ReadAppliedHistoryResult{} }
func (m *ReadAppliedHistoryResult) String() string { return proto.CompactTextString(m) }
func (*ReadAppliedHistoryResult) ProtoMessage()    {}
func (*ReadAppliedHistoryResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{329}
}

func (m *ReadAppliedHistoryResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

type GetContactsApplyDifferenceReq struct {
	UserId  int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ApplyId int32         `protobuf:"varint,2,opt,name=apply_id,json=applyId,proto3" json:"apply_id,omitempty"`
	Limit   int32         `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Date    int32         `protobuf:"varint,4,opt,name=date,proto3" json:"date,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetContactsApplyDifferenceReq) Reset()         { *m = GetContactsApplyDifferenceReq{} }
func (m *GetContactsApplyDifferenceReq) String() string { return proto.CompactTextString(m) }
func (*GetContactsApplyDifferenceReq) ProtoMessage()    {}
func (*GetContactsApplyDifferenceReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{330}
}

func (m *GetContactsApplyDifferenceReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetContactsApplyDifferenceReq) GetApplyId() int32 {
	if m != nil {
		return m.ApplyId
	}
	return 0
}

func (m *GetContactsApplyDifferenceReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetContactsApplyDifferenceReq) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *GetContactsApplyDifferenceReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ApplyDifference struct {
	ApplyId  int32  `protobuf:"varint,1,opt,name=apply_id,json=applyId,proto3" json:"apply_id,omitempty"`
	ReplyId  int32  `protobuf:"varint,2,opt,name=reply_id,json=replyId,proto3" json:"reply_id,omitempty"`
	UserId   int32  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Date     int32  `protobuf:"varint,4,opt,name=date,proto3" json:"date,omitempty"`
	State    int32  `protobuf:"varint,5,opt,name=state,proto3" json:"state,omitempty"`
	Greet    string `protobuf:"bytes,6,opt,name=greet,proto3" json:"greet,omitempty"`
	FromType int32  `protobuf:"varint,7,opt,name=from_type,json=fromType,proto3" json:"from_type,omitempty"`
}

func (m *ApplyDifference) Reset()                    { *m = ApplyDifference{} }
func (m *ApplyDifference) String() string            { return proto.CompactTextString(m) }
func (*ApplyDifference) ProtoMessage()               {}
func (*ApplyDifference) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{331} }

func (m *ApplyDifference) GetApplyId() int32 {
	if m != nil {
		return m.ApplyId
	}
	return 0
}

func (m *ApplyDifference) GetReplyId() int32 {
	if m != nil {
		return m.ReplyId
	}
	return 0
}

func (m *ApplyDifference) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ApplyDifference) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *ApplyDifference) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *ApplyDifference) GetGreet() string {
	if m != nil {
		return m.Greet
	}
	return ""
}

func (m *ApplyDifference) GetFromType() int32 {
	if m != nil {
		return m.FromType
	}
	return 0
}

type GetContactsApplyDifferenceResult struct {
	Applies     []*ApplyDifference `protobuf:"bytes,1,rep,name=applies" json:"applies,omitempty"`
	MaxApplyId  int32              `protobuf:"varint,2,opt,name=max_apply_id,json=maxApplyId,proto3" json:"max_apply_id,omitempty"`
	UnreadCount int32              `protobuf:"varint,3,opt,name=unread_count,json=unreadCount,proto3" json:"unread_count,omitempty"`
	Errorcode   ReErrCode          `protobuf:"varint,4,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *GetContactsApplyDifferenceResult) Reset()         { *m = GetContactsApplyDifferenceResult{} }
func (m *GetContactsApplyDifferenceResult) String() string { return proto.CompactTextString(m) }
func (*GetContactsApplyDifferenceResult) ProtoMessage()    {}
func (*GetContactsApplyDifferenceResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{332}
}

func (m *GetContactsApplyDifferenceResult) GetApplies() []*ApplyDifference {
	if m != nil {
		return m.Applies
	}
	return nil
}

func (m *GetContactsApplyDifferenceResult) GetMaxApplyId() int32 {
	if m != nil {
		return m.MaxApplyId
	}
	return 0
}

func (m *GetContactsApplyDifferenceResult) GetUnreadCount() int32 {
	if m != nil {
		return m.UnreadCount
	}
	return 0
}

func (m *GetContactsApplyDifferenceResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

type GetContactsApplyDifferenceV2Req struct {
	UserId  int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ApplyId int32         `protobuf:"varint,2,opt,name=apply_id,json=applyId,proto3" json:"apply_id,omitempty"`
	Limit   int32         `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Date    int32         `protobuf:"varint,4,opt,name=date,proto3" json:"date,omitempty"`
	Hash    int64         `protobuf:"varint,5,opt,name=hash,proto3" json:"hash,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetContactsApplyDifferenceV2Req) Reset()         { *m = GetContactsApplyDifferenceV2Req{} }
func (m *GetContactsApplyDifferenceV2Req) String() string { return proto.CompactTextString(m) }
func (*GetContactsApplyDifferenceV2Req) ProtoMessage()    {}
func (*GetContactsApplyDifferenceV2Req) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{333}
}

func (m *GetContactsApplyDifferenceV2Req) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetContactsApplyDifferenceV2Req) GetApplyId() int32 {
	if m != nil {
		return m.ApplyId
	}
	return 0
}

func (m *GetContactsApplyDifferenceV2Req) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetContactsApplyDifferenceV2Req) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *GetContactsApplyDifferenceV2Req) GetHash() int64 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *GetContactsApplyDifferenceV2Req) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type GetContactsApplyDifferenceV2Result struct {
	Applies     []*ApplyDifference `protobuf:"bytes,1,rep,name=applies" json:"applies,omitempty"`
	MaxApplyId  int32              `protobuf:"varint,2,opt,name=max_apply_id,json=maxApplyId,proto3" json:"max_apply_id,omitempty"`
	UnreadCount int32              `protobuf:"varint,3,opt,name=unread_count,json=unreadCount,proto3" json:"unread_count,omitempty"`
	Hash        int64              `protobuf:"varint,4,opt,name=hash,proto3" json:"hash,omitempty"`
	Errorcode   ReErrCode          `protobuf:"varint,5,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *GetContactsApplyDifferenceV2Result) Reset()         { *m = GetContactsApplyDifferenceV2Result{} }
func (m *GetContactsApplyDifferenceV2Result) String() string { return proto.CompactTextString(m) }
func (*GetContactsApplyDifferenceV2Result) ProtoMessage()    {}
func (*GetContactsApplyDifferenceV2Result) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{334}
}

func (m *GetContactsApplyDifferenceV2Result) GetApplies() []*ApplyDifference {
	if m != nil {
		return m.Applies
	}
	return nil
}

func (m *GetContactsApplyDifferenceV2Result) GetMaxApplyId() int32 {
	if m != nil {
		return m.MaxApplyId
	}
	return 0
}

func (m *GetContactsApplyDifferenceV2Result) GetUnreadCount() int32 {
	if m != nil {
		return m.UnreadCount
	}
	return 0
}

func (m *GetContactsApplyDifferenceV2Result) GetHash() int64 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *GetContactsApplyDifferenceV2Result) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

type SearchUserByPhoneReq struct {
	SelfId int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	Phone  string        `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *SearchUserByPhoneReq) Reset()         { *m = SearchUserByPhoneReq{} }
func (m *SearchUserByPhoneReq) String() string { return proto.CompactTextString(m) }
func (*SearchUserByPhoneReq) ProtoMessage()    {}
func (*SearchUserByPhoneReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{335}
}

func (m *SearchUserByPhoneReq) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *SearchUserByPhoneReq) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *SearchUserByPhoneReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type SearchUserByPhoneResult struct {
	UserInfos []*UserInfo `protobuf:"bytes,1,rep,name=user_infos,json=userInfos" json:"user_infos,omitempty"`
	Gender    int32       `protobuf:"varint,2,opt,name=gender,proto3" json:"gender,omitempty"`
	Email     string      `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Country   string      `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
	City      string      `protobuf:"bytes,5,opt,name=City,proto3" json:"City,omitempty"`
	Detail    string      `protobuf:"bytes,6,opt,name=Detail,proto3" json:"Detail,omitempty"`
	Errorcode ReErrCode   `protobuf:"varint,7,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *SearchUserByPhoneResult) Reset()         { *m = SearchUserByPhoneResult{} }
func (m *SearchUserByPhoneResult) String() string { return proto.CompactTextString(m) }
func (*SearchUserByPhoneResult) ProtoMessage()    {}
func (*SearchUserByPhoneResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{336}
}

func (m *SearchUserByPhoneResult) GetUserInfos() []*UserInfo {
	if m != nil {
		return m.UserInfos
	}
	return nil
}

func (m *SearchUserByPhoneResult) GetGender() int32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *SearchUserByPhoneResult) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *SearchUserByPhoneResult) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *SearchUserByPhoneResult) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *SearchUserByPhoneResult) GetDetail() string {
	if m != nil {
		return m.Detail
	}
	return ""
}

func (m *SearchUserByPhoneResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

type CreateGroupReq struct {
	SelfId    int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	UserIdArr []int32       `protobuf:"varint,2,rep,packed,name=user_id_arr,json=userIdArr" json:"user_id_arr,omitempty"`
	Title     string        `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *CreateGroupReq) Reset()                    { *m = CreateGroupReq{} }
func (m *CreateGroupReq) String() string            { return proto.CompactTextString(m) }
func (*CreateGroupReq) ProtoMessage()               {}
func (*CreateGroupReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{337} }

func (m *CreateGroupReq) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *CreateGroupReq) GetUserIdArr() []int32 {
	if m != nil {
		return m.UserIdArr
	}
	return nil
}

func (m *CreateGroupReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CreateGroupReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type CreateGroupResult struct {
	GroupId   int32     `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Order     int32     `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`
	Date      int32     `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,4,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *CreateGroupResult) Reset()         { *m = CreateGroupResult{} }
func (m *CreateGroupResult) String() string { return proto.CompactTextString(m) }
func (*CreateGroupResult) ProtoMessage()    {}
func (*CreateGroupResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{338}
}

func (m *CreateGroupResult) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *CreateGroupResult) GetOrder() int32 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *CreateGroupResult) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *CreateGroupResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

type SetUserGroupReq struct {
	SelfId    int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	UserInfos []*UserInfo   `protobuf:"bytes,2,rep,name=user_infos,json=userInfos" json:"user_infos,omitempty"`
	GroupId   int32         `protobuf:"varint,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *SetUserGroupReq) Reset()                    { *m = SetUserGroupReq{} }
func (m *SetUserGroupReq) String() string            { return proto.CompactTextString(m) }
func (*SetUserGroupReq) ProtoMessage()               {}
func (*SetUserGroupReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{339} }

func (m *SetUserGroupReq) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *SetUserGroupReq) GetUserInfos() []*UserInfo {
	if m != nil {
		return m.UserInfos
	}
	return nil
}

func (m *SetUserGroupReq) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *SetUserGroupReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type SetUserGroupResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *SetUserGroupResult) Reset()         { *m = SetUserGroupResult{} }
func (m *SetUserGroupResult) String() string { return proto.CompactTextString(m) }
func (*SetUserGroupResult) ProtoMessage()    {}
func (*SetUserGroupResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{340}
}

func (m *SetUserGroupResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// getfull user的请求
type GetFullUserReq struct {
	SelfId     int32         `protobuf:"varint,1,opt,name=selfId,proto3" json:"selfId,omitempty"`
	UserId     int32         `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	AccessHash int64         `protobuf:"varint,3,opt,name=AccessHash,proto3" json:"AccessHash,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetFullUserReq) Reset()                    { *m = GetFullUserReq{} }
func (m *GetFullUserReq) String() string            { return proto.CompactTextString(m) }
func (*GetFullUserReq) ProtoMessage()               {}
func (*GetFullUserReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{341} }

func (m *GetFullUserReq) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *GetFullUserReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetFullUserReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *GetFullUserReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// getfull user的请求
type GetFullUserResult struct {
	Uinfo               *UserInfo `protobuf:"bytes,1,opt,name=uinfo" json:"uinfo,omitempty"`
	Isblocked           bool      `protobuf:"varint,2,opt,name=isblocked,proto3" json:"isblocked,omitempty"`
	PhoneCallsPrivate   bool      `protobuf:"varint,3,opt,name=phone_calls_private,json=phoneCallsPrivate,proto3" json:"phone_calls_private,omitempty"`
	PhoneCallsAvailable bool      `protobuf:"varint,4,opt,name=phone_calls_available,json=phoneCallsAvailable,proto3" json:"phone_calls_available,omitempty"`
	About               string    `protobuf:"bytes,5,opt,name=about,proto3" json:"about,omitempty"`
	CommonChat          int32     `protobuf:"varint,6,opt,name=common_chat,json=commonChat,proto3" json:"common_chat,omitempty"`
	Extend              string    `protobuf:"bytes,7,opt,name=extend,proto3" json:"extend,omitempty"`
	Errorcode           ReErrCode `protobuf:"varint,8,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *GetFullUserResult) Reset()         { *m = GetFullUserResult{} }
func (m *GetFullUserResult) String() string { return proto.CompactTextString(m) }
func (*GetFullUserResult) ProtoMessage()    {}
func (*GetFullUserResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{342}
}

func (m *GetFullUserResult) GetUinfo() *UserInfo {
	if m != nil {
		return m.Uinfo
	}
	return nil
}

func (m *GetFullUserResult) GetIsblocked() bool {
	if m != nil {
		return m.Isblocked
	}
	return false
}

func (m *GetFullUserResult) GetPhoneCallsPrivate() bool {
	if m != nil {
		return m.PhoneCallsPrivate
	}
	return false
}

func (m *GetFullUserResult) GetPhoneCallsAvailable() bool {
	if m != nil {
		return m.PhoneCallsAvailable
	}
	return false
}

func (m *GetFullUserResult) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *GetFullUserResult) GetCommonChat() int32 {
	if m != nil {
		return m.CommonChat
	}
	return 0
}

func (m *GetFullUserResult) GetExtend() string {
	if m != nil {
		return m.Extend
	}
	return ""
}

func (m *GetFullUserResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

type GetUserExpansionReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (m *GetUserExpansionReq) Reset()         { *m = GetUserExpansionReq{} }
func (m *GetUserExpansionReq) String() string { return proto.CompactTextString(m) }
func (*GetUserExpansionReq) ProtoMessage()    {}
func (*GetUserExpansionReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{343}
}

func (m *GetUserExpansionReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GetUserExpansionResult struct {
	Data    string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Version int32  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *GetUserExpansionResult) Reset()         { *m = GetUserExpansionResult{} }
func (m *GetUserExpansionResult) String() string { return proto.CompactTextString(m) }
func (*GetUserExpansionResult) ProtoMessage()    {}
func (*GetUserExpansionResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{344}
}

func (m *GetUserExpansionResult) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *GetUserExpansionResult) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type ChangeGroupOrderReq struct {
	SelfId     int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	GroupOrder []*GroupOrder `protobuf:"bytes,2,rep,name=group_order,json=groupOrder" json:"group_order,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *ChangeGroupOrderReq) Reset()         { *m = ChangeGroupOrderReq{} }
func (m *ChangeGroupOrderReq) String() string { return proto.CompactTextString(m) }
func (*ChangeGroupOrderReq) ProtoMessage()    {}
func (*ChangeGroupOrderReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{345}
}

func (m *ChangeGroupOrderReq) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *ChangeGroupOrderReq) GetGroupOrder() []*GroupOrder {
	if m != nil {
		return m.GroupOrder
	}
	return nil
}

func (m *ChangeGroupOrderReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type GroupOrder struct {
	GroupId     int32  `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	OrderId     int32  `protobuf:"varint,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Title       string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Date        int32  `protobuf:"varint,4,opt,name=date,proto3" json:"date,omitempty"`
	UnreadCount int32  `protobuf:"varint,5,opt,name=unread_count,json=unreadCount,proto3" json:"unread_count,omitempty"`
}

func (m *GroupOrder) Reset()                    { *m = GroupOrder{} }
func (m *GroupOrder) String() string            { return proto.CompactTextString(m) }
func (*GroupOrder) ProtoMessage()               {}
func (*GroupOrder) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{346} }

func (m *GroupOrder) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupOrder) GetOrderId() int32 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *GroupOrder) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *GroupOrder) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *GroupOrder) GetUnreadCount() int32 {
	if m != nil {
		return m.UnreadCount
	}
	return 0
}

type ChangeGroupOrderResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *ChangeGroupOrderResult) Reset()         { *m = ChangeGroupOrderResult{} }
func (m *ChangeGroupOrderResult) String() string { return proto.CompactTextString(m) }
func (*ChangeGroupOrderResult) ProtoMessage()    {}
func (*ChangeGroupOrderResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{347}
}

func (m *ChangeGroupOrderResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

type DeleteGroupReq struct {
	UserId  int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GroupId int32         `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *DeleteGroupReq) Reset()                    { *m = DeleteGroupReq{} }
func (m *DeleteGroupReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteGroupReq) ProtoMessage()               {}
func (*DeleteGroupReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{348} }

func (m *DeleteGroupReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DeleteGroupReq) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *DeleteGroupReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type DeleteGroupResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *DeleteGroupResult) Reset()         { *m = DeleteGroupResult{} }
func (m *DeleteGroupResult) String() string { return proto.CompactTextString(m) }
func (*DeleteGroupResult) ProtoMessage()    {}
func (*DeleteGroupResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{349}
}

func (m *DeleteGroupResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

type DeleteGroupsReq struct {
	UserId   int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GroupIds []int32       `protobuf:"varint,2,rep,packed,name=group_ids,json=groupIds" json:"group_ids,omitempty"`
	Debug    *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *DeleteGroupsReq) Reset()                    { *m = DeleteGroupsReq{} }
func (m *DeleteGroupsReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteGroupsReq) ProtoMessage()               {}
func (*DeleteGroupsReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{350} }

func (m *DeleteGroupsReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DeleteGroupsReq) GetGroupIds() []int32 {
	if m != nil {
		return m.GroupIds
	}
	return nil
}

func (m *DeleteGroupsReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type DeleteGroupsResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *DeleteGroupsResult) Reset()         { *m = DeleteGroupsResult{} }
func (m *DeleteGroupsResult) String() string { return proto.CompactTextString(m) }
func (*DeleteGroupsResult) ProtoMessage()    {}
func (*DeleteGroupsResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{351}
}

func (m *DeleteGroupsResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 获取客服列表请求
type GetCustomerListReq struct {
	// 是否是定向客服
	IsOrient bool `protobuf:"varint,1,opt,name=IsOrient,proto3" json:"IsOrient,omitempty"`
}

func (m *GetCustomerListReq) Reset()         { *m = GetCustomerListReq{} }
func (m *GetCustomerListReq) String() string { return proto.CompactTextString(m) }
func (*GetCustomerListReq) ProtoMessage()    {}
func (*GetCustomerListReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{352}
}

func (m *GetCustomerListReq) GetIsOrient() bool {
	if m != nil {
		return m.IsOrient
	}
	return false
}

// 客服列表结体
type CustomerList struct {
	UserId int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Phone  string `protobuf:"bytes,2,opt,name=Phone,proto3" json:"Phone,omitempty"`
	// 是否定向客服
	IsOrient bool `protobuf:"varint,3,opt,name=IsOrient,proto3" json:"IsOrient,omitempty"`
	// 打招呼文案
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// 排序字段，数值越小越靠前
	Sort int32 `protobuf:"varint,5,opt,name=Sort,proto3" json:"Sort,omitempty"`
}

func (m *CustomerList) Reset()                    { *m = CustomerList{} }
func (m *CustomerList) String() string            { return proto.CompactTextString(m) }
func (*CustomerList) ProtoMessage()               {}
func (*CustomerList) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{353} }

func (m *CustomerList) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CustomerList) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *CustomerList) GetIsOrient() bool {
	if m != nil {
		return m.IsOrient
	}
	return false
}

func (m *CustomerList) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CustomerList) GetSort() int32 {
	if m != nil {
		return m.Sort
	}
	return 0
}

// 获取定向客服列表响应
type GetCustomerListReply struct {
	// 返回的用户id数组
	Customers []*CustomerList `protobuf:"bytes,1,rep,name=Customers" json:"Customers,omitempty"`
	// 错误码
	ErrorCode ReErrCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.ReErrCode" json:"ErrorCode,omitempty"`
}

func (m *GetCustomerListReply) Reset()         { *m = GetCustomerListReply{} }
func (m *GetCustomerListReply) String() string { return proto.CompactTextString(m) }
func (*GetCustomerListReply) ProtoMessage()    {}
func (*GetCustomerListReply) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{354}
}

func (m *GetCustomerListReply) GetCustomers() []*CustomerList {
	if m != nil {
		return m.Customers
	}
	return nil
}

func (m *GetCustomerListReply) GetErrorCode() ReErrCode {
	if m != nil {
		return m.ErrorCode
	}
	return ReErrCode_Success
}

type IsCustomerByUserIdReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (m *IsCustomerByUserIdReq) Reset()         { *m = IsCustomerByUserIdReq{} }
func (m *IsCustomerByUserIdReq) String() string { return proto.CompactTextString(m) }
func (*IsCustomerByUserIdReq) ProtoMessage()    {}
func (*IsCustomerByUserIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{355}
}

func (m *IsCustomerByUserIdReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type IsCustomerByUserIdReply struct {
	ErrorCode ReErrCode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=pbimuinfoserver.ReErrCode" json:"error_code,omitempty"`
	Yes       bool      `protobuf:"varint,2,opt,name=yes,proto3" json:"yes,omitempty"`
}

func (m *IsCustomerByUserIdReply) Reset()         { *m = IsCustomerByUserIdReply{} }
func (m *IsCustomerByUserIdReply) String() string { return proto.CompactTextString(m) }
func (*IsCustomerByUserIdReply) ProtoMessage()    {}
func (*IsCustomerByUserIdReply) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{356}
}

func (m *IsCustomerByUserIdReply) GetErrorCode() ReErrCode {
	if m != nil {
		return m.ErrorCode
	}
	return ReErrCode_Success
}

func (m *IsCustomerByUserIdReply) GetYes() bool {
	if m != nil {
		return m.Yes
	}
	return false
}

// 获取指定客服的用户列表请求
type GetCustomerOrientUsersReq struct {
	// 用户id
	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (m *GetCustomerOrientUsersReq) Reset()         { *m = GetCustomerOrientUsersReq{} }
func (m *GetCustomerOrientUsersReq) String() string { return proto.CompactTextString(m) }
func (*GetCustomerOrientUsersReq) ProtoMessage()    {}
func (*GetCustomerOrientUsersReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{357}
}

func (m *GetCustomerOrientUsersReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// 获取指定客服的用户列表响应
type GetCustomerOrientUsersReply struct {
	// 返回的用户id数组
	UserIds []int32 `protobuf:"varint,1,rep,packed,name=UserIds" json:"UserIds,omitempty"`
	// 错误码
	ErrorCode ReErrCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.ReErrCode" json:"ErrorCode,omitempty"`
	// 注册时问候语
	Description string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
}

func (m *GetCustomerOrientUsersReply) Reset()         { *m = GetCustomerOrientUsersReply{} }
func (m *GetCustomerOrientUsersReply) String() string { return proto.CompactTextString(m) }
func (*GetCustomerOrientUsersReply) ProtoMessage()    {}
func (*GetCustomerOrientUsersReply) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{358}
}

func (m *GetCustomerOrientUsersReply) GetUserIds() []int32 {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func (m *GetCustomerOrientUsersReply) GetErrorCode() ReErrCode {
	if m != nil {
		return m.ErrorCode
	}
	return ReErrCode_Success
}

func (m *GetCustomerOrientUsersReply) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// 检测用户Id是否是特权消息账号请求
type CheckSpecialUserReq struct {
	// 用户id
	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (m *CheckSpecialUserReq) Reset()         { *m = CheckSpecialUserReq{} }
func (m *CheckSpecialUserReq) String() string { return proto.CompactTextString(m) }
func (*CheckSpecialUserReq) ProtoMessage()    {}
func (*CheckSpecialUserReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{359}
}

func (m *CheckSpecialUserReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// 检测用户Id是否是特权消息账号响应
type CheckSpecialUserReply struct {
	// 用户id
	IsSpecial bool `protobuf:"varint,1,opt,name=IsSpecial,proto3" json:"IsSpecial,omitempty"`
}

func (m *CheckSpecialUserReply) Reset()         { *m = CheckSpecialUserReply{} }
func (m *CheckSpecialUserReply) String() string { return proto.CompactTextString(m) }
func (*CheckSpecialUserReply) ProtoMessage()    {}
func (*CheckSpecialUserReply) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{360}
}

func (m *CheckSpecialUserReply) GetIsSpecial() bool {
	if m != nil {
		return m.IsSpecial
	}
	return false
}

// 获取强制加入群组ids请求
type GetForceGroupListReq struct {
}

func (m *GetForceGroupListReq) Reset()         { *m = GetForceGroupListReq{} }
func (m *GetForceGroupListReq) String() string { return proto.CompactTextString(m) }
func (*GetForceGroupListReq) ProtoMessage()    {}
func (*GetForceGroupListReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{361}
}

// 获取强制加入群组ids响应
type GetForceGroupListReply struct {
	GroupIds  []int32   `protobuf:"varint,1,rep,packed,name=GroupIds" json:"GroupIds,omitempty"`
	ErrorCode ReErrCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.ReErrCode" json:"ErrorCode,omitempty"`
}

func (m *GetForceGroupListReply) Reset()         { *m = GetForceGroupListReply{} }
func (m *GetForceGroupListReply) String() string { return proto.CompactTextString(m) }
func (*GetForceGroupListReply) ProtoMessage()    {}
func (*GetForceGroupListReply) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{362}
}

func (m *GetForceGroupListReply) GetGroupIds() []int32 {
	if m != nil {
		return m.GroupIds
	}
	return nil
}

func (m *GetForceGroupListReply) GetErrorCode() ReErrCode {
	if m != nil {
		return m.ErrorCode
	}
	return ReErrCode_Success
}

// 获取非强制加入群组ids请求
type GetNotForceGroupListReq struct {
}

func (m *GetNotForceGroupListReq) Reset()         { *m = GetNotForceGroupListReq{} }
func (m *GetNotForceGroupListReq) String() string { return proto.CompactTextString(m) }
func (*GetNotForceGroupListReq) ProtoMessage()    {}
func (*GetNotForceGroupListReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{363}
}

// 获取非强制加入群组ids响应
type GetNotForceGroupListReply struct {
	GroupIds  []int32   `protobuf:"varint,1,rep,packed,name=GroupIds" json:"GroupIds,omitempty"`
	ErrorCode ReErrCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.ReErrCode" json:"ErrorCode,omitempty"`
}

func (m *GetNotForceGroupListReply) Reset()         { *m = GetNotForceGroupListReply{} }
func (m *GetNotForceGroupListReply) String() string { return proto.CompactTextString(m) }
func (*GetNotForceGroupListReply) ProtoMessage()    {}
func (*GetNotForceGroupListReply) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{364}
}

func (m *GetNotForceGroupListReply) GetGroupIds() []int32 {
	if m != nil {
		return m.GroupIds
	}
	return nil
}

func (m *GetNotForceGroupListReply) GetErrorCode() ReErrCode {
	if m != nil {
		return m.ErrorCode
	}
	return ReErrCode_Success
}

// 密码注册请求
type PassWordRegistryReq struct {
	// user id
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 给用户生成的哈希值
	AccessHash int64 `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	// 用户账号
	UserName string `protobuf:"bytes,3,opt,name=UserName,proto3" json:"UserName,omitempty"`
	// 用户密码
	PassWord string `protobuf:"bytes,4,opt,name=PassWord,proto3" json:"PassWord,omitempty"`
	// 手机号码
	PhoneNumber string `protobuf:"bytes,5,opt,name=PhoneNumber,proto3" json:"PhoneNumber,omitempty"`
	// 邮箱
	Email     string `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	FirstName string `protobuf:"bytes,7,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,8,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	// 手机国家码
	CountryCode string `protobuf:"bytes,9,opt,name=CountryCode,proto3" json:"CountryCode,omitempty"`
	// 不含国家码的手机号
	LocalPhone string `protobuf:"bytes,10,opt,name=LocalPhone,proto3" json:"LocalPhone,omitempty"`
}

func (m *PassWordRegistryReq) Reset()         { *m = PassWordRegistryReq{} }
func (m *PassWordRegistryReq) String() string { return proto.CompactTextString(m) }
func (*PassWordRegistryReq) ProtoMessage()    {}
func (*PassWordRegistryReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{365}
}

func (m *PassWordRegistryReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *PassWordRegistryReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *PassWordRegistryReq) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *PassWordRegistryReq) GetPassWord() string {
	if m != nil {
		return m.PassWord
	}
	return ""
}

func (m *PassWordRegistryReq) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *PassWordRegistryReq) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *PassWordRegistryReq) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *PassWordRegistryReq) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *PassWordRegistryReq) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *PassWordRegistryReq) GetLocalPhone() string {
	if m != nil {
		return m.LocalPhone
	}
	return ""
}

// 密码注册响应
type PassWordRegistryReply struct {
	// 是否成功
	Success bool `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	// 错误码
	ErrorCode PasswordRegistryErrorCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.PasswordRegistryErrorCode" json:"ErrorCode,omitempty"`
	// 用户信息
	User *UserInfo `protobuf:"bytes,3,opt,name=User" json:"User,omitempty"`
}

func (m *PassWordRegistryReply) Reset()         { *m = PassWordRegistryReply{} }
func (m *PassWordRegistryReply) String() string { return proto.CompactTextString(m) }
func (*PassWordRegistryReply) ProtoMessage()    {}
func (*PassWordRegistryReply) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{366}
}

func (m *PassWordRegistryReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PassWordRegistryReply) GetErrorCode() PasswordRegistryErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return PasswordRegistryErrorCode_SUCCESS
}

func (m *PassWordRegistryReply) GetUser() *UserInfo {
	if m != nil {
		return m.User
	}
	return nil
}

// 密码登录请求
type PassWordLoginReq struct {
	// 用户账号
	UserName string `protobuf:"bytes,1,opt,name=UserName,proto3" json:"UserName,omitempty"`
	// 手机号码
	PhoneNum string `protobuf:"bytes,2,opt,name=PhoneNum,proto3" json:"PhoneNum,omitempty"`
	// 用户密码t
	Password string `protobuf:"bytes,3,opt,name=Password,proto3" json:"Password,omitempty"`
}

func (m *PassWordLoginReq) Reset()                    { *m = PassWordLoginReq{} }
func (m *PassWordLoginReq) String() string            { return proto.CompactTextString(m) }
func (*PassWordLoginReq) ProtoMessage()               {}
func (*PassWordLoginReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{367} }

func (m *PassWordLoginReq) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *PassWordLoginReq) GetPhoneNum() string {
	if m != nil {
		return m.PhoneNum
	}
	return ""
}

func (m *PassWordLoginReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// 密码登录响应
type PassWordLoginReply struct {
	// 是否成功
	Success bool `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	// 错误码
	ErrorCode PasswordRegistryErrorCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.PasswordRegistryErrorCode" json:"ErrorCode,omitempty"`
	// 用户信息
	User *UserInfo `protobuf:"bytes,3,opt,name=User" json:"User,omitempty"`
}

func (m *PassWordLoginReply) Reset()         { *m = PassWordLoginReply{} }
func (m *PassWordLoginReply) String() string { return proto.CompactTextString(m) }
func (*PassWordLoginReply) ProtoMessage()    {}
func (*PassWordLoginReply) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{368}
}

func (m *PassWordLoginReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PassWordLoginReply) GetErrorCode() PasswordRegistryErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return PasswordRegistryErrorCode_SUCCESS
}

func (m *PassWordLoginReply) GetUser() *UserInfo {
	if m != nil {
		return m.User
	}
	return nil
}

// 修改/找回密码请求
type ChangePassWordReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	// 新密码
	NewPassWord string `protobuf:"bytes,2,opt,name=NewPassWord,proto3" json:"NewPassWord,omitempty"`
}

func (m *ChangePassWordReq) Reset()         { *m = ChangePassWordReq{} }
func (m *ChangePassWordReq) String() string { return proto.CompactTextString(m) }
func (*ChangePassWordReq) ProtoMessage()    {}
func (*ChangePassWordReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{369}
}

func (m *ChangePassWordReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ChangePassWordReq) GetNewPassWord() string {
	if m != nil {
		return m.NewPassWord
	}
	return ""
}

// 修改/找回密码响应
type ChangePassWordReply struct {
	// 是否成功
	Success bool `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	// 错误码
	ErrorCode PasswordRegistryErrorCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=pbimuinfoserver.PasswordRegistryErrorCode" json:"ErrorCode,omitempty"`
	// 用户信息
	User *UserInfo `protobuf:"bytes,3,opt,name=User" json:"User,omitempty"`
}

func (m *ChangePassWordReply) Reset()         { *m = ChangePassWordReply{} }
func (m *ChangePassWordReply) String() string { return proto.CompactTextString(m) }
func (*ChangePassWordReply) ProtoMessage()    {}
func (*ChangePassWordReply) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{370}
}

func (m *ChangePassWordReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ChangePassWordReply) GetErrorCode() PasswordRegistryErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return PasswordRegistryErrorCode_SUCCESS
}

func (m *ChangePassWordReply) GetUser() *UserInfo {
	if m != nil {
		return m.User
	}
	return nil
}

// 通过用户名 密码注册用户
type RegistryUserByUsernameReq struct {
	// 用户账号
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// 用户密码
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// 手机号码
	PhoneNumber string `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// 邮箱
	Email     string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	FirstName string `protobuf:"bytes,5,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,6,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	// 手机国家码
	CountryCode string `protobuf:"bytes,7,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	// 不含国家码的手机号
	LocalPhone string `protobuf:"bytes,8,opt,name=local_phone,json=localPhone,proto3" json:"local_phone,omitempty"`
}

func (m *RegistryUserByUsernameReq) Reset()         { *m = RegistryUserByUsernameReq{} }
func (m *RegistryUserByUsernameReq) String() string { return proto.CompactTextString(m) }
func (*RegistryUserByUsernameReq) ProtoMessage()    {}
func (*RegistryUserByUsernameReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{371}
}

func (m *RegistryUserByUsernameReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *RegistryUserByUsernameReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *RegistryUserByUsernameReq) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *RegistryUserByUsernameReq) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *RegistryUserByUsernameReq) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *RegistryUserByUsernameReq) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *RegistryUserByUsernameReq) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *RegistryUserByUsernameReq) GetLocalPhone() string {
	if m != nil {
		return m.LocalPhone
	}
	return ""
}

// 通过用户名 密码注册用户响应
type RegistryUserByUsernameReply struct {
	// 是否成功
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// 错误码
	ErrorCode PasswordRegistryErrorCode `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3,enum=pbimuinfoserver.PasswordRegistryErrorCode" json:"error_code,omitempty"`
	// 用户信息
	User *UserInfo `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
}

func (m *RegistryUserByUsernameReply) Reset()         { *m = RegistryUserByUsernameReply{} }
func (m *RegistryUserByUsernameReply) String() string { return proto.CompactTextString(m) }
func (*RegistryUserByUsernameReply) ProtoMessage()    {}
func (*RegistryUserByUsernameReply) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{372}
}

func (m *RegistryUserByUsernameReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *RegistryUserByUsernameReply) GetErrorCode() PasswordRegistryErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return PasswordRegistryErrorCode_SUCCESS
}

func (m *RegistryUserByUsernameReply) GetUser() *UserInfo {
	if m != nil {
		return m.User
	}
	return nil
}

// 获取授权登录的token 请求
type GetAuthTokenReq struct {
	// key id
	KeyId int64 `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (m *GetAuthTokenReq) Reset()                    { *m = GetAuthTokenReq{} }
func (m *GetAuthTokenReq) String() string            { return proto.CompactTextString(m) }
func (*GetAuthTokenReq) ProtoMessage()               {}
func (*GetAuthTokenReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{373} }

func (m *GetAuthTokenReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

// 获取授权登录的token 响应
type GetAuthTokenReply struct {
	// 获取到的token
	Token     string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	UntilDate int32  `protobuf:"varint,2,opt,name=until_date,json=untilDate,proto3" json:"until_date,omitempty"`
	// 错误码
	ErrorCode OAuthLoginError `protobuf:"varint,3,opt,name=error_code,json=errorCode,proto3,enum=pbimuinfoserver.OAuthLoginError" json:"error_code,omitempty"`
}

func (m *GetAuthTokenReply) Reset()         { *m = GetAuthTokenReply{} }
func (m *GetAuthTokenReply) String() string { return proto.CompactTextString(m) }
func (*GetAuthTokenReply) ProtoMessage()    {}
func (*GetAuthTokenReply) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{374}
}

func (m *GetAuthTokenReply) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *GetAuthTokenReply) GetUntilDate() int32 {
	if m != nil {
		return m.UntilDate
	}
	return 0
}

func (m *GetAuthTokenReply) GetErrorCode() OAuthLoginError {
	if m != nil {
		return m.ErrorCode
	}
	return OAuthLoginError_OAUTH_LOGIN_SUCCESS
}

// 绑定token请求
type BindUserTokenReq struct {
	Token  string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	UserId int32  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *BindUserTokenReq) Reset()                    { *m = BindUserTokenReq{} }
func (m *BindUserTokenReq) String() string            { return proto.CompactTextString(m) }
func (*BindUserTokenReq) ProtoMessage()               {}
func (*BindUserTokenReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{375} }

func (m *BindUserTokenReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *BindUserTokenReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// 绑定token响应
type BindUserTokenReply struct {
	// 用户信息
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// key id
	KeyId int64 `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// 错误码
	ErrorCode OAuthLoginError `protobuf:"varint,3,opt,name=error_code,json=errorCode,proto3,enum=pbimuinfoserver.OAuthLoginError" json:"error_code,omitempty"`
}

func (m *BindUserTokenReply) Reset()         { *m = BindUserTokenReply{} }
func (m *BindUserTokenReply) String() string { return proto.CompactTextString(m) }
func (*BindUserTokenReply) ProtoMessage()    {}
func (*BindUserTokenReply) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{376}
}

func (m *BindUserTokenReply) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *BindUserTokenReply) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *BindUserTokenReply) GetErrorCode() OAuthLoginError {
	if m != nil {
		return m.ErrorCode
	}
	return OAuthLoginError_OAUTH_LOGIN_SUCCESS
}

// 通过授权token 获取用户信息
type GetUserByAuthTokenReq struct {
	// 获取到的token
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *GetUserByAuthTokenReq) Reset()         { *m = GetUserByAuthTokenReq{} }
func (m *GetUserByAuthTokenReq) String() string { return proto.CompactTextString(m) }
func (*GetUserByAuthTokenReq) ProtoMessage()    {}
func (*GetUserByAuthTokenReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{377}
}

func (m *GetUserByAuthTokenReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// 通过授权token 获取用户信息
type GetUserByAuthTokenReply struct {
	// key id
	KeyId int64 `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// 用户信息
	UserId int32     `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	User   *UserInfo `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
	// 错误码
	ErrorCode OAuthLoginError `protobuf:"varint,4,opt,name=error_code,json=errorCode,proto3,enum=pbimuinfoserver.OAuthLoginError" json:"error_code,omitempty"`
}

func (m *GetUserByAuthTokenReply) Reset()         { *m = GetUserByAuthTokenReply{} }
func (m *GetUserByAuthTokenReply) String() string { return proto.CompactTextString(m) }
func (*GetUserByAuthTokenReply) ProtoMessage()    {}
func (*GetUserByAuthTokenReply) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{378}
}

func (m *GetUserByAuthTokenReply) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *GetUserByAuthTokenReply) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetUserByAuthTokenReply) GetUser() *UserInfo {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *GetUserByAuthTokenReply) GetErrorCode() OAuthLoginError {
	if m != nil {
		return m.ErrorCode
	}
	return OAuthLoginError_OAUTH_LOGIN_SUCCESS
}

// 验证token 请求
type VerifyAuthTokenReq struct {
	// 获取到的token
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *VerifyAuthTokenReq) Reset()         { *m = VerifyAuthTokenReq{} }
func (m *VerifyAuthTokenReq) String() string { return proto.CompactTextString(m) }
func (*VerifyAuthTokenReq) ProtoMessage()    {}
func (*VerifyAuthTokenReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{379}
}

func (m *VerifyAuthTokenReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// 验证token 响应
type VerifyAuthTokenReply struct {
	// key id
	KeyId int64 `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// 用户id, 等于0说明还没绑定user
	UserId int32 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 错误码
	ErrorCode OAuthLoginError `protobuf:"varint,3,opt,name=error_code,json=errorCode,proto3,enum=pbimuinfoserver.OAuthLoginError" json:"error_code,omitempty"`
}

func (m *VerifyAuthTokenReply) Reset()         { *m = VerifyAuthTokenReply{} }
func (m *VerifyAuthTokenReply) String() string { return proto.CompactTextString(m) }
func (*VerifyAuthTokenReply) ProtoMessage()    {}
func (*VerifyAuthTokenReply) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{380}
}

func (m *VerifyAuthTokenReply) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *VerifyAuthTokenReply) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *VerifyAuthTokenReply) GetErrorCode() OAuthLoginError {
	if m != nil {
		return m.ErrorCode
	}
	return OAuthLoginError_OAUTH_LOGIN_SUCCESS
}

// 仅企业版使用该接口
// @ add by qingsong at 2020-05-21 for
//
//	message SetPhoneNoByUsernameReq {
//	   // user name
//	   string  Uname = 1;
//	   // phone No.
//	   string  Phone = 2;
//	   pbcomm.Debug Debug = 3;
//	}
//
//	message SetPhoneNoByUsernameRsp {
//	   ReErrCode Reply_code = 1;
//	   string Reply_info = 2;
//	}
type SignUpV1Req struct {
	PhoneNumber    string        `protobuf:"bytes,1,opt,name=PhoneNumber,proto3" json:"PhoneNumber,omitempty"`
	PhoneCodeHash  string        `protobuf:"bytes,2,opt,name=PhoneCodeHash,proto3" json:"PhoneCodeHash,omitempty"`
	PhoneCode      string        `protobuf:"bytes,3,opt,name=PhoneCode,proto3" json:"PhoneCode,omitempty"`
	KeyId          int64         `protobuf:"varint,5,opt,name=keyId,proto3" json:"keyId,omitempty"`
	FirstName      string        `protobuf:"bytes,6,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	Sex            int32         `protobuf:"varint,7,opt,name=sex,proto3" json:"sex,omitempty"`
	IsBot          bool          `protobuf:"varint,8,opt,name=is_bot,json=isBot,proto3" json:"is_bot,omitempty"`
	BotInfoVersion int32         `protobuf:"varint,9,opt,name=bot_info_version,json=botInfoVersion,proto3" json:"bot_info_version,omitempty"`
	BotChatHistory bool          `protobuf:"varint,10,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNoChats     bool          `protobuf:"varint,11,opt,name=bot_no_chats,json=botNoChats,proto3" json:"bot_no_chats,omitempty"`
	DcId           int32         `protobuf:"varint,12,opt,name=dc_id,json=dcId,proto3" json:"dc_id,omitempty"`
	Debug          *pbcomm.Debug `protobuf:"bytes,13,opt,name=debug" json:"debug,omitempty"`
	CountryCode    string        `protobuf:"bytes,14,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	LocalPhone     string        `protobuf:"bytes,15,opt,name=local_phone,json=localPhone,proto3" json:"local_phone,omitempty"`
	Birthday       int32         `protobuf:"varint,16,opt,name=birthday,proto3" json:"birthday,omitempty"`
	Photo          string        `protobuf:"bytes,17,opt,name=photo,proto3" json:"photo,omitempty"`
	ProxyCode      int32         `protobuf:"varint,18,opt,name=proxyCode,proto3" json:"proxyCode,omitempty"`
}

func (m *SignUpV1Req) Reset()                    { *m = SignUpV1Req{} }
func (m *SignUpV1Req) String() string            { return proto.CompactTextString(m) }
func (*SignUpV1Req) ProtoMessage()               {}
func (*SignUpV1Req) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{381} }

func (m *SignUpV1Req) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *SignUpV1Req) GetPhoneCodeHash() string {
	if m != nil {
		return m.PhoneCodeHash
	}
	return ""
}

func (m *SignUpV1Req) GetPhoneCode() string {
	if m != nil {
		return m.PhoneCode
	}
	return ""
}

func (m *SignUpV1Req) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *SignUpV1Req) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *SignUpV1Req) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *SignUpV1Req) GetIsBot() bool {
	if m != nil {
		return m.IsBot
	}
	return false
}

func (m *SignUpV1Req) GetBotInfoVersion() int32 {
	if m != nil {
		return m.BotInfoVersion
	}
	return 0
}

func (m *SignUpV1Req) GetBotChatHistory() bool {
	if m != nil {
		return m.BotChatHistory
	}
	return false
}

func (m *SignUpV1Req) GetBotNoChats() bool {
	if m != nil {
		return m.BotNoChats
	}
	return false
}

func (m *SignUpV1Req) GetDcId() int32 {
	if m != nil {
		return m.DcId
	}
	return 0
}

func (m *SignUpV1Req) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *SignUpV1Req) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *SignUpV1Req) GetLocalPhone() string {
	if m != nil {
		return m.LocalPhone
	}
	return ""
}

func (m *SignUpV1Req) GetBirthday() int32 {
	if m != nil {
		return m.Birthday
	}
	return 0
}

func (m *SignUpV1Req) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *SignUpV1Req) GetProxyCode() int32 {
	if m != nil {
		return m.ProxyCode
	}
	return 0
}

type SignUpV1Reply struct {
	Code     SignUpV1Reply_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=pbimuinfoserver.SignUpV1Reply_ResultCode" json:"code,omitempty"`
	UserInfo *UserInfo                `protobuf:"bytes,2,opt,name=userInfo" json:"userInfo,omitempty"`
}

func (m *SignUpV1Reply) Reset()                    { *m = SignUpV1Reply{} }
func (m *SignUpV1Reply) String() string            { return proto.CompactTextString(m) }
func (*SignUpV1Reply) ProtoMessage()               {}
func (*SignUpV1Reply) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{382} }

func (m *SignUpV1Reply) GetCode() SignUpV1Reply_ResultCode {
	if m != nil {
		return m.Code
	}
	return SignUpV1Reply_Success
}

func (m *SignUpV1Reply) GetUserInfo() *UserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

type ContactsGetCommonContactsReq struct {
	UserIds []int32 `protobuf:"varint,1,rep,packed,name=user_ids,json=userIds" json:"user_ids,omitempty"`
}

func (m *ContactsGetCommonContactsReq) Reset()         { *m = ContactsGetCommonContactsReq{} }
func (m *ContactsGetCommonContactsReq) String() string { return proto.CompactTextString(m) }
func (*ContactsGetCommonContactsReq) ProtoMessage()    {}
func (*ContactsGetCommonContactsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{383}
}

func (m *ContactsGetCommonContactsReq) GetUserIds() []int32 {
	if m != nil {
		return m.UserIds
	}
	return nil
}

type ContactsGetCommonContactsResult struct {
	UserInfos []*UserInfo `protobuf:"bytes,1,rep,name=user_infos,json=userInfos" json:"user_infos,omitempty"`
	Errorcode ReErrCode   `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *ContactsGetCommonContactsResult) Reset()         { *m = ContactsGetCommonContactsResult{} }
func (m *ContactsGetCommonContactsResult) String() string { return proto.CompactTextString(m) }
func (*ContactsGetCommonContactsResult) ProtoMessage()    {}
func (*ContactsGetCommonContactsResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{384}
}

func (m *ContactsGetCommonContactsResult) GetUserInfos() []*UserInfo {
	if m != nil {
		return m.UserInfos
	}
	return nil
}

func (m *ContactsGetCommonContactsResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

type SearchUserByNicknameReq struct {
	Nickname string  `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
	UserIds  []int32 `protobuf:"varint,2,rep,packed,name=user_ids,json=userIds" json:"user_ids,omitempty"`
	Offset   int32   `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit    int32   `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	SelfId   int32   `protobuf:"varint,5,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
}

func (m *SearchUserByNicknameReq) Reset()         { *m = SearchUserByNicknameReq{} }
func (m *SearchUserByNicknameReq) String() string { return proto.CompactTextString(m) }
func (*SearchUserByNicknameReq) ProtoMessage()    {}
func (*SearchUserByNicknameReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{385}
}

func (m *SearchUserByNicknameReq) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *SearchUserByNicknameReq) GetUserIds() []int32 {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func (m *SearchUserByNicknameReq) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *SearchUserByNicknameReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchUserByNicknameReq) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

type SearchUserByNicknameResult struct {
	UserInfos []*UserInfo `protobuf:"bytes,1,rep,name=user_infos,json=userInfos" json:"user_infos,omitempty"`
	Errorcode ReErrCode   `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *SearchUserByNicknameResult) Reset()         { *m = SearchUserByNicknameResult{} }
func (m *SearchUserByNicknameResult) String() string { return proto.CompactTextString(m) }
func (*SearchUserByNicknameResult) ProtoMessage()    {}
func (*SearchUserByNicknameResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{386}
}

func (m *SearchUserByNicknameResult) GetUserInfos() []*UserInfo {
	if m != nil {
		return m.UserInfos
	}
	return nil
}

func (m *SearchUserByNicknameResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// / @ added by qingsong at 2021.10.18 for get user role information by user ids.
// rpc GetUserRoleInfoByIds(GetUserRoleInfoByIdsReq) returns (GetUserRoleInfoByIdsRsp) {}
type GetUserRoleInfoByIdsReq struct {
	UserIds []int32 `protobuf:"varint,1,rep,packed,name=UserIds" json:"UserIds,omitempty"`
}

func (m *GetUserRoleInfoByIdsReq) Reset()         { *m = GetUserRoleInfoByIdsReq{} }
func (m *GetUserRoleInfoByIdsReq) String() string { return proto.CompactTextString(m) }
func (*GetUserRoleInfoByIdsReq) ProtoMessage()    {}
func (*GetUserRoleInfoByIdsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{387}
}

func (m *GetUserRoleInfoByIdsReq) GetUserIds() []int32 {
	if m != nil {
		return m.UserIds
	}
	return nil
}

type UserRoleInfo struct {
	UserId     int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	AccessHash int32  `protobuf:"varint,2,opt,name=AccessHash,proto3" json:"AccessHash,omitempty"`
	UserName   string `protobuf:"bytes,3,opt,name=UserName,proto3" json:"UserName,omitempty"`
	NickName   string `protobuf:"bytes,4,opt,name=NickName,proto3" json:"NickName,omitempty"`
	Photo      string `protobuf:"bytes,5,opt,name=Photo,proto3" json:"Photo,omitempty"`
	About      string `protobuf:"bytes,6,opt,name=About,proto3" json:"About,omitempty"`
	IsBot      bool   `protobuf:"varint,7,opt,name=IsBot,proto3" json:"IsBot,omitempty"`
	Sex        int32  `protobuf:"varint,8,opt,name=Sex,proto3" json:"Sex,omitempty"`
}

func (m *UserRoleInfo) Reset()                    { *m = UserRoleInfo{} }
func (m *UserRoleInfo) String() string            { return proto.CompactTextString(m) }
func (*UserRoleInfo) ProtoMessage()               {}
func (*UserRoleInfo) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{388} }

func (m *UserRoleInfo) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserRoleInfo) GetAccessHash() int32 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *UserRoleInfo) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *UserRoleInfo) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *UserRoleInfo) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *UserRoleInfo) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *UserRoleInfo) GetIsBot() bool {
	if m != nil {
		return m.IsBot
	}
	return false
}

func (m *UserRoleInfo) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

type GetUserRoleInfoByIdsRsp struct {
	ErrCode ReErrCode       `protobuf:"varint,1,opt,name=ErrCode,proto3,enum=pbimuinfoserver.ReErrCode" json:"ErrCode,omitempty"`
	RoleArr []*UserRoleInfo `protobuf:"bytes,2,rep,name=RoleArr" json:"RoleArr,omitempty"`
}

func (m *GetUserRoleInfoByIdsRsp) Reset()         { *m = GetUserRoleInfoByIdsRsp{} }
func (m *GetUserRoleInfoByIdsRsp) String() string { return proto.CompactTextString(m) }
func (*GetUserRoleInfoByIdsRsp) ProtoMessage()    {}
func (*GetUserRoleInfoByIdsRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{389}
}

func (m *GetUserRoleInfoByIdsRsp) GetErrCode() ReErrCode {
	if m != nil {
		return m.ErrCode
	}
	return ReErrCode_Success
}

func (m *GetUserRoleInfoByIdsRsp) GetRoleArr() []*UserRoleInfo {
	if m != nil {
		return m.RoleArr
	}
	return nil
}

// / @ added by qingsong at 202011122 for inner user operation.
type InnerUser struct {
	UserId    int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	VPhone    string `protobuf:"bytes,2,opt,name=VPhone,proto3" json:"VPhone,omitempty"`
	RPhone    string `protobuf:"bytes,3,opt,name=RPhone,proto3" json:"RPhone,omitempty"`
	Remark    string `protobuf:"bytes,4,opt,name=Remark,proto3" json:"Remark,omitempty"`
	Passwd    string `protobuf:"bytes,5,opt,name=Passwd,proto3" json:"Passwd,omitempty"`
	Status    int32  `protobuf:"varint,6,opt,name=Status,proto3" json:"Status,omitempty"`
	EnabledBy int32  `protobuf:"varint,7,opt,name=EnabledBy,proto3" json:"EnabledBy,omitempty"`
	EnabledAt string `protobuf:"bytes,8,opt,name=EnabledAt,proto3" json:"EnabledAt,omitempty"`
}

func (m *InnerUser) Reset()                    { *m = InnerUser{} }
func (m *InnerUser) String() string            { return proto.CompactTextString(m) }
func (*InnerUser) ProtoMessage()               {}
func (*InnerUser) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{390} }

func (m *InnerUser) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *InnerUser) GetVPhone() string {
	if m != nil {
		return m.VPhone
	}
	return ""
}

func (m *InnerUser) GetRPhone() string {
	if m != nil {
		return m.RPhone
	}
	return ""
}

func (m *InnerUser) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *InnerUser) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

func (m *InnerUser) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *InnerUser) GetEnabledBy() int32 {
	if m != nil {
		return m.EnabledBy
	}
	return 0
}

func (m *InnerUser) GetEnabledAt() string {
	if m != nil {
		return m.EnabledAt
	}
	return ""
}

// inner user operation.
// rpc InnerUserOp(InnerUserOpReq) returns (InnerUserOpRsp) {}
type InnerUserOpReq struct {
	OpType InnerUserOpReq_OperType `protobuf:"varint,1,opt,name=OpType,proto3,enum=pbimuinfoserver.InnerUserOpReq_OperType" json:"OpType,omitempty"`
	FromId int32                   `protobuf:"varint,2,opt,name=FromId,proto3" json:"FromId,omitempty"`
	UserId int32                   `protobuf:"varint,3,opt,name=UserId,proto3" json:"UserId,omitempty"`
	VPhone string                  `protobuf:"bytes,4,opt,name=VPhone,proto3" json:"VPhone,omitempty"`
	RPhone string                  `protobuf:"bytes,5,opt,name=RPhone,proto3" json:"RPhone,omitempty"`
	Remark string                  `protobuf:"bytes,6,opt,name=Remark,proto3" json:"Remark,omitempty"`
}

func (m *InnerUserOpReq) Reset()                    { *m = InnerUserOpReq{} }
func (m *InnerUserOpReq) String() string            { return proto.CompactTextString(m) }
func (*InnerUserOpReq) ProtoMessage()               {}
func (*InnerUserOpReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{391} }

func (m *InnerUserOpReq) GetOpType() InnerUserOpReq_OperType {
	if m != nil {
		return m.OpType
	}
	return InnerUserOpReq_OperTypeBeginAt
}

func (m *InnerUserOpReq) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *InnerUserOpReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *InnerUserOpReq) GetVPhone() string {
	if m != nil {
		return m.VPhone
	}
	return ""
}

func (m *InnerUserOpReq) GetRPhone() string {
	if m != nil {
		return m.RPhone
	}
	return ""
}

func (m *InnerUserOpReq) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

type InnerUserOpRsp struct {
	ResCode int32        `protobuf:"varint,1,opt,name=ResCode,proto3" json:"ResCode,omitempty"`
	Message string       `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	UserArr []*InnerUser `protobuf:"bytes,3,rep,name=UserArr" json:"UserArr,omitempty"`
}

func (m *InnerUserOpRsp) Reset()                    { *m = InnerUserOpRsp{} }
func (m *InnerUserOpRsp) String() string            { return proto.CompactTextString(m) }
func (*InnerUserOpRsp) ProtoMessage()               {}
func (*InnerUserOpRsp) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{392} }

func (m *InnerUserOpRsp) GetResCode() int32 {
	if m != nil {
		return m.ResCode
	}
	return 0
}

func (m *InnerUserOpRsp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *InnerUserOpRsp) GetUserArr() []*InnerUser {
	if m != nil {
		return m.UserArr
	}
	return nil
}

// rpc BindRealPhone(BindRealPhoneReq) returns (BindRealPhoneRsp)
type BindRealPhoneReq struct {
	UserId int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	RPhone string `protobuf:"bytes,2,opt,name=RPhone,proto3" json:"RPhone,omitempty"`
}

func (m *BindRealPhoneReq) Reset()                    { *m = BindRealPhoneReq{} }
func (m *BindRealPhoneReq) String() string            { return proto.CompactTextString(m) }
func (*BindRealPhoneReq) ProtoMessage()               {}
func (*BindRealPhoneReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{393} }

func (m *BindRealPhoneReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *BindRealPhoneReq) GetRPhone() string {
	if m != nil {
		return m.RPhone
	}
	return ""
}

type BindRealPhoneRsp struct {
	ResCode int32  `protobuf:"varint,1,opt,name=ResCode,proto3" json:"ResCode,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (m *BindRealPhoneRsp) Reset()                    { *m = BindRealPhoneRsp{} }
func (m *BindRealPhoneRsp) String() string            { return proto.CompactTextString(m) }
func (*BindRealPhoneRsp) ProtoMessage()               {}
func (*BindRealPhoneRsp) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{394} }

func (m *BindRealPhoneRsp) GetResCode() int32 {
	if m != nil {
		return m.ResCode
	}
	return 0
}

func (m *BindRealPhoneRsp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// / @ added by qingsong at 2021.12.13 for get user relation with ids.
// rpc GetUserRelationWithIds(GetUserRelationWithIdsReq) returns (GetUserRelationWithIdsRsp) {}
type GetUserRelationWithIdsReq struct {
	FromId  int32   `protobuf:"varint,1,opt,name=FromId,proto3" json:"FromId,omitempty"`
	WithIds []int32 `protobuf:"varint,2,rep,packed,name=WithIds" json:"WithIds,omitempty"`
}

func (m *GetUserRelationWithIdsReq) Reset()         { *m = GetUserRelationWithIdsReq{} }
func (m *GetUserRelationWithIdsReq) String() string { return proto.CompactTextString(m) }
func (*GetUserRelationWithIdsReq) ProtoMessage()    {}
func (*GetUserRelationWithIdsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{395}
}

func (m *GetUserRelationWithIdsReq) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *GetUserRelationWithIdsReq) GetWithIds() []int32 {
	if m != nil {
		return m.WithIds
	}
	return nil
}

type Relation struct {
	User int32                 `protobuf:"varint,1,opt,name=User,proto3" json:"User,omitempty"`
	Type Relation_RelationType `protobuf:"varint,2,opt,name=Type,proto3,enum=pbimuinfoserver.Relation_RelationType" json:"Type,omitempty"`
}

func (m *Relation) Reset()                    { *m = Relation{} }
func (m *Relation) String() string            { return proto.CompactTextString(m) }
func (*Relation) ProtoMessage()               {}
func (*Relation) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{396} }

func (m *Relation) GetUser() int32 {
	if m != nil {
		return m.User
	}
	return 0
}

func (m *Relation) GetType() Relation_RelationType {
	if m != nil {
		return m.Type
	}
	return Relation_Stranger
}

type GetUserRelationWithIdsRsp struct {
	ResCode   int32       `protobuf:"varint,1,opt,name=ResCode,proto3" json:"ResCode,omitempty"`
	Relations []*Relation `protobuf:"bytes,2,rep,name=Relations" json:"Relations,omitempty"`
}

func (m *GetUserRelationWithIdsRsp) Reset()         { *m = GetUserRelationWithIdsRsp{} }
func (m *GetUserRelationWithIdsRsp) String() string { return proto.CompactTextString(m) }
func (*GetUserRelationWithIdsRsp) ProtoMessage()    {}
func (*GetUserRelationWithIdsRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{397}
}

func (m *GetUserRelationWithIdsRsp) GetResCode() int32 {
	if m != nil {
		return m.ResCode
	}
	return 0
}

func (m *GetUserRelationWithIdsRsp) GetRelations() []*Relation {
	if m != nil {
		return m.Relations
	}
	return nil
}

// 设置官方标识
type UpdateUserVerifiedReq struct {
	UserId   int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Verified bool          `protobuf:"varint,2,opt,name=Verified,proto3" json:"Verified,omitempty"`
	Debug    *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *UpdateUserVerifiedReq) Reset()         { *m = UpdateUserVerifiedReq{} }
func (m *UpdateUserVerifiedReq) String() string { return proto.CompactTextString(m) }
func (*UpdateUserVerifiedReq) ProtoMessage()    {}
func (*UpdateUserVerifiedReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{398}
}

func (m *UpdateUserVerifiedReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateUserVerifiedReq) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

func (m *UpdateUserVerifiedReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type UpdateUserVerifiedResult struct {
	Uinfo     *UserInfo `protobuf:"bytes,1,opt,name=Uinfo" json:"Uinfo,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *UpdateUserVerifiedResult) Reset()         { *m = UpdateUserVerifiedResult{} }
func (m *UpdateUserVerifiedResult) String() string { return proto.CompactTextString(m) }
func (*UpdateUserVerifiedResult) ProtoMessage()    {}
func (*UpdateUserVerifiedResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{399}
}

func (m *UpdateUserVerifiedResult) GetUinfo() *UserInfo {
	if m != nil {
		return m.Uinfo
	}
	return nil
}

func (m *UpdateUserVerifiedResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

type AddPhoneBookContactsReq struct {
	UserId     int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	LocalPhone string `protobuf:"bytes,2,opt,name=LocalPhone,proto3" json:"LocalPhone,omitempty"`
}

func (m *AddPhoneBookContactsReq) Reset()         { *m = AddPhoneBookContactsReq{} }
func (m *AddPhoneBookContactsReq) String() string { return proto.CompactTextString(m) }
func (*AddPhoneBookContactsReq) ProtoMessage()    {}
func (*AddPhoneBookContactsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{400}
}

func (m *AddPhoneBookContactsReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *AddPhoneBookContactsReq) GetLocalPhone() string {
	if m != nil {
		return m.LocalPhone
	}
	return ""
}

type Contact struct {
	UserId    int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	FirstName string `protobuf:"bytes,2,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	LastName  string `protobuf:"bytes,3,opt,name=LastName,proto3" json:"LastName,omitempty"`
}

func (m *Contact) Reset()                    { *m = Contact{} }
func (m *Contact) String() string            { return proto.CompactTextString(m) }
func (*Contact) ProtoMessage()               {}
func (*Contact) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{401} }

func (m *Contact) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Contact) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Contact) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

type AddPhoneBookContactsReply struct {
	Contacts  []*Contact `protobuf:"bytes,1,rep,name=Contacts" json:"Contacts,omitempty"`
	Errorcode ReErrCode  `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *AddPhoneBookContactsReply) Reset()         { *m = AddPhoneBookContactsReply{} }
func (m *AddPhoneBookContactsReply) String() string { return proto.CompactTextString(m) }
func (*AddPhoneBookContactsReply) ProtoMessage()    {}
func (*AddPhoneBookContactsReply) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{402}
}

func (m *AddPhoneBookContactsReply) GetContacts() []*Contact {
	if m != nil {
		return m.Contacts
	}
	return nil
}

func (m *AddPhoneBookContactsReply) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 绑定邀请码
type InviteCodeBindReq struct {
	UserId   int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	InviteBy int32 `protobuf:"varint,2,opt,name=InviteBy,proto3" json:"InviteBy,omitempty"`
}

func (m *InviteCodeBindReq) Reset()         { *m = InviteCodeBindReq{} }
func (m *InviteCodeBindReq) String() string { return proto.CompactTextString(m) }
func (*InviteCodeBindReq) ProtoMessage()    {}
func (*InviteCodeBindReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{403}
}

func (m *InviteCodeBindReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *InviteCodeBindReq) GetInviteBy() int32 {
	if m != nil {
		return m.InviteBy
	}
	return 0
}

type InviteCodeBindRsp struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *InviteCodeBindRsp) Reset()         { *m = InviteCodeBindRsp{} }
func (m *InviteCodeBindRsp) String() string { return proto.CompactTextString(m) }
func (*InviteCodeBindRsp) ProtoMessage()    {}
func (*InviteCodeBindRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{404}
}

func (m *InviteCodeBindRsp) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 我的团队
type MyTeamReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Offset int32 `protobuf:"varint,2,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32 `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (m *MyTeamReq) Reset()                    { *m = MyTeamReq{} }
func (m *MyTeamReq) String() string            { return proto.CompactTextString(m) }
func (*MyTeamReq) ProtoMessage()               {}
func (*MyTeamReq) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{405} }

func (m *MyTeamReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *MyTeamReq) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *MyTeamReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type MyTeamRsp struct {
	Users     []int32   `protobuf:"varint,1,rep,packed,name=Users" json:"Users,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *MyTeamRsp) Reset()                    { *m = MyTeamRsp{} }
func (m *MyTeamRsp) String() string            { return proto.CompactTextString(m) }
func (*MyTeamRsp) ProtoMessage()               {}
func (*MyTeamRsp) Descriptor() ([]byte, []int) { return fileDescriptorImuinfoserver, []int{406} }

func (m *MyTeamRsp) GetUsers() []int32 {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *MyTeamRsp) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 实名认证材料提交
type RealNameCertificationReq struct {
	UserId         int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	IdentityNumber string `protobuf:"bytes,3,opt,name=IdentityNumber,proto3" json:"IdentityNumber,omitempty"`
	FrontImage     string `protobuf:"bytes,4,opt,name=FrontImage,proto3" json:"FrontImage,omitempty"`
	ReverseImage   string `protobuf:"bytes,5,opt,name=ReverseImage,proto3" json:"ReverseImage,omitempty"`
}

func (m *RealNameCertificationReq) Reset()         { *m = RealNameCertificationReq{} }
func (m *RealNameCertificationReq) String() string { return proto.CompactTextString(m) }
func (*RealNameCertificationReq) ProtoMessage()    {}
func (*RealNameCertificationReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{407}
}

func (m *RealNameCertificationReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *RealNameCertificationReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RealNameCertificationReq) GetIdentityNumber() string {
	if m != nil {
		return m.IdentityNumber
	}
	return ""
}

func (m *RealNameCertificationReq) GetFrontImage() string {
	if m != nil {
		return m.FrontImage
	}
	return ""
}

func (m *RealNameCertificationReq) GetReverseImage() string {
	if m != nil {
		return m.ReverseImage
	}
	return ""
}

type RealNameCertificationRsp struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *RealNameCertificationRsp) Reset()         { *m = RealNameCertificationRsp{} }
func (m *RealNameCertificationRsp) String() string { return proto.CompactTextString(m) }
func (*RealNameCertificationRsp) ProtoMessage()    {}
func (*RealNameCertificationRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{408}
}

func (m *RealNameCertificationRsp) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 实名认证结果反馈
type GetCertificationResultReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (m *GetCertificationResultReq) Reset()         { *m = GetCertificationResultReq{} }
func (m *GetCertificationResultReq) String() string { return proto.CompactTextString(m) }
func (*GetCertificationResultReq) ProtoMessage()    {}
func (*GetCertificationResultReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{409}
}

func (m *GetCertificationResultReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type CertificationResult struct {
	Name           string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IdentityNumber string `protobuf:"bytes,2,opt,name=identity_number,json=identityNumber,proto3" json:"identity_number,omitempty"`
	FrontImage     string `protobuf:"bytes,3,opt,name=front_image,json=frontImage,proto3" json:"front_image,omitempty"`
	ReverseImage   string `protobuf:"bytes,4,opt,name=reverse_image,json=reverseImage,proto3" json:"reverse_image,omitempty"`
	Status         int32  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	ReasonCode     int32  `protobuf:"varint,6,opt,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
}

func (m *CertificationResult) Reset()         { *m = CertificationResult{} }
func (m *CertificationResult) String() string { return proto.CompactTextString(m) }
func (*CertificationResult) ProtoMessage()    {}
func (*CertificationResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{410}
}

func (m *CertificationResult) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CertificationResult) GetIdentityNumber() string {
	if m != nil {
		return m.IdentityNumber
	}
	return ""
}

func (m *CertificationResult) GetFrontImage() string {
	if m != nil {
		return m.FrontImage
	}
	return ""
}

func (m *CertificationResult) GetReverseImage() string {
	if m != nil {
		return m.ReverseImage
	}
	return ""
}

func (m *CertificationResult) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *CertificationResult) GetReasonCode() int32 {
	if m != nil {
		return m.ReasonCode
	}
	return 0
}

type GetCertificationResultRsp struct {
	Errorcode ReErrCode            `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
	Result    *CertificationResult `protobuf:"bytes,2,opt,name=Result" json:"Result,omitempty"`
}

func (m *GetCertificationResultRsp) Reset()         { *m = GetCertificationResultRsp{} }
func (m *GetCertificationResultRsp) String() string { return proto.CompactTextString(m) }
func (*GetCertificationResultRsp) ProtoMessage()    {}
func (*GetCertificationResultRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{411}
}

func (m *GetCertificationResultRsp) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

func (m *GetCertificationResultRsp) GetResult() *CertificationResult {
	if m != nil {
		return m.Result
	}
	return nil
}

// 实名认证后台审核
type VerifyCertificationReq struct {
	UserId     int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Status     int32 `protobuf:"varint,2,opt,name=Status,proto3" json:"Status,omitempty"`
	ReasonCode int32 `protobuf:"varint,3,opt,name=ReasonCode,proto3" json:"ReasonCode,omitempty"`
}

func (m *VerifyCertificationReq) Reset()         { *m = VerifyCertificationReq{} }
func (m *VerifyCertificationReq) String() string { return proto.CompactTextString(m) }
func (*VerifyCertificationReq) ProtoMessage()    {}
func (*VerifyCertificationReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{412}
}

func (m *VerifyCertificationReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *VerifyCertificationReq) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *VerifyCertificationReq) GetReasonCode() int32 {
	if m != nil {
		return m.ReasonCode
	}
	return 0
}

type VerifyCertificationRsp struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *VerifyCertificationRsp) Reset()         { *m = VerifyCertificationRsp{} }
func (m *VerifyCertificationRsp) String() string { return proto.CompactTextString(m) }
func (*VerifyCertificationRsp) ProtoMessage()    {}
func (*VerifyCertificationRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{413}
}

func (m *VerifyCertificationRsp) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

type UpdateUserDetailV1Req struct {
	UserId   int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Sex      int32  `protobuf:"varint,2,opt,name=sex,proto3" json:"sex,omitempty"`
	Birthday int32  `protobuf:"varint,3,opt,name=birthday,proto3" json:"birthday,omitempty"`
	Extend   string `protobuf:"bytes,4,opt,name=extend,proto3" json:"extend,omitempty"`
}

func (m *UpdateUserDetailV1Req) Reset()         { *m = UpdateUserDetailV1Req{} }
func (m *UpdateUserDetailV1Req) String() string { return proto.CompactTextString(m) }
func (*UpdateUserDetailV1Req) ProtoMessage()    {}
func (*UpdateUserDetailV1Req) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{414}
}

func (m *UpdateUserDetailV1Req) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateUserDetailV1Req) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *UpdateUserDetailV1Req) GetBirthday() int32 {
	if m != nil {
		return m.Birthday
	}
	return 0
}

func (m *UpdateUserDetailV1Req) GetExtend() string {
	if m != nil {
		return m.Extend
	}
	return ""
}

type UpdateUserDetailV1Rsp struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=pbimuinfoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *UpdateUserDetailV1Rsp) Reset()         { *m = UpdateUserDetailV1Rsp{} }
func (m *UpdateUserDetailV1Rsp) String() string { return proto.CompactTextString(m) }
func (*UpdateUserDetailV1Rsp) ProtoMessage()    {}
func (*UpdateUserDetailV1Rsp) Descriptor() ([]byte, []int) {
	return fileDescriptorImuinfoserver, []int{415}
}

func (m *UpdateUserDetailV1Rsp) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

func init() {
	proto.RegisterType((*GetUserInfoByIdReq)(nil), "pbimuinfoserver.GetUserInfoByIdReq")
	proto.RegisterType((*GetUserInfoByIdArrReq)(nil), "pbimuinfoserver.GetUserInfoByIdArrReq")
	proto.RegisterType((*UserInfoArray)(nil), "pbimuinfoserver.UserInfoArray")
	proto.RegisterType((*UserInfo)(nil), "pbimuinfoserver.userInfo")
	proto.RegisterType((*GetUserExpireByIdReq)(nil), "pbimuinfoserver.GetUserExpireByIdReq")
	proto.RegisterType((*GetUserExpireByIdResult)(nil), "pbimuinfoserver.GetUserExpireByIdResult")
	proto.RegisterType((*GetUserByphone)(nil), "pbimuinfoserver.GetUserByphone")
	proto.RegisterType((*GetUserInfoResult)(nil), "pbimuinfoserver.GetUserInfoResult")
	proto.RegisterType((*GetUserInfoByIdArrResult)(nil), "pbimuinfoserver.GetUserInfoByIdArrResult")
	proto.RegisterType((*GetUserByUsername)(nil), "pbimuinfoserver.GetUserByUsername")
	proto.RegisterType((*UpdatePhotoInfoReq)(nil), "pbimuinfoserver.updatePhotoInfoReq")
	proto.RegisterType((*GetPhotoInfoReq)(nil), "pbimuinfoserver.GetPhotoInfoReq")
	proto.RegisterType((*UpdateUserPhotoResult)(nil), "pbimuinfoserver.UpdateUserPhotoResult")
	proto.RegisterType((*GetUserPhotoResult)(nil), "pbimuinfoserver.GetUserPhotoResult")
	proto.RegisterType((*UpdateUserProfileReq)(nil), "pbimuinfoserver.UpdateUserProfileReq")
	proto.RegisterType((*UpdateUserFullReq)(nil), "pbimuinfoserver.UpdateUserFullReq")
	proto.RegisterType((*UpdateUserFullResult)(nil), "pbimuinfoserver.UpdateUserFullResult")
	proto.RegisterType((*UpdateUserProfileResult)(nil), "pbimuinfoserver.UpdateUserProfileResult")
	proto.RegisterType((*StatusReq)(nil), "pbimuinfoserver.StatusReq")
	proto.RegisterType((*StatusResult)(nil), "pbimuinfoserver.StatusResult")
	proto.RegisterType((*UpdateExpireReq)(nil), "pbimuinfoserver.UpdateExpireReq")
	proto.RegisterType((*UpdateExpireResult)(nil), "pbimuinfoserver.UpdateExpireResult")
	proto.RegisterType((*UserClusterChange)(nil), "pbimuinfoserver.UserClusterChange")
	proto.RegisterType((*UserClusterChangeResult)(nil), "pbimuinfoserver.UserClusterChangeResult")
	proto.RegisterType((*UpdateuserNameReq)(nil), "pbimuinfoserver.UpdateuserNameReq")
	proto.RegisterType((*UpdateuserNameResult)(nil), "pbimuinfoserver.UpdateuserNameResult")
	proto.RegisterType((*UpdateUserLevelReq)(nil), "pbimuinfoserver.UpdateUserLevelReq")
	proto.RegisterType((*UpdateUserLevelResult)(nil), "pbimuinfoserver.UpdateUserLevelResult")
	proto.RegisterType((*UpdateUserExtionReq)(nil), "pbimuinfoserver.UpdateUserExtionReq")
	proto.RegisterType((*UpdateUserExtionResult)(nil), "pbimuinfoserver.UpdateUserExtionResult")
	proto.RegisterType((*CheckPhoneRegisterReq)(nil), "pbimuinfoserver.CheckPhoneRegisterReq")
	proto.RegisterType((*CheckPhoneRegisterResult)(nil), "pbimuinfoserver.CheckPhoneRegisterResult")
	proto.RegisterType((*DeleteAccountByIdReq)(nil), "pbimuinfoserver.DeleteAccountByIdReq")
	proto.RegisterType((*DelAccountResult)(nil), "pbimuinfoserver.DelAccountResult")
	proto.RegisterType((*BotUpdateInfo)(nil), "pbimuinfoserver.BotUpdateInfo")
	proto.RegisterType((*BotUpdateInfoResult)(nil), "pbimuinfoserver.BotUpdateInfoResult")
	proto.RegisterType((*DelContactReq)(nil), "pbimuinfoserver.DelContactReq")
	proto.RegisterType((*DelContactResult)(nil), "pbimuinfoserver.DelContactResult")
	proto.RegisterType((*AcceptContactReq)(nil), "pbimuinfoserver.AcceptContactReq")
	proto.RegisterType((*AcceptContactResult)(nil), "pbimuinfoserver.AcceptContactResult")
	proto.RegisterType((*ContactIdHash)(nil), "pbimuinfoserver.ContactIdHash")
	proto.RegisterType((*DelContactArrReq)(nil), "pbimuinfoserver.DelContactArrReq")
	proto.RegisterType((*CmdResetUserContactsReq)(nil), "pbimuinfoserver.CmdResetUserContactsReq")
	proto.RegisterType((*CmdResetUserContactsResult)(nil), "pbimuinfoserver.CmdResetUserContactsResult")
	proto.RegisterType((*DelContactArrResult)(nil), "pbimuinfoserver.DelContactArrResult")
	proto.RegisterType((*ContatsGetContactsReq)(nil), "pbimuinfoserver.ContatsGetContactsReq")
	proto.RegisterType((*ContactInfo)(nil), "pbimuinfoserver.contactInfo")
	proto.RegisterType((*ContatsGetContactsResult)(nil), "pbimuinfoserver.ContatsGetContactsResult")
	proto.RegisterType((*ContactsGetContactsV1Req)(nil), "pbimuinfoserver.ContactsGetContactsV1Req")
	proto.RegisterType((*ContactsGetContactsV1Result)(nil), "pbimuinfoserver.ContactsGetContactsV1Result")
	proto.RegisterType((*ContactsGetContactsIdReq)(nil), "pbimuinfoserver.ContactsGetContactsIdReq")
	proto.RegisterType((*ContactsGetContactsIdResult)(nil), "pbimuinfoserver.ContactsGetContactsIdResult")
	proto.RegisterType((*PhoneBookContact)(nil), "pbimuinfoserver.PhoneBookContact")
	proto.RegisterType((*ContactsImportPhoneContactsReq)(nil), "pbimuinfoserver.ContactsImportPhoneContactsReq")
	proto.RegisterType((*ImportContact)(nil), "pbimuinfoserver.ImportContact")
	proto.RegisterType((*PopularContact)(nil), "pbimuinfoserver.PopularContact")
	proto.RegisterType((*ContactsImportPhoneContactsResult)(nil), "pbimuinfoserver.ContactsImportPhoneContactsResult")
	proto.RegisterType((*AddRelationIdInfo)(nil), "pbimuinfoserver.AddRelationIdInfo")
	proto.RegisterType((*DelRelationIdInfo)(nil), "pbimuinfoserver.DelRelationIdInfo")
	proto.RegisterType((*AddRelationIdInfoResult)(nil), "pbimuinfoserver.AddRelationIdInfoResult")
	proto.RegisterType((*DelRelationIdInfoResult)(nil), "pbimuinfoserver.DelRelationIdInfoResult")
	proto.RegisterType((*BlockeduserReq)(nil), "pbimuinfoserver.BlockeduserReq")
	proto.RegisterType((*BlockeduserResult)(nil), "pbimuinfoserver.BlockeduserResult")
	proto.RegisterType((*ContactUnblockedReq)(nil), "pbimuinfoserver.ContactUnblockedReq")
	proto.RegisterType((*ContactsGetBlockedReq)(nil), "pbimuinfoserver.ContactsGetBlockedReq")
	proto.RegisterType((*Blockeduser)(nil), "pbimuinfoserver.blockeduser")
	proto.RegisterType((*ContactsGetBlockedResult)(nil), "pbimuinfoserver.ContactsGetBlockedResult")
	proto.RegisterType((*SystemWhiteUser)(nil), "pbimuinfoserver.SystemWhiteUser")
	proto.RegisterType((*StoreSysWhiteUserReq)(nil), "pbimuinfoserver.StoreSysWhiteUserReq")
	proto.RegisterType((*StoreSysWhiteUserResult)(nil), "pbimuinfoserver.StoreSysWhiteUserResult")
	proto.RegisterType((*UpdateSystemWhiteUserLevelReq)(nil), "pbimuinfoserver.UpdateSystemWhiteUserLevelReq")
	proto.RegisterType((*UpdateSystemWhiteUserLevelResult)(nil), "pbimuinfoserver.UpdateSystemWhiteUserLevelResult")
	proto.RegisterType((*GetSysWhiteUserReq)(nil), "pbimuinfoserver.GetSysWhiteUserReq")
	proto.RegisterType((*GetSysWhiteUserResult)(nil), "pbimuinfoserver.GetSysWhiteUserResult")
	proto.RegisterType((*GetSysWhiteUserArrReq)(nil), "pbimuinfoserver.GetSysWhiteUserArrReq")
	proto.RegisterType((*GetSysWhiteUserArrResult)(nil), "pbimuinfoserver.GetSysWhiteUserArrResult")
	proto.RegisterType((*DelSysWhiteUserReq)(nil), "pbimuinfoserver.DelSysWhiteUserReq")
	proto.RegisterType((*DelSysWhiteUserResult)(nil), "pbimuinfoserver.DelSysWhiteUserResult")
	proto.RegisterType((*UserDc)(nil), "pbimuinfoserver.UserDc")
	proto.RegisterType((*GetAllDcReq)(nil), "pbimuinfoserver.GetAllDcReq")
	proto.RegisterType((*SetPrivacyReq)(nil), "pbimuinfoserver.SetPrivacyReq")
	proto.RegisterType((*SetPrivacyResult)(nil), "pbimuinfoserver.SetPrivacyResult")
	proto.RegisterType((*GetPrivacyReq)(nil), "pbimuinfoserver.GetPrivacyReq")
	proto.RegisterType((*CheckPrivacyReq)(nil), "pbimuinfoserver.CheckPrivacyReq")
	proto.RegisterType((*CheckPrivacyResult)(nil), "pbimuinfoserver.CheckPrivacyResult")
	proto.RegisterType((*GetPrivacyResult)(nil), "pbimuinfoserver.GetPrivacyResult")
	proto.RegisterType((*StoreShopStickerSetReq)(nil), "pbimuinfoserver.StoreShopStickerSetReq")
	proto.RegisterType((*StoreShopStickerSetResult)(nil), "pbimuinfoserver.StoreShopStickerSetResult")
	proto.RegisterType((*StoreShopStickerSetDocumentsReq)(nil), "pbimuinfoserver.StoreShopStickerSetDocumentsReq")
	proto.RegisterType((*StoreShopStickerSetDocumentsResult)(nil), "pbimuinfoserver.StoreShopStickerSetDocumentsResult")
	proto.RegisterType((*DeleteStickerSetReq)(nil), "pbimuinfoserver.DeleteStickerSetReq")
	proto.RegisterType((*DeleteStickerSetResult)(nil), "pbimuinfoserver.DeleteStickerSetResult")
	proto.RegisterType((*StickerSetInfo)(nil), "pbimuinfoserver.StickerSetInfo")
	proto.RegisterType((*GetStickerSetInfoReq)(nil), "pbimuinfoserver.GetStickerSetInfoReq")
	proto.RegisterType((*GetStickerSetInfoResult)(nil), "pbimuinfoserver.GetStickerSetInfoResult")
	proto.RegisterType((*StickerPackDocumentBase)(nil), "pbimuinfoserver.StickerPackDocumentBase")
	proto.RegisterType((*StickerPackDocumentInfo)(nil), "pbimuinfoserver.StickerPackDocumentInfo")
	proto.RegisterType((*StoreStickerPackDcReq)(nil), "pbimuinfoserver.StoreStickerPackDcReq")
	proto.RegisterType((*StoreStickerPackDcResult)(nil), "pbimuinfoserver.StoreStickerPackDcResult")
	proto.RegisterType((*StoreStickerPackDcArrReq)(nil), "pbimuinfoserver.StoreStickerPackDcArrReq")
	proto.RegisterType((*StoreStickerPackDcArrResult)(nil), "pbimuinfoserver.StoreStickerPackDcArrResult")
	proto.RegisterType((*GetStickerSetPackDcInfosReq)(nil), "pbimuinfoserver.GetStickerSetPackDcInfosReq")
	proto.RegisterType((*GetStickerSetPackDcInfosResult)(nil), "pbimuinfoserver.GetStickerSetPackDcInfosResult")
	proto.RegisterType((*AddOrDeleteFaveSticerReq)(nil), "pbimuinfoserver.AddOrDeleteFaveSticerReq")
	proto.RegisterType((*AddOrDeleteFaveSticerResult)(nil), "pbimuinfoserver.AddOrDeleteFaveSticerResult")
	proto.RegisterType((*GetFavedStickersReq)(nil), "pbimuinfoserver.GetFavedStickersReq")
	proto.RegisterType((*GetFavedStickersResult)(nil), "pbimuinfoserver.GetFavedStickersResult")
	proto.RegisterType((*StickerPack)(nil), "pbimuinfoserver.StickerPack")
	proto.RegisterType((*StoreUserStickerSetReq)(nil), "pbimuinfoserver.StoreUserStickerSetReq")
	proto.RegisterType((*StoreUserStickerSetResult)(nil), "pbimuinfoserver.StoreUserStickerSetResult")
	proto.RegisterType((*UpdateUserStickerSetDisabledReq)(nil), "pbimuinfoserver.UpdateUserStickerSetDisabledReq")
	proto.RegisterType((*UpdateUserStickerSetDisabledResult)(nil), "pbimuinfoserver.UpdateUserStickerSetDisabledResult")
	proto.RegisterType((*UpdateUserStickerSetOrderReq)(nil), "pbimuinfoserver.UpdateUserStickerSetOrderReq")
	proto.RegisterType((*UpdateUserStickerSetOrderResult)(nil), "pbimuinfoserver.UpdateUserStickerSetOrderResult")
	proto.RegisterType((*UpdateUserStickerSetInstallArReq)(nil), "pbimuinfoserver.UpdateUserStickerSetInstallArReq")
	proto.RegisterType((*UpdateUserStickerSetInstallArResult)(nil), "pbimuinfoserver.UpdateUserStickerSetInstallArResult")
	proto.RegisterType((*DeleteuserStickerReq)(nil), "pbimuinfoserver.DeleteuserStickerReq")
	proto.RegisterType((*DeleteuserStickerResult)(nil), "pbimuinfoserver.DeleteuserStickerResult")
	proto.RegisterType((*UserStickerInfo)(nil), "pbimuinfoserver.UserStickerInfo")
	proto.RegisterType((*UserStickerInfoArr)(nil), "pbimuinfoserver.UserStickerInfoArr")
	proto.RegisterType((*StickerSetInfoArr)(nil), "pbimuinfoserver.StickerSetInfoArr")
	proto.RegisterType((*GetuserAllStickersReq)(nil), "pbimuinfoserver.GetuserAllStickersReq")
	proto.RegisterType((*GetuserAllStickersResult)(nil), "pbimuinfoserver.GetuserAllStickersResult")
	proto.RegisterType((*GetAllStickerSetsReq)(nil), "pbimuinfoserver.GetAllStickerSetsReq")
	proto.RegisterType((*GetAllStickerSetsResult)(nil), "pbimuinfoserver.GetAllStickerSetsResult")
	proto.RegisterType((*DeleteStickerPackDocumentReq)(nil), "pbimuinfoserver.DeleteStickerPackDocumentReq")
	proto.RegisterType((*DeleteStickerPackDocumentResult)(nil), "pbimuinfoserver.DeleteStickerPackDocumentResult")
	proto.RegisterType((*GetAuthorStickerSetReq)(nil), "pbimuinfoserver.GetAuthorStickerSetReq")
	proto.RegisterType((*GetAuthorStickerSetResult)(nil), "pbimuinfoserver.GetAuthorStickerSetResult")
	proto.RegisterType((*GetAuthorAllStickerSetReq)(nil), "pbimuinfoserver.GetAuthorAllStickerSetReq")
	proto.RegisterType((*GetAuthorAllStickerSetResult)(nil), "pbimuinfoserver.GetAuthorAllStickerSetResult")
	proto.RegisterType((*AuthorStickerSet)(nil), "pbimuinfoserver.AuthorStickerSet")
	proto.RegisterType((*CountAuthorAllStickerSetReq)(nil), "pbimuinfoserver.CountAuthorAllStickerSetReq")
	proto.RegisterType((*CountAuthorAllStickerSetResult)(nil), "pbimuinfoserver.CountAuthorAllStickerSetResult")
	proto.RegisterType((*UserGifInfoArr)(nil), "pbimuinfoserver.userGifInfoArr")
	proto.RegisterType((*UserSaveGifInfo)(nil), "pbimuinfoserver.userSaveGifInfo")
	proto.RegisterType((*SaveUserGifReq)(nil), "pbimuinfoserver.SaveUserGifReq")
	proto.RegisterType((*SaveUserGifResult)(nil), "pbimuinfoserver.SaveUserGifResult")
	proto.RegisterType((*DelUserGifReq)(nil), "pbimuinfoserver.DelUserGifReq")
	proto.RegisterType((*DelUserGifResult)(nil), "pbimuinfoserver.DelUserGifResult")
	proto.RegisterType((*GetUserGifsReq)(nil), "pbimuinfoserver.GetUserGifsReq")
	proto.RegisterType((*GetUserGifsResult)(nil), "pbimuinfoserver.GetUserGifsResult")
	proto.RegisterType((*CheckUserIsBlockedReq)(nil), "pbimuinfoserver.CheckUserIsBlockedReq")
	proto.RegisterType((*CheckUserIsBlockedResult)(nil), "pbimuinfoserver.CheckUserIsBlockedResult")
	proto.RegisterType((*RegisterUserInfo)(nil), "pbimuinfoserver.registerUserInfo")
	proto.RegisterType((*UpdateUserInfoResult)(nil), "pbimuinfoserver.UpdateUserInfoResult")
	proto.RegisterType((*CheckUserAccessHashValidReq)(nil), "pbimuinfoserver.CheckUserAccessHashValidReq")
	proto.RegisterType((*CheckUserAccessHashValidResult)(nil), "pbimuinfoserver.CheckUserAccessHashValidResult")
	proto.RegisterType((*RegisterUserInfoReq)(nil), "pbimuinfoserver.RegisterUserInfoReq")
	proto.RegisterType((*RegisterUserInfoResult)(nil), "pbimuinfoserver.RegisterUserInfoResult")
	proto.RegisterType((*GetNotifySettingsReq)(nil), "pbimuinfoserver.GetNotifySettingsReq")
	proto.RegisterType((*GetNotifySettingsResult)(nil), "pbimuinfoserver.GetNotifySettingsResult")
	proto.RegisterType((*UpdateNotifySettingsReq)(nil), "pbimuinfoserver.UpdateNotifySettingsReq")
	proto.RegisterType((*UpdateNotifySettingsResult)(nil), "pbimuinfoserver.UpdateNotifySettingsResult")
	proto.RegisterType((*GetContactsStatusReq)(nil), "pbimuinfoserver.GetContactsStatusReq")
	proto.RegisterType((*UserStaus)(nil), "pbimuinfoserver.UserStaus")
	proto.RegisterType((*GetContactsStatusResult)(nil), "pbimuinfoserver.GetContactsStatusResult")
	proto.RegisterType((*UpdateBotPicRequest)(nil), "pbimuinfoserver.UpdateBotPicRequest")
	proto.RegisterType((*UpdateBotPicResult)(nil), "pbimuinfoserver.UpdateBotPicResult")
	proto.RegisterType((*GetAllProxyConfigReq)(nil), "pbimuinfoserver.GetAllProxyConfigReq")
	proto.RegisterType((*ProxyAddr)(nil), "pbimuinfoserver.ProxyAddr")
	proto.RegisterType((*GetAllProxyConfigResult)(nil), "pbimuinfoserver.GetAllProxyConfigResult")
	proto.RegisterType((*CheckUserNameOccupiedReq)(nil), "pbimuinfoserver.CheckUserNameOccupiedReq")
	proto.RegisterType((*CheckUserNameOccupiedResult)(nil), "pbimuinfoserver.CheckUserNameOccupiedResult")
	proto.RegisterType((*GetUserGpsReq)(nil), "pbimuinfoserver.GetUserGpsReq")
	proto.RegisterType((*GetUserGpsResult)(nil), "pbimuinfoserver.GetUserGpsResult")
	proto.RegisterType((*CheckSelfIsContactReq)(nil), "pbimuinfoserver.CheckSelfIsContactReq")
	proto.RegisterType((*CheckSelfIsContactResult)(nil), "pbimuinfoserver.CheckSelfIsContactResult")
	proto.RegisterType((*UpdateSwitchReq)(nil), "pbimuinfoserver.UpdateSwitchReq")
	proto.RegisterType((*UpdateSwitchResult)(nil), "pbimuinfoserver.UpdateSwitchResult")
	proto.RegisterType((*GetSwitchStatusReq)(nil), "pbimuinfoserver.GetSwitchStatusReq")
	proto.RegisterType((*GetSwitchStatusResult)(nil), "pbimuinfoserver.GetSwitchStatusResult")
	proto.RegisterType((*GetViplogPhoneListReq)(nil), "pbimuinfoserver.GetViplogPhoneListReq")
	proto.RegisterType((*GetViplogPhoneListResp)(nil), "pbimuinfoserver.GetViplogPhoneListResp")
	proto.RegisterType((*UpdateUserHasPayReq)(nil), "pbimuinfoserver.UpdateUserHasPayReq")
	proto.RegisterType((*UpdateUserHasPayResp)(nil), "pbimuinfoserver.UpdateUserHasPayResp")
	proto.RegisterType((*CheckUserHasPayReq)(nil), "pbimuinfoserver.CheckUserHasPayReq")
	proto.RegisterType((*CheckUserHasPayResp)(nil), "pbimuinfoserver.CheckUserHasPayResp")
	proto.RegisterType((*UpdateUserDetailReq)(nil), "pbimuinfoserver.UpdateUserDetailReq")
	proto.RegisterType((*UpdateUserDetailResult)(nil), "pbimuinfoserver.UpdateUserDetailResult")
	proto.RegisterType((*UpdateUserDetailBirthdayReq)(nil), "pbimuinfoserver.UpdateUserDetailBirthdayReq")
	proto.RegisterType((*UpdateUserDetailBirthdayResult)(nil), "pbimuinfoserver.UpdateUserDetailBirthdayResult")
	proto.RegisterType((*SetUserDetailReq)(nil), "pbimuinfoserver.SetUserDetailReq")
	proto.RegisterType((*SetUserDetailResult)(nil), "pbimuinfoserver.SetUserDetailResult")
	proto.RegisterType((*DeleteReceiveAppliesReq)(nil), "pbimuinfoserver.DeleteReceiveAppliesReq")
	proto.RegisterType((*DeleteReceiveAppliesResult)(nil), "pbimuinfoserver.DeleteReceiveAppliesResult")
	proto.RegisterType((*UpdateUserTypeLableReq)(nil), "pbimuinfoserver.UpdateUserTypeLableReq")
	proto.RegisterType((*UpdateUserTypeLableResult)(nil), "pbimuinfoserver.UpdateUserTypeLableResult")
	proto.RegisterType((*CheckSearchUserCountLimitedReq)(nil), "pbimuinfoserver.CheckSearchUserCountLimitedReq")
	proto.RegisterType((*CheckSearchUserCountLimitedResult)(nil), "pbimuinfoserver.CheckSearchUserCountLimitedResult")
	proto.RegisterType((*CheckIsMutualContactReq)(nil), "pbimuinfoserver.CheckIsMutualContactReq")
	proto.RegisterType((*CheckIsMutualContactResult)(nil), "pbimuinfoserver.CheckIsMutualContactResult")
	proto.RegisterType((*ChangeGroupNameReq)(nil), "pbimuinfoserver.ChangeGroupNameReq")
	proto.RegisterType((*ChangeGroupNameResult)(nil), "pbimuinfoserver.ChangeGroupNameResult")
	proto.RegisterType((*GetContactsV1Req)(nil), "pbimuinfoserver.GetContactsV1Req")
	proto.RegisterType((*GetContactsV1Result)(nil), "pbimuinfoserver.GetContactsV1Result")
	proto.RegisterType((*SearchPrettyNumberReq)(nil), "pbimuinfoserver.SearchPrettyNumberReq")
	proto.RegisterType((*SearchPrettyNumberRsp)(nil), "pbimuinfoserver.SearchPrettyNumberRsp")
	proto.RegisterType((*ActivePrettyNumberReq)(nil), "pbimuinfoserver.ActivePrettyNumberReq")
	proto.RegisterType((*ActivePrettyNumberRsp)(nil), "pbimuinfoserver.ActivePrettyNumberRsp")
	proto.RegisterType((*GetVirtualBindByPhoneReq)(nil), "pbimuinfoserver.GetVirtualBindByPhoneReq")
	proto.RegisterType((*GetVirtualBindByPhoneRsp)(nil), "pbimuinfoserver.GetVirtualBindByPhoneRsp")
	proto.RegisterType((*GetuserAdminInfoReq)(nil), "pbimuinfoserver.GetuserAdminInfoReq")
	proto.RegisterType((*GetuserAdminInfoResp)(nil), "pbimuinfoserver.GetuserAdminInfoResp")
	proto.RegisterType((*AddUserAdminReq)(nil), "pbimuinfoserver.AddUserAdminReq")
	proto.RegisterType((*AddUserAdminResp)(nil), "pbimuinfoserver.AddUserAdminResp")
	proto.RegisterType((*BindVitualSendCodeChannelReq)(nil), "pbimuinfoserver.BindVitualSendCodeChannelReq")
	proto.RegisterType((*BindVitualSendCodeChannelResp)(nil), "pbimuinfoserver.BindVitualSendCodeChannelResp")
	proto.RegisterType((*GetVitualSendCodeChannelReq)(nil), "pbimuinfoserver.GetVitualSendCodeChannelReq")
	proto.RegisterType((*GetVitualSendCodeChannelResp)(nil), "pbimuinfoserver.GetVitualSendCodeChannelResp")
	proto.RegisterType((*VitualCheckCanAddContactReq)(nil), "pbimuinfoserver.VitualCheckCanAddContactReq")
	proto.RegisterType((*VitualCheckCanAddContactResp)(nil), "pbimuinfoserver.VitualCheckCanAddContactResp")
	proto.RegisterType((*CheckIsPhoneVitulaPhoneReq)(nil), "pbimuinfoserver.CheckIsPhoneVitulaPhoneReq")
	proto.RegisterType((*CheckIsPhoneVitulaPhoneResp)(nil), "pbimuinfoserver.CheckIsPhoneVitulaPhoneResp")
	proto.RegisterType((*CheckIsVitulaPhoneArrReq)(nil), "pbimuinfoserver.CheckIsVitulaPhoneArrReq")
	proto.RegisterType((*CheckIsVitulaPhoneArrResp)(nil), "pbimuinfoserver.CheckIsVitulaPhoneArrResp")
	proto.RegisterType((*SignUpVitualReq)(nil), "pbimuinfoserver.SignUpVitualReq")
	proto.RegisterType((*SignUpVitualResp)(nil), "pbimuinfoserver.SignUpVitualResp")
	proto.RegisterType((*VirtualBindRealPhoneReq)(nil), "pbimuinfoserver.VirtualBindRealPhoneReq")
	proto.RegisterType((*VirtualBindRealPhoneRsp)(nil), "pbimuinfoserver.VirtualBindRealPhoneRsp")
	proto.RegisterType((*VirtualAddContactByPhoneReq)(nil), "pbimuinfoserver.VirtualAddContactByPhoneReq")
	proto.RegisterType((*VirtualAddContactByPhoneRsp)(nil), "pbimuinfoserver.VirtualAddContactByPhoneRsp")
	proto.RegisterType((*JoinGroupCheckReq)(nil), "pbimuinfoserver.JoinGroupCheckReq")
	proto.RegisterType((*JoinGroupCheckRsp)(nil), "pbimuinfoserver.JoinGroupCheckRsp")
	proto.RegisterType((*CheckIsVitulaPhoneReq)(nil), "pbimuinfoserver.CheckIsVitulaPhoneReq")
	proto.RegisterType((*CheckIsVitulaPhoneResp)(nil), "pbimuinfoserver.CheckIsVitulaPhoneResp")
	proto.RegisterType((*VirtulPhoneInfo)(nil), "pbimuinfoserver.VirtulPhoneInfo")
	proto.RegisterType((*GetAllVitualUsersByFlagsReq)(nil), "pbimuinfoserver.GetAllVitualUsersByFlagsReq")
	proto.RegisterType((*GetAllVitualUsersByFlagsResp)(nil), "pbimuinfoserver.GetAllVitualUsersByFlagsResp")
	proto.RegisterType((*GetVitulPhoneNumbersReq)(nil), "pbimuinfoserver.GetVitulPhoneNumbersReq")
	proto.RegisterType((*GetVitulPhoneNumbersResp)(nil), "pbimuinfoserver.GetVitulPhoneNumbersResp")
	proto.RegisterType((*GenVitulaPhoneNumbersReq)(nil), "pbimuinfoserver.GenVitulaPhoneNumbersReq")
	proto.RegisterType((*GenVitulaPhoneNumbersResp)(nil), "pbimuinfoserver.GenVitulaPhoneNumbersResp")
	proto.RegisterType((*UserCdnVipInfo)(nil), "pbimuinfoserver.UserCdnVipInfo")
	proto.RegisterType((*UserCdnPayInfo)(nil), "pbimuinfoserver.UserCdnPayInfo")
	proto.RegisterType((*BuyCdnVipReq)(nil), "pbimuinfoserver.BuyCdnVipReq")
	proto.RegisterType((*BuyCdnVipRsp)(nil), "pbimuinfoserver.BuyCdnVipRsp")
	proto.RegisterType((*SetCdnVipAutoPayReq)(nil), "pbimuinfoserver.SetCdnVipAutoPayReq")
	proto.RegisterType((*SetCdnVipAutoPayRsp)(nil), "pbimuinfoserver.SetCdnVipAutoPayRsp")
	proto.RegisterType((*GetUserCdnPayListReq)(nil), "pbimuinfoserver.GetUserCdnPayListReq")
	proto.RegisterType((*GetUserCdnPayListRsp)(nil), "pbimuinfoserver.GetUserCdnPayListRsp")
	proto.RegisterType((*GetUserCdnVipInfoReq)(nil), "pbimuinfoserver.GetUserCdnVipInfoReq")
	proto.RegisterType((*GetUserCdnVipInfoRsp)(nil), "pbimuinfoserver.GetUserCdnVipInfoRsp")
	proto.RegisterType((*ChkCdnVipReq)(nil), "pbimuinfoserver.ChkCdnVipReq")
	proto.RegisterType((*ChkCdnVipRsp)(nil), "pbimuinfoserver.ChkCdnVipRsp")
	proto.RegisterType((*AddCdnVipReq)(nil), "pbimuinfoserver.AddCdnVipReq")
	proto.RegisterType((*AddCdnVipRsp)(nil), "pbimuinfoserver.AddCdnVipRsp")
	proto.RegisterType((*CheckIsSelfContactReq)(nil), "pbimuinfoserver.CheckIsSelfContactReq")
	proto.RegisterType((*CheckIsSelfContactResult)(nil), "pbimuinfoserver.CheckIsSelfContactResult")
	proto.RegisterType((*GetPhoneBookInfosReq)(nil), "pbimuinfoserver.GetPhoneBookInfosReq")
	proto.RegisterType((*GetPhoneBookInfosResult)(nil), "pbimuinfoserver.GetPhoneBookInfosResult")
	proto.RegisterType((*AddLoginDayReq)(nil), "pbimuinfoserver.AddLoginDayReq")
	proto.RegisterType((*AddLoginDayResult)(nil), "pbimuinfoserver.AddLoginDayResult")
	proto.RegisterType((*CheckDigitalWalletSwitchReq)(nil), "pbimuinfoserver.CheckDigitalWalletSwitchReq")
	proto.RegisterType((*CheckDigitalWalletSwitchResult)(nil), "pbimuinfoserver.CheckDigitalWalletSwitchResult")
	proto.RegisterType((*RecvLockerAddUserIdReq)(nil), "pbimuinfoserver.RecvLockerAddUserIdReq")
	proto.RegisterType((*RecvLockerAddUserIdResult)(nil), "pbimuinfoserver.RecvLockerAddUserIdResult")
	proto.RegisterType((*RecvLockerDelUserIdReq)(nil), "pbimuinfoserver.RecvLockerDelUserIdReq")
	proto.RegisterType((*RecvLockerDelUserIdResult)(nil), "pbimuinfoserver.RecvLockerDelUserIdResult")
	proto.RegisterType((*RecvLockerGetUserIdsReq)(nil), "pbimuinfoserver.RecvLockerGetUserIdsReq")
	proto.RegisterType((*RecvLockerGetUserIdsResult)(nil), "pbimuinfoserver.RecvLockerGetUserIdsResult")
	proto.RegisterType((*CheckIsMuteContactReq)(nil), "pbimuinfoserver.CheckIsMuteContactReq")
	proto.RegisterType((*CheckIsMuteContactResult)(nil), "pbimuinfoserver.CheckIsMuteContactResult")
	proto.RegisterType((*SetUserUnsubscribeReq)(nil), "pbimuinfoserver.SetUserUnsubscribeReq")
	proto.RegisterType((*SetUserUnsubscribeResult)(nil), "pbimuinfoserver.SetUserUnsubscribeResult")
	proto.RegisterType((*GetUserUnsubscribeReq)(nil), "pbimuinfoserver.GetUserUnsubscribeReq")
	proto.RegisterType((*GetUserUnsubscribeResult)(nil), "pbimuinfoserver.GetUserUnsubscribeResult")
	proto.RegisterType((*GetRelationUsersReq)(nil), "pbimuinfoserver.GetRelationUsersReq")
	proto.RegisterType((*GetRelationUsersResult)(nil), "pbimuinfoserver.GetRelationUsersResult")
	proto.RegisterType((*GetUserIpByAddrReq)(nil), "pbimuinfoserver.GetUserIpByAddrReq")
	proto.RegisterType((*GetUserIpByAddrResult)(nil), "pbimuinfoserver.GetUserIpByAddrResult")
	proto.RegisterType((*UserIpAddr)(nil), "pbimuinfoserver.UserIpAddr")
	proto.RegisterType((*GetUserIpByUserIdReq)(nil), "pbimuinfoserver.GetUserIpByUserIdReq")
	proto.RegisterType((*GetUserIpByUserIdResult)(nil), "pbimuinfoserver.GetUserIpByUserIdResult")
	proto.RegisterType((*UserIpAddOrUpdateReq)(nil), "pbimuinfoserver.UserIpAddOrUpdateReq")
	proto.RegisterType((*UserIpAddOrUpdateResult)(nil), "pbimuinfoserver.UserIpAddOrUpdateResult")
	proto.RegisterType((*CheckUserSpaiclReq)(nil), "pbimuinfoserver.CheckUserSpaiclReq")
	proto.RegisterType((*CheckUserSpaiclResult)(nil), "pbimuinfoserver.CheckUserSpaiclResult")
	proto.RegisterType((*InsertUSerSpaiclReq)(nil), "pbimuinfoserver.InsertUSerSpaiclReq")
	proto.RegisterType((*InsertUSerSpaiclResult)(nil), "pbimuinfoserver.InsertUSerSpaiclResult")
	proto.RegisterType((*DelUSerSpaiclReq)(nil), "pbimuinfoserver.DelUSerSpaiclReq")
	proto.RegisterType((*DelUSerSpaiclResult)(nil), "pbimuinfoserver.DelUSerSpaiclResult")
	proto.RegisterType((*GetAllUSerSpaiclReq)(nil), "pbimuinfoserver.GetAllUSerSpaiclReq")
	proto.RegisterType((*GetAllUSerSpaiclResult)(nil), "pbimuinfoserver.GetAllUSerSpaiclResult")
	proto.RegisterType((*ChangePhoneReq)(nil), "pbimuinfoserver.ChangePhoneReq")
	proto.RegisterType((*ChangePhoneResult)(nil), "pbimuinfoserver.ChangePhoneResult")
	proto.RegisterType((*VirtualPhoneNumberInfo)(nil), "pbimuinfoserver.VirtualPhoneNumberInfo")
	proto.RegisterType((*UserExpansionFindReq)(nil), "pbimuinfoserver.UserExpansionFindReq")
	proto.RegisterType((*UserExpansionFindResult)(nil), "pbimuinfoserver.UserExpansionFindResult")
	proto.RegisterType((*UserExpansion)(nil), "pbimuinfoserver.UserExpansion")
	proto.RegisterType((*UserExpansionSetReq)(nil), "pbimuinfoserver.UserExpansionSetReq")
	proto.RegisterType((*UserExpansionSetResult)(nil), "pbimuinfoserver.UserExpansionSetResult")
	proto.RegisterType((*UserInfoExtend)(nil), "pbimuinfoserver.UserInfoExtend")
	proto.RegisterType((*GetUserInfoExtendReq)(nil), "pbimuinfoserver.GetUserInfoExtendReq")
	proto.RegisterType((*GetUserInfoExtendResult)(nil), "pbimuinfoserver.GetUserInfoExtendResult")
	proto.RegisterType((*HistoryChangePhoneAddResult)(nil), "pbimuinfoserver.HistoryChangePhoneAddResult")
	proto.RegisterType((*HistoryChangePhoneAddReq)(nil), "pbimuinfoserver.HistoryChangePhoneAddReq")
	proto.RegisterType((*QueryUpdatesByUseridReq)(nil), "pbimuinfoserver.QueryUpdatesByUseridReq")
	proto.RegisterType((*QueryUpdatesByUseridResult)(nil), "pbimuinfoserver.QueryUpdatesByUseridResult")
	proto.RegisterType((*GetSwitchVersionReq)(nil), "pbimuinfoserver.GetSwitchVersionReq")
	proto.RegisterType((*GetSwitchVersionResult)(nil), "pbimuinfoserver.GetSwitchVersionResult")
	proto.RegisterType((*UGetUsersChatsReq)(nil), "pbimuinfoserver.UGetUsersChatsReq")
	proto.RegisterType((*UGetUsersChatsResult)(nil), "pbimuinfoserver.UGetUsersChatsResult")
	proto.RegisterType((*UpdateBotInfoSuppReq)(nil), "pbimuinfoserver.UpdateBotInfoSuppReq")
	proto.RegisterType((*UpdateBotInfoSuppResult)(nil), "pbimuinfoserver.UpdateBotInfoSuppResult")
	proto.RegisterType((*DeleteUserUsernameReq)(nil), "pbimuinfoserver.DeleteUserUsernameReq")
	proto.RegisterType((*DeleteUserUsernameResult)(nil), "pbimuinfoserver.DeleteUserUsernameResult")
	proto.RegisterType((*UpdateUserLocationReq)(nil), "pbimuinfoserver.UpdateUserLocationReq")
	proto.RegisterType((*UpdateUserLocationResult)(nil), "pbimuinfoserver.UpdateUserLocationResult")
	proto.RegisterType((*UpdateUserGrenderReq)(nil), "pbimuinfoserver.UpdateUserGrenderReq")
	proto.RegisterType((*UpdateUserGrenderResult)(nil), "pbimuinfoserver.UpdateUserGrenderResult")
	proto.RegisterType((*UpdateUserEmailReq)(nil), "pbimuinfoserver.UpdateUserEmailReq")
	proto.RegisterType((*UpdateUserEmailResult)(nil), "pbimuinfoserver.UpdateUserEmailResult")
	proto.RegisterType((*UploadContactsReq)(nil), "pbimuinfoserver.UploadContactsReq")
	proto.RegisterType((*UploadContactsResult)(nil), "pbimuinfoserver.UploadContactsResult")
	proto.RegisterType((*ApplyContactReq)(nil), "pbimuinfoserver.ApplyContactReq")
	proto.RegisterType((*ApplyContactResult)(nil), "pbimuinfoserver.ApplyContactResult")
	proto.RegisterType((*ContactsGreetApplyReq)(nil), "pbimuinfoserver.ContactsGreetApplyReq")
	proto.RegisterType((*ContactsGreetApplyResult)(nil), "pbimuinfoserver.ContactsGreetApplyResult")
	proto.RegisterType((*GetAppliedContactsReq)(nil), "pbimuinfoserver.GetAppliedContactsReq")
	proto.RegisterType((*GetAppliedContactsResult)(nil), "pbimuinfoserver.GetAppliedContactsResult")
	proto.RegisterType((*Applied)(nil), "pbimuinfoserver.Applied")
	proto.RegisterType((*VerifyContactReq)(nil), "pbimuinfoserver.VerifyContactReq")
	proto.RegisterType((*VerifyContactResult)(nil), "pbimuinfoserver.VerifyContactResult")
	proto.RegisterType((*DeleteAppliedHistoryContactReq)(nil), "pbimuinfoserver.DeleteAppliedHistoryContactReq")
	proto.RegisterType((*DeleteAppliedHistoryContactResult)(nil), "pbimuinfoserver.DeleteAppliedHistoryContactResult")
	proto.RegisterType((*DeleteAppliedSomeContactReq)(nil), "pbimuinfoserver.DeleteAppliedSomeContactReq")
	proto.RegisterType((*DeleteAppliedSomeContactResult)(nil), "pbimuinfoserver.DeleteAppliedSomeContactResult")
	proto.RegisterType((*ReadAppliedHistoryReq)(nil), "pbimuinfoserver.ReadAppliedHistoryReq")
	proto.RegisterType((*ReadAppliedHistoryResult)(nil), "pbimuinfoserver.ReadAppliedHistoryResult")
	proto.RegisterType((*GetContactsApplyDifferenceReq)(nil), "pbimuinfoserver.GetContactsApplyDifferenceReq")
	proto.RegisterType((*ApplyDifference)(nil), "pbimuinfoserver.ApplyDifference")
	proto.RegisterType((*GetContactsApplyDifferenceResult)(nil), "pbimuinfoserver.GetContactsApplyDifferenceResult")
	proto.RegisterType((*GetContactsApplyDifferenceV2Req)(nil), "pbimuinfoserver.GetContactsApplyDifferenceV2Req")
	proto.RegisterType((*GetContactsApplyDifferenceV2Result)(nil), "pbimuinfoserver.GetContactsApplyDifferenceV2Result")
	proto.RegisterType((*SearchUserByPhoneReq)(nil), "pbimuinfoserver.SearchUserByPhoneReq")
	proto.RegisterType((*SearchUserByPhoneResult)(nil), "pbimuinfoserver.SearchUserByPhoneResult")
	proto.RegisterType((*CreateGroupReq)(nil), "pbimuinfoserver.CreateGroupReq")
	proto.RegisterType((*CreateGroupResult)(nil), "pbimuinfoserver.CreateGroupResult")
	proto.RegisterType((*SetUserGroupReq)(nil), "pbimuinfoserver.SetUserGroupReq")
	proto.RegisterType((*SetUserGroupResult)(nil), "pbimuinfoserver.SetUserGroupResult")
	proto.RegisterType((*GetFullUserReq)(nil), "pbimuinfoserver.GetFullUserReq")
	proto.RegisterType((*GetFullUserResult)(nil), "pbimuinfoserver.GetFullUserResult")
	proto.RegisterType((*GetUserExpansionReq)(nil), "pbimuinfoserver.GetUserExpansionReq")
	proto.RegisterType((*GetUserExpansionResult)(nil), "pbimuinfoserver.GetUserExpansionResult")
	proto.RegisterType((*ChangeGroupOrderReq)(nil), "pbimuinfoserver.ChangeGroupOrderReq")
	proto.RegisterType((*GroupOrder)(nil), "pbimuinfoserver.groupOrder")
	proto.RegisterType((*ChangeGroupOrderResult)(nil), "pbimuinfoserver.ChangeGroupOrderResult")
	proto.RegisterType((*DeleteGroupReq)(nil), "pbimuinfoserver.DeleteGroupReq")
	proto.RegisterType((*DeleteGroupResult)(nil), "pbimuinfoserver.DeleteGroupResult")
	proto.RegisterType((*DeleteGroupsReq)(nil), "pbimuinfoserver.DeleteGroupsReq")
	proto.RegisterType((*DeleteGroupsResult)(nil), "pbimuinfoserver.DeleteGroupsResult")
	proto.RegisterType((*GetCustomerListReq)(nil), "pbimuinfoserver.GetCustomerListReq")
	proto.RegisterType((*CustomerList)(nil), "pbimuinfoserver.CustomerList")
	proto.RegisterType((*GetCustomerListReply)(nil), "pbimuinfoserver.GetCustomerListReply")
	proto.RegisterType((*IsCustomerByUserIdReq)(nil), "pbimuinfoserver.IsCustomerByUserIdReq")
	proto.RegisterType((*IsCustomerByUserIdReply)(nil), "pbimuinfoserver.IsCustomerByUserIdReply")
	proto.RegisterType((*GetCustomerOrientUsersReq)(nil), "pbimuinfoserver.GetCustomerOrientUsersReq")
	proto.RegisterType((*GetCustomerOrientUsersReply)(nil), "pbimuinfoserver.GetCustomerOrientUsersReply")
	proto.RegisterType((*CheckSpecialUserReq)(nil), "pbimuinfoserver.CheckSpecialUserReq")
	proto.RegisterType((*CheckSpecialUserReply)(nil), "pbimuinfoserver.CheckSpecialUserReply")
	proto.RegisterType((*GetForceGroupListReq)(nil), "pbimuinfoserver.GetForceGroupListReq")
	proto.RegisterType((*GetForceGroupListReply)(nil), "pbimuinfoserver.GetForceGroupListReply")
	proto.RegisterType((*GetNotForceGroupListReq)(nil), "pbimuinfoserver.GetNotForceGroupListReq")
	proto.RegisterType((*GetNotForceGroupListReply)(nil), "pbimuinfoserver.GetNotForceGroupListReply")
	proto.RegisterType((*PassWordRegistryReq)(nil), "pbimuinfoserver.PassWordRegistryReq")
	proto.RegisterType((*PassWordRegistryReply)(nil), "pbimuinfoserver.PassWordRegistryReply")
	proto.RegisterType((*PassWordLoginReq)(nil), "pbimuinfoserver.PassWordLoginReq")
	proto.RegisterType((*PassWordLoginReply)(nil), "pbimuinfoserver.PassWordLoginReply")
	proto.RegisterType((*ChangePassWordReq)(nil), "pbimuinfoserver.ChangePassWordReq")
	proto.RegisterType((*ChangePassWordReply)(nil), "pbimuinfoserver.ChangePassWordReply")
	proto.RegisterType((*RegistryUserByUsernameReq)(nil), "pbimuinfoserver.RegistryUserByUsernameReq")
	proto.RegisterType((*RegistryUserByUsernameReply)(nil), "pbimuinfoserver.RegistryUserByUsernameReply")
	proto.RegisterType((*GetAuthTokenReq)(nil), "pbimuinfoserver.GetAuthTokenReq")
	proto.RegisterType((*GetAuthTokenReply)(nil), "pbimuinfoserver.GetAuthTokenReply")
	proto.RegisterType((*BindUserTokenReq)(nil), "pbimuinfoserver.BindUserTokenReq")
	proto.RegisterType((*BindUserTokenReply)(nil), "pbimuinfoserver.BindUserTokenReply")
	proto.RegisterType((*GetUserByAuthTokenReq)(nil), "pbimuinfoserver.GetUserByAuthTokenReq")
	proto.RegisterType((*GetUserByAuthTokenReply)(nil), "pbimuinfoserver.GetUserByAuthTokenReply")
	proto.RegisterType((*VerifyAuthTokenReq)(nil), "pbimuinfoserver.VerifyAuthTokenReq")
	proto.RegisterType((*VerifyAuthTokenReply)(nil), "pbimuinfoserver.VerifyAuthTokenReply")
	proto.RegisterType((*SignUpV1Req)(nil), "pbimuinfoserver.SignUpV1Req")
	proto.RegisterType((*SignUpV1Reply)(nil), "pbimuinfoserver.SignUpV1Reply")
	proto.RegisterType((*ContactsGetCommonContactsReq)(nil), "pbimuinfoserver.ContactsGetCommonContactsReq")
	proto.RegisterType((*ContactsGetCommonContactsResult)(nil), "pbimuinfoserver.ContactsGetCommonContactsResult")
	proto.RegisterType((*SearchUserByNicknameReq)(nil), "pbimuinfoserver.SearchUserByNicknameReq")
	proto.RegisterType((*SearchUserByNicknameResult)(nil), "pbimuinfoserver.SearchUserByNicknameResult")
	proto.RegisterType((*GetUserRoleInfoByIdsReq)(nil), "pbimuinfoserver.GetUserRoleInfoByIdsReq")
	proto.RegisterType((*UserRoleInfo)(nil), "pbimuinfoserver.UserRoleInfo")
	proto.RegisterType((*GetUserRoleInfoByIdsRsp)(nil), "pbimuinfoserver.GetUserRoleInfoByIdsRsp")
	proto.RegisterType((*InnerUser)(nil), "pbimuinfoserver.InnerUser")
	proto.RegisterType((*InnerUserOpReq)(nil), "pbimuinfoserver.InnerUserOpReq")
	proto.RegisterType((*InnerUserOpRsp)(nil), "pbimuinfoserver.InnerUserOpRsp")
	proto.RegisterType((*BindRealPhoneReq)(nil), "pbimuinfoserver.BindRealPhoneReq")
	proto.RegisterType((*BindRealPhoneRsp)(nil), "pbimuinfoserver.BindRealPhoneRsp")
	proto.RegisterType((*GetUserRelationWithIdsReq)(nil), "pbimuinfoserver.GetUserRelationWithIdsReq")
	proto.RegisterType((*Relation)(nil), "pbimuinfoserver.Relation")
	proto.RegisterType((*GetUserRelationWithIdsRsp)(nil), "pbimuinfoserver.GetUserRelationWithIdsRsp")
	proto.RegisterType((*UpdateUserVerifiedReq)(nil), "pbimuinfoserver.UpdateUserVerifiedReq")
	proto.RegisterType((*UpdateUserVerifiedResult)(nil), "pbimuinfoserver.UpdateUserVerifiedResult")
	proto.RegisterType((*AddPhoneBookContactsReq)(nil), "pbimuinfoserver.AddPhoneBookContactsReq")
	proto.RegisterType((*Contact)(nil), "pbimuinfoserver.Contact")
	proto.RegisterType((*AddPhoneBookContactsReply)(nil), "pbimuinfoserver.AddPhoneBookContactsReply")
	proto.RegisterType((*InviteCodeBindReq)(nil), "pbimuinfoserver.InviteCodeBindReq")
	proto.RegisterType((*InviteCodeBindRsp)(nil), "pbimuinfoserver.InviteCodeBindRsp")
	proto.RegisterType((*MyTeamReq)(nil), "pbimuinfoserver.MyTeamReq")
	proto.RegisterType((*MyTeamRsp)(nil), "pbimuinfoserver.MyTeamRsp")
	proto.RegisterType((*RealNameCertificationReq)(nil), "pbimuinfoserver.RealNameCertificationReq")
	proto.RegisterType((*RealNameCertificationRsp)(nil), "pbimuinfoserver.RealNameCertificationRsp")
	proto.RegisterType((*GetCertificationResultReq)(nil), "pbimuinfoserver.GetCertificationResultReq")
	proto.RegisterType((*CertificationResult)(nil), "pbimuinfoserver.CertificationResult")
	proto.RegisterType((*GetCertificationResultRsp)(nil), "pbimuinfoserver.GetCertificationResultRsp")
	proto.RegisterType((*VerifyCertificationReq)(nil), "pbimuinfoserver.VerifyCertificationReq")
	proto.RegisterType((*VerifyCertificationRsp)(nil), "pbimuinfoserver.VerifyCertificationRsp")
	proto.RegisterType((*UpdateUserDetailV1Req)(nil), "pbimuinfoserver.UpdateUserDetailV1Req")
	proto.RegisterType((*UpdateUserDetailV1Rsp)(nil), "pbimuinfoserver.UpdateUserDetailV1Rsp")
	proto.RegisterEnum("pbimuinfoserver.ReErrCode", ReErrCode_name, ReErrCode_value)
	proto.RegisterEnum("pbimuinfoserver.PasswordRegistryErrorCode", PasswordRegistryErrorCode_name, PasswordRegistryErrorCode_value)
	proto.RegisterEnum("pbimuinfoserver.Switch", Switch_name, Switch_value)
	proto.RegisterEnum("pbimuinfoserver.UChatResultCode", UChatResultCode_name, UChatResultCode_value)
	proto.RegisterEnum("pbimuinfoserver.OAuthLoginError", OAuthLoginError_name, OAuthLoginError_value)
	proto.RegisterEnum("pbimuinfoserver.UpdateSwitchResult_ResultCode", UpdateSwitchResult_ResultCode_name, UpdateSwitchResult_ResultCode_value)
	proto.RegisterEnum("pbimuinfoserver.GetSwitchStatusResult_ResultCode", GetSwitchStatusResult_ResultCode_name, GetSwitchStatusResult_ResultCode_value)
	proto.RegisterEnum("pbimuinfoserver.SignUpVitualResp_ResultCode", SignUpVitualResp_ResultCode_name, SignUpVitualResp_ResultCode_value)
	proto.RegisterEnum("pbimuinfoserver.GetPhoneBookInfosResult_ResultCode", GetPhoneBookInfosResult_ResultCode_name, GetPhoneBookInfosResult_ResultCode_value)
	proto.RegisterEnum("pbimuinfoserver.AddLoginDayResult_ResultCode", AddLoginDayResult_ResultCode_name, AddLoginDayResult_ResultCode_value)
	proto.RegisterEnum("pbimuinfoserver.CheckDigitalWalletSwitchResult_ResultCode", CheckDigitalWalletSwitchResult_ResultCode_name, CheckDigitalWalletSwitchResult_ResultCode_value)
	proto.RegisterEnum("pbimuinfoserver.RecvLockerAddUserIdResult_ResultCode", RecvLockerAddUserIdResult_ResultCode_name, RecvLockerAddUserIdResult_ResultCode_value)
	proto.RegisterEnum("pbimuinfoserver.RecvLockerDelUserIdResult_ResultCode", RecvLockerDelUserIdResult_ResultCode_name, RecvLockerDelUserIdResult_ResultCode_value)
	proto.RegisterEnum("pbimuinfoserver.RecvLockerGetUserIdsResult_ResultCode", RecvLockerGetUserIdsResult_ResultCode_name, RecvLockerGetUserIdsResult_ResultCode_value)
	proto.RegisterEnum("pbimuinfoserver.CheckIsMuteContactResult_ResultCode", CheckIsMuteContactResult_ResultCode_name, CheckIsMuteContactResult_ResultCode_value)
	proto.RegisterEnum("pbimuinfoserver.SetUserUnsubscribeResult_ResultCode", SetUserUnsubscribeResult_ResultCode_name, SetUserUnsubscribeResult_ResultCode_value)
	proto.RegisterEnum("pbimuinfoserver.GetUserUnsubscribeResult_ResultCode", GetUserUnsubscribeResult_ResultCode_name, GetUserUnsubscribeResult_ResultCode_value)
	proto.RegisterEnum("pbimuinfoserver.GetRelationUsersResult_ResultCode", GetRelationUsersResult_ResultCode_name, GetRelationUsersResult_ResultCode_value)
	proto.RegisterEnum("pbimuinfoserver.GetUserIpByAddrResult_ResultCode", GetUserIpByAddrResult_ResultCode_name, GetUserIpByAddrResult_ResultCode_value)
	proto.RegisterEnum("pbimuinfoserver.GetUserIpByUserIdResult_ResultCode", GetUserIpByUserIdResult_ResultCode_name, GetUserIpByUserIdResult_ResultCode_value)
	proto.RegisterEnum("pbimuinfoserver.UserIpAddOrUpdateResult_ResultCode", UserIpAddOrUpdateResult_ResultCode_name, UserIpAddOrUpdateResult_ResultCode_value)
	proto.RegisterEnum("pbimuinfoserver.CheckUserSpaiclResult_ResultCode", CheckUserSpaiclResult_ResultCode_name, CheckUserSpaiclResult_ResultCode_value)
	proto.RegisterEnum("pbimuinfoserver.InsertUSerSpaiclResult_ResultCode", InsertUSerSpaiclResult_ResultCode_name, InsertUSerSpaiclResult_ResultCode_value)
	proto.RegisterEnum("pbimuinfoserver.DelUSerSpaiclResult_ResultCode", DelUSerSpaiclResult_ResultCode_name, DelUSerSpaiclResult_ResultCode_value)
	proto.RegisterEnum("pbimuinfoserver.GetAllUSerSpaiclResult_ResultCode", GetAllUSerSpaiclResult_ResultCode_name, GetAllUSerSpaiclResult_ResultCode_value)
	proto.RegisterEnum("pbimuinfoserver.ChangePhoneResult_ResultCode", ChangePhoneResult_ResultCode_name, ChangePhoneResult_ResultCode_value)
	proto.RegisterEnum("pbimuinfoserver.DeleteUserUsernameResult_Code", DeleteUserUsernameResult_Code_name, DeleteUserUsernameResult_Code_value)
	proto.RegisterEnum("pbimuinfoserver.SignUpV1Reply_ResultCode", SignUpV1Reply_ResultCode_name, SignUpV1Reply_ResultCode_value)
	proto.RegisterEnum("pbimuinfoserver.InnerUserOpReq_OperType", InnerUserOpReq_OperType_name, InnerUserOpReq_OperType_value)
	proto.RegisterEnum("pbimuinfoserver.Relation_RelationType", Relation_RelationType_name, Relation_RelationType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserServerService service

type UserServerServiceClient interface {
	// 邀请码绑定
	InviteCodeBind(ctx context.Context, in *InviteCodeBindReq, opts ...grpc.CallOption) (*InviteCodeBindRsp, error)
	// 我的团队
	MyTeam(ctx context.Context, in *MyTeamReq, opts ...grpc.CallOption) (*MyTeamRsp, error)
	// 实名认证材料提交
	RealNameCertification(ctx context.Context, in *RealNameCertificationReq, opts ...grpc.CallOption) (*RealNameCertificationRsp, error)
	// 实名认证结果反馈
	GetCertificationResult(ctx context.Context, in *GetCertificationResultReq, opts ...grpc.CallOption) (*GetCertificationResultRsp, error)
	// 实名认证后台审核
	VerifyCertification(ctx context.Context, in *VerifyCertificationReq, opts ...grpc.CallOption) (*VerifyCertificationRsp, error)
	// 实名认证后台审核
	UpdateUserDetailV1(ctx context.Context, in *UpdateUserDetailV1Req, opts ...grpc.CallOption) (*UpdateUserDetailV1Rsp, error)
	// 添加电话部好友
	AddPhoneBookContacts(ctx context.Context, in *AddPhoneBookContactsReq, opts ...grpc.CallOption) (*AddPhoneBookContactsReply, error)
	SignUpV1(ctx context.Context, in *SignUpV1Req, opts ...grpc.CallOption) (*SignUpV1Reply, error)
	// 更新用户类别，标记
	UpdateUserTypeLable(ctx context.Context, in *UpdateUserTypeLableReq, opts ...grpc.CallOption) (*UpdateUserTypeLableResult, error)
	// 更新用户年龄，性别，地理位置等等
	UpdateUserDetail(ctx context.Context, in *UpdateUserDetailReq, opts ...grpc.CallOption) (*UpdateUserDetailResult, error)
	UpdateUserDetailBirthday(ctx context.Context, in *UpdateUserDetailBirthdayReq, opts ...grpc.CallOption) (*UpdateUserDetailBirthdayResult, error)
	SetUserDetail(ctx context.Context, in *SetUserDetailReq, opts ...grpc.CallOption) (*SetUserDetailResult, error)
	// 检查用户是否已经创建帐号
	CheckUserHasPay(ctx context.Context, in *CheckUserHasPayReq, opts ...grpc.CallOption) (*CheckUserHasPayResp, error)
	// 更新用户已经开通支付帐号
	UpdateUserHasPay(ctx context.Context, in *UpdateUserHasPayReq, opts ...grpc.CallOption) (*UpdateUserHasPayResp, error)
	// 获取viplog 电话号码列表(仅供ip调用获取viplog 的电话号码们)
	GetViplogPhoneList(ctx context.Context, in *GetViplogPhoneListReq, opts ...grpc.CallOption) (*GetViplogPhoneListResp, error)
	// ********************************用户信息
	// 注册指定用户的接口()
	RegisterUserInfo(ctx context.Context, in *RegisterUserInfoReq, opts ...grpc.CallOption) (*RegisterUserInfoResult, error)
	// 获取用户信息
	GetUserInfoById(ctx context.Context, in *GetUserInfoByIdReq, opts ...grpc.CallOption) (*GetUserInfoResult, error)
	// 批量根据用户ID来获取用户信息selfId 代表自己的Id userId 代表需要获取的用户的Id
	GetUserInfoByIdArr(ctx context.Context, in *GetUserInfoByIdArrReq, opts ...grpc.CallOption) (*GetUserInfoByIdArrResult, error)
	// 获取账号的销毁时间
	GetUserExpierById(ctx context.Context, in *GetUserExpireByIdReq, opts ...grpc.CallOption) (*GetUserExpireByIdResult, error)
	// 通过用户电话号码获取用户基本信息
	GetUserInfoByPhone(ctx context.Context, in *GetUserByphone, opts ...grpc.CallOption) (*GetUserInfoResult, error)
	// 通过username获取用户基本信息
	GetUserInfoByUsername(ctx context.Context, in *GetUserByUsername, opts ...grpc.CallOption) (*GetUserInfoResult, error)
	// 更新用户头像
	UpdateUserPhoto(ctx context.Context, in *UpdatePhotoInfoReq, opts ...grpc.CallOption) (*UpdateUserPhotoResult, error)
	// 获取用户头像
	GetUserPhoto(ctx context.Context, in *GetPhotoInfoReq, opts ...grpc.CallOption) (*GetUserPhotoResult, error)
	// 更新用户用户status
	UpdateUserStatus(ctx context.Context, in *StatusReq, opts ...grpc.CallOption) (*StatusResult, error)
	// 更新用户用户status v2
	UpdateUserStatusV2(ctx context.Context, in *StatusReq, opts ...grpc.CallOption) (*StatusResult, error)
	// 设置用户账号销毁时间
	UpdateUserExpire(ctx context.Context, in *UpdateExpireReq, opts ...grpc.CallOption) (*UpdateExpireResult, error)
	// 用户DC的迁移
	UpdateUserCluster(ctx context.Context, in *UserClusterChange, opts ...grpc.CallOption) (*UserClusterChangeResult, error)
	// 更新用户的username
	UpdateUserName(ctx context.Context, in *UpdateuserNameReq, opts ...grpc.CallOption) (*UpdateuserNameResult, error)
	// 更新用户的扩展字段
	UpdateUserLevel(ctx context.Context, in *UpdateUserLevelReq, opts ...grpc.CallOption) (*UpdateUserLevelResult, error)
	// 更新用户的扩展字段
	UpdateUserExtion(ctx context.Context, in *UpdateUserExtionReq, opts ...grpc.CallOption) (*UpdateUserExtionResult, error)
	// 校验用户名称是否被占用
	CheckUserNameOccupied(ctx context.Context, in *CheckUserNameOccupiedReq, opts ...grpc.CallOption) (*CheckUserNameOccupiedResult, error)
	// 检查电话号码是否已经注册
	CheckPhoneRegister(ctx context.Context, in *CheckPhoneRegisterReq, opts ...grpc.CallOption) (*CheckPhoneRegisterResult, error)
	// 账号(标记删除)
	DeleteUserInfoById(ctx context.Context, in *DeleteAccountByIdReq, opts ...grpc.CallOption) (*DelAccountResult, error)
	// 更新机器人相关信息
	UpdateBotInfo(ctx context.Context, in *BotUpdateInfo, opts ...grpc.CallOption) (*BotUpdateInfoResult, error)
	// 更新机器人头像
	UpdateBotPic(ctx context.Context, in *UpdateBotPicRequest, opts ...grpc.CallOption) (*UpdateBotPicResult, error)
	// 检测用户哈希是否合法
	CheckUserAccessHashValid(ctx context.Context, in *CheckUserAccessHashValidReq, opts ...grpc.CallOption) (*CheckUserAccessHashValidResult, error)
	// 根据id获取正在进行的电话update信息
	QueryUpdatesByUserid(ctx context.Context, in *QueryUpdatesByUseridReq, opts ...grpc.CallOption) (*QueryUpdatesByUseridResult, error)
	// 获取用户信息
	GetFullUser(ctx context.Context, in *GetFullUserReq, opts ...grpc.CallOption) (*GetFullUserResult, error)
	// 添加手机号码更换历史记录
	HistoryChangePhoneAdd(ctx context.Context, in *HistoryChangePhoneAddReq, opts ...grpc.CallOption) (*HistoryChangePhoneAddResult, error)
	// 更换手机
	AccountChangePhone(ctx context.Context, in *ChangePhoneReq, opts ...grpc.CallOption) (*ChangePhoneResult, error)
	// 更新firstName,lastName和about
	UpdateUserProfile(ctx context.Context, in *UpdateUserProfileReq, opts ...grpc.CallOption) (*UpdateUserProfileResult, error)
	// 联系人搜索用户
	SearchUserByPhone(ctx context.Context, in *SearchUserByPhoneReq, opts ...grpc.CallOption) (*SearchUserByPhoneResult, error)
	ContactsGetCommonContacts(ctx context.Context, in *ContactsGetCommonContactsReq, opts ...grpc.CallOption) (*ContactsGetCommonContactsResult, error)
	SearchUserByNickname(ctx context.Context, in *SearchUserByNicknameReq, opts ...grpc.CallOption) (*SearchUserByNicknameResult, error)
	// CMD命令,删除用户名称
	DeleteUserUsername(ctx context.Context, in *DeleteUserUsernameReq, opts ...grpc.CallOption) (*DeleteUserUsernameResult, error)
	// 补充 更新机器人相关信息
	UpdateBotInfoSupp(ctx context.Context, in *UpdateBotInfoSuppReq, opts ...grpc.CallOption) (*UpdateBotInfoSuppResult, error)
	// 根据用户Id来获取用户信息selfId 代表自己的Id userId 代表需要获取的用户的Id
	CheckIsMuteContact(ctx context.Context, in *CheckIsMuteContactReq, opts ...grpc.CallOption) (*CheckIsMuteContactResult, error)
	// ********************************联系人的相关接口
	// 删除单个联系人的接口
	ContactsDelContact(ctx context.Context, in *DelContactReq, opts ...grpc.CallOption) (*DelContactResult, error)
	// 接受添加联系人的接口
	AcceptContact(ctx context.Context, in *AcceptContactReq, opts ...grpc.CallOption) (*AcceptContactResult, error)
	// 批量删除用户联系人的接口
	ContactsDelContactsArr(ctx context.Context, in *DelContactArrReq, opts ...grpc.CallOption) (*DelContactArrResult, error)
	// 重置用户联系人信息，删除所有联系人
	CmdResetUserContacts(ctx context.Context, in *CmdResetUserContactsReq, opts ...grpc.CallOption) (*CmdResetUserContactsResult, error)
	// 获取用户联系人列表
	ContactsGetContacts(ctx context.Context, in *ContatsGetContactsReq, opts ...grpc.CallOption) (*ContatsGetContactsResult, error)
	// 获取用户联系人列表V1
	ContactsGetContactsV1(ctx context.Context, in *ContactsGetContactsV1Req, opts ...grpc.CallOption) (*ContactsGetContactsV1Result, error)
	// 获取联系人列表
	GetContactsV1(ctx context.Context, in *GetContactsV1Req, opts ...grpc.CallOption) (*GetContactsV1Result, error)
	// 获取用户联系人userid列表
	ContactsGetContactsId(ctx context.Context, in *ContactsGetContactsIdReq, opts ...grpc.CallOption) (*ContactsGetContactsIdResult, error)
	// 批量导入联系人的操作(具体业务逻辑在用户服务来实现)
	ImportContacts(ctx context.Context, in *ContactsImportPhoneContactsReq, opts ...grpc.CallOption) (*ContactsImportPhoneContactsResult, error)
	// 获取自己所有联系人的在线状态
	GetContactsStatus(ctx context.Context, in *GetContactsStatusReq, opts ...grpc.CallOption) (*GetContactsStatusResult, error)
	// 检测自己是否是对方的联系人
	CheckSelfIsContact(ctx context.Context, in *CheckSelfIsContactReq, opts ...grpc.CallOption) (*CheckSelfIsContactResult, error)
	// 检测是否双向好友
	CheckIsMutualContact(ctx context.Context, in *CheckIsMutualContactReq, opts ...grpc.CallOption) (*CheckIsMutualContactResult, error)
	// ************用户关联表 用户在线状态的更新*******************
	// 创建dialog的增加用户关系（单聊）
	DialogUserRelation(ctx context.Context, in *AddRelationIdInfo, opts ...grpc.CallOption) (*AddRelationIdInfoResult, error)
	// 删除dialog的剔除用户关系
	DelDialogUserRelation(ctx context.Context, in *DelRelationIdInfo, opts ...grpc.CallOption) (*DelRelationIdInfoResult, error)
	// 上传保存联系人
	UploadContacts(ctx context.Context, in *UploadContactsReq, opts ...grpc.CallOption) (*UploadContactsResult, error)
	// 联系人申请
	ApplyContact(ctx context.Context, in *ApplyContactReq, opts ...grpc.CallOption) (*ApplyContactResult, error)
	ContactsGreetApply(ctx context.Context, in *ContactsGreetApplyReq, opts ...grpc.CallOption) (*ContactsGreetApplyResult, error)
	// 确认添加申请
	VerifyContact(ctx context.Context, in *VerifyContactReq, opts ...grpc.CallOption) (*VerifyContactResult, error)
	// 获取被添加用户申请列表
	GetAppliedContacts(ctx context.Context, in *GetAppliedContactsReq, opts ...grpc.CallOption) (*GetAppliedContactsResult, error)
	// 删除申请列表
	DeleteAppliedHistoryContact(ctx context.Context, in *DeleteAppliedHistoryContactReq, opts ...grpc.CallOption) (*DeleteAppliedHistoryContactResult, error)
	// 删除一些申请
	DeleteAppliedSomeContact(ctx context.Context, in *DeleteAppliedSomeContactReq, opts ...grpc.CallOption) (*DeleteAppliedSomeContactResult, error)
	DeleteReceiveApplies(ctx context.Context, in *DeleteReceiveAppliesReq, opts ...grpc.CallOption) (*DeleteReceiveAppliesResult, error)
	// 设置申请为已读
	ReadAppliedHistory(ctx context.Context, in *ReadAppliedHistoryReq, opts ...grpc.CallOption) (*ReadAppliedHistoryResult, error)
	GetContactsApplyDifference(ctx context.Context, in *GetContactsApplyDifferenceReq, opts ...grpc.CallOption) (*GetContactsApplyDifferenceResult, error)
	GetContactsApplyDifferenceV2(ctx context.Context, in *GetContactsApplyDifferenceV2Req, opts ...grpc.CallOption) (*GetContactsApplyDifferenceV2Result, error)
	// 检查搜索用户数量是否到达上线
	CheckSearchUserCountLimited(ctx context.Context, in *CheckSearchUserCountLimitedReq, opts ...grpc.CallOption) (*CheckSearchUserCountLimitedResult, error)
	// **********联系人分组***************
	CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResult, error)
	SetUserGroup(ctx context.Context, in *SetUserGroupReq, opts ...grpc.CallOption) (*SetUserGroupResult, error)
	ChangeGroupName(ctx context.Context, in *ChangeGroupNameReq, opts ...grpc.CallOption) (*ChangeGroupNameResult, error)
	ChangeGroupOrder(ctx context.Context, in *ChangeGroupOrderReq, opts ...grpc.CallOption) (*ChangeGroupOrderResult, error)
	DeleteGroup(ctx context.Context, in *DeleteGroupReq, opts ...grpc.CallOption) (*DeleteGroupResult, error)
	DeleteGroups(ctx context.Context, in *DeleteGroupsReq, opts ...grpc.CallOption) (*DeleteGroupsResult, error)
	// **********用户黑名单的管理 ***************
	// 拉黑用户
	BlockedUser(ctx context.Context, in *BlockeduserReq, opts ...grpc.CallOption) (*BlockeduserResult, error)
	// 移除拉黑的用户
	ContactUnBlockedUser(ctx context.Context, in *ContactUnblockedReq, opts ...grpc.CallOption) (*BlockeduserResult, error)
	// 获取用户的黑明单列表
	ContactsGetBlocked(ctx context.Context, in *ContactsGetBlockedReq, opts ...grpc.CallOption) (*ContactsGetBlockedResult, error)
	// 检测用户是否是黑名单
	CheckUserIsBlocked(ctx context.Context, in *CheckUserIsBlockedReq, opts ...grpc.CallOption) (*CheckUserIsBlockedResult, error)
	// ***********系统白名单的相关操作和管理*******************
	// 存储白名单
	StoreSystemWhiteUser(ctx context.Context, in *StoreSysWhiteUserReq, opts ...grpc.CallOption) (*StoreSysWhiteUserResult, error)
	// 更新用户白名单的级别
	UpdateSystemWhiteUserLevel(ctx context.Context, in *UpdateSystemWhiteUserLevelReq, opts ...grpc.CallOption) (*UpdateSystemWhiteUserLevelResult, error)
	// 获取指定的白名单人信息
	GetSysWhiteUser(ctx context.Context, in *GetSysWhiteUserReq, opts ...grpc.CallOption) (*GetSysWhiteUserResult, error)
	// 获取白名单列表 )
	GetSysWhiteUserArr(ctx context.Context, in *GetSysWhiteUserArrReq, opts ...grpc.CallOption) (*GetSysWhiteUserArrResult, error)
	// 移除指定的白名单人
	DelSysWhiteUser(ctx context.Context, in *DelSysWhiteUserReq, opts ...grpc.CallOption) (*DelSysWhiteUserResult, error)
	// 拉取所有用户的DC
	GetAllUserDc(ctx context.Context, in *GetAllDcReq, opts ...grpc.CallOption) (UserServerService_GetAllUserDcClient, error)
	// ************************* 有关隐私选项设置的接口们 ****************************************
	// 设置隐私选项的接口
	SetUserPrivacy(ctx context.Context, in *SetPrivacyReq, opts ...grpc.CallOption) (*SetPrivacyResult, error)
	// 获取隐私选项的接口
	GetUserPrivacy(ctx context.Context, in *GetPrivacyReq, opts ...grpc.CallOption) (*GetPrivacyResult, error)
	// 检测用户的隐私选项
	CheckUserPrivacy(ctx context.Context, in *CheckPrivacyReq, opts ...grpc.CallOption) (*CheckPrivacyResult, error)
	// ********************推送音效等设置 *****************
	// 获取音效设置
	GetNotifySettings(ctx context.Context, in *GetNotifySettingsReq, opts ...grpc.CallOption) (*GetNotifySettingsResult, error)
	// 更新音效设置
	UpdateNotifySettings(ctx context.Context, in *UpdateNotifySettingsReq, opts ...grpc.CallOption) (*UpdateNotifySettingsResult, error)
	// ********* 用户相关的GPS *********
	GetUserGps(ctx context.Context, in *GetUserGpsReq, opts ...grpc.CallOption) (*GetUserGpsResult, error)
	// ********* switches ****************
	// 用户开关设置-用户名被搜索,未读计数,允许多段登陆
	UpdateSwitch(ctx context.Context, in *UpdateSwitchReq, opts ...grpc.CallOption) (*UpdateSwitchResult, error)
	// 获取开关的状态
	GetSwitchStatus(ctx context.Context, in *GetSwitchStatusReq, opts ...grpc.CallOption) (*GetSwitchStatusResult, error)
	// 获取Switch版本
	GetSwitchVersion(ctx context.Context, in *GetSwitchVersionReq, opts ...grpc.CallOption) (*GetSwitchVersionResult, error)
	// ********************获取用户扩信息 *****************
	// 获取用户扩信息
	GetUserExpansion(ctx context.Context, in *GetUserExpansionReq, opts ...grpc.CallOption) (*GetUserExpansionResult, error)
	// 用户扩展信息表-设置
	UserExpansionSet(ctx context.Context, in *UserExpansionSetReq, opts ...grpc.CallOption) (*UserExpansionSetResult, error)
	// 获取用户扩展信息
	UserExpansionFind(ctx context.Context, in *UserExpansionFindReq, opts ...grpc.CallOption) (*UserExpansionFindResult, error)
	// ********************获取用户扩信息 *****************
	GetUserInfoExtend(ctx context.Context, in *GetUserInfoExtendReq, opts ...grpc.CallOption) (*GetUserInfoExtendResult, error)
	// ********************特权名单列表 *****************
	// 检查自己是否在特权名单列表中
	CheckUserSpaicl(ctx context.Context, in *CheckUserSpaiclReq, opts ...grpc.CallOption) (*CheckUserSpaiclResult, error)
	// 增加特权名单
	InsertUSerSpaicl(ctx context.Context, in *InsertUSerSpaiclReq, opts ...grpc.CallOption) (*InsertUSerSpaiclResult, error)
	// 删除特权名单
	DelUSerSpaicl(ctx context.Context, in *DelUSerSpaiclReq, opts ...grpc.CallOption) (*DelUSerSpaiclResult, error)
	// 获取所有的特权名单
	GetAllUSerSpaicl(ctx context.Context, in *GetAllUSerSpaiclReq, opts ...grpc.CallOption) (*GetAllUSerSpaiclResult, error)
	// ********************特权名单列表中 *****************
	// UserIpAddOrUpdate(uid int32, addr string, isSignUp bool) error
	UserIpAddOrUpdate(ctx context.Context, in *UserIpAddOrUpdateReq, opts ...grpc.CallOption) (*UserIpAddOrUpdateResult, error)
	// GetUserIpByAddr(addr string, signUpOnly bool) (users []int32, err error)
	GetUserIpByAddr(ctx context.Context, in *GetUserIpByAddrReq, opts ...grpc.CallOption) (*GetUserIpByAddrResult, error)
	// GetUserIpByUserId(uid int32, signUpOnly bool) (addrs []*UserIpAddr, err error)
	GetUserIpByUserId(ctx context.Context, in *GetUserIpByUserIdReq, opts ...grpc.CallOption) (*GetUserIpByUserIdResult, error)
	// 获取自己有关联的联系人关系列表
	GetRelationUsers(ctx context.Context, in *GetRelationUsersReq, opts ...grpc.CallOption) (*GetRelationUsersResult, error)
	// ****************** 退订*************************
	// 设置退订
	SetUserUnsubscribe(ctx context.Context, in *SetUserUnsubscribeReq, opts ...grpc.CallOption) (*SetUserUnsubscribeResult, error)
	// 获取退订
	GetUserUnsubscribe(ctx context.Context, in *GetUserUnsubscribeReq, opts ...grpc.CallOption) (*GetUserUnsubscribeResult, error)
	// ****************** RecvLocker *************************
	RecvLockerAddUserId(ctx context.Context, in *RecvLockerAddUserIdReq, opts ...grpc.CallOption) (*RecvLockerAddUserIdResult, error)
	RecvLockerDelUserId(ctx context.Context, in *RecvLockerDelUserIdReq, opts ...grpc.CallOption) (*RecvLockerDelUserIdResult, error)
	RecvLockerGetUserIds(ctx context.Context, in *RecvLockerGetUserIdsReq, opts ...grpc.CallOption) (*RecvLockerGetUserIdsResult, error)
	CheckDigitalWalletSwitch(ctx context.Context, in *CheckDigitalWalletSwitchReq, opts ...grpc.CallOption) (*CheckDigitalWalletSwitchResult, error)
	AddLoginDay(ctx context.Context, in *AddLoginDayReq, opts ...grpc.CallOption) (*AddLoginDayResult, error)
	// 获取客服列表
	GetCustomerList(ctx context.Context, in *GetCustomerListReq, opts ...grpc.CallOption) (*GetCustomerListReply, error)
	// 指定ID是否是客服
	IsCustomerByUserId(ctx context.Context, in *IsCustomerByUserIdReq, opts ...grpc.CallOption) (*IsCustomerByUserIdReply, error)
	// 获取指定客服的用户列表请求
	GetCustomerOrientUsers(ctx context.Context, in *GetCustomerOrientUsersReq, opts ...grpc.CallOption) (*GetCustomerOrientUsersReply, error)
	// 检测用户Id是否是特权消息账号请求
	CheckSpecialUser(ctx context.Context, in *CheckSpecialUserReq, opts ...grpc.CallOption) (*CheckSpecialUserReply, error)
	// 获取强制加入群组ids
	GetForceGroupList(ctx context.Context, in *GetForceGroupListReq, opts ...grpc.CallOption) (*GetForceGroupListReply, error)
	// 获取非强制加入群组ids
	GetNotForceGroupList(ctx context.Context, in *GetNotForceGroupListReq, opts ...grpc.CallOption) (*GetNotForceGroupListReply, error)
	// 批量查询电话本号码是系统号码
	GetPhoneBookInfos(ctx context.Context, in *GetPhoneBookInfosReq, opts ...grpc.CallOption) (*GetPhoneBookInfosResult, error)
	// ********** 密码登录注册开始 *****************
	// 密码注册
	PassWordRegistry(ctx context.Context, in *PassWordRegistryReq, opts ...grpc.CallOption) (*PassWordRegistryReply, error)
	// 通过username注册
	RegistryUserByUsername(ctx context.Context, in *RegistryUserByUsernameReq, opts ...grpc.CallOption) (*RegistryUserByUsernameReply, error)
	// 密码登录
	PassWordLogin(ctx context.Context, in *PassWordLoginReq, opts ...grpc.CallOption) (*PassWordLoginReply, error)
	// 找回密码
	ChangePassWord(ctx context.Context, in *ChangePassWordReq, opts ...grpc.CallOption) (*ChangePassWordReply, error)
	CheckIsSelfContact(ctx context.Context, in *CheckIsSelfContactReq, opts ...grpc.CallOption) (*CheckIsSelfContactResult, error)
	ChkCdnVip(ctx context.Context, in *ChkCdnVipReq, opts ...grpc.CallOption) (*ChkCdnVipRsp, error)
	AddCdnVip(ctx context.Context, in *AddCdnVipReq, opts ...grpc.CallOption) (*AddCdnVipRsp, error)
	// @ added by qingsong at 2021.03.03 for buy CDN VIP.
	BuyCdnVip(ctx context.Context, in *BuyCdnVipReq, opts ...grpc.CallOption) (*BuyCdnVipRsp, error)
	// @ added by qingsong at 2021.03.03 for set CDN VIP auto renew.
	SetCdnVipAutoPay(ctx context.Context, in *SetCdnVipAutoPayReq, opts ...grpc.CallOption) (*SetCdnVipAutoPayRsp, error)
	// @ added by qingsong at 2021.03.03 for get user cdn-vip info.
	GetUserCdnVipInfo(ctx context.Context, in *GetUserCdnVipInfoReq, opts ...grpc.CallOption) (*GetUserCdnVipInfoRsp, error)
	// @ added by qingsong at 2021.03.03 for get user cdn-vip pay list.
	GetUserCdnPayList(ctx context.Context, in *GetUserCdnPayListReq, opts ...grpc.CallOption) (*GetUserCdnPayListRsp, error)
	// =-------------------- 虛擬號碼相關
	// 生成虛擬號碼池
	GenVitulaPhoneNumbers(ctx context.Context, in *GenVitulaPhoneNumbersReq, opts ...grpc.CallOption) (*GenVitulaPhoneNumbersResp, error)
	// 獲取n個虛擬號碼
	GetVitulPhoneNumbers(ctx context.Context, in *GetVitulPhoneNumbersReq, opts ...grpc.CallOption) (*GetVitulPhoneNumbersResp, error)
	// 獲取指定需要啦羣的用戶們
	GetAllVitualUsersByFlags(ctx context.Context, in *GetAllVitualUsersByFlagsReq, opts ...grpc.CallOption) (*GetAllVitualUsersByFlagsResp, error)
	// 檢測是否是虛擬號碼
	CheckIsVitulaPhone(ctx context.Context, in *CheckIsVitulaPhoneReq, opts ...grpc.CallOption) (*CheckIsVitulaPhoneResp, error)
	SignUpVitual(ctx context.Context, in *SignUpVitualReq, opts ...grpc.CallOption) (*SignUpVitualResp, error)
	// 檢測是否是虛擬號碼
	CheckIsVitulaPhoneArr(ctx context.Context, in *CheckIsVitulaPhoneArrReq, opts ...grpc.CallOption) (*CheckIsVitulaPhoneArrResp, error)
	// 檢測是否是虛擬號碼
	CheckIsPhoneVitulaPhone(ctx context.Context, in *CheckIsPhoneVitulaPhoneReq, opts ...grpc.CallOption) (*CheckIsPhoneVitulaPhoneResp, error)
	// 检查用户是否能加群
	JoinGroupCheck(ctx context.Context, in *JoinGroupCheckReq, opts ...grpc.CallOption) (*JoinGroupCheckRsp, error)
	// 檢測是否有添加聯系人權限（號碼tag是否相同）
	VitualCheckCanAddContact(ctx context.Context, in *VitualCheckCanAddContactReq, opts ...grpc.CallOption) (*VitualCheckCanAddContactResp, error)
	// 獲取發送短信驗證碼的頻道
	GetVitualSendCodeChannel(ctx context.Context, in *GetVitualSendCodeChannelReq, opts ...grpc.CallOption) (*GetVitualSendCodeChannelResp, error)
	// 新增
	BindVitualSendCodeChannel(ctx context.Context, in *BindVitualSendCodeChannelReq, opts ...grpc.CallOption) (*BindVitualSendCodeChannelResp, error)
	// 虚拟帐号绑定手机号
	VirtualBindRealPhone(ctx context.Context, in *VirtualBindRealPhoneReq, opts ...grpc.CallOption) (*VirtualBindRealPhoneRsp, error)
	// 虚拟帐号加真实帐号用户好友
	VirtualAddContactByPhone(ctx context.Context, in *VirtualAddContactByPhoneReq, opts ...grpc.CallOption) (*VirtualAddContactByPhoneRsp, error)
	// 获取虚拟帐号绑定信息
	GetVirtualBindByPhone(ctx context.Context, in *GetVirtualBindByPhoneReq, opts ...grpc.CallOption) (*GetVirtualBindByPhoneRsp, error)
	// 授予管理員權限
	AddUserAdmin(ctx context.Context, in *AddUserAdminReq, opts ...grpc.CallOption) (*AddUserAdminResp, error)
	GetuserAdminInfo(ctx context.Context, in *GetuserAdminInfoReq, opts ...grpc.CallOption) (*GetuserAdminInfoResp, error)
	// @ added by qingsong at 2021.03.17 for virtual pretty number
	// 查询靓号
	SearchPrettyNumber(ctx context.Context, in *SearchPrettyNumberReq, opts ...grpc.CallOption) (*SearchPrettyNumberRsp, error)
	// 激活靓号
	ActivePrettyNumber(ctx context.Context, in *ActivePrettyNumberReq, opts ...grpc.CallOption) (*ActivePrettyNumberRsp, error)
	// @ brief : 获取用户角色信息
	GetUserRoleInfoByIds(ctx context.Context, in *GetUserRoleInfoByIdsReq, opts ...grpc.CallOption) (*GetUserRoleInfoByIdsRsp, error)
	// @ brief : inner user operation.
	InnerUserOp(ctx context.Context, in *InnerUserOpReq, opts ...grpc.CallOption) (*InnerUserOpRsp, error)
	// @ brief : bind real phone.
	BindRealPhone(ctx context.Context, in *BindRealPhoneReq, opts ...grpc.CallOption) (*BindRealPhoneRsp, error)
	// / @ added by qingsong at 2021.12.13 for get user relation.
	GetUserRelationWithIds(ctx context.Context, in *GetUserRelationWithIdsReq, opts ...grpc.CallOption) (*GetUserRelationWithIdsRsp, error)
	UpdateUserVerified(ctx context.Context, in *UpdateUserVerifiedReq, opts ...grpc.CallOption) (*UpdateUserVerifiedResult, error)
}

type userServerServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServerServiceClient(cc *grpc.ClientConn) UserServerServiceClient {
	return &userServerServiceClient{cc}
}

func (c *userServerServiceClient) InviteCodeBind(ctx context.Context, in *InviteCodeBindReq, opts ...grpc.CallOption) (*InviteCodeBindRsp, error) {
	out := new(InviteCodeBindRsp)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/InviteCodeBind", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) MyTeam(ctx context.Context, in *MyTeamReq, opts ...grpc.CallOption) (*MyTeamRsp, error) {
	out := new(MyTeamRsp)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/MyTeam", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) RealNameCertification(ctx context.Context, in *RealNameCertificationReq, opts ...grpc.CallOption) (*RealNameCertificationRsp, error) {
	out := new(RealNameCertificationRsp)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/RealNameCertification", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetCertificationResult(ctx context.Context, in *GetCertificationResultReq, opts ...grpc.CallOption) (*GetCertificationResultRsp, error) {
	out := new(GetCertificationResultRsp)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetCertificationResult", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) VerifyCertification(ctx context.Context, in *VerifyCertificationReq, opts ...grpc.CallOption) (*VerifyCertificationRsp, error) {
	out := new(VerifyCertificationRsp)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/VerifyCertification", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserDetailV1(ctx context.Context, in *UpdateUserDetailV1Req, opts ...grpc.CallOption) (*UpdateUserDetailV1Rsp, error) {
	out := new(UpdateUserDetailV1Rsp)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateUserDetailV1", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) AddPhoneBookContacts(ctx context.Context, in *AddPhoneBookContactsReq, opts ...grpc.CallOption) (*AddPhoneBookContactsReply, error) {
	out := new(AddPhoneBookContactsReply)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/AddPhoneBookContacts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) SignUpV1(ctx context.Context, in *SignUpV1Req, opts ...grpc.CallOption) (*SignUpV1Reply, error) {
	out := new(SignUpV1Reply)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/SignUpV1", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserTypeLable(ctx context.Context, in *UpdateUserTypeLableReq, opts ...grpc.CallOption) (*UpdateUserTypeLableResult, error) {
	out := new(UpdateUserTypeLableResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateUserTypeLable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserDetail(ctx context.Context, in *UpdateUserDetailReq, opts ...grpc.CallOption) (*UpdateUserDetailResult, error) {
	out := new(UpdateUserDetailResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateUserDetail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserDetailBirthday(ctx context.Context, in *UpdateUserDetailBirthdayReq, opts ...grpc.CallOption) (*UpdateUserDetailBirthdayResult, error) {
	out := new(UpdateUserDetailBirthdayResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateUserDetailBirthday", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) SetUserDetail(ctx context.Context, in *SetUserDetailReq, opts ...grpc.CallOption) (*SetUserDetailResult, error) {
	out := new(SetUserDetailResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/SetUserDetail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckUserHasPay(ctx context.Context, in *CheckUserHasPayReq, opts ...grpc.CallOption) (*CheckUserHasPayResp, error) {
	out := new(CheckUserHasPayResp)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/CheckUserHasPay", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserHasPay(ctx context.Context, in *UpdateUserHasPayReq, opts ...grpc.CallOption) (*UpdateUserHasPayResp, error) {
	out := new(UpdateUserHasPayResp)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateUserHasPay", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetViplogPhoneList(ctx context.Context, in *GetViplogPhoneListReq, opts ...grpc.CallOption) (*GetViplogPhoneListResp, error) {
	out := new(GetViplogPhoneListResp)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetViplogPhoneList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) RegisterUserInfo(ctx context.Context, in *RegisterUserInfoReq, opts ...grpc.CallOption) (*RegisterUserInfoResult, error) {
	out := new(RegisterUserInfoResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/RegisterUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserInfoById(ctx context.Context, in *GetUserInfoByIdReq, opts ...grpc.CallOption) (*GetUserInfoResult, error) {
	out := new(GetUserInfoResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetUserInfoById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserInfoByIdArr(ctx context.Context, in *GetUserInfoByIdArrReq, opts ...grpc.CallOption) (*GetUserInfoByIdArrResult, error) {
	out := new(GetUserInfoByIdArrResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetUserInfoByIdArr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserExpierById(ctx context.Context, in *GetUserExpireByIdReq, opts ...grpc.CallOption) (*GetUserExpireByIdResult, error) {
	out := new(GetUserExpireByIdResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetUserExpierById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserInfoByPhone(ctx context.Context, in *GetUserByphone, opts ...grpc.CallOption) (*GetUserInfoResult, error) {
	out := new(GetUserInfoResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetUserInfoByPhone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserInfoByUsername(ctx context.Context, in *GetUserByUsername, opts ...grpc.CallOption) (*GetUserInfoResult, error) {
	out := new(GetUserInfoResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetUserInfoByUsername", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserPhoto(ctx context.Context, in *UpdatePhotoInfoReq, opts ...grpc.CallOption) (*UpdateUserPhotoResult, error) {
	out := new(UpdateUserPhotoResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateUserPhoto", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserPhoto(ctx context.Context, in *GetPhotoInfoReq, opts ...grpc.CallOption) (*GetUserPhotoResult, error) {
	out := new(GetUserPhotoResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetUserPhoto", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserStatus(ctx context.Context, in *StatusReq, opts ...grpc.CallOption) (*StatusResult, error) {
	out := new(StatusResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateUserStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserStatusV2(ctx context.Context, in *StatusReq, opts ...grpc.CallOption) (*StatusResult, error) {
	out := new(StatusResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateUserStatusV2", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserExpire(ctx context.Context, in *UpdateExpireReq, opts ...grpc.CallOption) (*UpdateExpireResult, error) {
	out := new(UpdateExpireResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateUserExpire", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserCluster(ctx context.Context, in *UserClusterChange, opts ...grpc.CallOption) (*UserClusterChangeResult, error) {
	out := new(UserClusterChangeResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateUserCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserName(ctx context.Context, in *UpdateuserNameReq, opts ...grpc.CallOption) (*UpdateuserNameResult, error) {
	out := new(UpdateuserNameResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateUserName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserLevel(ctx context.Context, in *UpdateUserLevelReq, opts ...grpc.CallOption) (*UpdateUserLevelResult, error) {
	out := new(UpdateUserLevelResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateUserLevel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserExtion(ctx context.Context, in *UpdateUserExtionReq, opts ...grpc.CallOption) (*UpdateUserExtionResult, error) {
	out := new(UpdateUserExtionResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateUserExtion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckUserNameOccupied(ctx context.Context, in *CheckUserNameOccupiedReq, opts ...grpc.CallOption) (*CheckUserNameOccupiedResult, error) {
	out := new(CheckUserNameOccupiedResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/CheckUserNameOccupied", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckPhoneRegister(ctx context.Context, in *CheckPhoneRegisterReq, opts ...grpc.CallOption) (*CheckPhoneRegisterResult, error) {
	out := new(CheckPhoneRegisterResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/CheckPhoneRegister", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DeleteUserInfoById(ctx context.Context, in *DeleteAccountByIdReq, opts ...grpc.CallOption) (*DelAccountResult, error) {
	out := new(DelAccountResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/DeleteUserInfoById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateBotInfo(ctx context.Context, in *BotUpdateInfo, opts ...grpc.CallOption) (*BotUpdateInfoResult, error) {
	out := new(BotUpdateInfoResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateBotInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateBotPic(ctx context.Context, in *UpdateBotPicRequest, opts ...grpc.CallOption) (*UpdateBotPicResult, error) {
	out := new(UpdateBotPicResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateBotPic", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckUserAccessHashValid(ctx context.Context, in *CheckUserAccessHashValidReq, opts ...grpc.CallOption) (*CheckUserAccessHashValidResult, error) {
	out := new(CheckUserAccessHashValidResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/CheckUserAccessHashValid", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) QueryUpdatesByUserid(ctx context.Context, in *QueryUpdatesByUseridReq, opts ...grpc.CallOption) (*QueryUpdatesByUseridResult, error) {
	out := new(QueryUpdatesByUseridResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/QueryUpdatesByUserid", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetFullUser(ctx context.Context, in *GetFullUserReq, opts ...grpc.CallOption) (*GetFullUserResult, error) {
	out := new(GetFullUserResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetFullUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) HistoryChangePhoneAdd(ctx context.Context, in *HistoryChangePhoneAddReq, opts ...grpc.CallOption) (*HistoryChangePhoneAddResult, error) {
	out := new(HistoryChangePhoneAddResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/HistoryChangePhoneAdd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) AccountChangePhone(ctx context.Context, in *ChangePhoneReq, opts ...grpc.CallOption) (*ChangePhoneResult, error) {
	out := new(ChangePhoneResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/AccountChangePhone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserProfile(ctx context.Context, in *UpdateUserProfileReq, opts ...grpc.CallOption) (*UpdateUserProfileResult, error) {
	out := new(UpdateUserProfileResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateUserProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) SearchUserByPhone(ctx context.Context, in *SearchUserByPhoneReq, opts ...grpc.CallOption) (*SearchUserByPhoneResult, error) {
	out := new(SearchUserByPhoneResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/SearchUserByPhone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ContactsGetCommonContacts(ctx context.Context, in *ContactsGetCommonContactsReq, opts ...grpc.CallOption) (*ContactsGetCommonContactsResult, error) {
	out := new(ContactsGetCommonContactsResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/ContactsGetCommonContacts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) SearchUserByNickname(ctx context.Context, in *SearchUserByNicknameReq, opts ...grpc.CallOption) (*SearchUserByNicknameResult, error) {
	out := new(SearchUserByNicknameResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/SearchUserByNickname", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DeleteUserUsername(ctx context.Context, in *DeleteUserUsernameReq, opts ...grpc.CallOption) (*DeleteUserUsernameResult, error) {
	out := new(DeleteUserUsernameResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/DeleteUserUsername", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateBotInfoSupp(ctx context.Context, in *UpdateBotInfoSuppReq, opts ...grpc.CallOption) (*UpdateBotInfoSuppResult, error) {
	out := new(UpdateBotInfoSuppResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateBotInfoSupp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckIsMuteContact(ctx context.Context, in *CheckIsMuteContactReq, opts ...grpc.CallOption) (*CheckIsMuteContactResult, error) {
	out := new(CheckIsMuteContactResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/CheckIsMuteContact", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ContactsDelContact(ctx context.Context, in *DelContactReq, opts ...grpc.CallOption) (*DelContactResult, error) {
	out := new(DelContactResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/ContactsDelContact", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) AcceptContact(ctx context.Context, in *AcceptContactReq, opts ...grpc.CallOption) (*AcceptContactResult, error) {
	out := new(AcceptContactResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/AcceptContact", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ContactsDelContactsArr(ctx context.Context, in *DelContactArrReq, opts ...grpc.CallOption) (*DelContactArrResult, error) {
	out := new(DelContactArrResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/ContactsDelContactsArr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CmdResetUserContacts(ctx context.Context, in *CmdResetUserContactsReq, opts ...grpc.CallOption) (*CmdResetUserContactsResult, error) {
	out := new(CmdResetUserContactsResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/CmdResetUserContacts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ContactsGetContacts(ctx context.Context, in *ContatsGetContactsReq, opts ...grpc.CallOption) (*ContatsGetContactsResult, error) {
	out := new(ContatsGetContactsResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/ContactsGetContacts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ContactsGetContactsV1(ctx context.Context, in *ContactsGetContactsV1Req, opts ...grpc.CallOption) (*ContactsGetContactsV1Result, error) {
	out := new(ContactsGetContactsV1Result)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/ContactsGetContactsV1", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetContactsV1(ctx context.Context, in *GetContactsV1Req, opts ...grpc.CallOption) (*GetContactsV1Result, error) {
	out := new(GetContactsV1Result)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetContactsV1", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ContactsGetContactsId(ctx context.Context, in *ContactsGetContactsIdReq, opts ...grpc.CallOption) (*ContactsGetContactsIdResult, error) {
	out := new(ContactsGetContactsIdResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/ContactsGetContactsId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ImportContacts(ctx context.Context, in *ContactsImportPhoneContactsReq, opts ...grpc.CallOption) (*ContactsImportPhoneContactsResult, error) {
	out := new(ContactsImportPhoneContactsResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/ImportContacts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetContactsStatus(ctx context.Context, in *GetContactsStatusReq, opts ...grpc.CallOption) (*GetContactsStatusResult, error) {
	out := new(GetContactsStatusResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetContactsStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckSelfIsContact(ctx context.Context, in *CheckSelfIsContactReq, opts ...grpc.CallOption) (*CheckSelfIsContactResult, error) {
	out := new(CheckSelfIsContactResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/CheckSelfIsContact", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckIsMutualContact(ctx context.Context, in *CheckIsMutualContactReq, opts ...grpc.CallOption) (*CheckIsMutualContactResult, error) {
	out := new(CheckIsMutualContactResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/CheckIsMutualContact", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DialogUserRelation(ctx context.Context, in *AddRelationIdInfo, opts ...grpc.CallOption) (*AddRelationIdInfoResult, error) {
	out := new(AddRelationIdInfoResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/DialogUserRelation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DelDialogUserRelation(ctx context.Context, in *DelRelationIdInfo, opts ...grpc.CallOption) (*DelRelationIdInfoResult, error) {
	out := new(DelRelationIdInfoResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/DelDialogUserRelation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UploadContacts(ctx context.Context, in *UploadContactsReq, opts ...grpc.CallOption) (*UploadContactsResult, error) {
	out := new(UploadContactsResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UploadContacts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ApplyContact(ctx context.Context, in *ApplyContactReq, opts ...grpc.CallOption) (*ApplyContactResult, error) {
	out := new(ApplyContactResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/ApplyContact", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ContactsGreetApply(ctx context.Context, in *ContactsGreetApplyReq, opts ...grpc.CallOption) (*ContactsGreetApplyResult, error) {
	out := new(ContactsGreetApplyResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/ContactsGreetApply", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) VerifyContact(ctx context.Context, in *VerifyContactReq, opts ...grpc.CallOption) (*VerifyContactResult, error) {
	out := new(VerifyContactResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/VerifyContact", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetAppliedContacts(ctx context.Context, in *GetAppliedContactsReq, opts ...grpc.CallOption) (*GetAppliedContactsResult, error) {
	out := new(GetAppliedContactsResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetAppliedContacts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DeleteAppliedHistoryContact(ctx context.Context, in *DeleteAppliedHistoryContactReq, opts ...grpc.CallOption) (*DeleteAppliedHistoryContactResult, error) {
	out := new(DeleteAppliedHistoryContactResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/DeleteAppliedHistoryContact", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DeleteAppliedSomeContact(ctx context.Context, in *DeleteAppliedSomeContactReq, opts ...grpc.CallOption) (*DeleteAppliedSomeContactResult, error) {
	out := new(DeleteAppliedSomeContactResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/DeleteAppliedSomeContact", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DeleteReceiveApplies(ctx context.Context, in *DeleteReceiveAppliesReq, opts ...grpc.CallOption) (*DeleteReceiveAppliesResult, error) {
	out := new(DeleteReceiveAppliesResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/DeleteReceiveApplies", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ReadAppliedHistory(ctx context.Context, in *ReadAppliedHistoryReq, opts ...grpc.CallOption) (*ReadAppliedHistoryResult, error) {
	out := new(ReadAppliedHistoryResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/ReadAppliedHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetContactsApplyDifference(ctx context.Context, in *GetContactsApplyDifferenceReq, opts ...grpc.CallOption) (*GetContactsApplyDifferenceResult, error) {
	out := new(GetContactsApplyDifferenceResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetContactsApplyDifference", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetContactsApplyDifferenceV2(ctx context.Context, in *GetContactsApplyDifferenceV2Req, opts ...grpc.CallOption) (*GetContactsApplyDifferenceV2Result, error) {
	out := new(GetContactsApplyDifferenceV2Result)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetContactsApplyDifferenceV2", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckSearchUserCountLimited(ctx context.Context, in *CheckSearchUserCountLimitedReq, opts ...grpc.CallOption) (*CheckSearchUserCountLimitedResult, error) {
	out := new(CheckSearchUserCountLimitedResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/CheckSearchUserCountLimited", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResult, error) {
	out := new(CreateGroupResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/CreateGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) SetUserGroup(ctx context.Context, in *SetUserGroupReq, opts ...grpc.CallOption) (*SetUserGroupResult, error) {
	out := new(SetUserGroupResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/SetUserGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ChangeGroupName(ctx context.Context, in *ChangeGroupNameReq, opts ...grpc.CallOption) (*ChangeGroupNameResult, error) {
	out := new(ChangeGroupNameResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/ChangeGroupName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ChangeGroupOrder(ctx context.Context, in *ChangeGroupOrderReq, opts ...grpc.CallOption) (*ChangeGroupOrderResult, error) {
	out := new(ChangeGroupOrderResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/ChangeGroupOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DeleteGroup(ctx context.Context, in *DeleteGroupReq, opts ...grpc.CallOption) (*DeleteGroupResult, error) {
	out := new(DeleteGroupResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/DeleteGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DeleteGroups(ctx context.Context, in *DeleteGroupsReq, opts ...grpc.CallOption) (*DeleteGroupsResult, error) {
	out := new(DeleteGroupsResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/DeleteGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) BlockedUser(ctx context.Context, in *BlockeduserReq, opts ...grpc.CallOption) (*BlockeduserResult, error) {
	out := new(BlockeduserResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/BlockedUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ContactUnBlockedUser(ctx context.Context, in *ContactUnblockedReq, opts ...grpc.CallOption) (*BlockeduserResult, error) {
	out := new(BlockeduserResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/ContactUnBlockedUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ContactsGetBlocked(ctx context.Context, in *ContactsGetBlockedReq, opts ...grpc.CallOption) (*ContactsGetBlockedResult, error) {
	out := new(ContactsGetBlockedResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/ContactsGetBlocked", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckUserIsBlocked(ctx context.Context, in *CheckUserIsBlockedReq, opts ...grpc.CallOption) (*CheckUserIsBlockedResult, error) {
	out := new(CheckUserIsBlockedResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/CheckUserIsBlocked", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) StoreSystemWhiteUser(ctx context.Context, in *StoreSysWhiteUserReq, opts ...grpc.CallOption) (*StoreSysWhiteUserResult, error) {
	out := new(StoreSysWhiteUserResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/StoreSystemWhiteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateSystemWhiteUserLevel(ctx context.Context, in *UpdateSystemWhiteUserLevelReq, opts ...grpc.CallOption) (*UpdateSystemWhiteUserLevelResult, error) {
	out := new(UpdateSystemWhiteUserLevelResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateSystemWhiteUserLevel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetSysWhiteUser(ctx context.Context, in *GetSysWhiteUserReq, opts ...grpc.CallOption) (*GetSysWhiteUserResult, error) {
	out := new(GetSysWhiteUserResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetSysWhiteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetSysWhiteUserArr(ctx context.Context, in *GetSysWhiteUserArrReq, opts ...grpc.CallOption) (*GetSysWhiteUserArrResult, error) {
	out := new(GetSysWhiteUserArrResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetSysWhiteUserArr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DelSysWhiteUser(ctx context.Context, in *DelSysWhiteUserReq, opts ...grpc.CallOption) (*DelSysWhiteUserResult, error) {
	out := new(DelSysWhiteUserResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/DelSysWhiteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetAllUserDc(ctx context.Context, in *GetAllDcReq, opts ...grpc.CallOption) (UserServerService_GetAllUserDcClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_UserServerService_serviceDesc.Streams[0], c.cc, "/pbimuinfoserver.UserServerService/GetAllUserDc", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServerServiceGetAllUserDcClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserServerService_GetAllUserDcClient interface {
	Recv() (*UserDc, error)
	grpc.ClientStream
}

type userServerServiceGetAllUserDcClient struct {
	grpc.ClientStream
}

func (x *userServerServiceGetAllUserDcClient) Recv() (*UserDc, error) {
	m := new(UserDc)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServerServiceClient) SetUserPrivacy(ctx context.Context, in *SetPrivacyReq, opts ...grpc.CallOption) (*SetPrivacyResult, error) {
	out := new(SetPrivacyResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/SetUserPrivacy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserPrivacy(ctx context.Context, in *GetPrivacyReq, opts ...grpc.CallOption) (*GetPrivacyResult, error) {
	out := new(GetPrivacyResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetUserPrivacy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckUserPrivacy(ctx context.Context, in *CheckPrivacyReq, opts ...grpc.CallOption) (*CheckPrivacyResult, error) {
	out := new(CheckPrivacyResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/CheckUserPrivacy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetNotifySettings(ctx context.Context, in *GetNotifySettingsReq, opts ...grpc.CallOption) (*GetNotifySettingsResult, error) {
	out := new(GetNotifySettingsResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetNotifySettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateNotifySettings(ctx context.Context, in *UpdateNotifySettingsReq, opts ...grpc.CallOption) (*UpdateNotifySettingsResult, error) {
	out := new(UpdateNotifySettingsResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateNotifySettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserGps(ctx context.Context, in *GetUserGpsReq, opts ...grpc.CallOption) (*GetUserGpsResult, error) {
	out := new(GetUserGpsResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetUserGps", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateSwitch(ctx context.Context, in *UpdateSwitchReq, opts ...grpc.CallOption) (*UpdateSwitchResult, error) {
	out := new(UpdateSwitchResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateSwitch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetSwitchStatus(ctx context.Context, in *GetSwitchStatusReq, opts ...grpc.CallOption) (*GetSwitchStatusResult, error) {
	out := new(GetSwitchStatusResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetSwitchStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetSwitchVersion(ctx context.Context, in *GetSwitchVersionReq, opts ...grpc.CallOption) (*GetSwitchVersionResult, error) {
	out := new(GetSwitchVersionResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetSwitchVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserExpansion(ctx context.Context, in *GetUserExpansionReq, opts ...grpc.CallOption) (*GetUserExpansionResult, error) {
	out := new(GetUserExpansionResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetUserExpansion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UserExpansionSet(ctx context.Context, in *UserExpansionSetReq, opts ...grpc.CallOption) (*UserExpansionSetResult, error) {
	out := new(UserExpansionSetResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UserExpansionSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UserExpansionFind(ctx context.Context, in *UserExpansionFindReq, opts ...grpc.CallOption) (*UserExpansionFindResult, error) {
	out := new(UserExpansionFindResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UserExpansionFind", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserInfoExtend(ctx context.Context, in *GetUserInfoExtendReq, opts ...grpc.CallOption) (*GetUserInfoExtendResult, error) {
	out := new(GetUserInfoExtendResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetUserInfoExtend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckUserSpaicl(ctx context.Context, in *CheckUserSpaiclReq, opts ...grpc.CallOption) (*CheckUserSpaiclResult, error) {
	out := new(CheckUserSpaiclResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/CheckUserSpaicl", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) InsertUSerSpaicl(ctx context.Context, in *InsertUSerSpaiclReq, opts ...grpc.CallOption) (*InsertUSerSpaiclResult, error) {
	out := new(InsertUSerSpaiclResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/InsertUSerSpaicl", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DelUSerSpaicl(ctx context.Context, in *DelUSerSpaiclReq, opts ...grpc.CallOption) (*DelUSerSpaiclResult, error) {
	out := new(DelUSerSpaiclResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/DelUSerSpaicl", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetAllUSerSpaicl(ctx context.Context, in *GetAllUSerSpaiclReq, opts ...grpc.CallOption) (*GetAllUSerSpaiclResult, error) {
	out := new(GetAllUSerSpaiclResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetAllUSerSpaicl", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UserIpAddOrUpdate(ctx context.Context, in *UserIpAddOrUpdateReq, opts ...grpc.CallOption) (*UserIpAddOrUpdateResult, error) {
	out := new(UserIpAddOrUpdateResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UserIpAddOrUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserIpByAddr(ctx context.Context, in *GetUserIpByAddrReq, opts ...grpc.CallOption) (*GetUserIpByAddrResult, error) {
	out := new(GetUserIpByAddrResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetUserIpByAddr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserIpByUserId(ctx context.Context, in *GetUserIpByUserIdReq, opts ...grpc.CallOption) (*GetUserIpByUserIdResult, error) {
	out := new(GetUserIpByUserIdResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetUserIpByUserId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetRelationUsers(ctx context.Context, in *GetRelationUsersReq, opts ...grpc.CallOption) (*GetRelationUsersResult, error) {
	out := new(GetRelationUsersResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetRelationUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) SetUserUnsubscribe(ctx context.Context, in *SetUserUnsubscribeReq, opts ...grpc.CallOption) (*SetUserUnsubscribeResult, error) {
	out := new(SetUserUnsubscribeResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/SetUserUnsubscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserUnsubscribe(ctx context.Context, in *GetUserUnsubscribeReq, opts ...grpc.CallOption) (*GetUserUnsubscribeResult, error) {
	out := new(GetUserUnsubscribeResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetUserUnsubscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) RecvLockerAddUserId(ctx context.Context, in *RecvLockerAddUserIdReq, opts ...grpc.CallOption) (*RecvLockerAddUserIdResult, error) {
	out := new(RecvLockerAddUserIdResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/RecvLockerAddUserId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) RecvLockerDelUserId(ctx context.Context, in *RecvLockerDelUserIdReq, opts ...grpc.CallOption) (*RecvLockerDelUserIdResult, error) {
	out := new(RecvLockerDelUserIdResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/RecvLockerDelUserId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) RecvLockerGetUserIds(ctx context.Context, in *RecvLockerGetUserIdsReq, opts ...grpc.CallOption) (*RecvLockerGetUserIdsResult, error) {
	out := new(RecvLockerGetUserIdsResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/RecvLockerGetUserIds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckDigitalWalletSwitch(ctx context.Context, in *CheckDigitalWalletSwitchReq, opts ...grpc.CallOption) (*CheckDigitalWalletSwitchResult, error) {
	out := new(CheckDigitalWalletSwitchResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/CheckDigitalWalletSwitch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) AddLoginDay(ctx context.Context, in *AddLoginDayReq, opts ...grpc.CallOption) (*AddLoginDayResult, error) {
	out := new(AddLoginDayResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/AddLoginDay", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetCustomerList(ctx context.Context, in *GetCustomerListReq, opts ...grpc.CallOption) (*GetCustomerListReply, error) {
	out := new(GetCustomerListReply)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetCustomerList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) IsCustomerByUserId(ctx context.Context, in *IsCustomerByUserIdReq, opts ...grpc.CallOption) (*IsCustomerByUserIdReply, error) {
	out := new(IsCustomerByUserIdReply)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/IsCustomerByUserId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetCustomerOrientUsers(ctx context.Context, in *GetCustomerOrientUsersReq, opts ...grpc.CallOption) (*GetCustomerOrientUsersReply, error) {
	out := new(GetCustomerOrientUsersReply)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetCustomerOrientUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckSpecialUser(ctx context.Context, in *CheckSpecialUserReq, opts ...grpc.CallOption) (*CheckSpecialUserReply, error) {
	out := new(CheckSpecialUserReply)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/CheckSpecialUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetForceGroupList(ctx context.Context, in *GetForceGroupListReq, opts ...grpc.CallOption) (*GetForceGroupListReply, error) {
	out := new(GetForceGroupListReply)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetForceGroupList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetNotForceGroupList(ctx context.Context, in *GetNotForceGroupListReq, opts ...grpc.CallOption) (*GetNotForceGroupListReply, error) {
	out := new(GetNotForceGroupListReply)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetNotForceGroupList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetPhoneBookInfos(ctx context.Context, in *GetPhoneBookInfosReq, opts ...grpc.CallOption) (*GetPhoneBookInfosResult, error) {
	out := new(GetPhoneBookInfosResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetPhoneBookInfos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) PassWordRegistry(ctx context.Context, in *PassWordRegistryReq, opts ...grpc.CallOption) (*PassWordRegistryReply, error) {
	out := new(PassWordRegistryReply)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/PassWordRegistry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) RegistryUserByUsername(ctx context.Context, in *RegistryUserByUsernameReq, opts ...grpc.CallOption) (*RegistryUserByUsernameReply, error) {
	out := new(RegistryUserByUsernameReply)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/RegistryUserByUsername", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) PassWordLogin(ctx context.Context, in *PassWordLoginReq, opts ...grpc.CallOption) (*PassWordLoginReply, error) {
	out := new(PassWordLoginReply)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/PassWordLogin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ChangePassWord(ctx context.Context, in *ChangePassWordReq, opts ...grpc.CallOption) (*ChangePassWordReply, error) {
	out := new(ChangePassWordReply)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/ChangePassWord", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckIsSelfContact(ctx context.Context, in *CheckIsSelfContactReq, opts ...grpc.CallOption) (*CheckIsSelfContactResult, error) {
	out := new(CheckIsSelfContactResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/CheckIsSelfContact", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ChkCdnVip(ctx context.Context, in *ChkCdnVipReq, opts ...grpc.CallOption) (*ChkCdnVipRsp, error) {
	out := new(ChkCdnVipRsp)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/ChkCdnVip", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) AddCdnVip(ctx context.Context, in *AddCdnVipReq, opts ...grpc.CallOption) (*AddCdnVipRsp, error) {
	out := new(AddCdnVipRsp)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/AddCdnVip", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) BuyCdnVip(ctx context.Context, in *BuyCdnVipReq, opts ...grpc.CallOption) (*BuyCdnVipRsp, error) {
	out := new(BuyCdnVipRsp)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/BuyCdnVip", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) SetCdnVipAutoPay(ctx context.Context, in *SetCdnVipAutoPayReq, opts ...grpc.CallOption) (*SetCdnVipAutoPayRsp, error) {
	out := new(SetCdnVipAutoPayRsp)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/SetCdnVipAutoPay", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserCdnVipInfo(ctx context.Context, in *GetUserCdnVipInfoReq, opts ...grpc.CallOption) (*GetUserCdnVipInfoRsp, error) {
	out := new(GetUserCdnVipInfoRsp)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetUserCdnVipInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserCdnPayList(ctx context.Context, in *GetUserCdnPayListReq, opts ...grpc.CallOption) (*GetUserCdnPayListRsp, error) {
	out := new(GetUserCdnPayListRsp)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetUserCdnPayList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GenVitulaPhoneNumbers(ctx context.Context, in *GenVitulaPhoneNumbersReq, opts ...grpc.CallOption) (*GenVitulaPhoneNumbersResp, error) {
	out := new(GenVitulaPhoneNumbersResp)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GenVitulaPhoneNumbers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetVitulPhoneNumbers(ctx context.Context, in *GetVitulPhoneNumbersReq, opts ...grpc.CallOption) (*GetVitulPhoneNumbersResp, error) {
	out := new(GetVitulPhoneNumbersResp)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetVitulPhoneNumbers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetAllVitualUsersByFlags(ctx context.Context, in *GetAllVitualUsersByFlagsReq, opts ...grpc.CallOption) (*GetAllVitualUsersByFlagsResp, error) {
	out := new(GetAllVitualUsersByFlagsResp)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetAllVitualUsersByFlags", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckIsVitulaPhone(ctx context.Context, in *CheckIsVitulaPhoneReq, opts ...grpc.CallOption) (*CheckIsVitulaPhoneResp, error) {
	out := new(CheckIsVitulaPhoneResp)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/CheckIsVitulaPhone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) SignUpVitual(ctx context.Context, in *SignUpVitualReq, opts ...grpc.CallOption) (*SignUpVitualResp, error) {
	out := new(SignUpVitualResp)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/SignUpVitual", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckIsVitulaPhoneArr(ctx context.Context, in *CheckIsVitulaPhoneArrReq, opts ...grpc.CallOption) (*CheckIsVitulaPhoneArrResp, error) {
	out := new(CheckIsVitulaPhoneArrResp)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/CheckIsVitulaPhoneArr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckIsPhoneVitulaPhone(ctx context.Context, in *CheckIsPhoneVitulaPhoneReq, opts ...grpc.CallOption) (*CheckIsPhoneVitulaPhoneResp, error) {
	out := new(CheckIsPhoneVitulaPhoneResp)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/CheckIsPhoneVitulaPhone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) JoinGroupCheck(ctx context.Context, in *JoinGroupCheckReq, opts ...grpc.CallOption) (*JoinGroupCheckRsp, error) {
	out := new(JoinGroupCheckRsp)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/JoinGroupCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) VitualCheckCanAddContact(ctx context.Context, in *VitualCheckCanAddContactReq, opts ...grpc.CallOption) (*VitualCheckCanAddContactResp, error) {
	out := new(VitualCheckCanAddContactResp)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/VitualCheckCanAddContact", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetVitualSendCodeChannel(ctx context.Context, in *GetVitualSendCodeChannelReq, opts ...grpc.CallOption) (*GetVitualSendCodeChannelResp, error) {
	out := new(GetVitualSendCodeChannelResp)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetVitualSendCodeChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) BindVitualSendCodeChannel(ctx context.Context, in *BindVitualSendCodeChannelReq, opts ...grpc.CallOption) (*BindVitualSendCodeChannelResp, error) {
	out := new(BindVitualSendCodeChannelResp)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/BindVitualSendCodeChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) VirtualBindRealPhone(ctx context.Context, in *VirtualBindRealPhoneReq, opts ...grpc.CallOption) (*VirtualBindRealPhoneRsp, error) {
	out := new(VirtualBindRealPhoneRsp)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/VirtualBindRealPhone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) VirtualAddContactByPhone(ctx context.Context, in *VirtualAddContactByPhoneReq, opts ...grpc.CallOption) (*VirtualAddContactByPhoneRsp, error) {
	out := new(VirtualAddContactByPhoneRsp)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/VirtualAddContactByPhone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetVirtualBindByPhone(ctx context.Context, in *GetVirtualBindByPhoneReq, opts ...grpc.CallOption) (*GetVirtualBindByPhoneRsp, error) {
	out := new(GetVirtualBindByPhoneRsp)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetVirtualBindByPhone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) AddUserAdmin(ctx context.Context, in *AddUserAdminReq, opts ...grpc.CallOption) (*AddUserAdminResp, error) {
	out := new(AddUserAdminResp)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/AddUserAdmin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetuserAdminInfo(ctx context.Context, in *GetuserAdminInfoReq, opts ...grpc.CallOption) (*GetuserAdminInfoResp, error) {
	out := new(GetuserAdminInfoResp)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetuserAdminInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) SearchPrettyNumber(ctx context.Context, in *SearchPrettyNumberReq, opts ...grpc.CallOption) (*SearchPrettyNumberRsp, error) {
	out := new(SearchPrettyNumberRsp)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/SearchPrettyNumber", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ActivePrettyNumber(ctx context.Context, in *ActivePrettyNumberReq, opts ...grpc.CallOption) (*ActivePrettyNumberRsp, error) {
	out := new(ActivePrettyNumberRsp)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/ActivePrettyNumber", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserRoleInfoByIds(ctx context.Context, in *GetUserRoleInfoByIdsReq, opts ...grpc.CallOption) (*GetUserRoleInfoByIdsRsp, error) {
	out := new(GetUserRoleInfoByIdsRsp)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetUserRoleInfoByIds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) InnerUserOp(ctx context.Context, in *InnerUserOpReq, opts ...grpc.CallOption) (*InnerUserOpRsp, error) {
	out := new(InnerUserOpRsp)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/InnerUserOp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) BindRealPhone(ctx context.Context, in *BindRealPhoneReq, opts ...grpc.CallOption) (*BindRealPhoneRsp, error) {
	out := new(BindRealPhoneRsp)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/BindRealPhone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserRelationWithIds(ctx context.Context, in *GetUserRelationWithIdsReq, opts ...grpc.CallOption) (*GetUserRelationWithIdsRsp, error) {
	out := new(GetUserRelationWithIdsRsp)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/GetUserRelationWithIds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserVerified(ctx context.Context, in *UpdateUserVerifiedReq, opts ...grpc.CallOption) (*UpdateUserVerifiedResult, error) {
	out := new(UpdateUserVerifiedResult)
	err := grpc.Invoke(ctx, "/pbimuinfoserver.UserServerService/UpdateUserVerified", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserServerService service

type UserServerServiceServer interface {
	// 邀请码绑定
	InviteCodeBind(context.Context, *InviteCodeBindReq) (*InviteCodeBindRsp, error)
	// 我的团队
	MyTeam(context.Context, *MyTeamReq) (*MyTeamRsp, error)
	// 实名认证材料提交
	RealNameCertification(context.Context, *RealNameCertificationReq) (*RealNameCertificationRsp, error)
	// 实名认证结果反馈
	GetCertificationResult(context.Context, *GetCertificationResultReq) (*GetCertificationResultRsp, error)
	// 实名认证后台审核
	VerifyCertification(context.Context, *VerifyCertificationReq) (*VerifyCertificationRsp, error)
	// 实名认证后台审核
	UpdateUserDetailV1(context.Context, *UpdateUserDetailV1Req) (*UpdateUserDetailV1Rsp, error)
	// 添加电话部好友
	AddPhoneBookContacts(context.Context, *AddPhoneBookContactsReq) (*AddPhoneBookContactsReply, error)
	SignUpV1(context.Context, *SignUpV1Req) (*SignUpV1Reply, error)
	// 更新用户类别，标记
	UpdateUserTypeLable(context.Context, *UpdateUserTypeLableReq) (*UpdateUserTypeLableResult, error)
	// 更新用户年龄，性别，地理位置等等
	UpdateUserDetail(context.Context, *UpdateUserDetailReq) (*UpdateUserDetailResult, error)
	UpdateUserDetailBirthday(context.Context, *UpdateUserDetailBirthdayReq) (*UpdateUserDetailBirthdayResult, error)
	SetUserDetail(context.Context, *SetUserDetailReq) (*SetUserDetailResult, error)
	// 检查用户是否已经创建帐号
	CheckUserHasPay(context.Context, *CheckUserHasPayReq) (*CheckUserHasPayResp, error)
	// 更新用户已经开通支付帐号
	UpdateUserHasPay(context.Context, *UpdateUserHasPayReq) (*UpdateUserHasPayResp, error)
	// 获取viplog 电话号码列表(仅供ip调用获取viplog 的电话号码们)
	GetViplogPhoneList(context.Context, *GetViplogPhoneListReq) (*GetViplogPhoneListResp, error)
	// ********************************用户信息
	// 注册指定用户的接口()
	RegisterUserInfo(context.Context, *RegisterUserInfoReq) (*RegisterUserInfoResult, error)
	// 获取用户信息
	GetUserInfoById(context.Context, *GetUserInfoByIdReq) (*GetUserInfoResult, error)
	// 批量根据用户ID来获取用户信息selfId 代表自己的Id userId 代表需要获取的用户的Id
	GetUserInfoByIdArr(context.Context, *GetUserInfoByIdArrReq) (*GetUserInfoByIdArrResult, error)
	// 获取账号的销毁时间
	GetUserExpierById(context.Context, *GetUserExpireByIdReq) (*GetUserExpireByIdResult, error)
	// 通过用户电话号码获取用户基本信息
	GetUserInfoByPhone(context.Context, *GetUserByphone) (*GetUserInfoResult, error)
	// 通过username获取用户基本信息
	GetUserInfoByUsername(context.Context, *GetUserByUsername) (*GetUserInfoResult, error)
	// 更新用户头像
	UpdateUserPhoto(context.Context, *UpdatePhotoInfoReq) (*UpdateUserPhotoResult, error)
	// 获取用户头像
	GetUserPhoto(context.Context, *GetPhotoInfoReq) (*GetUserPhotoResult, error)
	// 更新用户用户status
	UpdateUserStatus(context.Context, *StatusReq) (*StatusResult, error)
	// 更新用户用户status v2
	UpdateUserStatusV2(context.Context, *StatusReq) (*StatusResult, error)
	// 设置用户账号销毁时间
	UpdateUserExpire(context.Context, *UpdateExpireReq) (*UpdateExpireResult, error)
	// 用户DC的迁移
	UpdateUserCluster(context.Context, *UserClusterChange) (*UserClusterChangeResult, error)
	// 更新用户的username
	UpdateUserName(context.Context, *UpdateuserNameReq) (*UpdateuserNameResult, error)
	// 更新用户的扩展字段
	UpdateUserLevel(context.Context, *UpdateUserLevelReq) (*UpdateUserLevelResult, error)
	// 更新用户的扩展字段
	UpdateUserExtion(context.Context, *UpdateUserExtionReq) (*UpdateUserExtionResult, error)
	// 校验用户名称是否被占用
	CheckUserNameOccupied(context.Context, *CheckUserNameOccupiedReq) (*CheckUserNameOccupiedResult, error)
	// 检查电话号码是否已经注册
	CheckPhoneRegister(context.Context, *CheckPhoneRegisterReq) (*CheckPhoneRegisterResult, error)
	// 账号(标记删除)
	DeleteUserInfoById(context.Context, *DeleteAccountByIdReq) (*DelAccountResult, error)
	// 更新机器人相关信息
	UpdateBotInfo(context.Context, *BotUpdateInfo) (*BotUpdateInfoResult, error)
	// 更新机器人头像
	UpdateBotPic(context.Context, *UpdateBotPicRequest) (*UpdateBotPicResult, error)
	// 检测用户哈希是否合法
	CheckUserAccessHashValid(context.Context, *CheckUserAccessHashValidReq) (*CheckUserAccessHashValidResult, error)
	// 根据id获取正在进行的电话update信息
	QueryUpdatesByUserid(context.Context, *QueryUpdatesByUseridReq) (*QueryUpdatesByUseridResult, error)
	// 获取用户信息
	GetFullUser(context.Context, *GetFullUserReq) (*GetFullUserResult, error)
	// 添加手机号码更换历史记录
	HistoryChangePhoneAdd(context.Context, *HistoryChangePhoneAddReq) (*HistoryChangePhoneAddResult, error)
	// 更换手机
	AccountChangePhone(context.Context, *ChangePhoneReq) (*ChangePhoneResult, error)
	// 更新firstName,lastName和about
	UpdateUserProfile(context.Context, *UpdateUserProfileReq) (*UpdateUserProfileResult, error)
	// 联系人搜索用户
	SearchUserByPhone(context.Context, *SearchUserByPhoneReq) (*SearchUserByPhoneResult, error)
	ContactsGetCommonContacts(context.Context, *ContactsGetCommonContactsReq) (*ContactsGetCommonContactsResult, error)
	SearchUserByNickname(context.Context, *SearchUserByNicknameReq) (*SearchUserByNicknameResult, error)
	// CMD命令,删除用户名称
	DeleteUserUsername(context.Context, *DeleteUserUsernameReq) (*DeleteUserUsernameResult, error)
	// 补充 更新机器人相关信息
	UpdateBotInfoSupp(context.Context, *UpdateBotInfoSuppReq) (*UpdateBotInfoSuppResult, error)
	// 根据用户Id来获取用户信息selfId 代表自己的Id userId 代表需要获取的用户的Id
	CheckIsMuteContact(context.Context, *CheckIsMuteContactReq) (*CheckIsMuteContactResult, error)
	// ********************************联系人的相关接口
	// 删除单个联系人的接口
	ContactsDelContact(context.Context, *DelContactReq) (*DelContactResult, error)
	// 接受添加联系人的接口
	AcceptContact(context.Context, *AcceptContactReq) (*AcceptContactResult, error)
	// 批量删除用户联系人的接口
	ContactsDelContactsArr(context.Context, *DelContactArrReq) (*DelContactArrResult, error)
	// 重置用户联系人信息，删除所有联系人
	CmdResetUserContacts(context.Context, *CmdResetUserContactsReq) (*CmdResetUserContactsResult, error)
	// 获取用户联系人列表
	ContactsGetContacts(context.Context, *ContatsGetContactsReq) (*ContatsGetContactsResult, error)
	// 获取用户联系人列表V1
	ContactsGetContactsV1(context.Context, *ContactsGetContactsV1Req) (*ContactsGetContactsV1Result, error)
	// 获取联系人列表
	GetContactsV1(context.Context, *GetContactsV1Req) (*GetContactsV1Result, error)
	// 获取用户联系人userid列表
	ContactsGetContactsId(context.Context, *ContactsGetContactsIdReq) (*ContactsGetContactsIdResult, error)
	// 批量导入联系人的操作(具体业务逻辑在用户服务来实现)
	ImportContacts(context.Context, *ContactsImportPhoneContactsReq) (*ContactsImportPhoneContactsResult, error)
	// 获取自己所有联系人的在线状态
	GetContactsStatus(context.Context, *GetContactsStatusReq) (*GetContactsStatusResult, error)
	// 检测自己是否是对方的联系人
	CheckSelfIsContact(context.Context, *CheckSelfIsContactReq) (*CheckSelfIsContactResult, error)
	// 检测是否双向好友
	CheckIsMutualContact(context.Context, *CheckIsMutualContactReq) (*CheckIsMutualContactResult, error)
	// ************用户关联表 用户在线状态的更新*******************
	// 创建dialog的增加用户关系（单聊）
	DialogUserRelation(context.Context, *AddRelationIdInfo) (*AddRelationIdInfoResult, error)
	// 删除dialog的剔除用户关系
	DelDialogUserRelation(context.Context, *DelRelationIdInfo) (*DelRelationIdInfoResult, error)
	// 上传保存联系人
	UploadContacts(context.Context, *UploadContactsReq) (*UploadContactsResult, error)
	// 联系人申请
	ApplyContact(context.Context, *ApplyContactReq) (*ApplyContactResult, error)
	ContactsGreetApply(context.Context, *ContactsGreetApplyReq) (*ContactsGreetApplyResult, error)
	// 确认添加申请
	VerifyContact(context.Context, *VerifyContactReq) (*VerifyContactResult, error)
	// 获取被添加用户申请列表
	GetAppliedContacts(context.Context, *GetAppliedContactsReq) (*GetAppliedContactsResult, error)
	// 删除申请列表
	DeleteAppliedHistoryContact(context.Context, *DeleteAppliedHistoryContactReq) (*DeleteAppliedHistoryContactResult, error)
	// 删除一些申请
	DeleteAppliedSomeContact(context.Context, *DeleteAppliedSomeContactReq) (*DeleteAppliedSomeContactResult, error)
	DeleteReceiveApplies(context.Context, *DeleteReceiveAppliesReq) (*DeleteReceiveAppliesResult, error)
	// 设置申请为已读
	ReadAppliedHistory(context.Context, *ReadAppliedHistoryReq) (*ReadAppliedHistoryResult, error)
	GetContactsApplyDifference(context.Context, *GetContactsApplyDifferenceReq) (*GetContactsApplyDifferenceResult, error)
	GetContactsApplyDifferenceV2(context.Context, *GetContactsApplyDifferenceV2Req) (*GetContactsApplyDifferenceV2Result, error)
	// 检查搜索用户数量是否到达上线
	CheckSearchUserCountLimited(context.Context, *CheckSearchUserCountLimitedReq) (*CheckSearchUserCountLimitedResult, error)
	// **********联系人分组***************
	CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupResult, error)
	SetUserGroup(context.Context, *SetUserGroupReq) (*SetUserGroupResult, error)
	ChangeGroupName(context.Context, *ChangeGroupNameReq) (*ChangeGroupNameResult, error)
	ChangeGroupOrder(context.Context, *ChangeGroupOrderReq) (*ChangeGroupOrderResult, error)
	DeleteGroup(context.Context, *DeleteGroupReq) (*DeleteGroupResult, error)
	DeleteGroups(context.Context, *DeleteGroupsReq) (*DeleteGroupsResult, error)
	// **********用户黑名单的管理 ***************
	// 拉黑用户
	BlockedUser(context.Context, *BlockeduserReq) (*BlockeduserResult, error)
	// 移除拉黑的用户
	ContactUnBlockedUser(context.Context, *ContactUnblockedReq) (*BlockeduserResult, error)
	// 获取用户的黑明单列表
	ContactsGetBlocked(context.Context, *ContactsGetBlockedReq) (*ContactsGetBlockedResult, error)
	// 检测用户是否是黑名单
	CheckUserIsBlocked(context.Context, *CheckUserIsBlockedReq) (*CheckUserIsBlockedResult, error)
	// ***********系统白名单的相关操作和管理*******************
	// 存储白名单
	StoreSystemWhiteUser(context.Context, *StoreSysWhiteUserReq) (*StoreSysWhiteUserResult, error)
	// 更新用户白名单的级别
	UpdateSystemWhiteUserLevel(context.Context, *UpdateSystemWhiteUserLevelReq) (*UpdateSystemWhiteUserLevelResult, error)
	// 获取指定的白名单人信息
	GetSysWhiteUser(context.Context, *GetSysWhiteUserReq) (*GetSysWhiteUserResult, error)
	// 获取白名单列表 )
	GetSysWhiteUserArr(context.Context, *GetSysWhiteUserArrReq) (*GetSysWhiteUserArrResult, error)
	// 移除指定的白名单人
	DelSysWhiteUser(context.Context, *DelSysWhiteUserReq) (*DelSysWhiteUserResult, error)
	// 拉取所有用户的DC
	GetAllUserDc(*GetAllDcReq, UserServerService_GetAllUserDcServer) error
	// ************************* 有关隐私选项设置的接口们 ****************************************
	// 设置隐私选项的接口
	SetUserPrivacy(context.Context, *SetPrivacyReq) (*SetPrivacyResult, error)
	// 获取隐私选项的接口
	GetUserPrivacy(context.Context, *GetPrivacyReq) (*GetPrivacyResult, error)
	// 检测用户的隐私选项
	CheckUserPrivacy(context.Context, *CheckPrivacyReq) (*CheckPrivacyResult, error)
	// ********************推送音效等设置 *****************
	// 获取音效设置
	GetNotifySettings(context.Context, *GetNotifySettingsReq) (*GetNotifySettingsResult, error)
	// 更新音效设置
	UpdateNotifySettings(context.Context, *UpdateNotifySettingsReq) (*UpdateNotifySettingsResult, error)
	// ********* 用户相关的GPS *********
	GetUserGps(context.Context, *GetUserGpsReq) (*GetUserGpsResult, error)
	// ********* switches ****************
	// 用户开关设置-用户名被搜索,未读计数,允许多段登陆
	UpdateSwitch(context.Context, *UpdateSwitchReq) (*UpdateSwitchResult, error)
	// 获取开关的状态
	GetSwitchStatus(context.Context, *GetSwitchStatusReq) (*GetSwitchStatusResult, error)
	// 获取Switch版本
	GetSwitchVersion(context.Context, *GetSwitchVersionReq) (*GetSwitchVersionResult, error)
	// ********************获取用户扩信息 *****************
	// 获取用户扩信息
	GetUserExpansion(context.Context, *GetUserExpansionReq) (*GetUserExpansionResult, error)
	// 用户扩展信息表-设置
	UserExpansionSet(context.Context, *UserExpansionSetReq) (*UserExpansionSetResult, error)
	// 获取用户扩展信息
	UserExpansionFind(context.Context, *UserExpansionFindReq) (*UserExpansionFindResult, error)
	// ********************获取用户扩信息 *****************
	GetUserInfoExtend(context.Context, *GetUserInfoExtendReq) (*GetUserInfoExtendResult, error)
	// ********************特权名单列表 *****************
	// 检查自己是否在特权名单列表中
	CheckUserSpaicl(context.Context, *CheckUserSpaiclReq) (*CheckUserSpaiclResult, error)
	// 增加特权名单
	InsertUSerSpaicl(context.Context, *InsertUSerSpaiclReq) (*InsertUSerSpaiclResult, error)
	// 删除特权名单
	DelUSerSpaicl(context.Context, *DelUSerSpaiclReq) (*DelUSerSpaiclResult, error)
	// 获取所有的特权名单
	GetAllUSerSpaicl(context.Context, *GetAllUSerSpaiclReq) (*GetAllUSerSpaiclResult, error)
	// ********************特权名单列表中 *****************
	// UserIpAddOrUpdate(uid int32, addr string, isSignUp bool) error
	UserIpAddOrUpdate(context.Context, *UserIpAddOrUpdateReq) (*UserIpAddOrUpdateResult, error)
	// GetUserIpByAddr(addr string, signUpOnly bool) (users []int32, err error)
	GetUserIpByAddr(context.Context, *GetUserIpByAddrReq) (*GetUserIpByAddrResult, error)
	// GetUserIpByUserId(uid int32, signUpOnly bool) (addrs []*UserIpAddr, err error)
	GetUserIpByUserId(context.Context, *GetUserIpByUserIdReq) (*GetUserIpByUserIdResult, error)
	// 获取自己有关联的联系人关系列表
	GetRelationUsers(context.Context, *GetRelationUsersReq) (*GetRelationUsersResult, error)
	// ****************** 退订*************************
	// 设置退订
	SetUserUnsubscribe(context.Context, *SetUserUnsubscribeReq) (*SetUserUnsubscribeResult, error)
	// 获取退订
	GetUserUnsubscribe(context.Context, *GetUserUnsubscribeReq) (*GetUserUnsubscribeResult, error)
	// ****************** RecvLocker *************************
	RecvLockerAddUserId(context.Context, *RecvLockerAddUserIdReq) (*RecvLockerAddUserIdResult, error)
	RecvLockerDelUserId(context.Context, *RecvLockerDelUserIdReq) (*RecvLockerDelUserIdResult, error)
	RecvLockerGetUserIds(context.Context, *RecvLockerGetUserIdsReq) (*RecvLockerGetUserIdsResult, error)
	CheckDigitalWalletSwitch(context.Context, *CheckDigitalWalletSwitchReq) (*CheckDigitalWalletSwitchResult, error)
	AddLoginDay(context.Context, *AddLoginDayReq) (*AddLoginDayResult, error)
	// 获取客服列表
	GetCustomerList(context.Context, *GetCustomerListReq) (*GetCustomerListReply, error)
	// 指定ID是否是客服
	IsCustomerByUserId(context.Context, *IsCustomerByUserIdReq) (*IsCustomerByUserIdReply, error)
	// 获取指定客服的用户列表请求
	GetCustomerOrientUsers(context.Context, *GetCustomerOrientUsersReq) (*GetCustomerOrientUsersReply, error)
	// 检测用户Id是否是特权消息账号请求
	CheckSpecialUser(context.Context, *CheckSpecialUserReq) (*CheckSpecialUserReply, error)
	// 获取强制加入群组ids
	GetForceGroupList(context.Context, *GetForceGroupListReq) (*GetForceGroupListReply, error)
	// 获取非强制加入群组ids
	GetNotForceGroupList(context.Context, *GetNotForceGroupListReq) (*GetNotForceGroupListReply, error)
	// 批量查询电话本号码是系统号码
	GetPhoneBookInfos(context.Context, *GetPhoneBookInfosReq) (*GetPhoneBookInfosResult, error)
	// ********** 密码登录注册开始 *****************
	// 密码注册
	PassWordRegistry(context.Context, *PassWordRegistryReq) (*PassWordRegistryReply, error)
	// 通过username注册
	RegistryUserByUsername(context.Context, *RegistryUserByUsernameReq) (*RegistryUserByUsernameReply, error)
	// 密码登录
	PassWordLogin(context.Context, *PassWordLoginReq) (*PassWordLoginReply, error)
	// 找回密码
	ChangePassWord(context.Context, *ChangePassWordReq) (*ChangePassWordReply, error)
	CheckIsSelfContact(context.Context, *CheckIsSelfContactReq) (*CheckIsSelfContactResult, error)
	ChkCdnVip(context.Context, *ChkCdnVipReq) (*ChkCdnVipRsp, error)
	AddCdnVip(context.Context, *AddCdnVipReq) (*AddCdnVipRsp, error)
	// @ added by qingsong at 2021.03.03 for buy CDN VIP.
	BuyCdnVip(context.Context, *BuyCdnVipReq) (*BuyCdnVipRsp, error)
	// @ added by qingsong at 2021.03.03 for set CDN VIP auto renew.
	SetCdnVipAutoPay(context.Context, *SetCdnVipAutoPayReq) (*SetCdnVipAutoPayRsp, error)
	// @ added by qingsong at 2021.03.03 for get user cdn-vip info.
	GetUserCdnVipInfo(context.Context, *GetUserCdnVipInfoReq) (*GetUserCdnVipInfoRsp, error)
	// @ added by qingsong at 2021.03.03 for get user cdn-vip pay list.
	GetUserCdnPayList(context.Context, *GetUserCdnPayListReq) (*GetUserCdnPayListRsp, error)
	// =-------------------- 虛擬號碼相關
	// 生成虛擬號碼池
	GenVitulaPhoneNumbers(context.Context, *GenVitulaPhoneNumbersReq) (*GenVitulaPhoneNumbersResp, error)
	// 獲取n個虛擬號碼
	GetVitulPhoneNumbers(context.Context, *GetVitulPhoneNumbersReq) (*GetVitulPhoneNumbersResp, error)
	// 獲取指定需要啦羣的用戶們
	GetAllVitualUsersByFlags(context.Context, *GetAllVitualUsersByFlagsReq) (*GetAllVitualUsersByFlagsResp, error)
	// 檢測是否是虛擬號碼
	CheckIsVitulaPhone(context.Context, *CheckIsVitulaPhoneReq) (*CheckIsVitulaPhoneResp, error)
	SignUpVitual(context.Context, *SignUpVitualReq) (*SignUpVitualResp, error)
	// 檢測是否是虛擬號碼
	CheckIsVitulaPhoneArr(context.Context, *CheckIsVitulaPhoneArrReq) (*CheckIsVitulaPhoneArrResp, error)
	// 檢測是否是虛擬號碼
	CheckIsPhoneVitulaPhone(context.Context, *CheckIsPhoneVitulaPhoneReq) (*CheckIsPhoneVitulaPhoneResp, error)
	// 检查用户是否能加群
	JoinGroupCheck(context.Context, *JoinGroupCheckReq) (*JoinGroupCheckRsp, error)
	// 檢測是否有添加聯系人權限（號碼tag是否相同）
	VitualCheckCanAddContact(context.Context, *VitualCheckCanAddContactReq) (*VitualCheckCanAddContactResp, error)
	// 獲取發送短信驗證碼的頻道
	GetVitualSendCodeChannel(context.Context, *GetVitualSendCodeChannelReq) (*GetVitualSendCodeChannelResp, error)
	// 新增
	BindVitualSendCodeChannel(context.Context, *BindVitualSendCodeChannelReq) (*BindVitualSendCodeChannelResp, error)
	// 虚拟帐号绑定手机号
	VirtualBindRealPhone(context.Context, *VirtualBindRealPhoneReq) (*VirtualBindRealPhoneRsp, error)
	// 虚拟帐号加真实帐号用户好友
	VirtualAddContactByPhone(context.Context, *VirtualAddContactByPhoneReq) (*VirtualAddContactByPhoneRsp, error)
	// 获取虚拟帐号绑定信息
	GetVirtualBindByPhone(context.Context, *GetVirtualBindByPhoneReq) (*GetVirtualBindByPhoneRsp, error)
	// 授予管理員權限
	AddUserAdmin(context.Context, *AddUserAdminReq) (*AddUserAdminResp, error)
	GetuserAdminInfo(context.Context, *GetuserAdminInfoReq) (*GetuserAdminInfoResp, error)
	// @ added by qingsong at 2021.03.17 for virtual pretty number
	// 查询靓号
	SearchPrettyNumber(context.Context, *SearchPrettyNumberReq) (*SearchPrettyNumberRsp, error)
	// 激活靓号
	ActivePrettyNumber(context.Context, *ActivePrettyNumberReq) (*ActivePrettyNumberRsp, error)
	// @ brief : 获取用户角色信息
	GetUserRoleInfoByIds(context.Context, *GetUserRoleInfoByIdsReq) (*GetUserRoleInfoByIdsRsp, error)
	// @ brief : inner user operation.
	InnerUserOp(context.Context, *InnerUserOpReq) (*InnerUserOpRsp, error)
	// @ brief : bind real phone.
	BindRealPhone(context.Context, *BindRealPhoneReq) (*BindRealPhoneRsp, error)
	// / @ added by qingsong at 2021.12.13 for get user relation.
	GetUserRelationWithIds(context.Context, *GetUserRelationWithIdsReq) (*GetUserRelationWithIdsRsp, error)
	UpdateUserVerified(context.Context, *UpdateUserVerifiedReq) (*UpdateUserVerifiedResult, error)
}

func RegisterUserServerServiceServer(s *grpc.Server, srv UserServerServiceServer) {
	s.RegisterService(&_UserServerService_serviceDesc, srv)
}

func _UserServerService_InviteCodeBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteCodeBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).InviteCodeBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/InviteCodeBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).InviteCodeBind(ctx, req.(*InviteCodeBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_MyTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyTeamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).MyTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/MyTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).MyTeam(ctx, req.(*MyTeamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_RealNameCertification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealNameCertificationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).RealNameCertification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/RealNameCertification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).RealNameCertification(ctx, req.(*RealNameCertificationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetCertificationResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCertificationResultReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetCertificationResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetCertificationResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetCertificationResult(ctx, req.(*GetCertificationResultReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_VerifyCertification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyCertificationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).VerifyCertification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/VerifyCertification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).VerifyCertification(ctx, req.(*VerifyCertificationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserDetailV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserDetailV1Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserDetailV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateUserDetailV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserDetailV1(ctx, req.(*UpdateUserDetailV1Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_AddPhoneBookContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPhoneBookContactsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).AddPhoneBookContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/AddPhoneBookContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).AddPhoneBookContacts(ctx, req.(*AddPhoneBookContactsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_SignUpV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpV1Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).SignUpV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/SignUpV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).SignUpV1(ctx, req.(*SignUpV1Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserTypeLable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserTypeLableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserTypeLable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateUserTypeLable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserTypeLable(ctx, req.(*UpdateUserTypeLableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateUserDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserDetail(ctx, req.(*UpdateUserDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserDetailBirthday_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserDetailBirthdayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserDetailBirthday(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateUserDetailBirthday",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserDetailBirthday(ctx, req.(*UpdateUserDetailBirthdayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_SetUserDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).SetUserDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/SetUserDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).SetUserDetail(ctx, req.(*SetUserDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckUserHasPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserHasPayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckUserHasPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/CheckUserHasPay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckUserHasPay(ctx, req.(*CheckUserHasPayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserHasPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserHasPayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserHasPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateUserHasPay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserHasPay(ctx, req.(*UpdateUserHasPayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetViplogPhoneList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetViplogPhoneListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetViplogPhoneList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetViplogPhoneList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetViplogPhoneList(ctx, req.(*GetViplogPhoneListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_RegisterUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).RegisterUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/RegisterUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).RegisterUserInfo(ctx, req.(*RegisterUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetUserInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserInfoById(ctx, req.(*GetUserInfoByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserInfoByIdArr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoByIdArrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserInfoByIdArr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetUserInfoByIdArr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserInfoByIdArr(ctx, req.(*GetUserInfoByIdArrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserExpierById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserExpireByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserExpierById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetUserExpierById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserExpierById(ctx, req.(*GetUserExpireByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserInfoByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByphone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserInfoByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetUserInfoByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserInfoByPhone(ctx, req.(*GetUserByphone))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserInfoByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserInfoByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetUserInfoByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserInfoByUsername(ctx, req.(*GetUserByUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePhotoInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateUserPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserPhoto(ctx, req.(*UpdatePhotoInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPhotoInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetUserPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserPhoto(ctx, req.(*GetPhotoInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateUserStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserStatus(ctx, req.(*StatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserStatusV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserStatusV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateUserStatusV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserStatusV2(ctx, req.(*StatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserExpire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExpireReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserExpire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateUserExpire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserExpire(ctx, req.(*UpdateExpireReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserClusterChange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateUserCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserCluster(ctx, req.(*UserClusterChange))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateuserNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserName(ctx, req.(*UpdateuserNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserLevelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateUserLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserLevel(ctx, req.(*UpdateUserLevelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserExtion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserExtionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserExtion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateUserExtion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserExtion(ctx, req.(*UpdateUserExtionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckUserNameOccupied_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserNameOccupiedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckUserNameOccupied(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/CheckUserNameOccupied",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckUserNameOccupied(ctx, req.(*CheckUserNameOccupiedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckPhoneRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPhoneRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckPhoneRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/CheckPhoneRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckPhoneRegister(ctx, req.(*CheckPhoneRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DeleteUserInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DeleteUserInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/DeleteUserInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DeleteUserInfoById(ctx, req.(*DeleteAccountByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateBotInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotUpdateInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateBotInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateBotInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateBotInfo(ctx, req.(*BotUpdateInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateBotPic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBotPicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateBotPic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateBotPic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateBotPic(ctx, req.(*UpdateBotPicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckUserAccessHashValid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserAccessHashValidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckUserAccessHashValid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/CheckUserAccessHashValid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckUserAccessHashValid(ctx, req.(*CheckUserAccessHashValidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_QueryUpdatesByUserid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUpdatesByUseridReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).QueryUpdatesByUserid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/QueryUpdatesByUserid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).QueryUpdatesByUserid(ctx, req.(*QueryUpdatesByUseridReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetFullUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFullUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetFullUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetFullUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetFullUser(ctx, req.(*GetFullUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_HistoryChangePhoneAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryChangePhoneAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).HistoryChangePhoneAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/HistoryChangePhoneAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).HistoryChangePhoneAdd(ctx, req.(*HistoryChangePhoneAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_AccountChangePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).AccountChangePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/AccountChangePhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).AccountChangePhone(ctx, req.(*ChangePhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserProfile(ctx, req.(*UpdateUserProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_SearchUserByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserByPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).SearchUserByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/SearchUserByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).SearchUserByPhone(ctx, req.(*SearchUserByPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ContactsGetCommonContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactsGetCommonContactsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ContactsGetCommonContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/ContactsGetCommonContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ContactsGetCommonContacts(ctx, req.(*ContactsGetCommonContactsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_SearchUserByNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserByNicknameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).SearchUserByNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/SearchUserByNickname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).SearchUserByNickname(ctx, req.(*SearchUserByNicknameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DeleteUserUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserUsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DeleteUserUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/DeleteUserUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DeleteUserUsername(ctx, req.(*DeleteUserUsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateBotInfoSupp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBotInfoSuppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateBotInfoSupp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateBotInfoSupp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateBotInfoSupp(ctx, req.(*UpdateBotInfoSuppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckIsMuteContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIsMuteContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckIsMuteContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/CheckIsMuteContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckIsMuteContact(ctx, req.(*CheckIsMuteContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ContactsDelContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ContactsDelContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/ContactsDelContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ContactsDelContact(ctx, req.(*DelContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_AcceptContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).AcceptContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/AcceptContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).AcceptContact(ctx, req.(*AcceptContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ContactsDelContactsArr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelContactArrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ContactsDelContactsArr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/ContactsDelContactsArr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ContactsDelContactsArr(ctx, req.(*DelContactArrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CmdResetUserContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdResetUserContactsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CmdResetUserContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/CmdResetUserContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CmdResetUserContacts(ctx, req.(*CmdResetUserContactsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ContactsGetContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContatsGetContactsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ContactsGetContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/ContactsGetContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ContactsGetContacts(ctx, req.(*ContatsGetContactsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ContactsGetContactsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactsGetContactsV1Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ContactsGetContactsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/ContactsGetContactsV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ContactsGetContactsV1(ctx, req.(*ContactsGetContactsV1Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetContactsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactsV1Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetContactsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetContactsV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetContactsV1(ctx, req.(*GetContactsV1Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ContactsGetContactsId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactsGetContactsIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ContactsGetContactsId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/ContactsGetContactsId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ContactsGetContactsId(ctx, req.(*ContactsGetContactsIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ImportContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactsImportPhoneContactsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ImportContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/ImportContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ImportContacts(ctx, req.(*ContactsImportPhoneContactsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetContactsStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactsStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetContactsStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetContactsStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetContactsStatus(ctx, req.(*GetContactsStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckSelfIsContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSelfIsContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckSelfIsContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/CheckSelfIsContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckSelfIsContact(ctx, req.(*CheckSelfIsContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckIsMutualContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIsMutualContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckIsMutualContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/CheckIsMutualContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckIsMutualContact(ctx, req.(*CheckIsMutualContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DialogUserRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRelationIdInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DialogUserRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/DialogUserRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DialogUserRelation(ctx, req.(*AddRelationIdInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DelDialogUserRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRelationIdInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DelDialogUserRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/DelDialogUserRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DelDialogUserRelation(ctx, req.(*DelRelationIdInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UploadContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadContactsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UploadContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UploadContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UploadContacts(ctx, req.(*UploadContactsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ApplyContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ApplyContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/ApplyContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ApplyContact(ctx, req.(*ApplyContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ContactsGreetApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactsGreetApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ContactsGreetApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/ContactsGreetApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ContactsGreetApply(ctx, req.(*ContactsGreetApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_VerifyContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).VerifyContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/VerifyContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).VerifyContact(ctx, req.(*VerifyContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetAppliedContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppliedContactsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetAppliedContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetAppliedContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetAppliedContacts(ctx, req.(*GetAppliedContactsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DeleteAppliedHistoryContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppliedHistoryContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DeleteAppliedHistoryContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/DeleteAppliedHistoryContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DeleteAppliedHistoryContact(ctx, req.(*DeleteAppliedHistoryContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DeleteAppliedSomeContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppliedSomeContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DeleteAppliedSomeContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/DeleteAppliedSomeContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DeleteAppliedSomeContact(ctx, req.(*DeleteAppliedSomeContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DeleteReceiveApplies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReceiveAppliesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DeleteReceiveApplies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/DeleteReceiveApplies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DeleteReceiveApplies(ctx, req.(*DeleteReceiveAppliesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ReadAppliedHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAppliedHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ReadAppliedHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/ReadAppliedHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ReadAppliedHistory(ctx, req.(*ReadAppliedHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetContactsApplyDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactsApplyDifferenceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetContactsApplyDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetContactsApplyDifference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetContactsApplyDifference(ctx, req.(*GetContactsApplyDifferenceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetContactsApplyDifferenceV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactsApplyDifferenceV2Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetContactsApplyDifferenceV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetContactsApplyDifferenceV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetContactsApplyDifferenceV2(ctx, req.(*GetContactsApplyDifferenceV2Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckSearchUserCountLimited_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSearchUserCountLimitedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckSearchUserCountLimited(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/CheckSearchUserCountLimited",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckSearchUserCountLimited(ctx, req.(*CheckSearchUserCountLimitedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CreateGroup(ctx, req.(*CreateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_SetUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).SetUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/SetUserGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).SetUserGroup(ctx, req.(*SetUserGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ChangeGroupName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeGroupNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ChangeGroupName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/ChangeGroupName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ChangeGroupName(ctx, req.(*ChangeGroupNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ChangeGroupOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeGroupOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ChangeGroupOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/ChangeGroupOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ChangeGroupOrder(ctx, req.(*ChangeGroupOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DeleteGroup(ctx, req.(*DeleteGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DeleteGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DeleteGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/DeleteGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DeleteGroups(ctx, req.(*DeleteGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_BlockedUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockeduserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).BlockedUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/BlockedUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).BlockedUser(ctx, req.(*BlockeduserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ContactUnBlockedUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactUnblockedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ContactUnBlockedUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/ContactUnBlockedUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ContactUnBlockedUser(ctx, req.(*ContactUnblockedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ContactsGetBlocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactsGetBlockedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ContactsGetBlocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/ContactsGetBlocked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ContactsGetBlocked(ctx, req.(*ContactsGetBlockedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckUserIsBlocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserIsBlockedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckUserIsBlocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/CheckUserIsBlocked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckUserIsBlocked(ctx, req.(*CheckUserIsBlockedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_StoreSystemWhiteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreSysWhiteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).StoreSystemWhiteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/StoreSystemWhiteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).StoreSystemWhiteUser(ctx, req.(*StoreSysWhiteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateSystemWhiteUserLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSystemWhiteUserLevelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateSystemWhiteUserLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateSystemWhiteUserLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateSystemWhiteUserLevel(ctx, req.(*UpdateSystemWhiteUserLevelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetSysWhiteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSysWhiteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetSysWhiteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetSysWhiteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetSysWhiteUser(ctx, req.(*GetSysWhiteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetSysWhiteUserArr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSysWhiteUserArrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetSysWhiteUserArr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetSysWhiteUserArr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetSysWhiteUserArr(ctx, req.(*GetSysWhiteUserArrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DelSysWhiteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSysWhiteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DelSysWhiteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/DelSysWhiteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DelSysWhiteUser(ctx, req.(*DelSysWhiteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetAllUserDc_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllDcReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServerServiceServer).GetAllUserDc(m, &userServerServiceGetAllUserDcServer{stream})
}

type UserServerService_GetAllUserDcServer interface {
	Send(*UserDc) error
	grpc.ServerStream
}

type userServerServiceGetAllUserDcServer struct {
	grpc.ServerStream
}

func (x *userServerServiceGetAllUserDcServer) Send(m *UserDc) error {
	return x.ServerStream.SendMsg(m)
}

func _UserServerService_SetUserPrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPrivacyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).SetUserPrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/SetUserPrivacy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).SetUserPrivacy(ctx, req.(*SetPrivacyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserPrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrivacyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserPrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetUserPrivacy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserPrivacy(ctx, req.(*GetPrivacyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckUserPrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPrivacyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckUserPrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/CheckUserPrivacy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckUserPrivacy(ctx, req.(*CheckPrivacyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetNotifySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotifySettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetNotifySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetNotifySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetNotifySettings(ctx, req.(*GetNotifySettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateNotifySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotifySettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateNotifySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateNotifySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateNotifySettings(ctx, req.(*UpdateNotifySettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserGps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserGpsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserGps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetUserGps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserGps(ctx, req.(*GetUserGpsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSwitchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateSwitch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateSwitch(ctx, req.(*UpdateSwitchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetSwitchStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSwitchStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetSwitchStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetSwitchStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetSwitchStatus(ctx, req.(*GetSwitchStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetSwitchVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSwitchVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetSwitchVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetSwitchVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetSwitchVersion(ctx, req.(*GetSwitchVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserExpansion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserExpansionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserExpansion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetUserExpansion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserExpansion(ctx, req.(*GetUserExpansionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UserExpansionSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserExpansionSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UserExpansionSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UserExpansionSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UserExpansionSet(ctx, req.(*UserExpansionSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UserExpansionFind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserExpansionFindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UserExpansionFind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UserExpansionFind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UserExpansionFind(ctx, req.(*UserExpansionFindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserInfoExtend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoExtendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserInfoExtend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetUserInfoExtend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserInfoExtend(ctx, req.(*GetUserInfoExtendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckUserSpaicl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserSpaiclReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckUserSpaicl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/CheckUserSpaicl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckUserSpaicl(ctx, req.(*CheckUserSpaiclReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_InsertUSerSpaicl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertUSerSpaiclReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).InsertUSerSpaicl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/InsertUSerSpaicl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).InsertUSerSpaicl(ctx, req.(*InsertUSerSpaiclReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DelUSerSpaicl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUSerSpaiclReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DelUSerSpaicl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/DelUSerSpaicl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DelUSerSpaicl(ctx, req.(*DelUSerSpaiclReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetAllUSerSpaicl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUSerSpaiclReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetAllUSerSpaicl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetAllUSerSpaicl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetAllUSerSpaicl(ctx, req.(*GetAllUSerSpaiclReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UserIpAddOrUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIpAddOrUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UserIpAddOrUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UserIpAddOrUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UserIpAddOrUpdate(ctx, req.(*UserIpAddOrUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserIpByAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserIpByAddrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserIpByAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetUserIpByAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserIpByAddr(ctx, req.(*GetUserIpByAddrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserIpByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserIpByUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserIpByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetUserIpByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserIpByUserId(ctx, req.(*GetUserIpByUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetRelationUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRelationUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetRelationUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetRelationUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetRelationUsers(ctx, req.(*GetRelationUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_SetUserUnsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserUnsubscribeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).SetUserUnsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/SetUserUnsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).SetUserUnsubscribe(ctx, req.(*SetUserUnsubscribeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserUnsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserUnsubscribeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserUnsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetUserUnsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserUnsubscribe(ctx, req.(*GetUserUnsubscribeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_RecvLockerAddUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecvLockerAddUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).RecvLockerAddUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/RecvLockerAddUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).RecvLockerAddUserId(ctx, req.(*RecvLockerAddUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_RecvLockerDelUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecvLockerDelUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).RecvLockerDelUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/RecvLockerDelUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).RecvLockerDelUserId(ctx, req.(*RecvLockerDelUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_RecvLockerGetUserIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecvLockerGetUserIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).RecvLockerGetUserIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/RecvLockerGetUserIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).RecvLockerGetUserIds(ctx, req.(*RecvLockerGetUserIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckDigitalWalletSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckDigitalWalletSwitchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckDigitalWalletSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/CheckDigitalWalletSwitch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckDigitalWalletSwitch(ctx, req.(*CheckDigitalWalletSwitchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_AddLoginDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLoginDayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).AddLoginDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/AddLoginDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).AddLoginDay(ctx, req.(*AddLoginDayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetCustomerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetCustomerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetCustomerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetCustomerList(ctx, req.(*GetCustomerListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_IsCustomerByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsCustomerByUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).IsCustomerByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/IsCustomerByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).IsCustomerByUserId(ctx, req.(*IsCustomerByUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetCustomerOrientUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerOrientUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetCustomerOrientUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetCustomerOrientUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetCustomerOrientUsers(ctx, req.(*GetCustomerOrientUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckSpecialUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSpecialUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckSpecialUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/CheckSpecialUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckSpecialUser(ctx, req.(*CheckSpecialUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetForceGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetForceGroupListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetForceGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetForceGroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetForceGroupList(ctx, req.(*GetForceGroupListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetNotForceGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotForceGroupListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetNotForceGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetNotForceGroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetNotForceGroupList(ctx, req.(*GetNotForceGroupListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetPhoneBookInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPhoneBookInfosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetPhoneBookInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetPhoneBookInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetPhoneBookInfos(ctx, req.(*GetPhoneBookInfosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_PassWordRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassWordRegistryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).PassWordRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/PassWordRegistry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).PassWordRegistry(ctx, req.(*PassWordRegistryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_RegistryUserByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistryUserByUsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).RegistryUserByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/RegistryUserByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).RegistryUserByUsername(ctx, req.(*RegistryUserByUsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_PassWordLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassWordLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).PassWordLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/PassWordLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).PassWordLogin(ctx, req.(*PassWordLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ChangePassWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePassWordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ChangePassWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/ChangePassWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ChangePassWord(ctx, req.(*ChangePassWordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckIsSelfContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIsSelfContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckIsSelfContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/CheckIsSelfContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckIsSelfContact(ctx, req.(*CheckIsSelfContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ChkCdnVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChkCdnVipReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ChkCdnVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/ChkCdnVip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ChkCdnVip(ctx, req.(*ChkCdnVipReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_AddCdnVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCdnVipReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).AddCdnVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/AddCdnVip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).AddCdnVip(ctx, req.(*AddCdnVipReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_BuyCdnVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyCdnVipReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).BuyCdnVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/BuyCdnVip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).BuyCdnVip(ctx, req.(*BuyCdnVipReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_SetCdnVipAutoPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCdnVipAutoPayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).SetCdnVipAutoPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/SetCdnVipAutoPay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).SetCdnVipAutoPay(ctx, req.(*SetCdnVipAutoPayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserCdnVipInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCdnVipInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserCdnVipInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetUserCdnVipInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserCdnVipInfo(ctx, req.(*GetUserCdnVipInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserCdnPayList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCdnPayListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserCdnPayList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetUserCdnPayList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserCdnPayList(ctx, req.(*GetUserCdnPayListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GenVitulaPhoneNumbers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenVitulaPhoneNumbersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GenVitulaPhoneNumbers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GenVitulaPhoneNumbers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GenVitulaPhoneNumbers(ctx, req.(*GenVitulaPhoneNumbersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetVitulPhoneNumbers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVitulPhoneNumbersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetVitulPhoneNumbers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetVitulPhoneNumbers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetVitulPhoneNumbers(ctx, req.(*GetVitulPhoneNumbersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetAllVitualUsersByFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllVitualUsersByFlagsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetAllVitualUsersByFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetAllVitualUsersByFlags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetAllVitualUsersByFlags(ctx, req.(*GetAllVitualUsersByFlagsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckIsVitulaPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIsVitulaPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckIsVitulaPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/CheckIsVitulaPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckIsVitulaPhone(ctx, req.(*CheckIsVitulaPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_SignUpVitual_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpVitualReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).SignUpVitual(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/SignUpVitual",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).SignUpVitual(ctx, req.(*SignUpVitualReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckIsVitulaPhoneArr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIsVitulaPhoneArrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckIsVitulaPhoneArr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/CheckIsVitulaPhoneArr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckIsVitulaPhoneArr(ctx, req.(*CheckIsVitulaPhoneArrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckIsPhoneVitulaPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIsPhoneVitulaPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckIsPhoneVitulaPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/CheckIsPhoneVitulaPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckIsPhoneVitulaPhone(ctx, req.(*CheckIsPhoneVitulaPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_JoinGroupCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGroupCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).JoinGroupCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/JoinGroupCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).JoinGroupCheck(ctx, req.(*JoinGroupCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_VitualCheckCanAddContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VitualCheckCanAddContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).VitualCheckCanAddContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/VitualCheckCanAddContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).VitualCheckCanAddContact(ctx, req.(*VitualCheckCanAddContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetVitualSendCodeChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVitualSendCodeChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetVitualSendCodeChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetVitualSendCodeChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetVitualSendCodeChannel(ctx, req.(*GetVitualSendCodeChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_BindVitualSendCodeChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindVitualSendCodeChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).BindVitualSendCodeChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/BindVitualSendCodeChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).BindVitualSendCodeChannel(ctx, req.(*BindVitualSendCodeChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_VirtualBindRealPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualBindRealPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).VirtualBindRealPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/VirtualBindRealPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).VirtualBindRealPhone(ctx, req.(*VirtualBindRealPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_VirtualAddContactByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualAddContactByPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).VirtualAddContactByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/VirtualAddContactByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).VirtualAddContactByPhone(ctx, req.(*VirtualAddContactByPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetVirtualBindByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVirtualBindByPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetVirtualBindByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetVirtualBindByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetVirtualBindByPhone(ctx, req.(*GetVirtualBindByPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_AddUserAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).AddUserAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/AddUserAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).AddUserAdmin(ctx, req.(*AddUserAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetuserAdminInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetuserAdminInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetuserAdminInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetuserAdminInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetuserAdminInfo(ctx, req.(*GetuserAdminInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_SearchPrettyNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPrettyNumberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).SearchPrettyNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/SearchPrettyNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).SearchPrettyNumber(ctx, req.(*SearchPrettyNumberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ActivePrettyNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivePrettyNumberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ActivePrettyNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/ActivePrettyNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ActivePrettyNumber(ctx, req.(*ActivePrettyNumberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserRoleInfoByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRoleInfoByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserRoleInfoByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetUserRoleInfoByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserRoleInfoByIds(ctx, req.(*GetUserRoleInfoByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_InnerUserOp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InnerUserOpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).InnerUserOp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/InnerUserOp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).InnerUserOp(ctx, req.(*InnerUserOpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_BindRealPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindRealPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).BindRealPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/BindRealPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).BindRealPhone(ctx, req.(*BindRealPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserRelationWithIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRelationWithIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserRelationWithIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/GetUserRelationWithIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserRelationWithIds(ctx, req.(*GetUserRelationWithIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserVerified_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserVerifiedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserVerified(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimuinfoserver.UserServerService/UpdateUserVerified",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserVerified(ctx, req.(*UpdateUserVerifiedReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pbimuinfoserver.UserServerService",
	HandlerType: (*UserServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InviteCodeBind",
			Handler:    _UserServerService_InviteCodeBind_Handler,
		},
		{
			MethodName: "MyTeam",
			Handler:    _UserServerService_MyTeam_Handler,
		},
		{
			MethodName: "RealNameCertification",
			Handler:    _UserServerService_RealNameCertification_Handler,
		},
		{
			MethodName: "GetCertificationResult",
			Handler:    _UserServerService_GetCertificationResult_Handler,
		},
		{
			MethodName: "VerifyCertification",
			Handler:    _UserServerService_VerifyCertification_Handler,
		},
		{
			MethodName: "UpdateUserDetailV1",
			Handler:    _UserServerService_UpdateUserDetailV1_Handler,
		},
		{
			MethodName: "AddPhoneBookContacts",
			Handler:    _UserServerService_AddPhoneBookContacts_Handler,
		},
		{
			MethodName: "SignUpV1",
			Handler:    _UserServerService_SignUpV1_Handler,
		},
		{
			MethodName: "UpdateUserTypeLable",
			Handler:    _UserServerService_UpdateUserTypeLable_Handler,
		},
		{
			MethodName: "UpdateUserDetail",
			Handler:    _UserServerService_UpdateUserDetail_Handler,
		},
		{
			MethodName: "UpdateUserDetailBirthday",
			Handler:    _UserServerService_UpdateUserDetailBirthday_Handler,
		},
		{
			MethodName: "SetUserDetail",
			Handler:    _UserServerService_SetUserDetail_Handler,
		},
		{
			MethodName: "CheckUserHasPay",
			Handler:    _UserServerService_CheckUserHasPay_Handler,
		},
		{
			MethodName: "UpdateUserHasPay",
			Handler:    _UserServerService_UpdateUserHasPay_Handler,
		},
		{
			MethodName: "GetViplogPhoneList",
			Handler:    _UserServerService_GetViplogPhoneList_Handler,
		},
		{
			MethodName: "RegisterUserInfo",
			Handler:    _UserServerService_RegisterUserInfo_Handler,
		},
		{
			MethodName: "GetUserInfoById",
			Handler:    _UserServerService_GetUserInfoById_Handler,
		},
		{
			MethodName: "GetUserInfoByIdArr",
			Handler:    _UserServerService_GetUserInfoByIdArr_Handler,
		},
		{
			MethodName: "GetUserExpierById",
			Handler:    _UserServerService_GetUserExpierById_Handler,
		},
		{
			MethodName: "GetUserInfoByPhone",
			Handler:    _UserServerService_GetUserInfoByPhone_Handler,
		},
		{
			MethodName: "GetUserInfoByUsername",
			Handler:    _UserServerService_GetUserInfoByUsername_Handler,
		},
		{
			MethodName: "UpdateUserPhoto",
			Handler:    _UserServerService_UpdateUserPhoto_Handler,
		},
		{
			MethodName: "GetUserPhoto",
			Handler:    _UserServerService_GetUserPhoto_Handler,
		},
		{
			MethodName: "UpdateUserStatus",
			Handler:    _UserServerService_UpdateUserStatus_Handler,
		},
		{
			MethodName: "UpdateUserStatusV2",
			Handler:    _UserServerService_UpdateUserStatusV2_Handler,
		},
		{
			MethodName: "UpdateUserExpire",
			Handler:    _UserServerService_UpdateUserExpire_Handler,
		},
		{
			MethodName: "UpdateUserCluster",
			Handler:    _UserServerService_UpdateUserCluster_Handler,
		},
		{
			MethodName: "UpdateUserName",
			Handler:    _UserServerService_UpdateUserName_Handler,
		},
		{
			MethodName: "UpdateUserLevel",
			Handler:    _UserServerService_UpdateUserLevel_Handler,
		},
		{
			MethodName: "UpdateUserExtion",
			Handler:    _UserServerService_UpdateUserExtion_Handler,
		},
		{
			MethodName: "CheckUserNameOccupied",
			Handler:    _UserServerService_CheckUserNameOccupied_Handler,
		},
		{
			MethodName: "CheckPhoneRegister",
			Handler:    _UserServerService_CheckPhoneRegister_Handler,
		},
		{
			MethodName: "DeleteUserInfoById",
			Handler:    _UserServerService_DeleteUserInfoById_Handler,
		},
		{
			MethodName: "UpdateBotInfo",
			Handler:    _UserServerService_UpdateBotInfo_Handler,
		},
		{
			MethodName: "UpdateBotPic",
			Handler:    _UserServerService_UpdateBotPic_Handler,
		},
		{
			MethodName: "CheckUserAccessHashValid",
			Handler:    _UserServerService_CheckUserAccessHashValid_Handler,
		},
		{
			MethodName: "QueryUpdatesByUserid",
			Handler:    _UserServerService_QueryUpdatesByUserid_Handler,
		},
		{
			MethodName: "GetFullUser",
			Handler:    _UserServerService_GetFullUser_Handler,
		},
		{
			MethodName: "HistoryChangePhoneAdd",
			Handler:    _UserServerService_HistoryChangePhoneAdd_Handler,
		},
		{
			MethodName: "AccountChangePhone",
			Handler:    _UserServerService_AccountChangePhone_Handler,
		},
		{
			MethodName: "UpdateUserProfile",
			Handler:    _UserServerService_UpdateUserProfile_Handler,
		},
		{
			MethodName: "SearchUserByPhone",
			Handler:    _UserServerService_SearchUserByPhone_Handler,
		},
		{
			MethodName: "ContactsGetCommonContacts",
			Handler:    _UserServerService_ContactsGetCommonContacts_Handler,
		},
		{
			MethodName: "SearchUserByNickname",
			Handler:    _UserServerService_SearchUserByNickname_Handler,
		},
		{
			MethodName: "DeleteUserUsername",
			Handler:    _UserServerService_DeleteUserUsername_Handler,
		},
		{
			MethodName: "UpdateBotInfoSupp",
			Handler:    _UserServerService_UpdateBotInfoSupp_Handler,
		},
		{
			MethodName: "CheckIsMuteContact",
			Handler:    _UserServerService_CheckIsMuteContact_Handler,
		},
		{
			MethodName: "ContactsDelContact",
			Handler:    _UserServerService_ContactsDelContact_Handler,
		},
		{
			MethodName: "AcceptContact",
			Handler:    _UserServerService_AcceptContact_Handler,
		},
		{
			MethodName: "ContactsDelContactsArr",
			Handler:    _UserServerService_ContactsDelContactsArr_Handler,
		},
		{
			MethodName: "CmdResetUserContacts",
			Handler:    _UserServerService_CmdResetUserContacts_Handler,
		},
		{
			MethodName: "ContactsGetContacts",
			Handler:    _UserServerService_ContactsGetContacts_Handler,
		},
		{
			MethodName: "ContactsGetContactsV1",
			Handler:    _UserServerService_ContactsGetContactsV1_Handler,
		},
		{
			MethodName: "GetContactsV1",
			Handler:    _UserServerService_GetContactsV1_Handler,
		},
		{
			MethodName: "ContactsGetContactsId",
			Handler:    _UserServerService_ContactsGetContactsId_Handler,
		},
		{
			MethodName: "ImportContacts",
			Handler:    _UserServerService_ImportContacts_Handler,
		},
		{
			MethodName: "GetContactsStatus",
			Handler:    _UserServerService_GetContactsStatus_Handler,
		},
		{
			MethodName: "CheckSelfIsContact",
			Handler:    _UserServerService_CheckSelfIsContact_Handler,
		},
		{
			MethodName: "CheckIsMutualContact",
			Handler:    _UserServerService_CheckIsMutualContact_Handler,
		},
		{
			MethodName: "DialogUserRelation",
			Handler:    _UserServerService_DialogUserRelation_Handler,
		},
		{
			MethodName: "DelDialogUserRelation",
			Handler:    _UserServerService_DelDialogUserRelation_Handler,
		},
		{
			MethodName: "UploadContacts",
			Handler:    _UserServerService_UploadContacts_Handler,
		},
		{
			MethodName: "ApplyContact",
			Handler:    _UserServerService_ApplyContact_Handler,
		},
		{
			MethodName: "ContactsGreetApply",
			Handler:    _UserServerService_ContactsGreetApply_Handler,
		},
		{
			MethodName: "VerifyContact",
			Handler:    _UserServerService_VerifyContact_Handler,
		},
		{
			MethodName: "GetAppliedContacts",
			Handler:    _UserServerService_GetAppliedContacts_Handler,
		},
		{
			MethodName: "DeleteAppliedHistoryContact",
			Handler:    _UserServerService_DeleteAppliedHistoryContact_Handler,
		},
		{
			MethodName: "DeleteAppliedSomeContact",
			Handler:    _UserServerService_DeleteAppliedSomeContact_Handler,
		},
		{
			MethodName: "DeleteReceiveApplies",
			Handler:    _UserServerService_DeleteReceiveApplies_Handler,
		},
		{
			MethodName: "ReadAppliedHistory",
			Handler:    _UserServerService_ReadAppliedHistory_Handler,
		},
		{
			MethodName: "GetContactsApplyDifference",
			Handler:    _UserServerService_GetContactsApplyDifference_Handler,
		},
		{
			MethodName: "GetContactsApplyDifferenceV2",
			Handler:    _UserServerService_GetContactsApplyDifferenceV2_Handler,
		},
		{
			MethodName: "CheckSearchUserCountLimited",
			Handler:    _UserServerService_CheckSearchUserCountLimited_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _UserServerService_CreateGroup_Handler,
		},
		{
			MethodName: "SetUserGroup",
			Handler:    _UserServerService_SetUserGroup_Handler,
		},
		{
			MethodName: "ChangeGroupName",
			Handler:    _UserServerService_ChangeGroupName_Handler,
		},
		{
			MethodName: "ChangeGroupOrder",
			Handler:    _UserServerService_ChangeGroupOrder_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _UserServerService_DeleteGroup_Handler,
		},
		{
			MethodName: "DeleteGroups",
			Handler:    _UserServerService_DeleteGroups_Handler,
		},
		{
			MethodName: "BlockedUser",
			Handler:    _UserServerService_BlockedUser_Handler,
		},
		{
			MethodName: "ContactUnBlockedUser",
			Handler:    _UserServerService_ContactUnBlockedUser_Handler,
		},
		{
			MethodName: "ContactsGetBlocked",
			Handler:    _UserServerService_ContactsGetBlocked_Handler,
		},
		{
			MethodName: "CheckUserIsBlocked",
			Handler:    _UserServerService_CheckUserIsBlocked_Handler,
		},
		{
			MethodName: "StoreSystemWhiteUser",
			Handler:    _UserServerService_StoreSystemWhiteUser_Handler,
		},
		{
			MethodName: "UpdateSystemWhiteUserLevel",
			Handler:    _UserServerService_UpdateSystemWhiteUserLevel_Handler,
		},
		{
			MethodName: "GetSysWhiteUser",
			Handler:    _UserServerService_GetSysWhiteUser_Handler,
		},
		{
			MethodName: "GetSysWhiteUserArr",
			Handler:    _UserServerService_GetSysWhiteUserArr_Handler,
		},
		{
			MethodName: "DelSysWhiteUser",
			Handler:    _UserServerService_DelSysWhiteUser_Handler,
		},
		{
			MethodName: "SetUserPrivacy",
			Handler:    _UserServerService_SetUserPrivacy_Handler,
		},
		{
			MethodName: "GetUserPrivacy",
			Handler:    _UserServerService_GetUserPrivacy_Handler,
		},
		{
			MethodName: "CheckUserPrivacy",
			Handler:    _UserServerService_CheckUserPrivacy_Handler,
		},
		{
			MethodName: "GetNotifySettings",
			Handler:    _UserServerService_GetNotifySettings_Handler,
		},
		{
			MethodName: "UpdateNotifySettings",
			Handler:    _UserServerService_UpdateNotifySettings_Handler,
		},
		{
			MethodName: "GetUserGps",
			Handler:    _UserServerService_GetUserGps_Handler,
		},
		{
			MethodName: "UpdateSwitch",
			Handler:    _UserServerService_UpdateSwitch_Handler,
		},
		{
			MethodName: "GetSwitchStatus",
			Handler:    _UserServerService_GetSwitchStatus_Handler,
		},
		{
			MethodName: "GetSwitchVersion",
			Handler:    _UserServerService_GetSwitchVersion_Handler,
		},
		{
			MethodName: "GetUserExpansion",
			Handler:    _UserServerService_GetUserExpansion_Handler,
		},
		{
			MethodName: "UserExpansionSet",
			Handler:    _UserServerService_UserExpansionSet_Handler,
		},
		{
			MethodName: "UserExpansionFind",
			Handler:    _UserServerService_UserExpansionFind_Handler,
		},
		{
			MethodName: "GetUserInfoExtend",
			Handler:    _UserServerService_GetUserInfoExtend_Handler,
		},
		{
			MethodName: "CheckUserSpaicl",
			Handler:    _UserServerService_CheckUserSpaicl_Handler,
		},
		{
			MethodName: "InsertUSerSpaicl",
			Handler:    _UserServerService_InsertUSerSpaicl_Handler,
		},
		{
			MethodName: "DelUSerSpaicl",
			Handler:    _UserServerService_DelUSerSpaicl_Handler,
		},
		{
			MethodName: "GetAllUSerSpaicl",
			Handler:    _UserServerService_GetAllUSerSpaicl_Handler,
		},
		{
			MethodName: "UserIpAddOrUpdate",
			Handler:    _UserServerService_UserIpAddOrUpdate_Handler,
		},
		{
			MethodName: "GetUserIpByAddr",
			Handler:    _UserServerService_GetUserIpByAddr_Handler,
		},
		{
			MethodName: "GetUserIpByUserId",
			Handler:    _UserServerService_GetUserIpByUserId_Handler,
		},
		{
			MethodName: "GetRelationUsers",
			Handler:    _UserServerService_GetRelationUsers_Handler,
		},
		{
			MethodName: "SetUserUnsubscribe",
			Handler:    _UserServerService_SetUserUnsubscribe_Handler,
		},
		{
			MethodName: "GetUserUnsubscribe",
			Handler:    _UserServerService_GetUserUnsubscribe_Handler,
		},
		{
			MethodName: "RecvLockerAddUserId",
			Handler:    _UserServerService_RecvLockerAddUserId_Handler,
		},
		{
			MethodName: "RecvLockerDelUserId",
			Handler:    _UserServerService_RecvLockerDelUserId_Handler,
		},
		{
			MethodName: "RecvLockerGetUserIds",
			Handler:    _UserServerService_RecvLockerGetUserIds_Handler,
		},
		{
			MethodName: "CheckDigitalWalletSwitch",
			Handler:    _UserServerService_CheckDigitalWalletSwitch_Handler,
		},
		{
			MethodName: "AddLoginDay",
			Handler:    _UserServerService_AddLoginDay_Handler,
		},
		{
			MethodName: "GetCustomerList",
			Handler:    _UserServerService_GetCustomerList_Handler,
		},
		{
			MethodName: "IsCustomerByUserId",
			Handler:    _UserServerService_IsCustomerByUserId_Handler,
		},
		{
			MethodName: "GetCustomerOrientUsers",
			Handler:    _UserServerService_GetCustomerOrientUsers_Handler,
		},
		{
			MethodName: "CheckSpecialUser",
			Handler:    _UserServerService_CheckSpecialUser_Handler,
		},
		{
			MethodName: "GetForceGroupList",
			Handler:    _UserServerService_GetForceGroupList_Handler,
		},
		{
			MethodName: "GetNotForceGroupList",
			Handler:    _UserServerService_GetNotForceGroupList_Handler,
		},
		{
			MethodName: "GetPhoneBookInfos",
			Handler:    _UserServerService_GetPhoneBookInfos_Handler,
		},
		{
			MethodName: "PassWordRegistry",
			Handler:    _UserServerService_PassWordRegistry_Handler,
		},
		{
			MethodName: "RegistryUserByUsername",
			Handler:    _UserServerService_RegistryUserByUsername_Handler,
		},
		{
			MethodName: "PassWordLogin",
			Handler:    _UserServerService_PassWordLogin_Handler,
		},
		{
			MethodName: "ChangePassWord",
			Handler:    _UserServerService_ChangePassWord_Handler,
		},
		{
			MethodName: "CheckIsSelfContact",
			Handler:    _UserServerService_CheckIsSelfContact_Handler,
		},
		{
			MethodName: "ChkCdnVip",
			Handler:    _UserServerService_ChkCdnVip_Handler,
		},
		{
			MethodName: "AddCdnVip",
			Handler:    _UserServerService_AddCdnVip_Handler,
		},
		{
			MethodName: "BuyCdnVip",
			Handler:    _UserServerService_BuyCdnVip_Handler,
		},
		{
			MethodName: "SetCdnVipAutoPay",
			Handler:    _UserServerService_SetCdnVipAutoPay_Handler,
		},
		{
			MethodName: "GetUserCdnVipInfo",
			Handler:    _UserServerService_GetUserCdnVipInfo_Handler,
		},
		{
			MethodName: "GetUserCdnPayList",
			Handler:    _UserServerService_GetUserCdnPayList_Handler,
		},
		{
			MethodName: "GenVitulaPhoneNumbers",
			Handler:    _UserServerService_GenVitulaPhoneNumbers_Handler,
		},
		{
			MethodName: "GetVitulPhoneNumbers",
			Handler:    _UserServerService_GetVitulPhoneNumbers_Handler,
		},
		{
			MethodName: "GetAllVitualUsersByFlags",
			Handler:    _UserServerService_GetAllVitualUsersByFlags_Handler,
		},
		{
			MethodName: "CheckIsVitulaPhone",
			Handler:    _UserServerService_CheckIsVitulaPhone_Handler,
		},
		{
			MethodName: "SignUpVitual",
			Handler:    _UserServerService_SignUpVitual_Handler,
		},
		{
			MethodName: "CheckIsVitulaPhoneArr",
			Handler:    _UserServerService_CheckIsVitulaPhoneArr_Handler,
		},
		{
			MethodName: "CheckIsPhoneVitulaPhone",
			Handler:    _UserServerService_CheckIsPhoneVitulaPhone_Handler,
		},
		{
			MethodName: "JoinGroupCheck",
			Handler:    _UserServerService_JoinGroupCheck_Handler,
		},
		{
			MethodName: "VitualCheckCanAddContact",
			Handler:    _UserServerService_VitualCheckCanAddContact_Handler,
		},
		{
			MethodName: "GetVitualSendCodeChannel",
			Handler:    _UserServerService_GetVitualSendCodeChannel_Handler,
		},
		{
			MethodName: "BindVitualSendCodeChannel",
			Handler:    _UserServerService_BindVitualSendCodeChannel_Handler,
		},
		{
			MethodName: "VirtualBindRealPhone",
			Handler:    _UserServerService_VirtualBindRealPhone_Handler,
		},
		{
			MethodName: "VirtualAddContactByPhone",
			Handler:    _UserServerService_VirtualAddContactByPhone_Handler,
		},
		{
			MethodName: "GetVirtualBindByPhone",
			Handler:    _UserServerService_GetVirtualBindByPhone_Handler,
		},
		{
			MethodName: "AddUserAdmin",
			Handler:    _UserServerService_AddUserAdmin_Handler,
		},
		{
			MethodName: "GetuserAdminInfo",
			Handler:    _UserServerService_GetuserAdminInfo_Handler,
		},
		{
			MethodName: "SearchPrettyNumber",
			Handler:    _UserServerService_SearchPrettyNumber_Handler,
		},
		{
			MethodName: "ActivePrettyNumber",
			Handler:    _UserServerService_ActivePrettyNumber_Handler,
		},
		{
			MethodName: "GetUserRoleInfoByIds",
			Handler:    _UserServerService_GetUserRoleInfoByIds_Handler,
		},
		{
			MethodName: "InnerUserOp",
			Handler:    _UserServerService_InnerUserOp_Handler,
		},
		{
			MethodName: "BindRealPhone",
			Handler:    _UserServerService_BindRealPhone_Handler,
		},
		{
			MethodName: "GetUserRelationWithIds",
			Handler:    _UserServerService_GetUserRelationWithIds_Handler,
		},
		{
			MethodName: "UpdateUserVerified",
			Handler:    _UserServerService_UpdateUserVerified_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllUserDc",
			Handler:       _UserServerService_GetAllUserDc_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/pbimuinfoserver/imuinfoserver.proto",
}

func (m *GetUserInfoByIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserInfoByIdReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.SelfId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n1, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *GetUserInfoByIdArrReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserInfoByIdArrReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.SelfId))
	}
	if len(m.UserIds) > 0 {
		dAtA3 := make([]byte, len(m.UserIds)*10)
		var j2 int
		for _, num1 := range m.UserIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n4, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *UserInfoArray) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfoArray) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userin) > 0 {
		for _, msg := range m.Userin {
			dAtA[i] = 0xa
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.AccessHash))
	}
	if len(m.FirstName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.FirstName)))
		i += copy(dAtA[i:], m.FirstName)
	}
	if len(m.LastName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.LastName)))
		i += copy(dAtA[i:], m.LastName)
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if m.Status != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Status))
	}
	if m.LastLogout != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.LastLogout))
	}
	if m.ClusterRegion != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ClusterRegion))
	}
	if len(m.FontRgb) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.FontRgb)))
		i += copy(dAtA[i:], m.FontRgb)
	}
	if len(m.CountryCode) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.CountryCode)))
		i += copy(dAtA[i:], m.CountryCode)
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.BotInfoVersion != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.BotInfoVersion))
	}
	if len(m.BotInlinePlaceholder) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.BotInlinePlaceholder)))
		i += copy(dAtA[i:], m.BotInlinePlaceholder)
	}
	if len(m.RestrictionReason) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.RestrictionReason)))
		i += copy(dAtA[i:], m.RestrictionReason)
	}
	if len(m.LangCode) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.LangCode)))
		i += copy(dAtA[i:], m.LangCode)
	}
	if len(m.LocalPhone) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.LocalPhone)))
		i += copy(dAtA[i:], m.LocalPhone)
	}
	if m.Deleted {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		if m.Deleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Bot {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		if m.Bot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BotChatHistory {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		if m.BotChatHistory {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BotNochats {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		if m.BotNochats {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Verified {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		if m.Verified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Restricted {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		if m.Restricted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Min {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		if m.Min {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BotInlineGeo {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		if m.BotInlineGeo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Self {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		if m.Self {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Contact {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		if m.Contact {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MutalContact {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		if m.MutalContact {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.StarMark {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		if m.StarMark {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ShowContactPhone {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		if m.ShowContactPhone {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.GroupId != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.GroupId))
	}
	if m.Created != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Created))
	}
	if m.UserType != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserType))
	}
	if m.UserLable != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserLable))
	}
	if m.UserLevel != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserLevel))
	}
	if len(m.About) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.About)))
		i += copy(dAtA[i:], m.About)
	}
	if m.Birthday != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Birthday))
	}
	if m.Sex != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Sex))
	}
	if m.Flags != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Flags))
	}
	if len(m.Addr) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Addr)))
		i += copy(dAtA[i:], m.Addr)
	}
	if len(m.Extend) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Extend)))
		i += copy(dAtA[i:], m.Extend)
	}
	return i, nil
}

func (m *GetUserExpireByIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserExpireByIdReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n5, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *GetUserExpireByIdResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserExpireByIdResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Expire != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Expire))
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetUserByphone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserByphone) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Phone) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n6, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *GetUserInfoResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserInfoResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uinfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Uinfo.Size()))
		n7, err := m.Uinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetUserInfoByIdArrResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserInfoByIdArrResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uinfo) > 0 {
		for _, msg := range m.Uinfo {
			dAtA[i] = 0xa
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetUserByUsername) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserByUsername) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.SelfId))
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n8, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *UpdatePhotoInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePhotoInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.KeyId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n9, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *GetPhotoInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPhotoInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n10, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *UpdateUserPhotoResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserPhotoResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetUserPhotoResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserPhotoResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Photo) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *UpdateUserProfileReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserProfileReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Flags))
	}
	if len(m.FirstName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.FirstName)))
		i += copy(dAtA[i:], m.FirstName)
	}
	if len(m.LastName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.LastName)))
		i += copy(dAtA[i:], m.LastName)
	}
	if len(m.About) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.About)))
		i += copy(dAtA[i:], m.About)
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n11, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *UpdateUserFullReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserFullReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.KeyId))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Flags))
	}
	if m.Sex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Sex))
	}
	if m.Age != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Age))
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.Extened) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Extened)))
		i += copy(dAtA[i:], m.Extened)
	}
	return i, nil
}

func (m *UpdateUserFullResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserFullResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *UpdateUserProfileResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserProfileResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uinfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Uinfo.Size()))
		n12, err := m.Uinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *StatusReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.SelfId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.KeyId))
	}
	if m.Status {
		dAtA[i] = 0x18
		i++
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Offline != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Offline))
	}
	if m.Longitude != 0 {
		dAtA[i] = 0x29
		i++
		i = encodeFixed64Imuinfoserver(dAtA, i, uint64(math.Float64bits(float64(m.Longitude))))
	}
	if m.Latitude != 0 {
		dAtA[i] = 0x31
		i++
		i = encodeFixed64Imuinfoserver(dAtA, i, uint64(math.Float64bits(float64(m.Latitude))))
	}
	if m.Debug != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n13, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *StatusResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *UpdateExpireReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateExpireReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.SelfId))
	}
	if m.Expire != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Expire))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n14, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *UpdateExpireResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateExpireResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *UserClusterChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserClusterChange) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.SelfId))
	}
	if m.ClusterId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ClusterId))
	}
	if len(m.FromIp) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.FromIp)))
		i += copy(dAtA[i:], m.FromIp)
	}
	if m.FromId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.FromId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n15, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}

func (m *UserClusterChangeResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserClusterChangeResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *UpdateuserNameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateuserNameReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.UserName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.UserName)))
		i += copy(dAtA[i:], m.UserName)
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n16, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.KeyId))
	}
	return i, nil
}

func (m *UpdateuserNameResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateuserNameResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uinfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Uinfo.Size()))
		n17, err := m.Uinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *UpdateUserLevelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserLevelReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.KeyId))
	}
	if m.Levl != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Levl))
	}
	return i, nil
}

func (m *UpdateUserLevelResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserLevelResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *UpdateUserExtionReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserExtionReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.KeyId))
	}
	if len(m.Extionsion) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Extionsion)))
		i += copy(dAtA[i:], m.Extionsion)
	}
	return i, nil
}

func (m *UpdateUserExtionResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserExtionResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *CheckPhoneRegisterReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckPhoneRegisterReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Phone) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n18, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}

func (m *CheckPhoneRegisterResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckPhoneRegisterResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *DeleteAccountByIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAccountByIdReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.DelId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.DelId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n19, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}

func (m *DelAccountResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelAccountResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *BotUpdateInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BotUpdateInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.BotInfoVersion != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.BotInfoVersion))
	}
	if m.BotChatHistory {
		dAtA[i] = 0x18
		i++
		if m.BotChatHistory {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BotNoChat {
		dAtA[i] = 0x20
		i++
		if m.BotNoChat {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n20, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}

func (m *BotUpdateInfoResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BotUpdateInfoResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *DelContactReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelContactReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.ContactId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ContactId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.KeyId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n21, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}

func (m *DelContactResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelContactResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uinfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Uinfo.Size()))
		n22, err := m.Uinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *AcceptContactReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcceptContactReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.ApplyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ApplyId))
	}
	if len(m.FirstName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.FirstName)))
		i += copy(dAtA[i:], m.FirstName)
	}
	if len(m.LastName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.LastName)))
		i += copy(dAtA[i:], m.LastName)
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n23, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.GroupId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.GroupId))
	}
	return i, nil
}

func (m *AcceptContactResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcceptContactResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.FromId))
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *ContactIdHash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactIdHash) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ContactId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ContactId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.AccessHash))
	}
	return i, nil
}

func (m *DelContactArrReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelContactArrReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.ContactidArr) > 0 {
		for _, msg := range m.ContactidArr {
			dAtA[i] = 0x12
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.KeyId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n24, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}

func (m *CmdResetUserContactsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmdResetUserContactsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AmdinId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.AmdinId))
	}
	if len(m.PhoneNumber) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.PhoneNumber)))
		i += copy(dAtA[i:], m.PhoneNumber)
	}
	return i, nil
}

func (m *CmdResetUserContactsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmdResetUserContactsResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CurrentContactIds) > 0 {
		dAtA26 := make([]byte, len(m.CurrentContactIds)*10)
		var j25 int
		for _, num1 := range m.CurrentContactIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA26[j25] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j25++
			}
			dAtA26[j25] = uint8(num)
			j25++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(j25))
		i += copy(dAtA[i:], dAtA26[:j25])
	}
	return i, nil
}

func (m *DelContactArrResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelContactArrResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *ContatsGetContactsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContatsGetContactsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.KeyId))
	}
	if len(m.Contacthash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Contacthash)))
		i += copy(dAtA[i:], m.Contacthash)
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n27, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}

func (m *ContactInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.ContactId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ContactId))
	}
	if len(m.FirstName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.FirstName)))
		i += copy(dAtA[i:], m.FirstName)
	}
	if len(m.LastName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.LastName)))
		i += copy(dAtA[i:], m.LastName)
	}
	if m.IsSelfContacted {
		dAtA[i] = 0x28
		i++
		if m.IsSelfContacted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SelfIsContacted {
		dAtA[i] = 0x30
		i++
		if m.SelfIsContacted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.StarMark {
		dAtA[i] = 0x38
		i++
		if m.StarMark {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HasPhone {
		dAtA[i] = 0x40
		i++
		if m.HasPhone {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.GroupId != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.GroupId))
	}
	if len(m.About) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.About)))
		i += copy(dAtA[i:], m.About)
	}
	return i, nil
}

func (m *ContatsGetContactsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContatsGetContactsResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ContactArr) > 0 {
		for _, msg := range m.ContactArr {
			dAtA[i] = 0xa
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.UserInfoArr) > 0 {
		for _, msg := range m.UserInfoArr {
			dAtA[i] = 0x12
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *ContactsGetContactsV1Req) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsGetContactsV1Req) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.KeyId))
	}
	if m.Hash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Hash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n28, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}

func (m *ContactsGetContactsV1Result) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsGetContactsV1Result) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ContactArr) > 0 {
		for _, msg := range m.ContactArr {
			dAtA[i] = 0xa
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.UserInfoArr) > 0 {
		for _, msg := range m.UserInfoArr {
			dAtA[i] = 0x12
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.GroupOrderArr) > 0 {
		for _, msg := range m.GroupOrderArr {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.SavedCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.SavedCount))
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *ContactsGetContactsIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsGetContactsIdReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.KeyId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n29, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}

func (m *ContactsGetContactsIdResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsGetContactsIdResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ContactsId) > 0 {
		dAtA31 := make([]byte, len(m.ContactsId)*10)
		var j30 int
		for _, num1 := range m.ContactsId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA31[j30] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j30++
			}
			dAtA31[j30] = uint8(num)
			j30++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(j30))
		i += copy(dAtA[i:], dAtA31[:j30])
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *PhoneBookContact) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneBookContact) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ClientId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ClientId))
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if len(m.FirstName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.FirstName)))
		i += copy(dAtA[i:], m.FirstName)
	}
	if len(m.LastName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.LastName)))
		i += copy(dAtA[i:], m.LastName)
	}
	return i, nil
}

func (m *ContactsImportPhoneContactsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsImportPhoneContactsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.PhoneContactArr) > 0 {
		for _, msg := range m.PhoneContactArr {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n32, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}

func (m *ImportContact) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImportContact) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.ClientId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ClientId))
	}
	return i, nil
}

func (m *PopularContact) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PopularContact) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ClientId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ClientId))
	}
	if m.Importers != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Importers))
	}
	return i, nil
}

func (m *ContactsImportPhoneContactsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsImportPhoneContactsResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ImContactDetail) > 0 {
		for _, msg := range m.ImContactDetail {
			dAtA[i] = 0xa
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.UserInfoArr) > 0 {
		for _, msg := range m.UserInfoArr {
			dAtA[i] = 0x12
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PopuContact) > 0 {
		for _, msg := range m.PopuContact {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *AddRelationIdInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddRelationIdInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.RelationId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.RelationId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n33, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}

func (m *DelRelationIdInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelRelationIdInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.RelationId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.RelationId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n34, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	return i, nil
}

func (m *AddRelationIdInfoResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddRelationIdInfoResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *DelRelationIdInfoResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelRelationIdInfoResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *BlockeduserReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockeduserReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.BlockedId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.BlockedId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.KeyId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n35, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	return i, nil
}

func (m *BlockeduserResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockeduserResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *ContactUnblockedReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactUnblockedReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.BlockedId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.BlockedId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.KeyId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n36, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	return i, nil
}

func (m *ContactsGetBlockedReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsGetBlockedReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n37, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	return i, nil
}

func (m *Blockeduser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Blockeduser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Date != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Date))
	}
	return i, nil
}

func (m *ContactsGetBlockedResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsGetBlockedResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Blockeduser) > 0 {
		dAtA39 := make([]byte, len(m.Blockeduser)*10)
		var j38 int
		for _, num1 := range m.Blockeduser {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA39[j38] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j38++
			}
			dAtA39[j38] = uint8(num)
			j38++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(j38))
		i += copy(dAtA[i:], dAtA39[:j38])
	}
	if len(m.InfoArr) > 0 {
		for _, msg := range m.InfoArr {
			dAtA[i] = 0x12
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *SystemWhiteUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemWhiteUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Level))
	}
	if m.Proby != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Proby))
	}
	if m.IsWhite {
		dAtA[i] = 0x20
		i++
		if m.IsWhite {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *StoreSysWhiteUserReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreSysWhiteUserReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Level))
	}
	if m.Proby != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Proby))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n40, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	return i, nil
}

func (m *StoreSysWhiteUserResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreSysWhiteUserResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *UpdateSystemWhiteUserLevelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSystemWhiteUserLevelReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Level))
	}
	if m.Proby != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Proby))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n41, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	return i, nil
}

func (m *UpdateSystemWhiteUserLevelResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSystemWhiteUserLevelResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetSysWhiteUserReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSysWhiteUserReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n42, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	return i, nil
}

func (m *GetSysWhiteUserResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSysWhiteUserResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SysWhiteInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.SysWhiteInfo.Size()))
		n43, err := m.SysWhiteInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetSysWhiteUserArrReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSysWhiteUserArrReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n44, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	return i, nil
}

func (m *GetSysWhiteUserArrResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSysWhiteUserArrResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SysWhiteInfoArr) > 0 {
		for _, msg := range m.SysWhiteInfoArr {
			dAtA[i] = 0xa
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *DelSysWhiteUserReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelSysWhiteUserReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.ProUser != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ProUser))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n45, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	return i, nil
}

func (m *DelSysWhiteUserResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelSysWhiteUserResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *UserDc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserDc) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.DcId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.DcId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n46, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	return i, nil
}

func (m *GetAllDcReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllDcReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n47, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	return i, nil
}

func (m *SetPrivacyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetPrivacyReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.PrivacyType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.PrivacyType))
	}
	if m.Range != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Range))
	}
	if len(m.AlwaysDisallow) > 0 {
		dAtA49 := make([]byte, len(m.AlwaysDisallow)*10)
		var j48 int
		for _, num1 := range m.AlwaysDisallow {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA49[j48] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j48++
			}
			dAtA49[j48] = uint8(num)
			j48++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(j48))
		i += copy(dAtA[i:], dAtA49[:j48])
	}
	if len(m.AlwaysAllow) > 0 {
		dAtA51 := make([]byte, len(m.AlwaysAllow)*10)
		var j50 int
		for _, num1 := range m.AlwaysAllow {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA51[j50] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j50++
			}
			dAtA51[j50] = uint8(num)
			j50++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(j50))
		i += copy(dAtA[i:], dAtA51[:j50])
	}
	if len(m.Ip) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.KeyId))
	}
	if m.SessionId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.SessionId))
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if m.Debug != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n52, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n52
	}
	return i, nil
}

func (m *SetPrivacyResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetPrivacyResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UinfoArr) > 0 {
		for _, msg := range m.UinfoArr {
			dAtA[i] = 0xa
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetPrivacyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPrivacyReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.PrivacyType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.PrivacyType))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.KeyId))
	}
	if m.SessionId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.SessionId))
	}
	if len(m.Ip) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if m.Debug != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n53, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n53
	}
	return i, nil
}

func (m *CheckPrivacyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckPrivacyReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.SelfId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.PrivacyType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.PrivacyType))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n54, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n54
	}
	return i, nil
}

func (m *CheckPrivacyResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckPrivacyResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetPrivacyResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPrivacyResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Range != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Range))
	}
	if len(m.AlwaysDisallow) > 0 {
		dAtA56 := make([]byte, len(m.AlwaysDisallow)*10)
		var j55 int
		for _, num1 := range m.AlwaysDisallow {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA56[j55] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j55++
			}
			dAtA56[j55] = uint8(num)
			j55++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(j55))
		i += copy(dAtA[i:], dAtA56[:j55])
	}
	if len(m.AlwaysAllow) > 0 {
		dAtA58 := make([]byte, len(m.AlwaysAllow)*10)
		var j57 int
		for _, num1 := range m.AlwaysAllow {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA58[j57] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j57++
			}
			dAtA58[j57] = uint8(num)
			j57++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(j57))
		i += copy(dAtA[i:], dAtA58[:j57])
	}
	if len(m.UserInfos) > 0 {
		for _, msg := range m.UserInfos {
			dAtA[i] = 0x22
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *StoreShopStickerSetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreShopStickerSetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AccessHash != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.Free {
		dAtA[i] = 0x10
		i++
		if m.Free {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Official {
		dAtA[i] = 0x18
		i++
		if m.Official {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Masks {
		dAtA[i] = 0x20
		i++
		if m.Masks {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.ShortName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.ShortName)))
		i += copy(dAtA[i:], m.ShortName)
	}
	if m.Count != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Count))
	}
	if m.Hash != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Hash))
	}
	if len(m.Emoticon) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Emoticon)))
		i += copy(dAtA[i:], m.Emoticon)
	}
	if len(m.Documents) > 0 {
		dAtA60 := make([]byte, len(m.Documents)*10)
		var j59 int
		for _, num1 := range m.Documents {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA60[j59] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j59++
			}
			dAtA60[j59] = uint8(num)
			j59++
		}
		dAtA[i] = 0x52
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(j59))
		i += copy(dAtA[i:], dAtA60[:j59])
	}
	if m.Debug != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n61, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n61
	}
	if m.UserId != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *StoreShopStickerSetResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreShopStickerSetResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Id))
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *StoreShopStickerSetDocumentsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreShopStickerSetDocumentsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Id))
	}
	if len(m.Documents) > 0 {
		dAtA63 := make([]byte, len(m.Documents)*10)
		var j62 int
		for _, num1 := range m.Documents {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA63[j62] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j62++
			}
			dAtA63[j62] = uint8(num)
			j62++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(j62))
		i += copy(dAtA[i:], dAtA63[:j62])
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n64, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n64
	}
	return i, nil
}

func (m *StoreShopStickerSetDocumentsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreShopStickerSetDocumentsResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *DeleteStickerSetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteStickerSetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StickerId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.StickerId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n65, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n65
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *DeleteStickerSetResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteStickerSetResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *StickerSetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StickerSetInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Id))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.Free {
		dAtA[i] = 0x18
		i++
		if m.Free {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Official {
		dAtA[i] = 0x20
		i++
		if m.Official {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Masks {
		dAtA[i] = 0x28
		i++
		if m.Masks {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.ShortName) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.ShortName)))
		i += copy(dAtA[i:], m.ShortName)
	}
	if m.Count != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Count))
	}
	if m.Hash != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Hash))
	}
	if len(m.Emoticon) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Emoticon)))
		i += copy(dAtA[i:], m.Emoticon)
	}
	if len(m.Documents) > 0 {
		dAtA67 := make([]byte, len(m.Documents)*10)
		var j66 int
		for _, num1 := range m.Documents {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA67[j66] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j66++
			}
			dAtA67[j66] = uint8(num)
			j66++
		}
		dAtA[i] = 0x5a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(j66))
		i += copy(dAtA[i:], dAtA67[:j66])
	}
	return i, nil
}

func (m *GetStickerSetInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStickerSetInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Id))
	}
	if len(m.ShortName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.ShortName)))
		i += copy(dAtA[i:], m.ShortName)
	}
	if m.IsId {
		dAtA[i] = 0x18
		i++
		if m.IsId {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n68, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n68
	}
	return i, nil
}

func (m *GetStickerSetInfoResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStickerSetInfoResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StickerSetInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.StickerSetInfo.Size()))
		n69, err := m.StickerSetInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n69
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *StickerPackDocumentBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StickerPackDocumentBase) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AttributesStikerSetId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.AttributesStikerSetId))
	}
	if m.DocumentId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.DocumentId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.AccessHash))
	}
	if len(m.MimeType) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.MimeType)))
		i += copy(dAtA[i:], m.MimeType)
	}
	if m.Size_ != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Size_))
	}
	if len(m.Thumb) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Thumb)))
		i += copy(dAtA[i:], m.Thumb)
	}
	if m.DcId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.DcId))
	}
	if m.Date != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Date))
	}
	if m.AttributesImageSizeW != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.AttributesImageSizeW))
	}
	if m.AttributesImageSizeH != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.AttributesImageSizeH))
	}
	if len(m.AttributesStikerAlt) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.AttributesStikerAlt)))
		i += copy(dAtA[i:], m.AttributesStikerAlt)
	}
	if m.AttributesStikerSetAccessHash != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.AttributesStikerSetAccessHash))
	}
	if len(m.AttributesFileName) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.AttributesFileName)))
		i += copy(dAtA[i:], m.AttributesFileName)
	}
	return i, nil
}

func (m *StickerPackDocumentInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StickerPackDocumentInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Id))
	}
	if m.InfoBase != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.InfoBase.Size()))
		n70, err := m.InfoBase.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n70
	}
	return i, nil
}

func (m *StoreStickerPackDcReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreStickerPackDcReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Stickpackbase != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Stickpackbase.Size()))
		n71, err := m.Stickpackbase.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n71
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n72, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n72
	}
	return i, nil
}

func (m *StoreStickerPackDcResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreStickerPackDcResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Id))
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *StoreStickerPackDcArrReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreStickerPackDcArrReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StPDB) > 0 {
		for _, msg := range m.StPDB {
			dAtA[i] = 0xa
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n73, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n73
	}
	return i, nil
}

func (m *StoreStickerPackDcArrResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreStickerPackDcArrResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.IdArr) > 0 {
		dAtA75 := make([]byte, len(m.IdArr)*10)
		var j74 int
		for _, num1 := range m.IdArr {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA75[j74] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j74++
			}
			dAtA75[j74] = uint8(num)
			j74++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(j74))
		i += copy(dAtA[i:], dAtA75[:j74])
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetStickerSetPackDcInfosReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStickerSetPackDcInfosReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Id))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n76, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n76
	}
	return i, nil
}

func (m *GetStickerSetPackDcInfosResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStickerSetPackDcInfosResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StPDcInfo) > 0 {
		for _, msg := range m.StPDcInfo {
			dAtA[i] = 0xa
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AddOrDeleteFaveSticerReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddOrDeleteFaveSticerReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.StickerId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.StickerId))
	}
	if m.Unfave {
		dAtA[i] = 0x18
		i++
		if m.Unfave {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n77, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n77
	}
	return i, nil
}

func (m *AddOrDeleteFaveSticerResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddOrDeleteFaveSticerResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *GetFavedStickersReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFavedStickersReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Hash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Hash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n78, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n78
	}
	return i, nil
}

func (m *GetFavedStickersResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFavedStickersResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hash != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Hash))
	}
	if len(m.Packs) > 0 {
		for _, msg := range m.Packs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Stickers) > 0 {
		for _, msg := range m.Stickers {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *StickerPack) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StickerPack) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Emoticon) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Emoticon)))
		i += copy(dAtA[i:], m.Emoticon)
	}
	if m.DocumentId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.DocumentId))
	}
	return i, nil
}

func (m *StoreUserStickerSetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreUserStickerSetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.StickersetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.StickersetId))
	}
	if m.Installed {
		dAtA[i] = 0x18
		i++
		if m.Installed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Disabled {
		dAtA[i] = 0x20
		i++
		if m.Disabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Order != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Order))
	}
	if m.Archived {
		dAtA[i] = 0x30
		i++
		if m.Archived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Debug != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n79, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n79
	}
	return i, nil
}

func (m *StoreUserStickerSetResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreUserStickerSetResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *UpdateUserStickerSetDisabledReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserStickerSetDisabledReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.StickersetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.StickersetId))
	}
	if m.Disabled {
		dAtA[i] = 0x20
		i++
		if m.Disabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n80, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n80
	}
	return i, nil
}

func (m *UpdateUserStickerSetDisabledResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserStickerSetDisabledResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *UpdateUserStickerSetOrderReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserStickerSetOrderReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.StickersetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.StickersetId))
	}
	if m.Order != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Order))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n81, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n81
	}
	return i, nil
}

func (m *UpdateUserStickerSetOrderResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserStickerSetOrderResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *UpdateUserStickerSetInstallArReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserStickerSetInstallArReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.StickersetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.StickersetId))
	}
	if m.Archived {
		dAtA[i] = 0x18
		i++
		if m.Archived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Installed {
		dAtA[i] = 0x20
		i++
		if m.Installed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n82, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n82
	}
	return i, nil
}

func (m *UpdateUserStickerSetInstallArResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserStickerSetInstallArResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *DeleteuserStickerReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteuserStickerReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.StickersetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.StickersetId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n83, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n83
	}
	return i, nil
}

func (m *DeleteuserStickerResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteuserStickerResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.StickersetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.StickersetId))
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *UserStickerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserStickerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StickersetId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.StickersetId))
	}
	if m.Installed {
		dAtA[i] = 0x10
		i++
		if m.Installed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Disabled {
		dAtA[i] = 0x18
		i++
		if m.Disabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Order != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Order))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.Free {
		dAtA[i] = 0x30
		i++
		if m.Free {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Official {
		dAtA[i] = 0x38
		i++
		if m.Official {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Archived {
		dAtA[i] = 0x40
		i++
		if m.Archived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Masks {
		dAtA[i] = 0x48
		i++
		if m.Masks {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.ShortName) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.ShortName)))
		i += copy(dAtA[i:], m.ShortName)
	}
	if m.Count != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Count))
	}
	if m.Hash != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Hash))
	}
	if len(m.Emotico) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Emotico)))
		i += copy(dAtA[i:], m.Emotico)
	}
	if len(m.Documents) > 0 {
		dAtA85 := make([]byte, len(m.Documents)*10)
		var j84 int
		for _, num1 := range m.Documents {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA85[j84] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j84++
			}
			dAtA85[j84] = uint8(num)
			j84++
		}
		dAtA[i] = 0x7a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(j84))
		i += copy(dAtA[i:], dAtA85[:j84])
	}
	return i, nil
}

func (m *UserStickerInfoArr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserStickerInfoArr) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StickerInfo) > 0 {
		for _, msg := range m.StickerInfo {
			dAtA[i] = 0xa
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *StickerSetInfoArr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StickerSetInfoArr) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StickerInfo) > 0 {
		for _, msg := range m.StickerInfo {
			dAtA[i] = 0xa
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetuserAllStickersReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetuserAllStickersReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n86, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n86
	}
	return i, nil
}

func (m *GetuserAllStickersResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetuserAllStickersResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StickerInfoArr) > 0 {
		for _, msg := range m.StickerInfoArr {
			dAtA[i] = 0xa
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetAllStickerSetsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllStickerSetsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n87, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n87
	}
	return i, nil
}

func (m *GetAllStickerSetsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllStickerSetsResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StickerInfoArr) > 0 {
		for _, msg := range m.StickerInfoArr {
			dAtA[i] = 0xa
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *DeleteStickerPackDocumentReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteStickerPackDocumentReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Id))
	}
	if m.StickersetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.StickersetId))
	}
	return i, nil
}

func (m *DeleteStickerPackDocumentResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteStickerPackDocumentResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetAuthorStickerSetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuthorStickerSetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.SetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.SetId))
	}
	return i, nil
}

func (m *GetAuthorStickerSetResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuthorStickerSetResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Set != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Set.Size()))
		n88, err := m.Set.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n88
	}
	return i, nil
}

func (m *GetAuthorAllStickerSetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuthorAllStickerSetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *GetAuthorAllStickerSetResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuthorAllStickerSetResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.Sets) > 0 {
		for _, msg := range m.Sets {
			dAtA[i] = 0x12
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AuthorStickerSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorStickerSet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.StickersetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.StickersetId))
	}
	if len(m.ShortName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.ShortName)))
		i += copy(dAtA[i:], m.ShortName)
	}
	if m.Archived {
		dAtA[i] = 0x20
		i++
		if m.Archived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Installed {
		dAtA[i] = 0x28
		i++
		if m.Installed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Disabled {
		dAtA[i] = 0x30
		i++
		if m.Disabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Ordered != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Ordered))
	}
	if m.Created != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Created))
	}
	if m.Updated != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Updated))
	}
	return i, nil
}

func (m *CountAuthorAllStickerSetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountAuthorAllStickerSetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *CountAuthorAllStickerSetResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountAuthorAllStickerSetResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *UserGifInfoArr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserGifInfoArr) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GifArr) > 0 {
		for _, msg := range m.GifArr {
			dAtA[i] = 0xa
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UserSaveGifInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserSaveGifInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.GifId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.GifId)))
		i += copy(dAtA[i:], m.GifId)
	}
	if m.Fid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Fid))
	}
	if m.GitHash != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.GitHash))
	}
	return i, nil
}

func (m *SaveUserGifReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveUserGifReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.GifId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.GifId)))
		i += copy(dAtA[i:], m.GifId)
	}
	if m.Fid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Fid))
	}
	if m.GitHash != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.GitHash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n89, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n89
	}
	return i, nil
}

func (m *SaveUserGifResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveUserGifResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *DelUserGifReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelUserGifReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Fid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Fid))
	}
	if m.GitHash != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.GitHash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n90, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n90
	}
	return i, nil
}

func (m *DelUserGifResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelUserGifResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetUserGifsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserGifsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Hash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Hash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n91, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n91
	}
	return i, nil
}

func (m *GetUserGifsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserGifsResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Hash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Hash))
	}
	if len(m.GifArr) > 0 {
		for _, msg := range m.GifArr {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *CheckUserIsBlockedReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckUserIsBlockedReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.SelfId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n92, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n92
	}
	return i, nil
}

func (m *CheckUserIsBlockedResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckUserIsBlockedResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *RegisterUserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterUserInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.AccessHash))
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if len(m.CountryCode) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.CountryCode)))
		i += copy(dAtA[i:], m.CountryCode)
	}
	if len(m.LocalPhone) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.LocalPhone)))
		i += copy(dAtA[i:], m.LocalPhone)
	}
	if len(m.FirstName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.FirstName)))
		i += copy(dAtA[i:], m.FirstName)
	}
	if len(m.LastName) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.LastName)))
		i += copy(dAtA[i:], m.LastName)
	}
	if m.IsBot {
		dAtA[i] = 0x40
		i++
		if m.IsBot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BotInfoVersion != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.BotInfoVersion))
	}
	if m.BotChatHistory {
		dAtA[i] = 0x50
		i++
		if m.BotChatHistory {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BotNoChats {
		dAtA[i] = 0x58
		i++
		if m.BotNoChats {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Sex != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Sex))
	}
	if m.Birthday != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Birthday))
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	return i, nil
}

func (m *UpdateUserInfoResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserInfoResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uinfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Uinfo.Size()))
		n93, err := m.Uinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n93
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Result {
		dAtA[i] = 0x18
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CheckUserAccessHashValidReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckUserAccessHashValidReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n94, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n94
	}
	return i, nil
}

func (m *CheckUserAccessHashValidResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckUserAccessHashValidResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsValid {
		dAtA[i] = 0x8
		i++
		if m.IsValid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *RegisterUserInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterUserInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.AccessHash))
	}
	if len(m.PhoneNumber) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.PhoneNumber)))
		i += copy(dAtA[i:], m.PhoneNumber)
	}
	if len(m.FirstName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.FirstName)))
		i += copy(dAtA[i:], m.FirstName)
	}
	if len(m.LastName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.LastName)))
		i += copy(dAtA[i:], m.LastName)
	}
	if m.IsBot {
		dAtA[i] = 0x30
		i++
		if m.IsBot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BotInfoVersion != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.BotInfoVersion))
	}
	if m.BotChatHistory {
		dAtA[i] = 0x40
		i++
		if m.BotChatHistory {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BotNoChats {
		dAtA[i] = 0x48
		i++
		if m.BotNoChats {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.CountryCode) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.CountryCode)))
		i += copy(dAtA[i:], m.CountryCode)
	}
	if len(m.LocalPhone) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.LocalPhone)))
		i += copy(dAtA[i:], m.LocalPhone)
	}
	if m.Dc != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Dc))
	}
	if m.GroupNow != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.GroupNow))
	}
	if m.Debug != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n95, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n95
	}
	if m.Sex != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Sex))
	}
	if m.Birthday != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Birthday))
	}
	return i, nil
}

func (m *RegisterUserInfoResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterUserInfoResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uinfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Uinfo.Size()))
		n96, err := m.Uinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n96
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetNotifySettingsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNotifySettingsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.FromId))
	}
	if m.ReqType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ReqType))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n97, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n97
	}
	return i, nil
}

func (m *GetNotifySettingsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNotifySettingsResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShowPreviews {
		dAtA[i] = 0x8
		i++
		if m.ShowPreviews {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Silent {
		dAtA[i] = 0x10
		i++
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MuteUntil != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.MuteUntil))
	}
	if len(m.Sound) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Sound)))
		i += copy(dAtA[i:], m.Sound)
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *UpdateNotifySettingsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateNotifySettingsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.FromId))
	}
	if m.ReqType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ReqType))
	}
	if m.ShowPreviews {
		dAtA[i] = 0x18
		i++
		if m.ShowPreviews {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Silent {
		dAtA[i] = 0x20
		i++
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MuteUntil != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.MuteUntil))
	}
	if len(m.Sound) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Sound)))
		i += copy(dAtA[i:], m.Sound)
	}
	if m.Debug != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n98, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n98
	}
	return i, nil
}

func (m *UpdateNotifySettingsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateNotifySettingsResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetContactsStatusReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetContactsStatusReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.SelfId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n99, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n99
	}
	return i, nil
}

func (m *UserStaus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserStaus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Status != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Status))
	}
	if m.OfflineTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.OfflineTime))
	}
	return i, nil
}

func (m *GetContactsStatusResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetContactsStatusResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ContactStatusArr) > 0 {
		for _, msg := range m.ContactStatusArr {
			dAtA[i] = 0xa
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *UpdateBotPicRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBotPicRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BotId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.BotId))
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n100, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n100
	}
	return i, nil
}

func (m *UpdateBotPicResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBotPicResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetAllProxyConfigReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllProxyConfigReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n101, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n101
	}
	return i, nil
}

func (m *ProxyAddr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyAddr) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if len(m.InnerIp) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.InnerIp)))
		i += copy(dAtA[i:], m.InnerIp)
	}
	if m.Port != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Port))
	}
	return i, nil
}

func (m *GetAllProxyConfigResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllProxyConfigResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Addrs) > 0 {
		for _, msg := range m.Addrs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *CheckUserNameOccupiedReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckUserNameOccupiedReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Userid))
	}
	if len(m.UserName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.UserName)))
		i += copy(dAtA[i:], m.UserName)
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n102, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n102
	}
	return i, nil
}

func (m *CheckUserNameOccupiedResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckUserNameOccupiedResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Occpuy {
		dAtA[i] = 0x8
		i++
		if m.Occpuy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GetUserGpsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserGpsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Userid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n103, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n103
	}
	return i, nil
}

func (m *GetUserGpsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserGpsResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Latitude != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Imuinfoserver(dAtA, i, uint64(math.Float64bits(float64(m.Latitude))))
	}
	if m.Longitude != 0 {
		dAtA[i] = 0x11
		i++
		i = encodeFixed64Imuinfoserver(dAtA, i, uint64(math.Float64bits(float64(m.Longitude))))
	}
	if len(m.DeviceModule) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.DeviceModule)))
		i += copy(dAtA[i:], m.DeviceModule)
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Timestamp))
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *CheckSelfIsContactReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckSelfIsContactReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.SelfId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n104, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n104
	}
	return i, nil
}

func (m *CheckSelfIsContactResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckSelfIsContactResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfIsContact {
		dAtA[i] = 0x8
		i++
		if m.SelfIsContact {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *UpdateSwitchReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSwitchReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Switch != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Switch))
	}
	if m.OnOff {
		dAtA[i] = 0x18
		i++
		if m.OnOff {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *UpdateSwitchResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSwitchResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *GetSwitchStatusReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSwitchStatusReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Switch != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Switch))
	}
	return i, nil
}

func (m *GetSwitchStatusResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSwitchStatusResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OnOff {
		dAtA[i] = 0x8
		i++
		if m.OnOff {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Code != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *GetViplogPhoneListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetViplogPhoneListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetViplogPhoneListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetViplogPhoneListResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Phones) > 0 {
		for _, s := range m.Phones {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *UpdateUserHasPayReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserHasPayReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.KeyId))
	}
	if m.HasCreate {
		dAtA[i] = 0x18
		i++
		if m.HasCreate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *UpdateUserHasPayResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserHasPayResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sucess {
		dAtA[i] = 0x8
		i++
		if m.Sucess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CheckUserHasPayReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckUserHasPayReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *CheckUserHasPayResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckUserHasPayResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Has {
		dAtA[i] = 0x8
		i++
		if m.Has {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *UpdateUserDetailReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserDetailReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Flags))
	}
	if m.Sex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Sex))
	}
	if m.Age != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Age))
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.Extend) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Extend)))
		i += copy(dAtA[i:], m.Extend)
	}
	return i, nil
}

func (m *UpdateUserDetailResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserDetailResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sucessful {
		dAtA[i] = 0x8
		i++
		if m.Sucessful {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *UpdateUserDetailBirthdayReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserDetailBirthdayReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Flags))
	}
	if m.Birthday != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Birthday))
	}
	if len(m.Extend) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Extend)))
		i += copy(dAtA[i:], m.Extend)
	}
	return i, nil
}

func (m *UpdateUserDetailBirthdayResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserDetailBirthdayResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Successful {
		dAtA[i] = 0x8
		i++
		if m.Successful {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SetUserDetailReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetUserDetailReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Flags))
	}
	if len(m.FirstName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.FirstName)))
		i += copy(dAtA[i:], m.FirstName)
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.Sex != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Sex))
	}
	if m.Birthday != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Birthday))
	}
	if len(m.Extend) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Extend)))
		i += copy(dAtA[i:], m.Extend)
	}
	return i, nil
}

func (m *SetUserDetailResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetUserDetailResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Successful {
		dAtA[i] = 0x8
		i++
		if m.Successful {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *DeleteReceiveAppliesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteReceiveAppliesReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.SelfId))
	}
	if len(m.UserIdArr) > 0 {
		dAtA106 := make([]byte, len(m.UserIdArr)*10)
		var j105 int
		for _, num1 := range m.UserIdArr {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA106[j105] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j105++
			}
			dAtA106[j105] = uint8(num)
			j105++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(j105))
		i += copy(dAtA[i:], dAtA106[:j105])
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n107, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n107
	}
	return i, nil
}

func (m *DeleteReceiveAppliesResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteReceiveAppliesResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *UpdateUserTypeLableReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserTypeLableReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.UserType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserType))
	}
	if m.UserLable != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserLable))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n108, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n108
	}
	return i, nil
}

func (m *UpdateUserTypeLableResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserTypeLableResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *CheckSearchUserCountLimitedReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckSearchUserCountLimitedReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n109, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n109
	}
	return i, nil
}

func (m *CheckSearchUserCountLimitedResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckSearchUserCountLimitedResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsLimited {
		dAtA[i] = 0x8
		i++
		if m.IsLimited {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TimeLeft != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.TimeLeft))
	}
	return i, nil
}

func (m *CheckIsMutualContactReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckIsMutualContactReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.ContactId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ContactId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n110, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n110
	}
	return i, nil
}

func (m *CheckIsMutualContactResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckIsMutualContactResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsMutualContact {
		dAtA[i] = 0x8
		i++
		if m.IsMutualContact {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *ChangeGroupNameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeGroupNameReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.GroupId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n111, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n111
	}
	return i, nil
}

func (m *ChangeGroupNameResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeGroupNameResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetContactsV1Req) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetContactsV1Req) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.KeyId))
	}
	if m.Hash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Hash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n112, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n112
	}
	return i, nil
}

func (m *GetContactsV1Result) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetContactsV1Result) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ContactArr) > 0 {
		for _, msg := range m.ContactArr {
			dAtA[i] = 0xa
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.UserInfoArr) > 0 {
		for _, msg := range m.UserInfoArr {
			dAtA[i] = 0x12
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.GroupOrderArr) > 0 {
		for _, msg := range m.GroupOrderArr {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.SavedCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.SavedCount))
	}
	if m.Hash != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Hash))
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *SearchPrettyNumberReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchPrettyNumberReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CountryCode) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.CountryCode)))
		i += copy(dAtA[i:], m.CountryCode)
	}
	if len(m.MatchNumber) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.MatchNumber)))
		i += copy(dAtA[i:], m.MatchNumber)
	}
	return i, nil
}

func (m *SearchPrettyNumberRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchPrettyNumberRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.PrettyNumbers) > 0 {
		for _, s := range m.PrettyNumbers {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *ActivePrettyNumberReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivePrettyNumberReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CountryCode) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.CountryCode)))
		i += copy(dAtA[i:], m.CountryCode)
	}
	if len(m.ActivePhone) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.ActivePhone)))
		i += copy(dAtA[i:], m.ActivePhone)
	}
	if len(m.AssginFlags) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.AssginFlags)))
		i += copy(dAtA[i:], m.AssginFlags)
	}
	if m.Operator != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Operator))
	}
	return i, nil
}

func (m *ActivePrettyNumberRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivePrettyNumberRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *GetVirtualBindByPhoneReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVirtualBindByPhoneReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VirtualPhone) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.VirtualPhone)))
		i += copy(dAtA[i:], m.VirtualPhone)
	}
	return i, nil
}

func (m *GetVirtualBindByPhoneRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVirtualBindByPhoneRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsVirtualAcct {
		dAtA[i] = 0x8
		i++
		if m.IsVirtualAcct {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.BindRealPhone) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.BindRealPhone)))
		i += copy(dAtA[i:], m.BindRealPhone)
	}
	if m.BindContactId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.BindContactId))
	}
	if len(m.AssingFlags) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.AssingFlags)))
		i += copy(dAtA[i:], m.AssingFlags)
	}
	return i, nil
}

func (m *GetuserAdminInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetuserAdminInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *GetuserAdminInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetuserAdminInfoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsAdmin {
		dAtA[i] = 0x8
		i++
		if m.IsAdmin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Level))
	}
	return i, nil
}

func (m *AddUserAdminReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddUserAdminReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Operator != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Operator))
	}
	if m.Level != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Level))
	}
	return i, nil
}

func (m *AddUserAdminResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddUserAdminResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SUcessful {
		dAtA[i] = 0x8
		i++
		if m.SUcessful {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ErrStr) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.ErrStr)))
		i += copy(dAtA[i:], m.ErrStr)
	}
	return i, nil
}

func (m *BindVitualSendCodeChannelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BindVitualSendCodeChannelReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AssigFlag) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.AssigFlag)))
		i += copy(dAtA[i:], m.AssigFlag)
	}
	if m.SendId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.SendId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.AccessHash))
	}
	return i, nil
}

func (m *BindVitualSendCodeChannelResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BindVitualSendCodeChannelResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.ErrStr) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.ErrStr)))
		i += copy(dAtA[i:], m.ErrStr)
	}
	return i, nil
}

func (m *GetVitualSendCodeChannelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVitualSendCodeChannelReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PhoneNumber) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.PhoneNumber)))
		i += copy(dAtA[i:], m.PhoneNumber)
	}
	return i, nil
}

func (m *GetVitualSendCodeChannelResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVitualSendCodeChannelResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsNeedSendChannel {
		dAtA[i] = 0x8
		i++
		if m.IsNeedSendChannel {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SendId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.SendId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.AccessHash))
	}
	return i, nil
}

func (m *VitualCheckCanAddContactReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VitualCheckCanAddContactReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.ContactId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ContactId))
	}
	return i, nil
}

func (m *VitualCheckCanAddContactResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VitualCheckCanAddContactResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CanAdd {
		dAtA[i] = 0x8
		i++
		if m.CanAdd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CheckIsPhoneVitulaPhoneReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckIsPhoneVitulaPhoneReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Phone) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	return i, nil
}

func (m *CheckIsPhoneVitulaPhoneResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckIsPhoneVitulaPhoneResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsVirtal {
		dAtA[i] = 0x8
		i++
		if m.IsVirtal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CheckIsVitulaPhoneArrReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckIsVitulaPhoneArrReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserId) > 0 {
		dAtA114 := make([]byte, len(m.UserId)*10)
		var j113 int
		for _, num1 := range m.UserId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA114[j113] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j113++
			}
			dAtA114[j113] = uint8(num)
			j113++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(j113))
		i += copy(dAtA[i:], dAtA114[:j113])
	}
	return i, nil
}

func (m *CheckIsVitulaPhoneArrResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckIsVitulaPhoneArrResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsVitual {
		dAtA[i] = 0x8
		i++
		if m.IsVitual {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SignUpVitualReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignUpVitualReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PhoneNumber) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.PhoneNumber)))
		i += copy(dAtA[i:], m.PhoneNumber)
	}
	if len(m.PhoneCodeHash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.PhoneCodeHash)))
		i += copy(dAtA[i:], m.PhoneCodeHash)
	}
	if len(m.PhoneCode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.PhoneCode)))
		i += copy(dAtA[i:], m.PhoneCode)
	}
	if len(m.FirstName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.FirstName)))
		i += copy(dAtA[i:], m.FirstName)
	}
	if m.Sex != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Sex))
	}
	if m.IsBot {
		dAtA[i] = 0x30
		i++
		if m.IsBot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BotInfoVersion != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.BotInfoVersion))
	}
	if m.BotChatHistory {
		dAtA[i] = 0x40
		i++
		if m.BotChatHistory {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BotNoChats {
		dAtA[i] = 0x48
		i++
		if m.BotNoChats {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.CountryCode) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.CountryCode)))
		i += copy(dAtA[i:], m.CountryCode)
	}
	if len(m.LocalPhone) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.LocalPhone)))
		i += copy(dAtA[i:], m.LocalPhone)
	}
	if m.Birthday != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Birthday))
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.ProxyCode != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ProxyCode))
	}
	return i, nil
}

func (m *SignUpVitualResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignUpVitualResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Code))
	}
	if m.UserInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserInfo.Size()))
		n115, err := m.UserInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n115
	}
	return i, nil
}

func (m *VirtualBindRealPhoneReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualBindRealPhoneReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VPhone) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.VPhone)))
		i += copy(dAtA[i:], m.VPhone)
	}
	if len(m.RPhone) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.RPhone)))
		i += copy(dAtA[i:], m.RPhone)
	}
	return i, nil
}

func (m *VirtualBindRealPhoneRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualBindRealPhoneRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *VirtualAddContactByPhoneReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualAddContactByPhoneReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VPhone) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.VPhone)))
		i += copy(dAtA[i:], m.VPhone)
	}
	if len(m.RPhone) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.RPhone)))
		i += copy(dAtA[i:], m.RPhone)
	}
	return i, nil
}

func (m *VirtualAddContactByPhoneRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualAddContactByPhoneRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *JoinGroupCheckReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinGroupCheckReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InviterId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.InviterId))
	}
	if len(m.MemberIds) > 0 {
		dAtA117 := make([]byte, len(m.MemberIds)*10)
		var j116 int
		for _, num1 := range m.MemberIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA117[j116] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j116++
			}
			dAtA117[j116] = uint8(num)
			j116++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(j116))
		i += copy(dAtA[i:], dAtA117[:j116])
	}
	return i, nil
}

func (m *JoinGroupCheckRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinGroupCheckRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CanJoinIds) > 0 {
		dAtA119 := make([]byte, len(m.CanJoinIds)*10)
		var j118 int
		for _, num1 := range m.CanJoinIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA119[j118] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j118++
			}
			dAtA119[j118] = uint8(num)
			j118++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(j118))
		i += copy(dAtA[i:], dAtA119[:j118])
	}
	return i, nil
}

func (m *CheckIsVitulaPhoneReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckIsVitulaPhoneReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *CheckIsVitulaPhoneResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckIsVitulaPhoneResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsVitulal {
		dAtA[i] = 0x8
		i++
		if m.IsVitulal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *VirtulPhoneInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtulPhoneInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.PhoneNumber) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.PhoneNumber)))
		i += copy(dAtA[i:], m.PhoneNumber)
	}
	return i, nil
}

func (m *GetAllVitualUsersByFlagsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllVitualUsersByFlagsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AssginFlags) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.AssginFlags)))
		i += copy(dAtA[i:], m.AssginFlags)
	}
	return i, nil
}

func (m *GetAllVitualUsersByFlagsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllVitualUsersByFlagsResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sucess {
		dAtA[i] = 0x8
		i++
		if m.Sucess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Infos) > 0 {
		for _, msg := range m.Infos {
			dAtA[i] = 0x12
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetVitulPhoneNumbersReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVitulPhoneNumbersReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Number != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Number))
	}
	if m.AdminId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.AdminId))
	}
	if len(m.AssginFlags) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.AssginFlags)))
		i += copy(dAtA[i:], m.AssginFlags)
	}
	if m.UtilDate != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UtilDate))
	}
	if len(m.CountryCode) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.CountryCode)))
		i += copy(dAtA[i:], m.CountryCode)
	}
	return i, nil
}

func (m *GetVitulPhoneNumbersResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVitulPhoneNumbersResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ErrCode))
	}
	if len(m.ErrStr) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.ErrStr)))
		i += copy(dAtA[i:], m.ErrStr)
	}
	if len(m.Phonenumbers) > 0 {
		for _, s := range m.Phonenumbers {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *GenVitulaPhoneNumbersReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenVitulaPhoneNumbersReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CountryCode) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.CountryCode)))
		i += copy(dAtA[i:], m.CountryCode)
	}
	return i, nil
}

func (m *GenVitulaPhoneNumbersResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenVitulaPhoneNumbersResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ErrCode))
	}
	if len(m.ErrStr) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.ErrStr)))
		i += copy(dAtA[i:], m.ErrStr)
	}
	return i, nil
}

func (m *UserCdnVipInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserCdnVipInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.State))
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Level))
	}
	if m.BgnTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.BgnTime))
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.EndTime))
	}
	if m.AutoPay {
		dAtA[i] = 0x28
		i++
		if m.AutoPay {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *UserCdnPayInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserCdnPayInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PayId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.PayId))
	}
	if m.PayAmt != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.PayAmt))
	}
	if m.BgnTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.BgnTime))
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.EndTime))
	}
	return i, nil
}

func (m *BuyCdnVipReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuyCdnVipReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.VipLvl != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.VipLvl))
	}
	if m.Months != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Months))
	}
	if len(m.Passwd) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Passwd)))
		i += copy(dAtA[i:], m.Passwd)
	}
	if m.Debugs != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debugs.Size()))
		n120, err := m.Debugs.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n120
	}
	return i, nil
}

func (m *BuyCdnVipRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuyCdnVipRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RetCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.RetCode))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.VipInfo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.VipInfo.Size()))
		n121, err := m.VipInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n121
	}
	return i, nil
}

func (m *SetCdnVipAutoPayReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetCdnVipAutoPayReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.IsOpen {
		dAtA[i] = 0x10
		i++
		if m.IsOpen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SetCdnVipAutoPayRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetCdnVipAutoPayRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.VipInfo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.VipInfo.Size()))
		n122, err := m.VipInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n122
	}
	return i, nil
}

func (m *GetUserCdnPayListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserCdnPayListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *GetUserCdnPayListRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserCdnPayListRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RetCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.RetCode))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.VipInfo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.VipInfo.Size()))
		n123, err := m.VipInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n123
	}
	if len(m.PayList) > 0 {
		for _, msg := range m.PayList {
			dAtA[i] = 0x22
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetUserCdnVipInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserCdnVipInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *GetUserCdnVipInfoRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserCdnVipInfoRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RetCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.RetCode))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.VipInfo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.VipInfo.Size()))
		n124, err := m.VipInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n124
	}
	return i, nil
}

func (m *ChkCdnVipReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChkCdnVipReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *ChkCdnVipRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChkCdnVipRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsVip {
		dAtA[i] = 0x8
		i++
		if m.IsVip {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *AddCdnVipReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddCdnVipReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.VipLvl != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.VipLvl))
	}
	if m.Months != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Months))
	}
	return i, nil
}

func (m *AddCdnVipRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddCdnVipRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sucess {
		dAtA[i] = 0x8
		i++
		if m.Sucess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *CheckIsSelfContactReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckIsSelfContactReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.SelfId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n125, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n125
	}
	return i, nil
}

func (m *CheckIsSelfContactResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckIsSelfContactResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsSelfContact {
		dAtA[i] = 0x8
		i++
		if m.IsSelfContact {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetPhoneBookInfosReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPhoneBookInfosReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.PhoneContactArr) > 0 {
		for _, msg := range m.PhoneContactArr {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetPhoneBookInfosResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPhoneBookInfosResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ReCode))
	}
	if len(m.Uinfo) > 0 {
		for _, msg := range m.Uinfo {
			dAtA[i] = 0x12
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AddLoginDayReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddLoginDayReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *AddLoginDayResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddLoginDayResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Result {
		dAtA[i] = 0x10
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CheckDigitalWalletSwitchReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckDigitalWalletSwitchReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *CheckDigitalWalletSwitchResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckDigitalWalletSwitchResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Result {
		dAtA[i] = 0x10
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *RecvLockerAddUserIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecvLockerAddUserIdReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *RecvLockerAddUserIdResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecvLockerAddUserIdResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *RecvLockerDelUserIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecvLockerDelUserIdReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *RecvLockerDelUserIdResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecvLockerDelUserIdResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *RecvLockerGetUserIdsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecvLockerGetUserIdsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RecvLockerGetUserIdsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecvLockerGetUserIdsResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.UserId) > 0 {
		dAtA127 := make([]byte, len(m.UserId)*10)
		var j126 int
		for _, num := range m.UserId {
			for num >= 1<<7 {
				dAtA127[j126] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j126++
			}
			dAtA127[j126] = uint8(num)
			j126++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(j126))
		i += copy(dAtA[i:], dAtA127[:j126])
	}
	return i, nil
}

func (m *CheckIsMuteContactReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckIsMuteContactReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.SelfId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *CheckIsMuteContactResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckIsMuteContactResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Result {
		dAtA[i] = 0x10
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SetUserUnsubscribeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetUserUnsubscribeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Val != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Val))
	}
	return i, nil
}

func (m *SetUserUnsubscribeResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetUserUnsubscribeResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *GetUserUnsubscribeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserUnsubscribeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *GetUserUnsubscribeResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserUnsubscribeResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Val != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Val))
	}
	return i, nil
}

func (m *GetRelationUsersReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRelationUsersReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n128, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n128
	}
	return i, nil
}

func (m *GetRelationUsersResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRelationUsersResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.Infos) > 0 {
		for _, msg := range m.Infos {
			dAtA[i] = 0x12
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetUserIpByAddrReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserIpByAddrReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Addr)))
		i += copy(dAtA[i:], m.Addr)
	}
	if m.IsSignUp {
		dAtA[i] = 0x10
		i++
		if m.IsSignUp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GetUserIpByAddrResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserIpByAddrResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.UserId) > 0 {
		dAtA130 := make([]byte, len(m.UserId)*10)
		var j129 int
		for _, num1 := range m.UserId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA130[j129] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j129++
			}
			dAtA130[j129] = uint8(num)
			j129++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(j129))
		i += copy(dAtA[i:], dAtA130[:j129])
	}
	return i, nil
}

func (m *UserIpAddr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserIpAddr) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Id))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.IpAddr) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.IpAddr)))
		i += copy(dAtA[i:], m.IpAddr)
	}
	if m.IpPort != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.IpPort))
	}
	if m.LastOnline != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.LastOnline))
	}
	if m.IsSignUp {
		dAtA[i] = 0x30
		i++
		if m.IsSignUp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GetUserIpByUserIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserIpByUserIdReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.IsSignUp {
		dAtA[i] = 0x10
		i++
		if m.IsSignUp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GetUserIpByUserIdResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserIpByUserIdResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.Addrs) > 0 {
		for _, msg := range m.Addrs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UserIpAddOrUpdateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserIpAddOrUpdateReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.Addr) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Addr)))
		i += copy(dAtA[i:], m.Addr)
	}
	if m.IsSignUp {
		dAtA[i] = 0x18
		i++
		if m.IsSignUp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *UserIpAddOrUpdateResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserIpAddOrUpdateResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *CheckUserSpaiclReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckUserSpaiclReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *CheckUserSpaiclResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckUserSpaiclResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Result {
		dAtA[i] = 0x10
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *InsertUSerSpaiclReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InsertUSerSpaiclReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *InsertUSerSpaiclResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InsertUSerSpaiclResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Result {
		dAtA[i] = 0x10
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *DelUSerSpaiclReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelUSerSpaiclReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *DelUSerSpaiclResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelUSerSpaiclResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Result {
		dAtA[i] = 0x10
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GetAllUSerSpaiclReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllUSerSpaiclReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *GetAllUSerSpaiclResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllUSerSpaiclResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.TrueUserId) > 0 {
		dAtA132 := make([]byte, len(m.TrueUserId)*10)
		var j131 int
		for _, num1 := range m.TrueUserId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA132[j131] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j131++
			}
			dAtA132[j131] = uint8(num)
			j131++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(j131))
		i += copy(dAtA[i:], dAtA132[:j131])
	}
	if len(m.FalseUserId) > 0 {
		dAtA134 := make([]byte, len(m.FalseUserId)*10)
		var j133 int
		for _, num1 := range m.FalseUserId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA134[j133] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j133++
			}
			dAtA134[j133] = uint8(num)
			j133++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(j133))
		i += copy(dAtA[i:], dAtA134[:j133])
	}
	return i, nil
}

func (m *ChangePhoneReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangePhoneReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.KeyId))
	}
	if len(m.PhoneNumber) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.PhoneNumber)))
		i += copy(dAtA[i:], m.PhoneNumber)
	}
	if len(m.PhoneCodeHash) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.PhoneCodeHash)))
		i += copy(dAtA[i:], m.PhoneCodeHash)
	}
	if len(m.PhoneCode) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.PhoneCode)))
		i += copy(dAtA[i:], m.PhoneCode)
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n135, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n135
	}
	if len(m.CountryCode) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.CountryCode)))
		i += copy(dAtA[i:], m.CountryCode)
	}
	if len(m.LocalPhone) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.LocalPhone)))
		i += copy(dAtA[i:], m.LocalPhone)
	}
	return i, nil
}

func (m *ChangePhoneResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangePhoneResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Result {
		dAtA[i] = 0x10
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *VirtualPhoneNumberInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualPhoneNumberInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VirtualPhone) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.VirtualPhone)))
		i += copy(dAtA[i:], m.VirtualPhone)
	}
	if len(m.RealPhone) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.RealPhone)))
		i += copy(dAtA[i:], m.RealPhone)
	}
	if m.Activated != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Activated))
	}
	if m.BindTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.BindTime))
	}
	if m.ActivateTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ActivateTime))
	}
	if m.ActivateAdminId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ActivateAdminId))
	}
	if m.BindAdminId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.BindAdminId))
	}
	if m.OwnerId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.OwnerId))
	}
	if len(m.InitialPhoneCode) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.InitialPhoneCode)))
		i += copy(dAtA[i:], m.InitialPhoneCode)
	}
	return i, nil
}

func (m *UserExpansionFindReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserExpansionFindReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserID))
	}
	return i, nil
}

func (m *UserExpansionFindResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserExpansionFindResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserExpansion != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserExpansion.Size()))
		n136, err := m.UserExpansion.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n136
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *UserExpansion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserExpansion) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserID))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.Version != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Version))
	}
	return i, nil
}

func (m *UserExpansionSetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserExpansionSetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserID))
	}
	if m.UserExpansion != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserExpansion.Size()))
		n137, err := m.UserExpansion.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n137
	}
	return i, nil
}

func (m *UserExpansionSetResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserExpansionSetResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *UserInfoExtend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfoExtend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserType))
	}
	if len(m.UselableFid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.UselableFid)))
		i += copy(dAtA[i:], m.UselableFid)
	}
	if m.UselableSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UselableSize))
	}
	if m.UselableWidth != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UselableWidth))
	}
	if m.UselableHeight != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UselableHeight))
	}
	return i, nil
}

func (m *GetUserInfoExtendReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserInfoExtendReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetUserInfoExtendResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserInfoExtendResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	if m.Hash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Hash))
	}
	if len(m.UserInfoExtend) > 0 {
		for _, msg := range m.UserInfoExtend {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *HistoryChangePhoneAddResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoryChangePhoneAddResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *HistoryChangePhoneAddReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoryChangePhoneAddReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserID))
	}
	if len(m.FromNumber) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.FromNumber)))
		i += copy(dAtA[i:], m.FromNumber)
	}
	if len(m.ToNumber) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.ToNumber)))
		i += copy(dAtA[i:], m.ToNumber)
	}
	if len(m.Addr) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Addr)))
		i += copy(dAtA[i:], m.Addr)
	}
	if m.Port != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Port))
	}
	return i, nil
}

func (m *QueryUpdatesByUseridReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUpdatesByUseridReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.KeyId))
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Timestamp))
	}
	return i, nil
}

func (m *QueryUpdatesByUseridResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUpdatesByUseridResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.JsonContent) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.JsonContent)))
		i += copy(dAtA[i:], m.JsonContent)
	}
	return i, nil
}

func (m *GetSwitchVersionReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSwitchVersionReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *GetSwitchVersionResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSwitchVersionResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Version))
	}
	return i, nil
}

func (m *UGetUsersChatsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UGetUsersChatsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Userid))
	}
	if len(m.Users) > 0 {
		dAtA139 := make([]byte, len(m.Users)*10)
		var j138 int
		for _, num1 := range m.Users {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA139[j138] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j138++
			}
			dAtA139[j138] = uint8(num)
			j138++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(j138))
		i += copy(dAtA[i:], dAtA139[:j138])
	}
	if len(m.Chatid) > 0 {
		dAtA141 := make([]byte, len(m.Chatid)*10)
		var j140 int
		for _, num1 := range m.Chatid {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA141[j140] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j140++
			}
			dAtA141[j140] = uint8(num)
			j140++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(j140))
		i += copy(dAtA[i:], dAtA141[:j140])
	}
	if len(m.Channelid) > 0 {
		dAtA143 := make([]byte, len(m.Channelid)*10)
		var j142 int
		for _, num1 := range m.Channelid {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA143[j142] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j142++
			}
			dAtA143[j142] = uint8(num)
			j142++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(j142))
		i += copy(dAtA[i:], dAtA143[:j142])
	}
	if m.ProtocolLayer != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ProtocolLayer))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Dlog.Size()))
		n144, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n144
	}
	return i, nil
}

func (m *UGetUsersChatsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UGetUsersChatsResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Channels) > 0 {
		for _, b := range m.Channels {
			dAtA[i] = 0xa
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.Users != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Users.Size()))
		n145, err := m.Users.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n145
	}
	if len(m.Chats) > 0 {
		for _, b := range m.Chats {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.NoChats) > 0 {
		dAtA147 := make([]byte, len(m.NoChats)*10)
		var j146 int
		for _, num1 := range m.NoChats {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA147[j146] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j146++
			}
			dAtA147[j146] = uint8(num)
			j146++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(j146))
		i += copy(dAtA[i:], dAtA147[:j146])
	}
	if len(m.NoChans) > 0 {
		dAtA149 := make([]byte, len(m.NoChans)*10)
		var j148 int
		for _, num1 := range m.NoChans {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA149[j148] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j148++
			}
			dAtA149[j148] = uint8(num)
			j148++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(j148))
		i += copy(dAtA[i:], dAtA149[:j148])
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *UpdateBotInfoSuppReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBotInfoSuppReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.Placeholder) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Placeholder)))
		i += copy(dAtA[i:], m.Placeholder)
	}
	if m.Geo {
		dAtA[i] = 0x18
		i++
		if m.Geo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n150, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n150
	}
	return i, nil
}

func (m *UpdateBotInfoSuppResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBotInfoSuppResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *DeleteUserUsernameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteUserUsernameReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AdminId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.AdminId))
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if m.ForceDelete {
		dAtA[i] = 0x18
		i++
		if m.ForceDelete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n151, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n151
	}
	return i, nil
}

func (m *DeleteUserUsernameResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteUserUsernameResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Code))
	}
	if len(m.InternalErrorMessage) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.InternalErrorMessage)))
		i += copy(dAtA[i:], m.InternalErrorMessage)
	}
	if m.OwnerId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.OwnerId))
	}
	return i, nil
}

func (m *UpdateUserLocationReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserLocationReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.Country) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Country)))
		i += copy(dAtA[i:], m.Country)
	}
	if len(m.City) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.City)))
		i += copy(dAtA[i:], m.City)
	}
	if len(m.Detail) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Detail)))
		i += copy(dAtA[i:], m.Detail)
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n152, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n152
	}
	return i, nil
}

func (m *UpdateUserLocationResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserLocationResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	return i, nil
}

func (m *UpdateUserGrenderReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserGrenderReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Grender != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Grender))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n153, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n153
	}
	return i, nil
}

func (m *UpdateUserGrenderResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserGrenderResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	return i, nil
}

func (m *UpdateUserEmailReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserEmailReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n154, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n154
	}
	return i, nil
}

func (m *UpdateUserEmailResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserEmailResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	return i, nil
}

func (m *UploadContactsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadContactsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.PhoneContactArr) > 0 {
		for _, msg := range m.PhoneContactArr {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UploadContactsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadContactsResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error {
		dAtA[i] = 0x8
		i++
		if m.Error {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *ApplyContactReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyContactReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.ApplyUserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ApplyUserId))
	}
	if len(m.WithMessage) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.WithMessage)))
		i += copy(dAtA[i:], m.WithMessage)
	}
	if m.FromType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.FromType))
	}
	if m.GroupId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.GroupId))
	}
	if len(m.FirstName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.FirstName)))
		i += copy(dAtA[i:], m.FirstName)
	}
	if len(m.LastName) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.LastName)))
		i += copy(dAtA[i:], m.LastName)
	}
	if m.Debug != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n155, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n155
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.AccessHash))
	}
	return i, nil
}

func (m *ApplyContactResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyContactResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromApplyId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.FromApplyId))
	}
	if m.FromReplyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.FromReplyId))
	}
	if m.ToApplyId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ToApplyId))
	}
	if m.ToReplyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ToReplyId))
	}
	if m.Date != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Date))
	}
	if m.ToUnreadCount != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ToUnreadCount))
	}
	if m.AddContact {
		dAtA[i] = 0x38
		i++
		if m.AddContact {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *ContactsGreetApplyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsGreetApplyReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.ApplyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ApplyId))
	}
	if len(m.Greet) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Greet)))
		i += copy(dAtA[i:], m.Greet)
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n156, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n156
	}
	return i, nil
}

func (m *ContactsGreetApplyResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsGreetApplyResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromApplyId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.FromApplyId))
	}
	if m.FromReplyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.FromReplyId))
	}
	if m.ToApplyId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ToApplyId))
	}
	if m.ToReplyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ToReplyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.UnreadCount != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UnreadCount))
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetAppliedContactsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAppliedContactsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *GetAppliedContactsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAppliedContactsResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error {
		dAtA[i] = 0x8
		i++
		if m.Error {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.AppliedArr) > 0 {
		for _, msg := range m.AppliedArr {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Applied) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Applied) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Id))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.ApplyUser != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ApplyUser.Size()))
		n157, err := m.ApplyUser.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n157
	}
	if len(m.WithMessage) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.WithMessage)))
		i += copy(dAtA[i:], m.WithMessage)
	}
	if m.Status != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Status))
	}
	if m.Flag != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Flag))
	}
	if m.Gender != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Gender))
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.Country) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Country)))
		i += copy(dAtA[i:], m.Country)
	}
	if len(m.City) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.City)))
		i += copy(dAtA[i:], m.City)
	}
	if len(m.Detail) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Detail)))
		i += copy(dAtA[i:], m.Detail)
	}
	return i, nil
}

func (m *VerifyContactReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyContactReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Id))
	}
	if m.VerifyUserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.VerifyUserId))
	}
	if m.Status != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func (m *VerifyContactResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyContactResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error {
		dAtA[i] = 0x8
		i++
		if m.Error {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *DeleteAppliedHistoryContactReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAppliedHistoryContactReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.MaxId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n158, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n158
	}
	return i, nil
}

func (m *DeleteAppliedHistoryContactResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAppliedHistoryContactResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *DeleteAppliedSomeContactReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAppliedSomeContactReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA160 := make([]byte, len(m.Id)*10)
		var j159 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA160[j159] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j159++
			}
			dAtA160[j159] = uint8(num)
			j159++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(j159))
		i += copy(dAtA[i:], dAtA160[:j159])
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n161, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n161
	}
	return i, nil
}

func (m *DeleteAppliedSomeContactResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAppliedSomeContactResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *ReadAppliedHistoryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadAppliedHistoryReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n162, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n162
	}
	return i, nil
}

func (m *ReadAppliedHistoryResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadAppliedHistoryResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetContactsApplyDifferenceReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetContactsApplyDifferenceReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.ApplyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ApplyId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Limit))
	}
	if m.Date != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Date))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n163, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n163
	}
	return i, nil
}

func (m *ApplyDifference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyDifference) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApplyId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ApplyId))
	}
	if m.ReplyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ReplyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Date != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Date))
	}
	if m.State != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.State))
	}
	if len(m.Greet) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Greet)))
		i += copy(dAtA[i:], m.Greet)
	}
	if m.FromType != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.FromType))
	}
	return i, nil
}

func (m *GetContactsApplyDifferenceResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetContactsApplyDifferenceResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Applies) > 0 {
		for _, msg := range m.Applies {
			dAtA[i] = 0xa
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.MaxApplyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.MaxApplyId))
	}
	if m.UnreadCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UnreadCount))
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetContactsApplyDifferenceV2Req) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetContactsApplyDifferenceV2Req) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.ApplyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ApplyId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Limit))
	}
	if m.Date != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Date))
	}
	if m.Hash != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Hash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n164, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n164
	}
	return i, nil
}

func (m *GetContactsApplyDifferenceV2Result) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetContactsApplyDifferenceV2Result) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Applies) > 0 {
		for _, msg := range m.Applies {
			dAtA[i] = 0xa
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.MaxApplyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.MaxApplyId))
	}
	if m.UnreadCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UnreadCount))
	}
	if m.Hash != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Hash))
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *SearchUserByPhoneReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchUserByPhoneReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.SelfId))
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n165, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n165
	}
	return i, nil
}

func (m *SearchUserByPhoneResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchUserByPhoneResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserInfos) > 0 {
		for _, msg := range m.UserInfos {
			dAtA[i] = 0xa
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Gender != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Gender))
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.Country) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Country)))
		i += copy(dAtA[i:], m.Country)
	}
	if len(m.City) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.City)))
		i += copy(dAtA[i:], m.City)
	}
	if len(m.Detail) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Detail)))
		i += copy(dAtA[i:], m.Detail)
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *CreateGroupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateGroupReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.SelfId))
	}
	if len(m.UserIdArr) > 0 {
		dAtA167 := make([]byte, len(m.UserIdArr)*10)
		var j166 int
		for _, num1 := range m.UserIdArr {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA167[j166] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j166++
			}
			dAtA167[j166] = uint8(num)
			j166++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(j166))
		i += copy(dAtA[i:], dAtA167[:j166])
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n168, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n168
	}
	return i, nil
}

func (m *CreateGroupResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateGroupResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.GroupId))
	}
	if m.Order != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Order))
	}
	if m.Date != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Date))
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *SetUserGroupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetUserGroupReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.SelfId))
	}
	if len(m.UserInfos) > 0 {
		for _, msg := range m.UserInfos {
			dAtA[i] = 0x12
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.GroupId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.GroupId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n169, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n169
	}
	return i, nil
}

func (m *SetUserGroupResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetUserGroupResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetFullUserReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFullUserReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.SelfId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n170, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n170
	}
	return i, nil
}

func (m *GetFullUserResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFullUserResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uinfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Uinfo.Size()))
		n171, err := m.Uinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n171
	}
	if m.Isblocked {
		dAtA[i] = 0x10
		i++
		if m.Isblocked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PhoneCallsPrivate {
		dAtA[i] = 0x18
		i++
		if m.PhoneCallsPrivate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PhoneCallsAvailable {
		dAtA[i] = 0x20
		i++
		if m.PhoneCallsAvailable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.About) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.About)))
		i += copy(dAtA[i:], m.About)
	}
	if m.CommonChat != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.CommonChat))
	}
	if len(m.Extend) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Extend)))
		i += copy(dAtA[i:], m.Extend)
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetUserExpansionReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserExpansionReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *GetUserExpansionResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserExpansionResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.Version != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Version))
	}
	return i, nil
}

func (m *ChangeGroupOrderReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeGroupOrderReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.SelfId))
	}
	if len(m.GroupOrder) > 0 {
		for _, msg := range m.GroupOrder {
			dAtA[i] = 0x12
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n172, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n172
	}
	return i, nil
}

func (m *GroupOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupOrder) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.GroupId))
	}
	if m.OrderId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.OrderId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.Date != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Date))
	}
	if m.UnreadCount != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UnreadCount))
	}
	return i, nil
}

func (m *ChangeGroupOrderResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeGroupOrderResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *DeleteGroupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteGroupReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.GroupId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.GroupId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n173, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n173
	}
	return i, nil
}

func (m *DeleteGroupResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteGroupResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *DeleteGroupsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteGroupsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.GroupIds) > 0 {
		dAtA175 := make([]byte, len(m.GroupIds)*10)
		var j174 int
		for _, num1 := range m.GroupIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA175[j174] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j174++
			}
			dAtA175[j174] = uint8(num)
			j174++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(j174))
		i += copy(dAtA[i:], dAtA175[:j174])
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n176, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n176
	}
	return i, nil
}

func (m *DeleteGroupsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteGroupsResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetCustomerListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCustomerListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsOrient {
		dAtA[i] = 0x8
		i++
		if m.IsOrient {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CustomerList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomerList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if m.IsOrient {
		dAtA[i] = 0x18
		i++
		if m.IsOrient {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if m.Sort != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Sort))
	}
	return i, nil
}

func (m *GetCustomerListReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCustomerListReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Customers) > 0 {
		for _, msg := range m.Customers {
			dAtA[i] = 0xa
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *IsCustomerByUserIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsCustomerByUserIdReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *IsCustomerByUserIdReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsCustomerByUserIdReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Yes {
		dAtA[i] = 0x10
		i++
		if m.Yes {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GetCustomerOrientUsersReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCustomerOrientUsersReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *GetCustomerOrientUsersReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCustomerOrientUsersReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserIds) > 0 {
		dAtA178 := make([]byte, len(m.UserIds)*10)
		var j177 int
		for _, num1 := range m.UserIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA178[j177] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j177++
			}
			dAtA178[j177] = uint8(num)
			j177++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(j177))
		i += copy(dAtA[i:], dAtA178[:j177])
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	return i, nil
}

func (m *CheckSpecialUserReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckSpecialUserReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *CheckSpecialUserReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckSpecialUserReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsSpecial {
		dAtA[i] = 0x8
		i++
		if m.IsSpecial {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GetForceGroupListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetForceGroupListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetForceGroupListReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetForceGroupListReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GroupIds) > 0 {
		dAtA180 := make([]byte, len(m.GroupIds)*10)
		var j179 int
		for _, num1 := range m.GroupIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA180[j179] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j179++
			}
			dAtA180[j179] = uint8(num)
			j179++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(j179))
		i += copy(dAtA[i:], dAtA180[:j179])
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *GetNotForceGroupListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNotForceGroupListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetNotForceGroupListReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNotForceGroupListReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GroupIds) > 0 {
		dAtA182 := make([]byte, len(m.GroupIds)*10)
		var j181 int
		for _, num1 := range m.GroupIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA182[j181] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j181++
			}
			dAtA182[j181] = uint8(num)
			j181++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(j181))
		i += copy(dAtA[i:], dAtA182[:j181])
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *PassWordRegistryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PassWordRegistryReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.AccessHash))
	}
	if len(m.UserName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.UserName)))
		i += copy(dAtA[i:], m.UserName)
	}
	if len(m.PassWord) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.PassWord)))
		i += copy(dAtA[i:], m.PassWord)
	}
	if len(m.PhoneNumber) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.PhoneNumber)))
		i += copy(dAtA[i:], m.PhoneNumber)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.FirstName) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.FirstName)))
		i += copy(dAtA[i:], m.FirstName)
	}
	if len(m.LastName) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.LastName)))
		i += copy(dAtA[i:], m.LastName)
	}
	if len(m.CountryCode) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.CountryCode)))
		i += copy(dAtA[i:], m.CountryCode)
	}
	if len(m.LocalPhone) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.LocalPhone)))
		i += copy(dAtA[i:], m.LocalPhone)
	}
	return i, nil
}

func (m *PassWordRegistryReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PassWordRegistryReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	if m.User != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.User.Size()))
		n183, err := m.User.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n183
	}
	return i, nil
}

func (m *PassWordLoginReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PassWordLoginReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.UserName)))
		i += copy(dAtA[i:], m.UserName)
	}
	if len(m.PhoneNum) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.PhoneNum)))
		i += copy(dAtA[i:], m.PhoneNum)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	return i, nil
}

func (m *PassWordLoginReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PassWordLoginReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	if m.User != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.User.Size()))
		n184, err := m.User.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n184
	}
	return i, nil
}

func (m *ChangePassWordReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangePassWordReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.NewPassWord) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.NewPassWord)))
		i += copy(dAtA[i:], m.NewPassWord)
	}
	return i, nil
}

func (m *ChangePassWordReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangePassWordReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	if m.User != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.User.Size()))
		n185, err := m.User.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n185
	}
	return i, nil
}

func (m *RegistryUserByUsernameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegistryUserByUsernameReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if len(m.PhoneNumber) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.PhoneNumber)))
		i += copy(dAtA[i:], m.PhoneNumber)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.FirstName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.FirstName)))
		i += copy(dAtA[i:], m.FirstName)
	}
	if len(m.LastName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.LastName)))
		i += copy(dAtA[i:], m.LastName)
	}
	if len(m.CountryCode) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.CountryCode)))
		i += copy(dAtA[i:], m.CountryCode)
	}
	if len(m.LocalPhone) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.LocalPhone)))
		i += copy(dAtA[i:], m.LocalPhone)
	}
	return i, nil
}

func (m *RegistryUserByUsernameReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegistryUserByUsernameReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	if m.User != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.User.Size()))
		n186, err := m.User.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n186
	}
	return i, nil
}

func (m *GetAuthTokenReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuthTokenReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.KeyId))
	}
	return i, nil
}

func (m *GetAuthTokenReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuthTokenReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.UntilDate != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UntilDate))
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *BindUserTokenReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BindUserTokenReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *BindUserTokenReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BindUserTokenReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.KeyId))
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *GetUserByAuthTokenReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserByAuthTokenReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func (m *GetUserByAuthTokenReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserByAuthTokenReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.User != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.User.Size()))
		n187, err := m.User.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n187
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *VerifyAuthTokenReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyAuthTokenReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func (m *VerifyAuthTokenReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyAuthTokenReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *SignUpV1Req) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignUpV1Req) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PhoneNumber) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.PhoneNumber)))
		i += copy(dAtA[i:], m.PhoneNumber)
	}
	if len(m.PhoneCodeHash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.PhoneCodeHash)))
		i += copy(dAtA[i:], m.PhoneCodeHash)
	}
	if len(m.PhoneCode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.PhoneCode)))
		i += copy(dAtA[i:], m.PhoneCode)
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.KeyId))
	}
	if len(m.FirstName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.FirstName)))
		i += copy(dAtA[i:], m.FirstName)
	}
	if m.Sex != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Sex))
	}
	if m.IsBot {
		dAtA[i] = 0x40
		i++
		if m.IsBot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BotInfoVersion != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.BotInfoVersion))
	}
	if m.BotChatHistory {
		dAtA[i] = 0x50
		i++
		if m.BotChatHistory {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BotNoChats {
		dAtA[i] = 0x58
		i++
		if m.BotNoChats {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DcId != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.DcId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n188, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n188
	}
	if len(m.CountryCode) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.CountryCode)))
		i += copy(dAtA[i:], m.CountryCode)
	}
	if len(m.LocalPhone) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.LocalPhone)))
		i += copy(dAtA[i:], m.LocalPhone)
	}
	if m.Birthday != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Birthday))
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.ProxyCode != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ProxyCode))
	}
	return i, nil
}

func (m *SignUpV1Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignUpV1Reply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Code))
	}
	if m.UserInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserInfo.Size()))
		n189, err := m.UserInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n189
	}
	return i, nil
}

func (m *ContactsGetCommonContactsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsGetCommonContactsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserIds) > 0 {
		dAtA191 := make([]byte, len(m.UserIds)*10)
		var j190 int
		for _, num1 := range m.UserIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA191[j190] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j190++
			}
			dAtA191[j190] = uint8(num)
			j190++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(j190))
		i += copy(dAtA[i:], dAtA191[:j190])
	}
	return i, nil
}

func (m *ContactsGetCommonContactsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsGetCommonContactsResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserInfos) > 0 {
		for _, msg := range m.UserInfos {
			dAtA[i] = 0xa
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *SearchUserByNicknameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchUserByNicknameReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Nickname) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if len(m.UserIds) > 0 {
		dAtA193 := make([]byte, len(m.UserIds)*10)
		var j192 int
		for _, num1 := range m.UserIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA193[j192] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j192++
			}
			dAtA193[j192] = uint8(num)
			j192++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(j192))
		i += copy(dAtA[i:], dAtA193[:j192])
	}
	if m.Offset != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Offset))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Limit))
	}
	if m.SelfId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.SelfId))
	}
	return i, nil
}

func (m *SearchUserByNicknameResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchUserByNicknameResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserInfos) > 0 {
		for _, msg := range m.UserInfos {
			dAtA[i] = 0xa
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetUserRoleInfoByIdsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserRoleInfoByIdsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserIds) > 0 {
		dAtA195 := make([]byte, len(m.UserIds)*10)
		var j194 int
		for _, num1 := range m.UserIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA195[j194] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j194++
			}
			dAtA195[j194] = uint8(num)
			j194++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(j194))
		i += copy(dAtA[i:], dAtA195[:j194])
	}
	return i, nil
}

func (m *UserRoleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserRoleInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.AccessHash))
	}
	if len(m.UserName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.UserName)))
		i += copy(dAtA[i:], m.UserName)
	}
	if len(m.NickName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.NickName)))
		i += copy(dAtA[i:], m.NickName)
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if len(m.About) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.About)))
		i += copy(dAtA[i:], m.About)
	}
	if m.IsBot {
		dAtA[i] = 0x38
		i++
		if m.IsBot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Sex != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Sex))
	}
	return i, nil
}

func (m *GetUserRoleInfoByIdsRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserRoleInfoByIdsRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ErrCode))
	}
	if len(m.RoleArr) > 0 {
		for _, msg := range m.RoleArr {
			dAtA[i] = 0x12
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *InnerUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InnerUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.VPhone) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.VPhone)))
		i += copy(dAtA[i:], m.VPhone)
	}
	if len(m.RPhone) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.RPhone)))
		i += copy(dAtA[i:], m.RPhone)
	}
	if len(m.Remark) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Remark)))
		i += copy(dAtA[i:], m.Remark)
	}
	if len(m.Passwd) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Passwd)))
		i += copy(dAtA[i:], m.Passwd)
	}
	if m.Status != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Status))
	}
	if m.EnabledBy != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.EnabledBy))
	}
	if len(m.EnabledAt) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.EnabledAt)))
		i += copy(dAtA[i:], m.EnabledAt)
	}
	return i, nil
}

func (m *InnerUserOpReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InnerUserOpReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OpType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.OpType))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.FromId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.VPhone) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.VPhone)))
		i += copy(dAtA[i:], m.VPhone)
	}
	if len(m.RPhone) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.RPhone)))
		i += copy(dAtA[i:], m.RPhone)
	}
	if len(m.Remark) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Remark)))
		i += copy(dAtA[i:], m.Remark)
	}
	return i, nil
}

func (m *InnerUserOpRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InnerUserOpRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ResCode))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.UserArr) > 0 {
		for _, msg := range m.UserArr {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BindRealPhoneReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BindRealPhoneReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.RPhone) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.RPhone)))
		i += copy(dAtA[i:], m.RPhone)
	}
	return i, nil
}

func (m *BindRealPhoneRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BindRealPhoneRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ResCode))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *GetUserRelationWithIdsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserRelationWithIdsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.FromId))
	}
	if len(m.WithIds) > 0 {
		dAtA197 := make([]byte, len(m.WithIds)*10)
		var j196 int
		for _, num1 := range m.WithIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA197[j196] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j196++
			}
			dAtA197[j196] = uint8(num)
			j196++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(j196))
		i += copy(dAtA[i:], dAtA197[:j196])
	}
	return i, nil
}

func (m *Relation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Relation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.User != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.User))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *GetUserRelationWithIdsRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserRelationWithIdsRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ResCode))
	}
	if len(m.Relations) > 0 {
		for _, msg := range m.Relations {
			dAtA[i] = 0x12
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateUserVerifiedReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserVerifiedReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Verified {
		dAtA[i] = 0x10
		i++
		if m.Verified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Debug.Size()))
		n198, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n198
	}
	return i, nil
}

func (m *UpdateUserVerifiedResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserVerifiedResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uinfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Uinfo.Size()))
		n199, err := m.Uinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n199
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *AddPhoneBookContactsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddPhoneBookContactsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.LocalPhone) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.LocalPhone)))
		i += copy(dAtA[i:], m.LocalPhone)
	}
	return i, nil
}

func (m *Contact) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Contact) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.FirstName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.FirstName)))
		i += copy(dAtA[i:], m.FirstName)
	}
	if len(m.LastName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.LastName)))
		i += copy(dAtA[i:], m.LastName)
	}
	return i, nil
}

func (m *AddPhoneBookContactsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddPhoneBookContactsReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Contacts) > 0 {
		for _, msg := range m.Contacts {
			dAtA[i] = 0xa
			i++
			i = encodeVarintImuinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *InviteCodeBindReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InviteCodeBindReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.InviteBy != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.InviteBy))
	}
	return i, nil
}

func (m *InviteCodeBindRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InviteCodeBindRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *MyTeamReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MyTeamReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Offset))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Limit))
	}
	return i, nil
}

func (m *MyTeamRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MyTeamRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		dAtA201 := make([]byte, len(m.Users)*10)
		var j200 int
		for _, num1 := range m.Users {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA201[j200] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j200++
			}
			dAtA201[j200] = uint8(num)
			j200++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(j200))
		i += copy(dAtA[i:], dAtA201[:j200])
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *RealNameCertificationReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RealNameCertificationReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.IdentityNumber) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.IdentityNumber)))
		i += copy(dAtA[i:], m.IdentityNumber)
	}
	if len(m.FrontImage) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.FrontImage)))
		i += copy(dAtA[i:], m.FrontImage)
	}
	if len(m.ReverseImage) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.ReverseImage)))
		i += copy(dAtA[i:], m.ReverseImage)
	}
	return i, nil
}

func (m *RealNameCertificationRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RealNameCertificationRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetCertificationResultReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCertificationResultReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *CertificationResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CertificationResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.IdentityNumber) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.IdentityNumber)))
		i += copy(dAtA[i:], m.IdentityNumber)
	}
	if len(m.FrontImage) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.FrontImage)))
		i += copy(dAtA[i:], m.FrontImage)
	}
	if len(m.ReverseImage) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.ReverseImage)))
		i += copy(dAtA[i:], m.ReverseImage)
	}
	if m.Status != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Status))
	}
	if m.ReasonCode != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ReasonCode))
	}
	return i, nil
}

func (m *GetCertificationResultRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCertificationResultRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	if m.Result != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Result.Size()))
		n202, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n202
	}
	return i, nil
}

func (m *VerifyCertificationReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyCertificationReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Status != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Status))
	}
	if m.ReasonCode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.ReasonCode))
	}
	return i, nil
}

func (m *VerifyCertificationRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyCertificationRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *UpdateUserDetailV1Req) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserDetailV1Req) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Sex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Sex))
	}
	if m.Birthday != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Birthday))
	}
	if len(m.Extend) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(len(m.Extend)))
		i += copy(dAtA[i:], m.Extend)
	}
	return i, nil
}

func (m *UpdateUserDetailV1Rsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserDetailV1Rsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImuinfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func encodeFixed64Imuinfoserver(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Imuinfoserver(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintImuinfoserver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetUserInfoByIdReq) Size() (n int) {
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.SelfId))
	}
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *GetUserInfoByIdArrReq) Size() (n int) {
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.SelfId))
	}
	if len(m.UserIds) > 0 {
		l = 0
		for _, e := range m.UserIds {
			l += sovImuinfoserver(uint64(e))
		}
		n += 1 + sovImuinfoserver(uint64(l)) + l
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *UserInfoArray) Size() (n int) {
	var l int
	_ = l
	if len(m.Userin) > 0 {
		for _, e := range m.Userin {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	return n
}

func (m *UserInfo) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImuinfoserver(uint64(m.AccessHash))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Status))
	}
	if m.LastLogout != 0 {
		n += 1 + sovImuinfoserver(uint64(m.LastLogout))
	}
	if m.ClusterRegion != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ClusterRegion))
	}
	l = len(m.FontRgb)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.BotInfoVersion != 0 {
		n += 1 + sovImuinfoserver(uint64(m.BotInfoVersion))
	}
	l = len(m.BotInlinePlaceholder)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.RestrictionReason)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.LangCode)
	if l > 0 {
		n += 2 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.LocalPhone)
	if l > 0 {
		n += 2 + l + sovImuinfoserver(uint64(l))
	}
	if m.Deleted {
		n += 3
	}
	if m.Bot {
		n += 3
	}
	if m.BotChatHistory {
		n += 3
	}
	if m.BotNochats {
		n += 3
	}
	if m.Verified {
		n += 3
	}
	if m.Restricted {
		n += 3
	}
	if m.Min {
		n += 3
	}
	if m.BotInlineGeo {
		n += 3
	}
	if m.Self {
		n += 3
	}
	if m.Contact {
		n += 3
	}
	if m.MutalContact {
		n += 3
	}
	if m.StarMark {
		n += 3
	}
	if m.ShowContactPhone {
		n += 3
	}
	if m.GroupId != 0 {
		n += 2 + sovImuinfoserver(uint64(m.GroupId))
	}
	if m.Created != 0 {
		n += 2 + sovImuinfoserver(uint64(m.Created))
	}
	if m.UserType != 0 {
		n += 2 + sovImuinfoserver(uint64(m.UserType))
	}
	if m.UserLable != 0 {
		n += 2 + sovImuinfoserver(uint64(m.UserLable))
	}
	if m.UserLevel != 0 {
		n += 2 + sovImuinfoserver(uint64(m.UserLevel))
	}
	l = len(m.About)
	if l > 0 {
		n += 2 + l + sovImuinfoserver(uint64(l))
	}
	if m.Birthday != 0 {
		n += 2 + sovImuinfoserver(uint64(m.Birthday))
	}
	if m.Sex != 0 {
		n += 2 + sovImuinfoserver(uint64(m.Sex))
	}
	if m.Flags != 0 {
		n += 2 + sovImuinfoserver(uint64(m.Flags))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 2 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.Extend)
	if l > 0 {
		n += 2 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *GetUserExpireByIdReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *GetUserExpireByIdResult) Size() (n int) {
	var l int
	_ = l
	if m.Expire != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Expire))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetUserByphone) Size() (n int) {
	var l int
	_ = l
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *GetUserInfoResult) Size() (n int) {
	var l int
	_ = l
	if m.Uinfo != nil {
		l = m.Uinfo.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetUserInfoByIdArrResult) Size() (n int) {
	var l int
	_ = l
	if len(m.Uinfo) > 0 {
		for _, e := range m.Uinfo {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetUserByUsername) Size() (n int) {
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.SelfId))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *UpdatePhotoInfoReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.KeyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.KeyId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *GetPhotoInfoReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *UpdateUserPhotoResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetUserPhotoResult) Size() (n int) {
	var l int
	_ = l
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *UpdateUserProfileReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.Flags != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Flags))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *UpdateUserFullReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.KeyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.KeyId))
	}
	if m.Flags != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Flags))
	}
	if m.Sex != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Sex))
	}
	if m.Age != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Age))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.Extened)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *UpdateUserFullResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *UpdateUserProfileResult) Size() (n int) {
	var l int
	_ = l
	if m.Uinfo != nil {
		l = m.Uinfo.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *StatusReq) Size() (n int) {
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.SelfId))
	}
	if m.KeyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.KeyId))
	}
	if m.Status {
		n += 2
	}
	if m.Offline != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Offline))
	}
	if m.Longitude != 0 {
		n += 9
	}
	if m.Latitude != 0 {
		n += 9
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *StatusResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *UpdateExpireReq) Size() (n int) {
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.SelfId))
	}
	if m.Expire != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Expire))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *UpdateExpireResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *UserClusterChange) Size() (n int) {
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.SelfId))
	}
	if m.ClusterId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ClusterId))
	}
	l = len(m.FromIp)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.FromId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.FromId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *UserClusterChangeResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *UpdateuserNameReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.KeyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.KeyId))
	}
	return n
}

func (m *UpdateuserNameResult) Size() (n int) {
	var l int
	_ = l
	if m.Uinfo != nil {
		l = m.Uinfo.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *UpdateUserLevelReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.KeyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.KeyId))
	}
	if m.Levl != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Levl))
	}
	return n
}

func (m *UpdateUserLevelResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *UpdateUserExtionReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.KeyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.KeyId))
	}
	l = len(m.Extionsion)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *UpdateUserExtionResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *CheckPhoneRegisterReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *CheckPhoneRegisterResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *DeleteAccountByIdReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.DelId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.DelId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *DelAccountResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *BotUpdateInfo) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.BotInfoVersion != 0 {
		n += 1 + sovImuinfoserver(uint64(m.BotInfoVersion))
	}
	if m.BotChatHistory {
		n += 2
	}
	if m.BotNoChat {
		n += 2
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *BotUpdateInfoResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *DelContactReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.ContactId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ContactId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImuinfoserver(uint64(m.AccessHash))
	}
	if m.KeyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.KeyId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *DelContactResult) Size() (n int) {
	var l int
	_ = l
	if m.Uinfo != nil {
		l = m.Uinfo.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *AcceptContactReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.ApplyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ApplyId))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.GroupId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.GroupId))
	}
	return n
}

func (m *AcceptContactResult) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.FromId))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *ContactIdHash) Size() (n int) {
	var l int
	_ = l
	if m.ContactId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ContactId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImuinfoserver(uint64(m.AccessHash))
	}
	return n
}

func (m *DelContactArrReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if len(m.ContactidArr) > 0 {
		for _, e := range m.ContactidArr {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	if m.KeyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.KeyId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *CmdResetUserContactsReq) Size() (n int) {
	var l int
	_ = l
	if m.AmdinId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.AmdinId))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *CmdResetUserContactsResult) Size() (n int) {
	var l int
	_ = l
	if len(m.CurrentContactIds) > 0 {
		l = 0
		for _, e := range m.CurrentContactIds {
			l += sovImuinfoserver(uint64(e))
		}
		n += 1 + sovImuinfoserver(uint64(l)) + l
	}
	return n
}

func (m *DelContactArrResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *ContatsGetContactsReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.KeyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.KeyId))
	}
	l = len(m.Contacthash)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *ContactInfo) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.ContactId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ContactId))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.IsSelfContacted {
		n += 2
	}
	if m.SelfIsContacted {
		n += 2
	}
	if m.StarMark {
		n += 2
	}
	if m.HasPhone {
		n += 2
	}
	if m.GroupId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.GroupId))
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *ContatsGetContactsResult) Size() (n int) {
	var l int
	_ = l
	if len(m.ContactArr) > 0 {
		for _, e := range m.ContactArr {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	if len(m.UserInfoArr) > 0 {
		for _, e := range m.UserInfoArr {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *ContactsGetContactsV1Req) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.KeyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.KeyId))
	}
	if m.Hash != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Hash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *ContactsGetContactsV1Result) Size() (n int) {
	var l int
	_ = l
	if len(m.ContactArr) > 0 {
		for _, e := range m.ContactArr {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	if len(m.UserInfoArr) > 0 {
		for _, e := range m.UserInfoArr {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	if len(m.GroupOrderArr) > 0 {
		for _, e := range m.GroupOrderArr {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	if m.SavedCount != 0 {
		n += 1 + sovImuinfoserver(uint64(m.SavedCount))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *ContactsGetContactsIdReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.KeyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.KeyId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *ContactsGetContactsIdResult) Size() (n int) {
	var l int
	_ = l
	if len(m.ContactsId) > 0 {
		l = 0
		for _, e := range m.ContactsId {
			l += sovImuinfoserver(uint64(e))
		}
		n += 1 + sovImuinfoserver(uint64(l)) + l
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *PhoneBookContact) Size() (n int) {
	var l int
	_ = l
	if m.ClientId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ClientId))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *ContactsImportPhoneContactsReq) Size() (n int) {
	var l int
	_ = l
	if m.KeyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if len(m.PhoneContactArr) > 0 {
		for _, e := range m.PhoneContactArr {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *ImportContact) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.ClientId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ClientId))
	}
	return n
}

func (m *PopularContact) Size() (n int) {
	var l int
	_ = l
	if m.ClientId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ClientId))
	}
	if m.Importers != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Importers))
	}
	return n
}

func (m *ContactsImportPhoneContactsResult) Size() (n int) {
	var l int
	_ = l
	if len(m.ImContactDetail) > 0 {
		for _, e := range m.ImContactDetail {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	if len(m.UserInfoArr) > 0 {
		for _, e := range m.UserInfoArr {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	if len(m.PopuContact) > 0 {
		for _, e := range m.PopuContact {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *AddRelationIdInfo) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.RelationId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.RelationId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *DelRelationIdInfo) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.RelationId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.RelationId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *AddRelationIdInfoResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *DelRelationIdInfoResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *BlockeduserReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.BlockedId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.BlockedId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImuinfoserver(uint64(m.AccessHash))
	}
	if m.KeyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.KeyId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *BlockeduserResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *ContactUnblockedReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.BlockedId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.BlockedId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImuinfoserver(uint64(m.AccessHash))
	}
	if m.KeyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.KeyId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *ContactsGetBlockedReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *Blockeduser) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.Date != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Date))
	}
	return n
}

func (m *ContactsGetBlockedResult) Size() (n int) {
	var l int
	_ = l
	if len(m.Blockeduser) > 0 {
		l = 0
		for _, e := range m.Blockeduser {
			l += sovImuinfoserver(uint64(e))
		}
		n += 1 + sovImuinfoserver(uint64(l)) + l
	}
	if len(m.InfoArr) > 0 {
		for _, e := range m.InfoArr {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *SystemWhiteUser) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.Level != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Level))
	}
	if m.Proby != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Proby))
	}
	if m.IsWhite {
		n += 2
	}
	return n
}

func (m *StoreSysWhiteUserReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.Level != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Level))
	}
	if m.Proby != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Proby))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *StoreSysWhiteUserResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *UpdateSystemWhiteUserLevelReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.Level != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Level))
	}
	if m.Proby != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Proby))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *UpdateSystemWhiteUserLevelResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetSysWhiteUserReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *GetSysWhiteUserResult) Size() (n int) {
	var l int
	_ = l
	if m.SysWhiteInfo != nil {
		l = m.SysWhiteInfo.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetSysWhiteUserArrReq) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *GetSysWhiteUserArrResult) Size() (n int) {
	var l int
	_ = l
	if len(m.SysWhiteInfoArr) > 0 {
		for _, e := range m.SysWhiteInfoArr {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *DelSysWhiteUserReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.ProUser != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ProUser))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *DelSysWhiteUserResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *UserDc) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.DcId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.DcId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *GetAllDcReq) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *SetPrivacyReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.PrivacyType != 0 {
		n += 1 + sovImuinfoserver(uint64(m.PrivacyType))
	}
	if m.Range != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Range))
	}
	if len(m.AlwaysDisallow) > 0 {
		l = 0
		for _, e := range m.AlwaysDisallow {
			l += sovImuinfoserver(uint64(e))
		}
		n += 1 + sovImuinfoserver(uint64(l)) + l
	}
	if len(m.AlwaysAllow) > 0 {
		l = 0
		for _, e := range m.AlwaysAllow {
			l += sovImuinfoserver(uint64(e))
		}
		n += 1 + sovImuinfoserver(uint64(l)) + l
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.KeyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.KeyId))
	}
	if m.SessionId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.SessionId))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *SetPrivacyResult) Size() (n int) {
	var l int
	_ = l
	if len(m.UinfoArr) > 0 {
		for _, e := range m.UinfoArr {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetPrivacyReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.PrivacyType != 0 {
		n += 1 + sovImuinfoserver(uint64(m.PrivacyType))
	}
	if m.KeyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.KeyId))
	}
	if m.SessionId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.SessionId))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *CheckPrivacyReq) Size() (n int) {
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.SelfId))
	}
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.PrivacyType != 0 {
		n += 1 + sovImuinfoserver(uint64(m.PrivacyType))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *CheckPrivacyResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetPrivacyResult) Size() (n int) {
	var l int
	_ = l
	if m.Range != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Range))
	}
	if len(m.AlwaysDisallow) > 0 {
		l = 0
		for _, e := range m.AlwaysDisallow {
			l += sovImuinfoserver(uint64(e))
		}
		n += 1 + sovImuinfoserver(uint64(l)) + l
	}
	if len(m.AlwaysAllow) > 0 {
		l = 0
		for _, e := range m.AlwaysAllow {
			l += sovImuinfoserver(uint64(e))
		}
		n += 1 + sovImuinfoserver(uint64(l)) + l
	}
	if len(m.UserInfos) > 0 {
		for _, e := range m.UserInfos {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *StoreShopStickerSetReq) Size() (n int) {
	var l int
	_ = l
	if m.AccessHash != 0 {
		n += 1 + sovImuinfoserver(uint64(m.AccessHash))
	}
	if m.Free {
		n += 2
	}
	if m.Official {
		n += 2
	}
	if m.Masks {
		n += 2
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.ShortName)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Count))
	}
	if m.Hash != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Hash))
	}
	l = len(m.Emoticon)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if len(m.Documents) > 0 {
		l = 0
		for _, e := range m.Documents {
			l += sovImuinfoserver(uint64(e))
		}
		n += 1 + sovImuinfoserver(uint64(l)) + l
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	return n
}

func (m *StoreShopStickerSetResult) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Id))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *StoreShopStickerSetDocumentsReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Id))
	}
	if len(m.Documents) > 0 {
		l = 0
		for _, e := range m.Documents {
			l += sovImuinfoserver(uint64(e))
		}
		n += 1 + sovImuinfoserver(uint64(l)) + l
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *StoreShopStickerSetDocumentsResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *DeleteStickerSetReq) Size() (n int) {
	var l int
	_ = l
	if m.StickerId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.StickerId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	return n
}

func (m *DeleteStickerSetResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *StickerSetInfo) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Id))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImuinfoserver(uint64(m.AccessHash))
	}
	if m.Free {
		n += 2
	}
	if m.Official {
		n += 2
	}
	if m.Masks {
		n += 2
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.ShortName)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Count))
	}
	if m.Hash != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Hash))
	}
	l = len(m.Emoticon)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if len(m.Documents) > 0 {
		l = 0
		for _, e := range m.Documents {
			l += sovImuinfoserver(uint64(e))
		}
		n += 1 + sovImuinfoserver(uint64(l)) + l
	}
	return n
}

func (m *GetStickerSetInfoReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Id))
	}
	l = len(m.ShortName)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.IsId {
		n += 2
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *GetStickerSetInfoResult) Size() (n int) {
	var l int
	_ = l
	if m.StickerSetInfo != nil {
		l = m.StickerSetInfo.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *StickerPackDocumentBase) Size() (n int) {
	var l int
	_ = l
	if m.AttributesStikerSetId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.AttributesStikerSetId))
	}
	if m.DocumentId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.DocumentId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImuinfoserver(uint64(m.AccessHash))
	}
	l = len(m.MimeType)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Size_))
	}
	l = len(m.Thumb)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.DcId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.DcId))
	}
	if m.Date != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Date))
	}
	if m.AttributesImageSizeW != 0 {
		n += 1 + sovImuinfoserver(uint64(m.AttributesImageSizeW))
	}
	if m.AttributesImageSizeH != 0 {
		n += 1 + sovImuinfoserver(uint64(m.AttributesImageSizeH))
	}
	l = len(m.AttributesStikerAlt)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.AttributesStikerSetAccessHash != 0 {
		n += 1 + sovImuinfoserver(uint64(m.AttributesStikerSetAccessHash))
	}
	l = len(m.AttributesFileName)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *StickerPackDocumentInfo) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Id))
	}
	if m.InfoBase != nil {
		l = m.InfoBase.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *StoreStickerPackDcReq) Size() (n int) {
	var l int
	_ = l
	if m.Stickpackbase != nil {
		l = m.Stickpackbase.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *StoreStickerPackDcResult) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Id))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *StoreStickerPackDcArrReq) Size() (n int) {
	var l int
	_ = l
	if len(m.StPDB) > 0 {
		for _, e := range m.StPDB {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *StoreStickerPackDcArrResult) Size() (n int) {
	var l int
	_ = l
	if len(m.IdArr) > 0 {
		l = 0
		for _, e := range m.IdArr {
			l += sovImuinfoserver(uint64(e))
		}
		n += 1 + sovImuinfoserver(uint64(l)) + l
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetStickerSetPackDcInfosReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Id))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *GetStickerSetPackDcInfosResult) Size() (n int) {
	var l int
	_ = l
	if len(m.StPDcInfo) > 0 {
		for _, e := range m.StPDcInfo {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	return n
}

func (m *AddOrDeleteFaveSticerReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.StickerId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.StickerId))
	}
	if m.Unfave {
		n += 2
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *AddOrDeleteFaveSticerResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *GetFavedStickersReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.Hash != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Hash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *GetFavedStickersResult) Size() (n int) {
	var l int
	_ = l
	if m.Hash != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Hash))
	}
	if len(m.Packs) > 0 {
		for _, e := range m.Packs {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	if len(m.Stickers) > 0 {
		for _, e := range m.Stickers {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *StickerPack) Size() (n int) {
	var l int
	_ = l
	l = len(m.Emoticon)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.DocumentId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.DocumentId))
	}
	return n
}

func (m *StoreUserStickerSetReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.StickersetId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.StickersetId))
	}
	if m.Installed {
		n += 2
	}
	if m.Disabled {
		n += 2
	}
	if m.Order != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Order))
	}
	if m.Archived {
		n += 2
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *StoreUserStickerSetResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *UpdateUserStickerSetDisabledReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.StickersetId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.StickersetId))
	}
	if m.Disabled {
		n += 2
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *UpdateUserStickerSetDisabledResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *UpdateUserStickerSetOrderReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.StickersetId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.StickersetId))
	}
	if m.Order != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Order))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *UpdateUserStickerSetOrderResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *UpdateUserStickerSetInstallArReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.StickersetId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.StickersetId))
	}
	if m.Archived {
		n += 2
	}
	if m.Installed {
		n += 2
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *UpdateUserStickerSetInstallArResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *DeleteuserStickerReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.StickersetId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.StickersetId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *DeleteuserStickerResult) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.StickersetId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.StickersetId))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *UserStickerInfo) Size() (n int) {
	var l int
	_ = l
	if m.StickersetId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.StickersetId))
	}
	if m.Installed {
		n += 2
	}
	if m.Disabled {
		n += 2
	}
	if m.Order != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Order))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImuinfoserver(uint64(m.AccessHash))
	}
	if m.Free {
		n += 2
	}
	if m.Official {
		n += 2
	}
	if m.Archived {
		n += 2
	}
	if m.Masks {
		n += 2
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.ShortName)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Count))
	}
	if m.Hash != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Hash))
	}
	l = len(m.Emotico)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if len(m.Documents) > 0 {
		l = 0
		for _, e := range m.Documents {
			l += sovImuinfoserver(uint64(e))
		}
		n += 1 + sovImuinfoserver(uint64(l)) + l
	}
	return n
}

func (m *UserStickerInfoArr) Size() (n int) {
	var l int
	_ = l
	if len(m.StickerInfo) > 0 {
		for _, e := range m.StickerInfo {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	return n
}

func (m *StickerSetInfoArr) Size() (n int) {
	var l int
	_ = l
	if len(m.StickerInfo) > 0 {
		for _, e := range m.StickerInfo {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	return n
}

func (m *GetuserAllStickersReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *GetuserAllStickersResult) Size() (n int) {
	var l int
	_ = l
	if len(m.StickerInfoArr) > 0 {
		for _, e := range m.StickerInfoArr {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetAllStickerSetsReq) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *GetAllStickerSetsResult) Size() (n int) {
	var l int
	_ = l
	if len(m.StickerInfoArr) > 0 {
		for _, e := range m.StickerInfoArr {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *DeleteStickerPackDocumentReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Id))
	}
	if m.StickersetId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.StickersetId))
	}
	return n
}

func (m *DeleteStickerPackDocumentResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetAuthorStickerSetReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.SetId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.SetId))
	}
	return n
}

func (m *GetAuthorStickerSetResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ErrorCode))
	}
	if m.Set != nil {
		l = m.Set.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *GetAuthorAllStickerSetReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	return n
}

func (m *GetAuthorAllStickerSetResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ErrorCode))
	}
	if len(m.Sets) > 0 {
		for _, e := range m.Sets {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	return n
}

func (m *AuthorStickerSet) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.StickersetId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.StickersetId))
	}
	l = len(m.ShortName)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Archived {
		n += 2
	}
	if m.Installed {
		n += 2
	}
	if m.Disabled {
		n += 2
	}
	if m.Ordered != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Ordered))
	}
	if m.Created != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Created))
	}
	if m.Updated != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Updated))
	}
	return n
}

func (m *CountAuthorAllStickerSetReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	return n
}

func (m *CountAuthorAllStickerSetResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ErrorCode))
	}
	if m.Count != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Count))
	}
	return n
}

func (m *UserGifInfoArr) Size() (n int) {
	var l int
	_ = l
	if len(m.GifArr) > 0 {
		for _, e := range m.GifArr {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	return n
}

func (m *UserSaveGifInfo) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	l = len(m.GifId)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Fid != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Fid))
	}
	if m.GitHash != 0 {
		n += 1 + sovImuinfoserver(uint64(m.GitHash))
	}
	return n
}

func (m *SaveUserGifReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	l = len(m.GifId)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Fid != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Fid))
	}
	if m.GitHash != 0 {
		n += 1 + sovImuinfoserver(uint64(m.GitHash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *SaveUserGifResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *DelUserGifReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.Fid != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Fid))
	}
	if m.GitHash != 0 {
		n += 1 + sovImuinfoserver(uint64(m.GitHash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *DelUserGifResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetUserGifsReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.Hash != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Hash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *GetUserGifsResult) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.Hash != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Hash))
	}
	if len(m.GifArr) > 0 {
		for _, e := range m.GifArr {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *CheckUserIsBlockedReq) Size() (n int) {
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.SelfId))
	}
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *CheckUserIsBlockedResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *RegisterUserInfo) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImuinfoserver(uint64(m.AccessHash))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.LocalPhone)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.IsBot {
		n += 2
	}
	if m.BotInfoVersion != 0 {
		n += 1 + sovImuinfoserver(uint64(m.BotInfoVersion))
	}
	if m.BotChatHistory {
		n += 2
	}
	if m.BotNoChats {
		n += 2
	}
	if m.Sex != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Sex))
	}
	if m.Birthday != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Birthday))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *UpdateUserInfoResult) Size() (n int) {
	var l int
	_ = l
	if m.Uinfo != nil {
		l = m.Uinfo.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ErrorCode))
	}
	if m.Result {
		n += 2
	}
	return n
}

func (m *CheckUserAccessHashValidReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImuinfoserver(uint64(m.AccessHash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *CheckUserAccessHashValidResult) Size() (n int) {
	var l int
	_ = l
	if m.IsValid {
		n += 2
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *RegisterUserInfoReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImuinfoserver(uint64(m.AccessHash))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.IsBot {
		n += 2
	}
	if m.BotInfoVersion != 0 {
		n += 1 + sovImuinfoserver(uint64(m.BotInfoVersion))
	}
	if m.BotChatHistory {
		n += 2
	}
	if m.BotNoChats {
		n += 2
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.LocalPhone)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Dc != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Dc))
	}
	if m.GroupNow != 0 {
		n += 1 + sovImuinfoserver(uint64(m.GroupNow))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Sex != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Sex))
	}
	if m.Birthday != 0 {
		n += 2 + sovImuinfoserver(uint64(m.Birthday))
	}
	return n
}

func (m *RegisterUserInfoResult) Size() (n int) {
	var l int
	_ = l
	if m.Uinfo != nil {
		l = m.Uinfo.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetNotifySettingsReq) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.FromId))
	}
	if m.ReqType != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ReqType))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *GetNotifySettingsResult) Size() (n int) {
	var l int
	_ = l
	if m.ShowPreviews {
		n += 2
	}
	if m.Silent {
		n += 2
	}
	if m.MuteUntil != 0 {
		n += 1 + sovImuinfoserver(uint64(m.MuteUntil))
	}
	l = len(m.Sound)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *UpdateNotifySettingsReq) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.FromId))
	}
	if m.ReqType != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ReqType))
	}
	if m.ShowPreviews {
		n += 2
	}
	if m.Silent {
		n += 2
	}
	if m.MuteUntil != 0 {
		n += 1 + sovImuinfoserver(uint64(m.MuteUntil))
	}
	l = len(m.Sound)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *UpdateNotifySettingsResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetContactsStatusReq) Size() (n int) {
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.SelfId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *UserStaus) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.Status != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Status))
	}
	if m.OfflineTime != 0 {
		n += 1 + sovImuinfoserver(uint64(m.OfflineTime))
	}
	return n
}

func (m *GetContactsStatusResult) Size() (n int) {
	var l int
	_ = l
	if len(m.ContactStatusArr) > 0 {
		for _, e := range m.ContactStatusArr {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *UpdateBotPicRequest) Size() (n int) {
	var l int
	_ = l
	if m.BotId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.BotId))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *UpdateBotPicResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetAllProxyConfigReq) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *ProxyAddr) Size() (n int) {
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.InnerIp)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Port))
	}
	return n
}

func (m *GetAllProxyConfigResult) Size() (n int) {
	var l int
	_ = l
	if len(m.Addrs) > 0 {
		for _, e := range m.Addrs {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *CheckUserNameOccupiedReq) Size() (n int) {
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Userid))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *CheckUserNameOccupiedResult) Size() (n int) {
	var l int
	_ = l
	if m.Occpuy {
		n += 2
	}
	return n
}

func (m *GetUserGpsReq) Size() (n int) {
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Userid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *GetUserGpsResult) Size() (n int) {
	var l int
	_ = l
	if m.Latitude != 0 {
		n += 9
	}
	if m.Longitude != 0 {
		n += 9
	}
	l = len(m.DeviceModule)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Timestamp))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *CheckSelfIsContactReq) Size() (n int) {
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.SelfId))
	}
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *CheckSelfIsContactResult) Size() (n int) {
	var l int
	_ = l
	if m.SelfIsContact {
		n += 2
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *UpdateSwitchReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.Switch != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Switch))
	}
	if m.OnOff {
		n += 2
	}
	return n
}

func (m *UpdateSwitchResult) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Code))
	}
	return n
}

func (m *GetSwitchStatusReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.Switch != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Switch))
	}
	return n
}

func (m *GetSwitchStatusResult) Size() (n int) {
	var l int
	_ = l
	if m.OnOff {
		n += 2
	}
	if m.Code != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Code))
	}
	return n
}

func (m *GetViplogPhoneListReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetViplogPhoneListResp) Size() (n int) {
	var l int
	_ = l
	if len(m.Phones) > 0 {
		for _, s := range m.Phones {
			l = len(s)
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	return n
}

func (m *UpdateUserHasPayReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.KeyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.KeyId))
	}
	if m.HasCreate {
		n += 2
	}
	return n
}

func (m *UpdateUserHasPayResp) Size() (n int) {
	var l int
	_ = l
	if m.Sucess {
		n += 2
	}
	return n
}

func (m *CheckUserHasPayReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	return n
}

func (m *CheckUserHasPayResp) Size() (n int) {
	var l int
	_ = l
	if m.Has {
		n += 2
	}
	return n
}

func (m *UpdateUserDetailReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.Flags != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Flags))
	}
	if m.Sex != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Sex))
	}
	if m.Age != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Age))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.Extend)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *UpdateUserDetailResult) Size() (n int) {
	var l int
	_ = l
	if m.Sucessful {
		n += 2
	}
	return n
}

func (m *UpdateUserDetailBirthdayReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.Flags != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Flags))
	}
	if m.Birthday != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Birthday))
	}
	l = len(m.Extend)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *UpdateUserDetailBirthdayResult) Size() (n int) {
	var l int
	_ = l
	if m.Successful {
		n += 2
	}
	return n
}

func (m *SetUserDetailReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.Flags != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Flags))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Sex != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Sex))
	}
	if m.Birthday != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Birthday))
	}
	l = len(m.Extend)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *SetUserDetailResult) Size() (n int) {
	var l int
	_ = l
	if m.Successful {
		n += 2
	}
	return n
}

func (m *DeleteReceiveAppliesReq) Size() (n int) {
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.SelfId))
	}
	if len(m.UserIdArr) > 0 {
		l = 0
		for _, e := range m.UserIdArr {
			l += sovImuinfoserver(uint64(e))
		}
		n += 1 + sovImuinfoserver(uint64(l)) + l
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *DeleteReceiveAppliesResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *UpdateUserTypeLableReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.UserType != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserType))
	}
	if m.UserLable != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserLable))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *UpdateUserTypeLableResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *CheckSearchUserCountLimitedReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *CheckSearchUserCountLimitedResult) Size() (n int) {
	var l int
	_ = l
	if m.IsLimited {
		n += 2
	}
	if m.TimeLeft != 0 {
		n += 1 + sovImuinfoserver(uint64(m.TimeLeft))
	}
	return n
}

func (m *CheckIsMutualContactReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.ContactId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ContactId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *CheckIsMutualContactResult) Size() (n int) {
	var l int
	_ = l
	if m.IsMutualContact {
		n += 2
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *ChangeGroupNameReq) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.GroupId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *ChangeGroupNameResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetContactsV1Req) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.KeyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.KeyId))
	}
	if m.Hash != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Hash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *GetContactsV1Result) Size() (n int) {
	var l int
	_ = l
	if len(m.ContactArr) > 0 {
		for _, e := range m.ContactArr {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	if len(m.UserInfoArr) > 0 {
		for _, e := range m.UserInfoArr {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	if len(m.GroupOrderArr) > 0 {
		for _, e := range m.GroupOrderArr {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	if m.SavedCount != 0 {
		n += 1 + sovImuinfoserver(uint64(m.SavedCount))
	}
	if m.Hash != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Hash))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *SearchPrettyNumberReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.MatchNumber)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *SearchPrettyNumberRsp) Size() (n int) {
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if len(m.PrettyNumbers) > 0 {
		for _, s := range m.PrettyNumbers {
			l = len(s)
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	return n
}

func (m *ActivePrettyNumberReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.ActivePhone)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.AssginFlags)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Operator != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Operator))
	}
	return n
}

func (m *ActivePrettyNumberRsp) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *GetVirtualBindByPhoneReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.VirtualPhone)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *GetVirtualBindByPhoneRsp) Size() (n int) {
	var l int
	_ = l
	if m.IsVirtualAcct {
		n += 2
	}
	l = len(m.BindRealPhone)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.BindContactId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.BindContactId))
	}
	l = len(m.AssingFlags)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *GetuserAdminInfoReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	return n
}

func (m *GetuserAdminInfoResp) Size() (n int) {
	var l int
	_ = l
	if m.IsAdmin {
		n += 2
	}
	if m.Level != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Level))
	}
	return n
}

func (m *AddUserAdminReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.Operator != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Operator))
	}
	if m.Level != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Level))
	}
	return n
}

func (m *AddUserAdminResp) Size() (n int) {
	var l int
	_ = l
	if m.SUcessful {
		n += 2
	}
	l = len(m.ErrStr)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *BindVitualSendCodeChannelReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.AssigFlag)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.SendId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.SendId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImuinfoserver(uint64(m.AccessHash))
	}
	return n
}

func (m *BindVitualSendCodeChannelResp) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ErrorCode))
	}
	l = len(m.ErrStr)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *GetVitualSendCodeChannelReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *GetVitualSendCodeChannelResp) Size() (n int) {
	var l int
	_ = l
	if m.IsNeedSendChannel {
		n += 2
	}
	if m.SendId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.SendId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImuinfoserver(uint64(m.AccessHash))
	}
	return n
}

func (m *VitualCheckCanAddContactReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.ContactId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ContactId))
	}
	return n
}

func (m *VitualCheckCanAddContactResp) Size() (n int) {
	var l int
	_ = l
	if m.CanAdd {
		n += 2
	}
	return n
}

func (m *CheckIsPhoneVitulaPhoneReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *CheckIsPhoneVitulaPhoneResp) Size() (n int) {
	var l int
	_ = l
	if m.IsVirtal {
		n += 2
	}
	return n
}

func (m *CheckIsVitulaPhoneArrReq) Size() (n int) {
	var l int
	_ = l
	if len(m.UserId) > 0 {
		l = 0
		for _, e := range m.UserId {
			l += sovImuinfoserver(uint64(e))
		}
		n += 1 + sovImuinfoserver(uint64(l)) + l
	}
	return n
}

func (m *CheckIsVitulaPhoneArrResp) Size() (n int) {
	var l int
	_ = l
	if m.IsVitual {
		n += 2
	}
	return n
}

func (m *SignUpVitualReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.PhoneCodeHash)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.PhoneCode)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Sex != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Sex))
	}
	if m.IsBot {
		n += 2
	}
	if m.BotInfoVersion != 0 {
		n += 1 + sovImuinfoserver(uint64(m.BotInfoVersion))
	}
	if m.BotChatHistory {
		n += 2
	}
	if m.BotNoChats {
		n += 2
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.LocalPhone)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Birthday != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Birthday))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.ProxyCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ProxyCode))
	}
	return n
}

func (m *SignUpVitualResp) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Code))
	}
	if m.UserInfo != nil {
		l = m.UserInfo.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *VirtualBindRealPhoneReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.VPhone)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.RPhone)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *VirtualBindRealPhoneRsp) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *VirtualAddContactByPhoneReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.VPhone)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.RPhone)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *VirtualAddContactByPhoneRsp) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *JoinGroupCheckReq) Size() (n int) {
	var l int
	_ = l
	if m.InviterId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.InviterId))
	}
	if len(m.MemberIds) > 0 {
		l = 0
		for _, e := range m.MemberIds {
			l += sovImuinfoserver(uint64(e))
		}
		n += 1 + sovImuinfoserver(uint64(l)) + l
	}
	return n
}

func (m *JoinGroupCheckRsp) Size() (n int) {
	var l int
	_ = l
	if len(m.CanJoinIds) > 0 {
		l = 0
		for _, e := range m.CanJoinIds {
			l += sovImuinfoserver(uint64(e))
		}
		n += 1 + sovImuinfoserver(uint64(l)) + l
	}
	return n
}

func (m *CheckIsVitulaPhoneReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	return n
}

func (m *CheckIsVitulaPhoneResp) Size() (n int) {
	var l int
	_ = l
	if m.IsVitulal {
		n += 2
	}
	return n
}

func (m *VirtulPhoneInfo) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *GetAllVitualUsersByFlagsReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.AssginFlags)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *GetAllVitualUsersByFlagsResp) Size() (n int) {
	var l int
	_ = l
	if m.Sucess {
		n += 2
	}
	if len(m.Infos) > 0 {
		for _, e := range m.Infos {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	return n
}

func (m *GetVitulPhoneNumbersReq) Size() (n int) {
	var l int
	_ = l
	if m.Number != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Number))
	}
	if m.AdminId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.AdminId))
	}
	l = len(m.AssginFlags)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.UtilDate != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UtilDate))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *GetVitulPhoneNumbersResp) Size() (n int) {
	var l int
	_ = l
	if m.ErrCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ErrCode))
	}
	l = len(m.ErrStr)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if len(m.Phonenumbers) > 0 {
		for _, s := range m.Phonenumbers {
			l = len(s)
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	return n
}

func (m *GenVitulaPhoneNumbersReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *GenVitulaPhoneNumbersResp) Size() (n int) {
	var l int
	_ = l
	if m.ErrCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ErrCode))
	}
	l = len(m.ErrStr)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *UserCdnVipInfo) Size() (n int) {
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovImuinfoserver(uint64(m.State))
	}
	if m.Level != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Level))
	}
	if m.BgnTime != 0 {
		n += 1 + sovImuinfoserver(uint64(m.BgnTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovImuinfoserver(uint64(m.EndTime))
	}
	if m.AutoPay {
		n += 2
	}
	return n
}

func (m *UserCdnPayInfo) Size() (n int) {
	var l int
	_ = l
	if m.PayId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.PayId))
	}
	if m.PayAmt != 0 {
		n += 1 + sovImuinfoserver(uint64(m.PayAmt))
	}
	if m.BgnTime != 0 {
		n += 1 + sovImuinfoserver(uint64(m.BgnTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovImuinfoserver(uint64(m.EndTime))
	}
	return n
}

func (m *BuyCdnVipReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.VipLvl != 0 {
		n += 1 + sovImuinfoserver(uint64(m.VipLvl))
	}
	if m.Months != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Months))
	}
	l = len(m.Passwd)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Debugs != nil {
		l = m.Debugs.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *BuyCdnVipRsp) Size() (n int) {
	var l int
	_ = l
	if m.RetCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.RetCode))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.VipInfo != nil {
		l = m.VipInfo.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *SetCdnVipAutoPayReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.IsOpen {
		n += 2
	}
	return n
}

func (m *SetCdnVipAutoPayRsp) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.VipInfo != nil {
		l = m.VipInfo.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *GetUserCdnPayListReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	return n
}

func (m *GetUserCdnPayListRsp) Size() (n int) {
	var l int
	_ = l
	if m.RetCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.RetCode))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.VipInfo != nil {
		l = m.VipInfo.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if len(m.PayList) > 0 {
		for _, e := range m.PayList {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	return n
}

func (m *GetUserCdnVipInfoReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	return n
}

func (m *GetUserCdnVipInfoRsp) Size() (n int) {
	var l int
	_ = l
	if m.RetCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.RetCode))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.VipInfo != nil {
		l = m.VipInfo.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *ChkCdnVipReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	return n
}

func (m *ChkCdnVipRsp) Size() (n int) {
	var l int
	_ = l
	if m.IsVip {
		n += 2
	}
	return n
}

func (m *AddCdnVipReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.VipLvl != 0 {
		n += 1 + sovImuinfoserver(uint64(m.VipLvl))
	}
	if m.Months != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Months))
	}
	return n
}

func (m *AddCdnVipRsp) Size() (n int) {
	var l int
	_ = l
	if m.Sucess {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *CheckIsSelfContactReq) Size() (n int) {
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.SelfId))
	}
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *CheckIsSelfContactResult) Size() (n int) {
	var l int
	_ = l
	if m.IsSelfContact {
		n += 2
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetPhoneBookInfosReq) Size() (n int) {
	var l int
	_ = l
	if m.KeyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if len(m.PhoneContactArr) > 0 {
		for _, e := range m.PhoneContactArr {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	return n
}

func (m *GetPhoneBookInfosResult) Size() (n int) {
	var l int
	_ = l
	if m.ReCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ReCode))
	}
	if len(m.Uinfo) > 0 {
		for _, e := range m.Uinfo {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	return n
}

func (m *AddLoginDayReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	return n
}

func (m *AddLoginDayResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ErrorCode))
	}
	if m.Result {
		n += 2
	}
	return n
}

func (m *CheckDigitalWalletSwitchReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	return n
}

func (m *CheckDigitalWalletSwitchResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ErrorCode))
	}
	if m.Result {
		n += 2
	}
	return n
}

func (m *RecvLockerAddUserIdReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	return n
}

func (m *RecvLockerAddUserIdResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *RecvLockerDelUserIdReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	return n
}

func (m *RecvLockerDelUserIdResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *RecvLockerGetUserIdsReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RecvLockerGetUserIdsResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ErrorCode))
	}
	if len(m.UserId) > 0 {
		l = 0
		for _, e := range m.UserId {
			l += sovImuinfoserver(uint64(e))
		}
		n += 1 + sovImuinfoserver(uint64(l)) + l
	}
	return n
}

func (m *CheckIsMuteContactReq) Size() (n int) {
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.SelfId))
	}
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	return n
}

func (m *CheckIsMuteContactResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ErrorCode))
	}
	if m.Result {
		n += 2
	}
	return n
}

func (m *SetUserUnsubscribeReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.Val != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Val))
	}
	return n
}

func (m *SetUserUnsubscribeResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *GetUserUnsubscribeReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	return n
}

func (m *GetUserUnsubscribeResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ErrorCode))
	}
	if m.Val != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Val))
	}
	return n
}

func (m *GetRelationUsersReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *GetRelationUsersResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ErrorCode))
	}
	if len(m.Infos) > 0 {
		for _, e := range m.Infos {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	return n
}

func (m *GetUserIpByAddrReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.IsSignUp {
		n += 2
	}
	return n
}

func (m *GetUserIpByAddrResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ErrorCode))
	}
	if len(m.UserId) > 0 {
		l = 0
		for _, e := range m.UserId {
			l += sovImuinfoserver(uint64(e))
		}
		n += 1 + sovImuinfoserver(uint64(l)) + l
	}
	return n
}

func (m *UserIpAddr) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Id))
	}
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	l = len(m.IpAddr)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.IpPort != 0 {
		n += 1 + sovImuinfoserver(uint64(m.IpPort))
	}
	if m.LastOnline != 0 {
		n += 1 + sovImuinfoserver(uint64(m.LastOnline))
	}
	if m.IsSignUp {
		n += 2
	}
	return n
}

func (m *GetUserIpByUserIdReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.IsSignUp {
		n += 2
	}
	return n
}

func (m *GetUserIpByUserIdResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ErrorCode))
	}
	if len(m.Addrs) > 0 {
		for _, e := range m.Addrs {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	return n
}

func (m *UserIpAddOrUpdateReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.IsSignUp {
		n += 2
	}
	return n
}

func (m *UserIpAddOrUpdateResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *CheckUserSpaiclReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.Type != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Type))
	}
	return n
}

func (m *CheckUserSpaiclResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ErrorCode))
	}
	if m.Result {
		n += 2
	}
	return n
}

func (m *InsertUSerSpaiclReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.Type != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Type))
	}
	return n
}

func (m *InsertUSerSpaiclResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ErrorCode))
	}
	if m.Result {
		n += 2
	}
	return n
}

func (m *DelUSerSpaiclReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.Type != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Type))
	}
	return n
}

func (m *DelUSerSpaiclResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ErrorCode))
	}
	if m.Result {
		n += 2
	}
	return n
}

func (m *GetAllUSerSpaiclReq) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Type))
	}
	return n
}

func (m *GetAllUSerSpaiclResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ErrorCode))
	}
	if len(m.TrueUserId) > 0 {
		l = 0
		for _, e := range m.TrueUserId {
			l += sovImuinfoserver(uint64(e))
		}
		n += 1 + sovImuinfoserver(uint64(l)) + l
	}
	if len(m.FalseUserId) > 0 {
		l = 0
		for _, e := range m.FalseUserId {
			l += sovImuinfoserver(uint64(e))
		}
		n += 1 + sovImuinfoserver(uint64(l)) + l
	}
	return n
}

func (m *ChangePhoneReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.KeyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.KeyId))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.PhoneCodeHash)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.PhoneCode)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.LocalPhone)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *ChangePhoneResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ErrorCode))
	}
	if m.Result {
		n += 2
	}
	return n
}

func (m *VirtualPhoneNumberInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.VirtualPhone)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.RealPhone)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Activated != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Activated))
	}
	if m.BindTime != 0 {
		n += 1 + sovImuinfoserver(uint64(m.BindTime))
	}
	if m.ActivateTime != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ActivateTime))
	}
	if m.ActivateAdminId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ActivateAdminId))
	}
	if m.BindAdminId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.BindAdminId))
	}
	if m.OwnerId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.OwnerId))
	}
	l = len(m.InitialPhoneCode)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *UserExpansionFindReq) Size() (n int) {
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserID))
	}
	return n
}

func (m *UserExpansionFindResult) Size() (n int) {
	var l int
	_ = l
	if m.UserExpansion != nil {
		l = m.UserExpansion.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *UserExpansion) Size() (n int) {
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserID))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Version))
	}
	return n
}

func (m *UserExpansionSetReq) Size() (n int) {
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserID))
	}
	if m.UserExpansion != nil {
		l = m.UserExpansion.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *UserExpansionSetResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *UserInfoExtend) Size() (n int) {
	var l int
	_ = l
	if m.UserType != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserType))
	}
	l = len(m.UselableFid)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.UselableSize != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UselableSize))
	}
	if m.UselableWidth != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UselableWidth))
	}
	if m.UselableHeight != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UselableHeight))
	}
	return n
}

func (m *GetUserInfoExtendReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetUserInfoExtendResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	if m.Hash != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Hash))
	}
	if len(m.UserInfoExtend) > 0 {
		for _, e := range m.UserInfoExtend {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	return n
}

func (m *HistoryChangePhoneAddResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *HistoryChangePhoneAddReq) Size() (n int) {
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserID))
	}
	l = len(m.FromNumber)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.ToNumber)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Port))
	}
	return n
}

func (m *QueryUpdatesByUseridReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.KeyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.KeyId))
	}
	if m.Timestamp != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Timestamp))
	}
	return n
}

func (m *QueryUpdatesByUseridResult) Size() (n int) {
	var l int
	_ = l
	l = len(m.JsonContent)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *GetSwitchVersionReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	return n
}

func (m *GetSwitchVersionResult) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Version))
	}
	return n
}

func (m *UGetUsersChatsReq) Size() (n int) {
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Userid))
	}
	if len(m.Users) > 0 {
		l = 0
		for _, e := range m.Users {
			l += sovImuinfoserver(uint64(e))
		}
		n += 1 + sovImuinfoserver(uint64(l)) + l
	}
	if len(m.Chatid) > 0 {
		l = 0
		for _, e := range m.Chatid {
			l += sovImuinfoserver(uint64(e))
		}
		n += 1 + sovImuinfoserver(uint64(l)) + l
	}
	if len(m.Channelid) > 0 {
		l = 0
		for _, e := range m.Channelid {
			l += sovImuinfoserver(uint64(e))
		}
		n += 1 + sovImuinfoserver(uint64(l)) + l
	}
	if m.ProtocolLayer != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ProtocolLayer))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *UGetUsersChatsResult) Size() (n int) {
	var l int
	_ = l
	if len(m.Channels) > 0 {
		for _, b := range m.Channels {
			l = len(b)
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	if m.Users != nil {
		l = m.Users.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if len(m.Chats) > 0 {
		for _, b := range m.Chats {
			l = len(b)
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	if len(m.NoChats) > 0 {
		l = 0
		for _, e := range m.NoChats {
			l += sovImuinfoserver(uint64(e))
		}
		n += 1 + sovImuinfoserver(uint64(l)) + l
	}
	if len(m.NoChans) > 0 {
		l = 0
		for _, e := range m.NoChans {
			l += sovImuinfoserver(uint64(e))
		}
		n += 1 + sovImuinfoserver(uint64(l)) + l
	}
	if m.Resultcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Resultcode))
	}
	return n
}

func (m *UpdateBotInfoSuppReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	l = len(m.Placeholder)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Geo {
		n += 2
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *UpdateBotInfoSuppResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *DeleteUserUsernameReq) Size() (n int) {
	var l int
	_ = l
	if m.AdminId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.AdminId))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.ForceDelete {
		n += 2
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *DeleteUserUsernameResult) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Code))
	}
	l = len(m.InternalErrorMessage)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.OwnerId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.OwnerId))
	}
	return n
}

func (m *UpdateUserLocationReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.Detail)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *UpdateUserLocationResult) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *UpdateUserGrenderReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.Grender != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Grender))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *UpdateUserGrenderResult) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *UpdateUserEmailReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *UpdateUserEmailResult) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *UploadContactsReq) Size() (n int) {
	var l int
	_ = l
	if m.KeyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if len(m.PhoneContactArr) > 0 {
		for _, e := range m.PhoneContactArr {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	return n
}

func (m *UploadContactsResult) Size() (n int) {
	var l int
	_ = l
	if m.Error {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *ApplyContactReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.ApplyUserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ApplyUserId))
	}
	l = len(m.WithMessage)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.FromType != 0 {
		n += 1 + sovImuinfoserver(uint64(m.FromType))
	}
	if m.GroupId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.GroupId))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImuinfoserver(uint64(m.AccessHash))
	}
	return n
}

func (m *ApplyContactResult) Size() (n int) {
	var l int
	_ = l
	if m.FromApplyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.FromApplyId))
	}
	if m.FromReplyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.FromReplyId))
	}
	if m.ToApplyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ToApplyId))
	}
	if m.ToReplyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ToReplyId))
	}
	if m.Date != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Date))
	}
	if m.ToUnreadCount != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ToUnreadCount))
	}
	if m.AddContact {
		n += 2
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *ContactsGreetApplyReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.ApplyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ApplyId))
	}
	l = len(m.Greet)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *ContactsGreetApplyResult) Size() (n int) {
	var l int
	_ = l
	if m.FromApplyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.FromApplyId))
	}
	if m.FromReplyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.FromReplyId))
	}
	if m.ToApplyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ToApplyId))
	}
	if m.ToReplyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ToReplyId))
	}
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.UnreadCount != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UnreadCount))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetAppliedContactsReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	return n
}

func (m *GetAppliedContactsResult) Size() (n int) {
	var l int
	_ = l
	if m.Error {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if len(m.AppliedArr) > 0 {
		for _, e := range m.AppliedArr {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	return n
}

func (m *Applied) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Id))
	}
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.ApplyUser != nil {
		l = m.ApplyUser.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.WithMessage)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Status))
	}
	if m.Flag != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Flag))
	}
	if m.Gender != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Gender))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.Detail)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *VerifyContactReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Id))
	}
	if m.VerifyUserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.VerifyUserId))
	}
	if m.Status != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Status))
	}
	return n
}

func (m *VerifyContactResult) Size() (n int) {
	var l int
	_ = l
	if m.Error {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *DeleteAppliedHistoryContactReq) Size() (n int) {
	var l int
	_ = l
	if m.MaxId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.MaxId))
	}
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *DeleteAppliedHistoryContactResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *DeleteAppliedSomeContactReq) Size() (n int) {
	var l int
	_ = l
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovImuinfoserver(uint64(e))
		}
		n += 1 + sovImuinfoserver(uint64(l)) + l
	}
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *DeleteAppliedSomeContactResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *ReadAppliedHistoryReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *ReadAppliedHistoryResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetContactsApplyDifferenceReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.ApplyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ApplyId))
	}
	if m.Limit != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Limit))
	}
	if m.Date != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Date))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *ApplyDifference) Size() (n int) {
	var l int
	_ = l
	if m.ApplyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ApplyId))
	}
	if m.ReplyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ReplyId))
	}
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.Date != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Date))
	}
	if m.State != 0 {
		n += 1 + sovImuinfoserver(uint64(m.State))
	}
	l = len(m.Greet)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.FromType != 0 {
		n += 1 + sovImuinfoserver(uint64(m.FromType))
	}
	return n
}

func (m *GetContactsApplyDifferenceResult) Size() (n int) {
	var l int
	_ = l
	if len(m.Applies) > 0 {
		for _, e := range m.Applies {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	if m.MaxApplyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.MaxApplyId))
	}
	if m.UnreadCount != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UnreadCount))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetContactsApplyDifferenceV2Req) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.ApplyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ApplyId))
	}
	if m.Limit != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Limit))
	}
	if m.Date != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Date))
	}
	if m.Hash != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Hash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *GetContactsApplyDifferenceV2Result) Size() (n int) {
	var l int
	_ = l
	if len(m.Applies) > 0 {
		for _, e := range m.Applies {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	if m.MaxApplyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.MaxApplyId))
	}
	if m.UnreadCount != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UnreadCount))
	}
	if m.Hash != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Hash))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *SearchUserByPhoneReq) Size() (n int) {
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.SelfId))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *SearchUserByPhoneResult) Size() (n int) {
	var l int
	_ = l
	if len(m.UserInfos) > 0 {
		for _, e := range m.UserInfos {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	if m.Gender != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Gender))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.Detail)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *CreateGroupReq) Size() (n int) {
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.SelfId))
	}
	if len(m.UserIdArr) > 0 {
		l = 0
		for _, e := range m.UserIdArr {
			l += sovImuinfoserver(uint64(e))
		}
		n += 1 + sovImuinfoserver(uint64(l)) + l
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *CreateGroupResult) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.GroupId))
	}
	if m.Order != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Order))
	}
	if m.Date != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Date))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *SetUserGroupReq) Size() (n int) {
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.SelfId))
	}
	if len(m.UserInfos) > 0 {
		for _, e := range m.UserInfos {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	if m.GroupId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.GroupId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *SetUserGroupResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetFullUserReq) Size() (n int) {
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.SelfId))
	}
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImuinfoserver(uint64(m.AccessHash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *GetFullUserResult) Size() (n int) {
	var l int
	_ = l
	if m.Uinfo != nil {
		l = m.Uinfo.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Isblocked {
		n += 2
	}
	if m.PhoneCallsPrivate {
		n += 2
	}
	if m.PhoneCallsAvailable {
		n += 2
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.CommonChat != 0 {
		n += 1 + sovImuinfoserver(uint64(m.CommonChat))
	}
	l = len(m.Extend)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetUserExpansionReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	return n
}

func (m *GetUserExpansionResult) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Version))
	}
	return n
}

func (m *ChangeGroupOrderReq) Size() (n int) {
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.SelfId))
	}
	if len(m.GroupOrder) > 0 {
		for _, e := range m.GroupOrder {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *GroupOrder) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.GroupId))
	}
	if m.OrderId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.OrderId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Date))
	}
	if m.UnreadCount != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UnreadCount))
	}
	return n
}

func (m *ChangeGroupOrderResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *DeleteGroupReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.GroupId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.GroupId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *DeleteGroupResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *DeleteGroupsReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if len(m.GroupIds) > 0 {
		l = 0
		for _, e := range m.GroupIds {
			l += sovImuinfoserver(uint64(e))
		}
		n += 1 + sovImuinfoserver(uint64(l)) + l
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *DeleteGroupsResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetCustomerListReq) Size() (n int) {
	var l int
	_ = l
	if m.IsOrient {
		n += 2
	}
	return n
}

func (m *CustomerList) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.IsOrient {
		n += 2
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Sort != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Sort))
	}
	return n
}

func (m *GetCustomerListReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Customers) > 0 {
		for _, e := range m.Customers {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *IsCustomerByUserIdReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	return n
}

func (m *IsCustomerByUserIdReply) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ErrorCode))
	}
	if m.Yes {
		n += 2
	}
	return n
}

func (m *GetCustomerOrientUsersReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	return n
}

func (m *GetCustomerOrientUsersReply) Size() (n int) {
	var l int
	_ = l
	if len(m.UserIds) > 0 {
		l = 0
		for _, e := range m.UserIds {
			l += sovImuinfoserver(uint64(e))
		}
		n += 1 + sovImuinfoserver(uint64(l)) + l
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ErrorCode))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *CheckSpecialUserReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	return n
}

func (m *CheckSpecialUserReply) Size() (n int) {
	var l int
	_ = l
	if m.IsSpecial {
		n += 2
	}
	return n
}

func (m *GetForceGroupListReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetForceGroupListReply) Size() (n int) {
	var l int
	_ = l
	if len(m.GroupIds) > 0 {
		l = 0
		for _, e := range m.GroupIds {
			l += sovImuinfoserver(uint64(e))
		}
		n += 1 + sovImuinfoserver(uint64(l)) + l
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *GetNotForceGroupListReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetNotForceGroupListReply) Size() (n int) {
	var l int
	_ = l
	if len(m.GroupIds) > 0 {
		l = 0
		for _, e := range m.GroupIds {
			l += sovImuinfoserver(uint64(e))
		}
		n += 1 + sovImuinfoserver(uint64(l)) + l
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *PassWordRegistryReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImuinfoserver(uint64(m.AccessHash))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.PassWord)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.LocalPhone)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *PassWordRegistryReply) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ErrorCode))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *PassWordLoginReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.PhoneNum)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *PassWordLoginReply) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ErrorCode))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *ChangePassWordReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	l = len(m.NewPassWord)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *ChangePassWordReply) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ErrorCode))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *RegistryUserByUsernameReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.LocalPhone)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *RegistryUserByUsernameReply) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ErrorCode))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *GetAuthTokenReq) Size() (n int) {
	var l int
	_ = l
	if m.KeyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.KeyId))
	}
	return n
}

func (m *GetAuthTokenReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.UntilDate != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UntilDate))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *BindUserTokenReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	return n
}

func (m *BindUserTokenReply) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.KeyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.KeyId))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *GetUserByAuthTokenReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *GetUserByAuthTokenReply) Size() (n int) {
	var l int
	_ = l
	if m.KeyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *VerifyAuthTokenReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *VerifyAuthTokenReply) Size() (n int) {
	var l int
	_ = l
	if m.KeyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *SignUpV1Req) Size() (n int) {
	var l int
	_ = l
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.PhoneCodeHash)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.PhoneCode)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.KeyId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.KeyId))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Sex != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Sex))
	}
	if m.IsBot {
		n += 2
	}
	if m.BotInfoVersion != 0 {
		n += 1 + sovImuinfoserver(uint64(m.BotInfoVersion))
	}
	if m.BotChatHistory {
		n += 2
	}
	if m.BotNoChats {
		n += 2
	}
	if m.DcId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.DcId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.LocalPhone)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Birthday != 0 {
		n += 2 + sovImuinfoserver(uint64(m.Birthday))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 2 + l + sovImuinfoserver(uint64(l))
	}
	if m.ProxyCode != 0 {
		n += 2 + sovImuinfoserver(uint64(m.ProxyCode))
	}
	return n
}

func (m *SignUpV1Reply) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Code))
	}
	if m.UserInfo != nil {
		l = m.UserInfo.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *ContactsGetCommonContactsReq) Size() (n int) {
	var l int
	_ = l
	if len(m.UserIds) > 0 {
		l = 0
		for _, e := range m.UserIds {
			l += sovImuinfoserver(uint64(e))
		}
		n += 1 + sovImuinfoserver(uint64(l)) + l
	}
	return n
}

func (m *ContactsGetCommonContactsResult) Size() (n int) {
	var l int
	_ = l
	if len(m.UserInfos) > 0 {
		for _, e := range m.UserInfos {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *SearchUserByNicknameReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if len(m.UserIds) > 0 {
		l = 0
		for _, e := range m.UserIds {
			l += sovImuinfoserver(uint64(e))
		}
		n += 1 + sovImuinfoserver(uint64(l)) + l
	}
	if m.Offset != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Limit))
	}
	if m.SelfId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.SelfId))
	}
	return n
}

func (m *SearchUserByNicknameResult) Size() (n int) {
	var l int
	_ = l
	if len(m.UserInfos) > 0 {
		for _, e := range m.UserInfos {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetUserRoleInfoByIdsReq) Size() (n int) {
	var l int
	_ = l
	if len(m.UserIds) > 0 {
		l = 0
		for _, e := range m.UserIds {
			l += sovImuinfoserver(uint64(e))
		}
		n += 1 + sovImuinfoserver(uint64(l)) + l
	}
	return n
}

func (m *UserRoleInfo) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImuinfoserver(uint64(m.AccessHash))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.IsBot {
		n += 2
	}
	if m.Sex != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Sex))
	}
	return n
}

func (m *GetUserRoleInfoByIdsRsp) Size() (n int) {
	var l int
	_ = l
	if m.ErrCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ErrCode))
	}
	if len(m.RoleArr) > 0 {
		for _, e := range m.RoleArr {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	return n
}

func (m *InnerUser) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	l = len(m.VPhone)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.RPhone)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.Passwd)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Status))
	}
	if m.EnabledBy != 0 {
		n += 1 + sovImuinfoserver(uint64(m.EnabledBy))
	}
	l = len(m.EnabledAt)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *InnerUserOpReq) Size() (n int) {
	var l int
	_ = l
	if m.OpType != 0 {
		n += 1 + sovImuinfoserver(uint64(m.OpType))
	}
	if m.FromId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.FromId))
	}
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	l = len(m.VPhone)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.RPhone)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *InnerUserOpRsp) Size() (n int) {
	var l int
	_ = l
	if m.ResCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ResCode))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if len(m.UserArr) > 0 {
		for _, e := range m.UserArr {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	return n
}

func (m *BindRealPhoneReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	l = len(m.RPhone)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *BindRealPhoneRsp) Size() (n int) {
	var l int
	_ = l
	if m.ResCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ResCode))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *GetUserRelationWithIdsReq) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.FromId))
	}
	if len(m.WithIds) > 0 {
		l = 0
		for _, e := range m.WithIds {
			l += sovImuinfoserver(uint64(e))
		}
		n += 1 + sovImuinfoserver(uint64(l)) + l
	}
	return n
}

func (m *Relation) Size() (n int) {
	var l int
	_ = l
	if m.User != 0 {
		n += 1 + sovImuinfoserver(uint64(m.User))
	}
	if m.Type != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Type))
	}
	return n
}

func (m *GetUserRelationWithIdsRsp) Size() (n int) {
	var l int
	_ = l
	if m.ResCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ResCode))
	}
	if len(m.Relations) > 0 {
		for _, e := range m.Relations {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	return n
}

func (m *UpdateUserVerifiedReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.Verified {
		n += 2
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *UpdateUserVerifiedResult) Size() (n int) {
	var l int
	_ = l
	if m.Uinfo != nil {
		l = m.Uinfo.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *AddPhoneBookContactsReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	l = len(m.LocalPhone)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *Contact) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *AddPhoneBookContactsReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Contacts) > 0 {
		for _, e := range m.Contacts {
			l = e.Size()
			n += 1 + l + sovImuinfoserver(uint64(l))
		}
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *InviteCodeBindReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.InviteBy != 0 {
		n += 1 + sovImuinfoserver(uint64(m.InviteBy))
	}
	return n
}

func (m *InviteCodeBindRsp) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *MyTeamReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.Offset != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Limit))
	}
	return n
}

func (m *MyTeamRsp) Size() (n int) {
	var l int
	_ = l
	if len(m.Users) > 0 {
		l = 0
		for _, e := range m.Users {
			l += sovImuinfoserver(uint64(e))
		}
		n += 1 + sovImuinfoserver(uint64(l)) + l
	}
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *RealNameCertificationReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.IdentityNumber)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.FrontImage)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.ReverseImage)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *RealNameCertificationRsp) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetCertificationResultReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	return n
}

func (m *CertificationResult) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.IdentityNumber)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.FrontImage)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	l = len(m.ReverseImage)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Status))
	}
	if m.ReasonCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ReasonCode))
	}
	return n
}

func (m *GetCertificationResultRsp) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *VerifyCertificationReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.Status != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Status))
	}
	if m.ReasonCode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.ReasonCode))
	}
	return n
}

func (m *VerifyCertificationRsp) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *UpdateUserDetailV1Req) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImuinfoserver(uint64(m.UserId))
	}
	if m.Sex != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Sex))
	}
	if m.Birthday != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Birthday))
	}
	l = len(m.Extend)
	if l > 0 {
		n += 1 + l + sovImuinfoserver(uint64(l))
	}
	return n
}

func (m *UpdateUserDetailV1Rsp) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImuinfoserver(uint64(m.Errorcode))
	}
	return n
}

func sovImuinfoserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozImuinfoserver(x uint64) (n int) {
	return sovImuinfoserver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetUserInfoByIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserInfoByIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserInfoByIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserInfoByIdArrReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserInfoByIdArrReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserInfoByIdArrReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIds = append(m.UserIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImuinfoserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImuinfoserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIds = append(m.UserIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIds", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfoArray) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfoArray: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfoArray: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userin = append(m.Userin, &UserInfo{})
			if err := m.Userin[len(m.Userin)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: userInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: userInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLogout", wireType)
			}
			m.LastLogout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastLogout |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterRegion", wireType)
			}
			m.ClusterRegion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterRegion |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FontRgb", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FontRgb = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotInfoVersion", wireType)
			}
			m.BotInfoVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotInfoVersion |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotInlinePlaceholder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BotInlinePlaceholder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestrictionReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RestrictionReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LangCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = bool(v != 0)
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bot = bool(v != 0)
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotChatHistory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotChatHistory = bool(v != 0)
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotNochats", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotNochats = bool(v != 0)
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verified = bool(v != 0)
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Restricted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Restricted = bool(v != 0)
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Min = bool(v != 0)
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotInlineGeo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotInlineGeo = bool(v != 0)
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Self", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Self = bool(v != 0)
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contact", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Contact = bool(v != 0)
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MutalContact", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MutalContact = bool(v != 0)
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StarMark", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StarMark = bool(v != 0)
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowContactPhone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowContactPhone = bool(v != 0)
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserType", wireType)
			}
			m.UserType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserLable", wireType)
			}
			m.UserLable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserLable |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserLevel", wireType)
			}
			m.UserLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Birthday", wireType)
			}
			m.Birthday = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Birthday |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extend", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extend = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserExpireByIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserExpireByIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserExpireByIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserExpireByIdResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserExpireByIdResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserExpireByIdResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			m.Expire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expire |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserByphone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserByphone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserByphone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserInfoResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserInfoResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserInfoResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uinfo == nil {
				m.Uinfo = &UserInfo{}
			}
			if err := m.Uinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserInfoByIdArrResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserInfoByIdArrResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserInfoByIdArrResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uinfo = append(m.Uinfo, &UserInfo{})
			if err := m.Uinfo[len(m.Uinfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserByUsername) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserByUsername: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserByUsername: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePhotoInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: updatePhotoInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: updatePhotoInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPhotoInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPhotoInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPhotoInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserPhotoResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserPhotoResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserPhotoResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserPhotoResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserPhotoResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserPhotoResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserProfileReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserProfileReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserProfileReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserFullReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserFullReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserFullReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Age |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extened", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extened = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserFullResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserFullResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserFullResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserProfileResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserProfileResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserProfileResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uinfo == nil {
				m.Uinfo = &UserInfo{}
			}
			if err := m.Uinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offline", wireType)
			}
			m.Offline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offline |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Longitude = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Latitude = float64(math.Float64frombits(v))
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateExpireReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateExpireReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateExpireReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			m.Expire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expire |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateExpireResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateExpireResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateExpireResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserClusterChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserClusterChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserClusterChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			m.ClusterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserClusterChangeResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserClusterChangeResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserClusterChangeResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateuserNameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateuserNameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateuserNameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateuserNameResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateuserNameResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateuserNameResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uinfo == nil {
				m.Uinfo = &UserInfo{}
			}
			if err := m.Uinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserLevelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserLevelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserLevelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Levl", wireType)
			}
			m.Levl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Levl |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserLevelResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserLevelResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserLevelResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserExtionReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserExtionReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserExtionReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extionsion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extionsion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserExtionResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserExtionResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserExtionResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckPhoneRegisterReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckPhoneRegisterReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckPhoneRegisterReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckPhoneRegisterResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckPhoneRegisterResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckPhoneRegisterResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAccountByIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAccountByIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAccountByIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelId", wireType)
			}
			m.DelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelAccountResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelAccountResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelAccountResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BotUpdateInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BotUpdateInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BotUpdateInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotInfoVersion", wireType)
			}
			m.BotInfoVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotInfoVersion |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotChatHistory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotChatHistory = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotNoChat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotNoChat = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BotUpdateInfoResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BotUpdateInfoResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BotUpdateInfoResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelContactReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelContactReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelContactReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactId", wireType)
			}
			m.ContactId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContactId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelContactResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelContactResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelContactResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uinfo == nil {
				m.Uinfo = &UserInfo{}
			}
			if err := m.Uinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcceptContactReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcceptContactReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcceptContactReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyId", wireType)
			}
			m.ApplyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplyId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcceptContactResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcceptContactResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcceptContactResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactIdHash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactIdHash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactIdHash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactId", wireType)
			}
			m.ContactId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContactId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelContactArrReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelContactArrReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelContactArrReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactidArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactidArr = append(m.ContactidArr, &ContactIdHash{})
			if err := m.ContactidArr[len(m.ContactidArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CmdResetUserContactsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmdResetUserContactsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmdResetUserContactsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmdinId", wireType)
			}
			m.AmdinId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AmdinId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CmdResetUserContactsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmdResetUserContactsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmdResetUserContactsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CurrentContactIds = append(m.CurrentContactIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImuinfoserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImuinfoserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CurrentContactIds = append(m.CurrentContactIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentContactIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelContactArrResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelContactArrResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelContactArrResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContatsGetContactsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContatsGetContactsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContatsGetContactsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contacthash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contacthash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: contactInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: contactInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactId", wireType)
			}
			m.ContactId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContactId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSelfContacted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSelfContacted = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfIsContacted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SelfIsContacted = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StarMark", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StarMark = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasPhone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasPhone = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContatsGetContactsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContatsGetContactsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContatsGetContactsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactArr = append(m.ContactArr, &ContactInfo{})
			if err := m.ContactArr[len(m.ContactArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfoArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserInfoArr = append(m.UserInfoArr, &UserInfo{})
			if err := m.UserInfoArr[len(m.UserInfoArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsGetContactsV1Req) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsGetContactsV1Req: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsGetContactsV1Req: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsGetContactsV1Result) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsGetContactsV1Result: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsGetContactsV1Result: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactArr = append(m.ContactArr, &ContactInfo{})
			if err := m.ContactArr[len(m.ContactArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfoArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserInfoArr = append(m.UserInfoArr, &UserInfo{})
			if err := m.UserInfoArr[len(m.UserInfoArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupOrderArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupOrderArr = append(m.GroupOrderArr, &GroupOrder{})
			if err := m.GroupOrderArr[len(m.GroupOrderArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SavedCount", wireType)
			}
			m.SavedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SavedCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsGetContactsIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsGetContactsIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsGetContactsIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsGetContactsIdResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsGetContactsIdResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsGetContactsIdResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ContactsId = append(m.ContactsId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImuinfoserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImuinfoserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ContactsId = append(m.ContactsId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactsId", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneBookContact) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneBookContact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneBookContact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			m.ClientId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsImportPhoneContactsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsImportPhoneContactsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsImportPhoneContactsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneContactArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneContactArr = append(m.PhoneContactArr, &PhoneBookContact{})
			if err := m.PhoneContactArr[len(m.PhoneContactArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImportContact) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImportContact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImportContact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			m.ClientId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PopularContact) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PopularContact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PopularContact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			m.ClientId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Importers", wireType)
			}
			m.Importers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Importers |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsImportPhoneContactsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsImportPhoneContactsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsImportPhoneContactsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImContactDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImContactDetail = append(m.ImContactDetail, &ImportContact{})
			if err := m.ImContactDetail[len(m.ImContactDetail)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfoArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserInfoArr = append(m.UserInfoArr, &UserInfo{})
			if err := m.UserInfoArr[len(m.UserInfoArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PopuContact", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PopuContact = append(m.PopuContact, &PopularContact{})
			if err := m.PopuContact[len(m.PopuContact)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddRelationIdInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddRelationIdInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddRelationIdInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelationId", wireType)
			}
			m.RelationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelationId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelRelationIdInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelRelationIdInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelRelationIdInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelationId", wireType)
			}
			m.RelationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelationId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddRelationIdInfoResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddRelationIdInfoResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddRelationIdInfoResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelRelationIdInfoResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelRelationIdInfoResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelRelationIdInfoResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockeduserReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockeduserReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockeduserReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedId", wireType)
			}
			m.BlockedId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockedId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockeduserResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockeduserResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockeduserResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactUnblockedReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactUnblockedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactUnblockedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedId", wireType)
			}
			m.BlockedId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockedId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsGetBlockedReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsGetBlockedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsGetBlockedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Blockeduser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: blockeduser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: blockeduser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsGetBlockedResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsGetBlockedResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsGetBlockedResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Blockeduser = append(m.Blockeduser, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImuinfoserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImuinfoserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Blockeduser = append(m.Blockeduser, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Blockeduser", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfoArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InfoArr = append(m.InfoArr, &UserInfo{})
			if err := m.InfoArr[len(m.InfoArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemWhiteUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemWhiteUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemWhiteUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proby", wireType)
			}
			m.Proby = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Proby |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWhite", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsWhite = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreSysWhiteUserReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreSysWhiteUserReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreSysWhiteUserReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proby", wireType)
			}
			m.Proby = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Proby |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreSysWhiteUserResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreSysWhiteUserResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreSysWhiteUserResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSystemWhiteUserLevelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSystemWhiteUserLevelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSystemWhiteUserLevelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proby", wireType)
			}
			m.Proby = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Proby |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSystemWhiteUserLevelResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSystemWhiteUserLevelResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSystemWhiteUserLevelResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSysWhiteUserReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSysWhiteUserReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSysWhiteUserReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSysWhiteUserResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSysWhiteUserResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSysWhiteUserResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SysWhiteInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SysWhiteInfo == nil {
				m.SysWhiteInfo = &SystemWhiteUser{}
			}
			if err := m.SysWhiteInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSysWhiteUserArrReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSysWhiteUserArrReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSysWhiteUserArrReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSysWhiteUserArrResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSysWhiteUserArrResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSysWhiteUserArrResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SysWhiteInfoArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SysWhiteInfoArr = append(m.SysWhiteInfoArr, &SystemWhiteUser{})
			if err := m.SysWhiteInfoArr[len(m.SysWhiteInfoArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelSysWhiteUserReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelSysWhiteUserReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelSysWhiteUserReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProUser", wireType)
			}
			m.ProUser = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProUser |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelSysWhiteUserResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelSysWhiteUserResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelSysWhiteUserResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserDc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserDc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserDc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcId", wireType)
			}
			m.DcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DcId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllDcReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllDcReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllDcReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetPrivacyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetPrivacyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetPrivacyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivacyType", wireType)
			}
			m.PrivacyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrivacyType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			m.Range = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Range |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AlwaysDisallow = append(m.AlwaysDisallow, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImuinfoserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImuinfoserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AlwaysDisallow = append(m.AlwaysDisallow, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AlwaysDisallow", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AlwaysAllow = append(m.AlwaysAllow, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImuinfoserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImuinfoserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AlwaysAllow = append(m.AlwaysAllow, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AlwaysAllow", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetPrivacyResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetPrivacyResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetPrivacyResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UinfoArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UinfoArr = append(m.UinfoArr, &UserInfo{})
			if err := m.UinfoArr[len(m.UinfoArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPrivacyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPrivacyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPrivacyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivacyType", wireType)
			}
			m.PrivacyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrivacyType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckPrivacyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckPrivacyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckPrivacyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivacyType", wireType)
			}
			m.PrivacyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrivacyType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckPrivacyResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckPrivacyResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckPrivacyResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPrivacyResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPrivacyResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPrivacyResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			m.Range = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Range |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AlwaysDisallow = append(m.AlwaysDisallow, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImuinfoserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImuinfoserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AlwaysDisallow = append(m.AlwaysDisallow, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AlwaysDisallow", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AlwaysAllow = append(m.AlwaysAllow, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImuinfoserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImuinfoserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AlwaysAllow = append(m.AlwaysAllow, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AlwaysAllow", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserInfos = append(m.UserInfos, &UserInfo{})
			if err := m.UserInfos[len(m.UserInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreShopStickerSetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreShopStickerSetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreShopStickerSetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Free", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Free = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Official", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Official = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Masks", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Masks = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Emoticon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Emoticon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Documents = append(m.Documents, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImuinfoserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImuinfoserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Documents = append(m.Documents, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Documents", wireType)
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreShopStickerSetResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreShopStickerSetResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreShopStickerSetResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreShopStickerSetDocumentsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreShopStickerSetDocumentsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreShopStickerSetDocumentsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Documents = append(m.Documents, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImuinfoserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImuinfoserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Documents = append(m.Documents, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Documents", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreShopStickerSetDocumentsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreShopStickerSetDocumentsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreShopStickerSetDocumentsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteStickerSetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteStickerSetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteStickerSetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickerId", wireType)
			}
			m.StickerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StickerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteStickerSetResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteStickerSetResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteStickerSetResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StickerSetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StickerSetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StickerSetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Free", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Free = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Official", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Official = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Masks", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Masks = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Emoticon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Emoticon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Documents = append(m.Documents, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImuinfoserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImuinfoserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Documents = append(m.Documents, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Documents", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStickerSetInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStickerSetInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStickerSetInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsId", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsId = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStickerSetInfoResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStickerSetInfoResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStickerSetInfoResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickerSetInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StickerSetInfo == nil {
				m.StickerSetInfo = &StickerSetInfo{}
			}
			if err := m.StickerSetInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StickerPackDocumentBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StickerPackDocumentBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StickerPackDocumentBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributesStikerSetId", wireType)
			}
			m.AttributesStikerSetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttributesStikerSetId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocumentId", wireType)
			}
			m.DocumentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DocumentId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MimeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MimeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thumb", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Thumb = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcId", wireType)
			}
			m.DcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DcId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributesImageSizeW", wireType)
			}
			m.AttributesImageSizeW = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttributesImageSizeW |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributesImageSizeH", wireType)
			}
			m.AttributesImageSizeH = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttributesImageSizeH |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributesStikerAlt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttributesStikerAlt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributesStikerSetAccessHash", wireType)
			}
			m.AttributesStikerSetAccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttributesStikerSetAccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributesFileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttributesFileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StickerPackDocumentInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StickerPackDocumentInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StickerPackDocumentInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfoBase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InfoBase == nil {
				m.InfoBase = &StickerPackDocumentBase{}
			}
			if err := m.InfoBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreStickerPackDcReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreStickerPackDcReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreStickerPackDcReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stickpackbase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stickpackbase == nil {
				m.Stickpackbase = &StickerPackDocumentBase{}
			}
			if err := m.Stickpackbase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreStickerPackDcResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreStickerPackDcResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreStickerPackDcResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreStickerPackDcArrReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreStickerPackDcArrReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreStickerPackDcArrReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StPDB", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StPDB = append(m.StPDB, &StickerPackDocumentBase{})
			if err := m.StPDB[len(m.StPDB)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreStickerPackDcArrResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreStickerPackDcArrResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreStickerPackDcArrResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IdArr = append(m.IdArr, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImuinfoserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImuinfoserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IdArr = append(m.IdArr, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IdArr", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStickerSetPackDcInfosReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStickerSetPackDcInfosReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStickerSetPackDcInfosReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStickerSetPackDcInfosResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStickerSetPackDcInfosResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStickerSetPackDcInfosResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StPDcInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StPDcInfo = append(m.StPDcInfo, &StickerPackDocumentInfo{})
			if err := m.StPDcInfo[len(m.StPDcInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddOrDeleteFaveSticerReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddOrDeleteFaveSticerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddOrDeleteFaveSticerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickerId", wireType)
			}
			m.StickerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StickerId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unfave", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Unfave = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddOrDeleteFaveSticerResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddOrDeleteFaveSticerResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddOrDeleteFaveSticerResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFavedStickersReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFavedStickersReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFavedStickersReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFavedStickersResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFavedStickersResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFavedStickersResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Packs = append(m.Packs, &StickerPack{})
			if err := m.Packs[len(m.Packs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stickers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stickers = append(m.Stickers, &StickerPackDocumentBase{})
			if err := m.Stickers[len(m.Stickers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StickerPack) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StickerPack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StickerPack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Emoticon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Emoticon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocumentId", wireType)
			}
			m.DocumentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DocumentId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreUserStickerSetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreUserStickerSetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreUserStickerSetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickersetId", wireType)
			}
			m.StickersetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StickersetId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Installed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Installed = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disabled = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Archived = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreUserStickerSetResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreUserStickerSetResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreUserStickerSetResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserStickerSetDisabledReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserStickerSetDisabledReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserStickerSetDisabledReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickersetId", wireType)
			}
			m.StickersetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StickersetId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disabled = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserStickerSetDisabledResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserStickerSetDisabledResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserStickerSetDisabledResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserStickerSetOrderReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserStickerSetOrderReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserStickerSetOrderReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickersetId", wireType)
			}
			m.StickersetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StickersetId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserStickerSetOrderResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserStickerSetOrderResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserStickerSetOrderResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserStickerSetInstallArReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserStickerSetInstallArReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserStickerSetInstallArReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickersetId", wireType)
			}
			m.StickersetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StickersetId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Archived = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Installed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Installed = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserStickerSetInstallArResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserStickerSetInstallArResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserStickerSetInstallArResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteuserStickerReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteuserStickerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteuserStickerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickersetId", wireType)
			}
			m.StickersetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StickersetId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteuserStickerResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteuserStickerResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteuserStickerResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickersetId", wireType)
			}
			m.StickersetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StickersetId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserStickerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserStickerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserStickerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickersetId", wireType)
			}
			m.StickersetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StickersetId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Installed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Installed = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disabled = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Free", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Free = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Official", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Official = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Archived = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Masks", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Masks = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Emotico", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Emotico = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Documents = append(m.Documents, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImuinfoserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImuinfoserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Documents = append(m.Documents, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Documents", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserStickerInfoArr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserStickerInfoArr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserStickerInfoArr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StickerInfo = append(m.StickerInfo, &UserStickerInfo{})
			if err := m.StickerInfo[len(m.StickerInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StickerSetInfoArr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StickerSetInfoArr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StickerSetInfoArr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StickerInfo = append(m.StickerInfo, &StickerSetInfo{})
			if err := m.StickerInfo[len(m.StickerInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetuserAllStickersReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetuserAllStickersReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetuserAllStickersReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetuserAllStickersResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetuserAllStickersResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetuserAllStickersResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickerInfoArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StickerInfoArr = append(m.StickerInfoArr, &UserStickerInfo{})
			if err := m.StickerInfoArr[len(m.StickerInfoArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllStickerSetsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllStickerSetsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllStickerSetsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllStickerSetsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllStickerSetsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllStickerSetsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickerInfoArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StickerInfoArr = append(m.StickerInfoArr, &StickerSetInfo{})
			if err := m.StickerInfoArr[len(m.StickerInfoArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteStickerPackDocumentReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteStickerPackDocumentReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteStickerPackDocumentReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickersetId", wireType)
			}
			m.StickersetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StickersetId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteStickerPackDocumentResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteStickerPackDocumentResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteStickerPackDocumentResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuthorStickerSetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuthorStickerSetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuthorStickerSetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetId", wireType)
			}
			m.SetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuthorStickerSetResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuthorStickerSetResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuthorStickerSetResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Set", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Set == nil {
				m.Set = &AuthorStickerSet{}
			}
			if err := m.Set.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuthorAllStickerSetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuthorAllStickerSetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuthorAllStickerSetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuthorAllStickerSetResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuthorAllStickerSetResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuthorAllStickerSetResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sets = append(m.Sets, &AuthorStickerSet{})
			if err := m.Sets[len(m.Sets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthorStickerSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthorStickerSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthorStickerSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickersetId", wireType)
			}
			m.StickersetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StickersetId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Archived = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Installed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Installed = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disabled = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ordered", wireType)
			}
			m.Ordered = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ordered |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			m.Updated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Updated |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountAuthorAllStickerSetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountAuthorAllStickerSetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountAuthorAllStickerSetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountAuthorAllStickerSetResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountAuthorAllStickerSetResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountAuthorAllStickerSetResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserGifInfoArr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: userGifInfoArr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: userGifInfoArr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GifArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GifArr = append(m.GifArr, &UserSaveGifInfo{})
			if err := m.GifArr[len(m.GifArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserSaveGifInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: userSaveGifInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: userSaveGifInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GifId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GifId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GitHash", wireType)
			}
			m.GitHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GitHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveUserGifReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveUserGifReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveUserGifReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GifId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GifId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GitHash", wireType)
			}
			m.GitHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GitHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveUserGifResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveUserGifResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveUserGifResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelUserGifReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelUserGifReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelUserGifReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GitHash", wireType)
			}
			m.GitHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GitHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelUserGifResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelUserGifResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelUserGifResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserGifsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserGifsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserGifsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserGifsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserGifsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserGifsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GifArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GifArr = append(m.GifArr, &UserSaveGifInfo{})
			if err := m.GifArr[len(m.GifArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckUserIsBlockedReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckUserIsBlockedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckUserIsBlockedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckUserIsBlockedResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckUserIsBlockedResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckUserIsBlockedResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterUserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: registerUserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: registerUserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBot = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotInfoVersion", wireType)
			}
			m.BotInfoVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotInfoVersion |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotChatHistory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotChatHistory = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotNoChats", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotNoChats = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Birthday", wireType)
			}
			m.Birthday = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Birthday |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserInfoResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserInfoResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserInfoResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uinfo == nil {
				m.Uinfo = &UserInfo{}
			}
			if err := m.Uinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckUserAccessHashValidReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckUserAccessHashValidReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckUserAccessHashValidReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckUserAccessHashValidResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckUserAccessHashValidResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckUserAccessHashValidResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsValid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsValid = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterUserInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterUserInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterUserInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBot = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotInfoVersion", wireType)
			}
			m.BotInfoVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotInfoVersion |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotChatHistory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotChatHistory = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotNoChats", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotNoChats = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dc", wireType)
			}
			m.Dc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dc |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupNow", wireType)
			}
			m.GroupNow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupNow |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Birthday", wireType)
			}
			m.Birthday = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Birthday |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterUserInfoResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterUserInfoResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterUserInfoResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uinfo == nil {
				m.Uinfo = &UserInfo{}
			}
			if err := m.Uinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNotifySettingsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNotifySettingsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNotifySettingsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqType", wireType)
			}
			m.ReqType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNotifySettingsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNotifySettingsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNotifySettingsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowPreviews", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowPreviews = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MuteUntil", wireType)
			}
			m.MuteUntil = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MuteUntil |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sound", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sound = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateNotifySettingsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateNotifySettingsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateNotifySettingsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqType", wireType)
			}
			m.ReqType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowPreviews", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowPreviews = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MuteUntil", wireType)
			}
			m.MuteUntil = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MuteUntil |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sound", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sound = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateNotifySettingsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateNotifySettingsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateNotifySettingsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetContactsStatusReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetContactsStatusReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetContactsStatusReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserStaus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserStaus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserStaus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineTime", wireType)
			}
			m.OfflineTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OfflineTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetContactsStatusResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetContactsStatusResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetContactsStatusResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactStatusArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactStatusArr = append(m.ContactStatusArr, &UserStaus{})
			if err := m.ContactStatusArr[len(m.ContactStatusArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBotPicRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBotPicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBotPicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotId", wireType)
			}
			m.BotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = append(m.Photo[:0], dAtA[iNdEx:postIndex]...)
			if m.Photo == nil {
				m.Photo = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBotPicResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBotPicResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBotPicResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllProxyConfigReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllProxyConfigReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllProxyConfigReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyAddr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyAddr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyAddr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InnerIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InnerIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllProxyConfigResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllProxyConfigResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllProxyConfigResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addrs = append(m.Addrs, &ProxyAddr{})
			if err := m.Addrs[len(m.Addrs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckUserNameOccupiedReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckUserNameOccupiedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckUserNameOccupiedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckUserNameOccupiedResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckUserNameOccupiedResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckUserNameOccupiedResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Occpuy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Occpuy = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserGpsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserGpsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserGpsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserGpsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserGpsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserGpsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Latitude = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Longitude = float64(math.Float64frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceModule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceModule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckSelfIsContactReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckSelfIsContactReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckSelfIsContactReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckSelfIsContactResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckSelfIsContactResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckSelfIsContactResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfIsContact", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SelfIsContact = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSwitchReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSwitchReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSwitchReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Switch", wireType)
			}
			m.Switch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Switch |= (Switch(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnOff", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OnOff = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSwitchResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSwitchResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSwitchResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (UpdateSwitchResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSwitchStatusReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSwitchStatusReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSwitchStatusReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Switch", wireType)
			}
			m.Switch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Switch |= (Switch(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSwitchStatusResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSwitchStatusResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSwitchStatusResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnOff", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OnOff = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (GetSwitchStatusResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetViplogPhoneListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetViplogPhoneListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetViplogPhoneListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetViplogPhoneListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetViplogPhoneListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetViplogPhoneListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phones", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phones = append(m.Phones, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserHasPayReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserHasPayReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserHasPayReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasCreate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasCreate = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserHasPayResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserHasPayResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserHasPayResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sucess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sucess = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckUserHasPayReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckUserHasPayReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckUserHasPayReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckUserHasPayResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckUserHasPayResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckUserHasPayResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Has", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Has = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserDetailReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserDetailReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserDetailReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Age |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extend", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extend = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserDetailResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserDetailResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserDetailResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sucessful", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sucessful = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserDetailBirthdayReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserDetailBirthdayReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserDetailBirthdayReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Birthday", wireType)
			}
			m.Birthday = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Birthday |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extend", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extend = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserDetailBirthdayResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserDetailBirthdayResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserDetailBirthdayResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Successful", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Successful = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetUserDetailReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetUserDetailReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetUserDetailReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Birthday", wireType)
			}
			m.Birthday = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Birthday |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extend", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extend = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetUserDetailResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetUserDetailResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetUserDetailResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Successful", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Successful = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteReceiveAppliesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteReceiveAppliesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteReceiveAppliesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIdArr = append(m.UserIdArr, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImuinfoserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImuinfoserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIdArr = append(m.UserIdArr, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdArr", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteReceiveAppliesResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteReceiveAppliesResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteReceiveAppliesResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserTypeLableReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserTypeLableReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserTypeLableReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserType", wireType)
			}
			m.UserType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserLable", wireType)
			}
			m.UserLable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserLable |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserTypeLableResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserTypeLableResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserTypeLableResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckSearchUserCountLimitedReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckSearchUserCountLimitedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckSearchUserCountLimitedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckSearchUserCountLimitedResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckSearchUserCountLimitedResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckSearchUserCountLimitedResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLimited", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLimited = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeLeft", wireType)
			}
			m.TimeLeft = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeLeft |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckIsMutualContactReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckIsMutualContactReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckIsMutualContactReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactId", wireType)
			}
			m.ContactId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContactId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckIsMutualContactResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckIsMutualContactResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckIsMutualContactResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMutualContact", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMutualContact = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeGroupNameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeGroupNameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeGroupNameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeGroupNameResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeGroupNameResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeGroupNameResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetContactsV1Req) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetContactsV1Req: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetContactsV1Req: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetContactsV1Result) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetContactsV1Result: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetContactsV1Result: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactArr = append(m.ContactArr, &ContactInfo{})
			if err := m.ContactArr[len(m.ContactArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfoArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserInfoArr = append(m.UserInfoArr, &UserInfo{})
			if err := m.UserInfoArr[len(m.UserInfoArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupOrderArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupOrderArr = append(m.GroupOrderArr, &GroupOrder{})
			if err := m.GroupOrderArr[len(m.GroupOrderArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SavedCount", wireType)
			}
			m.SavedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SavedCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchPrettyNumberReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchPrettyNumberReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchPrettyNumberReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchPrettyNumberRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchPrettyNumberRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchPrettyNumberRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrettyNumbers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrettyNumbers = append(m.PrettyNumbers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivePrettyNumberReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivePrettyNumberReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivePrettyNumberReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivePhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivePhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssginFlags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssginFlags = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			m.Operator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operator |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivePrettyNumberRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivePrettyNumberRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivePrettyNumberRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVirtualBindByPhoneReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVirtualBindByPhoneReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVirtualBindByPhoneReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVirtualBindByPhoneRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVirtualBindByPhoneRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVirtualBindByPhoneRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVirtualAcct", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVirtualAcct = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindRealPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BindRealPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindContactId", wireType)
			}
			m.BindContactId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BindContactId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssingFlags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssingFlags = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetuserAdminInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetuserAdminInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetuserAdminInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetuserAdminInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetuserAdminInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetuserAdminInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdmin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAdmin = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddUserAdminReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddUserAdminReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddUserAdminReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			m.Operator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operator |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddUserAdminResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddUserAdminResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddUserAdminResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SUcessful", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SUcessful = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BindVitualSendCodeChannelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BindVitualSendCodeChannelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BindVitualSendCodeChannelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssigFlag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssigFlag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendId", wireType)
			}
			m.SendId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BindVitualSendCodeChannelResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BindVitualSendCodeChannelResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BindVitualSendCodeChannelResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVitualSendCodeChannelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVitualSendCodeChannelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVitualSendCodeChannelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVitualSendCodeChannelResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVitualSendCodeChannelResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVitualSendCodeChannelResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNeedSendChannel", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNeedSendChannel = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendId", wireType)
			}
			m.SendId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VitualCheckCanAddContactReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VitualCheckCanAddContactReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VitualCheckCanAddContactReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactId", wireType)
			}
			m.ContactId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContactId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VitualCheckCanAddContactResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VitualCheckCanAddContactResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VitualCheckCanAddContactResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanAdd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanAdd = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckIsPhoneVitulaPhoneReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckIsPhoneVitulaPhoneReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckIsPhoneVitulaPhoneReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckIsPhoneVitulaPhoneResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckIsPhoneVitulaPhoneResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckIsPhoneVitulaPhoneResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVirtal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVirtal = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckIsVitulaPhoneArrReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckIsVitulaPhoneArrReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckIsVitulaPhoneArrReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserId = append(m.UserId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImuinfoserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImuinfoserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserId = append(m.UserId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckIsVitulaPhoneArrResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckIsVitulaPhoneArrResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckIsVitulaPhoneArrResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVitual", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVitual = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignUpVitualReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignUpVitualReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignUpVitualReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCodeHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCodeHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBot = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotInfoVersion", wireType)
			}
			m.BotInfoVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotInfoVersion |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotChatHistory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotChatHistory = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotNoChats", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotNoChats = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Birthday", wireType)
			}
			m.Birthday = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Birthday |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyCode", wireType)
			}
			m.ProxyCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProxyCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignUpVitualResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignUpVitualResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignUpVitualResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (SignUpVitualResp_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserInfo == nil {
				m.UserInfo = &UserInfo{}
			}
			if err := m.UserInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VirtualBindRealPhoneReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualBindRealPhoneReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualBindRealPhoneReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VirtualBindRealPhoneRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualBindRealPhoneRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualBindRealPhoneRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VirtualAddContactByPhoneReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualAddContactByPhoneReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualAddContactByPhoneReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VirtualAddContactByPhoneRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualAddContactByPhoneRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualAddContactByPhoneRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinGroupCheckReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinGroupCheckReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinGroupCheckReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviterId", wireType)
			}
			m.InviterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InviterId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MemberIds = append(m.MemberIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImuinfoserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImuinfoserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MemberIds = append(m.MemberIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinGroupCheckRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinGroupCheckRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinGroupCheckRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CanJoinIds = append(m.CanJoinIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImuinfoserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImuinfoserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CanJoinIds = append(m.CanJoinIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CanJoinIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckIsVitulaPhoneReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckIsVitulaPhoneReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckIsVitulaPhoneReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckIsVitulaPhoneResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckIsVitulaPhoneResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckIsVitulaPhoneResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVitulal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVitulal = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VirtulPhoneInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtulPhoneInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtulPhoneInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllVitualUsersByFlagsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllVitualUsersByFlagsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllVitualUsersByFlagsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssginFlags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssginFlags = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllVitualUsersByFlagsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllVitualUsersByFlagsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllVitualUsersByFlagsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sucess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sucess = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infos = append(m.Infos, &VirtulPhoneInfo{})
			if err := m.Infos[len(m.Infos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVitulPhoneNumbersReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVitulPhoneNumbersReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVitulPhoneNumbersReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminId", wireType)
			}
			m.AdminId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssginFlags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssginFlags = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UtilDate", wireType)
			}
			m.UtilDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UtilDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVitulPhoneNumbersResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVitulPhoneNumbersResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVitulPhoneNumbersResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phonenumbers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phonenumbers = append(m.Phonenumbers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenVitulaPhoneNumbersReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenVitulaPhoneNumbersReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenVitulaPhoneNumbersReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenVitulaPhoneNumbersResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenVitulaPhoneNumbersResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenVitulaPhoneNumbersResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserCdnVipInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserCdnVipInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserCdnVipInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgnTime", wireType)
			}
			m.BgnTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BgnTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoPay", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoPay = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserCdnPayInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserCdnPayInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserCdnPayInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayId", wireType)
			}
			m.PayId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayAmt", wireType)
			}
			m.PayAmt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayAmt |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgnTime", wireType)
			}
			m.BgnTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BgnTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuyCdnVipReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuyCdnVipReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuyCdnVipReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipLvl", wireType)
			}
			m.VipLvl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipLvl |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Months", wireType)
			}
			m.Months = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Months |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passwd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Passwd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debugs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debugs == nil {
				m.Debugs = &pbcomm.Debug{}
			}
			if err := m.Debugs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuyCdnVipRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuyCdnVipRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuyCdnVipRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VipInfo == nil {
				m.VipInfo = &UserCdnVipInfo{}
			}
			if err := m.VipInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetCdnVipAutoPayReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetCdnVipAutoPayReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetCdnVipAutoPayReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOpen = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetCdnVipAutoPayRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetCdnVipAutoPayRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetCdnVipAutoPayRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VipInfo == nil {
				m.VipInfo = &UserCdnVipInfo{}
			}
			if err := m.VipInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserCdnPayListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserCdnPayListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserCdnPayListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserCdnPayListRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserCdnPayListRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserCdnPayListRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VipInfo == nil {
				m.VipInfo = &UserCdnVipInfo{}
			}
			if err := m.VipInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayList = append(m.PayList, &UserCdnPayInfo{})
			if err := m.PayList[len(m.PayList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserCdnVipInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserCdnVipInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserCdnVipInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserCdnVipInfoRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserCdnVipInfoRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserCdnVipInfoRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VipInfo == nil {
				m.VipInfo = &UserCdnVipInfo{}
			}
			if err := m.VipInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChkCdnVipReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChkCdnVipReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChkCdnVipReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChkCdnVipRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChkCdnVipRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChkCdnVipRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVip", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVip = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddCdnVipReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddCdnVipReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddCdnVipReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipLvl", wireType)
			}
			m.VipLvl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipLvl |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Months", wireType)
			}
			m.Months = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Months |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddCdnVipRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddCdnVipRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddCdnVipRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sucess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sucess = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckIsSelfContactReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckIsSelfContactReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckIsSelfContactReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckIsSelfContactResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckIsSelfContactResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckIsSelfContactResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSelfContact", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSelfContact = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPhoneBookInfosReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPhoneBookInfosReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPhoneBookInfosReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneContactArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneContactArr = append(m.PhoneContactArr, &PhoneBookContact{})
			if err := m.PhoneContactArr[len(m.PhoneContactArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPhoneBookInfosResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPhoneBookInfosResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPhoneBookInfosResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReCode", wireType)
			}
			m.ReCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReCode |= (GetPhoneBookInfosResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uinfo = append(m.Uinfo, &UserInfo{})
			if err := m.Uinfo[len(m.Uinfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddLoginDayReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddLoginDayReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddLoginDayReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddLoginDayResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddLoginDayResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddLoginDayResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (AddLoginDayResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckDigitalWalletSwitchReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckDigitalWalletSwitchReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckDigitalWalletSwitchReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckDigitalWalletSwitchResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckDigitalWalletSwitchResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckDigitalWalletSwitchResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (CheckDigitalWalletSwitchResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecvLockerAddUserIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecvLockerAddUserIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecvLockerAddUserIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecvLockerAddUserIdResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecvLockerAddUserIdResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecvLockerAddUserIdResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (RecvLockerAddUserIdResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecvLockerDelUserIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecvLockerDelUserIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecvLockerDelUserIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecvLockerDelUserIdResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecvLockerDelUserIdResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecvLockerDelUserIdResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (RecvLockerDelUserIdResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecvLockerGetUserIdsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecvLockerGetUserIdsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecvLockerGetUserIdsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecvLockerGetUserIdsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecvLockerGetUserIdsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecvLockerGetUserIdsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (RecvLockerGetUserIdsResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserId = append(m.UserId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImuinfoserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImuinfoserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserId = append(m.UserId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckIsMuteContactReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckIsMuteContactReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckIsMuteContactReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckIsMuteContactResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckIsMuteContactResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckIsMuteContactResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (CheckIsMuteContactResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetUserUnsubscribeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetUserUnsubscribeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetUserUnsubscribeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			m.Val = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Val |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetUserUnsubscribeResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetUserUnsubscribeResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetUserUnsubscribeResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (SetUserUnsubscribeResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserUnsubscribeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserUnsubscribeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserUnsubscribeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserUnsubscribeResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserUnsubscribeResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserUnsubscribeResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (GetUserUnsubscribeResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			m.Val = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Val |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRelationUsersReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRelationUsersReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRelationUsersReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRelationUsersResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRelationUsersResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRelationUsersResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (GetRelationUsersResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infos = append(m.Infos, &UserInfo{})
			if err := m.Infos[len(m.Infos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserIpByAddrReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserIpByAddrReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserIpByAddrReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSignUp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSignUp = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserIpByAddrResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserIpByAddrResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserIpByAddrResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (GetUserIpByAddrResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserId = append(m.UserId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImuinfoserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImuinfoserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserId = append(m.UserId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserIpAddr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserIpAddr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserIpAddr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpPort", wireType)
			}
			m.IpPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IpPort |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastOnline", wireType)
			}
			m.LastOnline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastOnline |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSignUp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSignUp = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserIpByUserIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserIpByUserIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserIpByUserIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSignUp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSignUp = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserIpByUserIdResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserIpByUserIdResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserIpByUserIdResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (GetUserIpByUserIdResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addrs = append(m.Addrs, &UserIpAddr{})
			if err := m.Addrs[len(m.Addrs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserIpAddOrUpdateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserIpAddOrUpdateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserIpAddOrUpdateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSignUp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSignUp = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserIpAddOrUpdateResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserIpAddOrUpdateResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserIpAddOrUpdateResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (UserIpAddOrUpdateResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckUserSpaiclReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckUserSpaiclReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckUserSpaiclReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckUserSpaiclResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckUserSpaiclResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckUserSpaiclResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (CheckUserSpaiclResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InsertUSerSpaiclReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InsertUSerSpaiclReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InsertUSerSpaiclReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InsertUSerSpaiclResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InsertUSerSpaiclResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InsertUSerSpaiclResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (InsertUSerSpaiclResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelUSerSpaiclReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelUSerSpaiclReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelUSerSpaiclReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelUSerSpaiclResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelUSerSpaiclResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelUSerSpaiclResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (DelUSerSpaiclResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllUSerSpaiclReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllUSerSpaiclReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllUSerSpaiclReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllUSerSpaiclResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllUSerSpaiclResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllUSerSpaiclResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (GetAllUSerSpaiclResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TrueUserId = append(m.TrueUserId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImuinfoserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImuinfoserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TrueUserId = append(m.TrueUserId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TrueUserId", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FalseUserId = append(m.FalseUserId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImuinfoserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImuinfoserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FalseUserId = append(m.FalseUserId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FalseUserId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangePhoneReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangePhoneReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangePhoneReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCodeHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCodeHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangePhoneResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangePhoneResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangePhoneResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ChangePhoneResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VirtualPhoneNumberInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualPhoneNumberInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualPhoneNumberInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RealPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activated", wireType)
			}
			m.Activated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Activated |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindTime", wireType)
			}
			m.BindTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BindTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivateTime", wireType)
			}
			m.ActivateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivateTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivateAdminId", wireType)
			}
			m.ActivateAdminId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivateAdminId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindAdminId", wireType)
			}
			m.BindAdminId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BindAdminId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			m.OwnerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialPhoneCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitialPhoneCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserExpansionFindReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserExpansionFindReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserExpansionFindReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserExpansionFindResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserExpansionFindResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserExpansionFindResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserExpansion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserExpansion == nil {
				m.UserExpansion = &UserExpansion{}
			}
			if err := m.UserExpansion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserExpansion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserExpansion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserExpansion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserExpansionSetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserExpansionSetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserExpansionSetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserExpansion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserExpansion == nil {
				m.UserExpansion = &UserExpansion{}
			}
			if err := m.UserExpansion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserExpansionSetResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserExpansionSetResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserExpansionSetResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfoExtend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfoExtend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfoExtend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserType", wireType)
			}
			m.UserType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UselableFid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UselableFid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UselableSize", wireType)
			}
			m.UselableSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UselableSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UselableWidth", wireType)
			}
			m.UselableWidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UselableWidth |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UselableHeight", wireType)
			}
			m.UselableHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UselableHeight |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserInfoExtendReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserInfoExtendReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserInfoExtendReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserInfoExtendResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserInfoExtendResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserInfoExtendResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfoExtend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserInfoExtend = append(m.UserInfoExtend, &UserInfoExtend{})
			if err := m.UserInfoExtend[len(m.UserInfoExtend)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HistoryChangePhoneAddResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoryChangePhoneAddResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoryChangePhoneAddResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HistoryChangePhoneAddReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoryChangePhoneAddReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoryChangePhoneAddReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUpdatesByUseridReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUpdatesByUseridReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUpdatesByUseridReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUpdatesByUseridResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUpdatesByUseridResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUpdatesByUseridResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonContent", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JsonContent = append(m.JsonContent[:0], dAtA[iNdEx:postIndex]...)
			if m.JsonContent == nil {
				m.JsonContent = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSwitchVersionReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSwitchVersionReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSwitchVersionReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSwitchVersionResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSwitchVersionResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSwitchVersionResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UGetUsersChatsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UGetUsersChatsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UGetUsersChatsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Users = append(m.Users, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImuinfoserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImuinfoserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Users = append(m.Users, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Chatid = append(m.Chatid, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImuinfoserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImuinfoserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Chatid = append(m.Chatid, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Chatid", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Channelid = append(m.Channelid, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImuinfoserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImuinfoserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Channelid = append(m.Channelid, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Channelid", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolLayer", wireType)
			}
			m.ProtocolLayer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProtocolLayer |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UGetUsersChatsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UGetUsersChatsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UGetUsersChatsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channels", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channels = append(m.Channels, make([]byte, postIndex-iNdEx))
			copy(m.Channels[len(m.Channels)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Users == nil {
				m.Users = &UserInfoArray{}
			}
			if err := m.Users.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chats", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chats = append(m.Chats, make([]byte, postIndex-iNdEx))
			copy(m.Chats[len(m.Chats)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NoChats = append(m.NoChats, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImuinfoserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImuinfoserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NoChats = append(m.NoChats, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChats", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NoChans = append(m.NoChans, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImuinfoserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImuinfoserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NoChans = append(m.NoChans, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChans", wireType)
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (UChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBotInfoSuppReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBotInfoSuppReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBotInfoSuppReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Placeholder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Placeholder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Geo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Geo = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBotInfoSuppResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBotInfoSuppResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBotInfoSuppResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteUserUsernameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteUserUsernameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteUserUsernameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminId", wireType)
			}
			m.AdminId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceDelete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForceDelete = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteUserUsernameResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteUserUsernameResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteUserUsernameResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (DeleteUserUsernameResult_Code(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			m.OwnerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserLocationReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserLocationReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserLocationReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Detail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserLocationResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserLocationResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserLocationResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserGrenderReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserGrenderReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserGrenderReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grender", wireType)
			}
			m.Grender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Grender |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserGrenderResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserGrenderResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserGrenderResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserEmailReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserEmailReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserEmailReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserEmailResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserEmailResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserEmailResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadContactsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadContactsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadContactsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneContactArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneContactArr = append(m.PhoneContactArr, &PhoneBookContact{})
			if err := m.PhoneContactArr[len(m.PhoneContactArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadContactsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadContactsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadContactsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Error = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyContactReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyContactReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyContactReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyUserId", wireType)
			}
			m.ApplyUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplyUserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromType", wireType)
			}
			m.FromType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyContactResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyContactResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyContactResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromApplyId", wireType)
			}
			m.FromApplyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromApplyId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromReplyId", wireType)
			}
			m.FromReplyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromReplyId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToApplyId", wireType)
			}
			m.ToApplyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToApplyId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToReplyId", wireType)
			}
			m.ToReplyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToReplyId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToUnreadCount", wireType)
			}
			m.ToUnreadCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToUnreadCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddContact", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddContact = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsGreetApplyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsGreetApplyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsGreetApplyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyId", wireType)
			}
			m.ApplyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplyId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Greet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Greet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsGreetApplyResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsGreetApplyResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsGreetApplyResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromApplyId", wireType)
			}
			m.FromApplyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromApplyId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromReplyId", wireType)
			}
			m.FromReplyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromReplyId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToApplyId", wireType)
			}
			m.ToApplyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToApplyId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToReplyId", wireType)
			}
			m.ToReplyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToReplyId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadCount", wireType)
			}
			m.UnreadCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAppliedContactsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAppliedContactsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAppliedContactsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAppliedContactsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAppliedContactsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAppliedContactsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Error = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppliedArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppliedArr = append(m.AppliedArr, &Applied{})
			if err := m.AppliedArr[len(m.AppliedArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Applied) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Applied: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Applied: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApplyUser == nil {
				m.ApplyUser = &UserInfo{}
			}
			if err := m.ApplyUser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Detail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyContactReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyContactReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyContactReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifyUserId", wireType)
			}
			m.VerifyUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VerifyUserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyContactResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyContactResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyContactResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Error = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAppliedHistoryContactReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAppliedHistoryContactReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAppliedHistoryContactReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAppliedHistoryContactResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAppliedHistoryContactResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAppliedHistoryContactResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAppliedSomeContactReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAppliedSomeContactReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAppliedSomeContactReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImuinfoserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImuinfoserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAppliedSomeContactResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAppliedSomeContactResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAppliedSomeContactResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadAppliedHistoryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadAppliedHistoryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadAppliedHistoryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadAppliedHistoryResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadAppliedHistoryResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadAppliedHistoryResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetContactsApplyDifferenceReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetContactsApplyDifferenceReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetContactsApplyDifferenceReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyId", wireType)
			}
			m.ApplyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplyId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyDifference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyDifference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyDifference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyId", wireType)
			}
			m.ApplyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplyId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyId", wireType)
			}
			m.ReplyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Greet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Greet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromType", wireType)
			}
			m.FromType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetContactsApplyDifferenceResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetContactsApplyDifferenceResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetContactsApplyDifferenceResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Applies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Applies = append(m.Applies, &ApplyDifference{})
			if err := m.Applies[len(m.Applies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxApplyId", wireType)
			}
			m.MaxApplyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxApplyId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadCount", wireType)
			}
			m.UnreadCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetContactsApplyDifferenceV2Req) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetContactsApplyDifferenceV2Req: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetContactsApplyDifferenceV2Req: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyId", wireType)
			}
			m.ApplyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplyId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetContactsApplyDifferenceV2Result) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetContactsApplyDifferenceV2Result: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetContactsApplyDifferenceV2Result: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Applies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Applies = append(m.Applies, &ApplyDifference{})
			if err := m.Applies[len(m.Applies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxApplyId", wireType)
			}
			m.MaxApplyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxApplyId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadCount", wireType)
			}
			m.UnreadCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchUserByPhoneReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchUserByPhoneReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchUserByPhoneReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchUserByPhoneResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchUserByPhoneResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchUserByPhoneResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserInfos = append(m.UserInfos, &UserInfo{})
			if err := m.UserInfos[len(m.UserInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Detail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateGroupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateGroupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateGroupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIdArr = append(m.UserIdArr, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImuinfoserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImuinfoserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIdArr = append(m.UserIdArr, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdArr", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateGroupResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateGroupResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateGroupResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetUserGroupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetUserGroupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetUserGroupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserInfos = append(m.UserInfos, &UserInfo{})
			if err := m.UserInfos[len(m.UserInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetUserGroupResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetUserGroupResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetUserGroupResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFullUserReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFullUserReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFullUserReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFullUserResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFullUserResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFullUserResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uinfo == nil {
				m.Uinfo = &UserInfo{}
			}
			if err := m.Uinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Isblocked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Isblocked = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCallsPrivate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PhoneCallsPrivate = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCallsAvailable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PhoneCallsAvailable = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonChat", wireType)
			}
			m.CommonChat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommonChat |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extend", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extend = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserExpansionReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserExpansionReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserExpansionReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserExpansionResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserExpansionResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserExpansionResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeGroupOrderReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeGroupOrderReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeGroupOrderReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupOrder = append(m.GroupOrder, &GroupOrder{})
			if err := m.GroupOrder[len(m.GroupOrder)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: groupOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: groupOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadCount", wireType)
			}
			m.UnreadCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeGroupOrderResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeGroupOrderResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeGroupOrderResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteGroupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteGroupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteGroupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteGroupResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteGroupResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteGroupResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteGroupsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteGroupsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteGroupsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GroupIds = append(m.GroupIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImuinfoserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImuinfoserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GroupIds = append(m.GroupIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupIds", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteGroupsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteGroupsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteGroupsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCustomerListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCustomerListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCustomerListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOrient", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOrient = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomerList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomerList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomerList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOrient", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOrient = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			m.Sort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sort |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCustomerListReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCustomerListReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCustomerListReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Customers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Customers = append(m.Customers, &CustomerList{})
			if err := m.Customers[len(m.Customers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsCustomerByUserIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsCustomerByUserIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsCustomerByUserIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsCustomerByUserIdReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsCustomerByUserIdReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsCustomerByUserIdReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Yes", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Yes = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCustomerOrientUsersReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCustomerOrientUsersReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCustomerOrientUsersReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCustomerOrientUsersReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCustomerOrientUsersReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCustomerOrientUsersReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIds = append(m.UserIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImuinfoserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImuinfoserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIds = append(m.UserIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIds", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckSpecialUserReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckSpecialUserReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckSpecialUserReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckSpecialUserReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckSpecialUserReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckSpecialUserReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSpecial", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSpecial = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetForceGroupListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetForceGroupListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetForceGroupListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetForceGroupListReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetForceGroupListReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetForceGroupListReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GroupIds = append(m.GroupIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImuinfoserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImuinfoserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GroupIds = append(m.GroupIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupIds", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNotForceGroupListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNotForceGroupListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNotForceGroupListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNotForceGroupListReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNotForceGroupListReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNotForceGroupListReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GroupIds = append(m.GroupIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImuinfoserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImuinfoserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GroupIds = append(m.GroupIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupIds", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PassWordRegistryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PassWordRegistryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PassWordRegistryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassWord", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassWord = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PassWordRegistryReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PassWordRegistryReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PassWordRegistryReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (PasswordRegistryErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &UserInfo{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PassWordLoginReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PassWordLoginReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PassWordLoginReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PassWordLoginReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PassWordLoginReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PassWordLoginReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (PasswordRegistryErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &UserInfo{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangePassWordReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangePassWordReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangePassWordReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPassWord", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewPassWord = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangePassWordReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangePassWordReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangePassWordReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (PasswordRegistryErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &UserInfo{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegistryUserByUsernameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegistryUserByUsernameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegistryUserByUsernameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegistryUserByUsernameReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegistryUserByUsernameReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegistryUserByUsernameReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (PasswordRegistryErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &UserInfo{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuthTokenReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuthTokenReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuthTokenReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuthTokenReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuthTokenReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuthTokenReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UntilDate", wireType)
			}
			m.UntilDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UntilDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (OAuthLoginError(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BindUserTokenReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BindUserTokenReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BindUserTokenReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BindUserTokenReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BindUserTokenReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BindUserTokenReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (OAuthLoginError(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserByAuthTokenReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserByAuthTokenReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserByAuthTokenReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserByAuthTokenReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserByAuthTokenReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserByAuthTokenReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &UserInfo{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (OAuthLoginError(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyAuthTokenReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyAuthTokenReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyAuthTokenReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyAuthTokenReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyAuthTokenReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyAuthTokenReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (OAuthLoginError(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignUpV1Req) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignUpV1Req: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignUpV1Req: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCodeHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCodeHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBot = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotInfoVersion", wireType)
			}
			m.BotInfoVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotInfoVersion |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotChatHistory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotChatHistory = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotNoChats", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotNoChats = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcId", wireType)
			}
			m.DcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DcId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Birthday", wireType)
			}
			m.Birthday = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Birthday |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyCode", wireType)
			}
			m.ProxyCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProxyCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignUpV1Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignUpV1Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignUpV1Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (SignUpV1Reply_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserInfo == nil {
				m.UserInfo = &UserInfo{}
			}
			if err := m.UserInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsGetCommonContactsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsGetCommonContactsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsGetCommonContactsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIds = append(m.UserIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImuinfoserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImuinfoserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIds = append(m.UserIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsGetCommonContactsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsGetCommonContactsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsGetCommonContactsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserInfos = append(m.UserInfos, &UserInfo{})
			if err := m.UserInfos[len(m.UserInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchUserByNicknameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchUserByNicknameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchUserByNicknameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIds = append(m.UserIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImuinfoserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImuinfoserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIds = append(m.UserIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIds", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchUserByNicknameResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchUserByNicknameResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchUserByNicknameResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserInfos = append(m.UserInfos, &UserInfo{})
			if err := m.UserInfos[len(m.UserInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserRoleInfoByIdsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserRoleInfoByIdsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserRoleInfoByIdsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIds = append(m.UserIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImuinfoserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImuinfoserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIds = append(m.UserIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserRoleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserRoleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserRoleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBot = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserRoleInfoByIdsRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserRoleInfoByIdsRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserRoleInfoByIdsRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleArr = append(m.RoleArr, &UserRoleInfo{})
			if err := m.RoleArr[len(m.RoleArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InnerUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InnerUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InnerUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passwd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Passwd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnabledBy", wireType)
			}
			m.EnabledBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnabledBy |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnabledAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnabledAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InnerUserOpReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InnerUserOpReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InnerUserOpReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpType", wireType)
			}
			m.OpType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpType |= (InnerUserOpReq_OperType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InnerUserOpRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InnerUserOpRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InnerUserOpRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResCode", wireType)
			}
			m.ResCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserArr = append(m.UserArr, &InnerUser{})
			if err := m.UserArr[len(m.UserArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BindRealPhoneReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BindRealPhoneReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BindRealPhoneReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BindRealPhoneRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BindRealPhoneRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BindRealPhoneRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResCode", wireType)
			}
			m.ResCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserRelationWithIdsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserRelationWithIdsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserRelationWithIdsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.WithIds = append(m.WithIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImuinfoserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImuinfoserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.WithIds = append(m.WithIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field WithIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Relation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Relation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Relation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			m.User = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.User |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (Relation_RelationType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserRelationWithIdsRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserRelationWithIdsRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserRelationWithIdsRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResCode", wireType)
			}
			m.ResCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relations = append(m.Relations, &Relation{})
			if err := m.Relations[len(m.Relations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserVerifiedReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserVerifiedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserVerifiedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verified = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserVerifiedResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserVerifiedResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserVerifiedResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uinfo == nil {
				m.Uinfo = &UserInfo{}
			}
			if err := m.Uinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddPhoneBookContactsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddPhoneBookContactsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddPhoneBookContactsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Contact) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Contact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Contact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddPhoneBookContactsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddPhoneBookContactsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddPhoneBookContactsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contacts = append(m.Contacts, &Contact{})
			if err := m.Contacts[len(m.Contacts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InviteCodeBindReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InviteCodeBindReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InviteCodeBindReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteBy", wireType)
			}
			m.InviteBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InviteBy |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InviteCodeBindRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InviteCodeBindRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InviteCodeBindRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MyTeamReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MyTeamReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MyTeamReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MyTeamRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MyTeamRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MyTeamRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Users = append(m.Users, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImuinfoserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImuinfoserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Users = append(m.Users, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RealNameCertificationReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RealNameCertificationReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RealNameCertificationReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentityNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrontImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrontImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReverseImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReverseImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RealNameCertificationRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RealNameCertificationRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RealNameCertificationRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCertificationResultReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCertificationResultReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCertificationResultReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CertificationResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertificationResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertificationResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentityNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrontImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrontImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReverseImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReverseImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReasonCode", wireType)
			}
			m.ReasonCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReasonCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCertificationResultRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCertificationResultRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCertificationResultRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &CertificationResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyCertificationReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyCertificationReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyCertificationReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReasonCode", wireType)
			}
			m.ReasonCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReasonCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyCertificationRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyCertificationRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyCertificationRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserDetailV1Req) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserDetailV1Req: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserDetailV1Req: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Birthday", wireType)
			}
			m.Birthday = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Birthday |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extend", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extend = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserDetailV1Rsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserDetailV1Rsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserDetailV1Rsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImuinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImuinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipImuinfoserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowImuinfoserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImuinfoserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthImuinfoserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowImuinfoserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipImuinfoserver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthImuinfoserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowImuinfoserver   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/pbimuinfoserver/imuinfoserver.proto", fileDescriptorImuinfoserver)
}

var fileDescriptorImuinfoserver = []byte{
	// 15591 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0xbd, 0xe9, 0x8f, 0x1c, 0x49,
	0x76, 0x18, 0xce, 0xac, 0xa3, 0x8f, 0xd7, 0x57, 0x31, 0xbb, 0x49, 0x16, 0x9b, 0x57, 0x33, 0x87,
	0x33, 0xcb, 0x19, 0xcd, 0x90, 0x33, 0x9c, 0x99, 0xbd, 0x7f, 0xd2, 0x56, 0x1f, 0x24, 0x6b, 0xa7,
	0xaf, 0xa9, 0x62, 0x93, 0xb3, 0x3b, 0xda, 0x2d, 0x65, 0x57, 0x46, 0x75, 0xa7, 0x98, 0x9d, 0x59,
	0x93, 0x99, 0xd5, 0x9c, 0xda, 0x9f, 0xa5, 0xdd, 0x85, 0x76, 0xb4, 0x3a, 0x56, 0xe7, 0x5a, 0x96,
	0x2d, 0x0b, 0xc2, 0xea, 0x96, 0x57, 0x92, 0x65, 0x59, 0x32, 0x60, 0x19, 0x92, 0x2d, 0x19, 0x16,
	0x20, 0xc1, 0x36, 0x64, 0x09, 0x90, 0xfd, 0xc9, 0x86, 0x20, 0x08, 0xf0, 0x1f, 0x60, 0xc0, 0x80,
	0xe1, 0x2f, 0x46, 0x5c, 0x99, 0x11, 0x99, 0x91, 0x59, 0xd9, 0x5d, 0x9c, 0xdd, 0x01, 0xf4, 0xa5,
	0xbb, 0x22, 0xe2, 0x65, 0x44, 0xbc, 0x17, 0x2f, 0x5e, 0xbc, 0x78, 0xf1, 0xe2, 0x05, 0xdc, 0x3f,
	0xb0, 0x43, 0xc7, 0xdc, 0xbf, 0xd5, 0x3d, 0x34, 0xc3, 0x00, 0xf9, 0xc7, 0xc8, 0xbf, 0x65, 0x1f,
	0xdd, 0xb6, 0xdd, 0x10, 0xf9, 0x3d, 0xb3, 0x8b, 0xfa, 0xbe, 0xb7, 0x3f, 0xe8, 0xdd, 0xee, 0xef,
	0xdb, 0x47, 0x03, 0xdb, 0xed, 0x79, 0x14, 0xe4, 0xb6, 0x94, 0xba, 0xd5, 0xf7, 0xbd, 0xd0, 0xd3,
	0x17, 0x12, 0x40, 0xcb, 0x1f, 0x2d, 0x58, 0x75, 0xd7, 0x3b, 0x3a, 0x62, 0xff, 0x68, 0x55, 0xc6,
	0x63, 0xd0, 0xef, 0xa1, 0x70, 0x2f, 0x40, 0x7e, 0xd3, 0xed, 0x79, 0xab, 0xc3, 0xa6, 0xd5, 0x42,
	0xef, 0xe8, 0x17, 0x60, 0x32, 0x40, 0x4e, 0xaf, 0x63, 0x5b, 0x75, 0x6d, 0x45, 0xbb, 0x59, 0x6d,
	0x4d, 0xe0, 0x64, 0xd3, 0xc2, 0x05, 0x83, 0x00, 0xf9, 0xb8, 0xa0, 0x44, 0x0b, 0x70, 0xb2, 0x69,
	0xe9, 0xcf, 0x40, 0xd5, 0x42, 0xfb, 0x83, 0x83, 0x7a, 0x79, 0x45, 0xbb, 0x39, 0x73, 0x67, 0xee,
	0x16, 0x6b, 0x65, 0x1d, 0x67, 0xb6, 0x68, 0x99, 0xd1, 0x87, 0x73, 0x89, 0xc6, 0x1a, 0xbe, 0x9f,
	0xdb, 0xde, 0x45, 0x98, 0x62, 0xed, 0x05, 0xf5, 0xd2, 0x4a, 0xf9, 0x66, 0xb5, 0x35, 0x49, 0x1b,
	0x0c, 0x8a, 0xb5, 0xb8, 0x0a, 0x73, 0xbc, 0xb9, 0x86, 0xef, 0x9b, 0x43, 0xfd, 0x15, 0x20, 0x3d,
	0xb6, 0xdd, 0xba, 0xb6, 0x52, 0xbe, 0x39, 0x73, 0xe7, 0xe2, 0xad, 0x04, 0x2d, 0x6f, 0x0d, 0x18,
	0x7c, 0x8b, 0x01, 0x1a, 0x7f, 0x35, 0x4d, 0x3b, 0x81, 0x33, 0x45, 0x02, 0x68, 0x12, 0x01, 0xae,
	0xc1, 0x8c, 0xd9, 0xed, 0xa2, 0x20, 0xe8, 0x1c, 0x9a, 0xc1, 0x21, 0xa1, 0x4e, 0xb9, 0x05, 0x34,
	0xeb, 0xbe, 0x19, 0x1c, 0xea, 0x57, 0x00, 0x7a, 0xb6, 0x1f, 0x84, 0x1d, 0xd7, 0x3c, 0x42, 0xa4,
	0xd3, 0xd3, 0xad, 0x69, 0x92, 0xb3, 0x6d, 0x1e, 0x21, 0xfd, 0x12, 0x4c, 0x3b, 0x26, 0x2f, 0xad,
	0x90, 0xd2, 0x29, 0x9c, 0x41, 0x0a, 0x97, 0x69, 0x0f, 0x48, 0x59, 0x95, 0x96, 0xf1, 0xb4, 0xbe,
	0x04, 0xd5, 0xfe, 0xa1, 0xe7, 0xa2, 0xfa, 0x04, 0x29, 0xa0, 0x09, 0xfd, 0x3c, 0x4c, 0x04, 0xa1,
	0x19, 0x0e, 0x82, 0xfa, 0x24, 0x23, 0x28, 0x49, 0xe1, 0x6e, 0x92, 0x66, 0x1c, 0xef, 0xc0, 0x1b,
	0x84, 0xf5, 0x29, 0x52, 0x08, 0x38, 0x6b, 0x93, 0xe4, 0xe8, 0xcf, 0xc2, 0x7c, 0xd7, 0x19, 0x04,
	0x21, 0xf2, 0x3b, 0x3e, 0x3a, 0xb0, 0x3d, 0xb7, 0x3e, 0x4d, 0x60, 0xe6, 0x58, 0x6e, 0x8b, 0x64,
	0xe2, 0x81, 0xe9, 0x79, 0x6e, 0xd8, 0xf1, 0x0f, 0xf6, 0xeb, 0x40, 0x1a, 0x9e, 0xc4, 0xe9, 0xd6,
	0xc1, 0xbe, 0x7e, 0x1d, 0x66, 0xbb, 0xde, 0xc0, 0x0d, 0xfd, 0x61, 0xa7, 0xeb, 0x59, 0xa8, 0x3e,
	0x43, 0x8a, 0x67, 0x58, 0xde, 0x9a, 0x67, 0xf1, 0x3e, 0x87, 0x5e, 0x7d, 0x36, 0xea, 0x73, 0xe8,
	0xe9, 0x37, 0xa1, 0xb6, 0xef, 0x85, 0x1d, 0x3c, 0x16, 0x9d, 0x63, 0xe4, 0x07, 0xb8, 0xf1, 0x39,
	0xd2, 0xf8, 0xfc, 0xbe, 0x17, 0x62, 0xf2, 0x3f, 0xa4, 0xb9, 0xfa, 0x6b, 0x70, 0x9e, 0x42, 0x3a,
	0xb6, 0x8b, 0x3a, 0x7d, 0xc7, 0xec, 0xa2, 0x43, 0xcf, 0xb1, 0x90, 0x5f, 0x9f, 0x27, 0x15, 0x2e,
	0x11, 0x78, 0x5c, 0xb8, 0x1b, 0x97, 0xe9, 0x2f, 0x81, 0xee, 0xa3, 0x20, 0xf4, 0xed, 0x6e, 0x68,
	0x7b, 0x6e, 0xc7, 0x47, 0x66, 0xe0, 0xb9, 0xf5, 0x05, 0xf2, 0xc5, 0x59, 0xa1, 0xa4, 0x45, 0x0a,
	0xe8, 0x88, 0xb8, 0x07, 0x14, 0x89, 0x1a, 0x1f, 0x11, 0xf7, 0x80, 0x60, 0x80, 0xe9, 0xe8, 0x75,
	0x4d, 0xa7, 0x43, 0x69, 0x7f, 0x96, 0x14, 0x03, 0xc9, 0xda, 0x25, 0x03, 0x50, 0x87, 0x49, 0x0b,
	0x39, 0x28, 0x44, 0x56, 0x5d, 0x5f, 0xd1, 0x6e, 0x4e, 0xb5, 0x78, 0x52, 0xaf, 0x41, 0x79, 0xdf,
	0x0b, 0xeb, 0x8b, 0x24, 0x17, 0xff, 0xe4, 0x88, 0xe3, 0xd9, 0xdb, 0x39, 0xb4, 0x83, 0xd0, 0xf3,
	0x87, 0xf5, 0x25, 0x52, 0x8c, 0x11, 0x5f, 0x3b, 0x34, 0xc3, 0xfb, 0x34, 0x17, 0x37, 0x8b, 0x21,
	0x5d, 0x8f, 0xcc, 0xf4, 0xfa, 0x39, 0x02, 0x04, 0xfb, 0x5e, 0xb8, 0x4d, 0x73, 0x30, 0xa7, 0x1c,
	0x23, 0xdf, 0xee, 0xd9, 0xc8, 0xaa, 0x9f, 0x27, 0xa5, 0x51, 0x5a, 0xbf, 0x0a, 0xc0, 0xb1, 0x44,
	0x56, 0xfd, 0x02, 0xfd, 0x36, 0xce, 0xc1, 0x1d, 0x3b, 0xb2, 0xdd, 0x7a, 0x9d, 0x76, 0xec, 0xc8,
	0x76, 0xf5, 0x1b, 0x30, 0x2f, 0xd0, 0xf9, 0x00, 0x79, 0xf5, 0x8b, 0xa4, 0x70, 0x36, 0xa2, 0xef,
	0x3d, 0xe4, 0xe9, 0x3a, 0x54, 0xf0, 0x74, 0xad, 0x2f, 0x93, 0x32, 0xf2, 0x1b, 0xa3, 0xdf, 0xf5,
	0xdc, 0xd0, 0xec, 0x86, 0xf5, 0x4b, 0x14, 0x7d, 0x96, 0xd4, 0x9f, 0x81, 0xb9, 0xa3, 0x41, 0x68,
	0x3a, 0x1d, 0x5e, 0x7e, 0x99, 0x56, 0x49, 0x32, 0xd7, 0x18, 0xd0, 0x25, 0x98, 0x0e, 0x42, 0xd3,
	0xef, 0x1c, 0x99, 0xfe, 0xe3, 0xfa, 0x15, 0x8a, 0x07, 0xce, 0xd8, 0x32, 0xfd, 0xc7, 0xfa, 0x8b,
	0xa0, 0x07, 0x87, 0xde, 0x13, 0x5e, 0x01, 0x1b, 0x82, 0xab, 0x04, 0xaa, 0x86, 0x4b, 0x58, 0x2d,
	0x74, 0x20, 0x2e, 0xc2, 0xd4, 0x81, 0xef, 0x0d, 0xfa, 0x78, 0xca, 0x5e, 0x23, 0xdc, 0x34, 0x49,
	0xd2, 0x4d, 0x8b, 0x74, 0xd2, 0x47, 0x26, 0xa6, 0xc6, 0x0a, 0x2d, 0x61, 0x49, 0xdc, 0x3e, 0x99,
	0xe6, 0xe1, 0xb0, 0x8f, 0xea, 0xd7, 0x49, 0x19, 0x99, 0x71, 0x0f, 0x86, 0x7d, 0x84, 0x67, 0x32,
	0x29, 0x74, 0xcc, 0x7d, 0x07, 0xd5, 0x0d, 0x52, 0x4a, 0xc0, 0x37, 0x71, 0x46, 0x5c, 0x8c, 0x8e,
	0x91, 0x53, 0x7f, 0x46, 0x28, 0xc6, 0x19, 0x98, 0xf7, 0xcd, 0x7d, 0x3c, 0xf7, 0x6e, 0x50, 0xde,
	0x27, 0x09, 0x3c, 0x6e, 0xfb, 0xb6, 0x1f, 0x1e, 0x5a, 0xe6, 0xb0, 0xfe, 0x2c, 0x6d, 0x8f, 0xa7,
	0xf1, 0xb8, 0x04, 0xe8, 0xdd, 0xfa, 0x73, 0x24, 0x1b, 0xff, 0xc4, 0x75, 0xf4, 0x1c, 0xf3, 0x20,
	0xa8, 0x7f, 0x88, 0xe4, 0xd1, 0x04, 0x1e, 0x07, 0xd3, 0xb2, 0xfc, 0xfa, 0x4d, 0x52, 0x31, 0xf9,
	0x8d, 0xe5, 0x00, 0x7a, 0x37, 0x44, 0xae, 0x55, 0x7f, 0x9e, 0xe4, 0xb2, 0x94, 0xf1, 0x00, 0x96,
	0x98, 0x28, 0xde, 0x78, 0xb7, 0x6f, 0xfb, 0x48, 0x90, 0xfc, 0x6a, 0xf9, 0x16, 0x89, 0xdb, 0x52,
	0x8e, 0xb8, 0x7d, 0x0c, 0x17, 0x14, 0xb5, 0x06, 0x03, 0x27, 0xa4, 0x1d, 0xc1, 0x79, 0xbc, 0x5e,
	0x9a, 0xd2, 0x3f, 0x0a, 0xd3, 0x1b, 0xbe, 0xef, 0xf9, 0x64, 0x96, 0xe1, 0xba, 0xe7, 0xef, 0x2c,
	0xa7, 0x64, 0x72, 0x0b, 0x6d, 0xf8, 0x3e, 0x9e, 0x77, 0xad, 0x18, 0xd8, 0x78, 0x03, 0xe6, 0x59,
	0x63, 0xab, 0x43, 0x2a, 0xf4, 0x22, 0x51, 0xa8, 0x89, 0xa2, 0xb0, 0x50, 0xcf, 0xbf, 0x1f, 0xce,
	0x0a, 0x4b, 0x13, 0xeb, 0xf3, 0x6d, 0xa8, 0xee, 0xe1, 0x5e, 0x90, 0xfa, 0x72, 0xd7, 0x0a, 0x0a,
	0x37, 0x06, 0x32, 0xef, 0x69, 0x50, 0x57, 0xad, 0x8d, 0xc9, 0x7e, 0x94, 0xdf, 0xe7, 0x7e, 0x1c,
	0x45, 0x74, 0x58, 0x1d, 0xee, 0xf1, 0x25, 0x26, 0x73, 0x79, 0x16, 0xd7, 0xa5, 0x52, 0x62, 0x5d,
	0x2a, 0xb4, 0x3e, 0x7f, 0x11, 0xf4, 0x41, 0xdf, 0x32, 0x43, 0xb4, 0x8b, 0x57, 0x00, 0x4a, 0xfa,
	0x1c, 0x26, 0x8c, 0xd6, 0x8d, 0x92, 0xb8, 0x6e, 0x9c, 0x83, 0x89, 0xc7, 0x68, 0x88, 0xa1, 0xcb,
	0x64, 0xd5, 0xad, 0x3e, 0x46, 0x43, 0x91, 0x63, 0x2b, 0x39, 0x1d, 0xd8, 0x81, 0x85, 0x7b, 0x28,
	0x2c, 0xd6, 0x7a, 0xa1, 0x0a, 0xdf, 0x84, 0x73, 0x7b, 0x04, 0x23, 0x4c, 0x3d, 0x52, 0x2f, 0x1b,
	0x44, 0x69, 0x4c, 0xb4, 0x93, 0x8c, 0x89, 0x15, 0xe9, 0x68, 0x62, 0x7d, 0x4b, 0x50, 0x25, 0x49,
	0xce, 0xec, 0x24, 0x31, 0xc6, 0xc8, 0xff, 0xa1, 0x06, 0x4b, 0x42, 0xcf, 0x7d, 0xaf, 0x67, 0x3b,
	0x68, 0xd4, 0x68, 0x50, 0x29, 0x54, 0x12, 0xa5, 0xd0, 0x38, 0x7a, 0x4e, 0x24, 0x1b, 0xab, 0xa2,
	0x6c, 0x8c, 0xe8, 0x3e, 0x91, 0x43, 0xf7, 0xdf, 0xd5, 0xe0, 0x6c, 0xdc, 0xfd, 0xbb, 0x03, 0xc7,
	0xc9, 0xed, 0x7b, 0xcc, 0x33, 0x25, 0x91, 0x67, 0x22, 0x94, 0xca, 0x22, 0x4a, 0x35, 0x28, 0xb7,
	0xd1, 0xbb, 0xa4, 0xb7, 0xd5, 0x16, 0xfe, 0x89, 0x73, 0x1a, 0x07, 0x54, 0x17, 0xab, 0xb6, 0xf0,
	0x4f, 0xbc, 0x96, 0x34, 0x2c, 0xcb, 0x47, 0x41, 0xc0, 0x14, 0x31, 0x9e, 0xc4, 0x25, 0x1b, 0x58,
	0xe8, 0x22, 0x8b, 0xe8, 0x62, 0xd3, 0x2d, 0x9e, 0x34, 0x76, 0x45, 0x8a, 0xd3, 0x2e, 0x8f, 0xc9,
	0x2a, 0x5f, 0xd1, 0xe0, 0x82, 0x62, 0x10, 0xbf, 0xd5, 0xd2, 0xec, 0x3f, 0x69, 0x30, 0xdd, 0x26,
	0x0a, 0x67, 0xae, 0x76, 0x9f, 0x31, 0x08, 0xb1, 0xee, 0x5a, 0x26, 0x6b, 0x3a, 0xd7, 0x5d, 0xeb,
	0x30, 0xe9, 0xf5, 0x7a, 0x58, 0xeb, 0x60, 0x43, 0xc1, 0x93, 0xfa, 0x65, 0x98, 0x76, 0x3c, 0xf7,
	0xc0, 0x0e, 0x07, 0x16, 0x1d, 0x14, 0xad, 0x15, 0x67, 0x60, 0x29, 0xe5, 0x98, 0x21, 0x2d, 0x9c,
	0x20, 0x85, 0x51, 0x3a, 0xe6, 0xad, 0xc9, 0x1c, 0xde, 0xba, 0x0f, 0xb3, 0x1c, 0x9b, 0x31, 0xc7,
	0xe7, 0x00, 0x16, 0xe8, 0xf0, 0xd0, 0xf5, 0x31, 0x97, 0x3a, 0xf1, 0x8a, 0x59, 0x92, 0x56, 0xcc,
	0x42, 0x82, 0x75, 0x1b, 0x74, 0xb9, 0xa1, 0x31, 0x3b, 0xfe, 0x8b, 0x78, 0x7a, 0x05, 0xc8, 0x5f,
	0xa3, 0xbb, 0x80, 0xb5, 0x43, 0xd3, 0x3d, 0xc8, 0x59, 0x18, 0x2e, 0xc3, 0x34, 0xdb, 0x2f, 0x34,
	0xf9, 0x4e, 0x31, 0xce, 0xc0, 0x9f, 0xf5, 0x7c, 0xef, 0xa8, 0x63, 0xf7, 0x99, 0x04, 0x98, 0xc0,
	0xc9, 0x66, 0x3f, 0x2e, 0xb0, 0xd8, 0xd4, 0xa2, 0x05, 0x56, 0x31, 0x11, 0xd0, 0x86, 0x0b, 0xa9,
	0x2e, 0x3e, 0x8d, 0x19, 0xc5, 0xe4, 0x0a, 0x9e, 0x1e, 0x58, 0x4a, 0xe5, 0xca, 0x15, 0xb6, 0x22,
	0x6e, 0x27, 0x56, 0xc4, 0xed, 0xa2, 0x2b, 0xa2, 0x30, 0x27, 0x2a, 0xc2, 0x9c, 0x30, 0xbe, 0x1c,
	0x49, 0xe7, 0xb8, 0x1b, 0xdf, 0xea, 0x59, 0xfd, 0x16, 0xe7, 0xa9, 0x3d, 0xae, 0xcc, 0x9e, 0x46,
	0xc4, 0xea, 0x50, 0x71, 0xd0, 0xb1, 0xc3, 0x24, 0x2c, 0xf9, 0x2d, 0x2f, 0x9a, 0xac, 0xe6, 0x31,
	0xc7, 0x0d, 0xc1, 0x62, 0x5c, 0xe5, 0xc6, 0xbb, 0x74, 0x5f, 0x77, 0xf2, 0xde, 0x5e, 0x05, 0x40,
	0xe4, 0x63, 0xb2, 0x1b, 0xa5, 0xab, 0x99, 0x90, 0x63, 0xb4, 0xe0, 0x7c, 0xba, 0x99, 0x31, 0xbb,
	0xde, 0x82, 0x73, 0x6b, 0x87, 0xa8, 0xfb, 0x98, 0xec, 0x5f, 0xf0, 0x7e, 0x9b, 0xee, 0xbb, 0xdf,
	0x19, 0x47, 0xbf, 0x7d, 0x00, 0x75, 0x55, 0x9d, 0x63, 0xf6, 0xf4, 0x31, 0x2c, 0xad, 0x93, 0x5d,
	0x6d, 0xa3, 0x4b, 0xb6, 0xf7, 0x23, 0x77, 0x11, 0xe7, 0x60, 0xc2, 0x42, 0x4e, 0x6c, 0x3e, 0xaa,
	0x5a, 0xc8, 0x29, 0x6a, 0x3d, 0xda, 0x84, 0xda, 0x3a, 0x72, 0x58, 0x4b, 0x63, 0x77, 0xfd, 0x4f,
	0x34, 0x98, 0x5b, 0xf5, 0x42, 0x3a, 0x78, 0xf9, 0xa6, 0x1d, 0x95, 0x5d, 0xa2, 0xa4, 0xb4, 0x4b,
	0xa8, 0x36, 0xf2, 0x65, 0xe5, 0x46, 0xfe, 0x2a, 0xdf, 0xc8, 0x13, 0x60, 0x32, 0xd7, 0xa7, 0x5a,
	0xd3, 0x64, 0x23, 0x8f, 0xc1, 0x62, 0x8a, 0x54, 0x73, 0x95, 0xd7, 0x45, 0x09, 0x85, 0xb1, 0x89,
	0xf2, 0x2b, 0x1a, 0xcc, 0xad, 0x23, 0xbe, 0x0b, 0xcf, 0x1d, 0xc9, 0x2b, 0x00, 0x7c, 0xff, 0x6d,
	0xc7, 0x22, 0x9e, 0xe6, 0xa4, 0xcd, 0x61, 0xe5, 0x94, 0x39, 0x4c, 0x2d, 0xe7, 0x8a, 0xe1, 0xfd,
	0x7d, 0x84, 0x13, 0xa2, 0x5e, 0x7e, 0xab, 0xe5, 0xe0, 0xbf, 0xd7, 0xa0, 0xd6, 0xe8, 0x76, 0x51,
	0x3f, 0x2c, 0x42, 0xa8, 0x8b, 0x30, 0x65, 0xf6, 0xfb, 0xce, 0x30, 0x26, 0xd3, 0x24, 0x49, 0x53,
	0x1a, 0x9e, 0x5a, 0x55, 0x2e, 0x42, 0x28, 0xc9, 0xf6, 0x31, 0x21, 0xd9, 0x3e, 0x8c, 0x43, 0x58,
	0x4c, 0xe0, 0x40, 0xc8, 0x28, 0xac, 0xc0, 0x9a, 0xb4, 0x02, 0x9f, 0x9e, 0x5c, 0x3b, 0x30, 0xb7,
	0xc6, 0xf9, 0x82, 0x5b, 0x42, 0x05, 0xd6, 0xd1, 0x46, 0xb0, 0x4e, 0xca, 0x92, 0x6a, 0xfc, 0xa6,
	0x26, 0x8e, 0x7f, 0x6c, 0x42, 0x56, 0xd3, 0x7f, 0x15, 0x66, 0x59, 0xdd, 0x36, 0xde, 0x52, 0x13,
	0x33, 0xf2, 0xcc, 0x9d, 0xab, 0xa9, 0xbe, 0x4b, 0x7d, 0x6c, 0x49, 0xdf, 0x8c, 0xb5, 0xc3, 0x7c,
	0x04, 0x17, 0xd6, 0x8e, 0xac, 0x16, 0x0a, 0xe8, 0x16, 0x8e, 0x35, 0x43, 0x14, 0x63, 0xcc, 0x1a,
	0x47, 0x96, 0xed, 0xc6, 0x9d, 0x9e, 0x24, 0xe9, 0xa6, 0xa5, 0x5f, 0x87, 0x59, 0x22, 0xdd, 0x3b,
	0xee, 0xe0, 0x68, 0x1f, 0xf9, 0x4c, 0x97, 0x98, 0x21, 0x79, 0xdb, 0x24, 0xcb, 0xd8, 0x84, 0x65,
	0x75, 0xc5, 0x64, 0x20, 0x6f, 0xc1, 0x62, 0x77, 0xe0, 0xfb, 0xc8, 0x0d, 0x3b, 0x31, 0xb1, 0x03,
	0x62, 0x41, 0xa8, 0xb6, 0xce, 0xb2, 0xa2, 0x08, 0xe7, 0x00, 0xcb, 0x92, 0x04, 0x4d, 0xc7, 0x94,
	0x25, 0x5f, 0xd3, 0xe0, 0x1c, 0xa9, 0x2e, 0x0c, 0xee, 0xa1, 0x50, 0x44, 0xfb, 0x3c, 0xb0, 0xb1,
	0x49, 0xef, 0x27, 0x09, 0x5d, 0xe5, 0x15, 0x78, 0x05, 0x66, 0x18, 0x02, 0x91, 0x24, 0x21, 0xd6,
	0xe4, 0x28, 0xab, 0xd8, 0x30, 0xfc, 0x87, 0x52, 0x54, 0x4f, 0xbe, 0xb4, 0x1f, 0x21, 0xd8, 0xc6,
	0x99, 0xb3, 0x2f, 0xc0, 0x59, 0x3b, 0xe8, 0x10, 0x8d, 0x99, 0x55, 0x88, 0xa8, 0xa2, 0x3b, 0xd5,
	0x5a, 0xb0, 0x83, 0x36, 0x72, 0x7a, 0x6b, 0x3c, 0x1b, 0xc3, 0x52, 0xd5, 0x3a, 0x10, 0x60, 0x27,
	0x28, 0x2c, 0x51, 0xb2, 0x83, 0x18, 0x56, 0xb2, 0x96, 0x4e, 0x26, 0xac, 0xa5, 0x97, 0x60, 0xfa,
	0xd0, 0x0c, 0x98, 0x91, 0x74, 0x8a, 0x16, 0x1e, 0x9a, 0x41, 0xda, 0x38, 0x3a, 0x2d, 0x1b, 0x47,
	0xa3, 0xbd, 0x38, 0x08, 0x7b, 0x71, 0xe3, 0x2f, 0x34, 0xa8, 0xab, 0x46, 0x95, 0x30, 0xcb, 0x27,
	0x23, 0xd2, 0xe1, 0x89, 0x46, 0x8d, 0x55, 0x97, 0x53, 0xdc, 0x22, 0x8c, 0x42, 0x4b, 0x80, 0xd7,
	0x3f, 0x01, 0x33, 0x83, 0xf8, 0xac, 0x86, 0xcd, 0xd3, 0x1c, 0x39, 0x2e, 0x42, 0xcb, 0x7c, 0x5a,
	0x3e, 0x09, 0x9f, 0x7e, 0x99, 0x63, 0xd4, 0x95, 0x50, 0x7a, 0xf8, 0xca, 0xc9, 0x59, 0x55, 0x87,
	0x4a, 0xc4, 0xa3, 0xd5, 0x56, 0xa5, 0x38, 0x73, 0xfe, 0xab, 0x12, 0x5c, 0xca, 0xe8, 0xc3, 0xb7,
	0x9b, 0xb0, 0x0d, 0x98, 0x23, 0x1c, 0xb1, 0xe3, 0x5b, 0xc8, 0xc7, 0x9f, 0x97, 0xc9, 0xe7, 0x97,
	0x52, 0x9f, 0xc7, 0x50, 0x2d, 0xf9, 0x0b, 0xac, 0x43, 0x07, 0xe6, 0x31, 0xb2, 0xd6, 0xb0, 0xe2,
	0xc6, 0xb6, 0xee, 0x42, 0x8e, 0x3c, 0x76, 0xd5, 0x93, 0x59, 0x2b, 0x55, 0x43, 0x47, 0x75, 0xd0,
	0x93, 0x0d, 0x5d, 0x21, 0x0d, 0xf4, 0x89, 0x72, 0x94, 0x22, 0x13, 0xf7, 0xd5, 0x68, 0x94, 0x02,
	0xd2, 0x2a, 0x96, 0xb4, 0x42, 0xce, 0x18, 0x4b, 0xe8, 0x97, 0x35, 0xa8, 0x91, 0x09, 0xbb, 0xea,
	0x79, 0x8f, 0x85, 0x33, 0x92, 0xae, 0x63, 0x63, 0x01, 0xcf, 0x64, 0x58, 0xb9, 0x35, 0x45, 0x33,
	0x22, 0x4b, 0xa9, 0x8b, 0x04, 0x4b, 0xa9, 0x8b, 0xc6, 0x11, 0x5e, 0x58, 0xeb, 0xb9, 0x1a, 0xa1,
	0x7c, 0xd4, 0xf7, 0x7c, 0x7a, 0xbe, 0x22, 0x0a, 0xf6, 0x78, 0x99, 0xd4, 0x44, 0xda, 0x66, 0x1e,
	0x1a, 0xbf, 0x01, 0x0b, 0x7d, 0xa1, 0x8e, 0x98, 0xbb, 0xae, 0xa7, 0xc8, 0x92, 0xc4, 0xbe, 0x95,
	0xfc, 0xb2, 0xd8, 0x44, 0xdb, 0x80, 0x39, 0xda, 0x77, 0x4e, 0xc4, 0xcc, 0x65, 0x40, 0xa2, 0x6e,
	0x49, 0xa6, 0xae, 0xf1, 0x06, 0xcc, 0xef, 0x7a, 0xfd, 0x81, 0x63, 0xfa, 0x85, 0x06, 0xe3, 0x32,
	0x4c, 0xdb, 0xa4, 0x55, 0xe4, 0x73, 0x63, 0x69, 0x9c, 0x61, 0xfc, 0x7a, 0x09, 0xae, 0xe7, 0x12,
	0x96, 0x30, 0xd7, 0x7d, 0x58, 0xb0, 0x8f, 0x58, 0xde, 0x3a, 0x0a, 0x4d, 0xdb, 0x61, 0x72, 0x20,
	0xad, 0xc9, 0x48, 0x18, 0xb6, 0x92, 0x9f, 0x8d, 0x2b, 0x0e, 0x66, 0x30, 0xe6, 0xac, 0x46, 0x36,
	0x5c, 0xd7, 0xd2, 0xc3, 0x25, 0x51, 0xa7, 0x25, 0x7e, 0x23, 0x4f, 0x83, 0xca, 0x49, 0xa6, 0x81,
	0x0f, 0x67, 0x1b, 0x96, 0xd5, 0x42, 0x8e, 0x89, 0xf7, 0xd9, 0x4d, 0x6b, 0xe4, 0x89, 0xbc, 0xcf,
	0x40, 0x63, 0xd6, 0x03, 0x3f, 0xfa, 0xba, 0xd8, 0x9c, 0xf7, 0xe1, 0xec, 0x3a, 0x72, 0xbe, 0xb5,
	0x6d, 0xb6, 0xe1, 0x42, 0x0a, 0xcf, 0xb1, 0xf5, 0xb1, 0x36, 0x5c, 0x48, 0x21, 0x32, 0x76, 0xa5,
	0xbf, 0xaa, 0xc1, 0xfc, 0xaa, 0xe3, 0x75, 0x1f, 0x23, 0x0b, 0x53, 0x60, 0xd4, 0x8e, 0x71, 0x9f,
	0x82, 0x0a, 0x8a, 0x15, 0xcb, 0xa1, 0xa4, 0x6b, 0xa4, 0x77, 0x8c, 0x8d, 0xa7, 0xb3, 0x63, 0xdc,
	0x82, 0xb3, 0x52, 0x37, 0xc7, 0x44, 0xfb, 0x9b, 0x1a, 0x2c, 0x32, 0x76, 0xde, 0x73, 0x19, 0x0a,
	0x1f, 0x58, 0xdc, 0xf7, 0x98, 0x1e, 0x4e, 0x57, 0xad, 0xd5, 0x02, 0xbd, 0x2d, 0x54, 0xed, 0xc7,
	0x61, 0x66, 0x3f, 0x26, 0x69, 0x76, 0x65, 0x3a, 0x54, 0x2c, 0x33, 0xe4, 0x46, 0x6c, 0xf2, 0x1b,
	0xef, 0xe0, 0xea, 0xaa, 0x3e, 0x91, 0x61, 0x59, 0x91, 0x2a, 0x66, 0xeb, 0xa8, 0xd4, 0xd6, 0xab,
	0x30, 0x59, 0x58, 0x7a, 0x4d, 0x8e, 0xaf, 0x21, 0xbe, 0x03, 0x0b, 0xed, 0x61, 0x10, 0xa2, 0xa3,
	0x47, 0x87, 0x36, 0x35, 0xf4, 0xe5, 0x9e, 0x89, 0xd1, 0x73, 0x7f, 0x66, 0xdf, 0x72, 0xf8, 0x99,
	0x7f, 0xdf, 0xf7, 0xf6, 0x87, 0xfc, 0x58, 0x89, 0x24, 0xb0, 0xf2, 0x6d, 0x07, 0x9d, 0x27, 0xb8,
	0x52, 0x66, 0x00, 0x9a, 0xb4, 0x03, 0xd2, 0x86, 0xf1, 0x25, 0x0d, 0x96, 0xda, 0xa1, 0xe7, 0xa3,
	0xf6, 0x30, 0x88, 0x5a, 0x1d, 0x75, 0x18, 0x57, 0xb8, 0xe1, 0x42, 0x4b, 0x65, 0x1b, 0x2e, 0x28,
	0x7a, 0x30, 0xe6, 0xc4, 0xf9, 0x61, 0x0d, 0xae, 0x50, 0x7b, 0x55, 0x82, 0xa2, 0xa3, 0xcd, 0xc9,
	0x4f, 0x1d, 0xc1, 0xef, 0x86, 0x95, 0xbc, 0xae, 0x8c, 0x89, 0xe9, 0x9b, 0xe4, 0xd0, 0x36, 0x39,
	0x7c, 0x59, 0x4a, 0x69, 0x21, 0x1b, 0xee, 0xcf, 0x6a, 0xc4, 0x7f, 0x4e, 0x31, 0x20, 0xeb, 0x30,
	0x1b, 0xb0, 0xdc, 0x66, 0x6c, 0x03, 0x5b, 0x49, 0xf5, 0x34, 0x81, 0x69, 0x4b, 0xfa, 0x6a, 0x0c,
	0xfd, 0xf4, 0x93, 0xa9, 0x8e, 0x31, 0xab, 0x4c, 0x84, 0x97, 0x96, 0x83, 0xd7, 0x37, 0xa8, 0xef,
	0x43, 0xea, 0x73, 0x82, 0xda, 0xa7, 0x61, 0x41, 0xec, 0x64, 0xbc, 0xff, 0x19, 0x8d, 0x5d, 0xf2,
	0xc3, 0x31, 0x10, 0x7c, 0x0c, 0xfa, 0x3a, 0x72, 0x8a, 0x8e, 0x66, 0x1d, 0x26, 0x77, 0x7d, 0x0f,
	0x43, 0x71, 0x8b, 0x1f, 0x4b, 0x16, 0x5b, 0xfe, 0xdf, 0x84, 0x73, 0xa9, 0xc6, 0xd2, 0xdc, 0x78,
	0xa2, 0xfe, 0xbf, 0x0d, 0x13, 0xb8, 0x9e, 0xf5, 0x6e, 0xf6, 0xfc, 0x5a, 0x84, 0xaa, 0xd5, 0x8d,
	0x57, 0xa7, 0x8a, 0xd5, 0x2d, 0xaa, 0xae, 0xdc, 0x81, 0x99, 0x7b, 0x28, 0x6c, 0x38, 0xce, 0x7a,
	0xb7, 0xf0, 0x98, 0xff, 0x76, 0x09, 0xe6, 0xda, 0x28, 0xdc, 0xf5, 0xed, 0x63, 0xb3, 0x3b, 0xcc,
	0x9d, 0xf8, 0xd7, 0x61, 0xb6, 0x4f, 0xc1, 0xa8, 0x3b, 0x16, 0xed, 0xdf, 0x0c, 0xcb, 0x23, 0x1e,
	0x59, 0x4b, 0x50, 0xf5, 0x4d, 0xf7, 0x00, 0x71, 0x29, 0x40, 0x12, 0xfa, 0x87, 0x60, 0xc1, 0x74,
	0x9e, 0x98, 0xc3, 0xa0, 0x63, 0xd9, 0x81, 0xe9, 0x38, 0xde, 0x93, 0x7a, 0x85, 0x2c, 0x26, 0xf3,
	0x34, 0x7b, 0x9d, 0xe5, 0xe2, 0x16, 0x18, 0x20, 0x85, 0xaa, 0xd2, 0x25, 0x87, 0xe6, 0x35, 0x08,
	0xc8, 0x3c, 0x94, 0xec, 0x3e, 0x3b, 0xd9, 0x2f, 0xd9, 0xfd, 0x78, 0x17, 0x39, 0x29, 0xae, 0xc7,
	0x57, 0x00, 0x02, 0x14, 0x04, 0x4c, 0xfb, 0x9b, 0x22, 0x45, 0xd3, 0x2c, 0x47, 0xdc, 0x94, 0x4d,
	0x2b, 0xcf, 0x6f, 0x20, 0x87, 0x5e, 0x3f, 0xa0, 0x41, 0x4d, 0xa4, 0x17, 0xe1, 0x87, 0xd7, 0x61,
	0x8a, 0xd8, 0xb2, 0xe3, 0x49, 0x91, 0xb3, 0x10, 0x46, 0xa0, 0x63, 0xb0, 0xd1, 0x7f, 0xd4, 0x60,
	0xee, 0xde, 0xd3, 0x1c, 0x35, 0x4a, 0xc3, 0x72, 0x36, 0x0d, 0x2b, 0x49, 0x1a, 0xd2, 0x81, 0xa8,
	0x8a, 0x03, 0xa1, 0x70, 0x7f, 0x2d, 0x74, 0xac, 0xff, 0xa3, 0x1a, 0x2c, 0xd0, 0x43, 0x31, 0x09,
	0x9f, 0x13, 0x7a, 0x3e, 0x27, 0x11, 0x2d, 0xa7, 0x11, 0x2d, 0xb4, 0x1c, 0x6d, 0x83, 0x2e, 0x77,
	0x66, 0xcc, 0x05, 0xe8, 0x7f, 0x6a, 0x50, 0xbb, 0x97, 0xe4, 0x98, 0x68, 0xa2, 0x68, 0x23, 0x26,
	0x4a, 0xa9, 0xd0, 0x44, 0x29, 0xa7, 0x27, 0xca, 0x47, 0xa8, 0xe7, 0x24, 0x66, 0xb9, 0x80, 0x4c,
	0xb7, 0x5c, 0xa6, 0x8c, 0x61, 0xc7, 0xb0, 0x02, 0xfd, 0xd7, 0x12, 0x9c, 0xa7, 0xaa, 0xca, 0xa1,
	0xd7, 0x6f, 0x87, 0x76, 0xf7, 0x31, 0xf2, 0xdb, 0x88, 0x9c, 0xca, 0x24, 0xce, 0x12, 0xb4, 0xd4,
	0x31, 0x94, 0x0e, 0x95, 0x9e, 0x8f, 0x28, 0x7b, 0x4e, 0xb5, 0xc8, 0x6f, 0x7d, 0x19, 0xa6, 0xbc,
	0x5e, 0xcf, 0xee, 0xda, 0xa6, 0xc3, 0x4e, 0xef, 0xa2, 0x34, 0x26, 0xe0, 0x91, 0x19, 0x3c, 0x0e,
	0x98, 0xc2, 0x46, 0x13, 0x38, 0x37, 0xb4, 0x43, 0x87, 0x3b, 0x67, 0xd3, 0x04, 0xe1, 0xe4, 0x43,
	0xcf, 0x67, 0xf6, 0x14, 0xca, 0x9f, 0xd3, 0x24, 0x87, 0x3b, 0x3b, 0x91, 0xa3, 0x4c, 0xe6, 0xa1,
	0x4d, 0x13, 0x91, 0x0d, 0x91, 0x0a, 0x0f, 0x6a, 0x43, 0x5c, 0x86, 0x29, 0x74, 0xe4, 0x85, 0x76,
	0x97, 0x79, 0x63, 0x4f, 0xb7, 0xa2, 0xb4, 0x7e, 0x19, 0xa6, 0x2d, 0xaf, 0x3b, 0x38, 0x42, 0x6e,
	0x18, 0xd4, 0x81, 0x8c, 0x47, 0x9c, 0x11, 0x73, 0xde, 0x4c, 0xce, 0x29, 0x91, 0xc0, 0xda, 0xb3,
	0x22, 0x6b, 0x1b, 0x08, 0x2e, 0x2a, 0xe9, 0x4a, 0x58, 0x09, 0x4f, 0x44, 0x3e, 0x49, 0x4a, 0xf6,
	0x38, 0xd6, 0xad, 0x10, 0xae, 0x29, 0x9a, 0x59, 0xe7, 0x48, 0xe0, 0x71, 0x4c, 0x36, 0x26, 0x61,
	0x5d, 0xca, 0xc4, 0x3a, 0x6f, 0xd5, 0xfa, 0x3c, 0x18, 0xf9, 0xad, 0x8e, 0x39, 0xff, 0xde, 0x21,
	0x07, 0x2a, 0x28, 0x44, 0x32, 0x47, 0x5e, 0x86, 0xe9, 0x80, 0x66, 0x44, 0x6a, 0x43, 0x9c, 0x51,
	0x48, 0x0f, 0x14, 0xc7, 0xab, 0x2c, 0x8d, 0x57, 0x0b, 0xce, 0xa7, 0x9b, 0x1c, 0x13, 0x8d, 0x6f,
	0x94, 0x60, 0x3e, 0xae, 0x8e, 0xe8, 0x89, 0xc9, 0xc1, 0x18, 0x79, 0xf5, 0x81, 0x4f, 0xb2, 0x72,
	0xc6, 0x24, 0xab, 0x64, 0x4d, 0xb2, 0xaa, 0x72, 0x92, 0x4d, 0x64, 0x4f, 0xb2, 0xc9, 0xcc, 0x49,
	0x36, 0xa5, 0x9a, 0x64, 0xd3, 0x19, 0x93, 0x0c, 0xf2, 0x26, 0xd9, 0x4c, 0x82, 0xdd, 0x8c, 0x2f,
	0x12, 0x5f, 0x6a, 0x99, 0x48, 0x2a, 0xa6, 0x95, 0xbb, 0x5a, 0x4a, 0x76, 0x75, 0x11, 0xaa, 0x76,
	0xc0, 0x07, 0x75, 0xaa, 0x55, 0xb1, 0x83, 0xa2, 0x47, 0x8c, 0x3f, 0xaf, 0x11, 0xbf, 0xeb, 0x64,
	0x0f, 0xc8, 0xc8, 0xdf, 0x83, 0xf9, 0x40, 0xca, 0x67, 0x6a, 0x59, 0xda, 0x66, 0x97, 0xf8, 0x3c,
	0xf1, 0xd9, 0x18, 0xf3, 0xfb, 0x97, 0x2a, 0x78, 0x2b, 0x49, 0x2a, 0xdb, 0x35, 0xbb, 0x8f, 0xf9,
	0x14, 0x5b, 0x35, 0x03, 0xa4, 0x7f, 0x04, 0xea, 0x66, 0x18, 0xfa, 0xf6, 0xfe, 0x20, 0x44, 0x41,
	0x27, 0x08, 0xed, 0xc7, 0xc8, 0xef, 0x04, 0x48, 0x30, 0xa3, 0x9e, 0x8b, 0xcb, 0xdb, 0xa4, 0x18,
	0x77, 0x88, 0x30, 0x1d, 0x1f, 0x01, 0xbe, 0x26, 0x57, 0x5a, 0xc0, 0xb3, 0x8a, 0x78, 0x20, 0x5c,
	0x82, 0xe9, 0x23, 0xfb, 0x08, 0xd1, 0x55, 0x9b, 0x59, 0xbb, 0x71, 0x06, 0x59, 0xb2, 0x75, 0xa8,
	0x04, 0xf6, 0x17, 0xb8, 0x87, 0x27, 0xf9, 0x4d, 0x18, 0xf0, 0x70, 0x70, 0xb4, 0x1f, 0x31, 0x20,
	0x4e, 0xc4, 0x7a, 0xf3, 0xa4, 0xa0, 0x37, 0x73, 0xa3, 0xc7, 0x54, 0x6c, 0xf4, 0xd0, 0x5f, 0x87,
	0x0b, 0x02, 0xaa, 0xf6, 0x91, 0x79, 0x80, 0x3a, 0xb8, 0xde, 0xce, 0x13, 0x76, 0xf4, 0xb6, 0x14,
	0x17, 0x37, 0x71, 0x69, 0xdb, 0xfe, 0x02, 0x7a, 0x94, 0xfd, 0xd9, 0x21, 0x61, 0x53, 0xf5, 0x67,
	0xf7, 0xf5, 0x3b, 0x70, 0x2e, 0x4d, 0x58, 0xd3, 0x09, 0xd9, 0x75, 0x9c, 0xc5, 0x24, 0x55, 0x1b,
	0xc4, 0xc6, 0x7c, 0x5d, 0x3d, 0x18, 0x22, 0x21, 0x67, 0x09, 0x21, 0xaf, 0x28, 0x46, 0x45, 0xb0,
	0x57, 0xbd, 0x0c, 0x42, 0xaf, 0x3a, 0x3d, 0xdb, 0x41, 0x94, 0xe9, 0xe7, 0x48, 0xe3, 0x7a, 0x5c,
	0x76, 0xd7, 0x76, 0x10, 0x39, 0x5e, 0xf0, 0x94, 0x3c, 0xa2, 0x94, 0x37, 0xeb, 0x30, 0x85, 0x59,
	0x0e, 0xf3, 0x0f, 0x93, 0x93, 0x37, 0xb3, 0x98, 0x39, 0xc9, 0x6f, 0xad, 0xe8, 0x4b, 0x72, 0x3e,
	0x4d, 0x17, 0x00, 0x01, 0x94, 0x6c, 0x60, 0xb6, 0x61, 0x8e, 0xf0, 0x7e, 0xdf, 0xec, 0x3e, 0xde,
	0xc7, 0x8d, 0x68, 0x27, 0x6c, 0x44, 0xfe, 0xbc, 0xd8, 0xe6, 0xde, 0x82, 0xba, 0xaa, 0x37, 0x4f,
	0x79, 0xa9, 0xfd, 0xa2, 0xaa, 0x15, 0xb6, 0x57, 0xff, 0x4e, 0xa8, 0xb6, 0xc3, 0xdd, 0xf5, 0x55,
	0xb6, 0x95, 0x28, 0x8e, 0x2e, 0xfd, 0xac, 0x18, 0x9a, 0x47, 0x70, 0x29, 0xa3, 0x03, 0x5c, 0x3f,
	0xa5, 0x5e, 0x1a, 0xd4, 0xea, 0x47, 0x13, 0x63, 0xe0, 0xdb, 0x82, 0x4b, 0x92, 0x60, 0xa4, 0xed,
	0x11, 0x85, 0x53, 0x25, 0xa1, 0x0b, 0xa1, 0x70, 0x08, 0x57, 0xb3, 0xeb, 0x24, 0x58, 0xdc, 0x85,
	0x69, 0x4c, 0x92, 0x6e, 0x33, 0xbe, 0xb3, 0x51, 0x88, 0x9a, 0x54, 0x25, 0x8e, 0x3e, 0x35, 0x7e,
	0x4c, 0x83, 0x7a, 0xc3, 0xb2, 0x76, 0x7c, 0xba, 0xaa, 0xdf, 0x35, 0x8f, 0x09, 0xdd, 0x22, 0xe3,
	0xc3, 0x9e, 0x64, 0x7c, 0xa0, 0x29, 0xbc, 0x56, 0xb5, 0x23, 0x05, 0x83, 0xae, 0xc5, 0x71, 0x06,
	0xf9, 0xca, 0xed, 0x99, 0xc7, 0x7c, 0x31, 0x66, 0xa9, 0xa2, 0xae, 0x2c, 0x97, 0x32, 0xba, 0x23,
	0x29, 0x19, 0x6b, 0x27, 0x51, 0x32, 0xf0, 0x4f, 0xa3, 0x07, 0x8b, 0xf7, 0x50, 0x88, 0x2b, 0xb4,
	0x58, 0x57, 0x83, 0x3c, 0x14, 0x75, 0xa8, 0xdc, 0xe7, 0x9a, 0x46, 0xb5, 0x45, 0x7e, 0x17, 0xd3,
	0xf9, 0xfe, 0x46, 0x83, 0xf3, 0xe9, 0x86, 0x48, 0xe7, 0x79, 0x9d, 0x9a, 0x50, 0xe7, 0x1d, 0xa8,
	0xe2, 0x49, 0x1c, 0x30, 0x2b, 0xf3, 0xe5, 0xbc, 0x31, 0x6c, 0x51, 0x50, 0x2c, 0x9c, 0xd8, 0xc2,
	0x19, 0xb0, 0xd3, 0xb1, 0x13, 0x08, 0x27, 0xfe, 0xa5, 0x4c, 0xca, 0xca, 0x49, 0x48, 0xd9, 0x84,
	0x19, 0xa1, 0x7a, 0xac, 0xd5, 0x6c, 0x70, 0xad, 0x86, 0x7a, 0x8d, 0x46, 0x69, 0xfd, 0x2a, 0x40,
	0xc4, 0x79, 0x9c, 0x55, 0x84, 0x1c, 0xbc, 0x83, 0xa4, 0xfb, 0x2a, 0x4c, 0x76, 0x59, 0x8b, 0xcd,
	0x39, 0x3a, 0x98, 0xe3, 0x48, 0x20, 0xc1, 0x81, 0x66, 0x36, 0xce, 0x64, 0xe7, 0xa1, 0x6e, 0x10,
	0x9a, 0x8e, 0x83, 0xb8, 0xb6, 0x13, 0x67, 0xe0, 0x2e, 0xe3, 0x6d, 0xe8, 0x3e, 0x2e, 0x64, 0x9a,
	0x21, 0x4f, 0x63, 0xf9, 0xe0, 0xf9, 0x16, 0xf2, 0xd9, 0xba, 0x4c, 0x13, 0xf8, 0x0b, 0xd3, 0xef,
	0x1e, 0xda, 0xc7, 0x91, 0x8b, 0x4c, 0x94, 0x2e, 0x66, 0x09, 0xd8, 0x63, 0x1b, 0x9d, 0x24, 0xa2,
	0x63, 0x5a, 0xdd, 0xbe, 0xa1, 0xc1, 0xb5, 0xd8, 0x3b, 0x58, 0xd8, 0x64, 0x30, 0x74, 0xc6, 0xa7,
	0x64, 0x1e, 0xad, 0x0a, 0x9d, 0xe2, 0x7c, 0x1e, 0x8c, 0xfc, 0x1e, 0x8e, 0xb9, 0x7d, 0xf8, 0x59,
	0x0d, 0x2e, 0xab, 0x1a, 0xa0, 0x8e, 0x22, 0x63, 0xe3, 0x1f, 0xf1, 0x43, 0x59, 0xe4, 0x87, 0x42,
	0xc2, 0xec, 0x6d, 0xf5, 0xd8, 0xb0, 0x8e, 0x8d, 0x89, 0xf6, 0xbf, 0xd3, 0xf8, 0xe1, 0x82, 0x5c,
	0x7b, 0x93, 0x72, 0x79, 0xc3, 0x7f, 0x2a, 0x43, 0x1f, 0x31, 0x7d, 0x39, 0xc1, 0xf4, 0xd2, 0x04,
	0xab, 0x24, 0x27, 0x58, 0x21, 0xc6, 0xe8, 0xc0, 0x33, 0x23, 0x10, 0x18, 0x93, 0x44, 0x43, 0xee,
	0x3b, 0x3e, 0x88, 0x1b, 0x18, 0x9f, 0x2a, 0x85, 0x96, 0x81, 0x9f, 0xd2, 0xc8, 0x59, 0x78, 0xb2,
	0x6d, 0xee, 0x00, 0x3b, 0x46, 0xf3, 0xa7, 0x3f, 0x64, 0xfc, 0x46, 0x19, 0x16, 0x04, 0x52, 0x13,
	0xc5, 0x37, 0xd5, 0xa4, 0x36, 0x4a, 0x98, 0x96, 0xf2, 0x84, 0x69, 0x39, 0x4b, 0x98, 0x56, 0xc4,
	0xc9, 0x93, 0xd8, 0x37, 0x55, 0x33, 0x77, 0xf3, 0x13, 0x19, 0xbb, 0xf9, 0xc9, 0xc4, 0x6e, 0x5e,
	0x64, 0xd4, 0xa9, 0x04, 0xa3, 0x46, 0x3b, 0xfd, 0x69, 0xe5, 0x4e, 0x1f, 0xb2, 0x77, 0xfa, 0x33,
	0x99, 0x3b, 0xfd, 0x59, 0xd5, 0x4e, 0x7f, 0x4e, 0xd8, 0xe9, 0xd7, 0x61, 0x92, 0xed, 0xec, 0x59,
	0xb8, 0x00, 0x9e, 0x94, 0xf7, 0xf9, 0x0b, 0xc9, 0x7d, 0xfe, 0x5b, 0xa0, 0x27, 0x46, 0x08, 0x2b,
	0xa7, 0xab, 0x30, 0x13, 0xc4, 0x39, 0x99, 0x87, 0x53, 0x89, 0x2f, 0x5b, 0xe2, 0x47, 0xc6, 0x43,
	0x38, 0x2b, 0xef, 0xbe, 0x99, 0xab, 0x4d, 0xba, 0xe2, 0x91, 0xdb, 0x76, 0xa9, 0xde, 0x3d, 0x72,
	0x2e, 0x87, 0x19, 0xb8, 0xe1, 0x38, 0xa2, 0x66, 0x35, 0xde, 0x35, 0xef, 0x5f, 0xa0, 0x07, 0x76,
	0xa9, 0x7a, 0x99, 0xa3, 0xd2, 0x7c, 0x20, 0x51, 0xa8, 0x30, 0x49, 0x12, 0xdf, 0x8d, 0xb1, 0xf0,
	0x7e, 0x82, 0x58, 0x64, 0xe2, 0xbe, 0xb5, 0x11, 0x35, 0x23, 0x16, 0x3a, 0x9a, 0x62, 0xd6, 0x94,
	0xe4, 0xd7, 0x09, 0x6b, 0x8a, 0x8c, 0x5c, 0x61, 0x6b, 0xca, 0xf8, 0xb8, 0xb5, 0xe1, 0xb2, 0x64,
	0xe4, 0x13, 0xb5, 0x48, 0xf5, 0x9e, 0x46, 0x21, 0xb7, 0xca, 0xb2, 0x10, 0xc1, 0x8b, 0x61, 0x4e,
	0xa5, 0x63, 0x4a, 0xfa, 0xfb, 0x44, 0xe9, 0x6e, 0x0c, 0xc2, 0x43, 0xaf, 0xa8, 0x1a, 0x79, 0x0e,
	0x26, 0xa4, 0xde, 0x56, 0x69, 0x37, 0x7f, 0x44, 0x83, 0x8b, 0xca, 0xaa, 0xc6, 0xdb, 0x7f, 0xe8,
	0xaf, 0x42, 0x39, 0x40, 0x21, 0xe3, 0xf9, 0xb4, 0xf3, 0x61, 0xaa, 0x3d, 0x0c, 0x6d, 0xbc, 0x26,
	0xf4, 0x45, 0x62, 0x96, 0x3c, 0xcc, 0x8c, 0x9f, 0xd0, 0xe0, 0x72, 0xd6, 0x67, 0x63, 0x62, 0xf1,
	0x3a, 0x54, 0x02, 0x14, 0xf2, 0xdd, 0x4a, 0x01, 0x34, 0x08, 0xb8, 0xf1, 0xf5, 0x12, 0xd4, 0x92,
	0x45, 0x27, 0x5c, 0x06, 0x13, 0xec, 0x94, 0x10, 0xd5, 0xe5, 0xa4, 0xa8, 0x16, 0x57, 0x84, 0x4a,
	0x9e, 0xea, 0x52, 0xcd, 0x5b, 0xce, 0x26, 0x12, 0xcb, 0x59, 0x1d, 0x26, 0xc9, 0x0a, 0x86, 0xb8,
	0x29, 0x8e, 0x27, 0xc5, 0x38, 0x1f, 0x53, 0x72, 0x9c, 0x8f, 0x3a, 0x4c, 0xd2, 0xf8, 0x03, 0x91,
	0xfb, 0x3b, 0x4b, 0x1a, 0x1f, 0x86, 0x4b, 0xc4, 0x3b, 0xf9, 0xa4, 0xe3, 0xdb, 0x87, 0xab, 0xd9,
	0xdf, 0x8d, 0x39, 0xc0, 0xd1, 0x12, 0xc7, 0x26, 0x05, 0x49, 0x18, 0x6f, 0xc0, 0x3c, 0x6e, 0xfb,
	0x9e, 0xdd, 0xe3, 0xc2, 0xe5, 0x63, 0x30, 0x79, 0x60, 0xf7, 0x3a, 0x66, 0x8e, 0xec, 0x25, 0x8a,
	0x8f, 0x79, 0x8c, 0xd8, 0x57, 0xad, 0x89, 0x03, 0xbb, 0xd7, 0xf0, 0x7d, 0xc3, 0x85, 0x85, 0x44,
	0x51, 0xee, 0x24, 0xc5, 0xcd, 0x30, 0x1e, 0x98, 0x6e, 0x55, 0x0f, 0xec, 0x5e, 0x93, 0x84, 0x91,
	0xe9, 0x31, 0x2b, 0x76, 0xa5, 0x85, 0x7f, 0x92, 0x5b, 0x06, 0x76, 0x48, 0xf5, 0x09, 0x7a, 0xa0,
	0x3b, 0x79, 0x60, 0x87, 0xe4, 0x2e, 0xcf, 0x4f, 0x6b, 0x30, 0x8f, 0x1b, 0xdb, 0xa3, 0x18, 0x8c,
	0x12, 0x0a, 0xe3, 0xb6, 0x57, 0xd8, 0x5b, 0x50, 0xea, 0xd3, 0x98, 0xf2, 0xef, 0x0b, 0xe4, 0x52,
	0x5d, 0x11, 0x0c, 0x9f, 0x3e, 0x2a, 0xf4, 0xd2, 0xe4, 0xd3, 0xc2, 0xc4, 0x8c, 0x42, 0xae, 0xdc,
	0xb3, 0x7b, 0xb9, 0x77, 0x79, 0xb8, 0xde, 0x55, 0x52, 0x5d, 0x85, 0xc8, 0xd3, 0xcd, 0x7f, 0x5f,
	0x8b, 0x22, 0x90, 0xd0, 0x36, 0x78, 0xf4, 0x98, 0xc2, 0xcd, 0x08, 0xdc, 0x5f, 0x3e, 0x19, 0xf7,
	0x8f, 0xe1, 0x9a, 0xec, 0xb2, 0x3b, 0xbb, 0xc4, 0x42, 0x15, 0xc8, 0x4e, 0x96, 0xef, 0x47, 0x28,
	0x35, 0x7e, 0x9f, 0x37, 0xd1, 0xde, 0x98, 0xe3, 0xfb, 0x7b, 0x65, 0xa8, 0xf9, 0xec, 0x72, 0xf0,
	0xde, 0xf8, 0x21, 0xcf, 0x22, 0xdf, 0x8c, 0xb2, 0xe8, 0x9b, 0x91, 0x8c, 0x0f, 0x56, 0x49, 0xc7,
	0x07, 0x4b, 0x44, 0xd7, 0xaa, 0xa6, 0xa2, 0x6b, 0xc9, 0x17, 0x19, 0x26, 0x72, 0x2f, 0x32, 0x4c,
	0x26, 0x6e, 0x61, 0x9d, 0x83, 0x09, 0x3b, 0xe8, 0xec, 0x7b, 0x21, 0xdb, 0x8d, 0x54, 0xed, 0x60,
	0x35, 0x0e, 0xc2, 0x25, 0xdd, 0xf2, 0x9d, 0x2e, 0x7c, 0xcb, 0x17, 0x94, 0xb7, 0x7c, 0x57, 0x60,
	0x56, 0xb8, 0xe5, 0x1b, 0x90, 0x4d, 0x0b, 0x8f, 0xd7, 0xb5, 0x46, 0xe2, 0x75, 0xb1, 0xd8, 0x4e,
	0xb3, 0x71, 0x6c, 0x27, 0x31, 0x12, 0xd4, 0x5c, 0x22, 0x12, 0x54, 0x14, 0xff, 0x66, 0x5e, 0x88,
	0x7f, 0x63, 0x7c, 0x9f, 0x18, 0x46, 0x44, 0x0e, 0x5f, 0x34, 0x28, 0x78, 0x25, 0x96, 0xe4, 0xe2,
	0xb5, 0x37, 0x5e, 0x99, 0x98, 0x93, 0x72, 0xbc, 0xfa, 0x9c, 0x87, 0x09, 0x5a, 0x31, 0x37, 0x1d,
	0xd3, 0x94, 0xf1, 0x05, 0xb8, 0x14, 0xb1, 0x62, 0x7c, 0x04, 0xf4, 0xd0, 0x74, 0x6c, 0x2b, 0xcf,
	0x88, 0x7b, 0x15, 0x04, 0x07, 0x67, 0xce, 0x3c, 0xc2, 0x11, 0x52, 0xa1, 0x69, 0x10, 0xc2, 0xd5,
	0xec, 0xb6, 0x09, 0x11, 0xea, 0x30, 0x69, 0x07, 0x24, 0x83, 0xb4, 0x4f, 0x7c, 0x6c, 0x49, 0x72,
	0x0c, 0x15, 0xfc, 0xff, 0x94, 0x61, 0xb1, 0x95, 0x98, 0x26, 0xb9, 0x72, 0x7d, 0xe4, 0x4c, 0x59,
	0x81, 0x99, 0xdd, 0xf8, 0x6a, 0x27, 0xbf, 0xe4, 0x28, 0x64, 0xe1, 0xb1, 0xb9, 0xcb, 0xf9, 0x9b,
	0x4d, 0x99, 0x38, 0x03, 0x33, 0xcd, 0x26, 0xe3, 0x6f, 0x1e, 0x20, 0x70, 0x33, 0xcd, 0xef, 0x13,
	0xa3, 0xf8, 0x7d, 0xb2, 0x30, 0xbf, 0x4f, 0x15, 0xe2, 0xf7, 0xe9, 0x14, 0xbf, 0xaf, 0xc0, 0xcc,
	0x5a, 0x3c, 0xd1, 0xd9, 0x06, 0x5f, 0xcc, 0xc2, 0x7c, 0xb1, 0x19, 0x4d, 0x74, 0xb6, 0xcd, 0x17,
	0x72, 0xf0, 0xfe, 0xc6, 0xea, 0xb2, 0x09, 0x53, 0xb2, 0xba, 0x18, 0xf5, 0x7b, 0xbe, 0x37, 0xe8,
	0x6f, 0x7b, 0x4f, 0xf8, 0x7c, 0xe1, 0xe9, 0x98, 0x87, 0xe6, 0x73, 0xdc, 0x29, 0x58, 0x74, 0x9f,
	0x85, 0x38, 0xba, 0x8f, 0x38, 0x05, 0x6b, 0xf2, 0x14, 0x34, 0x7e, 0x40, 0x83, 0xf3, 0xe9, 0xb1,
	0x3f, 0xdd, 0x7c, 0x3b, 0x3d, 0x07, 0x7a, 0x64, 0x83, 0xbb, 0xed, 0x85, 0x76, 0x6f, 0xd8, 0x46,
	0x61, 0x68, 0xbb, 0x07, 0x7c, 0x5f, 0xaf, 0xbe, 0xbe, 0x7d, 0x11, 0xa6, 0x7c, 0xf4, 0x8e, 0xe8,
	0x8a, 0x37, 0xe9, 0xa3, 0x77, 0x64, 0xef, 0xb4, 0xbc, 0x89, 0xf6, 0xa7, 0x74, 0x53, 0x9c, 0x6c,
	0x91, 0xe0, 0xfd, 0x0c, 0xcc, 0xb5, 0x0f, 0xbd, 0x27, 0x9d, 0xbe, 0x8f, 0x8e, 0x6d, 0xf4, 0x24,
	0x60, 0x13, 0x6d, 0x16, 0x67, 0xee, 0xb2, 0x3c, 0x2c, 0x06, 0xda, 0xb6, 0x83, 0x98, 0xf2, 0x3a,
	0xd5, 0x62, 0x29, 0x2c, 0xc9, 0xb7, 0x06, 0x21, 0xea, 0x0c, 0xdc, 0xd0, 0xe6, 0x41, 0x41, 0xa6,
	0x71, 0xce, 0x1e, 0xce, 0xc0, 0x12, 0xaf, 0xed, 0x0d, 0x5c, 0x8b, 0xb1, 0x3c, 0x4d, 0x8c, 0xe1,
	0x2b, 0xf6, 0x77, 0x51, 0x80, 0xa4, 0xa7, 0x45, 0xbc, 0x04, 0xee, 0xe5, 0x5c, 0xdc, 0x2b, 0x39,
	0xb8, 0x57, 0x33, 0x71, 0x9f, 0x10, 0x71, 0x2f, 0x74, 0xa0, 0xf1, 0x10, 0x96, 0xd5, 0x58, 0x8e,
	0xa9, 0x20, 0xd0, 0xb0, 0x81, 0xfc, 0xea, 0x46, 0x81, 0x10, 0x4f, 0x85, 0xec, 0x49, 0x1d, 0x98,
	0xa6, 0xb6, 0x20, 0x73, 0x10, 0x64, 0x0b, 0xd1, 0x38, 0x2c, 0x54, 0x49, 0x0a, 0x69, 0x7a, 0x1d,
	0x66, 0x59, 0x1c, 0xa8, 0x4e, 0x68, 0x1f, 0x45, 0x0e, 0x98, 0x2c, 0xef, 0x81, 0x7d, 0x84, 0x8c,
	0x7f, 0x4a, 0xb9, 0x37, 0xd9, 0x6f, 0x76, 0x58, 0x5b, 0x63, 0x77, 0x34, 0x69, 0x76, 0x6c, 0xd4,
	0x59, 0xce, 0xb0, 0x58, 0x99, 0x83, 0xa0, 0x95, 0xfa, 0x66, 0x8c, 0xc9, 0x7c, 0xc0, 0x43, 0xd5,
	0xac, 0x7a, 0xe1, 0xae, 0xdd, 0x6d, 0xa1, 0x77, 0x06, 0x28, 0x08, 0xb1, 0xdc, 0x26, 0x02, 0x9a,
	0xd3, 0xa1, 0x8a, 0xc5, 0x72, 0x22, 0x06, 0xde, 0x2c, 0x8f, 0x81, 0x77, 0xb2, 0xa0, 0x50, 0xbc,
	0xa1, 0x31, 0xcf, 0xb7, 0x22, 0x33, 0xdb, 0xae, 0xef, 0xbd, 0x3b, 0x5c, 0xf3, 0xdc, 0x9e, 0x7d,
	0x50, 0xd8, 0xcc, 0xd6, 0x84, 0x69, 0xf2, 0x59, 0xc3, 0xb2, 0x7c, 0xe6, 0xd5, 0xab, 0x45, 0x5e,
	0xbd, 0x78, 0xd5, 0x76, 0x5d, 0xe4, 0x37, 0xfb, 0x6c, 0xaf, 0xc7, 0x93, 0x58, 0xe3, 0xef, 0x7b,
	0x7e, 0xc8, 0xef, 0x58, 0xe3, 0xdf, 0xc6, 0x7b, 0x91, 0xc5, 0x4e, 0xea, 0x08, 0xc1, 0xee, 0x65,
	0xa8, 0x9a, 0x96, 0xe5, 0x07, 0x99, 0x63, 0x1a, 0x75, 0xa2, 0x45, 0x01, 0xc7, 0x72, 0x64, 0x8c,
	0x95, 0x72, 0xbc, 0xf4, 0xee, 0x74, 0xbb, 0x83, 0xbe, 0x8d, 0xc4, 0xeb, 0xc8, 0x32, 0x57, 0xdb,
	0x71, 0xa4, 0x51, 0xf7, 0xb4, 0x11, 0xa3, 0x8c, 0xd7, 0x05, 0xfd, 0x4b, 0x6e, 0x95, 0x6f, 0x9d,
	0xbc, 0x6e, 0xb7, 0x3f, 0x18, 0x32, 0xb1, 0xcc, 0x52, 0xc6, 0x26, 0x71, 0xe5, 0x26, 0xfb, 0xac,
	0x7e, 0x90, 0xd7, 0xc3, 0x42, 0x53, 0xf8, 0xcf, 0xa9, 0xb7, 0x71, 0x54, 0x1d, 0x69, 0x5a, 0x0c,
	0xbc, 0xa6, 0x25, 0x02, 0xaf, 0x49, 0x21, 0xdb, 0x4a, 0xc9, 0x90, 0x6d, 0xcf, 0xc0, 0x9c, 0x85,
	0x8e, 0xed, 0x2e, 0xea, 0x1c, 0x79, 0xd6, 0xc0, 0xe1, 0x3b, 0x88, 0x59, 0x9a, 0xb9, 0x45, 0xf2,
	0x70, 0x15, 0x78, 0xc2, 0x07, 0xa1, 0x79, 0xd4, 0x67, 0x67, 0x18, 0x71, 0xc6, 0x18, 0x6b, 0x84,
	0xc3, 0xf6, 0x72, 0x6d, 0x31, 0xcc, 0x02, 0xa3, 0x10, 0x15, 0x6b, 0xe9, 0x48, 0x6d, 0x6c, 0x77,
	0x7a, 0x8a, 0x9d, 0xdc, 0x17, 0x18, 0xd3, 0x24, 0x5a, 0x23, 0x04, 0xbc, 0x01, 0x73, 0x52, 0x36,
	0x1b, 0x42, 0x39, 0x73, 0x0c, 0x86, 0xf5, 0x79, 0x38, 0xba, 0xf6, 0x13, 0x3b, 0xec, 0x1e, 0xe6,
	0xea, 0xb0, 0xb7, 0x61, 0x22, 0x20, 0x50, 0xac, 0x89, 0x0b, 0x69, 0x93, 0x37, 0xad, 0x84, 0x81,
	0x61, 0xf9, 0xe5, 0xb9, 0x1d, 0xaf, 0xd7, 0x63, 0x6b, 0x62, 0xd5, 0x73, 0x77, 0x7a, 0x3d, 0xe3,
	0x07, 0x35, 0x2e, 0x85, 0x78, 0xa3, 0x04, 0xd5, 0x55, 0xa8, 0x08, 0xcb, 0xd1, 0xad, 0xb4, 0xe8,
	0x4d, 0x7d, 0x72, 0x8b, 0xfe, 0x23, 0x38, 0x91, 0x6f, 0x8d, 0x17, 0x01, 0xe2, 0x3c, 0x7d, 0x06,
	0x26, 0xdb, 0x03, 0xa2, 0x62, 0xd7, 0xce, 0xe8, 0x67, 0x61, 0xae, 0xe9, 0x86, 0xc8, 0x77, 0x4d,
	0x87, 0xa0, 0x5f, 0xd3, 0x8c, 0xcf, 0xd3, 0x1b, 0x5a, 0xa4, 0x46, 0x69, 0x25, 0x7b, 0x3a, 0xf8,
	0x1b, 0xbf, 0xcc, 0xae, 0x6b, 0x49, 0x0d, 0x10, 0x5c, 0x63, 0xca, 0x68, 0x02, 0x65, 0xf4, 0x0d,
	0x46, 0x02, 0x5a, 0xff, 0x2b, 0xa9, 0xfa, 0x95, 0x95, 0x8d, 0x4b, 0x85, 0x0b, 0xa4, 0x93, 0x0f,
	0xed, 0xbe, 0xe3, 0x1d, 0x10, 0x05, 0x7b, 0xd3, 0x0e, 0x30, 0xb3, 0x1b, 0x2f, 0x13, 0xab, 0x7d,
	0xaa, 0x20, 0xe8, 0x63, 0x76, 0x27, 0xfb, 0x72, 0x2a, 0x53, 0xa7, 0x5b, 0x2c, 0x65, 0x58, 0x62,
	0xc8, 0xb5, 0xfb, 0x66, 0xb0, 0x6b, 0x0e, 0x4f, 0x13, 0x72, 0xed, 0x0a, 0xc0, 0x7d, 0x33, 0xe8,
	0x50, 0x13, 0x2d, 0x77, 0x0f, 0xb9, 0x6f, 0x06, 0x6b, 0x24, 0xc3, 0xb8, 0x25, 0xee, 0x76, 0x79,
	0x2b, 0xb4, 0x57, 0xc1, 0x00, 0xe3, 0xc9, 0xe5, 0x1c, 0x4d, 0x19, 0x2f, 0xb1, 0x7b, 0x15, 0xc5,
	0x3a, 0x65, 0x7c, 0x08, 0x16, 0x53, 0xe0, 0x41, 0x1f, 0x6f, 0x12, 0x0e, 0x4d, 0x5e, 0x35, 0xfe,
	0x69, 0xfc, 0x9c, 0x26, 0xa2, 0x4b, 0xef, 0xd6, 0x9f, 0x22, 0x5c, 0x2a, 0x33, 0x00, 0x94, 0x63,
	0x03, 0x40, 0x0d, 0xca, 0xe6, 0x01, 0x0f, 0x71, 0x89, 0x7f, 0xe2, 0xd5, 0xd0, 0x64, 0xb1, 0x45,
	0xe9, 0xe6, 0x8e, 0x27, 0x85, 0xf0, 0xce, 0x13, 0x52, 0x78, 0xe7, 0x0f, 0x8b, 0x61, 0xe9, 0x78,
	0xdf, 0x08, 0xef, 0x5d, 0x86, 0x69, 0x4a, 0x98, 0xde, 0xc0, 0x61, 0xe8, 0xc4, 0x19, 0xc6, 0x97,
	0x34, 0xb8, 0x94, 0xfc, 0x70, 0x95, 0x6d, 0x7d, 0x4e, 0x81, 0x9c, 0xb8, 0x91, 0x2a, 0x27, 0x6c,
	0x19, 0x71, 0xd7, 0x2b, 0x52, 0xd7, 0x3f, 0x05, 0x57, 0xb3, 0x7b, 0xc0, 0xe3, 0x6c, 0x04, 0x94,
	0xa5, 0x63, 0x1c, 0x84, 0x1c, 0xe3, 0x0f, 0xe9, 0x5d, 0xa9, 0xb1, 0x86, 0x65, 0x44, 0xa4, 0x8c,
	0x48, 0x09, 0xab, 0x88, 0x81, 0x88, 0xd9, 0x58, 0x56, 0xd5, 0xc6, 0x9c, 0x89, 0x4c, 0x02, 0x4c,
	0x4a, 0x04, 0x78, 0x1d, 0x16, 0x13, 0xbd, 0x2f, 0x84, 0x75, 0xc8, 0x7d, 0x1a, 0x5a, 0xa8, 0x8b,
	0xec, 0x63, 0xd4, 0xe8, 0xf7, 0x1d, 0x1b, 0x05, 0x79, 0xeb, 0xd6, 0x65, 0x76, 0x57, 0x27, 0x8a,
	0x8b, 0xc5, 0x02, 0x95, 0x93, 0x8c, 0x62, 0xab, 0xd7, 0x43, 0x58, 0x56, 0xb7, 0x3a, 0xe6, 0x46,
	0xe3, 0x27, 0x34, 0x91, 0x83, 0xf1, 0x56, 0x8b, 0x04, 0x57, 0xcf, 0x33, 0x39, 0xb3, 0xd0, 0x9b,
	0x0f, 0xe2, 0x5d, 0x5a, 0x1c, 0xb2, 0x9d, 0x61, 0x4a, 0xea, 0xe0, 0x9b, 0xcc, 0x38, 0x62, 0x7b,
	0x21, 0x7f, 0xa1, 0x3d, 0xb8, 0xa8, 0xec, 0xd0, 0x98, 0x88, 0x7e, 0x8e, 0x59, 0xb0, 0xda, 0xc8,
	0xf4, 0xbb, 0x87, 0x34, 0x90, 0xd7, 0xc0, 0x0d, 0x37, 0xed, 0x23, 0x3b, 0x44, 0xd6, 0xd8, 0x77,
	0x86, 0x3f, 0x07, 0xd7, 0x73, 0xab, 0xe7, 0x32, 0xc1, 0x0e, 0x58, 0x16, 0x97, 0x09, 0x51, 0x06,
	0xa6, 0x2b, 0xd6, 0xaa, 0x36, 0x51, 0x2f, 0xe4, 0x74, 0xe5, 0x69, 0xcc, 0x74, 0xa4, 0xfa, 0x66,
	0xb0, 0x35, 0x08, 0x07, 0xa6, 0x23, 0x2b, 0x4b, 0xca, 0x6e, 0x5f, 0x86, 0x38, 0x9a, 0x56, 0x3a,
	0xbc, 0x56, 0x21, 0xa6, 0xfb, 0x92, 0x06, 0xcb, 0xea, 0x66, 0x09, 0x3a, 0x37, 0x61, 0xc1, 0x96,
	0x0b, 0x18, 0x52, 0xc9, 0xec, 0x31, 0x34, 0xa7, 0x1f, 0xd0, 0xf0, 0xb2, 0x62, 0xba, 0x07, 0x88,
	0x1a, 0x9b, 0x58, 0x5c, 0x58, 0x31, 0x9e, 0x96, 0x96, 0x8a, 0xa7, 0x45, 0x9d, 0x5a, 0x4a, 0xa2,
	0x53, 0x4b, 0xd6, 0x5d, 0x9e, 0xc2, 0xc1, 0xc6, 0x53, 0x9d, 0x18, 0xdb, 0x2d, 0xab, 0xf6, 0xed,
	0x8a, 0x82, 0xf5, 0x27, 0x25, 0xe2, 0x06, 0xfc, 0xf7, 0x2c, 0xfa, 0x15, 0x27, 0x57, 0x55, 0x20,
	0x97, 0x34, 0x7c, 0x13, 0x27, 0xbb, 0xe8, 0x7d, 0x8e, 0x4e, 0xf5, 0x5d, 0x1f, 0x85, 0xe1, 0x90,
	0x1a, 0x8f, 0xf1, 0x18, 0x26, 0x0c, 0xaf, 0x5a, 0xda, 0xf0, 0xba, 0x02, 0x33, 0x5b, 0x66, 0xd8,
	0x3d, 0xdc, 0x96, 0x22, 0x0e, 0x0a, 0x59, 0xc6, 0x23, 0x65, 0xe5, 0x01, 0xd9, 0xae, 0x6f, 0xa1,
	0x20, 0x30, 0x0f, 0x78, 0xc5, 0x3c, 0x89, 0x77, 0x30, 0x22, 0x30, 0x75, 0x4e, 0x98, 0x6e, 0xc9,
	0x99, 0xc6, 0x3f, 0xd1, 0xe0, 0x5c, 0xa3, 0x1b, 0xda, 0xc7, 0xe8, 0x54, 0xdd, 0x66, 0x9f, 0x0a,
	0xf1, 0xae, 0xc4, 0x2c, 0x02, 0x11, 0x04, 0x07, 0xb6, 0x7b, 0x37, 0x0a, 0xed, 0x8e, 0x21, 0xe2,
	0x2c, 0x2c, 0xe2, 0x76, 0xfa, 0xc8, 0x37, 0x43, 0x8f, 0x3b, 0xc3, 0x45, 0x69, 0xe3, 0x0d, 0x65,
	0xd7, 0x28, 0xd2, 0x4c, 0xb3, 0xe6, 0x27, 0x0b, 0x2c, 0x29, 0x92, 0xa3, 0x24, 0x91, 0xc3, 0xf8,
	0x4e, 0xe2, 0x38, 0xf5, 0xd0, 0xf6, 0xb1, 0x14, 0x5a, 0xb5, 0x5d, 0x6b, 0x75, 0xc8, 0x22, 0xf2,
	0xbe, 0xa3, 0x1b, 0x30, 0xcb, 0x0a, 0x76, 0x85, 0x20, 0xbf, 0x52, 0x9e, 0xf1, 0x3b, 0x5a, 0x56,
	0x05, 0x41, 0x1f, 0xd3, 0xba, 0x19, 0xb0, 0xa2, 0x46, 0x37, 0xde, 0x2d, 0x4a, 0x99, 0x18, 0x0a,
	0x7f, 0xd7, 0x42, 0xbc, 0x1d, 0xda, 0x45, 0x39, 0x93, 0x43, 0x45, 0x01, 0x22, 0xd9, 0x6c, 0x96,
	0x33, 0xf5, 0xeb, 0x30, 0xdb, 0x08, 0x02, 0xdb, 0x3d, 0xe8, 0x50, 0x15, 0xaa, 0x12, 0x91, 0xd6,
	0x76, 0x0f, 0x08, 0x69, 0x8d, 0x97, 0xc8, 0x9c, 0x26, 0xae, 0x62, 0xd6, 0x91, 0xed, 0xf2, 0xa3,
	0x92, 0x0c, 0x91, 0x62, 0xdc, 0x25, 0x26, 0xa5, 0x04, 0x38, 0x25, 0xb6, 0x1d, 0x90, 0xac, 0xf8,
	0x18, 0x87, 0x24, 0xb1, 0x10, 0xda, 0x14, 0xe3, 0x82, 0x90, 0x84, 0xf1, 0x36, 0x2c, 0x34, 0x2c,
	0x6b, 0x8f, 0xd7, 0x33, 0x42, 0x6f, 0xf0, 0xf8, 0xe0, 0xb3, 0xf5, 0x8d, 0xa7, 0xe3, 0xca, 0xcb,
	0x62, 0xe5, 0xf7, 0xa1, 0x26, 0x57, 0x1e, 0xf4, 0xc9, 0xb5, 0x8b, 0xbd, 0x84, 0x5e, 0x1d, 0x65,
	0xe0, 0xb6, 0x37, 0x7c, 0xbf, 0x1d, 0xf2, 0x69, 0xc5, 0x52, 0xc6, 0xd7, 0x35, 0xb8, 0x8c, 0x49,
	0xfa, 0xd0, 0xc6, 0xe3, 0xd3, 0x46, 0x98, 0xb8, 0x16, 0xc2, 0x32, 0xdd, 0xa5, 0xe1, 0x50, 0x2e,
	0xc3, 0xb4, 0x19, 0x04, 0x36, 0x21, 0x26, 0xe3, 0x88, 0x38, 0x83, 0x2a, 0x76, 0xae, 0x15, 0x1b,
	0x1e, 0x68, 0x0a, 0x7f, 0xc5, 0xea, 0x88, 0x46, 0x2e, 0xce, 0x48, 0x46, 0x1b, 0xaa, 0x24, 0x8f,
	0xde, 0x8c, 0x3d, 0xb8, 0x92, 0xd3, 0x29, 0x8a, 0xac, 0xec, 0xc2, 0x92, 0x3c, 0x28, 0x54, 0x22,
	0xfb, 0x5d, 0xe4, 0x32, 0x4e, 0x26, 0xaa, 0x2b, 0x20, 0x86, 0x37, 0xe5, 0x53, 0x5d, 0x8c, 0x78,
	0xfa, 0xcb, 0xd4, 0x77, 0x2a, 0xbb, 0x5f, 0x2f, 0xc2, 0x59, 0x3b, 0xd8, 0x46, 0xc8, 0x22, 0x85,
	0xb4, 0x80, 0x0d, 0x46, 0xba, 0xe0, 0xfd, 0xa3, 0xde, 0x25, 0xda, 0x43, 0xa2, 0xa2, 0xac, 0x99,
	0x6e, 0xc3, 0xb2, 0xc6, 0x8f, 0xa8, 0x6c, 0x7c, 0x18, 0x2e, 0x67, 0x57, 0x4b, 0xf7, 0xbf, 0x5d,
	0x92, 0xc9, 0xf7, 0xbf, 0x34, 0x65, 0xdc, 0x89, 0x74, 0x25, 0x32, 0xb3, 0x71, 0x1d, 0x8e, 0x19,
	0x09, 0x1d, 0x65, 0x48, 0x71, 0xe3, 0x63, 0xcc, 0xa4, 0xa8, 0xfa, 0x26, 0xe8, 0xe3, 0x19, 0x63,
	0x13, 0x99, 0x62, 0x72, 0xea, 0x46, 0x69, 0xe3, 0x0e, 0x33, 0x67, 0x61, 0xa1, 0x13, 0x7d, 0xc5,
	0x6e, 0x98, 0x89, 0x33, 0xb0, 0x2c, 0x4c, 0xfa, 0x8f, 0xc0, 0xc5, 0x8c, 0x6f, 0x68, 0x63, 0x34,
	0x3f, 0x6e, 0x8c, 0xa7, 0x8d, 0x3f, 0x2b, 0xc3, 0x42, 0xdb, 0x3e, 0x70, 0xf7, 0xfa, 0x34, 0x83,
	0xb1, 0xd1, 0x6e, 0x9a, 0x8d, 0xc4, 0xa3, 0x54, 0xbc, 0x26, 0xd1, 0x08, 0x7b, 0x16, 0x8a, 0x0e,
	0x9f, 0xf1, 0x9a, 0x24, 0x66, 0x62, 0x2e, 0x88, 0x32, 0xf8, 0x06, 0x30, 0xca, 0x18, 0x71, 0x1c,
	0x9b, 0xde, 0x08, 0x7e, 0xa0, 0x0e, 0x61, 0x93, 0x1e, 0x18, 0x30, 0xd2, 0x03, 0x63, 0x26, 0xe5,
	0x81, 0x21, 0xee, 0x6c, 0x67, 0xb3, 0xdc, 0x14, 0xe6, 0xc4, 0xdd, 0xf1, 0x65, 0x98, 0xee, 0x53,
	0xf3, 0xbc, 0x85, 0xc8, 0x81, 0x6c, 0xb5, 0x15, 0x67, 0x18, 0xff, 0xa6, 0x04, 0x35, 0x79, 0x28,
	0x83, 0xbe, 0xfe, 0x29, 0xc9, 0x28, 0xf8, 0x62, 0xda, 0xe2, 0x96, 0xf8, 0x20, 0x65, 0x0c, 0xd3,
	0x5f, 0x8f, 0xdf, 0xee, 0x63, 0xfb, 0xa4, 0xbc, 0x10, 0x29, 0xfc, 0x97, 0xf1, 0x5b, 0xda, 0x49,
	0x8c, 0x68, 0xfa, 0x79, 0xd0, 0x05, 0x06, 0x6b, 0xba, 0xc7, 0xa6, 0x63, 0x5b, 0xb5, 0x92, 0x7e,
	0x01, 0x16, 0x85, 0x7c, 0x6e, 0x98, 0xaf, 0x95, 0x75, 0x1d, 0xe6, 0xd7, 0xcc, 0x7e, 0xd8, 0x3d,
	0x34, 0xe9, 0xfb, 0x1c, 0x56, 0xad, 0x22, 0xe4, 0xf1, 0x0a, 0xaa, 0xfa, 0x1c, 0x4c, 0xdf, 0x75,
	0x3c, 0xcf, 0x7a, 0x64, 0xda, 0x61, 0x6d, 0x02, 0xb7, 0x43, 0x51, 0x6e, 0x79, 0xfb, 0x1e, 0x0f,
	0x9b, 0x56, 0x9b, 0x34, 0x9a, 0x70, 0x41, 0x50, 0x09, 0xa2, 0x55, 0x9c, 0xcd, 0xb9, 0x87, 0xa2,
	0x3e, 0xc1, 0x52, 0xc4, 0x9b, 0x43, 0x5c, 0xff, 0x59, 0xca, 0xd8, 0xca, 0xa8, 0xea, 0x94, 0x0a,
	0xcf, 0x16, 0x16, 0x86, 0x54, 0xf9, 0x88, 0xc4, 0x95, 0xa0, 0xf3, 0x9c, 0xb4, 0x77, 0x6f, 0xe6,
	0x54, 0x77, 0xca, 0x1e, 0xee, 0xc0, 0xd9, 0x4f, 0x7b, 0xb6, 0x4b, 0x76, 0x50, 0x44, 0x0a, 0xb1,
	0x65, 0xb7, 0xe9, 0x1e, 0xdb, 0xa1, 0x18, 0xa5, 0x21, 0xca, 0xc0, 0xa5, 0x5b, 0x88, 0x8c, 0x74,
	0xf4, 0x2c, 0x65, 0x9c, 0x61, 0xbc, 0x9a, 0xaa, 0x30, 0xe8, 0xe3, 0x5d, 0xc0, 0x9a, 0xe9, 0xe2,
	0xfc, 0x66, 0x14, 0x85, 0x5b, 0xc8, 0x31, 0x6e, 0xb3, 0x33, 0x07, 0x49, 0x04, 0xe6, 0x29, 0x4a,
	0x1f, 0x86, 0xf3, 0xaa, 0x0f, 0xe8, 0xe2, 0x6c, 0xb3, 0x4c, 0x27, 0xde, 0xcd, 0xb3, 0x0c, 0x63,
	0x13, 0x16, 0x08, 0x05, 0xe9, 0xb0, 0xe6, 0x3b, 0x78, 0x25, 0x56, 0x64, 0x45, 0x0c, 0xf2, 0x4f,
	0x91, 0x25, 0xbd, 0xe1, 0x38, 0x74, 0x0e, 0x62, 0x95, 0x28, 0x58, 0x1d, 0x12, 0xcd, 0x0f, 0x77,
	0xfe, 0x3a, 0xcc, 0x9a, 0x44, 0xcd, 0x66, 0xfa, 0x21, 0x13, 0xc6, 0x66, 0xac, 0x7a, 0x1b, 0x2e,
	0x75, 0x87, 0x56, 0xd7, 0x90, 0x6d, 0xd6, 0xd5, 0x3f, 0x0c, 0x55, 0x32, 0x85, 0xd9, 0x86, 0x2e,
	0xed, 0xe3, 0x97, 0xc0, 0xb2, 0x45, 0xc1, 0x8d, 0x7f, 0x4e, 0xcf, 0x0a, 0x09, 0x39, 0x84, 0xb9,
	0xc9, 0xed, 0x64, 0x6e, 0xbc, 0x6a, 0x54, 0x5b, 0x2c, 0x45, 0xe2, 0xb4, 0x63, 0x45, 0x4f, 0x0c,
	0xe1, 0x4f, 0xb4, 0x53, 0x2b, 0x85, 0x61, 0x39, 0x85, 0x21, 0x39, 0xe1, 0x0b, 0x6d, 0xa7, 0x43,
	0x02, 0x02, 0x50, 0x75, 0x61, 0x0a, 0x67, 0xac, 0x9b, 0x21, 0xa2, 0xd1, 0xcd, 0xe3, 0xfd, 0x4d,
	0x35, 0x25, 0x89, 0x8d, 0x3e, 0xd3, 0xf8, 0x53, 0xfd, 0xa5, 0xfc, 0x8e, 0x7c, 0x51, 0x0b, 0xe3,
	0x49, 0x62, 0x5c, 0x94, 0x74, 0x30, 0x9a, 0xc2, 0x9b, 0x0c, 0x32, 0x7e, 0x2e, 0xdb, 0x8e, 0x95,
	0xc9, 0x76, 0x4c, 0xca, 0x33, 0x3e, 0x89, 0x5b, 0x74, 0x05, 0xb6, 0x12, 0x48, 0x34, 0x72, 0x3f,
	0x66, 0x6c, 0xc1, 0xc5, 0x8c, 0xaf, 0x4f, 0xd3, 0x61, 0xe3, 0x47, 0x34, 0x98, 0x27, 0x66, 0x2b,
	0xcb, 0x7d, 0x68, 0xf7, 0x09, 0xbf, 0x2e, 0x41, 0x35, 0x08, 0x31, 0x31, 0xd9, 0xb9, 0x38, 0x49,
	0x64, 0xc4, 0x07, 0xac, 0xc3, 0xe4, 0xea, 0x81, 0xfb, 0x20, 0xf6, 0x0b, 0xe0, 0x49, 0xf2, 0x2c,
	0x97, 0x6b, 0x91, 0x12, 0xf6, 0x9a, 0x14, 0x4b, 0x92, 0xa7, 0xbc, 0x06, 0xa1, 0xb7, 0x6b, 0x0e,
	0x99, 0x03, 0x3a, 0x4f, 0x1a, 0x7e, 0xd4, 0x97, 0x5d, 0x73, 0xc8, 0xfb, 0x82, 0x7f, 0x46, 0x11,
	0x8f, 0x49, 0x02, 0x23, 0xb3, 0x6b, 0x0e, 0x1b, 0x47, 0xdc, 0x60, 0xc6, 0x52, 0xa7, 0xe9, 0x8d,
	0xf1, 0x33, 0x1a, 0xcc, 0xae, 0x0e, 0x86, 0x14, 0xff, 0x3c, 0x87, 0x3a, 0x2c, 0x4b, 0xed, 0xfe,
	0xe6, 0x31, 0xa7, 0x00, 0x4b, 0xe1, 0xfc, 0x2d, 0xcf, 0x0d, 0x0f, 0xf9, 0xa3, 0x66, 0x2c, 0x45,
	0x3b, 0x19, 0x04, 0x4f, 0x22, 0x03, 0x3c, 0x4d, 0xe9, 0xcf, 0xc2, 0x04, 0x31, 0xcb, 0x04, 0xea,
	0xc7, 0x96, 0x58, 0xa1, 0xf1, 0x7d, 0x62, 0xb7, 0xe8, 0xd0, 0xb6, 0x50, 0x28, 0x0e, 0x2d, 0x4b,
	0x66, 0xcb, 0x5e, 0xfd, 0x63, 0x30, 0xc9, 0x06, 0x95, 0xd9, 0xfb, 0xae, 0x29, 0x5d, 0x2e, 0xe2,
	0xb1, 0x6f, 0x71, 0x78, 0x63, 0x83, 0x58, 0xc9, 0x69, 0x09, 0x1b, 0x9e, 0x11, 0xc4, 0x69, 0x06,
	0x3b, 0x7d, 0xe4, 0x72, 0xf7, 0x23, 0x9a, 0x32, 0xbe, 0xa2, 0x29, 0xea, 0x39, 0xdd, 0x4a, 0x32,
	0x0e, 0x36, 0xb7, 0xa2, 0xe7, 0x38, 0x29, 0x6f, 0xb1, 0x43, 0xb8, 0x2c, 0x74, 0x8c, 0x3f, 0xd6,
	0x54, 0x1f, 0x7c, 0xcb, 0x47, 0x01, 0x7f, 0xca, 0x1a, 0x67, 0xb1, 0xbe, 0x32, 0x3f, 0x65, 0x13,
	0xa6, 0xc5, 0xe1, 0x65, 0x94, 0x79, 0xc5, 0x39, 0x28, 0xbf, 0xa7, 0xa9, 0x3e, 0xf8, 0xd6, 0x33,
	0xde, 0x73, 0x30, 0xbb, 0x76, 0xf8, 0x78, 0xe4, 0x74, 0x34, 0x6e, 0x88, 0x70, 0x01, 0x09, 0x54,
	0x87, 0xd7, 0xea, 0x3e, 0x3f, 0xf3, 0x25, 0x09, 0xe3, 0x21, 0xcc, 0x62, 0x4d, 0xe6, 0x69, 0x4f,
	0x6e, 0xe3, 0x53, 0x62, 0xbd, 0x74, 0x19, 0x6d, 0x4b, 0xcb, 0x28, 0x4d, 0xe5, 0xe8, 0x45, 0x4e,
	0xa4, 0x91, 0x08, 0x0f, 0x53, 0xbc, 0xef, 0x5e, 0x10, 0x89, 0xd6, 0xb8, 0x17, 0x84, 0x94, 0x1d,
	0xdb, 0xb5, 0x84, 0xcc, 0x31, 0x6c, 0xf9, 0x5f, 0xa7, 0x9c, 0x15, 0x85, 0x98, 0x8f, 0xc2, 0x83,
	0x7c, 0x3b, 0xe3, 0xd9, 0x1b, 0x7f, 0x49, 0x15, 0x95, 0x64, 0xaf, 0x08, 0x45, 0xde, 0x80, 0x09,
	0x1f, 0x09, 0xf7, 0x87, 0x5e, 0x55, 0xf9, 0x0a, 0xa8, 0xbe, 0x14, 0x37, 0x48, 0xac, 0x8a, 0xf8,
	0xe5, 0xa4, 0x52, 0xb1, 0xd7, 0x65, 0x8d, 0x8f, 0x9e, 0x68, 0x6f, 0x04, 0x30, 0x71, 0xd7, 0xb4,
	0x1d, 0x64, 0xd5, 0x4a, 0xc6, 0xf3, 0x30, 0xdf, 0xb0, 0xac, 0x4d, 0xef, 0xc0, 0x76, 0xd7, 0x47,
	0x9c, 0xc3, 0xff, 0x9a, 0x46, 0x82, 0xbd, 0xc7, 0xb0, 0x0c, 0xf1, 0xd4, 0xdd, 0xa9, 0x97, 0xd2,
	0xf7, 0xdc, 0x92, 0x9f, 0x89, 0x58, 0xcb, 0x76, 0x2a, 0x9f, 0x3a, 0xb4, 0xb3, 0x35, 0x81, 0xa6,
	0x4e, 0xe8, 0x40, 0xf1, 0x61, 0x66, 0x2b, 0x59, 0xb7, 0x0f, 0xec, 0xd0, 0x74, 0x1e, 0x99, 0x8e,
	0xc3, 0xfd, 0x34, 0x72, 0x11, 0xfc, 0x63, 0x8d, 0x9d, 0xfc, 0x29, 0x3f, 0x24, 0xd8, 0xbe, 0x95,
	0xc6, 0xf6, 0xe3, 0xe9, 0x77, 0x8b, 0x72, 0xeb, 0x78, 0x5f, 0x51, 0x7f, 0x05, 0xce, 0xb7, 0x50,
	0xf7, 0x78, 0x13, 0x6f, 0x43, 0x7d, 0x66, 0x11, 0x55, 0x3e, 0x00, 0x37, 0x17, 0x61, 0xfd, 0x0b,
	0x1a, 0x5c, 0x54, 0x7e, 0x43, 0x10, 0x6e, 0xa7, 0x11, 0x7e, 0x5d, 0x31, 0x87, 0x33, 0x3e, 0x57,
	0xe3, 0x3a, 0x0e, 0x4e, 0xec, 0xea, 0xd4, 0x89, 0x70, 0x12, 0xbe, 0x39, 0x0d, 0x4e, 0x89, 0xcf,
	0x9f, 0x0a, 0x4e, 0x17, 0xe1, 0x42, 0xdc, 0x00, 0x7f, 0x65, 0xda, 0xc2, 0x22, 0xce, 0xf8, 0x03,
	0x0d, 0x96, 0xd5, 0x65, 0xa4, 0xf3, 0x0f, 0xd2, 0x9d, 0xff, 0x70, 0x4e, 0xe7, 0x93, 0xdf, 0x67,
	0x70, 0x9f, 0x24, 0x40, 0xcb, 0x02, 0x25, 0x4f, 0x86, 0x56, 0x33, 0x5a, 0xa1, 0xb6, 0x06, 0x21,
	0x92, 0x4d, 0xac, 0x27, 0xbb, 0x73, 0x65, 0xfc, 0xbe, 0x16, 0xad, 0x3f, 0x52, 0x5d, 0x84, 0x08,
	0xad, 0x34, 0x11, 0x5e, 0x53, 0x4f, 0x43, 0xc5, 0xd7, 0xef, 0xeb, 0x04, 0x6c, 0xc0, 0x39, 0xe6,
	0x2a, 0xb2, 0xe7, 0x06, 0x83, 0xfd, 0xa0, 0xeb, 0xdb, 0xfb, 0xb9, 0x3e, 0x12, 0x35, 0x28, 0x1f,
	0x9b, 0x5c, 0x87, 0xc0, 0x3f, 0x8d, 0x9f, 0xd7, 0xa0, 0xae, 0xaa, 0xa3, 0x38, 0xe6, 0x59, 0x5f,
	0x3f, 0x15, 0xd6, 0xbd, 0x4d, 0xdc, 0xd3, 0x8a, 0x63, 0x88, 0xf7, 0xf7, 0xf5, 0x7b, 0x63, 0xe1,
	0x73, 0xef, 0x44, 0xf8, 0x28, 0x48, 0x7a, 0x32, 0x0c, 0x6d, 0x72, 0x40, 0xc6, 0xdf, 0xe5, 0x20,
	0xf6, 0x8f, 0x02, 0x6f, 0xa0, 0x27, 0x5f, 0xf6, 0x29, 0xa4, 0x64, 0xfd, 0x39, 0x0d, 0x7f, 0x95,
	0x68, 0x8b, 0x50, 0x66, 0x37, 0x4d, 0x99, 0x3b, 0x2a, 0xca, 0x28, 0xbe, 0xcd, 0xa0, 0xcb, 0x6d,
	0xd9, 0x40, 0x93, 0xa7, 0x56, 0x50, 0xcb, 0xcc, 0xc9, 0xc8, 0x76, 0x37, 0x7a, 0x14, 0xbd, 0xd9,
	0x5f, 0xa5, 0xfe, 0xdb, 0xe8, 0x1d, 0x5d, 0x87, 0x8a, 0x69, 0x59, 0xdc, 0xea, 0x4f, 0x7e, 0xeb,
	0x97, 0x01, 0xec, 0xa0, 0x13, 0xd8, 0x07, 0x6e, 0x67, 0xd0, 0x67, 0xd3, 0x6d, 0xca, 0x0e, 0xa8,
	0x21, 0xd5, 0xf8, 0x1d, 0x2d, 0xe2, 0xb0, 0xb8, 0x22, 0x42, 0x92, 0x9d, 0x34, 0x49, 0x5e, 0xc9,
	0x62, 0x16, 0xf9, 0xd3, 0x62, 0x62, 0xaf, 0x7a, 0x4a, 0xb1, 0xf7, 0x0d, 0x0d, 0x80, 0xb6, 0xc9,
	0x5d, 0xe7, 0x23, 0xf3, 0x43, 0x89, 0x45, 0x78, 0x93, 0xd4, 0x70, 0x61, 0x07, 0x4c, 0xbe, 0x60,
	0x36, 0x2a, 0x96, 0xa2, 0xf9, 0xbb, 0x9e, 0xcf, 0x7d, 0x13, 0x58, 0x8a, 0xdc, 0xc3, 0x32, 0x83,
	0x70, 0xc7, 0x25, 0x0f, 0x6e, 0xb3, 0x30, 0x30, 0x71, 0x0e, 0x3d, 0x97, 0xa1, 0x44, 0xe4, 0x57,
	0xf1, 0x79, 0xda, 0xd8, 0x8a, 0xb6, 0x6a, 0x98, 0x30, 0x99, 0x4b, 0xa8, 0xe8, 0x14, 0x94, 0x37,
	0x46, 0xff, 0x99, 0xaa, 0xc2, 0xc9, 0xfa, 0xc8, 0x28, 0xbd, 0x99, 0x1e, 0xa5, 0x57, 0xf3, 0x46,
	0x69, 0xf4, 0xe2, 0xaa, 0xbf, 0xc2, 0xaf, 0x0c, 0x94, 0x32, 0x9c, 0x3d, 0x62, 0xea, 0xb3, 0x3b,
	0x03, 0x27, 0x1c, 0x41, 0x13, 0x96, 0xa2, 0x2a, 0x76, 0x7c, 0xea, 0x55, 0x96, 0x4b, 0x1e, 0xce,
	0xd6, 0xa5, 0x4c, 0xb6, 0x2e, 0x27, 0x48, 0xf6, 0x73, 0x1a, 0x7d, 0x0c, 0x3b, 0xd1, 0x46, 0x71,
	0x92, 0x65, 0x7c, 0xfc, 0x54, 0x84, 0x7a, 0x43, 0x70, 0xc9, 0x6d, 0xf7, 0x4d, 0xbb, 0xeb, 0x8c,
	0xc2, 0x5e, 0xb8, 0x7a, 0x45, 0x7e, 0x63, 0x31, 0x7f, 0x2e, 0x55, 0x47, 0xf1, 0x69, 0xab, 0xfc,
	0x34, 0x7b, 0xa9, 0x6e, 0x49, 0x4b, 0x75, 0xeb, 0x34, 0x4b, 0xf5, 0x2a, 0x2c, 0x36, 0xdd, 0x00,
	0xf9, 0xe1, 0x5e, 0xfb, 0xd4, 0x48, 0xff, 0x0b, 0x0d, 0xce, 0xa7, 0x2b, 0x29, 0x2e, 0xbf, 0xd5,
	0xdf, 0xbe, 0xaf, 0x68, 0x7f, 0x17, 0x8d, 0x3f, 0x70, 0x7a, 0x9c, 0xbf, 0xa9, 0x91, 0x38, 0xda,
	0x29, 0x84, 0xb7, 0xd2, 0x08, 0xdf, 0x4e, 0x21, 0xac, 0xf8, 0xf0, 0x7d, 0xc5, 0xf6, 0x79, 0xb2,
	0x96, 0x37, 0x9c, 0x04, 0xc2, 0x1c, 0x2f, 0x4d, 0xc0, 0xeb, 0x7f, 0xd0, 0xb5, 0x38, 0x01, 0x7b,
	0xa2, 0xb5, 0x58, 0xf1, 0x6d, 0x06, 0x76, 0x2b, 0x30, 0x1b, 0xfa, 0x03, 0xd4, 0x91, 0x97, 0x1f,
	0xc0, 0x79, 0x6c, 0x75, 0x30, 0x60, 0xae, 0x67, 0x3a, 0x41, 0x0c, 0xc2, 0x42, 0xfb, 0x93, 0xcc,
	0xbd, 0xd3, 0x2c, 0x53, 0x3f, 0x5e, 0x82, 0x79, 0xea, 0x9c, 0x38, 0xea, 0x2c, 0x2b, 0xc3, 0x8f,
	0xf0, 0x3a, 0xcc, 0xee, 0x8a, 0x4f, 0xe0, 0x96, 0x0b, 0x9c, 0xe4, 0x57, 0x46, 0x9e, 0xe4, 0x57,
	0x93, 0x27, 0xf9, 0x91, 0xe6, 0x34, 0x91, 0x73, 0x47, 0x38, 0x79, 0x62, 0x3e, 0x39, 0xf2, 0xc4,
	0x7c, 0x2a, 0x79, 0x62, 0x6e, 0xfc, 0x5f, 0x0d, 0xce, 0x4a, 0x04, 0x29, 0x6e, 0xd1, 0x48, 0x7d,
	0x76, 0x42, 0x2e, 0xfe, 0xd2, 0xc9, 0x8e, 0xb3, 0x33, 0x8e, 0xad, 0x4b, 0xfa, 0x12, 0x7b, 0x86,
	0x12, 0xd7, 0xc2, 0x0f, 0xae, 0xcb, 0x52, 0x2e, 0x3f, 0xba, 0xae, 0xc8, 0x47, 0xd7, 0x55, 0xe3,
	0xaf, 0x4b, 0x70, 0x5e, 0x74, 0x65, 0xe3, 0x47, 0xe5, 0x34, 0xcc, 0xdd, 0x31, 0x2d, 0xe9, 0x88,
	0xbe, 0x28, 0xb3, 0xc7, 0x02, 0xb8, 0x7e, 0x05, 0xc0, 0x47, 0x11, 0x04, 0x0b, 0x9e, 0xee, 0x47,
	0xfe, 0x6a, 0x97, 0x61, 0xda, 0xec, 0x86, 0xf6, 0x31, 0x09, 0xe5, 0x53, 0x26, 0xdb, 0xf3, 0x38,
	0x43, 0xbf, 0x04, 0xd3, 0xfb, 0xb6, 0x6b, 0xd1, 0xfb, 0xa1, 0xec, 0x08, 0x0e, 0x67, 0x90, 0xa3,
	0x97, 0x67, 0x60, 0x8e, 0x43, 0x52, 0x00, 0xaa, 0xeb, 0xcc, 0xf2, 0x4c, 0x02, 0xf4, 0x02, 0x9c,
	0x8d, 0x80, 0xa2, 0xb3, 0x40, 0xea, 0xd1, 0xbf, 0xc0, 0x0b, 0x1a, 0xec, 0x4c, 0xd0, 0x80, 0x39,
	0xd2, 0x5a, 0x04, 0x47, 0x3d, 0x3a, 0x66, 0x70, 0x26, 0x87, 0xb9, 0x08, 0x53, 0xde, 0x13, 0x97,
	0x4e, 0x35, 0x16, 0x93, 0x88, 0xa4, 0x9b, 0x96, 0xfe, 0x22, 0xe8, 0xb6, 0x6b, 0x87, 0x36, 0x47,
	0x96, 0x72, 0x1c, 0x7d, 0xf7, 0xa1, 0xc6, 0x4a, 0x22, 0x7a, 0x93, 0xeb, 0x30, 0x01, 0xf2, 0x37,
	0xde, 0xed, 0x9b, 0x6e, 0x60, 0x7b, 0xee, 0x5d, 0x72, 0x6a, 0x1f, 0xcf, 0xb5, 0x75, 0x69, 0xae,
	0xad, 0x47, 0x8a, 0x41, 0xe2, 0x03, 0xc2, 0x8b, 0x1b, 0x34, 0x92, 0x50, 0x07, 0xf1, 0x32, 0x76,
	0x81, 0xf3, 0xaa, 0x52, 0x3b, 0x88, 0x6a, 0x68, 0xcd, 0x0d, 0xc4, 0xe4, 0x18, 0x96, 0xd8, 0x3d,
	0x98, 0x93, 0x6a, 0xce, 0xc2, 0x82, 0xc5, 0x57, 0x37, 0xb9, 0x42, 0x84, 0x7f, 0xeb, 0x75, 0x98,
	0xe4, 0x2e, 0x34, 0xec, 0x70, 0x8d, 0x25, 0x8d, 0x10, 0x16, 0xa5, 0x6a, 0x59, 0x0c, 0xa7, 0xac,
	0xca, 0xd3, 0x64, 0x28, 0x9d, 0x82, 0x0c, 0x46, 0x0b, 0xce, 0xa7, 0x5b, 0x1d, 0xd3, 0x3b, 0xfb,
	0x4f, 0xd9, 0x69, 0x28, 0x9e, 0x37, 0x1b, 0xe4, 0xba, 0x48, 0x74, 0x81, 0x34, 0x5a, 0x61, 0xca,
	0xc2, 0xbd, 0x87, 0xeb, 0x30, 0x3b, 0x08, 0x90, 0x63, 0xee, 0x3b, 0xa8, 0xd3, 0x8b, 0x02, 0x27,
	0xcd, 0xf0, 0xbc, 0xbb, 0x34, 0x3e, 0x5c, 0x04, 0x42, 0x42, 0xde, 0xd3, 0x48, 0xf9, 0xd1, 0x77,
	0x6d, 0xfb, 0x0b, 0x48, 0x7f, 0x96, 0x90, 0x84, 0x02, 0x3d, 0xb1, 0xad, 0x90, 0xfb, 0xbd, 0x45,
	0x9f, 0x3e, 0xc2, 0x99, 0xfa, 0x87, 0x48, 0xf4, 0x28, 0x0a, 0x76, 0x88, 0xec, 0x83, 0xc3, 0x90,
	0x4d, 0xa6, 0xe8, 0xeb, 0xfb, 0x24, 0xd7, 0x38, 0x1f, 0x6f, 0x10, 0x22, 0x4c, 0x5a, 0xe8, 0x1d,
	0xac, 0xe1, 0x5c, 0x50, 0x14, 0x8c, 0x47, 0x35, 0x29, 0x4a, 0x10, 0x0f, 0x02, 0x79, 0x8f, 0x0e,
	0x72, 0xdc, 0x4a, 0xe6, 0x5b, 0xa6, 0x89, 0xce, 0x24, 0x3e, 0x33, 0x1e, 0xc1, 0x25, 0xe6, 0x79,
	0x25, 0x48, 0x69, 0xf2, 0x7c, 0xe7, 0x98, 0x63, 0xfd, 0x8f, 0x34, 0xa8, 0x67, 0xd4, 0x9c, 0xcd,
	0xbb, 0x57, 0x01, 0x7a, 0xbe, 0x77, 0x24, 0x79, 0x6c, 0x08, 0x39, 0xe4, 0x32, 0x87, 0x27, 0x45,
	0x19, 0x89, 0xd2, 0xd1, 0x2e, 0xa3, 0x22, 0xec, 0x32, 0xf8, 0x75, 0xeb, 0xaa, 0x70, 0xdd, 0xfa,
	0x00, 0x2e, 0xbc, 0x39, 0x40, 0xfe, 0x90, 0xee, 0x0b, 0x02, 0xba, 0xa7, 0xb2, 0xad, 0x13, 0xdc,
	0xf5, 0xab, 0xf0, 0x35, 0x5e, 0xba, 0xc2, 0x4b, 0x19, 0x2f, 0xce, 0x30, 0xbe, 0x13, 0x96, 0xd5,
	0x0d, 0xf1, 0x77, 0x22, 0xbf, 0x37, 0xf0, 0xdc, 0x35, 0xcf, 0x0d, 0x91, 0x4b, 0x0f, 0x85, 0x66,
	0x5b, 0x62, 0x96, 0x71, 0x8b, 0xa8, 0x63, 0xd4, 0x1c, 0xce, 0xfc, 0xe8, 0x72, 0x4d, 0xf2, 0x77,
	0x88, 0x4a, 0x96, 0x80, 0xe7, 0x51, 0x64, 0xb8, 0x6c, 0xa1, 0x53, 0x2c, 0x92, 0x2d, 0x7f, 0xa2,
	0xc1, 0xd9, 0x3d, 0xc6, 0xb2, 0x01, 0x71, 0xaf, 0xcb, 0xbb, 0x4b, 0xbd, 0x04, 0x55, 0xfc, 0x8b,
	0x7b, 0x0d, 0xd1, 0x04, 0x71, 0xdd, 0x3c, 0x34, 0xc3, 0x48, 0xeb, 0x62, 0x29, 0x72, 0x55, 0x86,
	0xfa, 0x9d, 0x92, 0x97, 0xb0, 0x88, 0x9f, 0x51, 0x94, 0x81, 0xe7, 0x64, 0xdf, 0xf7, 0x42, 0xaf,
	0xeb, 0x39, 0x1d, 0xc7, 0x1c, 0x46, 0x41, 0xb1, 0xe7, 0x78, 0xee, 0x26, 0xce, 0xd4, 0xaf, 0x43,
	0x65, 0xdd, 0xf1, 0x32, 0xd4, 0x1b, 0x52, 0x64, 0xfc, 0x6f, 0x0d, 0x96, 0x92, 0x38, 0xf0, 0x0b,
	0xdc, 0xac, 0x3d, 0xea, 0xb3, 0x34, 0xdb, 0x8a, 0xd2, 0xfa, 0x6b, 0x31, 0x2a, 0xd9, 0xc2, 0x91,
	0xdd, 0xa3, 0x30, 0x87, 0x1c, 0xd5, 0x25, 0xa8, 0x52, 0xaf, 0xc4, 0x32, 0xa9, 0x8e, 0x26, 0xf0,
	0x6a, 0x18, 0xb9, 0x2b, 0x52, 0x3c, 0x27, 0x5d, 0xe6, 0xab, 0x18, 0x15, 0xb9, 0x01, 0x7b, 0x97,
	0x8d, 0x16, 0xb9, 0x81, 0xfe, 0x29, 0xac, 0x12, 0xe0, 0x7e, 0x0a, 0xd7, 0x24, 0x14, 0x51, 0x46,
	0x71, 0x3d, 0x82, 0xba, 0x24, 0x7c, 0x63, 0x7c, 0x55, 0xe3, 0x97, 0x49, 0x57, 0xa9, 0xb7, 0x65,
	0x7b, 0xd0, 0xcf, 0x3d, 0x86, 0x5d, 0x81, 0x99, 0x5d, 0xc7, 0xec, 0xa2, 0x43, 0xcf, 0xb1, 0x62,
	0x8f, 0x28, 0x21, 0x4b, 0xaf, 0x41, 0xf9, 0x00, 0x79, 0x6c, 0x3f, 0x8e, 0x7f, 0x16, 0x7e, 0x6d,
	0x53, 0xd1, 0x91, 0xf1, 0x25, 0xc8, 0x39, 0x7a, 0x3b, 0x8f, 0x18, 0x34, 0x03, 0xac, 0xe4, 0x45,
	0xf7, 0x94, 0x22, 0xed, 0x44, 0x93, 0x3d, 0x9a, 0xd8, 0x35, 0xba, 0x64, 0x3c, 0x02, 0x9c, 0xc6,
	0xcb, 0x49, 0xcf, 0xf3, 0xbb, 0xa8, 0x63, 0x91, 0x5a, 0x19, 0x96, 0x33, 0x24, 0x8f, 0x36, 0x54,
	0x0c, 0xdb, 0x7f, 0x5b, 0x82, 0xba, 0xaa, 0x63, 0x85, 0x6e, 0x82, 0x67, 0x7d, 0x78, 0x4b, 0x70,
	0xfb, 0x7c, 0x0d, 0xce, 0xdb, 0x4c, 0xa9, 0xed, 0x20, 0x4c, 0x8f, 0xce, 0x91, 0x74, 0xca, 0xbd,
	0x64, 0x8b, 0x2a, 0x2f, 0xf7, 0x0a, 0x10, 0x95, 0xb2, 0xb2, 0xa4, 0x94, 0x19, 0x5f, 0xd3, 0xa0,
	0x92, 0xd6, 0x9d, 0xb1, 0xe6, 0x8b, 0xfc, 0x23, 0x9b, 0x3c, 0x4e, 0xb7, 0x8e, 0x5c, 0xac, 0x25,
	0x6b, 0x38, 0x97, 0xf7, 0x6c, 0xdb, 0x0b, 0x37, 0xde, 0xb5, 0x83, 0xb0, 0x56, 0xd2, 0x17, 0x61,
	0x81, 0x29, 0xc7, 0xbc, 0xb0, 0x56, 0xc6, 0x4a, 0x32, 0x8b, 0xe0, 0xe6, 0x85, 0xb5, 0x8a, 0xf8,
	0x65, 0xa4, 0x75, 0x57, 0xd3, 0x1a, 0xfa, 0x04, 0xd6, 0xe2, 0xce, 0xc5, 0xb7, 0x11, 0x37, 0xbd,
	0x2e, 0x31, 0xca, 0xe6, 0x71, 0x6e, 0x1d, 0x26, 0x99, 0x97, 0x16, 0x3f, 0xe8, 0x67, 0x49, 0x2c,
	0xe2, 0xd7, 0xec, 0x70, 0xc8, 0x96, 0x03, 0xf2, 0x1b, 0xd7, 0xc2, 0x1e, 0x19, 0x67, 0xbe, 0x41,
	0xec, 0xed, 0xf0, 0x82, 0x31, 0x07, 0xeb, 0xaa, 0xbe, 0x71, 0x41, 0x9a, 0xe1, 0x57, 0x43, 0xf6,
	0x2e, 0x66, 0xc0, 0xb4, 0xad, 0xe9, 0x16, 0x4b, 0x19, 0x47, 0xe2, 0x7d, 0xef, 0x7b, 0x3e, 0x72,
	0xad, 0xfc, 0xf7, 0x2f, 0xea, 0x30, 0xc9, 0xa0, 0xb8, 0xaf, 0x1e, 0x4b, 0x16, 0xb3, 0x91, 0xbf,
	0xc1, 0x27, 0xa2, 0xd4, 0xdc, 0x29, 0xfb, 0x7e, 0xc0, 0x43, 0x1d, 0x10, 0x45, 0xf0, 0x88, 0x5d,
	0x45, 0xce, 0xea, 0xf9, 0x12, 0x54, 0x09, 0x0c, 0xb7, 0xec, 0x93, 0x44, 0xb1, 0x5e, 0x37, 0x45,
	0x76, 0x60, 0x0d, 0x9d, 0xb2, 0xcf, 0x3f, 0x89, 0x17, 0xb4, 0xbe, 0xe3, 0x99, 0xd6, 0x07, 0xe5,
	0x69, 0x7f, 0xe3, 0x2e, 0x66, 0x01, 0xb9, 0x47, 0xfc, 0xb5, 0x18, 0x32, 0xb9, 0xb9, 0x4b, 0x0d,
	0x49, 0x60, 0x94, 0xe5, 0xc9, 0xce, 0x93, 0xc6, 0x6f, 0x96, 0x60, 0xa1, 0xd1, 0xef, 0x3b, 0xc3,
	0x22, 0xd7, 0x31, 0x0c, 0x98, 0x33, 0x31, 0x6c, 0x47, 0x46, 0x70, 0x86, 0x64, 0xee, 0x45, 0x6f,
	0x3f, 0x3e, 0xb1, 0xc3, 0xc3, 0x48, 0xb8, 0x30, 0x13, 0x05, 0xce, 0xe3, 0x32, 0xe5, 0x12, 0x4c,
	0x93, 0xa0, 0x52, 0xd1, 0x2b, 0x53, 0xd5, 0xd6, 0x14, 0xce, 0x20, 0xea, 0xb9, 0x78, 0x5d, 0xb4,
	0x2a, 0x5f, 0x17, 0x1d, 0x27, 0xc2, 0x61, 0xc4, 0x32, 0x53, 0x39, 0x26, 0x8d, 0x44, 0x4c, 0xba,
	0xe9, 0x64, 0x4c, 0x3a, 0xe3, 0xf7, 0x4a, 0xa0, 0xcb, 0xd4, 0x22, 0x44, 0x37, 0x60, 0x8e, 0x20,
	0x44, 0x89, 0x13, 0x91, 0x6d, 0x06, 0x67, 0x12, 0x70, 0x66, 0x4d, 0xc2, 0x30, 0x3e, 0x62, 0x30,
	0xa5, 0x18, 0xa6, 0x85, 0x28, 0xcc, 0x55, 0x98, 0x09, 0xbd, 0xb8, 0x16, 0x76, 0xcf, 0x26, 0xf4,
	0x78, 0x1d, 0xb4, 0x3c, 0xaa, 0x81, 0xc7, 0x77, 0xf1, 0xf8, 0xf7, 0xfc, 0x89, 0xad, 0xaa, 0xf0,
	0xc4, 0xd6, 0x73, 0xb0, 0x10, 0x7a, 0x9d, 0x81, 0xeb, 0x23, 0xd3, 0xea, 0xd0, 0x50, 0xb9, 0x74,
	0x8f, 0x3e, 0x17, 0x7a, 0x7b, 0x24, 0x97, 0xde, 0xb9, 0xc4, 0xb8, 0x5b, 0x18, 0x82, 0xfa, 0x13,
	0xd1, 0x88, 0xf5, 0x60, 0x46, 0x2e, 0xe5, 0xf2, 0x9a, 0x3b, 0x75, 0x92, 0x35, 0xf7, 0x07, 0x35,
	0xe1, 0xb9, 0x75, 0x1f, 0xa1, 0x90, 0xe0, 0x93, 0xcb, 0x69, 0x78, 0x31, 0xee, 0x4b, 0x84, 0x9a,
	0x34, 0x19, 0x11, 0x96, 0xa0, 0x7a, 0x80, 0x2b, 0xe1, 0x11, 0x34, 0x49, 0xa2, 0xd8, 0x1a, 0xfb,
	0x8f, 0x4b, 0xc2, 0x1b, 0xeb, 0x42, 0x47, 0x3e, 0x50, 0x83, 0x28, 0xd0, 0xa4, 0x9a, 0x7c, 0x55,
	0x55, 0x31, 0x8c, 0x33, 0x03, 0x61, 0x10, 0xa5, 0x31, 0x9a, 0x3c, 0xc9, 0x18, 0xbd, 0x4c, 0x8e,
	0xfc, 0x68, 0xa8, 0x02, 0x49, 0xca, 0x65, 0xee, 0x0c, 0xde, 0xa3, 0xa7, 0xca, 0xa9, 0x4f, 0x4e,
	0x23, 0x86, 0xf4, 0x8f, 0x01, 0x11, 0x22, 0x36, 0xb2, 0x84, 0x20, 0xb5, 0xf5, 0xb4, 0x1b, 0x13,
	0x85, 0x69, 0x01, 0x03, 0xc6, 0x92, 0xf0, 0x77, 0x4a, 0x30, 0xc9, 0xf2, 0x85, 0x40, 0xef, 0x65,
	0x12, 0xe8, 0x3d, 0x53, 0x16, 0x7f, 0x14, 0x20, 0x96, 0x64, 0x6c, 0x19, 0xc9, 0x7b, 0x93, 0x35,
	0x92, 0x70, 0x29, 0xf9, 0x56, 0x49, 0xcb, 0xb7, 0x38, 0x2a, 0x5b, 0x55, 0x8a, 0xca, 0xa6, 0x43,
	0xa5, 0xe7, 0x98, 0x07, 0x6c, 0xe0, 0xc8, 0x6f, 0x0c, 0x7b, 0x40, 0x57, 0x66, 0x6a, 0x11, 0x63,
	0x29, 0x42, 0x40, 0xb2, 0xf0, 0x51, 0xa3, 0x29, 0x4d, 0x88, 0x1a, 0xcb, 0xb4, 0x5a, 0x63, 0x01,
	0xa5, 0xc6, 0x32, 0x23, 0x6a, 0x2c, 0xc6, 0xf7, 0x40, 0xed, 0x21, 0xf2, 0xed, 0x9e, 0x28, 0xf3,
	0x93, 0x94, 0xbb, 0x01, 0xf3, 0xc7, 0x04, 0xa6, 0x23, 0xdf, 0xc5, 0x9f, 0xa5, 0xb9, 0x7b, 0xc9,
	0xf8, 0x73, 0x15, 0x11, 0x53, 0x63, 0x03, 0x16, 0x13, 0x2d, 0x9c, 0x6a, 0x71, 0x1a, 0xc0, 0x55,
	0xaa, 0xd9, 0xb2, 0xf1, 0xe5, 0x5b, 0xff, 0xb8, 0xdb, 0xe7, 0x60, 0xe2, 0xc8, 0x7c, 0x57, 0x08,
	0x08, 0x77, 0x64, 0xbe, 0x3b, 0x76, 0x20, 0xe1, 0xcf, 0xc1, 0xf5, 0xdc, 0x66, 0xc7, 0xdc, 0x82,
	0x3c, 0x86, 0x4b, 0x52, 0xf5, 0x6d, 0xef, 0x08, 0x29, 0x46, 0xa2, 0xcc, 0x1e, 0x2b, 0x18, 0x0f,
	0x97, 0xcf, 0x26, 0x48, 0x28, 0x35, 0x36, 0x26, 0x22, 0x7b, 0x70, 0xae, 0x85, 0x4c, 0x4b, 0xa6,
	0xd2, 0xf8, 0x4f, 0x69, 0x3c, 0x80, 0xba, 0xaa, 0xda, 0x31, 0x3b, 0xfb, 0x4b, 0x1a, 0x5c, 0x11,
	0x22, 0x29, 0x10, 0x69, 0xbc, 0x6e, 0xf7, 0x7a, 0xc8, 0x47, 0x6e, 0x17, 0x8d, 0xb1, 0x18, 0x39,
	0xf6, 0x91, 0xcd, 0x63, 0xef, 0xd1, 0x44, 0xb4, 0x0e, 0x57, 0x84, 0x75, 0xb8, 0xd0, 0x36, 0xe1,
	0x8f, 0x34, 0xa6, 0x8d, 0xc5, 0x3d, 0x93, 0x5a, 0xd7, 0xe4, 0xd6, 0x49, 0x10, 0x4e, 0xb9, 0x63,
	0x7e, 0x7a, 0x15, 0x29, 0x27, 0x0f, 0x14, 0x53, 0x7d, 0x8b, 0x6e, 0x8f, 0x54, 0x13, 0xb7, 0x47,
	0xe8, 0x42, 0x3b, 0x21, 0x2e, 0xb4, 0x92, 0xf2, 0x36, 0x29, 0x2b, 0x6f, 0xc6, 0x7f, 0xd7, 0x60,
	0x25, 0x8f, 0xc8, 0x64, 0x0c, 0x3f, 0x0e, 0x93, 0x54, 0x7c, 0x07, 0x99, 0xa1, 0xf8, 0x93, 0x1f,
	0xf2, 0x0f, 0xf4, 0x15, 0x98, 0xc5, 0xf3, 0x3d, 0x31, 0x1c, 0x70, 0x64, 0xbe, 0xcb, 0x97, 0xd7,
	0xe4, 0x2a, 0x59, 0x1e, 0xb1, 0x4a, 0x9e, 0x28, 0xa4, 0xf9, 0xbf, 0xd6, 0xe0, 0x5a, 0x36, 0x7e,
	0x0f, 0xef, 0xbc, 0xff, 0x6c, 0x24, 0x86, 0xc6, 0x28, 0x27, 0x23, 0x89, 0xe4, 0x1c, 0xd7, 0x19,
	0xff, 0x4b, 0x03, 0x23, 0xbf, 0xeb, 0x1f, 0x8c, 0xc1, 0xe1, 0x08, 0x56, 0x04, 0x04, 0x4f, 0x1f,
	0xb7, 0xf0, 0x7b, 0x61, 0x29, 0x0e, 0xf3, 0x23, 0x5c, 0xb2, 0xcc, 0x74, 0x87, 0x1c, 0xc3, 0x95,
	0xec, 0xcb, 0x25, 0xb8, 0xa0, 0x68, 0x8c, 0xc9, 0x2d, 0xa0, 0x4c, 0x41, 0xdc, 0xbf, 0xb4, 0x13,
	0xbc, 0x01, 0x1f, 0x2b, 0x08, 0x25, 0xb5, 0x82, 0x50, 0x4e, 0x28, 0x08, 0xec, 0x00, 0x96, 0x29,
	0x26, 0x3c, 0x19, 0x29, 0x08, 0x55, 0xa5, 0x82, 0x30, 0x21, 0x99, 0x34, 0x4e, 0xaf, 0x46, 0x7e,
	0x45, 0x83, 0x79, 0x1a, 0x94, 0x8e, 0xdc, 0xf5, 0xcc, 0x25, 0xf5, 0x55, 0x1a, 0x85, 0xa6, 0x63,
	0x53, 0x9d, 0x2f, 0x15, 0x6c, 0x2b, 0x8a, 0x0e, 0x54, 0x16, 0xa3, 0x03, 0x15, 0x52, 0xf4, 0x7f,
	0x5a, 0x83, 0xb3, 0x52, 0x37, 0xc8, 0x20, 0xe4, 0x47, 0x22, 0xa2, 0xef, 0x7e, 0x95, 0xc4, 0x77,
	0xbf, 0xf8, 0x04, 0x2c, 0x0b, 0x13, 0xf0, 0xf4, 0xc2, 0xe3, 0x57, 0x34, 0x58, 0x60, 0x8e, 0xa1,
	0xa3, 0x89, 0x23, 0x33, 0x4c, 0xe9, 0x04, 0x0c, 0x23, 0x62, 0x59, 0x96, 0xb1, 0x2c, 0x44, 0xbb,
	0x6d, 0xd0, 0xe5, 0x5e, 0x8e, 0xb9, 0xf0, 0xbe, 0xa7, 0x91, 0x17, 0x32, 0xee, 0x0e, 0x1c, 0xe2,
	0xc5, 0x3d, 0xe2, 0xba, 0x8c, 0xd2, 0x4f, 0x4f, 0x8e, 0x8b, 0x5f, 0xce, 0x8e, 0x8b, 0x9f, 0x87,
	0xd7, 0x5f, 0x94, 0xc8, 0x2b, 0x1a, 0x71, 0x3f, 0x4e, 0xfd, 0x20, 0x80, 0x1d, 0xec, 0xd3, 0x6b,
	0xe6, 0xd1, 0xdb, 0x72, 0x3c, 0x43, 0xbf, 0x05, 0x8b, 0xec, 0x80, 0xda, 0x74, 0x9c, 0xa0, 0xd3,
	0xf7, 0xc9, 0x29, 0x38, 0x33, 0x0a, 0x9f, 0xa5, 0x46, 0x1c, 0x5c, 0xb2, 0x4b, 0x0b, 0xf4, 0x3b,
	0x70, 0x4e, 0x84, 0x37, 0x8f, 0x4d, 0x9b, 0x9c, 0x09, 0xb2, 0xa8, 0xd8, 0x8b, 0xf1, 0x17, 0x0d,
	0x5e, 0x84, 0x79, 0xd5, 0xdc, 0xf7, 0x06, 0x21, 0x9b, 0xca, 0x34, 0x81, 0xf7, 0xef, 0x18, 0x67,
	0xcf, 0x25, 0x67, 0x06, 0x6c, 0x8f, 0x01, 0x34, 0x6b, 0xed, 0xd0, 0x0c, 0xb3, 0x62, 0xeb, 0x8d,
	0xb1, 0xaf, 0xa7, 0x71, 0x6c, 0xe4, 0x03, 0xdf, 0xdc, 0x38, 0x36, 0xe7, 0xd3, 0xe0, 0xfc, 0xa1,
	0x59, 0x72, 0x74, 0xad, 0xa9, 0x8f, 0xae, 0x4b, 0xf2, 0xd1, 0xf5, 0x4f, 0x69, 0xb0, 0x28, 0x84,
	0xf8, 0x12, 0x9f, 0xcd, 0x54, 0xcf, 0xa5, 0x4f, 0xc2, 0x0c, 0x9d, 0x11, 0x7c, 0x8a, 0x8f, 0x8c,
	0x57, 0x05, 0xf1, 0xef, 0x62, 0xb2, 0xff, 0x27, 0x34, 0x10, 0xbf, 0xc9, 0x91, 0x34, 0x17, 0x61,
	0x8a, 0x74, 0x43, 0xd0, 0x02, 0x48, 0x5a, 0x0c, 0x87, 0x26, 0x09, 0x3c, 0x95, 0x16, 0x90, 0x5c,
	0x47, 0xab, 0xa9, 0x75, 0xd4, 0x68, 0xc1, 0xf9, 0x34, 0x91, 0xc6, 0x9c, 0xca, 0x36, 0xcc, 0xd3,
	0xcd, 0x84, 0x28, 0xbf, 0x32, 0x95, 0x9d, 0x88, 0x02, 0xa5, 0x0c, 0x29, 0x54, 0xce, 0x7f, 0x6f,
	0x48, 0x6a, 0x6a, 0xcc, 0x9e, 0x3b, 0xb0, 0x20, 0x54, 0x97, 0xef, 0x4d, 0x7e, 0x09, 0xa6, 0x79,
	0xd7, 0xf9, 0xa1, 0xe4, 0x14, 0xeb, 0x7b, 0x50, 0x38, 0xa8, 0xb8, 0xdc, 0xda, 0x98, 0xbd, 0x7f,
	0x99, 0x38, 0x76, 0xaf, 0x0d, 0x82, 0xd0, 0x3b, 0x42, 0x3e, 0xbf, 0x08, 0x4b, 0xbc, 0x8d, 0x77,
	0x7c, 0x9b, 0x9f, 0xf4, 0x12, 0x6f, 0x63, 0x9a, 0x36, 0x7e, 0x5c, 0x83, 0x59, 0x11, 0x3e, 0xcf,
	0xc0, 0x2e, 0x06, 0x95, 0xa8, 0x46, 0x91, 0x4c, 0xa2, 0xaa, 0xcb, 0x72, 0xd5, 0xfa, 0x0a, 0xcc,
	0x58, 0x28, 0xe8, 0xfa, 0x76, 0x3f, 0xc4, 0x93, 0x93, 0xd9, 0x3f, 0x84, 0x2c, 0xcc, 0xb1, 0x6d,
	0xe1, 0x80, 0x1c, 0xff, 0x36, 0x7e, 0x8c, 0x5e, 0x28, 0x94, 0x71, 0xe8, 0x3b, 0x43, 0xfd, 0x13,
	0x30, 0xcd, 0x33, 0xb9, 0x62, 0x74, 0x25, 0xed, 0xec, 0x25, 0x7e, 0x16, 0xc3, 0xcb, 0xef, 0x86,
	0x95, 0x4e, 0xf2, 0x26, 0xf4, 0x6d, 0x38, 0xd7, 0x0c, 0x78, 0x45, 0xa2, 0x3f, 0x76, 0x96, 0xf4,
	0xea, 0xc1, 0x05, 0xd5, 0x07, 0x18, 0x85, 0x8f, 0x01, 0xd0, 0x03, 0xb5, 0xa2, 0x23, 0x8b, 0xc4,
	0x9b, 0x12, 0x43, 0x14, 0xb0, 0x75, 0x04, 0xff, 0x34, 0x5e, 0x25, 0x4f, 0xe8, 0xf1, 0x86, 0x28,
	0xcd, 0xa3, 0x1b, 0x10, 0x59, 0x17, 0x6b, 0xbf, 0xae, 0x91, 0xa0, 0x13, 0xca, 0xaf, 0x70, 0x0f,
	0xeb, 0x30, 0xc9, 0x2e, 0x21, 0x31, 0xc3, 0x02, 0x4f, 0x9e, 0x9e, 0x82, 0x98, 0x0f, 0xd6, 0x05,
	0x3e, 0x60, 0x76, 0x7e, 0x21, 0x0b, 0xaf, 0x0f, 0x34, 0xd0, 0x66, 0x1f, 0x75, 0x6d, 0x53, 0x5c,
	0xfd, 0x95, 0x48, 0xbc, 0xce, 0x63, 0x8c, 0x8b, 0xe0, 0xb8, 0xf7, 0x97, 0x61, 0xba, 0x19, 0xb0,
	0x5c, 0x1e, 0xbd, 0x23, 0xca, 0x60, 0x7e, 0x33, 0x77, 0x3d, 0xbf, 0x4b, 0xa7, 0x1b, 0x0f, 0xd6,
	0xec, 0xd2, 0x77, 0xcd, 0x13, 0xf9, 0xb8, 0x3e, 0xfe, 0x3c, 0x4a, 0x4c, 0x8e, 0x28, 0x3d, 0x06,
	0x47, 0x5d, 0xe4, 0xaf, 0x81, 0xa4, 0xbb, 0xf2, 0x0e, 0x19, 0x53, 0x45, 0xd1, 0xfb, 0xd7, 0x9b,
	0x3f, 0x2a, 0xc1, 0xe2, 0xae, 0x19, 0x04, 0x8f, 0x3c, 0xdf, 0xa2, 0x6f, 0xb3, 0x8c, 0x30, 0xcd,
	0x8c, 0x7c, 0x8f, 0x67, 0x19, 0xa6, 0x78, 0x38, 0x7d, 0xee, 0x26, 0xc3, 0xd3, 0xb8, 0x8c, 0x37,
	0xc6, 0x04, 0x42, 0x94, 0x4e, 0x06, 0x9f, 0xaa, 0xa6, 0x5d, 0x56, 0xa3, 0xad, 0xcc, 0x84, 0xb8,
	0x95, 0x91, 0x4f, 0x7b, 0x26, 0x73, 0x4f, 0x7b, 0xa6, 0x12, 0xa7, 0x3d, 0x89, 0x90, 0x1c, 0xd3,
	0xa3, 0x9e, 0xd4, 0x81, 0xe4, 0x93, 0x3a, 0xc6, 0x37, 0x35, 0x38, 0x97, 0xa6, 0x1f, 0x9b, 0x4b,
	0x19, 0xc7, 0x87, 0xf7, 0xd3, 0xa3, 0xf5, 0x42, 0xfa, 0x68, 0xcf, 0x0c, 0x82, 0x27, 0x42, 0xa5,
	0xd1, 0x17, 0xe2, 0xdc, 0x7a, 0x09, 0x2a, 0x7b, 0x85, 0x0c, 0xd3, 0x04, 0xcc, 0xe8, 0x41, 0x8d,
	0xf7, 0x95, 0xdc, 0xf2, 0x65, 0xab, 0x43, 0x34, 0x5c, 0x9a, 0x62, 0xb8, 0x18, 0xfd, 0xb9, 0x3f,
	0x03, 0x4f, 0xf3, 0xa1, 0xc4, 0x5d, 0xe4, 0xc3, 0xcc, 0xd3, 0xc6, 0xaf, 0x6b, 0xa0, 0x27, 0x1a,
	0xfa, 0x80, 0x52, 0x64, 0x2b, 0xf2, 0x2b, 0x8e, 0xc6, 0x30, 0xd7, 0x83, 0x65, 0x1b, 0x3d, 0x89,
	0x18, 0x98, 0x79, 0xb0, 0x08, 0x59, 0xc6, 0x6f, 0x44, 0x2a, 0x67, 0x5c, 0xdf, 0x07, 0x14, 0xf3,
	0xaf, 0x95, 0xe0, 0x22, 0xaf, 0x8f, 0xda, 0x21, 0x44, 0x27, 0x17, 0xd1, 0x93, 0x45, 0x4b, 0x78,
	0xb2, 0x2c, 0xc3, 0x54, 0x9f, 0x8f, 0x3c, 0xe3, 0x0a, 0x9e, 0xc6, 0x0a, 0x67, 0x5f, 0xe1, 0x78,
	0xde, 0x57, 0xcd, 0xe2, 0x4a, 0xf6, 0x2c, 0xae, 0xe6, 0xce, 0xe2, 0x89, 0xc4, 0x2c, 0x7e, 0x1a,
	0x1e, 0xe6, 0xbf, 0xab, 0xc1, 0xa5, 0x2c, 0x72, 0xb0, 0x11, 0x0c, 0xe4, 0x11, 0x64, 0x49, 0xbd,
	0x29, 0xad, 0xea, 0xa7, 0x18, 0x42, 0x24, 0x0e, 0x61, 0xb1, 0x73, 0x26, 0x02, 0x66, 0xdc, 0x84,
	0x05, 0xf6, 0x1c, 0xee, 0x03, 0xef, 0x31, 0x72, 0xb3, 0x7d, 0x0d, 0x8c, 0x1f, 0xa6, 0x2f, 0x43,
	0x0a, 0xa0, 0x18, 0x27, 0xbc, 0x8f, 0xc0, 0x29, 0x1e, 0xc0, 0x90, 0x24, 0xf0, 0x48, 0x90, 0x47,
	0x95, 0x68, 0xd0, 0x25, 0x16, 0x4b, 0x91, 0xe4, 0x90, 0xa8, 0x4b, 0xdf, 0x25, 0xa1, 0x5b, 0xce,
	0xf0, 0x1c, 0xdb, 0xc1, 0x4d, 0x91, 0xa9, 0x4f, 0x10, 0x15, 0x90, 0x34, 0x1a, 0x50, 0x5b, 0xb5,
	0x5d, 0xe2, 0xc9, 0x13, 0x75, 0x5b, 0xdd, 0x93, 0xcc, 0x2b, 0xc7, 0xef, 0x69, 0xa0, 0x27, 0xea,
	0xc0, 0xf8, 0x9c, 0xf4, 0xb5, 0x84, 0xb1, 0x51, 0x79, 0x29, 0xba, 0xff, 0xb8, 0x3a, 0x94, 0x86,
	0x41, 0x89, 0x8f, 0xf1, 0x07, 0xb1, 0x87, 0xae, 0x04, 0x8f, 0xfb, 0x7e, 0x52, 0x27, 0x91, 0x93,
	0xb1, 0x4a, 0x02, 0xd5, 0xca, 0xc9, 0x51, 0x7d, 0x01, 0x74, 0x7a, 0x52, 0x57, 0x00, 0xcf, 0xaf,
	0x6a, 0xb0, 0x94, 0x02, 0x3e, 0x0d, 0x92, 0x63, 0x0f, 0xd0, 0x3f, 0xac, 0xc0, 0x0c, 0x0b, 0x74,
	0xf8, 0xca, 0xb7, 0x2e, 0xc0, 0x65, 0x74, 0x27, 0xa7, 0x2a, 0x62, 0x29, 0x85, 0xbd, 0x9c, 0xc8,
	0x08, 0x7b, 0x39, 0xa9, 0x0a, 0x7b, 0xf9, 0x01, 0x78, 0x6b, 0x73, 0x11, 0xaa, 0x56, 0x17, 0x0f,
	0xd0, 0x2c, 0xb3, 0x2e, 0x74, 0xc5, 0x0d, 0xfa, 0xdc, 0x09, 0xae, 0xff, 0xcc, 0x8f, 0x14, 0xce,
	0x0b, 0xb9, 0x01, 0x33, 0x6b, 0x59, 0x01, 0x33, 0xcf, 0x66, 0x06, 0xcc, 0xd4, 0x93, 0x01, 0x33,
	0x7f, 0xbf, 0x04, 0x73, 0x31, 0x5b, 0x60, 0xce, 0xfc, 0xff, 0x24, 0xc7, 0xc9, 0xe7, 0xb3, 0xa2,
	0x65, 0x52, 0xe8, 0xbf, 0xaf, 0xa1, 0x32, 0x3f, 0x06, 0x97, 0x23, 0xaf, 0x18, 0x14, 0xae, 0x51,
	0x93, 0xa1, 0xe0, 0x02, 0x72, 0x91, 0x52, 0x81, 0xd8, 0x43, 0xd8, 0xf6, 0x91, 0x4e, 0xe4, 0xc0,
	0xf8, 0x19, 0x0d, 0xae, 0xe5, 0x7c, 0x3b, 0xe6, 0xd9, 0xc7, 0xe9, 0x6f, 0xcd, 0xfc, 0xac, 0x26,
	0x9f, 0xc5, 0x6c, 0xdb, 0xdd, 0xc7, 0x82, 0x0e, 0xe4, 0xb2, 0x24, 0xd7, 0x81, 0x78, 0x5a, 0x42,
	0xb5, 0x24, 0xa1, 0x4a, 0x1e, 0x0d, 0xeb, 0xf5, 0x02, 0xc4, 0x4f, 0xad, 0x58, 0x2a, 0x3e, 0xbb,
	0xab, 0x88, 0x67, 0x77, 0x82, 0x31, 0xb2, 0x2a, 0x1a, 0x23, 0x8d, 0x9f, 0xd4, 0x60, 0x59, 0xdd,
	0xb3, 0x6f, 0x1b, 0xb1, 0x5e, 0x8d, 0x96, 0xaf, 0x96, 0xe7, 0x90, 0xc8, 0x90, 0xab, 0x43, 0x1a,
	0x0b, 0x25, 0xdb, 0x70, 0x60, 0xfc, 0x95, 0x06, 0xb3, 0xe2, 0x27, 0x27, 0x78, 0xd4, 0xb6, 0x2a,
	0x19, 0xef, 0x47, 0xec, 0x2b, 0x31, 0x7d, 0x84, 0x88, 0xc2, 0x51, 0x9a, 0x59, 0xae, 0x42, 0x8f,
	0x9b, 0xc1, 0x49, 0x02, 0xe7, 0x36, 0x88, 0x71, 0x9c, 0xed, 0x25, 0x49, 0x82, 0x06, 0x1a, 0x5b,
	0xf5, 0xb8, 0x5b, 0x1b, 0x4d, 0xf0, 0x57, 0x4e, 0xa7, 0xa2, 0x57, 0x4e, 0x8d, 0x1f, 0xd2, 0x32,
	0x48, 0x11, 0xf4, 0xf5, 0xd7, 0x60, 0x72, 0xc3, 0x2f, 0xfa, 0x42, 0x3d, 0x07, 0xd5, 0x3f, 0x02,
	0x93, 0xb8, 0xa6, 0xf8, 0x99, 0x85, 0x2b, 0xca, 0x4b, 0x01, 0xbc, 0xb5, 0x16, 0x87, 0x36, 0xfe,
	0x9b, 0x06, 0xd3, 0x4d, 0xd7, 0xa5, 0x1e, 0xdd, 0xb9, 0x31, 0xd0, 0xa4, 0xa0, 0xb0, 0xa9, 0x60,
	0xb1, 0x65, 0x31, 0x58, 0x2c, 0xf5, 0x70, 0x3d, 0x32, 0xfd, 0xc7, 0xdc, 0x89, 0x99, 0xa6, 0x84,
	0xc0, 0x87, 0x55, 0x29, 0xf0, 0xe1, 0x79, 0x98, 0xa0, 0x2f, 0x6b, 0xb1, 0x03, 0x05, 0x96, 0x22,
	0xd1, 0xce, 0x5d, 0x73, 0xdf, 0x41, 0xd6, 0xea, 0x90, 0x2d, 0x6e, 0x71, 0x86, 0x50, 0xda, 0x08,
	0x99, 0x4e, 0x1e, 0x67, 0x18, 0x7f, 0x5d, 0x82, 0xf9, 0x08, 0xb3, 0x1d, 0x62, 0x46, 0xfe, 0x14,
	0x4c, 0xec, 0xf4, 0x1f, 0xf0, 0xdb, 0x5a, 0xf3, 0x77, 0x6e, 0x2a, 0xee, 0x69, 0x8b, 0x1f, 0xdc,
	0xda, 0xe9, 0xd3, 0xdb, 0x5c, 0x2d, 0xf6, 0x1d, 0xee, 0xe8, 0x5d, 0xf2, 0x32, 0x29, 0x57, 0x35,
	0x68, 0x4a, 0x20, 0x5c, 0x39, 0x83, 0x70, 0x95, 0x0c, 0xc2, 0x55, 0x33, 0x08, 0x37, 0x21, 0x12,
	0x0e, 0x73, 0xcc, 0x14, 0xef, 0x8c, 0xbe, 0x08, 0x0b, 0xfc, 0xf7, 0x2a, 0x3a, 0xb0, 0xdd, 0x46,
	0x58, 0x3b, 0x83, 0x33, 0x29, 0xee, 0x11, 0x0a, 0x35, 0x0d, 0x67, 0xb6, 0xd0, 0xb1, 0xf7, 0x58,
	0xc8, 0x24, 0xee, 0xf0, 0xe4, 0x6e, 0x0f, 0x05, 0x27, 0x99, 0x65, 0x9c, 0x29, 0x45, 0x1d, 0xde,
	0xf6, 0x6a, 0x15, 0x9c, 0x89, 0xb7, 0xa7, 0xc2, 0xeb, 0x0b, 0xb5, 0xaa, 0xf1, 0x05, 0x99, 0xac,
	0x3c, 0x0c, 0x60, 0x20, 0x87, 0x01, 0x0c, 0x46, 0x84, 0x01, 0x7c, 0x8d, 0xce, 0xf8, 0xd8, 0x3b,
	0x79, 0x39, 0x7b, 0x2c, 0x5a, 0x1c, 0xd4, 0x58, 0xa5, 0xca, 0x7f, 0x32, 0xcc, 0x72, 0x16, 0xcf,
	0x2a, 0x03, 0x19, 0xdf, 0x4d, 0xd6, 0x71, 0x3a, 0x0c, 0x68, 0xb4, 0x55, 0x3a, 0x87, 0x59, 0x64,
	0x96, 0x47, 0x76, 0x78, 0xc8, 0x04, 0x5a, 0xcc, 0x27, 0x9a, 0xc4, 0x27, 0x75, 0x98, 0x64, 0x50,
	0x5c, 0xee, 0xb3, 0x24, 0x5e, 0x4a, 0xa6, 0x78, 0x45, 0xba, 0xce, 0x36, 0xe3, 0xec, 0xda, 0x3a,
	0x99, 0x9b, 0x1f, 0x87, 0x4a, 0xf4, 0xc0, 0xd2, 0xfc, 0x9d, 0xe7, 0x14, 0x52, 0x81, 0x7e, 0x1c,
	0xfd, 0x20, 0x8c, 0x4b, 0xbe, 0x31, 0x3e, 0x01, 0xb3, 0x62, 0xae, 0x3e, 0x0b, 0x53, 0xed, 0xd0,
	0x37, 0xdd, 0x03, 0xe4, 0xd7, 0xce, 0xe0, 0x14, 0x5f, 0x4b, 0x6b, 0x9a, 0xbe, 0x00, 0x33, 0xab,
	0x8e, 0xd9, 0x7d, 0xec, 0xd8, 0x41, 0x48, 0x42, 0xc7, 0xb9, 0x99, 0x88, 0xe6, 0x52, 0xee, 0x23,
	0x30, 0xcd, 0xe1, 0xb3, 0x4f, 0x96, 0x39, 0x44, 0x2b, 0x86, 0x35, 0xfa, 0xa2, 0x47, 0x3d, 0xd9,
	0x08, 0xc4, 0x0f, 0x79, 0x2a, 0x47, 0x7a, 0x19, 0xa6, 0x38, 0x18, 0x0f, 0x60, 0xc2, 0xd3, 0xc5,
	0x0e, 0x52, 0xde, 0xd3, 0xc4, 0x7b, 0x13, 0x71, 0x93, 0xfc, 0xe8, 0x76, 0xaf, 0xe0, 0xd1, 0xed,
	0xde, 0x98, 0x6f, 0x4b, 0xbf, 0x09, 0x17, 0x1a, 0x96, 0x95, 0xf4, 0xca, 0x0f, 0x46, 0xbc, 0xe5,
	0x2e, 0x18, 0x18, 0x4b, 0x29, 0x03, 0xe3, 0xdb, 0x30, 0xc9, 0x3d, 0xab, 0xb3, 0xaa, 0x90, 0x76,
	0x16, 0xa5, 0xbc, 0xf7, 0xcd, 0xcb, 0xf2, 0xfb, 0xe6, 0xc6, 0x8f, 0x6a, 0x70, 0x51, 0xdd, 0x61,
	0xac, 0x14, 0xbf, 0x16, 0xb3, 0x15, 0xd3, 0x30, 0xd2, 0x9e, 0xb6, 0xdc, 0x47, 0x30, 0x82, 0x1c,
	0x83, 0x7a, 0xf7, 0xe0, 0x2c, 0x0d, 0x14, 0x8e, 0x0b, 0x56, 0xe3, 0xcb, 0xd8, 0x59, 0x3c, 0x43,
	0x81, 0x57, 0x87, 0xfc, 0xe9, 0x11, 0x9e, 0x36, 0xb6, 0x52, 0x15, 0x05, 0xfd, 0x31, 0x8e, 0xd5,
	0xde, 0x84, 0xe9, 0xad, 0xe1, 0x03, 0x64, 0x1e, 0x8d, 0x90, 0x56, 0x3b, 0x54, 0xed, 0x63, 0x0b,
	0xcb, 0x4e, 0xa4, 0xf6, 0x6d, 0x8a, 0x2e, 0x5b, 0x24, 0x61, 0xbc, 0x1d, 0x55, 0x49, 0xc3, 0x9b,
	0x92, 0x33, 0x18, 0xa6, 0x3a, 0xd1, 0xc4, 0x18, 0x74, 0xfc, 0x97, 0x1a, 0xf1, 0x8c, 0x74, 0xf0,
	0x10, 0xaf, 0x21, 0x3f, 0xb4, 0x7b, 0xf6, 0xe8, 0x4b, 0x4e, 0x3a, 0x54, 0x04, 0xfe, 0x21, 0xbf,
	0xf5, 0xe7, 0x60, 0xbe, 0x69, 0x21, 0x37, 0xb4, 0xf9, 0xea, 0xc1, 0x18, 0x28, 0x91, 0x8b, 0x79,
	0xf8, 0xae, 0xef, 0xb9, 0x61, 0xf3, 0x28, 0xf6, 0x74, 0x16, 0x72, 0x74, 0x03, 0x4b, 0x2f, 0xbc,
	0x59, 0x45, 0x14, 0x82, 0x2e, 0x99, 0x52, 0x1e, 0xf3, 0xe6, 0x54, 0xf4, 0x79, 0xac, 0xa1, 0x63,
	0xa7, 0x64, 0x32, 0x11, 0xb0, 0x54, 0xc8, 0x3b, 0x60, 0xfa, 0x4b, 0x0d, 0x16, 0x15, 0x9f, 0x60,
	0x12, 0x09, 0x9b, 0x01, 0xf2, 0x5b, 0xff, 0x10, 0x2c, 0xd8, 0x8c, 0x18, 0xdc, 0xe6, 0x49, 0x29,
	0x38, 0x6f, 0xcb, 0x34, 0xba, 0x06, 0x33, 0x3d, 0x4c, 0x91, 0x8e, 0x7d, 0x14, 0x5f, 0x77, 0x81,
	0x5e, 0x4c, 0xa4, 0x67, 0x60, 0xce, 0xa7, 0x04, 0x61, 0x20, 0x94, 0x8e, 0xb3, 0xbe, 0x40, 0xa5,
	0x4c, 0x97, 0xf1, 0x6b, 0x30, 0xe3, 0x93, 0x3b, 0x48, 0x9d, 0xe8, 0x42, 0x67, 0xb5, 0x05, 0x34,
	0x6b, 0x8d, 0x05, 0x6a, 0xcd, 0xa2, 0xc4, 0x38, 0x04, 0xd6, 0x3f, 0x29, 0x85, 0xcd, 0x98, 0xb9,
	0x73, 0x23, 0x2d, 0x21, 0x14, 0x4d, 0xf2, 0xe0, 0x1a, 0x87, 0x70, 0x9e, 0xf9, 0x7f, 0x17, 0x65,
	0xd3, 0x58, 0xd1, 0x2c, 0x49, 0x8a, 0xe6, 0x55, 0xbc, 0x93, 0xe6, 0xd8, 0xb2, 0xb9, 0x26, 0xe4,
	0x18, 0x2d, 0x75, 0x4b, 0x63, 0x31, 0xd7, 0xb1, 0xb8, 0xce, 0x51, 0x97, 0x38, 0x6a, 0x66, 0xca,
	0x34, 0x44, 0x32, 0x2b, 0x4f, 0x49, 0xfd, 0xca, 0x65, 0xd1, 0x67, 0x3e, 0xdf, 0x54, 0xb6, 0x3b,
	0x0e, 0x2a, 0x2f, 0xfc, 0x69, 0x05, 0x2f, 0xf6, 0x7c, 0x33, 0x22, 0x19, 0x22, 0x66, 0x60, 0x72,
	0x7d, 0x95, 0x9b, 0x20, 0x52, 0x56, 0x89, 0x12, 0x56, 0x3e, 0xa2, 0xab, 0x9a, 0x65, 0x7e, 0x0d,
	0x53, 0x7c, 0x4c, 0xbb, 0x56, 0xc1, 0x30, 0xd4, 0xf0, 0x8d, 0x15, 0x50, 0x7d, 0x1e, 0x60, 0xcf,
	0xf5, 0x79, 0x7a, 0x42, 0x9f, 0x83, 0xe9, 0x6d, 0x2f, 0xdc, 0xf2, 0x2c, 0xbb, 0x37, 0xac, 0x4d,
	0xe2, 0x06, 0xb9, 0xcd, 0x61, 0x8a, 0xdc, 0xf2, 0x74, 0x79, 0x72, 0x5a, 0x9f, 0x86, 0xea, 0x43,
	0x62, 0xb4, 0x00, 0x0c, 0xb6, 0xe7, 0xd2, 0xc4, 0x8c, 0x10, 0x29, 0x77, 0x56, 0xd7, 0x61, 0x1e,
	0x6f, 0x18, 0xb7, 0xbd, 0x90, 0x23, 0x31, 0x97, 0xbc, 0x57, 0x7a, 0xd4, 0x0f, 0x87, 0xb5, 0x79,
	0x5c, 0xc5, 0x43, 0xbb, 0xbf, 0xe3, 0x3a, 0xc3, 0xda, 0x02, 0x41, 0xcd, 0x71, 0xd0, 0x81, 0xc9,
	0x82, 0x88, 0xd6, 0x6a, 0x7a, 0x0d, 0x66, 0xd7, 0x4c, 0x77, 0xdb, 0x0b, 0x57, 0x51, 0x1b, 0x39,
	0xbd, 0xda, 0x59, 0xac, 0x50, 0xb3, 0x85, 0xee, 0xbe, 0x19, 0x34, 0x2c, 0x0b, 0x59, 0x35, 0x1d,
	0x67, 0x32, 0x27, 0xf4, 0x88, 0x10, 0x8b, 0xb8, 0x47, 0xbb, 0xa6, 0x6f, 0x1e, 0x05, 0xb5, 0x25,
	0xda, 0xd5, 0xc7, 0xae, 0xf7, 0xc4, 0xad, 0x9d, 0xc3, 0xd8, 0xb7, 0x90, 0x65, 0x07, 0x94, 0x7e,
	0xe7, 0x71, 0xbb, 0xf4, 0x09, 0x42, 0xfe, 0xed, 0x05, 0xdc, 0xdb, 0xb8, 0x42, 0x46, 0x97, 0xba,
	0x7e, 0x81, 0x86, 0xe2, 0xd8, 0xf6, 0xc2, 0x75, 0xd4, 0x33, 0x07, 0x4e, 0x48, 0x3e, 0xab, 0x5d,
	0xc4, 0xdd, 0x64, 0x05, 0xb4, 0x82, 0x65, 0xfd, 0x0a, 0x5c, 0xa4, 0x4f, 0x6c, 0xf1, 0xfb, 0x36,
	0x0f, 0xbc, 0x2d, 0xd3, 0x1d, 0xae, 0x0e, 0xd7, 0xcd, 0x61, 0xed, 0x12, 0xae, 0x3f, 0x5e, 0x1f,
	0x9b, 0x01, 0x5e, 0x21, 0x6b, 0x97, 0xf5, 0x73, 0x70, 0x36, 0x9e, 0x1c, 0x3c, 0xfb, 0x0a, 0xd9,
	0x43, 0x78, 0xd2, 0xac, 0xa9, 0x5d, 0xd5, 0xcf, 0x83, 0xbe, 0xbd, 0xf3, 0xa0, 0xd3, 0xd8, 0xdc,
	0xdc, 0x79, 0xb4, 0xb1, 0xde, 0xd9, 0xda, 0x59, 0x6f, 0xde, 0xfd, 0x4c, 0xed, 0xda, 0x0b, 0x7f,
	0xad, 0xc1, 0xc5, 0xcc, 0xa3, 0x0e, 0xc2, 0x57, 0x7b, 0x6b, 0x6b, 0x1b, 0xed, 0x76, 0xed, 0x0c,
	0x1e, 0xa6, 0xbd, 0xf6, 0x46, 0x6b, 0xbb, 0xb1, 0xb5, 0xd1, 0xd9, 0x78, 0xab, 0xd9, 0x7e, 0x40,
	0x2d, 0x5c, 0x51, 0x1e, 0xae, 0x9f, 0xe6, 0x93, 0xe0, 0x39, 0x51, 0x7e, 0x73, 0xfb, 0x61, 0x63,
	0xb3, 0xb9, 0x4e, 0xcd, 0x5b, 0x71, 0x0d, 0xad, 0xd6, 0x4e, 0x8b, 0x9a, 0xb7, 0x76, 0x1b, 0xed,
	0xf6, 0xa3, 0x9d, 0xd6, 0x3a, 0xcb, 0xab, 0x92, 0xab, 0xc6, 0x3c, 0x8f, 0x7f, 0x3d, 0x81, 0x21,
	0x9b, 0xdb, 0x0f, 0xf0, 0xe7, 0x9b, 0x0c, 0x72, 0x92, 0x58, 0xd2, 0xa4, 0xaf, 0x3b, 0x5b, 0x8d,
	0xed, 0xcf, 0xd4, 0xa6, 0x5e, 0x78, 0x0b, 0x26, 0x68, 0x6c, 0x03, 0x3c, 0xae, 0x7b, 0xee, 0x20,
	0x40, 0x16, 0x43, 0x81, 0x71, 0x15, 0x35, 0xd5, 0x30, 0x14, 0x88, 0x7b, 0x55, 0xd3, 0xed, 0x3a,
	0x03, 0x0b, 0x6d, 0x0d, 0x88, 0x12, 0x8e, 0xf3, 0xd7, 0xed, 0x00, 0x6f, 0xd8, 0xb6, 0x06, 0x4e,
	0x68, 0xb7, 0xed, 0x03, 0xb7, 0xe9, 0xd6, 0xca, 0x2f, 0xfc, 0x5d, 0x15, 0x16, 0x12, 0xf7, 0xec,
	0xb1, 0x06, 0x8f, 0x73, 0x3a, 0xad, 0xdd, 0xb5, 0xce, 0xce, 0x1b, 0xb5, 0x33, 0xfa, 0x45, 0x58,
	0x22, 0x19, 0x8d, 0xf5, 0x75, 0x8c, 0xf1, 0xab, 0xaf, 0xbf, 0xf6, 0xb1, 0xce, 0xc6, 0x5b, 0xbb,
	0xb5, 0x6f, 0x5c, 0xd3, 0x2f, 0x90, 0xc7, 0x34, 0xc3, 0x0e, 0xee, 0x48, 0x67, 0xd7, 0xb7, 0xcd,
	0xe3, 0xae, 0x39, 0xac, 0xfd, 0xe2, 0xb5, 0xe8, 0x9b, 0x07, 0x1e, 0x2d, 0xe3, 0x93, 0xe8, 0x97,
	0xae, 0xe9, 0xe7, 0xc9, 0xa9, 0x67, 0x28, 0xe7, 0xff, 0x72, 0x9c, 0xdf, 0xda, 0xd8, 0xdd, 0x68,
	0x3c, 0xe8, 0xac, 0xb5, 0x36, 0x1a, 0x0f, 0x6a, 0xbf, 0x12, 0x57, 0xc5, 0xf2, 0x1b, 0xeb, 0xeb,
	0x1d, 0xdc, 0x8d, 0xda, 0xaf, 0x5e, 0xd3, 0xaf, 0xc2, 0x45, 0x52, 0xb4, 0xf1, 0xd6, 0xda, 0xc6,
	0xc6, 0x3a, 0xfd, 0x64, 0xa3, 0xb3, 0xd5, 0x78, 0x6b, 0x7b, 0x6f, 0xab, 0xf6, 0x6b, 0xd7, 0xf4,
	0x1b, 0x70, 0x4d, 0x2c, 0x7f, 0xb0, 0xb3, 0xde, 0xf8, 0x4c, 0x02, 0xea, 0xd7, 0xaf, 0xe9, 0x2b,
	0x70, 0x49, 0x84, 0xe2, 0x0d, 0x70, 0x88, 0xdf, 0xb8, 0xa6, 0x5f, 0x86, 0x0b, 0x04, 0x62, 0xb7,
	0xb5, 0x73, 0xbf, 0xb9, 0xda, 0xa4, 0x9d, 0xb8, 0xd7, 0xda, 0xd9, 0xdb, 0xad, 0xfd, 0xb3, 0xb8,
	0x17, 0x8d, 0xf5, 0xad, 0xe6, 0xf6, 0xe6, 0xc6, 0xc3, 0x8d, 0x4d, 0x52, 0xd5, 0xee, 0x83, 0xe6,
	0xce, 0x76, 0xed, 0x9b, 0xd7, 0xf4, 0x6b, 0xb0, 0x4c, 0xcb, 0x37, 0x5b, 0x1b, 0x8d, 0xf5, 0xcf,
	0x6c, 0x6e, 0xdc, 0x7d, 0x20, 0x00, 0xfc, 0x66, 0x4c, 0x45, 0x52, 0x63, 0x67, 0xbd, 0xd9, 0x5e,
	0x6d, 0x6c, 0xaf, 0xd7, 0x7e, 0x2b, 0x26, 0x09, 0x2d, 0x78, 0xa3, 0xb9, 0xf6, 0xc6, 0xc6, 0x7a,
	0xed, 0xb7, 0xe3, 0x1a, 0xef, 0xef, 0xec, 0xb5, 0xda, 0xa9, 0x0e, 0xff, 0xf4, 0x4a, 0xd4, 0xa5,
	0x9d, 0xed, 0xb5, 0x8d, 0x54, 0xf9, 0xd7, 0x57, 0xf4, 0xb3, 0x30, 0x4b, 0xc7, 0x60, 0xfb, 0x8d,
	0xed, 0x9d, 0x47, 0xdb, 0xb5, 0xaf, 0xac, 0xe8, 0x57, 0xa0, 0x4e, 0x71, 0x6c, 0xb4, 0x1a, 0x5b,
	0x1b, 0x0f, 0x36, 0x5a, 0x42, 0x1f, 0xdf, 0x5b, 0x89, 0x46, 0x61, 0x73, 0xe7, 0x5e, 0x73, 0x4d,
	0x28, 0xfa, 0xc1, 0x15, 0x61, 0x80, 0xd6, 0x9b, 0x6d, 0xa1, 0xe8, 0xab, 0x2b, 0x11, 0x02, 0xeb,
	0xab, 0x42, 0xfe, 0x0f, 0xad, 0xe8, 0x97, 0x88, 0xdf, 0x5f, 0xd8, 0x69, 0x38, 0x8e, 0xd7, 0x6d,
	0x5a, 0x42, 0xe1, 0x0f, 0xaf, 0x44, 0xd8, 0xad, 0x99, 0x8e, 0xc3, 0xb6, 0x8e, 0x02, 0xc0, 0x8f,
	0xac, 0xe8, 0xe7, 0xa0, 0xc6, 0x6b, 0xdd, 0xde, 0x69, 0x6d, 0xac, 0xed, 0xb4, 0xd6, 0x6b, 0x3f,
	0xba, 0xa2, 0xd7, 0xc9, 0xf1, 0x77, 0xd8, 0x21, 0x92, 0x29, 0x2e, 0xf9, 0xda, 0xca, 0x0b, 0x5f,
	0xd5, 0x60, 0x21, 0x71, 0x50, 0x83, 0x67, 0xdb, 0x4e, 0x63, 0xef, 0xc1, 0x7d, 0x82, 0xd1, 0x76,
	0x27, 0x16, 0x0d, 0x57, 0x61, 0x59, 0x2c, 0x48, 0x4c, 0x53, 0x0d, 0x8b, 0x37, 0xb1, 0x9c, 0x50,
	0xb6, 0xc9, 0xe7, 0x7b, 0x49, 0xbf, 0x0c, 0x75, 0xb1, 0xf8, 0xc1, 0xce, 0x1b, 0x1b, 0xdb, 0x78,
	0xba, 0x34, 0x5b, 0x1b, 0xb5, 0xf2, 0x9d, 0x9f, 0xfb, 0x22, 0x9c, 0x25, 0xe1, 0x0b, 0xc9, 0x72,
	0x88, 0xff, 0xda, 0x5d, 0xa4, 0x7f, 0x16, 0xe6, 0xe5, 0x2d, 0x83, 0x6e, 0x28, 0xec, 0x19, 0x89,
	0xcd, 0xc9, 0xf2, 0x48, 0x98, 0xa0, 0x6f, 0x9c, 0xd1, 0x57, 0x61, 0x82, 0x2a, 0xfb, 0x7a, 0x7a,
	0x35, 0x8e, 0x36, 0x16, 0xcb, 0x99, 0x65, 0xa4, 0x0e, 0x8f, 0xdc, 0xa1, 0x4a, 0xab, 0xc7, 0xfa,
	0xf3, 0x8a, 0x05, 0x5e, 0xad, 0xfa, 0x2f, 0x17, 0x05, 0x25, 0x0d, 0xfa, 0xc4, 0x2d, 0x4a, 0xa5,
	0x06, 0xbf, 0xa0, 0x0a, 0xa8, 0xa7, 0x56, 0xb1, 0x97, 0x0b, 0xc3, 0x92, 0x36, 0xed, 0xe8, 0x3a,
	0xa0, 0x84, 0xe2, 0x87, 0xd2, 0x0f, 0x14, 0x29, 0x95, 0xc6, 0xe5, 0x62, 0x80, 0xa4, 0xa9, 0x9e,
	0x18, 0x5e, 0x80, 0xeb, 0x50, 0x7a, 0xda, 0x28, 0xa3, 0x54, 0xf0, 0x96, 0x0b, 0xc1, 0x91, 0x76,
	0x5c, 0x58, 0x52, 0x6d, 0xb0, 0xf5, 0x9b, 0xaa, 0xd0, 0xfb, 0x2a, 0xc3, 0x81, 0x82, 0x84, 0x99,
	0x3b, 0x76, 0xe3, 0x8c, 0xfe, 0x69, 0x98, 0xe2, 0x67, 0x55, 0xfa, 0xe5, 0x9c, 0x63, 0xac, 0x77,
	0x96, 0xaf, 0xe6, 0x1f, 0x72, 0x19, 0x67, 0x74, 0x47, 0x7c, 0xa5, 0x3f, 0x7a, 0xb6, 0x5b, 0x31,
	0x1c, 0xea, 0xd7, 0xc6, 0x15, 0x3d, 0xcf, 0x7c, 0x05, 0xdc, 0x38, 0xa3, 0x77, 0xa1, 0x96, 0x24,
	0xa2, 0x7e, 0x63, 0x24, 0x9d, 0xd5, 0xc3, 0xae, 0x7e, 0xc0, 0xdf, 0x38, 0xa3, 0xff, 0xff, 0xa2,
	0x9d, 0x48, 0x7e, 0x21, 0x5f, 0x7f, 0x71, 0x64, 0x35, 0xc2, 0x73, 0xfe, 0xcb, 0xb7, 0x4f, 0x00,
	0xcd, 0x1a, 0xff, 0x2c, 0xcc, 0x49, 0xaf, 0xd3, 0xeb, 0xd7, 0xb3, 0x02, 0x82, 0xc7, 0xb8, 0xdd,
	0x18, 0x05, 0xc2, 0xea, 0xfe, 0x3c, 0x2c, 0x44, 0x81, 0x59, 0xef, 0x9b, 0xc1, 0xae, 0x39, 0xd4,
	0x9f, 0xc9, 0x0e, 0xdd, 0x4a, 0x21, 0xd4, 0xf5, 0xa7, 0x80, 0x08, 0x1f, 0x9b, 0xe2, 0xe8, 0xb0,
	0x06, 0xf2, 0x46, 0x27, 0x6e, 0xe1, 0xd9, 0x02, 0x50, 0xa4, 0x89, 0x03, 0xe2, 0xbd, 0xfc, 0xd0,
	0xee, 0x3b, 0xde, 0x01, 0xe1, 0x6f, 0xe2, 0x90, 0xfc, 0x9c, 0x4a, 0x82, 0x24, 0x80, 0xd4, 0x4c,
	0xa0, 0x82, 0x23, 0x0d, 0x75, 0xa1, 0xc6, 0x77, 0x23, 0x3c, 0xd0, 0x92, 0x02, 0x97, 0x24, 0x88,
	0xba, 0x91, 0x34, 0x14, 0x1b, 0x90, 0xef, 0x26, 0xce, 0x39, 0x3c, 0x7b, 0x75, 0xd8, 0xb4, 0x14,
	0x03, 0x92, 0x80, 0x50, 0x2f, 0x29, 0x02, 0x50, 0x54, 0xbb, 0x1d, 0x87, 0xf0, 0x66, 0xdf, 0x36,
	0x7c, 0x5f, 0x4d, 0xab, 0x04, 0x90, 0x7a, 0x21, 0x50, 0xc1, 0xb1, 0xa6, 0x7a, 0xc4, 0x75, 0x88,
	0x5d, 0xc7, 0xb0, 0x91, 0x4f, 0x50, 0x79, 0x36, 0xab, 0x06, 0x7a, 0xd0, 0xcc, 0x91, 0xb9, 0x59,
	0x04, 0x8c, 0xb5, 0xf3, 0x76, 0x02, 0x25, 0x7a, 0x9e, 0x72, 0x2d, 0xab, 0x86, 0xd5, 0x21, 0xf1,
	0x16, 0x28, 0x48, 0x2f, 0x33, 0x8e, 0x54, 0x4e, 0x2a, 0xe7, 0x6a, 0xbb, 0x6e, 0x64, 0xd7, 0xcf,
	0x61, 0x0a, 0x36, 0xf1, 0x3d, 0xb0, 0x10, 0x33, 0x36, 0x3d, 0x64, 0x4c, 0x0f, 0xf8, 0x80, 0x40,
	0x90, 0x52, 0xce, 0x53, 0x79, 0x6b, 0x09, 0x01, 0x8c, 0x5a, 0x78, 0x04, 0xb3, 0xac, 0x61, 0x5a,
	0xfd, 0x4a, 0xc6, 0xd3, 0x35, 0x71, 0xdd, 0x99, 0x1c, 0x27, 0x57, 0xbc, 0x23, 0x4e, 0x6e, 0x66,
	0x50, 0x49, 0xab, 0x23, 0xb4, 0x00, 0x57, 0x7b, 0x25, 0xb3, 0x8c, 0x55, 0xf8, 0xa6, 0xb8, 0xba,
	0xd2, 0xb2, 0x87, 0x77, 0xc6, 0xab, 0xf2, 0x6d, 0xb1, 0x8f, 0x94, 0x7d, 0x14, 0x04, 0xa0, 0x20,
	0xb4, 0x58, 0x4d, 0x00, 0x19, 0x22, 0x5a, 0x7b, 0xce, 0xc6, 0x95, 0xaf, 0x39, 0x03, 0x3c, 0xa3,
	0x15, 0xac, 0x21, 0x94, 0x52, 0x2f, 0x4f, 0x05, 0x83, 0xa7, 0x60, 0xa2, 0x46, 0x3e, 0x07, 0xf3,
	0x71, 0x23, 0xdb, 0x6a, 0xe6, 0xa3, 0x00, 0x03, 0x06, 0x90, 0x27, 0x3e, 0x63, 0x18, 0x15, 0xff,
	0x91, 0xc7, 0xb6, 0xf5, 0x67, 0x72, 0x58, 0x8b, 0x40, 0x8c, 0xe2, 0x3f, 0x06, 0xa4, 0x5a, 0xa1,
	0x37, 0xde, 0x25, 0xba, 0x59, 0xde, 0x1a, 0x40, 0x41, 0x46, 0xad, 0xd0, 0x1c, 0x8a, 0x35, 0xe2,
	0x0b, 0xc1, 0xc9, 0x45, 0x2b, 0x92, 0x42, 0xd1, 0x55, 0xc2, 0xe1, 0xe6, 0x5e, 0x2c, 0x0a, 0x1a,
	0x4b, 0x53, 0x02, 0xc0, 0x8e, 0x24, 0xa9, 0x44, 0x57, 0x48, 0xd3, 0x34, 0x90, 0x5a, 0x9a, 0xaa,
	0xe0, 0xa2, 0x51, 0xd2, 0xe3, 0x20, 0x6c, 0xd1, 0xca, 0xf0, 0x6c, 0x46, 0xa4, 0xb6, 0x46, 0x97,
	0xf8, 0x49, 0x71, 0x71, 0x7a, 0x5d, 0x05, 0xc6, 0x60, 0x04, 0x29, 0x31, 0x27, 0x85, 0xc3, 0xd3,
	0xd3, 0x8a, 0xde, 0xaa, 0x17, 0x52, 0x10, 0x5c, 0xae, 0x50, 0x01, 0xa4, 0x72, 0x61, 0x06, 0xce,
	0x46, 0x15, 0xef, 0xda, 0xdd, 0xcc, 0xa1, 0xa7, 0xc5, 0x2d, 0xf4, 0xce, 0x00, 0x05, 0x61, 0xe6,
	0x0c, 0xe4, 0x50, 0xb1, 0x62, 0x16, 0x8d, 0x51, 0xec, 0xf4, 0x41, 0xcc, 0x7b, 0x7a, 0xce, 0x70,
	0x26, 0x40, 0xd5, 0x8a, 0x59, 0x36, 0x34, 0x6b, 0xdc, 0x83, 0x25, 0x55, 0xb0, 0x4c, 0x85, 0x92,
	0x9e, 0x11, 0xbc, 0x73, 0xf9, 0x3b, 0x0a, 0x42, 0xb2, 0x06, 0x1f, 0xc0, 0x8c, 0x70, 0xc5, 0x54,
	0xbd, 0xc8, 0x09, 0x17, 0x61, 0xd5, 0x2b, 0x90, 0x7c, 0x43, 0x95, 0x4e, 0x1d, 0x65, 0xd0, 0x53,
	0xc5, 0xd4, 0xc9, 0x0a, 0x8e, 0xaa, 0x98, 0x3a, 0x39, 0x11, 0x5a, 0xe9, 0xaa, 0xcd, 0x18, 0x50,
	0x00, 0x50, 0x20, 0x24, 0x87, 0x33, 0x57, 0x20, 0x94, 0x8a, 0xd3, 0x4d, 0x55, 0x0f, 0x61, 0x2d,
	0xf4, 0xbd, 0x9e, 0xed, 0x20, 0x3d, 0x4f, 0x9f, 0x64, 0x30, 0x6a, 0xd5, 0x43, 0x01, 0x16, 0xb7,
	0x93, 0xba, 0x90, 0xaf, 0x68, 0x47, 0x15, 0x21, 0x40, 0xd1, 0x4e, 0xc6, 0xdd, 0x7e, 0xe3, 0x8c,
	0xfe, 0xfd, 0x70, 0x31, 0xd3, 0x09, 0x4e, 0x7f, 0x29, 0xeb, 0x6c, 0x55, 0xe9, 0x6c, 0xb7, 0xfc,
	0xf2, 0x49, 0xc0, 0x63, 0x3e, 0x57, 0xb9, 0x94, 0xe9, 0xf9, 0x38, 0x08, 0x3e, 0x71, 0x0a, 0x3e,
	0xcf, 0xf6, 0x51, 0xa3, 0x82, 0x35, 0x1d, 0x72, 0x52, 0x21, 0x58, 0x95, 0x91, 0x36, 0x15, 0x82,
	0x35, 0x2b, 0x7e, 0xa5, 0xc8, 0x2b, 0x42, 0x14, 0xd0, 0x4c, 0x5e, 0x91, 0x43, 0x96, 0x66, 0xf2,
	0x4a, 0x2a, 0xa0, 0xa8, 0xb0, 0x56, 0x48, 0xef, 0x55, 0x65, 0xad, 0x15, 0xc9, 0xe7, 0xb5, 0xb2,
	0xd6, 0x0a, 0xc5, 0xe3, 0x57, 0xc6, 0x19, 0xfd, 0x33, 0xa0, 0xf3, 0x21, 0x5c, 0x47, 0x0e, 0x6f,
	0xea, 0xaa, 0x8a, 0x2a, 0x42, 0x13, 0xd7, 0x73, 0xcb, 0xe3, 0xad, 0x28, 0x16, 0x86, 0x7d, 0x1e,
	0xe7, 0x43, 0xb1, 0x15, 0x95, 0xca, 0xd5, 0x5b, 0xc5, 0x04, 0x48, 0xa4, 0x26, 0x9c, 0x4f, 0x77,
	0x3b, 0xc0, 0xfb, 0x93, 0xbc, 0xae, 0xb1, 0xad, 0xc9, 0x8d, 0x51, 0x20, 0x31, 0x2b, 0xaf, 0x1d,
	0x61, 0x31, 0xc4, 0x9e, 0x35, 0xcd, 0xb6, 0xab, 0xa8, 0xc0, 0xd4, 0xac, 0xac, 0x86, 0x64, 0x0d,
	0x7e, 0x2f, 0x2c, 0x4a, 0x13, 0x8c, 0xb5, 0xf7, 0x9c, 0x7a, 0x1a, 0x4a, 0x40, 0x19, 0x03, 0xaf,
	0x80, 0x13, 0x74, 0xa0, 0x74, 0x5b, 0x0f, 0x5f, 0xd1, 0x9f, 0xcf, 0x9f, 0xf4, 0x1c, 0x2e, 0x43,
	0x07, 0x52, 0x83, 0xc6, 0x1c, 0x21, 0xb7, 0x75, 0x5d, 0x69, 0xba, 0x93, 0xda, 0xb8, 0x31, 0x0a,
	0x24, 0x17, 0x9f, 0xa6, 0x55, 0x0c, 0x9f, 0xa6, 0x55, 0x18, 0x1f, 0x61, 0x3b, 0xf9, 0x04, 0xe6,
	0x9b, 0x47, 0x7d, 0xcf, 0x8f, 0x87, 0xea, 0x76, 0x66, 0x0d, 0x14, 0x70, 0x57, 0x08, 0x9d, 0x49,
	0xc6, 0xec, 0xce, 0xc9, 0x3e, 0x90, 0xf6, 0xcb, 0x3c, 0x9b, 0xed, 0xa6, 0x9e, 0xcd, 0xa3, 0x54,
	0xbc, 0x0b, 0xba, 0x59, 0x04, 0x2c, 0x21, 0x88, 0xda, 0xc8, 0xe9, 0x35, 0x83, 0x11, 0x82, 0x48,
	0x02, 0xca, 0x11, 0x44, 0x09, 0x38, 0x61, 0xb2, 0x45, 0x62, 0x6a, 0x60, 0x46, 0xa2, 0xe8, 0x66,
	0x8e, 0x34, 0x8b, 0xc1, 0x32, 0x26, 0x9b, 0x12, 0x92, 0x35, 0x68, 0x81, 0xbe, 0x6e, 0x9b, 0x8e,
	0x77, 0x20, 0x3a, 0xad, 0x29, 0xb6, 0x4b, 0x44, 0x13, 0xa1, 0xa5, 0x4d, 0x8b, 0x28, 0xb3, 0x37,
	0x47, 0xc3, 0x44, 0xad, 0x1c, 0x90, 0x10, 0xcf, 0x85, 0x1a, 0x5a, 0xc7, 0xdb, 0xa0, 0x11, 0x0d,
	0xa5, 0x60, 0xe4, 0x9d, 0x9f, 0x18, 0x84, 0x55, 0xb9, 0xf3, 0x4b, 0xc4, 0x8d, 0x55, 0xee, 0xfc,
	0xd2, 0x91, 0x5c, 0xa9, 0x5d, 0x40, 0x0c, 0x36, 0xaa, 0x67, 0x84, 0x62, 0x12, 0x86, 0xe3, 0x99,
	0x11, 0x10, 0x02, 0x8b, 0xa5, 0xc2, 0x60, 0x66, 0x89, 0xbc, 0x64, 0xd0, 0xce, 0xe5, 0xe7, 0x0b,
	0xc1, 0xc5, 0xe2, 0x47, 0x8a, 0x04, 0xa8, 0x10, 0x3f, 0xc9, 0x58, 0x84, 0x0a, 0xf1, 0xa3, 0x08,
	0x26, 0x18, 0x19, 0xcb, 0x12, 0x01, 0x28, 0xd5, 0xc6, 0xb2, 0x74, 0x60, 0x4b, 0xb5, 0xb1, 0x4c,
	0x19, 0xcd, 0xd2, 0x38, 0xa3, 0x7f, 0x45, 0x4b, 0x04, 0xed, 0x93, 0x63, 0x02, 0xea, 0xb7, 0xb3,
	0x36, 0x7a, 0x19, 0x81, 0x0b, 0x15, 0x32, 0x68, 0x64, 0xc8, 0x41, 0xba, 0x9b, 0xca, 0x8a, 0xe6,
	0xa7, 0xd8, 0x4d, 0xe5, 0x44, 0x19, 0x5c, 0xbe, 0x7d, 0x02, 0xe8, 0x58, 0x5a, 0x50, 0x98, 0x16,
	0xea, 0x22, 0xfb, 0x98, 0x81, 0xaa, 0x96, 0x66, 0x15, 0x98, 0x5a, 0x5a, 0xa8, 0x21, 0xe3, 0xf1,
	0x4d, 0x07, 0x02, 0xd4, 0x55, 0x0e, 0xb6, 0x8a, 0x20, 0x84, 0xea, 0x53, 0x31, 0x65, 0x54, 0x41,
	0xe3, 0x8c, 0xfe, 0x65, 0x0d, 0x96, 0xb3, 0xa3, 0xa3, 0xe9, 0xb7, 0xf2, 0xe4, 0x77, 0x3a, 0x94,
	0xe0, 0xf2, 0x2b, 0x27, 0x82, 0x67, 0x7d, 0xf8, 0xaa, 0x06, 0x97, 0xf3, 0x22, 0xb4, 0xe9, 0x2f,
	0x9f, 0xa0, 0x56, 0x12, 0x8b, 0x6e, 0xf9, 0xd5, 0x13, 0x7e, 0x21, 0x70, 0x3b, 0x5b, 0x36, 0xf8,
	0x26, 0x80, 0xdc, 0x9d, 0x27, 0x3e, 0x8e, 0xc8, 0xd2, 0x6f, 0x67, 0x2d, 0x32, 0x2a, 0xe8, 0x8c,
	0x15, 0x37, 0xef, 0x83, 0x78, 0x37, 0x2d, 0x04, 0xf1, 0x52, 0x6d, 0x3e, 0xa5, 0x48, 0x63, 0xaa,
	0xcd, 0x67, 0x32, 0x06, 0x18, 0x95, 0xaa, 0x62, 0x7c, 0x2b, 0x85, 0x54, 0x4d, 0x04, 0xe9, 0x52,
	0x48, 0xd5, 0x74, 0x80, 0x2c, 0x6a, 0xa8, 0x13, 0x22, 0xee, 0xd0, 0xa8, 0xd3, 0x19, 0xdb, 0xe1,
	0x08, 0x42, 0x6d, 0xa8, 0x4b, 0x01, 0xc5, 0x86, 0xba, 0x64, 0x4c, 0x1f, 0xfd, 0x46, 0xde, 0xd7,
	0x3c, 0x36, 0x92, 0xc2, 0x50, 0xa7, 0x0e, 0x0e, 0x44, 0xa9, 0x2e, 0x04, 0xaf, 0x51, 0x50, 0x5d,
	0x0e, 0x01, 0xb4, 0x6c, 0xe4, 0x03, 0xc4, 0x54, 0x17, 0x43, 0xe2, 0x28, 0xa8, 0x9e, 0x88, 0xcf,
	0xa3, 0xa0, 0x7a, 0x3a, 0xa6, 0x0e, 0xed, 0x2e, 0xf3, 0x74, 0xc9, 0x30, 0xb9, 0xb0, 0xd2, 0x41,
	0xa6, 0xc9, 0x45, 0x02, 0x60, 0xb5, 0xee, 0xc3, 0x12, 0x9b, 0x26, 0x91, 0x97, 0x1a, 0xa9, 0xfe,
	0x46, 0xd6, 0xda, 0xb7, 0xe7, 0xb2, 0x10, 0x60, 0xc5, 0xdb, 0x10, 0x57, 0x61, 0xc4, 0xaf, 0xe3,
	0xe5, 0xad, 0xc2, 0x11, 0xd0, 0x88, 0x55, 0x58, 0x80, 0x4b, 0xe8, 0x94, 0xec, 0x61, 0x85, 0xec,
	0xa6, 0x52, 0x40, 0x39, 0x3a, 0x65, 0x02, 0x2e, 0x6a, 0x6a, 0xa9, 0x1d, 0x7a, 0x3e, 0x6a, 0x0f,
	0x83, 0x10, 0x1d, 0x3d, 0x3a, 0xb4, 0xe9, 0xbe, 0x5e, 0x65, 0x76, 0x61, 0x60, 0x11, 0x4c, 0x86,
	0xd9, 0x25, 0x0d, 0x26, 0x08, 0x6d, 0xba, 0xa1, 0x4f, 0x34, 0x46, 0xad, 0xe4, 0xb7, 0x32, 0x76,
	0xff, 0x2a, 0x60, 0xb5, 0xd0, 0xce, 0x83, 0x8f, 0x27, 0xfd, 0x3d, 0x14, 0x8a, 0xdd, 0x53, 0x1f,
	0x07, 0x26, 0xf1, 0x7c, 0x6e, 0x34, 0x90, 0xa4, 0xe5, 0x88, 0x45, 0x99, 0x47, 0x82, 0x09, 0xa0,
	0x4c, 0x2d, 0x27, 0x05, 0x17, 0x23, 0xb3, 0x8e, 0x9c, 0x11, 0xc8, 0x24, 0x20, 0xd4, 0xc8, 0xa4,
	0x80, 0x58, 0x0b, 0x4d, 0x72, 0xd4, 0xd5, 0xa0, 0x06, 0xce, 0xf5, 0xae, 0xc2, 0x95, 0x81, 0x16,
	0xaf, 0x77, 0x71, 0xbd, 0x17, 0x94, 0xa7, 0x30, 0xeb, 0x5d, 0xe3, 0xcc, 0xcb, 0x9a, 0xbe, 0x07,
	0xf3, 0x4c, 0x0c, 0x93, 0x60, 0x7a, 0xdd, 0xa1, 0xc2, 0x82, 0xd2, 0x46, 0x21, 0x2b, 0x54, 0x5b,
	0x50, 0xc4, 0x72, 0xd6, 0xc3, 0x3d, 0x12, 0xad, 0x30, 0xbf, 0xda, 0x7b, 0x23, 0xaa, 0xbd, 0x97,
	0xae, 0xf6, 0x6d, 0x2c, 0xba, 0xd9, 0xa4, 0xe1, 0x15, 0xaf, 0x64, 0x1c, 0x30, 0xc4, 0x55, 0x3f,
	0x33, 0x02, 0x42, 0xda, 0x9a, 0x6e, 0x7b, 0xa1, 0xdd, 0x1b, 0xb6, 0x51, 0x18, 0xda, 0xee, 0x41,
	0xc6, 0xd6, 0x54, 0x86, 0xc9, 0xdc, 0x9a, 0x26, 0xc1, 0x62, 0x0d, 0x90, 0x4e, 0x89, 0x44, 0x53,
	0x59, 0x76, 0xb6, 0x74, 0x6b, 0xdf, 0x51, 0x10, 0x32, 0x3a, 0x6f, 0x04, 0x36, 0x18, 0xf7, 0xfa,
	0x81, 0x7a, 0x20, 0x58, 0x61, 0xe6, 0x40, 0x44, 0xe5, 0xf1, 0x42, 0xc4, 0xa6, 0x35, 0xf5, 0xfb,
	0xcc, 0x3a, 0x6b, 0xa4, 0xc5, 0x79, 0x67, 0x8d, 0x1c, 0x42, 0x96, 0x04, 0x24, 0x93, 0x59, 0x07,
	0xd4, 0x92, 0x40, 0x80, 0xc8, 0x96, 0x04, 0x12, 0x50, 0xbc, 0xfc, 0x27, 0xdf, 0xe2, 0xd2, 0x6f,
	0x64, 0x7f, 0x1d, 0x3f, 0xef, 0xa5, 0x76, 0xa2, 0x50, 0x3c, 0xea, 0x15, 0x35, 0x22, 0x3f, 0x39,
	0x78, 0x23, 0xe7, 0xb8, 0x3f, 0x8a, 0xfb, 0xa8, 0x6e, 0x44, 0x11, 0xee, 0x91, 0x9d, 0x38, 0x26,
	0xde, 0x01, 0x54, 0x1d, 0x3b, 0xa5, 0x1f, 0x28, 0x54, 0x9d, 0x38, 0x2a, 0x1f, 0x14, 0x64, 0x96,
	0xe3, 0xe4, 0xab, 0x8e, 0x2a, 0xcb, 0xb1, 0xe2, 0xa9, 0xc8, 0x8c, 0xf3, 0x5f, 0xc5, 0x03, 0x91,
	0x92, 0x23, 0x85, 0xf0, 0x04, 0xe1, 0xb3, 0x79, 0xbe, 0x05, 0xd1, 0xe3, 0x7e, 0xd9, 0x8e, 0x14,
	0xc9, 0xa7, 0xfe, 0xb8, 0x7e, 0x29, 0xbd, 0xd1, 0x9c, 0xe7, 0x0a, 0x14, 0x3d, 0xb5, 0xbb, 0xfc,
	0x5c, 0xb1, 0xa7, 0x9e, 0xe9, 0xb0, 0x24, 0xdf, 0x43, 0x56, 0x0c, 0x8b, 0xe2, 0xcd, 0x66, 0xc5,
	0xb0, 0xa8, 0x1f, 0x56, 0xa6, 0x16, 0x01, 0xe9, 0x0d, 0x62, 0xb5, 0xf5, 0x58, 0xae, 0xfe, 0x46,
	0x91, 0x67, 0x8c, 0x23, 0xe6, 0x95, 0x1e, 0x01, 0x56, 0x33, 0x6f, 0xf2, 0x3d, 0x62, 0x35, 0xf3,
	0x2a, 0x5e, 0x13, 0x8e, 0xf9, 0x4a, 0x7a, 0x09, 0x3c, 0x83, 0xaf, 0x92, 0xcf, 0x99, 0x67, 0xf0,
	0x95, 0xe2, 0x51, 0xf1, 0x48, 0xa0, 0x88, 0x4f, 0xe9, 0xe7, 0x78, 0x1a, 0xc5, 0x0f, 0xfe, 0x2f,
	0x3f, 0x57, 0xec, 0x45, 0x7e, 0x99, 0x73, 0xa3, 0x67, 0xe0, 0x73, 0x38, 0x57, 0x7c, 0xb7, 0x3e,
	0x87, 0x73, 0x13, 0x2f, 0xca, 0x47, 0xc3, 0xc2, 0x8d, 0x68, 0xf4, 0x1a, 0x9c, 0x72, 0x58, 0x24,
	0x90, 0xcc, 0x61, 0x49, 0x40, 0xc5, 0x7a, 0x12, 0xd3, 0x07, 0xf6, 0xdc, 0x60, 0xb0, 0x1f, 0x74,
	0x7d, 0x7b, 0x5f, 0x75, 0x26, 0x95, 0x06, 0x52, 0xeb, 0x49, 0x2a, 0xb8, 0x94, 0x97, 0x56, 0x7e,
	0x53, 0xf7, 0x0a, 0x36, 0x75, 0x2f, 0xbb, 0x29, 0x07, 0x16, 0x5b, 0xa8, 0x7b, 0xbc, 0x89, 0x95,
	0x6c, 0xbf, 0x61, 0x59, 0x6c, 0x90, 0x54, 0x0e, 0x6b, 0x29, 0x28, 0xb5, 0xaf, 0xa6, 0x12, 0x50,
	0xd5, 0x1a, 0x9e, 0x62, 0xa3, 0x5b, 0x8b, 0xa0, 0x46, 0xb5, 0x26, 0x00, 0xc6, 0xea, 0x44, 0x5c,
	0xcc, 0xb9, 0xc7, 0x52, 0xa9, 0x13, 0x2a, 0x30, 0xb5, 0x3a, 0xa1, 0x86, 0x4c, 0x38, 0x23, 0xac,
	0xdb, 0x07, 0x76, 0x68, 0x3a, 0x8f, 0x4c, 0xc7, 0xe1, 0xcb, 0x60, 0x96, 0x33, 0x82, 0x02, 0x34,
	0xc7, 0x19, 0x41, 0x09, 0x1d, 0x6f, 0x54, 0x1b, 0x16, 0x0d, 0x9b, 0xb7, 0x6e, 0x0e, 0x15, 0x1b,
	0x55, 0xa1, 0x54, 0xbd, 0x89, 0x94, 0x00, 0x58, 0xad, 0x1d, 0x22, 0x24, 0xa4, 0x50, 0xaf, 0x4a,
	0x21, 0x91, 0x08, 0x1e, 0xbb, 0xfc, 0xec, 0x68, 0x20, 0xea, 0x2c, 0x7c, 0x08, 0x7a, 0x3a, 0xee,
	0xa9, 0x82, 0xd7, 0x95, 0xd1, 0x54, 0x15, 0x52, 0x22, 0x23, 0x88, 0xaa, 0x71, 0x46, 0x0f, 0xa9,
	0x67, 0x7a, 0x3a, 0x86, 0x69, 0x86, 0x67, 0xba, 0x32, 0x44, 0xaa, 0xe2, 0x3c, 0x29, 0x27, 0x30,
	0x2a, 0xd9, 0xe9, 0xd7, 0x92, 0x51, 0x47, 0xf5, 0x0c, 0xe7, 0x59, 0x39, 0x8e, 0x69, 0xd6, 0xba,
	0x9a, 0x0c, 0x5f, 0x6a, 0x9c, 0xd1, 0x11, 0x8d, 0x3c, 0x2e, 0x05, 0xff, 0x54, 0xcb, 0xd9, 0x54,
	0xec, 0x50, 0xb5, 0x04, 0x54, 0xc4, 0x11, 0xa5, 0x3e, 0xe9, 0xaa, 0x30, 0xa3, 0x7a, 0x96, 0x8a,
	0x9f, 0x6e, 0xec, 0x85, 0x82, 0x90, 0xb4, 0x3d, 0xba, 0x7c, 0x44, 0x2e, 0xeb, 0x34, 0x0c, 0xcd,
	0xb3, 0x19, 0xce, 0x8b, 0x02, 0x4c, 0xe6, 0xf2, 0x91, 0x04, 0x8b, 0x8c, 0x31, 0xb5, 0x64, 0x28,
	0x4e, 0xc5, 0x10, 0x29, 0xa2, 0x9d, 0x2a, 0x86, 0x48, 0x19, 0xd3, 0x93, 0x32, 0x9f, 0x3a, 0x4c,
	0xa0, 0xfe, 0x42, 0x86, 0x6f, 0xb0, 0x22, 0xbc, 0xa2, 0x82, 0xf9, 0x72, 0x62, 0x0f, 0x12, 0x4f,
	0x80, 0x39, 0x29, 0x9e, 0xa6, 0x42, 0x17, 0x4a, 0x06, 0xf6, 0x54, 0x6c, 0x47, 0xd2, 0x21, 0x39,
	0x89, 0x9f, 0xf2, 0xbc, 0x1c, 0xb1, 0x52, 0xcf, 0xf4, 0xcd, 0x89, 0x43, 0x64, 0x2e, 0xdf, 0x18,
	0x09, 0x43, 0x6b, 0x8f, 0xbd, 0x25, 0xda, 0xc8, 0xe9, 0x8d, 0xf4, 0x96, 0x10, 0x80, 0x72, 0xbd,
	0x25, 0x24, 0x38, 0x36, 0xfa, 0x6f, 0xc0, 0xf4, 0xda, 0xe1, 0xe3, 0x35, 0xcb, 0x7d, 0x68, 0xf7,
	0x75, 0x45, 0x68, 0x68, 0x5e, 0xa6, 0xf6, 0x36, 0x8d, 0x8b, 0x89, 0x8b, 0xf8, 0x1b, 0x30, 0xdd,
	0xb0, 0xac, 0xcc, 0xca, 0xa2, 0x32, 0x75, 0x65, 0x71, 0x31, 0xaf, 0x6c, 0x75, 0x30, 0xcc, 0xac,
	0x2c, 0x2a, 0x53, 0x57, 0x16, 0x17, 0x93, 0xca, 0xbe, 0x07, 0x6a, 0x6d, 0x14, 0xd2, 0x9c, 0xc6,
	0x20, 0xf4, 0xd4, 0x8e, 0xf8, 0x49, 0x90, 0xcc, 0xab, 0x04, 0x32, 0x14, 0x73, 0x8f, 0xe7, 0xda,
	0x1e, 0x2d, 0x24, 0x4e, 0x84, 0x99, 0xda, 0x5e, 0x0c, 0x93, 0xb9, 0x5c, 0x24, 0xc0, 0xd2, 0x8d,
	0xec, 0x9a, 0xc3, 0x6c, 0x51, 0x27, 0xc3, 0x8c, 0x6a, 0x84, 0x83, 0x91, 0x46, 0xfa, 0x70, 0xee,
	0x1e, 0x72, 0x1f, 0xda, 0xe1, 0xc0, 0x31, 0x85, 0x08, 0x69, 0x81, 0xae, 0x52, 0xad, 0x14, 0x70,
	0x59, 0xa2, 0x4e, 0x09, 0x4a, 0x5a, 0x3c, 0x22, 0xa2, 0x95, 0x14, 0x4b, 0x0d, 0xde, 0x54, 0xdf,
	0x4e, 0x48, 0x80, 0x65, 0x6a, 0x7d, 0x0a, 0x48, 0xd2, 0xdc, 0x90, 0x3e, 0xad, 0xe7, 0x38, 0x18,
	0x80, 0xae, 0x25, 0xc1, 0xea, 0xf0, 0xae, 0x63, 0x1e, 0x04, 0xfa, 0x8b, 0x19, 0x3b, 0x95, 0x34,
	0x28, 0x6e, 0xf6, 0xa5, 0x13, 0x40, 0xf3, 0xdb, 0x1a, 0x6c, 0x32, 0x0a, 0xc4, 0xc8, 0x9e, 0xd9,
	0x02, 0x50, 0xd6, 0x39, 0x43, 0x1a, 0x8e, 0x34, 0xb4, 0x07, 0xb3, 0xec, 0x62, 0x12, 0xe9, 0x8a,
	0xea, 0x1c, 0x46, 0x28, 0xce, 0xb0, 0xdf, 0x49, 0x10, 0x9c, 0x37, 0xd2, 0x4d, 0x36, 0x7c, 0x5f,
	0x7f, 0xbe, 0x40, 0xd7, 0x98, 0xd1, 0xf4, 0x85, 0xa2, 0xa0, 0xa4, 0xc5, 0x63, 0xb8, 0xc0, 0x8a,
	0x49, 0x81, 0x48, 0xb6, 0x4c, 0xf7, 0x88, 0x24, 0x64, 0x8e, 0x77, 0xb3, 0x0a, 0x98, 0xb4, 0xfb,
	0x59, 0x98, 0xff, 0xb4, 0x67, 0xbb, 0x64, 0x59, 0x26, 0x90, 0x0a, 0x09, 0x2f, 0x03, 0xa8, 0xd5,
	0xca, 0x04, 0x0c, 0x67, 0x40, 0x4a, 0x55, 0x92, 0xb7, 0x66, 0xba, 0xf1, 0x95, 0x73, 0x05, 0x03,
	0x66, 0x81, 0xaa, 0x19, 0x30, 0x1b, 0x5a, 0xe0, 0x7d, 0x0a, 0xd4, 0x46, 0xae, 0xb5, 0xe6, 0x59,
	0x68, 0x8d, 0xbe, 0xb0, 0xae, 0xe6, 0x7d, 0x25, 0x68, 0x26, 0xef, 0x67, 0x40, 0x93, 0xa6, 0xff,
	0x01, 0x5c, 0x5c, 0xb5, 0x5d, 0x4b, 0xdd, 0x76, 0xba, 0xb6, 0x4c, 0x58, 0xdc, 0xf8, 0xad, 0x93,
	0x80, 0x93, 0xd6, 0x1d, 0x58, 0x7a, 0x68, 0xfb, 0xb8, 0x5c, 0x0a, 0x83, 0xa5, 0x90, 0x31, 0x2a,
	0x30, 0xb5, 0x52, 0xa5, 0x84, 0x24, 0xad, 0xbd, 0x8b, 0x47, 0x98, 0x14, 0xc6, 0x23, 0xc0, 0x5d,
	0x64, 0x5f, 0xcc, 0xaa, 0x27, 0x05, 0xaa, 0xe6, 0xdb, 0x4c, 0x68, 0x7e, 0xe5, 0x95, 0x8c, 0x43,
	0xd4, 0x33, 0xde, 0x6c, 0x86, 0x88, 0x4c, 0xc2, 0xe5, 0x48, 0xd3, 0x14, 0x28, 0x97, 0x34, 0x6c,
	0xab, 0xdb, 0xb0, 0x8e, 0x6c, 0x57, 0xe5, 0x47, 0x23, 0x14, 0xab, 0x25, 0x8d, 0x0c, 0xc1, 0xaf,
	0xce, 0xdd, 0x43, 0xe1, 0x80, 0xe7, 0x66, 0x5c, 0x37, 0x4b, 0x82, 0x64, 0x2e, 0x74, 0x09, 0x28,
	0x7e, 0x9b, 0x95, 0x9e, 0x91, 0x8b, 0xa1, 0xde, 0x94, 0x36, 0x8d, 0x24, 0x90, 0x5a, 0xfb, 0x55,
	0xc0, 0xf1, 0x76, 0x1a, 0xdd, 0xd0, 0x3e, 0x46, 0x23, 0xda, 0x49, 0x03, 0xa9, 0xdb, 0x51, 0xc0,
	0x71, 0x16, 0x57, 0x85, 0x57, 0xd4, 0x33, 0x8d, 0x49, 0xc9, 0x80, 0x94, 0xcb, 0x05, 0x21, 0x49,
	0x6b, 0x6f, 0xc2, 0x8c, 0x10, 0x10, 0x4f, 0xb1, 0xe3, 0x96, 0x83, 0x0a, 0x2e, 0xe7, 0x03, 0x90,
	0x2a, 0x1f, 0xc1, 0x9c, 0x3c, 0x39, 0xaf, 0x2b, 0xa7, 0xb9, 0x34, 0x2b, 0x47, 0x81, 0x08, 0xd7,
	0xb2, 0x15, 0xb1, 0xdc, 0xd4, 0x9b, 0x5f, 0x75, 0x74, 0xbb, 0xe5, 0xc2, 0xb0, 0xec, 0x5a, 0xb6,
	0x9e, 0x0e, 0xae, 0x96, 0x7b, 0x57, 0x5a, 0x08, 0xfa, 0xa6, 0x98, 0x82, 0x59, 0x91, 0xda, 0x8c,
	0x33, 0xab, 0xb3, 0x7f, 0xf6, 0xb7, 0x57, 0xb5, 0xff, 0xf2, 0xb7, 0x57, 0xb5, 0xbf, 0xf9, 0xdb,
	0xab, 0xda, 0xfe, 0x44, 0xdf, 0xf7, 0x42, 0xef, 0xd5, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0x3c,
	0x6e, 0x12, 0x55, 0xff, 0x1b, 0x01, 0x00,
}
