// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/digtranserver/digtranserver.proto

/*
Package digtranserver is a generated protocol buffer package.

protoc --gogofast_out=plugins=grpc:. *.proto
sudo protoc --gogofast_out=plugins=grpc:. ./gitlab.chatserver.im/interfaceprobuf/digtranserver/digtranserver.proto

It is generated from these files:

	gitlab.chatserver.im/interfaceprobuf/digtranserver/digtranserver.proto

It has these top-level messages:

	ReqDigitalTransferUniversalBusiness
	ReplyDigitalTransferUniversalBusiness
*/
package digtranserver

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
// 币币交易业务通用协议请求
type ReqDigitalTransferUniversalBusiness struct {
	Ip         string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	UserId     int64  `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	AppUserId  int64  `protobuf:"varint,3,opt,name=appUserId,proto3" json:"appUserId,omitempty"`
	BusinessId int32  `protobuf:"varint,4,opt,name=businessId,proto3" json:"businessId,omitempty"`
	Data       []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ReqDigitalTransferUniversalBusiness) Reset()         { *m = ReqDigitalTransferUniversalBusiness{} }
func (m *ReqDigitalTransferUniversalBusiness) String() string { return proto.CompactTextString(m) }
func (*ReqDigitalTransferUniversalBusiness) ProtoMessage()    {}
func (*ReqDigitalTransferUniversalBusiness) Descriptor() ([]byte, []int) {
	return fileDescriptorDigtranserver, []int{0}
}

func (m *ReqDigitalTransferUniversalBusiness) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *ReqDigitalTransferUniversalBusiness) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqDigitalTransferUniversalBusiness) GetAppUserId() int64 {
	if m != nil {
		return m.AppUserId
	}
	return 0
}

func (m *ReqDigitalTransferUniversalBusiness) GetBusinessId() int32 {
	if m != nil {
		return m.BusinessId
	}
	return 0
}

func (m *ReqDigitalTransferUniversalBusiness) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// 币币交易业务通用协议响应
type ReplyDigitalTransferUniversalBusiness struct {
	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ReplyDigitalTransferUniversalBusiness) Reset()         { *m = ReplyDigitalTransferUniversalBusiness{} }
func (m *ReplyDigitalTransferUniversalBusiness) String() string { return proto.CompactTextString(m) }
func (*ReplyDigitalTransferUniversalBusiness) ProtoMessage()    {}
func (*ReplyDigitalTransferUniversalBusiness) Descriptor() ([]byte, []int) {
	return fileDescriptorDigtranserver, []int{1}
}

func (m *ReplyDigitalTransferUniversalBusiness) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*ReqDigitalTransferUniversalBusiness)(nil), "digtranserver.ReqDigitalTransferUniversalBusiness")
	proto.RegisterType((*ReplyDigitalTransferUniversalBusiness)(nil), "digtranserver.ReplyDigitalTransferUniversalBusiness")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DigitalTransferService service

type DigitalTransferServiceClient interface {
	// 币币交易业务通用协议
	DigitalTransferUniversalBusiness(ctx context.Context, in *ReqDigitalTransferUniversalBusiness, opts ...grpc.CallOption) (*ReplyDigitalTransferUniversalBusiness, error)
}

type digitalTransferServiceClient struct {
	cc *grpc.ClientConn
}

func NewDigitalTransferServiceClient(cc *grpc.ClientConn) DigitalTransferServiceClient {
	return &digitalTransferServiceClient{cc}
}

func (c *digitalTransferServiceClient) DigitalTransferUniversalBusiness(ctx context.Context, in *ReqDigitalTransferUniversalBusiness, opts ...grpc.CallOption) (*ReplyDigitalTransferUniversalBusiness, error) {
	out := new(ReplyDigitalTransferUniversalBusiness)
	err := grpc.Invoke(ctx, "/digtranserver.DigitalTransferService/DigitalTransferUniversalBusiness", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DigitalTransferService service

type DigitalTransferServiceServer interface {
	// 币币交易业务通用协议
	DigitalTransferUniversalBusiness(context.Context, *ReqDigitalTransferUniversalBusiness) (*ReplyDigitalTransferUniversalBusiness, error)
}

func RegisterDigitalTransferServiceServer(s *grpc.Server, srv DigitalTransferServiceServer) {
	s.RegisterService(&_DigitalTransferService_serviceDesc, srv)
}

func _DigitalTransferService_DigitalTransferUniversalBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDigitalTransferUniversalBusiness)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DigitalTransferServiceServer).DigitalTransferUniversalBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/digtranserver.DigitalTransferService/DigitalTransferUniversalBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DigitalTransferServiceServer).DigitalTransferUniversalBusiness(ctx, req.(*ReqDigitalTransferUniversalBusiness))
	}
	return interceptor(ctx, in, info, handler)
}

var _DigitalTransferService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "digtranserver.DigitalTransferService",
	HandlerType: (*DigitalTransferServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DigitalTransferUniversalBusiness",
			Handler:    _DigitalTransferService_DigitalTransferUniversalBusiness_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/digtranserver/digtranserver.proto",
}

func (m *ReqDigitalTransferUniversalBusiness) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDigitalTransferUniversalBusiness) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDigtranserver(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDigtranserver(dAtA, i, uint64(m.UserId))
	}
	if m.AppUserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDigtranserver(dAtA, i, uint64(m.AppUserId))
	}
	if m.BusinessId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDigtranserver(dAtA, i, uint64(m.BusinessId))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDigtranserver(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *ReplyDigitalTransferUniversalBusiness) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyDigitalTransferUniversalBusiness) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDigtranserver(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func encodeVarintDigtranserver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ReqDigitalTransferUniversalBusiness) Size() (n int) {
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovDigtranserver(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovDigtranserver(uint64(m.UserId))
	}
	if m.AppUserId != 0 {
		n += 1 + sovDigtranserver(uint64(m.AppUserId))
	}
	if m.BusinessId != 0 {
		n += 1 + sovDigtranserver(uint64(m.BusinessId))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovDigtranserver(uint64(l))
	}
	return n
}

func (m *ReplyDigitalTransferUniversalBusiness) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovDigtranserver(uint64(l))
	}
	return n
}

func sovDigtranserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDigtranserver(x uint64) (n int) {
	return sovDigtranserver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReqDigitalTransferUniversalBusiness) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDigtranserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDigitalTransferUniversalBusiness: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDigitalTransferUniversalBusiness: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDigtranserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDigtranserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDigtranserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppUserId", wireType)
			}
			m.AppUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDigtranserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppUserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessId", wireType)
			}
			m.BusinessId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDigtranserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BusinessId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDigtranserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDigtranserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDigtranserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDigtranserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyDigitalTransferUniversalBusiness) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDigtranserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyDigitalTransferUniversalBusiness: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyDigitalTransferUniversalBusiness: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDigtranserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDigtranserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDigtranserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDigtranserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDigtranserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDigtranserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDigtranserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDigtranserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDigtranserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDigtranserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDigtranserver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDigtranserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDigtranserver   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/digtranserver/digtranserver.proto", fileDescriptorDigtranserver)
}

var fileDescriptorDigtranserver = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x51, 0x4d, 0x4a, 0xf4, 0x40,
	0x14, 0xfc, 0x3a, 0xf3, 0x03, 0xf3, 0x98, 0xcf, 0x45, 0x2f, 0x86, 0x20, 0x12, 0x42, 0x44, 0xc8,
	0x2a, 0x03, 0xa3, 0x3b, 0x77, 0x83, 0x08, 0xb3, 0x6d, 0x9d, 0x03, 0x74, 0x92, 0x97, 0xf8, 0x20,
	0x26, 0x6d, 0x77, 0x27, 0xe0, 0x25, 0xbc, 0x82, 0x6b, 0x6f, 0xe2, 0xd2, 0x23, 0x48, 0x4e, 0x22,
	0x26, 0x23, 0x1a, 0x5d, 0xcc, 0xec, 0x5e, 0x55, 0x75, 0x15, 0x45, 0x35, 0x5c, 0xe7, 0x64, 0x0b,
	0x19, 0x47, 0xc9, 0x9d, 0xb4, 0x06, 0x75, 0x83, 0x3a, 0xa2, 0xfb, 0x25, 0x95, 0x16, 0x75, 0x26,
	0x13, 0x54, 0xba, 0x8a, 0xeb, 0x6c, 0x99, 0x52, 0x6e, 0xb5, 0x2c, 0xfb, 0x07, 0x43, 0x14, 0x29,
	0x5d, 0xd9, 0x8a, 0xff, 0x1f, 0x90, 0xc1, 0x33, 0x83, 0x53, 0x81, 0x0f, 0x57, 0x94, 0x93, 0x95,
	0xc5, 0xed, 0xa7, 0x90, 0xa1, 0xde, 0x96, 0xd4, 0xa0, 0x36, 0xb2, 0x58, 0xd7, 0x86, 0x4a, 0x34,
	0x86, 0x1f, 0x81, 0x43, 0xca, 0x65, 0x3e, 0x0b, 0x67, 0xc2, 0x21, 0xc5, 0x17, 0x30, 0xad, 0x0d,
	0xea, 0x4d, 0xea, 0x3a, 0x3e, 0x0b, 0x47, 0x62, 0x87, 0xf8, 0x09, 0xcc, 0xa4, 0x52, 0xdb, 0x5e,
	0x1a, 0x75, 0xd2, 0x37, 0xc1, 0x3d, 0x80, 0x78, 0x97, 0xb8, 0x49, 0xdd, 0xb1, 0xcf, 0xc2, 0x89,
	0xf8, 0xc1, 0x70, 0x0e, 0xe3, 0x54, 0x5a, 0xe9, 0x4e, 0x7c, 0x16, 0xce, 0x45, 0x77, 0x07, 0x97,
	0x70, 0x26, 0x50, 0x15, 0x8f, 0x7b, 0x2b, 0x7e, 0x99, 0xfb, 0x92, 0xdd, 0xbd, 0x7a, 0x61, 0xb0,
	0xf8, 0x65, 0xbc, 0x41, 0xdd, 0x50, 0x82, 0xfc, 0x89, 0x81, 0xbf, 0x37, 0x73, 0x15, 0x0d, 0x37,
	0x3c, 0x60, 0xaa, 0xe3, 0x8b, 0x3f, 0x9e, 0x03, 0xda, 0x07, 0xff, 0xd6, 0xf3, 0xd7, 0xd6, 0x63,
	0x6f, 0xad, 0xc7, 0xde, 0x5b, 0x8f, 0xc5, 0xd3, 0xee, 0xbb, 0xce, 0x3f, 0x02, 0x00, 0x00, 0xff,
	0xff, 0xb4, 0x5c, 0x4d, 0x1e, 0xf8, 0x01, 0x00, 0x00,
}
