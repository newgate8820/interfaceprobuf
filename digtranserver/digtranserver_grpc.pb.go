// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: digtranserver.proto

package digtranserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DigitalTransferServiceClient is the client API for DigitalTransferService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DigitalTransferServiceClient interface {
	// 币币交易业务通用协议
	DigitalTransferUniversalBusiness(ctx context.Context, in *ReqDigitalTransferUniversalBusiness, opts ...grpc.CallOption) (*ReplyDigitalTransferUniversalBusiness, error)
}

type digitalTransferServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDigitalTransferServiceClient(cc grpc.ClientConnInterface) DigitalTransferServiceClient {
	return &digitalTransferServiceClient{cc}
}

func (c *digitalTransferServiceClient) DigitalTransferUniversalBusiness(ctx context.Context, in *ReqDigitalTransferUniversalBusiness, opts ...grpc.CallOption) (*ReplyDigitalTransferUniversalBusiness, error) {
	out := new(ReplyDigitalTransferUniversalBusiness)
	err := c.cc.Invoke(ctx, "/digtranserver.DigitalTransferService/DigitalTransferUniversalBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DigitalTransferServiceServer is the server API for DigitalTransferService service.
// All implementations must embed UnimplementedDigitalTransferServiceServer
// for forward compatibility
type DigitalTransferServiceServer interface {
	// 币币交易业务通用协议
	DigitalTransferUniversalBusiness(context.Context, *ReqDigitalTransferUniversalBusiness) (*ReplyDigitalTransferUniversalBusiness, error)
	mustEmbedUnimplementedDigitalTransferServiceServer()
}

// UnimplementedDigitalTransferServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDigitalTransferServiceServer struct {
}

func (UnimplementedDigitalTransferServiceServer) DigitalTransferUniversalBusiness(context.Context, *ReqDigitalTransferUniversalBusiness) (*ReplyDigitalTransferUniversalBusiness, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DigitalTransferUniversalBusiness not implemented")
}
func (UnimplementedDigitalTransferServiceServer) mustEmbedUnimplementedDigitalTransferServiceServer() {
}

// UnsafeDigitalTransferServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DigitalTransferServiceServer will
// result in compilation errors.
type UnsafeDigitalTransferServiceServer interface {
	mustEmbedUnimplementedDigitalTransferServiceServer()
}

func RegisterDigitalTransferServiceServer(s grpc.ServiceRegistrar, srv DigitalTransferServiceServer) {
	s.RegisterService(&DigitalTransferService_ServiceDesc, srv)
}

func _DigitalTransferService_DigitalTransferUniversalBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDigitalTransferUniversalBusiness)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DigitalTransferServiceServer).DigitalTransferUniversalBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/digtranserver.DigitalTransferService/DigitalTransferUniversalBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DigitalTransferServiceServer).DigitalTransferUniversalBusiness(ctx, req.(*ReqDigitalTransferUniversalBusiness))
	}
	return interceptor(ctx, in, info, handler)
}

// DigitalTransferService_ServiceDesc is the grpc.ServiceDesc for DigitalTransferService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DigitalTransferService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "digtranserver.DigitalTransferService",
	HandlerType: (*DigitalTransferServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DigitalTransferUniversalBusiness",
			Handler:    _DigitalTransferService_DigitalTransferUniversalBusiness_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "digtranserver.proto",
}
