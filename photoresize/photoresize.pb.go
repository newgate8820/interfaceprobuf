// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/photoresize/photoresize.proto

/*
Package photocropping is a generated protocol buffer package.

It is generated from these files:

	gitlab.chatserver.im/interfaceprobuf/photoresize/photoresize.proto

It has these top-level messages:

	ResizeRequest
	ResizeReply
	PhotoSize
	ResizeMediaRequest
	ResizeMediaReply
*/
package photocropping

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ErrCode int32

const (
	ErrCode_OK          ErrCode = 0
	ErrCode_ResizeFail  ErrCode = 1
	ErrCode_NotModified ErrCode = 2
)

var ErrCode_name = map[int32]string{
	0: "OK",
	1: "ResizeFail",
	2: "NotModified",
}
var ErrCode_value = map[string]int32{
	"OK":          0,
	"ResizeFail":  1,
	"NotModified": 2,
}

func (x ErrCode) String() string {
	return proto.EnumName(ErrCode_name, int32(x))
}
func (ErrCode) EnumDescriptor() ([]byte, []int) { return fileDescriptorPhotoresize, []int{0} }

type ResizeRequest struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ResizeRequest) Reset()                    { *m = ResizeRequest{} }
func (m *ResizeRequest) String() string            { return proto.CompactTextString(m) }
func (*ResizeRequest) ProtoMessage()               {}
func (*ResizeRequest) Descriptor() ([]byte, []int) { return fileDescriptorPhotoresize, []int{0} }

func (m *ResizeRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type ResizeReply struct {
	Error  ErrCode      `protobuf:"varint,1,opt,name=error,proto3,enum=photocropping.ErrCode" json:"error,omitempty"`
	Msg    string       `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Photos []*PhotoSize `protobuf:"bytes,3,rep,name=photos" json:"photos,omitempty"`
	W      int32        `protobuf:"varint,4,opt,name=w,proto3" json:"w,omitempty"`
	H      int32        `protobuf:"varint,5,opt,name=h,proto3" json:"h,omitempty"`
}

func (m *ResizeReply) Reset()                    { *m = ResizeReply{} }
func (m *ResizeReply) String() string            { return proto.CompactTextString(m) }
func (*ResizeReply) ProtoMessage()               {}
func (*ResizeReply) Descriptor() ([]byte, []int) { return fileDescriptorPhotoresize, []int{1} }

func (m *ResizeReply) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return ErrCode_OK
}

func (m *ResizeReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *ResizeReply) GetPhotos() []*PhotoSize {
	if m != nil {
		return m.Photos
	}
	return nil
}

func (m *ResizeReply) GetW() int32 {
	if m != nil {
		return m.W
	}
	return 0
}

func (m *ResizeReply) GetH() int32 {
	if m != nil {
		return m.H
	}
	return 0
}

type PhotoSize struct {
	Type   string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Weight int32  `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	Height int32  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Data   []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *PhotoSize) Reset()                    { *m = PhotoSize{} }
func (m *PhotoSize) String() string            { return proto.CompactTextString(m) }
func (*PhotoSize) ProtoMessage()               {}
func (*PhotoSize) Descriptor() ([]byte, []int) { return fileDescriptorPhotoresize, []int{2} }

func (m *PhotoSize) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *PhotoSize) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *PhotoSize) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *PhotoSize) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type ResizeMediaRequest struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ResizeMediaRequest) Reset()                    { *m = ResizeMediaRequest{} }
func (m *ResizeMediaRequest) String() string            { return proto.CompactTextString(m) }
func (*ResizeMediaRequest) ProtoMessage()               {}
func (*ResizeMediaRequest) Descriptor() ([]byte, []int) { return fileDescriptorPhotoresize, []int{3} }

func (m *ResizeMediaRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type ResizeMediaReply struct {
	Error  ErrCode      `protobuf:"varint,1,opt,name=error,proto3,enum=photocropping.ErrCode" json:"error,omitempty"`
	Msg    string       `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Photos []*PhotoSize `protobuf:"bytes,3,rep,name=photos" json:"photos,omitempty"`
	W      int32        `protobuf:"varint,4,opt,name=w,proto3" json:"w,omitempty"`
	H      int32        `protobuf:"varint,5,opt,name=h,proto3" json:"h,omitempty"`
}

func (m *ResizeMediaReply) Reset()                    { *m = ResizeMediaReply{} }
func (m *ResizeMediaReply) String() string            { return proto.CompactTextString(m) }
func (*ResizeMediaReply) ProtoMessage()               {}
func (*ResizeMediaReply) Descriptor() ([]byte, []int) { return fileDescriptorPhotoresize, []int{4} }

func (m *ResizeMediaReply) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return ErrCode_OK
}

func (m *ResizeMediaReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *ResizeMediaReply) GetPhotos() []*PhotoSize {
	if m != nil {
		return m.Photos
	}
	return nil
}

func (m *ResizeMediaReply) GetW() int32 {
	if m != nil {
		return m.W
	}
	return 0
}

func (m *ResizeMediaReply) GetH() int32 {
	if m != nil {
		return m.H
	}
	return 0
}

func init() {
	proto.RegisterType((*ResizeRequest)(nil), "photocropping.ResizeRequest")
	proto.RegisterType((*ResizeReply)(nil), "photocropping.ResizeReply")
	proto.RegisterType((*PhotoSize)(nil), "photocropping.PhotoSize")
	proto.RegisterType((*ResizeMediaRequest)(nil), "photocropping.ResizeMediaRequest")
	proto.RegisterType((*ResizeMediaReply)(nil), "photocropping.ResizeMediaReply")
	proto.RegisterEnum("photocropping.ErrCode", ErrCode_name, ErrCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PhotoResize service

type PhotoResizeClient interface {
	// Resize
	Resize(ctx context.Context, in *ResizeRequest, opts ...grpc.CallOption) (*ResizeReply, error)
	// ResizeMedia
	ResizeMedia(ctx context.Context, in *ResizeMediaRequest, opts ...grpc.CallOption) (*ResizeMediaReply, error)
}

type photoResizeClient struct {
	cc *grpc.ClientConn
}

func NewPhotoResizeClient(cc *grpc.ClientConn) PhotoResizeClient {
	return &photoResizeClient{cc}
}

func (c *photoResizeClient) Resize(ctx context.Context, in *ResizeRequest, opts ...grpc.CallOption) (*ResizeReply, error) {
	out := new(ResizeReply)
	err := grpc.Invoke(ctx, "/photocropping.PhotoResize/Resize", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoResizeClient) ResizeMedia(ctx context.Context, in *ResizeMediaRequest, opts ...grpc.CallOption) (*ResizeMediaReply, error) {
	out := new(ResizeMediaReply)
	err := grpc.Invoke(ctx, "/photocropping.PhotoResize/ResizeMedia", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PhotoResize service

type PhotoResizeServer interface {
	// Resize
	Resize(context.Context, *ResizeRequest) (*ResizeReply, error)
	// ResizeMedia
	ResizeMedia(context.Context, *ResizeMediaRequest) (*ResizeMediaReply, error)
}

func RegisterPhotoResizeServer(s *grpc.Server, srv PhotoResizeServer) {
	s.RegisterService(&_PhotoResize_serviceDesc, srv)
}

func _PhotoResize_Resize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoResizeServer).Resize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photocropping.PhotoResize/Resize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoResizeServer).Resize(ctx, req.(*ResizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoResize_ResizeMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResizeMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoResizeServer).ResizeMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photocropping.PhotoResize/ResizeMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoResizeServer).ResizeMedia(ctx, req.(*ResizeMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PhotoResize_serviceDesc = grpc.ServiceDesc{
	ServiceName: "photocropping.PhotoResize",
	HandlerType: (*PhotoResizeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Resize",
			Handler:    _PhotoResize_Resize_Handler,
		},
		{
			MethodName: "ResizeMedia",
			Handler:    _PhotoResize_ResizeMedia_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/photoresize/photoresize.proto",
}

func (m *ResizeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResizeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPhotoresize(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *ResizeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResizeReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPhotoresize(dAtA, i, uint64(m.Error))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPhotoresize(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Photos) > 0 {
		for _, msg := range m.Photos {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintPhotoresize(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.W != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPhotoresize(dAtA, i, uint64(m.W))
	}
	if m.H != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPhotoresize(dAtA, i, uint64(m.H))
	}
	return i, nil
}

func (m *PhotoSize) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhotoSize) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPhotoresize(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Weight != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPhotoresize(dAtA, i, uint64(m.Weight))
	}
	if m.Height != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPhotoresize(dAtA, i, uint64(m.Height))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPhotoresize(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *ResizeMediaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResizeMediaRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPhotoresize(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *ResizeMediaReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResizeMediaReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPhotoresize(dAtA, i, uint64(m.Error))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPhotoresize(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Photos) > 0 {
		for _, msg := range m.Photos {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintPhotoresize(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.W != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPhotoresize(dAtA, i, uint64(m.W))
	}
	if m.H != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPhotoresize(dAtA, i, uint64(m.H))
	}
	return i, nil
}

func encodeVarintPhotoresize(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ResizeRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPhotoresize(uint64(l))
	}
	return n
}

func (m *ResizeReply) Size() (n int) {
	var l int
	_ = l
	if m.Error != 0 {
		n += 1 + sovPhotoresize(uint64(m.Error))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPhotoresize(uint64(l))
	}
	if len(m.Photos) > 0 {
		for _, e := range m.Photos {
			l = e.Size()
			n += 1 + l + sovPhotoresize(uint64(l))
		}
	}
	if m.W != 0 {
		n += 1 + sovPhotoresize(uint64(m.W))
	}
	if m.H != 0 {
		n += 1 + sovPhotoresize(uint64(m.H))
	}
	return n
}

func (m *PhotoSize) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovPhotoresize(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovPhotoresize(uint64(m.Weight))
	}
	if m.Height != 0 {
		n += 1 + sovPhotoresize(uint64(m.Height))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPhotoresize(uint64(l))
	}
	return n
}

func (m *ResizeMediaRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPhotoresize(uint64(l))
	}
	return n
}

func (m *ResizeMediaReply) Size() (n int) {
	var l int
	_ = l
	if m.Error != 0 {
		n += 1 + sovPhotoresize(uint64(m.Error))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPhotoresize(uint64(l))
	}
	if len(m.Photos) > 0 {
		for _, e := range m.Photos {
			l = e.Size()
			n += 1 + l + sovPhotoresize(uint64(l))
		}
	}
	if m.W != 0 {
		n += 1 + sovPhotoresize(uint64(m.W))
	}
	if m.H != 0 {
		n += 1 + sovPhotoresize(uint64(m.H))
	}
	return n
}

func sovPhotoresize(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPhotoresize(x uint64) (n int) {
	return sovPhotoresize(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ResizeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhotoresize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResizeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResizeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhotoresize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPhotoresize
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhotoresize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhotoresize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResizeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhotoresize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResizeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResizeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhotoresize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhotoresize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhotoresize
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhotoresize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhotoresize
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photos = append(m.Photos, &PhotoSize{})
			if err := m.Photos[len(m.Photos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field W", wireType)
			}
			m.W = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhotoresize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.W |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field H", wireType)
			}
			m.H = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhotoresize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.H |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPhotoresize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhotoresize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhotoSize) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhotoresize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhotoSize: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhotoSize: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhotoresize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhotoresize
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhotoresize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhotoresize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhotoresize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPhotoresize
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhotoresize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhotoresize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResizeMediaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhotoresize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResizeMediaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResizeMediaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhotoresize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPhotoresize
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhotoresize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhotoresize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResizeMediaReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhotoresize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResizeMediaReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResizeMediaReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhotoresize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhotoresize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhotoresize
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhotoresize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhotoresize
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photos = append(m.Photos, &PhotoSize{})
			if err := m.Photos[len(m.Photos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field W", wireType)
			}
			m.W = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhotoresize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.W |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field H", wireType)
			}
			m.H = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhotoresize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.H |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPhotoresize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhotoresize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPhotoresize(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPhotoresize
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPhotoresize
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPhotoresize
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPhotoresize
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPhotoresize
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPhotoresize(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPhotoresize = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPhotoresize   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/photoresize/photoresize.proto", fileDescriptorPhotoresize)
}

var fileDescriptorPhotoresize = []byte{
	// 389 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x52, 0x4f, 0xee, 0xd2, 0x40,
	0x18, 0x65, 0x28, 0xad, 0xe1, 0x2b, 0x60, 0x33, 0x0b, 0xd2, 0x10, 0x83, 0xb5, 0x6e, 0x1a, 0x63,
	0x8a, 0xa9, 0x37, 0xc0, 0x3f, 0x1b, 0x83, 0x9a, 0xe1, 0x04, 0xa5, 0x1d, 0xda, 0x49, 0x0a, 0x33,
	0x4e, 0x07, 0x09, 0x5e, 0xc5, 0x8d, 0x4b, 0x8f, 0xe2, 0xd2, 0x23, 0x18, 0x4e, 0x62, 0x3a, 0x53,
	0x08, 0x10, 0x65, 0xfd, 0xdb, 0xbd, 0xf7, 0xe6, 0xcd, 0xf7, 0xbd, 0xbc, 0x7c, 0x30, 0x2f, 0x98,
	0xaa, 0xd2, 0x55, 0x9c, 0x95, 0xa9, 0xaa, 0xa9, 0xfc, 0x4a, 0x65, 0xcc, 0x36, 0x33, 0xb6, 0x55,
	0x54, 0xae, 0xd3, 0x8c, 0x0a, 0xc9, 0x57, 0xbb, 0xf5, 0x4c, 0x94, 0x5c, 0x71, 0x49, 0x6b, 0xf6,
	0x8d, 0x5e, 0xe2, 0x58, 0x48, 0xae, 0x38, 0x1e, 0x6a, 0x29, 0x93, 0x5c, 0x08, 0xb6, 0x2d, 0xc2,
	0xe7, 0x30, 0x24, 0xfa, 0x99, 0xd0, 0x2f, 0x3b, 0x5a, 0x2b, 0x8c, 0xa1, 0x97, 0xa7, 0x2a, 0xf5,
	0x51, 0x80, 0xa2, 0x01, 0xd1, 0x38, 0xfc, 0x8e, 0xc0, 0x3d, 0xb9, 0x44, 0x75, 0xc0, 0x2f, 0xc1,
	0xa6, 0x52, 0x72, 0xa9, 0x4d, 0xa3, 0x64, 0x1c, 0x5f, 0xcd, 0x8c, 0xdf, 0x49, 0xf9, 0x86, 0xe7,
	0x94, 0x18, 0x13, 0xf6, 0xc0, 0xda, 0xd4, 0x85, 0xdf, 0x0d, 0x50, 0xd4, 0x27, 0x0d, 0xc4, 0xaf,
	0xc0, 0xd1, 0x3f, 0x6a, 0xdf, 0x0a, 0xac, 0xc8, 0x4d, 0xfc, 0x9b, 0x01, 0x9f, 0x1b, 0xb6, 0x6c,
	0xd6, 0xb5, 0x3e, 0x3c, 0x00, 0xb4, 0xf7, 0x7b, 0x01, 0x8a, 0x6c, 0x82, 0xf6, 0x0d, 0x2b, 0x7d,
	0xdb, 0xb0, 0x32, 0xcc, 0xa0, 0x7f, 0xfe, 0xd0, 0xc4, 0x57, 0x07, 0x41, 0x75, 0xb2, 0x3e, 0xd1,
	0x18, 0x8f, 0xc1, 0xd9, 0x53, 0x56, 0x94, 0x4a, 0x67, 0xb0, 0x49, 0xcb, 0x1a, 0xbd, 0x34, 0xba,
	0x65, 0x74, 0xc3, 0xce, 0x15, 0xf4, 0x2e, 0x2a, 0x88, 0x00, 0x9b, 0x06, 0x16, 0x34, 0x67, 0xe9,
	0xbd, 0xb2, 0x7e, 0x20, 0xf0, 0xae, 0xac, 0x0f, 0xae, 0xb1, 0x17, 0x09, 0x3c, 0x6a, 0x37, 0x62,
	0x07, 0xba, 0x9f, 0x3e, 0x78, 0x1d, 0x3c, 0x02, 0x30, 0xa1, 0xdf, 0xa7, 0xac, 0xf2, 0x10, 0x7e,
	0x0c, 0xee, 0x47, 0xae, 0x16, 0x3c, 0x67, 0x6b, 0x46, 0x73, 0xaf, 0x9b, 0xfc, 0x44, 0xe0, 0xea,
	0x2d, 0xc6, 0x86, 0xdf, 0x82, 0xd3, 0xa2, 0x27, 0x37, 0x59, 0xae, 0xee, 0x69, 0x32, 0xf9, 0xcf,
	0xab, 0xa8, 0x0e, 0x61, 0x07, 0x2f, 0x4f, 0x87, 0xa5, 0xbb, 0xc2, 0xcf, 0xfe, 0x69, 0xbe, 0xac,
	0x7c, 0xf2, 0xf4, 0x9e, 0x45, 0x0f, 0x9d, 0x0f, 0x7e, 0x1d, 0xa7, 0xe8, 0xf7, 0x71, 0x8a, 0xfe,
	0x1c, 0xa7, 0x68, 0xe5, 0xe8, 0xbb, 0x7f, 0xfd, 0x37, 0x00, 0x00, 0xff, 0xff, 0x5c, 0x58, 0xb9,
	0xb6, 0x3d, 0x03, 0x00, 0x00,
}
