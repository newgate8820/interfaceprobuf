// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: imauth.proto

package imauthserver

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	pbcomm "interfaceprobuf/pbcomm"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RobotSignUpReply_ResultCode int32

const (
	RobotSignUpReply_Success             RobotSignUpReply_ResultCode = 0
	RobotSignUpReply_InternalError       RobotSignUpReply_ResultCode = 1 // 服务器内部错误
	RobotSignUpReply_PhoneNumberInvalid  RobotSignUpReply_ResultCode = 2 // 无效的电话号码
	RobotSignUpReply_PhoneNumberOccupied RobotSignUpReply_ResultCode = 3 // 电话号码已注册
	RobotSignUpReply_CaptchaExpired      RobotSignUpReply_ResultCode = 4 // 验证码失效
	RobotSignUpReply_CaptchaInvalid      RobotSignUpReply_ResultCode = 5 // 验证码无效
	RobotSignUpReply_FloodWait           RobotSignUpReply_ResultCode = 6
	RobotSignUpReply_SignUpRobotBlocked  RobotSignUpReply_ResultCode = 7 // 机器人注册接口暂时关闭
)

// Enum value maps for RobotSignUpReply_ResultCode.
var (
	RobotSignUpReply_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
		2: "PhoneNumberInvalid",
		3: "PhoneNumberOccupied",
		4: "CaptchaExpired",
		5: "CaptchaInvalid",
		6: "FloodWait",
		7: "SignUpRobotBlocked",
	}
	RobotSignUpReply_ResultCode_value = map[string]int32{
		"Success":             0,
		"InternalError":       1,
		"PhoneNumberInvalid":  2,
		"PhoneNumberOccupied": 3,
		"CaptchaExpired":      4,
		"CaptchaInvalid":      5,
		"FloodWait":           6,
		"SignUpRobotBlocked":  7,
	}
)

func (x RobotSignUpReply_ResultCode) Enum() *RobotSignUpReply_ResultCode {
	p := new(RobotSignUpReply_ResultCode)
	*p = x
	return p
}

func (x RobotSignUpReply_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RobotSignUpReply_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imauth_proto_enumTypes[0].Descriptor()
}

func (RobotSignUpReply_ResultCode) Type() protoreflect.EnumType {
	return &file_imauth_proto_enumTypes[0]
}

func (x RobotSignUpReply_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RobotSignUpReply_ResultCode.Descriptor instead.
func (RobotSignUpReply_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_imauth_proto_rawDescGZIP(), []int{10, 0}
}

type UserPasswordReply_Code int32

const (
	UserPasswordReply_Success  UserPasswordReply_Code = 0
	UserPasswordReply_NotFound UserPasswordReply_Code = 1
)

// Enum value maps for UserPasswordReply_Code.
var (
	UserPasswordReply_Code_name = map[int32]string{
		0: "Success",
		1: "NotFound",
	}
	UserPasswordReply_Code_value = map[string]int32{
		"Success":  0,
		"NotFound": 1,
	}
)

func (x UserPasswordReply_Code) Enum() *UserPasswordReply_Code {
	p := new(UserPasswordReply_Code)
	*p = x
	return p
}

func (x UserPasswordReply_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserPasswordReply_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_imauth_proto_enumTypes[1].Descriptor()
}

func (UserPasswordReply_Code) Type() protoreflect.EnumType {
	return &file_imauth_proto_enumTypes[1]
}

func (x UserPasswordReply_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserPasswordReply_Code.Descriptor instead.
func (UserPasswordReply_Code) EnumDescriptor() ([]byte, []int) {
	return file_imauth_proto_rawDescGZIP(), []int{12, 0}
}

type AuthMTPReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RpcResult []byte      `protobuf:"bytes,1,opt,name=rpc_result,json=rpcResult,proto3" json:"rpc_result,omitempty"`
	Extra     *ExtraReply `protobuf:"bytes,2,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *AuthMTPReply) Reset() {
	*x = AuthMTPReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imauth_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthMTPReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthMTPReply) ProtoMessage() {}

func (x *AuthMTPReply) ProtoReflect() protoreflect.Message {
	mi := &file_imauth_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthMTPReply.ProtoReflect.Descriptor instead.
func (*AuthMTPReply) Descriptor() ([]byte, []int) {
	return file_imauth_proto_rawDescGZIP(), []int{0}
}

func (x *AuthMTPReply) GetRpcResult() []byte {
	if x != nil {
		return x.RpcResult
	}
	return nil
}

func (x *AuthMTPReply) GetExtra() *ExtraReply {
	if x != nil {
		return x.Extra
	}
	return nil
}

type Context struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuthKeyId    int64         `protobuf:"varint,2,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	ReqMessageId int64         `protobuf:"varint,3,opt,name=req_message_id,json=reqMessageId,proto3" json:"req_message_id,omitempty"`
	Layer        int64         `protobuf:"varint,4,opt,name=layer,proto3" json:"layer,omitempty"`
	Extra        *ExtraContext `protobuf:"bytes,5,opt,name=extra,proto3" json:"extra,omitempty"`
	Crc32        uint32        `protobuf:"varint,6,opt,name=crc32,proto3" json:"crc32,omitempty"`
}

func (x *Context) Reset() {
	*x = Context{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imauth_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Context) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Context) ProtoMessage() {}

func (x *Context) ProtoReflect() protoreflect.Message {
	mi := &file_imauth_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Context.ProtoReflect.Descriptor instead.
func (*Context) Descriptor() ([]byte, []int) {
	return file_imauth_proto_rawDescGZIP(), []int{1}
}

func (x *Context) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Context) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

func (x *Context) GetReqMessageId() int64 {
	if x != nil {
		return x.ReqMessageId
	}
	return 0
}

func (x *Context) GetLayer() int64 {
	if x != nil {
		return x.Layer
	}
	return 0
}

func (x *Context) GetExtra() *ExtraContext {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *Context) GetCrc32() uint32 {
	if x != nil {
		return x.Crc32
	}
	return 0
}

type AuthMTPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx           *Context      `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	MessageObjBin []byte        `protobuf:"bytes,2,opt,name=message_obj_bin,json=messageObjBin,proto3" json:"message_obj_bin,omitempty"`
	Debug         *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *AuthMTPRequest) Reset() {
	*x = AuthMTPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imauth_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthMTPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthMTPRequest) ProtoMessage() {}

func (x *AuthMTPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_imauth_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthMTPRequest.ProtoReflect.Descriptor instead.
func (*AuthMTPRequest) Descriptor() ([]byte, []int) {
	return file_imauth_proto_rawDescGZIP(), []int{2}
}

func (x *AuthMTPRequest) GetCtx() *Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *AuthMTPRequest) GetMessageObjBin() []byte {
	if x != nil {
		return x.MessageObjBin
	}
	return nil
}

func (x *AuthMTPRequest) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type AccountMTPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx           *Context      `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	MessageObjBin []byte        `protobuf:"bytes,2,opt,name=message_obj_bin,json=messageObjBin,proto3" json:"message_obj_bin,omitempty"`
	Debug         *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *AccountMTPRequest) Reset() {
	*x = AccountMTPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imauth_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountMTPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountMTPRequest) ProtoMessage() {}

func (x *AccountMTPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_imauth_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountMTPRequest.ProtoReflect.Descriptor instead.
func (*AccountMTPRequest) Descriptor() ([]byte, []int) {
	return file_imauth_proto_rawDescGZIP(), []int{3}
}

func (x *AccountMTPRequest) GetCtx() *Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *AccountMTPRequest) GetMessageObjBin() []byte {
	if x != nil {
		return x.MessageObjBin
	}
	return nil
}

func (x *AccountMTPRequest) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type AccountMTPReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RpcResult []byte `protobuf:"bytes,1,opt,name=rpc_result,json=rpcResult,proto3" json:"rpc_result,omitempty"`
}

func (x *AccountMTPReply) Reset() {
	*x = AccountMTPReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imauth_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountMTPReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountMTPReply) ProtoMessage() {}

func (x *AccountMTPReply) ProtoReflect() protoreflect.Message {
	mi := &file_imauth_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountMTPReply.ProtoReflect.Descriptor instead.
func (*AccountMTPReply) Descriptor() ([]byte, []int) {
	return file_imauth_proto_rawDescGZIP(), []int{4}
}

func (x *AccountMTPReply) GetRpcResult() []byte {
	if x != nil {
		return x.RpcResult
	}
	return nil
}

type PasswordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	KeyId       int64  `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Flags       int32  `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"`
	CurrPwdHash []byte `protobuf:"bytes,4,opt,name=curr_pwd_hash,json=currPwdHash,proto3" json:"curr_pwd_hash,omitempty"`
	NewPwdHash  []byte `protobuf:"bytes,5,opt,name=new_pwd_hash,json=newPwdHash,proto3" json:"new_pwd_hash,omitempty"`
	Salt        []byte `protobuf:"bytes,6,opt,name=salt,proto3" json:"salt,omitempty"`
	Hint        string `protobuf:"bytes,7,opt,name=hint,proto3" json:"hint,omitempty"`
	Email       string `protobuf:"bytes,8,opt,name=email,proto3" json:"email,omitempty"`
	ReqType     int32  `protobuf:"varint,9,opt,name=req_type,json=reqType,proto3" json:"req_type,omitempty"`
}

func (x *PasswordReq) Reset() {
	*x = PasswordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imauth_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordReq) ProtoMessage() {}

func (x *PasswordReq) ProtoReflect() protoreflect.Message {
	mi := &file_imauth_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordReq.ProtoReflect.Descriptor instead.
func (*PasswordReq) Descriptor() ([]byte, []int) {
	return file_imauth_proto_rawDescGZIP(), []int{5}
}

func (x *PasswordReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PasswordReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *PasswordReq) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *PasswordReq) GetCurrPwdHash() []byte {
	if x != nil {
		return x.CurrPwdHash
	}
	return nil
}

func (x *PasswordReq) GetNewPwdHash() []byte {
	if x != nil {
		return x.NewPwdHash
	}
	return nil
}

func (x *PasswordReq) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *PasswordReq) GetHint() string {
	if x != nil {
		return x.Hint
	}
	return ""
}

func (x *PasswordReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *PasswordReq) GetReqType() int32 {
	if x != nil {
		return x.ReqType
	}
	return 0
}

type VirtualPhoneNumberInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VirtualPhone     string `protobuf:"bytes,1,opt,name=virtual_phone,json=virtualPhone,proto3" json:"virtual_phone,omitempty"`
	RealPhone        string `protobuf:"bytes,2,opt,name=real_phone,json=realPhone,proto3" json:"real_phone,omitempty"`
	Activated        uint32 `protobuf:"varint,3,opt,name=activated,proto3" json:"activated,omitempty"`
	BindTime         int64  `protobuf:"varint,4,opt,name=bind_time,json=bindTime,proto3" json:"bind_time,omitempty"`
	ActivateTime     int64  `protobuf:"varint,5,opt,name=activate_time,json=activateTime,proto3" json:"activate_time,omitempty"`
	ActivateAdminId  int32  `protobuf:"varint,6,opt,name=activate_admin_id,json=activateAdminId,proto3" json:"activate_admin_id,omitempty"`
	BindAdminId      int32  `protobuf:"varint,7,opt,name=bind_admin_id,json=bindAdminId,proto3" json:"bind_admin_id,omitempty"`
	OwnerId          int32  `protobuf:"varint,8,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	InitialPhoneCode string `protobuf:"bytes,9,opt,name=initial_phone_code,json=initialPhoneCode,proto3" json:"initial_phone_code,omitempty"`
}

func (x *VirtualPhoneNumberInfo) Reset() {
	*x = VirtualPhoneNumberInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imauth_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualPhoneNumberInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualPhoneNumberInfo) ProtoMessage() {}

func (x *VirtualPhoneNumberInfo) ProtoReflect() protoreflect.Message {
	mi := &file_imauth_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualPhoneNumberInfo.ProtoReflect.Descriptor instead.
func (*VirtualPhoneNumberInfo) Descriptor() ([]byte, []int) {
	return file_imauth_proto_rawDescGZIP(), []int{6}
}

func (x *VirtualPhoneNumberInfo) GetVirtualPhone() string {
	if x != nil {
		return x.VirtualPhone
	}
	return ""
}

func (x *VirtualPhoneNumberInfo) GetRealPhone() string {
	if x != nil {
		return x.RealPhone
	}
	return ""
}

func (x *VirtualPhoneNumberInfo) GetActivated() uint32 {
	if x != nil {
		return x.Activated
	}
	return 0
}

func (x *VirtualPhoneNumberInfo) GetBindTime() int64 {
	if x != nil {
		return x.BindTime
	}
	return 0
}

func (x *VirtualPhoneNumberInfo) GetActivateTime() int64 {
	if x != nil {
		return x.ActivateTime
	}
	return 0
}

func (x *VirtualPhoneNumberInfo) GetActivateAdminId() int32 {
	if x != nil {
		return x.ActivateAdminId
	}
	return 0
}

func (x *VirtualPhoneNumberInfo) GetBindAdminId() int32 {
	if x != nil {
		return x.BindAdminId
	}
	return 0
}

func (x *VirtualPhoneNumberInfo) GetOwnerId() int32 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *VirtualPhoneNumberInfo) GetInitialPhoneCode() string {
	if x != nil {
		return x.InitialPhoneCode
	}
	return ""
}

type ExtraContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceModel   string `protobuf:"bytes,1,opt,name=device_model,json=deviceModel,proto3" json:"device_model,omitempty"`
	ClientAddress string `protobuf:"bytes,2,opt,name=client_address,json=clientAddress,proto3" json:"client_address,omitempty"`
}

func (x *ExtraContext) Reset() {
	*x = ExtraContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imauth_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtraContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraContext) ProtoMessage() {}

func (x *ExtraContext) ProtoReflect() protoreflect.Message {
	mi := &file_imauth_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraContext.ProtoReflect.Descriptor instead.
func (*ExtraContext) Descriptor() ([]byte, []int) {
	return file_imauth_proto_rawDescGZIP(), []int{7}
}

func (x *ExtraContext) GetDeviceModel() string {
	if x != nil {
		return x.DeviceModel
	}
	return ""
}

func (x *ExtraContext) GetClientAddress() string {
	if x != nil {
		return x.ClientAddress
	}
	return ""
}

type ExtraReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SigninOk                  bool   `protobuf:"varint,1,opt,name=signin_ok,json=signinOk,proto3" json:"signin_ok,omitempty"`
	UserId                    int32  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PhoneNumber               string `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	GroupId                   int32  `protobuf:"varint,4,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	PasswordNeeded            bool   `protobuf:"varint,5,opt,name=password_needed,json=passwordNeeded,proto3" json:"password_needed,omitempty"`
	LogOutOk                  bool   `protobuf:"varint,6,opt,name=log_out_ok,json=logOutOk,proto3" json:"log_out_ok,omitempty"`
	RequestPasswordRecoveryOk bool   `protobuf:"varint,7,opt,name=request_password_recovery_ok,json=requestPasswordRecoveryOk,proto3" json:"request_password_recovery_ok,omitempty"`
}

func (x *ExtraReply) Reset() {
	*x = ExtraReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imauth_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtraReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraReply) ProtoMessage() {}

func (x *ExtraReply) ProtoReflect() protoreflect.Message {
	mi := &file_imauth_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraReply.ProtoReflect.Descriptor instead.
func (*ExtraReply) Descriptor() ([]byte, []int) {
	return file_imauth_proto_rawDescGZIP(), []int{8}
}

func (x *ExtraReply) GetSigninOk() bool {
	if x != nil {
		return x.SigninOk
	}
	return false
}

func (x *ExtraReply) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ExtraReply) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *ExtraReply) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ExtraReply) GetPasswordNeeded() bool {
	if x != nil {
		return x.PasswordNeeded
	}
	return false
}

func (x *ExtraReply) GetLogOutOk() bool {
	if x != nil {
		return x.LogOutOk
	}
	return false
}

func (x *ExtraReply) GetRequestPasswordRecoveryOk() bool {
	if x != nil {
		return x.RequestPasswordRecoveryOk
	}
	return false
}

type RobotSignUpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneNumber    string        `protobuf:"bytes,1,opt,name=PhoneNumber,proto3" json:"PhoneNumber,omitempty"` //电话号码
	PhoneCodeHash  string        `protobuf:"bytes,2,opt,name=PhoneCodeHash,proto3" json:"PhoneCodeHash,omitempty"`
	PhoneCode      string        `protobuf:"bytes,3,opt,name=PhoneCode,proto3" json:"PhoneCode,omitempty"` //验证码
	KeyId          int64         `protobuf:"varint,5,opt,name=keyId,proto3" json:"keyId,omitempty"`        //用户的keyId(端的标识)
	FirstName      string        `protobuf:"bytes,6,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	LastName       string        `protobuf:"bytes,7,opt,name=LastName,proto3" json:"LastName,omitempty"`
	IsBot          bool          `protobuf:"varint,8,opt,name=is_bot,json=isBot,proto3" json:"is_bot,omitempty"`
	BotInfoVersion int32         `protobuf:"varint,9,opt,name=bot_info_version,json=botInfoVersion,proto3" json:"bot_info_version,omitempty"`
	BotChatHistory bool          `protobuf:"varint,10,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNoChats     bool          `protobuf:"varint,11,opt,name=bot_no_chats,json=botNoChats,proto3" json:"bot_no_chats,omitempty"`
	DcId           int32         `protobuf:"varint,12,opt,name=dc_id,json=dcId,proto3" json:"dc_id,omitempty"`
	Debug          *pbcomm.Debug `protobuf:"bytes,13,opt,name=debug,proto3" json:"debug,omitempty"`
	CountryCode    string        `protobuf:"bytes,14,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"` // 国家码
	LocalPhone     string        `protobuf:"bytes,15,opt,name=local_phone,json=localPhone,proto3" json:"local_phone,omitempty"`    // 不带国家码的号码
}

func (x *RobotSignUpRequest) Reset() {
	*x = RobotSignUpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imauth_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotSignUpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotSignUpRequest) ProtoMessage() {}

func (x *RobotSignUpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_imauth_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotSignUpRequest.ProtoReflect.Descriptor instead.
func (*RobotSignUpRequest) Descriptor() ([]byte, []int) {
	return file_imauth_proto_rawDescGZIP(), []int{9}
}

func (x *RobotSignUpRequest) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *RobotSignUpRequest) GetPhoneCodeHash() string {
	if x != nil {
		return x.PhoneCodeHash
	}
	return ""
}

func (x *RobotSignUpRequest) GetPhoneCode() string {
	if x != nil {
		return x.PhoneCode
	}
	return ""
}

func (x *RobotSignUpRequest) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *RobotSignUpRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *RobotSignUpRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *RobotSignUpRequest) GetIsBot() bool {
	if x != nil {
		return x.IsBot
	}
	return false
}

func (x *RobotSignUpRequest) GetBotInfoVersion() int32 {
	if x != nil {
		return x.BotInfoVersion
	}
	return 0
}

func (x *RobotSignUpRequest) GetBotChatHistory() bool {
	if x != nil {
		return x.BotChatHistory
	}
	return false
}

func (x *RobotSignUpRequest) GetBotNoChats() bool {
	if x != nil {
		return x.BotNoChats
	}
	return false
}

func (x *RobotSignUpRequest) GetDcId() int32 {
	if x != nil {
		return x.DcId
	}
	return 0
}

func (x *RobotSignUpRequest) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *RobotSignUpRequest) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *RobotSignUpRequest) GetLocalPhone() string {
	if x != nil {
		return x.LocalPhone
	}
	return ""
}

type RobotSignUpReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     RobotSignUpReply_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=imauthserver.RobotSignUpReply_ResultCode" json:"code,omitempty"`
	UserInfo []byte                      `protobuf:"bytes,2,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"` // pbimuinfoserver.userInfo结构 protobuf序列化数据
}

func (x *RobotSignUpReply) Reset() {
	*x = RobotSignUpReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imauth_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotSignUpReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotSignUpReply) ProtoMessage() {}

func (x *RobotSignUpReply) ProtoReflect() protoreflect.Message {
	mi := &file_imauth_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotSignUpReply.ProtoReflect.Descriptor instead.
func (*RobotSignUpReply) Descriptor() ([]byte, []int) {
	return file_imauth_proto_rawDescGZIP(), []int{10}
}

func (x *RobotSignUpReply) GetCode() RobotSignUpReply_ResultCode {
	if x != nil {
		return x.Code
	}
	return RobotSignUpReply_Success
}

func (x *RobotSignUpReply) GetUserInfo() []byte {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

type UserPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *UserPasswordRequest) Reset() {
	*x = UserPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imauth_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPasswordRequest) ProtoMessage() {}

func (x *UserPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_imauth_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPasswordRequest.ProtoReflect.Descriptor instead.
func (*UserPasswordRequest) Descriptor() ([]byte, []int) {
	return file_imauth_proto_rawDescGZIP(), []int{11}
}

func (x *UserPasswordRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type UserPasswordReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PasswordHash []byte                 `protobuf:"bytes,1,opt,name=password_hash,json=passwordHash,proto3" json:"password_hash,omitempty"`
	Hint         string                 `protobuf:"bytes,2,opt,name=hint,proto3" json:"hint,omitempty"`
	Email        string                 `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Status       int32                  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	Code         UserPasswordReply_Code `protobuf:"varint,5,opt,name=code,proto3,enum=imauthserver.UserPasswordReply_Code" json:"code,omitempty"`
}

func (x *UserPasswordReply) Reset() {
	*x = UserPasswordReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imauth_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPasswordReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPasswordReply) ProtoMessage() {}

func (x *UserPasswordReply) ProtoReflect() protoreflect.Message {
	mi := &file_imauth_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPasswordReply.ProtoReflect.Descriptor instead.
func (*UserPasswordReply) Descriptor() ([]byte, []int) {
	return file_imauth_proto_rawDescGZIP(), []int{12}
}

func (x *UserPasswordReply) GetPasswordHash() []byte {
	if x != nil {
		return x.PasswordHash
	}
	return nil
}

func (x *UserPasswordReply) GetHint() string {
	if x != nil {
		return x.Hint
	}
	return ""
}

func (x *UserPasswordReply) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserPasswordReply) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserPasswordReply) GetCode() UserPasswordReply_Code {
	if x != nil {
		return x.Code
	}
	return UserPasswordReply_Success
}

var File_imauth_proto protoreflect.FileDescriptor

var file_imauth_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c,
	0x69, 0x6d, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x13, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2f, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x5d, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x54, 0x50, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x70, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x2e, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x69, 0x6d, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x22, 0xc6, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68,
	0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72,
	0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x69, 0x6d, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x72, 0x63, 0x33, 0x32, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x63, 0x72, 0x63, 0x33, 0x32, 0x22, 0x86, 0x01, 0x0a, 0x0e, 0x41, 0x75,
	0x74, 0x68, 0x4d, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x03,
	0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x61, 0x75,
	0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x6f, 0x62, 0x6a, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x42, 0x69, 0x6e, 0x12, 0x23, 0x0a,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x22, 0x89, 0x01, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x54,
	0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74,
	0x78, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x62, 0x6a,
	0x5f, 0x62, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x42, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x30,
	0x0a, 0x0f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x54, 0x50, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x70, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0xf2, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x5f, 0x70,
	0x77, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63,
	0x75, 0x72, 0x72, 0x50, 0x77, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65,
	0x77, 0x5f, 0x70, 0x77, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x6e, 0x65, 0x77, 0x50, 0x77, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x61, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65,
	0x71, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65,
	0x71, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd5, 0x02, 0x0a, 0x16, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x23, 0x0a, 0x0d, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0d, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x69, 0x6e, 0x64, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x58, 0x0a,
	0x0c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x88, 0x02, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x5f, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x4f, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4e, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6f,
	0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4f, 0x75, 0x74, 0x4f,
	0x6b, 0x12, 0x3f, 0x0a, 0x1c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6f,
	0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x4f, 0x6b, 0x22, 0xd5, 0x03, 0x0a, 0x12, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x55, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x69, 0x73, 0x42, 0x6f, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x62, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x43,
	0x68, 0x61, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x6f,
	0x74, 0x5f, 0x6e, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x62, 0x6f, 0x74, 0x4e, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x13, 0x0a, 0x05,
	0x64, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x63, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0x9d, 0x02, 0x0a, 0x10, 0x52,
	0x6f, 0x62, 0x6f, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x3d, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x69, 0x6d, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x62,
	0x6f, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xac, 0x01, 0x0a, 0x0a,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x43,
	0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x04, 0x12,
	0x12, 0x0a, 0x0e, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x57, 0x61, 0x69, 0x74,
	0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x52, 0x6f, 0x62, 0x6f,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x07, 0x22, 0x2e, 0x0a, 0x13, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xd7, 0x01, 0x0a, 0x11, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x69, 0x6d, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x21, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75,
	0x6e, 0x64, 0x10, 0x01, 0x32, 0xde, 0x0a, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0x1c, 0x2e, 0x69, 0x6d, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x69, 0x6d, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x4d, 0x54, 0x50, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x44, 0x0a, 0x08, 0x53,
	0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x2e, 0x69, 0x6d, 0x61, 0x75, 0x74, 0x68,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x54, 0x50, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x69, 0x6d, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x54, 0x50, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x42, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x12, 0x1c, 0x2e, 0x69, 0x6d,
	0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4d,
	0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x69, 0x6d, 0x61, 0x75,
	0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x54, 0x50,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x42, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x12,
	0x1c, 0x2e, 0x69, 0x6d, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x4d, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x69, 0x6d, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x4d, 0x54, 0x50, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x42, 0x0a, 0x06, 0x4c, 0x6f, 0x67,
	0x4f, 0x75, 0x74, 0x12, 0x1c, 0x2e, 0x69, 0x6d, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x69, 0x6d, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x54, 0x50, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4f, 0x0a,
	0x13, 0x52, 0x65, 0x73, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x2e, 0x69, 0x6d, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x69, 0x6d, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x54, 0x50, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x47,
	0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x2e,
	0x69, 0x6d, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x4d, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x69, 0x6d,
	0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4d,
	0x54, 0x50, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4f, 0x0a, 0x13, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x2e, 0x69, 0x6d, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x4d, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x69,
	0x6d, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x4d, 0x54, 0x50, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4f, 0x0a, 0x13, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x2e, 0x69, 0x6d, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x4d, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x69, 0x6d, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x4d, 0x54, 0x50, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4b, 0x0a, 0x0f, 0x42, 0x69, 0x6e,
	0x64, 0x54, 0x65, 0x6d, 0x70, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x2e, 0x69,
	0x6d, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x4d, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x69, 0x6d, 0x61,
	0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x54,
	0x50, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x52, 0x0a, 0x16, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x42, 0x6f, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x2e, 0x69, 0x6d, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x4d, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x69, 0x6d, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x4d, 0x54, 0x50, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x49, 0x0a, 0x0d, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x2e, 0x69, 0x6d,
	0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4d,
	0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x69, 0x6d, 0x61, 0x75,
	0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x54, 0x50,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x53, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x12, 0x1c, 0x2e, 0x69, 0x6d, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x4d, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x69, 0x6d, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x4d, 0x54, 0x50, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4b, 0x0a, 0x0f, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x2e,
	0x69, 0x6d, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x4d, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x69, 0x6d,
	0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4d,
	0x54, 0x50, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x46, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x65, 0x6e,
	0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x2e, 0x69, 0x6d, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x69, 0x6d, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x54, 0x50, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x46, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x2e,
	0x69, 0x6d, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x4d, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x69, 0x6d,
	0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4d,
	0x54, 0x50, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4b, 0x0a, 0x0f, 0x44, 0x72, 0x6f, 0x70, 0x54,
	0x65, 0x6d, 0x70, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x2e, 0x69, 0x6d, 0x61,
	0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x54,
	0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x69, 0x6d, 0x61, 0x75, 0x74,
	0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x54, 0x50, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x4f, 0x0a, 0x0b, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x55, 0x70, 0x12, 0x20, 0x2e, 0x69, 0x6d, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x69, 0x6d, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x32, 0xd3, 0x05, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x2e, 0x69, 0x6d, 0x61, 0x75, 0x74, 0x68, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x54, 0x50,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x69, 0x6d, 0x61, 0x75, 0x74, 0x68,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x54,
	0x50, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x55, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1f, 0x2e,
	0x69, 0x6d, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x69, 0x6d, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x54, 0x50, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x58, 0x0a,
	0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1f, 0x2e, 0x69, 0x6d, 0x61, 0x75, 0x74, 0x68,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x54,
	0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x69, 0x6d, 0x61, 0x75, 0x74,
	0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d,
	0x54, 0x50, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x60, 0x0a, 0x1e, 0x53, 0x65, 0x6e, 0x64, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x2e, 0x69, 0x6d, 0x61, 0x75,
	0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4d, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x69, 0x6d, 0x61,
	0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4d, 0x54, 0x50, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x61, 0x0a, 0x1f, 0x50, 0x54, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1f, 0x2e, 0x69,
	0x6d, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4d, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x69, 0x6d, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x54, 0x50, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x54, 0x0a, 0x12,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x72, 0x6f, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x69, 0x6d, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x69, 0x6d, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x54, 0x50, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x53, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x2e, 0x69, 0x6d, 0x61, 0x75, 0x74, 0x68,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x54,
	0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x69, 0x6d, 0x61, 0x75, 0x74,
	0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d,
	0x54, 0x50, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x52, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x2e, 0x69, 0x6d, 0x61, 0x75, 0x74, 0x68,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x69, 0x6d, 0x61,
	0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x1e, 0x5a, 0x1c, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x69,
	0x6d, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_imauth_proto_rawDescOnce sync.Once
	file_imauth_proto_rawDescData = file_imauth_proto_rawDesc
)

func file_imauth_proto_rawDescGZIP() []byte {
	file_imauth_proto_rawDescOnce.Do(func() {
		file_imauth_proto_rawDescData = protoimpl.X.CompressGZIP(file_imauth_proto_rawDescData)
	})
	return file_imauth_proto_rawDescData
}

var file_imauth_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_imauth_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_imauth_proto_goTypes = []interface{}{
	(RobotSignUpReply_ResultCode)(0), // 0: imauthserver.RobotSignUpReply.ResultCode
	(UserPasswordReply_Code)(0),      // 1: imauthserver.UserPasswordReply.Code
	(*AuthMTPReply)(nil),             // 2: imauthserver.AuthMTPReply
	(*Context)(nil),                  // 3: imauthserver.Context
	(*AuthMTPRequest)(nil),           // 4: imauthserver.AuthMTPRequest
	(*AccountMTPRequest)(nil),        // 5: imauthserver.AccountMTPRequest
	(*AccountMTPReply)(nil),          // 6: imauthserver.AccountMTPReply
	(*PasswordReq)(nil),              // 7: imauthserver.PasswordReq
	(*VirtualPhoneNumberInfo)(nil),   // 8: imauthserver.VirtualPhoneNumberInfo
	(*ExtraContext)(nil),             // 9: imauthserver.ExtraContext
	(*ExtraReply)(nil),               // 10: imauthserver.ExtraReply
	(*RobotSignUpRequest)(nil),       // 11: imauthserver.RobotSignUpRequest
	(*RobotSignUpReply)(nil),         // 12: imauthserver.RobotSignUpReply
	(*UserPasswordRequest)(nil),      // 13: imauthserver.UserPasswordRequest
	(*UserPasswordReply)(nil),        // 14: imauthserver.UserPasswordReply
	(*pbcomm.Debug)(nil),             // 15: pbcomm.Debug
}
var file_imauth_proto_depIdxs = []int32{
	10, // 0: imauthserver.AuthMTPReply.extra:type_name -> imauthserver.ExtraReply
	9,  // 1: imauthserver.Context.extra:type_name -> imauthserver.ExtraContext
	3,  // 2: imauthserver.AuthMTPRequest.ctx:type_name -> imauthserver.Context
	15, // 3: imauthserver.AuthMTPRequest.debug:type_name -> pbcomm.Debug
	3,  // 4: imauthserver.AccountMTPRequest.ctx:type_name -> imauthserver.Context
	15, // 5: imauthserver.AccountMTPRequest.debug:type_name -> pbcomm.Debug
	15, // 6: imauthserver.RobotSignUpRequest.debug:type_name -> pbcomm.Debug
	0,  // 7: imauthserver.RobotSignUpReply.code:type_name -> imauthserver.RobotSignUpReply.ResultCode
	1,  // 8: imauthserver.UserPasswordReply.code:type_name -> imauthserver.UserPasswordReply.Code
	4,  // 9: imauthserver.AuthServer.CheckPhone:input_type -> imauthserver.AuthMTPRequest
	4,  // 10: imauthserver.AuthServer.SendCode:input_type -> imauthserver.AuthMTPRequest
	4,  // 11: imauthserver.AuthServer.SignUp:input_type -> imauthserver.AuthMTPRequest
	4,  // 12: imauthserver.AuthServer.SignIn:input_type -> imauthserver.AuthMTPRequest
	4,  // 13: imauthserver.AuthServer.LogOut:input_type -> imauthserver.AuthMTPRequest
	4,  // 14: imauthserver.AuthServer.ResetAuthorizations:input_type -> imauthserver.AuthMTPRequest
	4,  // 15: imauthserver.AuthServer.SendInvites:input_type -> imauthserver.AuthMTPRequest
	4,  // 16: imauthserver.AuthServer.ExportAuthorization:input_type -> imauthserver.AuthMTPRequest
	4,  // 17: imauthserver.AuthServer.ImportAuthorization:input_type -> imauthserver.AuthMTPRequest
	4,  // 18: imauthserver.AuthServer.BindTempAuthKey:input_type -> imauthserver.AuthMTPRequest
	4,  // 19: imauthserver.AuthServer.ImportBotAuthorization:input_type -> imauthserver.AuthMTPRequest
	4,  // 20: imauthserver.AuthServer.CheckPassword:input_type -> imauthserver.AuthMTPRequest
	4,  // 21: imauthserver.AuthServer.RequestPasswordRecovery:input_type -> imauthserver.AuthMTPRequest
	4,  // 22: imauthserver.AuthServer.RecoverPassword:input_type -> imauthserver.AuthMTPRequest
	4,  // 23: imauthserver.AuthServer.ResendCode:input_type -> imauthserver.AuthMTPRequest
	4,  // 24: imauthserver.AuthServer.CancelCode:input_type -> imauthserver.AuthMTPRequest
	4,  // 25: imauthserver.AuthServer.DropTempAuthKey:input_type -> imauthserver.AuthMTPRequest
	11, // 26: imauthserver.AuthServer.RobotSignUp:input_type -> imauthserver.RobotSignUpRequest
	5,  // 27: imauthserver.AccountServer.GetPassword:input_type -> imauthserver.AccountMTPRequest
	5,  // 28: imauthserver.AccountServer.GetPasswordSettings:input_type -> imauthserver.AccountMTPRequest
	5,  // 29: imauthserver.AccountServer.UpdatePasswordSettings:input_type -> imauthserver.AccountMTPRequest
	5,  // 30: imauthserver.AccountServer.SendUpdatePasswordSettingsCode:input_type -> imauthserver.AccountMTPRequest
	5,  // 31: imauthserver.AccountServer.PTAccountUpdatePasswordSettings:input_type -> imauthserver.AccountMTPRequest
	5,  // 32: imauthserver.AccountServer.ResetAuthroization:input_type -> imauthserver.AccountMTPRequest
	5,  // 33: imauthserver.AccountServer.GetAuthorizations:input_type -> imauthserver.AccountMTPRequest
	13, // 34: imauthserver.AccountServer.UserPassword:input_type -> imauthserver.UserPasswordRequest
	2,  // 35: imauthserver.AuthServer.CheckPhone:output_type -> imauthserver.AuthMTPReply
	2,  // 36: imauthserver.AuthServer.SendCode:output_type -> imauthserver.AuthMTPReply
	2,  // 37: imauthserver.AuthServer.SignUp:output_type -> imauthserver.AuthMTPReply
	2,  // 38: imauthserver.AuthServer.SignIn:output_type -> imauthserver.AuthMTPReply
	2,  // 39: imauthserver.AuthServer.LogOut:output_type -> imauthserver.AuthMTPReply
	2,  // 40: imauthserver.AuthServer.ResetAuthorizations:output_type -> imauthserver.AuthMTPReply
	2,  // 41: imauthserver.AuthServer.SendInvites:output_type -> imauthserver.AuthMTPReply
	2,  // 42: imauthserver.AuthServer.ExportAuthorization:output_type -> imauthserver.AuthMTPReply
	2,  // 43: imauthserver.AuthServer.ImportAuthorization:output_type -> imauthserver.AuthMTPReply
	2,  // 44: imauthserver.AuthServer.BindTempAuthKey:output_type -> imauthserver.AuthMTPReply
	2,  // 45: imauthserver.AuthServer.ImportBotAuthorization:output_type -> imauthserver.AuthMTPReply
	2,  // 46: imauthserver.AuthServer.CheckPassword:output_type -> imauthserver.AuthMTPReply
	2,  // 47: imauthserver.AuthServer.RequestPasswordRecovery:output_type -> imauthserver.AuthMTPReply
	2,  // 48: imauthserver.AuthServer.RecoverPassword:output_type -> imauthserver.AuthMTPReply
	2,  // 49: imauthserver.AuthServer.ResendCode:output_type -> imauthserver.AuthMTPReply
	2,  // 50: imauthserver.AuthServer.CancelCode:output_type -> imauthserver.AuthMTPReply
	2,  // 51: imauthserver.AuthServer.DropTempAuthKey:output_type -> imauthserver.AuthMTPReply
	12, // 52: imauthserver.AuthServer.RobotSignUp:output_type -> imauthserver.RobotSignUpReply
	6,  // 53: imauthserver.AccountServer.GetPassword:output_type -> imauthserver.AccountMTPReply
	6,  // 54: imauthserver.AccountServer.GetPasswordSettings:output_type -> imauthserver.AccountMTPReply
	6,  // 55: imauthserver.AccountServer.UpdatePasswordSettings:output_type -> imauthserver.AccountMTPReply
	6,  // 56: imauthserver.AccountServer.SendUpdatePasswordSettingsCode:output_type -> imauthserver.AccountMTPReply
	6,  // 57: imauthserver.AccountServer.PTAccountUpdatePasswordSettings:output_type -> imauthserver.AccountMTPReply
	6,  // 58: imauthserver.AccountServer.ResetAuthroization:output_type -> imauthserver.AccountMTPReply
	6,  // 59: imauthserver.AccountServer.GetAuthorizations:output_type -> imauthserver.AccountMTPReply
	14, // 60: imauthserver.AccountServer.UserPassword:output_type -> imauthserver.UserPasswordReply
	35, // [35:61] is the sub-list for method output_type
	9,  // [9:35] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_imauth_proto_init() }
func file_imauth_proto_init() {
	if File_imauth_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_imauth_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthMTPReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imauth_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Context); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imauth_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthMTPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imauth_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountMTPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imauth_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountMTPReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imauth_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imauth_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualPhoneNumberInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imauth_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtraContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imauth_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtraReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imauth_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RobotSignUpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imauth_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RobotSignUpReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imauth_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imauth_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPasswordReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_imauth_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_imauth_proto_goTypes,
		DependencyIndexes: file_imauth_proto_depIdxs,
		EnumInfos:         file_imauth_proto_enumTypes,
		MessageInfos:      file_imauth_proto_msgTypes,
	}.Build()
	File_imauth_proto = out.File
	file_imauth_proto_rawDesc = nil
	file_imauth_proto_goTypes = nil
	file_imauth_proto_depIdxs = nil
}
