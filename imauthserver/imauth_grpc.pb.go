// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: imauth.proto

package imauthserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthServerClient is the client API for AuthServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServerClient interface {
	CheckPhone(ctx context.Context, in *AuthMTPRequest, opts ...grpc.CallOption) (*AuthMTPReply, error)
	SendCode(ctx context.Context, in *AuthMTPRequest, opts ...grpc.CallOption) (*AuthMTPReply, error)
	SignUp(ctx context.Context, in *AuthMTPRequest, opts ...grpc.CallOption) (*AuthMTPReply, error)
	SignIn(ctx context.Context, in *AuthMTPRequest, opts ...grpc.CallOption) (*AuthMTPReply, error)
	LogOut(ctx context.Context, in *AuthMTPRequest, opts ...grpc.CallOption) (*AuthMTPReply, error)
	ResetAuthorizations(ctx context.Context, in *AuthMTPRequest, opts ...grpc.CallOption) (*AuthMTPReply, error)
	SendInvites(ctx context.Context, in *AuthMTPRequest, opts ...grpc.CallOption) (*AuthMTPReply, error)
	ExportAuthorization(ctx context.Context, in *AuthMTPRequest, opts ...grpc.CallOption) (*AuthMTPReply, error)
	ImportAuthorization(ctx context.Context, in *AuthMTPRequest, opts ...grpc.CallOption) (*AuthMTPReply, error)
	BindTempAuthKey(ctx context.Context, in *AuthMTPRequest, opts ...grpc.CallOption) (*AuthMTPReply, error)
	ImportBotAuthorization(ctx context.Context, in *AuthMTPRequest, opts ...grpc.CallOption) (*AuthMTPReply, error)
	CheckPassword(ctx context.Context, in *AuthMTPRequest, opts ...grpc.CallOption) (*AuthMTPReply, error)
	RequestPasswordRecovery(ctx context.Context, in *AuthMTPRequest, opts ...grpc.CallOption) (*AuthMTPReply, error)
	RecoverPassword(ctx context.Context, in *AuthMTPRequest, opts ...grpc.CallOption) (*AuthMTPReply, error)
	ResendCode(ctx context.Context, in *AuthMTPRequest, opts ...grpc.CallOption) (*AuthMTPReply, error)
	CancelCode(ctx context.Context, in *AuthMTPRequest, opts ...grpc.CallOption) (*AuthMTPReply, error)
	DropTempAuthKey(ctx context.Context, in *AuthMTPRequest, opts ...grpc.CallOption) (*AuthMTPReply, error)
	// internal rpc
	RobotSignUp(ctx context.Context, in *RobotSignUpRequest, opts ...grpc.CallOption) (*RobotSignUpReply, error)
}

type authServerClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServerClient(cc grpc.ClientConnInterface) AuthServerClient {
	return &authServerClient{cc}
}

func (c *authServerClient) CheckPhone(ctx context.Context, in *AuthMTPRequest, opts ...grpc.CallOption) (*AuthMTPReply, error) {
	out := new(AuthMTPReply)
	err := c.cc.Invoke(ctx, "/imauthserver.AuthServer/CheckPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServerClient) SendCode(ctx context.Context, in *AuthMTPRequest, opts ...grpc.CallOption) (*AuthMTPReply, error) {
	out := new(AuthMTPReply)
	err := c.cc.Invoke(ctx, "/imauthserver.AuthServer/SendCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServerClient) SignUp(ctx context.Context, in *AuthMTPRequest, opts ...grpc.CallOption) (*AuthMTPReply, error) {
	out := new(AuthMTPReply)
	err := c.cc.Invoke(ctx, "/imauthserver.AuthServer/SignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServerClient) SignIn(ctx context.Context, in *AuthMTPRequest, opts ...grpc.CallOption) (*AuthMTPReply, error) {
	out := new(AuthMTPReply)
	err := c.cc.Invoke(ctx, "/imauthserver.AuthServer/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServerClient) LogOut(ctx context.Context, in *AuthMTPRequest, opts ...grpc.CallOption) (*AuthMTPReply, error) {
	out := new(AuthMTPReply)
	err := c.cc.Invoke(ctx, "/imauthserver.AuthServer/LogOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServerClient) ResetAuthorizations(ctx context.Context, in *AuthMTPRequest, opts ...grpc.CallOption) (*AuthMTPReply, error) {
	out := new(AuthMTPReply)
	err := c.cc.Invoke(ctx, "/imauthserver.AuthServer/ResetAuthorizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServerClient) SendInvites(ctx context.Context, in *AuthMTPRequest, opts ...grpc.CallOption) (*AuthMTPReply, error) {
	out := new(AuthMTPReply)
	err := c.cc.Invoke(ctx, "/imauthserver.AuthServer/SendInvites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServerClient) ExportAuthorization(ctx context.Context, in *AuthMTPRequest, opts ...grpc.CallOption) (*AuthMTPReply, error) {
	out := new(AuthMTPReply)
	err := c.cc.Invoke(ctx, "/imauthserver.AuthServer/ExportAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServerClient) ImportAuthorization(ctx context.Context, in *AuthMTPRequest, opts ...grpc.CallOption) (*AuthMTPReply, error) {
	out := new(AuthMTPReply)
	err := c.cc.Invoke(ctx, "/imauthserver.AuthServer/ImportAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServerClient) BindTempAuthKey(ctx context.Context, in *AuthMTPRequest, opts ...grpc.CallOption) (*AuthMTPReply, error) {
	out := new(AuthMTPReply)
	err := c.cc.Invoke(ctx, "/imauthserver.AuthServer/BindTempAuthKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServerClient) ImportBotAuthorization(ctx context.Context, in *AuthMTPRequest, opts ...grpc.CallOption) (*AuthMTPReply, error) {
	out := new(AuthMTPReply)
	err := c.cc.Invoke(ctx, "/imauthserver.AuthServer/ImportBotAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServerClient) CheckPassword(ctx context.Context, in *AuthMTPRequest, opts ...grpc.CallOption) (*AuthMTPReply, error) {
	out := new(AuthMTPReply)
	err := c.cc.Invoke(ctx, "/imauthserver.AuthServer/CheckPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServerClient) RequestPasswordRecovery(ctx context.Context, in *AuthMTPRequest, opts ...grpc.CallOption) (*AuthMTPReply, error) {
	out := new(AuthMTPReply)
	err := c.cc.Invoke(ctx, "/imauthserver.AuthServer/RequestPasswordRecovery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServerClient) RecoverPassword(ctx context.Context, in *AuthMTPRequest, opts ...grpc.CallOption) (*AuthMTPReply, error) {
	out := new(AuthMTPReply)
	err := c.cc.Invoke(ctx, "/imauthserver.AuthServer/RecoverPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServerClient) ResendCode(ctx context.Context, in *AuthMTPRequest, opts ...grpc.CallOption) (*AuthMTPReply, error) {
	out := new(AuthMTPReply)
	err := c.cc.Invoke(ctx, "/imauthserver.AuthServer/ResendCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServerClient) CancelCode(ctx context.Context, in *AuthMTPRequest, opts ...grpc.CallOption) (*AuthMTPReply, error) {
	out := new(AuthMTPReply)
	err := c.cc.Invoke(ctx, "/imauthserver.AuthServer/CancelCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServerClient) DropTempAuthKey(ctx context.Context, in *AuthMTPRequest, opts ...grpc.CallOption) (*AuthMTPReply, error) {
	out := new(AuthMTPReply)
	err := c.cc.Invoke(ctx, "/imauthserver.AuthServer/DropTempAuthKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServerClient) RobotSignUp(ctx context.Context, in *RobotSignUpRequest, opts ...grpc.CallOption) (*RobotSignUpReply, error) {
	out := new(RobotSignUpReply)
	err := c.cc.Invoke(ctx, "/imauthserver.AuthServer/RobotSignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServerServer is the server API for AuthServer service.
// All implementations must embed UnimplementedAuthServerServer
// for forward compatibility
type AuthServerServer interface {
	CheckPhone(context.Context, *AuthMTPRequest) (*AuthMTPReply, error)
	SendCode(context.Context, *AuthMTPRequest) (*AuthMTPReply, error)
	SignUp(context.Context, *AuthMTPRequest) (*AuthMTPReply, error)
	SignIn(context.Context, *AuthMTPRequest) (*AuthMTPReply, error)
	LogOut(context.Context, *AuthMTPRequest) (*AuthMTPReply, error)
	ResetAuthorizations(context.Context, *AuthMTPRequest) (*AuthMTPReply, error)
	SendInvites(context.Context, *AuthMTPRequest) (*AuthMTPReply, error)
	ExportAuthorization(context.Context, *AuthMTPRequest) (*AuthMTPReply, error)
	ImportAuthorization(context.Context, *AuthMTPRequest) (*AuthMTPReply, error)
	BindTempAuthKey(context.Context, *AuthMTPRequest) (*AuthMTPReply, error)
	ImportBotAuthorization(context.Context, *AuthMTPRequest) (*AuthMTPReply, error)
	CheckPassword(context.Context, *AuthMTPRequest) (*AuthMTPReply, error)
	RequestPasswordRecovery(context.Context, *AuthMTPRequest) (*AuthMTPReply, error)
	RecoverPassword(context.Context, *AuthMTPRequest) (*AuthMTPReply, error)
	ResendCode(context.Context, *AuthMTPRequest) (*AuthMTPReply, error)
	CancelCode(context.Context, *AuthMTPRequest) (*AuthMTPReply, error)
	DropTempAuthKey(context.Context, *AuthMTPRequest) (*AuthMTPReply, error)
	// internal rpc
	RobotSignUp(context.Context, *RobotSignUpRequest) (*RobotSignUpReply, error)
	mustEmbedUnimplementedAuthServerServer()
}

// UnimplementedAuthServerServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServerServer struct {
}

func (UnimplementedAuthServerServer) CheckPhone(context.Context, *AuthMTPRequest) (*AuthMTPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPhone not implemented")
}
func (UnimplementedAuthServerServer) SendCode(context.Context, *AuthMTPRequest) (*AuthMTPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCode not implemented")
}
func (UnimplementedAuthServerServer) SignUp(context.Context, *AuthMTPRequest) (*AuthMTPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedAuthServerServer) SignIn(context.Context, *AuthMTPRequest) (*AuthMTPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedAuthServerServer) LogOut(context.Context, *AuthMTPRequest) (*AuthMTPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogOut not implemented")
}
func (UnimplementedAuthServerServer) ResetAuthorizations(context.Context, *AuthMTPRequest) (*AuthMTPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetAuthorizations not implemented")
}
func (UnimplementedAuthServerServer) SendInvites(context.Context, *AuthMTPRequest) (*AuthMTPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInvites not implemented")
}
func (UnimplementedAuthServerServer) ExportAuthorization(context.Context, *AuthMTPRequest) (*AuthMTPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportAuthorization not implemented")
}
func (UnimplementedAuthServerServer) ImportAuthorization(context.Context, *AuthMTPRequest) (*AuthMTPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportAuthorization not implemented")
}
func (UnimplementedAuthServerServer) BindTempAuthKey(context.Context, *AuthMTPRequest) (*AuthMTPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindTempAuthKey not implemented")
}
func (UnimplementedAuthServerServer) ImportBotAuthorization(context.Context, *AuthMTPRequest) (*AuthMTPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportBotAuthorization not implemented")
}
func (UnimplementedAuthServerServer) CheckPassword(context.Context, *AuthMTPRequest) (*AuthMTPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPassword not implemented")
}
func (UnimplementedAuthServerServer) RequestPasswordRecovery(context.Context, *AuthMTPRequest) (*AuthMTPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestPasswordRecovery not implemented")
}
func (UnimplementedAuthServerServer) RecoverPassword(context.Context, *AuthMTPRequest) (*AuthMTPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverPassword not implemented")
}
func (UnimplementedAuthServerServer) ResendCode(context.Context, *AuthMTPRequest) (*AuthMTPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendCode not implemented")
}
func (UnimplementedAuthServerServer) CancelCode(context.Context, *AuthMTPRequest) (*AuthMTPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelCode not implemented")
}
func (UnimplementedAuthServerServer) DropTempAuthKey(context.Context, *AuthMTPRequest) (*AuthMTPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropTempAuthKey not implemented")
}
func (UnimplementedAuthServerServer) RobotSignUp(context.Context, *RobotSignUpRequest) (*RobotSignUpReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RobotSignUp not implemented")
}
func (UnimplementedAuthServerServer) mustEmbedUnimplementedAuthServerServer() {}

// UnsafeAuthServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServerServer will
// result in compilation errors.
type UnsafeAuthServerServer interface {
	mustEmbedUnimplementedAuthServerServer()
}

func RegisterAuthServerServer(s grpc.ServiceRegistrar, srv AuthServerServer) {
	s.RegisterService(&AuthServer_ServiceDesc, srv)
}

func _AuthServer_CheckPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthMTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServerServer).CheckPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imauthserver.AuthServer/CheckPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServerServer).CheckPhone(ctx, req.(*AuthMTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServer_SendCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthMTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServerServer).SendCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imauthserver.AuthServer/SendCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServerServer).SendCode(ctx, req.(*AuthMTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServer_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthMTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServerServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imauthserver.AuthServer/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServerServer).SignUp(ctx, req.(*AuthMTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServer_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthMTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServerServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imauthserver.AuthServer/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServerServer).SignIn(ctx, req.(*AuthMTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServer_LogOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthMTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServerServer).LogOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imauthserver.AuthServer/LogOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServerServer).LogOut(ctx, req.(*AuthMTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServer_ResetAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthMTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServerServer).ResetAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imauthserver.AuthServer/ResetAuthorizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServerServer).ResetAuthorizations(ctx, req.(*AuthMTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServer_SendInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthMTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServerServer).SendInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imauthserver.AuthServer/SendInvites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServerServer).SendInvites(ctx, req.(*AuthMTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServer_ExportAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthMTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServerServer).ExportAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imauthserver.AuthServer/ExportAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServerServer).ExportAuthorization(ctx, req.(*AuthMTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServer_ImportAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthMTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServerServer).ImportAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imauthserver.AuthServer/ImportAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServerServer).ImportAuthorization(ctx, req.(*AuthMTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServer_BindTempAuthKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthMTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServerServer).BindTempAuthKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imauthserver.AuthServer/BindTempAuthKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServerServer).BindTempAuthKey(ctx, req.(*AuthMTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServer_ImportBotAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthMTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServerServer).ImportBotAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imauthserver.AuthServer/ImportBotAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServerServer).ImportBotAuthorization(ctx, req.(*AuthMTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServer_CheckPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthMTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServerServer).CheckPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imauthserver.AuthServer/CheckPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServerServer).CheckPassword(ctx, req.(*AuthMTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServer_RequestPasswordRecovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthMTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServerServer).RequestPasswordRecovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imauthserver.AuthServer/RequestPasswordRecovery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServerServer).RequestPasswordRecovery(ctx, req.(*AuthMTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServer_RecoverPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthMTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServerServer).RecoverPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imauthserver.AuthServer/RecoverPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServerServer).RecoverPassword(ctx, req.(*AuthMTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServer_ResendCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthMTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServerServer).ResendCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imauthserver.AuthServer/ResendCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServerServer).ResendCode(ctx, req.(*AuthMTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServer_CancelCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthMTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServerServer).CancelCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imauthserver.AuthServer/CancelCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServerServer).CancelCode(ctx, req.(*AuthMTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServer_DropTempAuthKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthMTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServerServer).DropTempAuthKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imauthserver.AuthServer/DropTempAuthKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServerServer).DropTempAuthKey(ctx, req.(*AuthMTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServer_RobotSignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RobotSignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServerServer).RobotSignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imauthserver.AuthServer/RobotSignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServerServer).RobotSignUp(ctx, req.(*RobotSignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthServer_ServiceDesc is the grpc.ServiceDesc for AuthServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imauthserver.AuthServer",
	HandlerType: (*AuthServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckPhone",
			Handler:    _AuthServer_CheckPhone_Handler,
		},
		{
			MethodName: "SendCode",
			Handler:    _AuthServer_SendCode_Handler,
		},
		{
			MethodName: "SignUp",
			Handler:    _AuthServer_SignUp_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _AuthServer_SignIn_Handler,
		},
		{
			MethodName: "LogOut",
			Handler:    _AuthServer_LogOut_Handler,
		},
		{
			MethodName: "ResetAuthorizations",
			Handler:    _AuthServer_ResetAuthorizations_Handler,
		},
		{
			MethodName: "SendInvites",
			Handler:    _AuthServer_SendInvites_Handler,
		},
		{
			MethodName: "ExportAuthorization",
			Handler:    _AuthServer_ExportAuthorization_Handler,
		},
		{
			MethodName: "ImportAuthorization",
			Handler:    _AuthServer_ImportAuthorization_Handler,
		},
		{
			MethodName: "BindTempAuthKey",
			Handler:    _AuthServer_BindTempAuthKey_Handler,
		},
		{
			MethodName: "ImportBotAuthorization",
			Handler:    _AuthServer_ImportBotAuthorization_Handler,
		},
		{
			MethodName: "CheckPassword",
			Handler:    _AuthServer_CheckPassword_Handler,
		},
		{
			MethodName: "RequestPasswordRecovery",
			Handler:    _AuthServer_RequestPasswordRecovery_Handler,
		},
		{
			MethodName: "RecoverPassword",
			Handler:    _AuthServer_RecoverPassword_Handler,
		},
		{
			MethodName: "ResendCode",
			Handler:    _AuthServer_ResendCode_Handler,
		},
		{
			MethodName: "CancelCode",
			Handler:    _AuthServer_CancelCode_Handler,
		},
		{
			MethodName: "DropTempAuthKey",
			Handler:    _AuthServer_DropTempAuthKey_Handler,
		},
		{
			MethodName: "RobotSignUp",
			Handler:    _AuthServer_RobotSignUp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "imauth.proto",
}

// AccountServerClient is the client API for AccountServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServerClient interface {
	GetPassword(ctx context.Context, in *AccountMTPRequest, opts ...grpc.CallOption) (*AccountMTPReply, error)
	GetPasswordSettings(ctx context.Context, in *AccountMTPRequest, opts ...grpc.CallOption) (*AccountMTPReply, error)
	UpdatePasswordSettings(ctx context.Context, in *AccountMTPRequest, opts ...grpc.CallOption) (*AccountMTPReply, error)
	SendUpdatePasswordSettingsCode(ctx context.Context, in *AccountMTPRequest, opts ...grpc.CallOption) (*AccountMTPReply, error)
	PTAccountUpdatePasswordSettings(ctx context.Context, in *AccountMTPRequest, opts ...grpc.CallOption) (*AccountMTPReply, error)
	ResetAuthroization(ctx context.Context, in *AccountMTPRequest, opts ...grpc.CallOption) (*AccountMTPReply, error)
	GetAuthorizations(ctx context.Context, in *AccountMTPRequest, opts ...grpc.CallOption) (*AccountMTPReply, error)
	// internal rpc
	UserPassword(ctx context.Context, in *UserPasswordRequest, opts ...grpc.CallOption) (*UserPasswordReply, error)
}

type accountServerClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServerClient(cc grpc.ClientConnInterface) AccountServerClient {
	return &accountServerClient{cc}
}

func (c *accountServerClient) GetPassword(ctx context.Context, in *AccountMTPRequest, opts ...grpc.CallOption) (*AccountMTPReply, error) {
	out := new(AccountMTPReply)
	err := c.cc.Invoke(ctx, "/imauthserver.AccountServer/GetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServerClient) GetPasswordSettings(ctx context.Context, in *AccountMTPRequest, opts ...grpc.CallOption) (*AccountMTPReply, error) {
	out := new(AccountMTPReply)
	err := c.cc.Invoke(ctx, "/imauthserver.AccountServer/GetPasswordSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServerClient) UpdatePasswordSettings(ctx context.Context, in *AccountMTPRequest, opts ...grpc.CallOption) (*AccountMTPReply, error) {
	out := new(AccountMTPReply)
	err := c.cc.Invoke(ctx, "/imauthserver.AccountServer/UpdatePasswordSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServerClient) SendUpdatePasswordSettingsCode(ctx context.Context, in *AccountMTPRequest, opts ...grpc.CallOption) (*AccountMTPReply, error) {
	out := new(AccountMTPReply)
	err := c.cc.Invoke(ctx, "/imauthserver.AccountServer/SendUpdatePasswordSettingsCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServerClient) PTAccountUpdatePasswordSettings(ctx context.Context, in *AccountMTPRequest, opts ...grpc.CallOption) (*AccountMTPReply, error) {
	out := new(AccountMTPReply)
	err := c.cc.Invoke(ctx, "/imauthserver.AccountServer/PTAccountUpdatePasswordSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServerClient) ResetAuthroization(ctx context.Context, in *AccountMTPRequest, opts ...grpc.CallOption) (*AccountMTPReply, error) {
	out := new(AccountMTPReply)
	err := c.cc.Invoke(ctx, "/imauthserver.AccountServer/ResetAuthroization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServerClient) GetAuthorizations(ctx context.Context, in *AccountMTPRequest, opts ...grpc.CallOption) (*AccountMTPReply, error) {
	out := new(AccountMTPReply)
	err := c.cc.Invoke(ctx, "/imauthserver.AccountServer/GetAuthorizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServerClient) UserPassword(ctx context.Context, in *UserPasswordRequest, opts ...grpc.CallOption) (*UserPasswordReply, error) {
	out := new(UserPasswordReply)
	err := c.cc.Invoke(ctx, "/imauthserver.AccountServer/UserPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServerServer is the server API for AccountServer service.
// All implementations must embed UnimplementedAccountServerServer
// for forward compatibility
type AccountServerServer interface {
	GetPassword(context.Context, *AccountMTPRequest) (*AccountMTPReply, error)
	GetPasswordSettings(context.Context, *AccountMTPRequest) (*AccountMTPReply, error)
	UpdatePasswordSettings(context.Context, *AccountMTPRequest) (*AccountMTPReply, error)
	SendUpdatePasswordSettingsCode(context.Context, *AccountMTPRequest) (*AccountMTPReply, error)
	PTAccountUpdatePasswordSettings(context.Context, *AccountMTPRequest) (*AccountMTPReply, error)
	ResetAuthroization(context.Context, *AccountMTPRequest) (*AccountMTPReply, error)
	GetAuthorizations(context.Context, *AccountMTPRequest) (*AccountMTPReply, error)
	// internal rpc
	UserPassword(context.Context, *UserPasswordRequest) (*UserPasswordReply, error)
	mustEmbedUnimplementedAccountServerServer()
}

// UnimplementedAccountServerServer must be embedded to have forward compatible implementations.
type UnimplementedAccountServerServer struct {
}

func (UnimplementedAccountServerServer) GetPassword(context.Context, *AccountMTPRequest) (*AccountMTPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPassword not implemented")
}
func (UnimplementedAccountServerServer) GetPasswordSettings(context.Context, *AccountMTPRequest) (*AccountMTPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPasswordSettings not implemented")
}
func (UnimplementedAccountServerServer) UpdatePasswordSettings(context.Context, *AccountMTPRequest) (*AccountMTPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePasswordSettings not implemented")
}
func (UnimplementedAccountServerServer) SendUpdatePasswordSettingsCode(context.Context, *AccountMTPRequest) (*AccountMTPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendUpdatePasswordSettingsCode not implemented")
}
func (UnimplementedAccountServerServer) PTAccountUpdatePasswordSettings(context.Context, *AccountMTPRequest) (*AccountMTPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PTAccountUpdatePasswordSettings not implemented")
}
func (UnimplementedAccountServerServer) ResetAuthroization(context.Context, *AccountMTPRequest) (*AccountMTPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetAuthroization not implemented")
}
func (UnimplementedAccountServerServer) GetAuthorizations(context.Context, *AccountMTPRequest) (*AccountMTPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorizations not implemented")
}
func (UnimplementedAccountServerServer) UserPassword(context.Context, *UserPasswordRequest) (*UserPasswordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPassword not implemented")
}
func (UnimplementedAccountServerServer) mustEmbedUnimplementedAccountServerServer() {}

// UnsafeAccountServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServerServer will
// result in compilation errors.
type UnsafeAccountServerServer interface {
	mustEmbedUnimplementedAccountServerServer()
}

func RegisterAccountServerServer(s grpc.ServiceRegistrar, srv AccountServerServer) {
	s.RegisterService(&AccountServer_ServiceDesc, srv)
}

func _AccountServer_GetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountMTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServerServer).GetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imauthserver.AccountServer/GetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServerServer).GetPassword(ctx, req.(*AccountMTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServer_GetPasswordSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountMTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServerServer).GetPasswordSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imauthserver.AccountServer/GetPasswordSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServerServer).GetPasswordSettings(ctx, req.(*AccountMTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServer_UpdatePasswordSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountMTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServerServer).UpdatePasswordSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imauthserver.AccountServer/UpdatePasswordSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServerServer).UpdatePasswordSettings(ctx, req.(*AccountMTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServer_SendUpdatePasswordSettingsCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountMTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServerServer).SendUpdatePasswordSettingsCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imauthserver.AccountServer/SendUpdatePasswordSettingsCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServerServer).SendUpdatePasswordSettingsCode(ctx, req.(*AccountMTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServer_PTAccountUpdatePasswordSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountMTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServerServer).PTAccountUpdatePasswordSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imauthserver.AccountServer/PTAccountUpdatePasswordSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServerServer).PTAccountUpdatePasswordSettings(ctx, req.(*AccountMTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServer_ResetAuthroization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountMTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServerServer).ResetAuthroization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imauthserver.AccountServer/ResetAuthroization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServerServer).ResetAuthroization(ctx, req.(*AccountMTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServer_GetAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountMTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServerServer).GetAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imauthserver.AccountServer/GetAuthorizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServerServer).GetAuthorizations(ctx, req.(*AccountMTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServer_UserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServerServer).UserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imauthserver.AccountServer/UserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServerServer).UserPassword(ctx, req.(*UserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountServer_ServiceDesc is the grpc.ServiceDesc for AccountServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imauthserver.AccountServer",
	HandlerType: (*AccountServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPassword",
			Handler:    _AccountServer_GetPassword_Handler,
		},
		{
			MethodName: "GetPasswordSettings",
			Handler:    _AccountServer_GetPasswordSettings_Handler,
		},
		{
			MethodName: "UpdatePasswordSettings",
			Handler:    _AccountServer_UpdatePasswordSettings_Handler,
		},
		{
			MethodName: "SendUpdatePasswordSettingsCode",
			Handler:    _AccountServer_SendUpdatePasswordSettingsCode_Handler,
		},
		{
			MethodName: "PTAccountUpdatePasswordSettings",
			Handler:    _AccountServer_PTAccountUpdatePasswordSettings_Handler,
		},
		{
			MethodName: "ResetAuthroization",
			Handler:    _AccountServer_ResetAuthroization_Handler,
		},
		{
			MethodName: "GetAuthorizations",
			Handler:    _AccountServer_GetAuthorizations_Handler,
		},
		{
			MethodName: "UserPassword",
			Handler:    _AccountServer_UserPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "imauth.proto",
}
