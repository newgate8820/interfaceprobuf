// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: common.proto

package imbotgateway

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 结果码定义，后续在此添加 ...
type ERpcResultCode int32

const (
	ERpcResultCode_RRC_OK                  ERpcResultCode = 0     // 成功
	ERpcResultCode_RRC_FILE_NOT_EXISITS    ERpcResultCode = 1     // 文件不存在
	ERpcResultCode_RRC_SYSTEM_EXCEPTION    ERpcResultCode = 2     // 系统异常
	ERpcResultCode_RRC_PARAMETER_EXCEPTION ERpcResultCode = 3     // 参数异常
	ERpcResultCode_RRC_LOGIC_EXCEPTION     ERpcResultCode = 4     // 逻辑异常
	ERpcResultCode_RRC_REPEAT_SLICE        ERpcResultCode = 5     // 重复分片
	ERpcResultCode_RRC_SESSION_NOT_EXISITS ERpcResultCode = 6     // 会话不存在
	ERpcResultCode_RRC_DATA_EXCEPTION      ERpcResultCode = 7     // 数据异常
	ERpcResultCode_RRC_NO_ACCESS_RIGHTS    ERpcResultCode = 8     // 没有访问权限
	ERpcResultCode_RRC_DB_EXCEPTION        ERpcResultCode = 9     // DB（redis）异常
	ERpcResultCode_RRC_UNKNOWN             ERpcResultCode = 65535 // 未知异常
)

// Enum value maps for ERpcResultCode.
var (
	ERpcResultCode_name = map[int32]string{
		0:     "RRC_OK",
		1:     "RRC_FILE_NOT_EXISITS",
		2:     "RRC_SYSTEM_EXCEPTION",
		3:     "RRC_PARAMETER_EXCEPTION",
		4:     "RRC_LOGIC_EXCEPTION",
		5:     "RRC_REPEAT_SLICE",
		6:     "RRC_SESSION_NOT_EXISITS",
		7:     "RRC_DATA_EXCEPTION",
		8:     "RRC_NO_ACCESS_RIGHTS",
		9:     "RRC_DB_EXCEPTION",
		65535: "RRC_UNKNOWN",
	}
	ERpcResultCode_value = map[string]int32{
		"RRC_OK":                  0,
		"RRC_FILE_NOT_EXISITS":    1,
		"RRC_SYSTEM_EXCEPTION":    2,
		"RRC_PARAMETER_EXCEPTION": 3,
		"RRC_LOGIC_EXCEPTION":     4,
		"RRC_REPEAT_SLICE":        5,
		"RRC_SESSION_NOT_EXISITS": 6,
		"RRC_DATA_EXCEPTION":      7,
		"RRC_NO_ACCESS_RIGHTS":    8,
		"RRC_DB_EXCEPTION":        9,
		"RRC_UNKNOWN":             65535,
	}
)

func (x ERpcResultCode) Enum() *ERpcResultCode {
	p := new(ERpcResultCode)
	*p = x
	return p
}

func (x ERpcResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERpcResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[0].Descriptor()
}

func (ERpcResultCode) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[0]
}

func (x ERpcResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ERpcResultCode.Descriptor instead.
func (ERpcResultCode) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

type ChatResultCode int32

const (
	ChatResultCode_Chat_RPC_OK                     ChatResultCode = 0    //成功
	ChatResultCode_Chat_ADDUSER3549_EXP            ChatResultCode = 4000 //3549隐私选项
	ChatResultCode_Chat_User_Priavcay              ChatResultCode = 4001 //隐私选项 没有权限
	ChatResultCode_Chat_To_User_Blocked            ChatResultCode = 4002 //block你将用户拉入黑名单  隐私选项
	ChatResultCode_Chat_User_Blocked               ChatResultCode = 4003 //block用户将你拉入黑名单  隐私选项
	ChatResultCode_Chat_REPEAT_CREAT               ChatResultCode = 4004 //短时间重复创建群
	ChatResultCode_Chat_REPEAT_ADD_USER            ChatResultCode = 4005 //重复添加群成员
	ChatResultCode_Chat_EXCEED_CREATE_MAXNUM       ChatResultCode = 4006 //超过最大建群数量
	ChatResultCode_Chat_EXCEED_TODAY_CREATE_MAXNUM ChatResultCode = 4007 //超过当日最大建群数量
	ChatResultCode_Chat_EXCEED_ADD_USER_MAXNUM     ChatResultCode = 4008 //超过群最大添加人数
	ChatResultCode_Chat_PROHIBIT_ADD_GROUP         ChatResultCode = 4009 //禁止加入群组
	ChatResultCode_Chat_ADMINLEVEL_EXCEPTION       ChatResultCode = 4010 //没有邀请权限
	ChatResultCode_Chat_ALREADYLEFT_EXCEPTION      ChatResultCode = 4011 //用户不在群里
	ChatResultCode_Chat_GROUP_DISBAND              ChatResultCode = 4012 //该群已经解散
	ChatResultCode_Chat_GROUP_KICKED               ChatResultCode = 4013 //该群以将你拉黑
	ChatResultCode_Chat_HOURS_ADD_USER_MAXNUM      ChatResultCode = 4114 //超过每小时最多添加群成员数
	ChatResultCode_Chat_ONCE_ADD_USER_MAXNUM       ChatResultCode = 4115 //超过单次最多添加群成员数
	//
	ChatResultCode_Chat_UNKNOWN               ChatResultCode = 4100 //未知异常
	ChatResultCode_Chat_PARAMETER_EXCEPTION   ChatResultCode = 4101 //参数异常
	ChatResultCode_Chat_LOGIC_EXCEPTION       ChatResultCode = 4102 //逻辑异常
	ChatResultCode_Chat_REDIS_EXCEPTION       ChatResultCode = 4103 //redis异常
	ChatResultCode_Chat_DB_EXCEPTION          ChatResultCode = 4104 //数据库异常
	ChatResultCode_Chat_AllocId_EXCEPTION     ChatResultCode = 4105 //群id分配错误
	ChatResultCode_Chat_CallGetUser_EXCEPTION ChatResultCode = 4106 //获取user出错  刘鑫磊提供接口
	ChatResultCode_Chat_DB_NORECORD           ChatResultCode = 4107 //无记录
	ChatResultCode_Chat_Group_NORECORD        ChatResultCode = 4108 //无群记录
)

// Enum value maps for ChatResultCode.
var (
	ChatResultCode_name = map[int32]string{
		0:    "Chat_RPC_OK",
		4000: "Chat_ADDUSER3549_EXP",
		4001: "Chat_User_Priavcay",
		4002: "Chat_To_User_Blocked",
		4003: "Chat_User_Blocked",
		4004: "Chat_REPEAT_CREAT",
		4005: "Chat_REPEAT_ADD_USER",
		4006: "Chat_EXCEED_CREATE_MAXNUM",
		4007: "Chat_EXCEED_TODAY_CREATE_MAXNUM",
		4008: "Chat_EXCEED_ADD_USER_MAXNUM",
		4009: "Chat_PROHIBIT_ADD_GROUP",
		4010: "Chat_ADMINLEVEL_EXCEPTION",
		4011: "Chat_ALREADYLEFT_EXCEPTION",
		4012: "Chat_GROUP_DISBAND",
		4013: "Chat_GROUP_KICKED",
		4114: "Chat_HOURS_ADD_USER_MAXNUM",
		4115: "Chat_ONCE_ADD_USER_MAXNUM",
		4100: "Chat_UNKNOWN",
		4101: "Chat_PARAMETER_EXCEPTION",
		4102: "Chat_LOGIC_EXCEPTION",
		4103: "Chat_REDIS_EXCEPTION",
		4104: "Chat_DB_EXCEPTION",
		4105: "Chat_AllocId_EXCEPTION",
		4106: "Chat_CallGetUser_EXCEPTION",
		4107: "Chat_DB_NORECORD",
		4108: "Chat_Group_NORECORD",
	}
	ChatResultCode_value = map[string]int32{
		"Chat_RPC_OK":                     0,
		"Chat_ADDUSER3549_EXP":            4000,
		"Chat_User_Priavcay":              4001,
		"Chat_To_User_Blocked":            4002,
		"Chat_User_Blocked":               4003,
		"Chat_REPEAT_CREAT":               4004,
		"Chat_REPEAT_ADD_USER":            4005,
		"Chat_EXCEED_CREATE_MAXNUM":       4006,
		"Chat_EXCEED_TODAY_CREATE_MAXNUM": 4007,
		"Chat_EXCEED_ADD_USER_MAXNUM":     4008,
		"Chat_PROHIBIT_ADD_GROUP":         4009,
		"Chat_ADMINLEVEL_EXCEPTION":       4010,
		"Chat_ALREADYLEFT_EXCEPTION":      4011,
		"Chat_GROUP_DISBAND":              4012,
		"Chat_GROUP_KICKED":               4013,
		"Chat_HOURS_ADD_USER_MAXNUM":      4114,
		"Chat_ONCE_ADD_USER_MAXNUM":       4115,
		"Chat_UNKNOWN":                    4100,
		"Chat_PARAMETER_EXCEPTION":        4101,
		"Chat_LOGIC_EXCEPTION":            4102,
		"Chat_REDIS_EXCEPTION":            4103,
		"Chat_DB_EXCEPTION":               4104,
		"Chat_AllocId_EXCEPTION":          4105,
		"Chat_CallGetUser_EXCEPTION":      4106,
		"Chat_DB_NORECORD":                4107,
		"Chat_Group_NORECORD":             4108,
	}
)

func (x ChatResultCode) Enum() *ChatResultCode {
	p := new(ChatResultCode)
	*p = x
	return p
}

func (x ChatResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[1].Descriptor()
}

func (ChatResultCode) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[1]
}

func (x ChatResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatResultCode.Descriptor instead.
func (ChatResultCode) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

type ReErrCode int32

const (
	ReErrCode_Success          ReErrCode = 0  //成功
	ReErrCode_DBError          ReErrCode = 1  //数据库错误
	ReErrCode_InternalError    ReErrCode = 2  //内部其他错误
	ReErrCode_NotExist         ReErrCode = 3  //用户不存在
	ReErrCode_UserNameOccupied ReErrCode = 4  //用户名已占用
	ReErrCode_Register         ReErrCode = 5  //已经注册
	ReErrCode_Unregister       ReErrCode = 6  //用户注册
	ReErrCode_NotModify        ReErrCode = 7  //联系人没有变化
	ReErrCode_Blocked          ReErrCode = 8  //是黑名单
	ReErrCode_UnBlocked        ReErrCode = 9  //不是黑明单
	ReErrCode_Valid            ReErrCode = 10 //隐私选项等可用的返回
	ReErrCode_UnValid          ReErrCode = 11 //隐私选项校验失败的情况
	ReErrCode_Failed           ReErrCode = 12 //失败
	ReErrCode_HashNotSuccess   ReErrCode = 13 //用户哈希值不合法
	ReErrCode_UsernameNotEmpty ReErrCode = 14 // user already has username
	ReErrCode_VipOnly          ReErrCode = 15
)

// Enum value maps for ReErrCode.
var (
	ReErrCode_name = map[int32]string{
		0:  "Success",
		1:  "DBError",
		2:  "InternalError",
		3:  "NotExist",
		4:  "UserNameOccupied",
		5:  "Register",
		6:  "Unregister",
		7:  "NotModify",
		8:  "Blocked",
		9:  "UnBlocked",
		10: "Valid",
		11: "UnValid",
		12: "Failed",
		13: "HashNotSuccess",
		14: "UsernameNotEmpty",
		15: "VipOnly",
	}
	ReErrCode_value = map[string]int32{
		"Success":          0,
		"DBError":          1,
		"InternalError":    2,
		"NotExist":         3,
		"UserNameOccupied": 4,
		"Register":         5,
		"Unregister":       6,
		"NotModify":        7,
		"Blocked":          8,
		"UnBlocked":        9,
		"Valid":            10,
		"UnValid":          11,
		"Failed":           12,
		"HashNotSuccess":   13,
		"UsernameNotEmpty": 14,
		"VipOnly":          15,
	}
)

func (x ReErrCode) Enum() *ReErrCode {
	p := new(ReErrCode)
	*p = x
	return p
}

func (x ReErrCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReErrCode) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[2].Descriptor()
}

func (ReErrCode) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[2]
}

func (x ReErrCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReErrCode.Descriptor instead.
func (ReErrCode) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

// 日志格式结构
type Debug struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid     int32  `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`                           // 用户id
	Phone      string `protobuf:"bytes,2,opt,name=Phone,proto3" json:"Phone,omitempty"`                              // 电话号码
	Ip         string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`                                    // ip
	KeyId      uint64 `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`                // keyid
	SessionId  uint64 `protobuf:"varint,5,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`    // 连接id
	Layer      int32  `protobuf:"varint,6,opt,name=layer,proto3" json:"layer,omitempty"`                             // 层
	Ostype     uint32 `protobuf:"varint,7,opt,name=ostype,proto3" json:"ostype,omitempty"`                           //1 是安卓 2 是Iphone/IPAD 3 是PC 4是web 5是机器人
	CurrentCrc uint32 `protobuf:"varint,8,opt,name=current_crc,json=currentCrc,proto3" json:"current_crc,omitempty"` // 当前协议的crc32
	AppVersion string `protobuf:"bytes,9,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`  // 客户端版本
}

func (x *Debug) Reset() {
	*x = Debug{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Debug) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Debug) ProtoMessage() {}

func (x *Debug) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Debug.ProtoReflect.Descriptor instead.
func (*Debug) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

func (x *Debug) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *Debug) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *Debug) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Debug) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *Debug) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *Debug) GetLayer() int32 {
	if x != nil {
		return x.Layer
	}
	return 0
}

func (x *Debug) GetOstype() uint32 {
	if x != nil {
		return x.Ostype
	}
	return 0
}

func (x *Debug) GetCurrentCrc() uint32 {
	if x != nil {
		return x.CurrentCrc
	}
	return 0
}

func (x *Debug) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

// 群基础信息
type ChannelInfoBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId         int32  `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"` //超级群、频道ID
	AccessHash        int64  `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Encry             bool   `protobuf:"varint,3,opt,name=encry,proto3" json:"encry,omitempty"`         //是否是加密群
	Broadcast         bool   `protobuf:"varint,4,opt,name=broadcast,proto3" json:"broadcast,omitempty"` //是否是频道
	Verified          bool   `protobuf:"varint,5,opt,name=verified,proto3" json:"verified,omitempty"`
	Megagroup         bool   `protobuf:"varint,6,opt,name=megagroup,proto3" json:"megagroup,omitempty"`   //	是否是超级群的标识
	Restricted        bool   `protobuf:"varint,7,opt,name=restricted,proto3" json:"restricted,omitempty"` //是否被限制
	Democracy         bool   `protobuf:"varint,8,opt,name=democracy,proto3" json:"democracy,omitempty"`   //是否民主（设置管理员的时候需要用）
	Signatures        bool   `protobuf:"varint,9,opt,name=signatures,proto3" json:"signatures,omitempty"`
	Min               bool   `protobuf:"varint,10,opt,name=min,proto3" json:"min,omitempty"`
	Title             string `protobuf:"bytes,11,opt,name=title,proto3" json:"title,omitempty"`                                                  //群名称
	Username          string `protobuf:"bytes,12,opt,name=username,proto3" json:"username,omitempty"`                                            //超级群的唯一标识名称
	Photo             string `protobuf:"bytes,13,opt,name=photo,proto3" json:"photo,omitempty"`                                                  //用户头像 json格式
	Date              int32  `protobuf:"varint,14,opt,name=date,proto3" json:"date,omitempty"`                                                   //创建时间
	Version           int32  `protobuf:"varint,15,opt,name=version,proto3" json:"version,omitempty"`                                             //版本
	RestrictionReason string `protobuf:"bytes,16,opt,name=restriction_reason,json=restrictionReason,proto3" json:"restriction_reason,omitempty"` //被限制的原因
	Cluster           int32  `protobuf:"varint,17,opt,name=cluster,proto3" json:"cluster,omitempty"`                                             //超级群创建的cluster
	// bool moderator = 18; //是不是主持人
	IsCreator bool `protobuf:"varint,18,opt,name=is_creator,json=isCreator,proto3" json:"is_creator,omitempty"` //是不是创建者
	// bool editor = 19; //是否是管理员
	IsAdmin            bool   `protobuf:"varint,19,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin,omitempty"` //是否是管理员
	Left               bool   `protobuf:"varint,20,opt,name=left,proto3" json:"left,omitempty"`                      //是否是已经离开此超级群
	Kicked             bool   `protobuf:"varint,21,opt,name=kicked,proto3" json:"kicked,omitempty"`                  //是否是被踢人
	MigratedFromChatId int32  `protobuf:"varint,22,opt,name=migrated_from_chat_id,json=migratedFromChatId,proto3" json:"migrated_from_chat_id,omitempty"`
	InviteRule         int32  `protobuf:"varint,23,opt,name=invite_rule,json=inviteRule,proto3" json:"invite_rule,omitempty"` //0:所有人能邀请  1:仅管理员  其他：扩展用
	AdminsCount        int32  `protobuf:"varint,24,opt,name=Admins_count,json=AdminsCount,proto3" json:"Admins_count,omitempty"`
	KickedCount        int32  `protobuf:"varint,25,opt,name=Kicked_count,json=KickedCount,proto3" json:"Kicked_count,omitempty"`
	BannedCount        int32  `protobuf:"varint,26,opt,name=Banned_count,json=BannedCount,proto3" json:"Banned_count,omitempty"`
	BotCount           int32  `protobuf:"varint,27,opt,name=Bot_count,json=BotCount,proto3" json:"Bot_count,omitempty"`
	ParticipantsCount  int32  `protobuf:"varint,28,opt,name=Participants_count,json=ParticipantsCount,proto3" json:"Participants_count,omitempty"`
	IsInChannel        bool   `protobuf:"varint,29,opt,name=IsInChannel,proto3" json:"IsInChannel,omitempty"`
	UtilDate           int32  `protobuf:"varint,30,opt,name=util_date,json=utilDate,proto3" json:"util_date,omitempty"`
	ExportedInviteLink string `protobuf:"bytes,31,opt,name=exported_invite_link,json=exportedInviteLink,proto3" json:"exported_invite_link,omitempty"` //邀请链接
	Creator            int32  `protobuf:"varint,32,opt,name=Creator,proto3" json:"Creator,omitempty"`
	About              string `protobuf:"bytes,33,opt,name=About,proto3" json:"About,omitempty"`
	EveryoneQuiet      bool   `protobuf:"varint,34,opt,name=EveryoneQuiet,proto3" json:"EveryoneQuiet,omitempty"`
	PrivateChat        bool   `protobuf:"varint,35,opt,name=PrivateChat,proto3" json:"PrivateChat,omitempty"`
}

func (x *ChannelInfoBase) Reset() {
	*x = ChannelInfoBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelInfoBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelInfoBase) ProtoMessage() {}

func (x *ChannelInfoBase) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelInfoBase.ProtoReflect.Descriptor instead.
func (*ChannelInfoBase) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

func (x *ChannelInfoBase) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelInfoBase) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ChannelInfoBase) GetEncry() bool {
	if x != nil {
		return x.Encry
	}
	return false
}

func (x *ChannelInfoBase) GetBroadcast() bool {
	if x != nil {
		return x.Broadcast
	}
	return false
}

func (x *ChannelInfoBase) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *ChannelInfoBase) GetMegagroup() bool {
	if x != nil {
		return x.Megagroup
	}
	return false
}

func (x *ChannelInfoBase) GetRestricted() bool {
	if x != nil {
		return x.Restricted
	}
	return false
}

func (x *ChannelInfoBase) GetDemocracy() bool {
	if x != nil {
		return x.Democracy
	}
	return false
}

func (x *ChannelInfoBase) GetSignatures() bool {
	if x != nil {
		return x.Signatures
	}
	return false
}

func (x *ChannelInfoBase) GetMin() bool {
	if x != nil {
		return x.Min
	}
	return false
}

func (x *ChannelInfoBase) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ChannelInfoBase) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ChannelInfoBase) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

func (x *ChannelInfoBase) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ChannelInfoBase) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ChannelInfoBase) GetRestrictionReason() string {
	if x != nil {
		return x.RestrictionReason
	}
	return ""
}

func (x *ChannelInfoBase) GetCluster() int32 {
	if x != nil {
		return x.Cluster
	}
	return 0
}

func (x *ChannelInfoBase) GetIsCreator() bool {
	if x != nil {
		return x.IsCreator
	}
	return false
}

func (x *ChannelInfoBase) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

func (x *ChannelInfoBase) GetLeft() bool {
	if x != nil {
		return x.Left
	}
	return false
}

func (x *ChannelInfoBase) GetKicked() bool {
	if x != nil {
		return x.Kicked
	}
	return false
}

func (x *ChannelInfoBase) GetMigratedFromChatId() int32 {
	if x != nil {
		return x.MigratedFromChatId
	}
	return 0
}

func (x *ChannelInfoBase) GetInviteRule() int32 {
	if x != nil {
		return x.InviteRule
	}
	return 0
}

func (x *ChannelInfoBase) GetAdminsCount() int32 {
	if x != nil {
		return x.AdminsCount
	}
	return 0
}

func (x *ChannelInfoBase) GetKickedCount() int32 {
	if x != nil {
		return x.KickedCount
	}
	return 0
}

func (x *ChannelInfoBase) GetBannedCount() int32 {
	if x != nil {
		return x.BannedCount
	}
	return 0
}

func (x *ChannelInfoBase) GetBotCount() int32 {
	if x != nil {
		return x.BotCount
	}
	return 0
}

func (x *ChannelInfoBase) GetParticipantsCount() int32 {
	if x != nil {
		return x.ParticipantsCount
	}
	return 0
}

func (x *ChannelInfoBase) GetIsInChannel() bool {
	if x != nil {
		return x.IsInChannel
	}
	return false
}

func (x *ChannelInfoBase) GetUtilDate() int32 {
	if x != nil {
		return x.UtilDate
	}
	return 0
}

func (x *ChannelInfoBase) GetExportedInviteLink() string {
	if x != nil {
		return x.ExportedInviteLink
	}
	return ""
}

func (x *ChannelInfoBase) GetCreator() int32 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *ChannelInfoBase) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *ChannelInfoBase) GetEveryoneQuiet() bool {
	if x != nil {
		return x.EveryoneQuiet
	}
	return false
}

func (x *ChannelInfoBase) GetPrivateChat() bool {
	if x != nil {
		return x.PrivateChat
	}
	return false
}

// 普通群的基础信息
type GetChatInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId            int32          `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	AdminsEnabled     bool           `protobuf:"varint,2,opt,name=admins_enabled,json=adminsEnabled,proto3" json:"admins_enabled,omitempty"`
	Deactivated       bool           `protobuf:"varint,3,opt,name=deactivated,proto3" json:"deactivated,omitempty"` //群是否活跃
	ExportedInvite    string         `protobuf:"bytes,4,opt,name=exported_invite,json=exportedInvite,proto3" json:"exported_invite,omitempty"`
	Encry             bool           `protobuf:"varint,5,opt,name=encry,proto3" json:"encry,omitempty"`     //是否加密群
	Creator           int32          `protobuf:"varint,6,opt,name=creator,proto3" json:"creator,omitempty"` //创建者的id
	Title             string         `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`
	Photo             []byte         `protobuf:"bytes,8,opt,name=photo,proto3" json:"photo,omitempty"`                                                    //群头像
	FullPhoto         []byte         `protobuf:"bytes,9,opt,name=full_photo,json=fullPhoto,proto3" json:"full_photo,omitempty"`                           //群头像
	Version           int32          `protobuf:"varint,10,opt,name=version,proto3" json:"version,omitempty"`                                              //群version
	ParticipantsCount int32          `protobuf:"varint,11,opt,name=participants_count,json=participantsCount,proto3" json:"participants_count,omitempty"` //	群成员个数 （邀请人和踢人都要相应变化）
	Date              int32          `protobuf:"varint,12,opt,name=date,proto3" json:"date,omitempty"`                                                    //群创建时间
	MigrateTo         string         `protobuf:"bytes,13,opt,name=migrate_to,json=migrateTo,proto3" json:"migrate_to,omitempty"`                          //升级为超级群的时候默认"" 格式为json格式
	Resultcode        ChatResultCode `protobuf:"varint,14,opt,name=resultcode,proto3,enum=imbotgateway.ChatResultCode" json:"resultcode,omitempty"`       //结果码
}

func (x *GetChatInfoResp) Reset() {
	*x = GetChatInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatInfoResp) ProtoMessage() {}

func (x *GetChatInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatInfoResp.ProtoReflect.Descriptor instead.
func (*GetChatInfoResp) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

func (x *GetChatInfoResp) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *GetChatInfoResp) GetAdminsEnabled() bool {
	if x != nil {
		return x.AdminsEnabled
	}
	return false
}

func (x *GetChatInfoResp) GetDeactivated() bool {
	if x != nil {
		return x.Deactivated
	}
	return false
}

func (x *GetChatInfoResp) GetExportedInvite() string {
	if x != nil {
		return x.ExportedInvite
	}
	return ""
}

func (x *GetChatInfoResp) GetEncry() bool {
	if x != nil {
		return x.Encry
	}
	return false
}

func (x *GetChatInfoResp) GetCreator() int32 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *GetChatInfoResp) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetChatInfoResp) GetPhoto() []byte {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *GetChatInfoResp) GetFullPhoto() []byte {
	if x != nil {
		return x.FullPhoto
	}
	return nil
}

func (x *GetChatInfoResp) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *GetChatInfoResp) GetParticipantsCount() int32 {
	if x != nil {
		return x.ParticipantsCount
	}
	return 0
}

func (x *GetChatInfoResp) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *GetChatInfoResp) GetMigrateTo() string {
	if x != nil {
		return x.MigrateTo
	}
	return ""
}

func (x *GetChatInfoResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// Fid参数
type FidPara struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fid uint64 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"` // 存储服务分配存储文件的唯一标识
}

func (x *FidPara) Reset() {
	*x = FidPara{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FidPara) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FidPara) ProtoMessage() {}

func (x *FidPara) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FidPara.ProtoReflect.Descriptor instead.
func (*FidPara) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

func (x *FidPara) GetFid() uint64 {
	if x != nil {
		return x.Fid
	}
	return 0
}

// 用户信息数组
type UserInfoArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userin []*UserInfo `protobuf:"bytes,1,rep,name=userin,proto3" json:"userin,omitempty"`
}

func (x *UserInfoArray) Reset() {
	*x = UserInfoArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoArray) ProtoMessage() {}

func (x *UserInfoArray) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoArray.ProtoReflect.Descriptor instead.
func (*UserInfoArray) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

func (x *UserInfoArray) GetUserin() []*UserInfo {
	if x != nil {
		return x.Userin
	}
	return nil
}

// 查询出来的用户基础信息（self 、contact、 mutual_contact 需要在逻辑中判断 ）
type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId               int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户的id
	AccessHash           int64  `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	FirstName            string `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName             string `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Username             string `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	Phone                string `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`                                                              //用户的电话号码
	Status               int32  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`                                                           //是否在线的标识	0 代表不在线 1代表在线
	LastLogout           int32  `protobuf:"varint,8,opt,name=last_logout,json=lastLogout,proto3" json:"last_logout,omitempty"`                                 //最后在线时间
	ClusterRegion        int32  `protobuf:"varint,9,opt,name=cluster_region,json=clusterRegion,proto3" json:"cluster_region,omitempty"`                        // 用户所在的dc
	FontRgb              string `protobuf:"bytes,10,opt,name=font_rgb,json=fontRgb,proto3" json:"font_rgb,omitempty"`                                          //用户的特色字体颜色（扩展使用） {0,0,0}
	CountryCode          string `protobuf:"bytes,11,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`                              //用户的国家码
	Photo                string `protobuf:"bytes,12,opt,name=photo,proto3" json:"photo,omitempty"`                                                             //用户头像为json格式
	BotInfoVersion       int32  `protobuf:"varint,13,opt,name=bot_info_version,json=botInfoVersion,proto3" json:"bot_info_version,omitempty"`                  //机器人version
	BotInlinePlaceholder string `protobuf:"bytes,14,opt,name=bot_inline_placeholder,json=botInlinePlaceholder,proto3" json:"bot_inline_placeholder,omitempty"` //机器人相关
	RestrictionReason    string `protobuf:"bytes,15,opt,name=restriction_reason,json=restrictionReason,proto3" json:"restriction_reason,omitempty"`
	LangCode             string `protobuf:"bytes,16,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"` //国家语言代码
	LocalPhone           string `protobuf:"bytes,17,opt,name=local_phone,json=localPhone,proto3" json:"local_phone,omitempty"`
	Deleted              bool   `protobuf:"varint,18,opt,name=deleted,proto3" json:"deleted,omitempty"`
	Bot                  bool   `protobuf:"varint,19,opt,name=bot,proto3" json:"bot,omitempty"`
	BotChatHistory       bool   `protobuf:"varint,20,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNochats           bool   `protobuf:"varint,21,opt,name=bot_nochats,json=botNochats,proto3" json:"bot_nochats,omitempty"`
	Verified             bool   `protobuf:"varint,22,opt,name=verified,proto3" json:"verified,omitempty"`
	Restricted           bool   `protobuf:"varint,23,opt,name=restricted,proto3" json:"restricted,omitempty"`
	Min                  bool   `protobuf:"varint,24,opt,name=min,proto3" json:"min,omitempty"`
	BotInlineGeo         bool   `protobuf:"varint,25,opt,name=bot_inline_geo,json=botInlineGeo,proto3" json:"bot_inline_geo,omitempty"`
	Self                 bool   `protobuf:"varint,26,opt,name=self,proto3" json:"self,omitempty"`                                                   //是否是自己
	Contact              bool   `protobuf:"varint,27,opt,name=contact,proto3" json:"contact,omitempty"`                                             //是否是自己联系人
	MutalContact         bool   `protobuf:"varint,28,opt,name=mutal_contact,json=mutalContact,proto3" json:"mutal_contact,omitempty"`               //是否是双向联系人
	StarMark             bool   `protobuf:"varint,29,opt,name=star_mark,json=starMark,proto3" json:"star_mark,omitempty"`                           // 是否星标联系人
	ShowContactPhone     bool   `protobuf:"varint,30,opt,name=show_contact_phone,json=showContactPhone,proto3" json:"show_contact_phone,omitempty"` //是否显示联系人手机
	GroupId              int32  `protobuf:"varint,31,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`                              // 组
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{5}
}

func (x *UserInfo) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserInfo) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *UserInfo) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *UserInfo) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *UserInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserInfo) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UserInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserInfo) GetLastLogout() int32 {
	if x != nil {
		return x.LastLogout
	}
	return 0
}

func (x *UserInfo) GetClusterRegion() int32 {
	if x != nil {
		return x.ClusterRegion
	}
	return 0
}

func (x *UserInfo) GetFontRgb() string {
	if x != nil {
		return x.FontRgb
	}
	return ""
}

func (x *UserInfo) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *UserInfo) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

func (x *UserInfo) GetBotInfoVersion() int32 {
	if x != nil {
		return x.BotInfoVersion
	}
	return 0
}

func (x *UserInfo) GetBotInlinePlaceholder() string {
	if x != nil {
		return x.BotInlinePlaceholder
	}
	return ""
}

func (x *UserInfo) GetRestrictionReason() string {
	if x != nil {
		return x.RestrictionReason
	}
	return ""
}

func (x *UserInfo) GetLangCode() string {
	if x != nil {
		return x.LangCode
	}
	return ""
}

func (x *UserInfo) GetLocalPhone() string {
	if x != nil {
		return x.LocalPhone
	}
	return ""
}

func (x *UserInfo) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *UserInfo) GetBot() bool {
	if x != nil {
		return x.Bot
	}
	return false
}

func (x *UserInfo) GetBotChatHistory() bool {
	if x != nil {
		return x.BotChatHistory
	}
	return false
}

func (x *UserInfo) GetBotNochats() bool {
	if x != nil {
		return x.BotNochats
	}
	return false
}

func (x *UserInfo) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *UserInfo) GetRestricted() bool {
	if x != nil {
		return x.Restricted
	}
	return false
}

func (x *UserInfo) GetMin() bool {
	if x != nil {
		return x.Min
	}
	return false
}

func (x *UserInfo) GetBotInlineGeo() bool {
	if x != nil {
		return x.BotInlineGeo
	}
	return false
}

func (x *UserInfo) GetSelf() bool {
	if x != nil {
		return x.Self
	}
	return false
}

func (x *UserInfo) GetContact() bool {
	if x != nil {
		return x.Contact
	}
	return false
}

func (x *UserInfo) GetMutalContact() bool {
	if x != nil {
		return x.MutalContact
	}
	return false
}

func (x *UserInfo) GetStarMark() bool {
	if x != nil {
		return x.StarMark
	}
	return false
}

func (x *UserInfo) GetShowContactPhone() bool {
	if x != nil {
		return x.ShowContactPhone
	}
	return false
}

func (x *UserInfo) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type UserMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64        `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`                      // 唯一键
	UserId       int32        `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`              // 用户ID
	WithId       int32        `protobuf:"varint,3,opt,name=WithId,proto3" json:"WithId,omitempty"`              // 消息交互方
	WithIdType   int32        `protobuf:"varint,4,opt,name=WithIdType,proto3" json:"WithIdType,omitempty"`      // 消息交互方类型 1.user 2:chat 3:channel
	MessageType  int32        `protobuf:"varint,5,opt,name=MessageType,proto3" json:"MessageType,omitempty"`    // 消息类型
	Flags        int32        `protobuf:"varint,6,opt,name=Flags,proto3" json:"Flags,omitempty"`                // 消息标识
	Out          bool         `protobuf:"varint,7,opt,name=Out,proto3" json:"Out,omitempty"`                    // 是否为自己发送
	Mentioned    bool         `protobuf:"varint,8,opt,name=Mentioned,proto3" json:"Mentioned,omitempty"`        // 是否提及他人
	MediaUnread  bool         `protobuf:"varint,9,opt,name=MediaUnread,proto3" json:"MediaUnread,omitempty"`    // 媒体是否已读
	Silent       bool         `protobuf:"varint,10,opt,name=Silent,proto3" json:"Silent,omitempty"`             // 是否静音
	Post         bool         `protobuf:"varint,11,opt,name=Post,proto3" json:"Post,omitempty"`                 // 是否邮递
	GroupId      int64        `protobuf:"varint,12,opt,name=GroupId,proto3" json:"GroupId,omitempty"`           // 图片组ID
	MsgId        int32        `protobuf:"varint,13,opt,name=MsgId,proto3" json:"MsgId,omitempty"`               // 消息id
	ToId         int32        `protobuf:"varint,14,opt,name=ToId,proto3" json:"ToId,omitempty"`                 // 接收方id
	Pts          int32        `protobuf:"varint,15,opt,name=Pts,proto3" json:"Pts,omitempty"`                   // 消息的pts
	FwdFrom      []byte       `protobuf:"bytes,16,opt,name=FwdFrom,proto3" json:"FwdFrom,omitempty"`            // 引用
	ViaBotId     int32        `protobuf:"varint,17,opt,name=ViaBotId,proto3" json:"ViaBotId,omitempty"`         // 机器人id
	ReplyToMsgId int32        `protobuf:"varint,18,opt,name=ReplyToMsgId,proto3" json:"ReplyToMsgId,omitempty"` // 回复id
	Date         int32        `protobuf:"varint,19,opt,name=Date,proto3" json:"Date,omitempty"`                 // 时间
	Message      string       `protobuf:"bytes,20,opt,name=Message,proto3" json:"Message,omitempty"`            // 消息内容
	Media        int64        `protobuf:"varint,21,opt,name=Media,proto3" json:"Media,omitempty"`               // 媒体id
	MediaData    []byte       `protobuf:"bytes,22,opt,name=MediaData,proto3" json:"MediaData,omitempty"`        // 媒体二进制
	ReplyMarkup  []byte       `protobuf:"bytes,23,opt,name=ReplyMarkup,proto3" json:"ReplyMarkup,omitempty"`    // 小键盘
	Entities     [][]byte     `protobuf:"bytes,24,rep,name=Entities,proto3" json:"Entities,omitempty"`          // 高亮
	FromId       int32        `protobuf:"varint,25,opt,name=FromId,proto3" json:"FromId,omitempty"`             // 发送方
	Views        int32        `protobuf:"varint,26,opt,name=Views,proto3" json:"Views,omitempty"`               // 查看人数
	EditDate     int32        `protobuf:"varint,27,opt,name=EditDate,proto3" json:"EditDate,omitempty"`         // 编辑时间
	Action       []byte       `protobuf:"bytes,28,opt,name=Action,proto3" json:"Action,omitempty"`              // 行为
	RandomId     int64        `protobuf:"varint,29,opt,name=RandomId,proto3" json:"RandomId,omitempty"`         // 随机id
	Uuid         int64        `protobuf:"varint,30,opt,name=Uuid,proto3" json:"Uuid,omitempty"`                 // 消息全局唯一id
	InsertDate   int32        `protobuf:"varint,31,opt,name=InsertDate,proto3" json:"InsertDate,omitempty"`     // 插入时间
	UpdateDate   int32        `protobuf:"varint,32,opt,name=UpdateDate,proto3" json:"UpdateDate,omitempty"`     // 更新时间
	Encry        int32        `protobuf:"varint,33,opt,name=Encry,proto3" json:"Encry,omitempty"`               // 是否加密信息 0: 不加密 1：加密
	Combination  *Combination `protobuf:"bytes,34,opt,name=Combination,proto3" json:"Combination,omitempty"`    // 预留字段
}

func (x *UserMsg) Reset() {
	*x = UserMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMsg) ProtoMessage() {}

func (x *UserMsg) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMsg.ProtoReflect.Descriptor instead.
func (*UserMsg) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{6}
}

func (x *UserMsg) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserMsg) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserMsg) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *UserMsg) GetWithIdType() int32 {
	if x != nil {
		return x.WithIdType
	}
	return 0
}

func (x *UserMsg) GetMessageType() int32 {
	if x != nil {
		return x.MessageType
	}
	return 0
}

func (x *UserMsg) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *UserMsg) GetOut() bool {
	if x != nil {
		return x.Out
	}
	return false
}

func (x *UserMsg) GetMentioned() bool {
	if x != nil {
		return x.Mentioned
	}
	return false
}

func (x *UserMsg) GetMediaUnread() bool {
	if x != nil {
		return x.MediaUnread
	}
	return false
}

func (x *UserMsg) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

func (x *UserMsg) GetPost() bool {
	if x != nil {
		return x.Post
	}
	return false
}

func (x *UserMsg) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *UserMsg) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *UserMsg) GetToId() int32 {
	if x != nil {
		return x.ToId
	}
	return 0
}

func (x *UserMsg) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *UserMsg) GetFwdFrom() []byte {
	if x != nil {
		return x.FwdFrom
	}
	return nil
}

func (x *UserMsg) GetViaBotId() int32 {
	if x != nil {
		return x.ViaBotId
	}
	return 0
}

func (x *UserMsg) GetReplyToMsgId() int32 {
	if x != nil {
		return x.ReplyToMsgId
	}
	return 0
}

func (x *UserMsg) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *UserMsg) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UserMsg) GetMedia() int64 {
	if x != nil {
		return x.Media
	}
	return 0
}

func (x *UserMsg) GetMediaData() []byte {
	if x != nil {
		return x.MediaData
	}
	return nil
}

func (x *UserMsg) GetReplyMarkup() []byte {
	if x != nil {
		return x.ReplyMarkup
	}
	return nil
}

func (x *UserMsg) GetEntities() [][]byte {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *UserMsg) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *UserMsg) GetViews() int32 {
	if x != nil {
		return x.Views
	}
	return 0
}

func (x *UserMsg) GetEditDate() int32 {
	if x != nil {
		return x.EditDate
	}
	return 0
}

func (x *UserMsg) GetAction() []byte {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *UserMsg) GetRandomId() int64 {
	if x != nil {
		return x.RandomId
	}
	return 0
}

func (x *UserMsg) GetUuid() int64 {
	if x != nil {
		return x.Uuid
	}
	return 0
}

func (x *UserMsg) GetInsertDate() int32 {
	if x != nil {
		return x.InsertDate
	}
	return 0
}

func (x *UserMsg) GetUpdateDate() int32 {
	if x != nil {
		return x.UpdateDate
	}
	return 0
}

func (x *UserMsg) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

func (x *UserMsg) GetCombination() *Combination {
	if x != nil {
		return x.Combination
	}
	return nil
}

type Combination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MentionedSlice []*MentionStatus `protobuf:"bytes,1,rep,name=MentionedSlice,proto3" json:"MentionedSlice,omitempty"` // @人 二进制
	KeyId          []int64          `protobuf:"varint,2,rep,packed,name=KeyId,proto3" json:"KeyId,omitempty"`           // keyId 判断
}

func (x *Combination) Reset() {
	*x = Combination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Combination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Combination) ProtoMessage() {}

func (x *Combination) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Combination.ProtoReflect.Descriptor instead.
func (*Combination) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{7}
}

func (x *Combination) GetMentionedSlice() []*MentionStatus {
	if x != nil {
		return x.MentionedSlice
	}
	return nil
}

func (x *Combination) GetKeyId() []int64 {
	if x != nil {
		return x.KeyId
	}
	return nil
}

type MentionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Status int32 `protobuf:"varint,2,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *MentionStatus) Reset() {
	*x = MentionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MentionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MentionStatus) ProtoMessage() {}

func (x *MentionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MentionStatus.ProtoReflect.Descriptor instead.
func (*MentionStatus) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{8}
}

func (x *MentionStatus) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MentionStatus) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

var File_common_proto protoreflect.FileDescriptor

var file_common_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c,
	0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x22, 0xeb, 0x01, 0x0a,
	0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x73, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x6f, 0x73, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xc6, 0x08, 0x0a, 0x0f, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x65, 0x67, 0x61, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x6d, 0x65, 0x67, 0x61, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x65, 0x6d, 0x6f, 0x63, 0x72, 0x61, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x64, 0x65, 0x6d, 0x6f, 0x63, 0x72, 0x61, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6b, 0x69, 0x63,
	0x6b, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6b, 0x69, 0x63, 0x6b, 0x65,
	0x64, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x68,
	0x61, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x4b, 0x69, 0x63, 0x6b,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x42, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x42, 0x6f, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73,
	0x49, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x49, 0x73, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x74, 0x69, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x75, 0x74, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x45,
	0x76, 0x65, 0x72, 0x79, 0x6f, 0x6e, 0x65, 0x51, 0x75, 0x69, 0x65, 0x74, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x45, 0x76, 0x65, 0x72, 0x79, 0x6f, 0x6e, 0x65, 0x51, 0x75, 0x69, 0x65,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x22, 0xd1, 0x03, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x12, 0x3c, 0x0a, 0x0a, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x1b, 0x0a, 0x07, 0x46, 0x69, 0x64, 0x50, 0x61,
	0x72, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x66, 0x69, 0x64, 0x22, 0x3f, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x2e, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x69, 0x6e, 0x22, 0xd7, 0x07, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x75,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67,
	0x6f, 0x75, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x6f,
	0x6e, 0x74, 0x5f, 0x72, 0x67, 0x62, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6f,
	0x6e, 0x74, 0x52, 0x67, 0x62, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x28,
	0x0a, 0x10, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x62, 0x6f, 0x74, 0x5f,
	0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x62, 0x6f, 0x74, 0x49, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x2d,
	0x0a, 0x12, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x6f, 0x74, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x03, 0x62, 0x6f, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6f, 0x74, 0x5f, 0x6e, 0x6f, 0x63, 0x68, 0x61, 0x74, 0x73,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x6f, 0x74, 0x4e, 0x6f, 0x63, 0x68, 0x61,
	0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6d, 0x69, 0x6e,
	0x12, 0x24, 0x0a, 0x0e, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x67,
	0x65, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x62, 0x6f, 0x74, 0x49, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x47, 0x65, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x75, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x75, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x74,
	0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22,
	0x94, 0x07, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x57,
	0x69, 0x74, 0x68, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x4f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x4f, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x50, 0x6f, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x50, 0x6f, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x6f, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x54, 0x6f, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x50, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x77, 0x64, 0x46, 0x72,
	0x6f, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x46, 0x77, 0x64, 0x46, 0x72, 0x6f,
	0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x69, 0x61, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x56, 0x69, 0x61, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x72, 0x6b,
	0x75, 0x70, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d,
	0x61, 0x72, 0x6b, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x69, 0x65,
	0x77, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x56, 0x69, 0x65, 0x77, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x45, 0x64, 0x69, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x45, 0x64, 0x69, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x43, 0x6f, 0x6d,
	0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x6f,
	0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x43, 0x6f, 0x6d, 0x62, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x68, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0e, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x64, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4d, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x4d, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x64, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4b, 0x65,
	0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x4b, 0x65, 0x79, 0x49, 0x64,
	0x22, 0x3f, 0x0a, 0x0d, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2a, 0x94, 0x02, 0x0a, 0x0e, 0x45, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x52, 0x43, 0x5f, 0x4f, 0x4b, 0x10, 0x00,
	0x12, 0x18, 0x0a, 0x14, 0x52, 0x52, 0x43, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x45, 0x58, 0x49, 0x53, 0x49, 0x54, 0x53, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x52,
	0x43, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x52, 0x43, 0x5f, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x03, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x52, 0x43, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x5f, 0x45,
	0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x52,
	0x43, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x5f, 0x53, 0x4c, 0x49, 0x43, 0x45, 0x10, 0x05,
	0x12, 0x1b, 0x0a, 0x17, 0x52, 0x52, 0x43, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x49, 0x54, 0x53, 0x10, 0x06, 0x12, 0x16, 0x0a,
	0x12, 0x52, 0x52, 0x43, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x52, 0x43, 0x5f, 0x4e, 0x4f, 0x5f,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x53, 0x10, 0x08, 0x12,
	0x14, 0x0a, 0x10, 0x52, 0x52, 0x43, 0x5f, 0x44, 0x42, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0b, 0x52, 0x52, 0x43, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xff, 0xff, 0x03, 0x2a, 0xe3, 0x05, 0x0a, 0x0e, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x43,
	0x68, 0x61, 0x74, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x14,
	0x43, 0x68, 0x61, 0x74, 0x5f, 0x41, 0x44, 0x44, 0x55, 0x53, 0x45, 0x52, 0x33, 0x35, 0x34, 0x39,
	0x5f, 0x45, 0x58, 0x50, 0x10, 0xa0, 0x1f, 0x12, 0x17, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x74, 0x5f,
	0x55, 0x73, 0x65, 0x72, 0x5f, 0x50, 0x72, 0x69, 0x61, 0x76, 0x63, 0x61, 0x79, 0x10, 0xa1, 0x1f,
	0x12, 0x19, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x54, 0x6f, 0x5f, 0x55, 0x73, 0x65, 0x72,
	0x5f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0xa2, 0x1f, 0x12, 0x16, 0x0a, 0x11, 0x43,
	0x68, 0x61, 0x74, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x10, 0xa3, 0x1f, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x45, 0x50, 0x45,
	0x41, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x10, 0xa4, 0x1f, 0x12, 0x19, 0x0a, 0x14, 0x43,
	0x68, 0x61, 0x74, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x10, 0xa5, 0x1f, 0x12, 0x1e, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x45,
	0x58, 0x43, 0x45, 0x45, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x58,
	0x4e, 0x55, 0x4d, 0x10, 0xa6, 0x1f, 0x12, 0x24, 0x0a, 0x1f, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x45,
	0x58, 0x43, 0x45, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x44, 0x41, 0x59, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x4e, 0x55, 0x4d, 0x10, 0xa7, 0x1f, 0x12, 0x20, 0x0a, 0x1b,
	0x43, 0x68, 0x61, 0x74, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x5f, 0x41, 0x44, 0x44, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x4e, 0x55, 0x4d, 0x10, 0xa8, 0x1f, 0x12, 0x1c,
	0x0a, 0x17, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x50, 0x52, 0x4f, 0x48, 0x49, 0x42, 0x49, 0x54, 0x5f,
	0x41, 0x44, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0xa9, 0x1f, 0x12, 0x1e, 0x0a, 0x19,
	0x43, 0x68, 0x61, 0x74, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xaa, 0x1f, 0x12, 0x1f, 0x0a, 0x1a,
	0x43, 0x68, 0x61, 0x74, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x4c, 0x45, 0x46, 0x54,
	0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xab, 0x1f, 0x12, 0x17, 0x0a,
	0x12, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x44, 0x49, 0x53, 0x42,
	0x41, 0x4e, 0x44, 0x10, 0xac, 0x1f, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x45, 0x44, 0x10, 0xad, 0x1f, 0x12, 0x1f,
	0x0a, 0x1a, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x53, 0x5f, 0x41, 0x44, 0x44,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x4e, 0x55, 0x4d, 0x10, 0x92, 0x20, 0x12,
	0x1e, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x4f, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x44,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x4e, 0x55, 0x4d, 0x10, 0x93, 0x20, 0x12,
	0x11, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x84, 0x20, 0x12, 0x1d, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x45, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x85,
	0x20, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x5f,
	0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x86, 0x20, 0x12, 0x19, 0x0a, 0x14,
	0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x53, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x87, 0x20, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x74, 0x5f,
	0x44, 0x42, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x88, 0x20, 0x12,
	0x1b, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x49, 0x64, 0x5f,
	0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x89, 0x20, 0x12, 0x1f, 0x0a, 0x1a,
	0x43, 0x68, 0x61, 0x74, 0x5f, 0x43, 0x61, 0x6c, 0x6c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x8a, 0x20, 0x12, 0x15, 0x0a,
	0x10, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x44, 0x42, 0x5f, 0x4e, 0x4f, 0x52, 0x45, 0x43, 0x4f, 0x52,
	0x44, 0x10, 0x8b, 0x20, 0x12, 0x18, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x4e, 0x4f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x8c, 0x20, 0x2a, 0x80,
	0x02, 0x0a, 0x09, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x42, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x74,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x55,
	0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x4e,
	0x6f, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x6e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x10,
	0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x0b, 0x12, 0x0a,
	0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x61,
	0x73, 0x68, 0x4e, 0x6f, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x0d, 0x12, 0x14,
	0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x74, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x10, 0x0e, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x69, 0x70, 0x4f, 0x6e, 0x6c, 0x79, 0x10,
	0x0f, 0x42, 0x1e, 0x5a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70, 0x72,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_proto_rawDescOnce sync.Once
	file_common_proto_rawDescData = file_common_proto_rawDesc
)

func file_common_proto_rawDescGZIP() []byte {
	file_common_proto_rawDescOnce.Do(func() {
		file_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_proto_rawDescData)
	})
	return file_common_proto_rawDescData
}

var file_common_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_common_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_common_proto_goTypes = []interface{}{
	(ERpcResultCode)(0),     // 0: imbotgateway.ERpcResultCode
	(ChatResultCode)(0),     // 1: imbotgateway.ChatResultCode
	(ReErrCode)(0),          // 2: imbotgateway.ReErrCode
	(*Debug)(nil),           // 3: imbotgateway.Debug
	(*ChannelInfoBase)(nil), // 4: imbotgateway.ChannelInfoBase
	(*GetChatInfoResp)(nil), // 5: imbotgateway.GetChatInfoResp
	(*FidPara)(nil),         // 6: imbotgateway.FidPara
	(*UserInfoArray)(nil),   // 7: imbotgateway.UserInfoArray
	(*UserInfo)(nil),        // 8: imbotgateway.userInfo
	(*UserMsg)(nil),         // 9: imbotgateway.UserMsg
	(*Combination)(nil),     // 10: imbotgateway.Combination
	(*MentionStatus)(nil),   // 11: imbotgateway.MentionStatus
}
var file_common_proto_depIdxs = []int32{
	1,  // 0: imbotgateway.GetChatInfoResp.resultcode:type_name -> imbotgateway.ChatResultCode
	8,  // 1: imbotgateway.UserInfoArray.userin:type_name -> imbotgateway.userInfo
	10, // 2: imbotgateway.UserMsg.Combination:type_name -> imbotgateway.Combination
	11, // 3: imbotgateway.Combination.MentionedSlice:type_name -> imbotgateway.MentionStatus
	4,  // [4:4] is the sub-list for method output_type
	4,  // [4:4] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_common_proto_init() }
func file_common_proto_init() {
	if File_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Debug); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelInfoBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChatInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FidPara); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Combination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MentionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_proto_goTypes,
		DependencyIndexes: file_common_proto_depIdxs,
		EnumInfos:         file_common_proto_enumTypes,
		MessageInfos:      file_common_proto_msgTypes,
	}.Build()
	File_common_proto = out.File
	file_common_proto_rawDesc = nil
	file_common_proto_goTypes = nil
	file_common_proto_depIdxs = nil
}
