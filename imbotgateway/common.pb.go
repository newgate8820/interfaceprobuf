// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/imbotgateway/common.proto

/*
Package imbotgateway is a generated protocol buffer package.

It is generated from these files:

	gitlab.chatserver.im/interfaceprobuf/imbotgateway/common.proto
	gitlab.chatserver.im/interfaceprobuf/imbotgateway/imbotgateway.proto

It has these top-level messages:

	Debug
	ChannelInfoBase
	GetChatInfoResp
	FidPara
	UserInfoArray
	UserInfo
	UserMsg
	Combination
	MentionStatus
	ReqGetFullChannel
	ReqGetParticipants
	ReqUpdatePinnedChannelMessage
	ReqEditChannelAbout
	ReqEditChannelTitle
	ReplyChannelData
	ReqDelManualBlockList
	ReqSetManualBlockList
	BlockUser
	ManualBlockReplyData
	StoreShopStickerSetDocumentsReq
	StoreShopStickerSetDocumentsResult
	AuthorStickerSet
	GetAuthorAllStickerSetReq
	GetAuthorAllStickerSetResult
	DeleteStickerPackDocumentReq
	DeleteStickerPackDocumentResult
	GetStickerSetInfoReq
	StickerSetInfo
	GetStickerSetInfoResult
	DeleteStickerSetReq
	DeleteStickerSetResult
	StoreUserStickerSetReq
	StoreUserStickerSetResult
	StoreStickerPackDcReq
	StoreStickerPackDcResult
	StoreShopStickerSetReq
	StoreShopStickerSetResult
	ResizeRequest
	ResizeReply
	ConstraintRequest
	ConstraintReply
	CompressImageRequest
	CompressImageReply
	VideoPreviewRequest
	VideoPreviewReply
	AudioPreviewRequest
	AudioPreviewReply
	ReqParticipants
	ReplyParticipants
	ReqCreateChat
	ReplyCreateChat
	ReqMigrateChat
	ReplyMigrateChat
	ReqJoinChannel
	ReplyJoinChannel
	ReqChangeGroupAndChannelCrator
	ReplyChangeGroupAndChannelCrator
	ReqBotCallMessageMedia
	RequestDialog
	ReplyDialog
	UserScore
	ReqSetGameScore
	ReplySetGameScore
	ReplyBanChannelUser
	ReqBanChannelUser
	ChannelBannedRights
	ReqGetChannels
	ReplyGetChannels
	ReqDeleteChatUser
	ReplyDeleteChatUser
	ChannelInactiveUser
	GetChannelInactiveUsersReq
	GetChannelInactiveUsersResult
	ReqBotInlineCall
	ReplyBotInlineCall
	InlineCall
	ReqSendUserMsg
	ReplyBool
	ReqBotCall
	ReplyBotCall
	ReqGetMessageByUserIdUuid
	ReplyGetMessageByUserIdUuid
	ReqGetChannelMessageByChannelIdMsgId
	ReplyGetChannelMessageByChannelIdMsgId
	ReqGetMessageByUserIdMsgId
	ReplyGetMessageByUserIdMsgId
	MsgFileDescReq
	MsgFileDescResp
	MsgServiceLimitReq
	MsgServiceLimitResp
	MsgGetFidReq
	MsgGetFidResp
	MsgFilePartsReq
	MsgFilePartsResp
	MsgUploadFileReq
	UploadReqPara1
	UploadReqPara2
	FileUploadRespPara
	MsgUploadFileResp
	MsgDownloadFileReq
	DownloadFileRespPara1
	DownloadFileRespPara2
	MsgDownloadFileResp
	MsgQueryObjInfoReq
	QueryObjInfoRespPara
	MsgQueryObjInfoResp
	MsgGetFileDescReq
	MsgGetFileDescResp
	GetChannelInfoReq
	GetChannelInfoResp
	ReqGetAdminGroups
	ReqGetGroups
	Peer
	ReplyGetGroups
	ReqDeleteMessage
	ReqSendChatAction
	ReqData
	ReplyData
	ReqGetChatMembersCount
	ReplyGetChatMembersCount
	GetChatInfoReq
	GetUsersChatsReq
	GetUsersChatsResult
	GetUserInfoByIdReq
	GetUserInfoByIdArrReq
	UpdateUserProfileReq
	UpdateUserProfileResult
	GetUserByphone
	GetUserInfoResult
	UpdateBotInfoSuppReq
	UpdateBotInfoSuppResult
	BotUpdateInfo
	BotUpdateInfoResult
	UpdateBotPicRequest
	UpdateBotPicResult
	UpdateuserNameReq
	UpdateuserNameResult
	RegisterUserInfoReq
	RegisterUserInfoResult
	DeleteAccountByIdReq
	DelAccountResult
	SignUpReq
	AuthSignUpResult
	GetFullUserReq
	GetFullUserResult
	GetUserByUsername
	ReqGetFullChat
	ReplyGetFullChat
	ReqLeaveChannel
	ReplyLeaveChannel
	ReqSendMedia
	ReplyResult
	ReqEditChatTitle
	ReplyEditChatTitle
	GetStickerSetPackDcInfosReq
	GetStickerSetPackDcInfosResult
	StickerPackDocumentBase
	StickerPackDocumentInfo
*/
package imbotgateway

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// 结果码定义，后续在此添加 ...
type ERpcResultCode int32

const (
	ERpcResultCode_RRC_OK                  ERpcResultCode = 0
	ERpcResultCode_RRC_FILE_NOT_EXISITS    ERpcResultCode = 1
	ERpcResultCode_RRC_SYSTEM_EXCEPTION    ERpcResultCode = 2
	ERpcResultCode_RRC_PARAMETER_EXCEPTION ERpcResultCode = 3
	ERpcResultCode_RRC_LOGIC_EXCEPTION     ERpcResultCode = 4
	ERpcResultCode_RRC_REPEAT_SLICE        ERpcResultCode = 5
	ERpcResultCode_RRC_SESSION_NOT_EXISITS ERpcResultCode = 6
	ERpcResultCode_RRC_DATA_EXCEPTION      ERpcResultCode = 7
	ERpcResultCode_RRC_NO_ACCESS_RIGHTS    ERpcResultCode = 8
	ERpcResultCode_RRC_DB_EXCEPTION        ERpcResultCode = 9
	ERpcResultCode_RRC_UNKNOWN             ERpcResultCode = 65535
)

var ERpcResultCode_name = map[int32]string{
	0:     "RRC_OK",
	1:     "RRC_FILE_NOT_EXISITS",
	2:     "RRC_SYSTEM_EXCEPTION",
	3:     "RRC_PARAMETER_EXCEPTION",
	4:     "RRC_LOGIC_EXCEPTION",
	5:     "RRC_REPEAT_SLICE",
	6:     "RRC_SESSION_NOT_EXISITS",
	7:     "RRC_DATA_EXCEPTION",
	8:     "RRC_NO_ACCESS_RIGHTS",
	9:     "RRC_DB_EXCEPTION",
	65535: "RRC_UNKNOWN",
}
var ERpcResultCode_value = map[string]int32{
	"RRC_OK":                  0,
	"RRC_FILE_NOT_EXISITS":    1,
	"RRC_SYSTEM_EXCEPTION":    2,
	"RRC_PARAMETER_EXCEPTION": 3,
	"RRC_LOGIC_EXCEPTION":     4,
	"RRC_REPEAT_SLICE":        5,
	"RRC_SESSION_NOT_EXISITS": 6,
	"RRC_DATA_EXCEPTION":      7,
	"RRC_NO_ACCESS_RIGHTS":    8,
	"RRC_DB_EXCEPTION":        9,
	"RRC_UNKNOWN":             65535,
}

func (x ERpcResultCode) String() string {
	return proto.EnumName(ERpcResultCode_name, int32(x))
}
func (ERpcResultCode) EnumDescriptor() ([]byte, []int) { return fileDescriptorCommon, []int{0} }

type ChatResultCode int32

const (
	ChatResultCode_Chat_RPC_OK                     ChatResultCode = 0
	ChatResultCode_Chat_ADDUSER3549_EXP            ChatResultCode = 4000
	ChatResultCode_Chat_User_Priavcay              ChatResultCode = 4001
	ChatResultCode_Chat_To_User_Blocked            ChatResultCode = 4002
	ChatResultCode_Chat_User_Blocked               ChatResultCode = 4003
	ChatResultCode_Chat_REPEAT_CREAT               ChatResultCode = 4004
	ChatResultCode_Chat_REPEAT_ADD_USER            ChatResultCode = 4005
	ChatResultCode_Chat_EXCEED_CREATE_MAXNUM       ChatResultCode = 4006
	ChatResultCode_Chat_EXCEED_TODAY_CREATE_MAXNUM ChatResultCode = 4007
	ChatResultCode_Chat_EXCEED_ADD_USER_MAXNUM     ChatResultCode = 4008
	ChatResultCode_Chat_PROHIBIT_ADD_GROUP         ChatResultCode = 4009
	ChatResultCode_Chat_ADMINLEVEL_EXCEPTION       ChatResultCode = 4010
	ChatResultCode_Chat_ALREADYLEFT_EXCEPTION      ChatResultCode = 4011
	ChatResultCode_Chat_GROUP_DISBAND              ChatResultCode = 4012
	ChatResultCode_Chat_GROUP_KICKED               ChatResultCode = 4013
	ChatResultCode_Chat_HOURS_ADD_USER_MAXNUM      ChatResultCode = 4114
	ChatResultCode_Chat_ONCE_ADD_USER_MAXNUM       ChatResultCode = 4115
	//
	ChatResultCode_Chat_UNKNOWN               ChatResultCode = 4100
	ChatResultCode_Chat_PARAMETER_EXCEPTION   ChatResultCode = 4101
	ChatResultCode_Chat_LOGIC_EXCEPTION       ChatResultCode = 4102
	ChatResultCode_Chat_REDIS_EXCEPTION       ChatResultCode = 4103
	ChatResultCode_Chat_DB_EXCEPTION          ChatResultCode = 4104
	ChatResultCode_Chat_AllocId_EXCEPTION     ChatResultCode = 4105
	ChatResultCode_Chat_CallGetUser_EXCEPTION ChatResultCode = 4106
	ChatResultCode_Chat_DB_NORECORD           ChatResultCode = 4107
	ChatResultCode_Chat_Group_NORECORD        ChatResultCode = 4108
)

var ChatResultCode_name = map[int32]string{
	0:    "Chat_RPC_OK",
	4000: "Chat_ADDUSER3549_EXP",
	4001: "Chat_User_Priavcay",
	4002: "Chat_To_User_Blocked",
	4003: "Chat_User_Blocked",
	4004: "Chat_REPEAT_CREAT",
	4005: "Chat_REPEAT_ADD_USER",
	4006: "Chat_EXCEED_CREATE_MAXNUM",
	4007: "Chat_EXCEED_TODAY_CREATE_MAXNUM",
	4008: "Chat_EXCEED_ADD_USER_MAXNUM",
	4009: "Chat_PROHIBIT_ADD_GROUP",
	4010: "Chat_ADMINLEVEL_EXCEPTION",
	4011: "Chat_ALREADYLEFT_EXCEPTION",
	4012: "Chat_GROUP_DISBAND",
	4013: "Chat_GROUP_KICKED",
	4114: "Chat_HOURS_ADD_USER_MAXNUM",
	4115: "Chat_ONCE_ADD_USER_MAXNUM",
	4100: "Chat_UNKNOWN",
	4101: "Chat_PARAMETER_EXCEPTION",
	4102: "Chat_LOGIC_EXCEPTION",
	4103: "Chat_REDIS_EXCEPTION",
	4104: "Chat_DB_EXCEPTION",
	4105: "Chat_AllocId_EXCEPTION",
	4106: "Chat_CallGetUser_EXCEPTION",
	4107: "Chat_DB_NORECORD",
	4108: "Chat_Group_NORECORD",
}
var ChatResultCode_value = map[string]int32{
	"Chat_RPC_OK":                     0,
	"Chat_ADDUSER3549_EXP":            4000,
	"Chat_User_Priavcay":              4001,
	"Chat_To_User_Blocked":            4002,
	"Chat_User_Blocked":               4003,
	"Chat_REPEAT_CREAT":               4004,
	"Chat_REPEAT_ADD_USER":            4005,
	"Chat_EXCEED_CREATE_MAXNUM":       4006,
	"Chat_EXCEED_TODAY_CREATE_MAXNUM": 4007,
	"Chat_EXCEED_ADD_USER_MAXNUM":     4008,
	"Chat_PROHIBIT_ADD_GROUP":         4009,
	"Chat_ADMINLEVEL_EXCEPTION":       4010,
	"Chat_ALREADYLEFT_EXCEPTION":      4011,
	"Chat_GROUP_DISBAND":              4012,
	"Chat_GROUP_KICKED":               4013,
	"Chat_HOURS_ADD_USER_MAXNUM":      4114,
	"Chat_ONCE_ADD_USER_MAXNUM":       4115,
	"Chat_UNKNOWN":                    4100,
	"Chat_PARAMETER_EXCEPTION":        4101,
	"Chat_LOGIC_EXCEPTION":            4102,
	"Chat_REDIS_EXCEPTION":            4103,
	"Chat_DB_EXCEPTION":               4104,
	"Chat_AllocId_EXCEPTION":          4105,
	"Chat_CallGetUser_EXCEPTION":      4106,
	"Chat_DB_NORECORD":                4107,
	"Chat_Group_NORECORD":             4108,
}

func (x ChatResultCode) String() string {
	return proto.EnumName(ChatResultCode_name, int32(x))
}
func (ChatResultCode) EnumDescriptor() ([]byte, []int) { return fileDescriptorCommon, []int{1} }

type ReErrCode int32

const (
	ReErrCode_Success          ReErrCode = 0
	ReErrCode_DBError          ReErrCode = 1
	ReErrCode_InternalError    ReErrCode = 2
	ReErrCode_NotExist         ReErrCode = 3
	ReErrCode_UserNameOccupied ReErrCode = 4
	ReErrCode_Register         ReErrCode = 5
	ReErrCode_Unregister       ReErrCode = 6
	ReErrCode_NotModify        ReErrCode = 7
	ReErrCode_Blocked          ReErrCode = 8
	ReErrCode_UnBlocked        ReErrCode = 9
	ReErrCode_Valid            ReErrCode = 10
	ReErrCode_UnValid          ReErrCode = 11
	ReErrCode_Failed           ReErrCode = 12
	ReErrCode_HashNotSuccess   ReErrCode = 13
	ReErrCode_UsernameNotEmpty ReErrCode = 14
	ReErrCode_VipOnly          ReErrCode = 15
)

var ReErrCode_name = map[int32]string{
	0:  "Success",
	1:  "DBError",
	2:  "InternalError",
	3:  "NotExist",
	4:  "UserNameOccupied",
	5:  "Register",
	6:  "Unregister",
	7:  "NotModify",
	8:  "Blocked",
	9:  "UnBlocked",
	10: "Valid",
	11: "UnValid",
	12: "Failed",
	13: "HashNotSuccess",
	14: "UsernameNotEmpty",
	15: "VipOnly",
}
var ReErrCode_value = map[string]int32{
	"Success":          0,
	"DBError":          1,
	"InternalError":    2,
	"NotExist":         3,
	"UserNameOccupied": 4,
	"Register":         5,
	"Unregister":       6,
	"NotModify":        7,
	"Blocked":          8,
	"UnBlocked":        9,
	"Valid":            10,
	"UnValid":          11,
	"Failed":           12,
	"HashNotSuccess":   13,
	"UsernameNotEmpty": 14,
	"VipOnly":          15,
}

func (x ReErrCode) String() string {
	return proto.EnumName(ReErrCode_name, int32(x))
}
func (ReErrCode) EnumDescriptor() ([]byte, []int) { return fileDescriptorCommon, []int{2} }

// 日志格式结构
type Debug struct {
	Userid     int32  `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Phone      string `protobuf:"bytes,2,opt,name=Phone,proto3" json:"Phone,omitempty"`
	Ip         string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	KeyId      uint64 `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	SessionId  uint64 `protobuf:"varint,5,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Layer      int32  `protobuf:"varint,6,opt,name=layer,proto3" json:"layer,omitempty"`
	Ostype     uint32 `protobuf:"varint,7,opt,name=ostype,proto3" json:"ostype,omitempty"`
	CurrentCrc uint32 `protobuf:"varint,8,opt,name=current_crc,json=currentCrc,proto3" json:"current_crc,omitempty"`
	AppVersion string `protobuf:"bytes,9,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
}

func (m *Debug) Reset()                    { *m = Debug{} }
func (m *Debug) String() string            { return proto.CompactTextString(m) }
func (*Debug) ProtoMessage()               {}
func (*Debug) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{0} }

func (m *Debug) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *Debug) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *Debug) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Debug) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *Debug) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *Debug) GetLayer() int32 {
	if m != nil {
		return m.Layer
	}
	return 0
}

func (m *Debug) GetOstype() uint32 {
	if m != nil {
		return m.Ostype
	}
	return 0
}

func (m *Debug) GetCurrentCrc() uint32 {
	if m != nil {
		return m.CurrentCrc
	}
	return 0
}

func (m *Debug) GetAppVersion() string {
	if m != nil {
		return m.AppVersion
	}
	return ""
}

// 群基础信息
type ChannelInfoBase struct {
	ChannelId         int32  `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	AccessHash        int64  `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Encry             bool   `protobuf:"varint,3,opt,name=encry,proto3" json:"encry,omitempty"`
	Broadcast         bool   `protobuf:"varint,4,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
	Verified          bool   `protobuf:"varint,5,opt,name=verified,proto3" json:"verified,omitempty"`
	Megagroup         bool   `protobuf:"varint,6,opt,name=megagroup,proto3" json:"megagroup,omitempty"`
	Restricted        bool   `protobuf:"varint,7,opt,name=restricted,proto3" json:"restricted,omitempty"`
	Democracy         bool   `protobuf:"varint,8,opt,name=democracy,proto3" json:"democracy,omitempty"`
	Signatures        bool   `protobuf:"varint,9,opt,name=signatures,proto3" json:"signatures,omitempty"`
	Min               bool   `protobuf:"varint,10,opt,name=min,proto3" json:"min,omitempty"`
	Title             string `protobuf:"bytes,11,opt,name=title,proto3" json:"title,omitempty"`
	Username          string `protobuf:"bytes,12,opt,name=username,proto3" json:"username,omitempty"`
	Photo             string `protobuf:"bytes,13,opt,name=photo,proto3" json:"photo,omitempty"`
	Date              int32  `protobuf:"varint,14,opt,name=date,proto3" json:"date,omitempty"`
	Version           int32  `protobuf:"varint,15,opt,name=version,proto3" json:"version,omitempty"`
	RestrictionReason string `protobuf:"bytes,16,opt,name=restriction_reason,json=restrictionReason,proto3" json:"restriction_reason,omitempty"`
	Cluster           int32  `protobuf:"varint,17,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// bool moderator = 18; //是不是主持人
	IsCreator bool `protobuf:"varint,18,opt,name=is_creator,json=isCreator,proto3" json:"is_creator,omitempty"`
	// bool editor = 19; //是否是管理员
	IsAdmin            bool   `protobuf:"varint,19,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin,omitempty"`
	Left               bool   `protobuf:"varint,20,opt,name=left,proto3" json:"left,omitempty"`
	Kicked             bool   `protobuf:"varint,21,opt,name=kicked,proto3" json:"kicked,omitempty"`
	MigratedFromChatId int32  `protobuf:"varint,22,opt,name=migrated_from_chat_id,json=migratedFromChatId,proto3" json:"migrated_from_chat_id,omitempty"`
	InviteRule         int32  `protobuf:"varint,23,opt,name=invite_rule,json=inviteRule,proto3" json:"invite_rule,omitempty"`
	AdminsCount        int32  `protobuf:"varint,24,opt,name=Admins_count,json=AdminsCount,proto3" json:"Admins_count,omitempty"`
	KickedCount        int32  `protobuf:"varint,25,opt,name=Kicked_count,json=KickedCount,proto3" json:"Kicked_count,omitempty"`
	BannedCount        int32  `protobuf:"varint,26,opt,name=Banned_count,json=BannedCount,proto3" json:"Banned_count,omitempty"`
	BotCount           int32  `protobuf:"varint,27,opt,name=Bot_count,json=BotCount,proto3" json:"Bot_count,omitempty"`
	ParticipantsCount  int32  `protobuf:"varint,28,opt,name=Participants_count,json=ParticipantsCount,proto3" json:"Participants_count,omitempty"`
	IsInChannel        bool   `protobuf:"varint,29,opt,name=IsInChannel,proto3" json:"IsInChannel,omitempty"`
	UtilDate           int32  `protobuf:"varint,30,opt,name=util_date,json=utilDate,proto3" json:"util_date,omitempty"`
	ExportedInviteLink string `protobuf:"bytes,31,opt,name=exported_invite_link,json=exportedInviteLink,proto3" json:"exported_invite_link,omitempty"`
	Creator            int32  `protobuf:"varint,32,opt,name=Creator,proto3" json:"Creator,omitempty"`
	About              string `protobuf:"bytes,33,opt,name=About,proto3" json:"About,omitempty"`
	EveryoneQuiet      bool   `protobuf:"varint,34,opt,name=EveryoneQuiet,proto3" json:"EveryoneQuiet,omitempty"`
	PrivateChat        bool   `protobuf:"varint,35,opt,name=PrivateChat,proto3" json:"PrivateChat,omitempty"`
}

func (m *ChannelInfoBase) Reset()                    { *m = ChannelInfoBase{} }
func (m *ChannelInfoBase) String() string            { return proto.CompactTextString(m) }
func (*ChannelInfoBase) ProtoMessage()               {}
func (*ChannelInfoBase) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{1} }

func (m *ChannelInfoBase) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannelInfoBase) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ChannelInfoBase) GetEncry() bool {
	if m != nil {
		return m.Encry
	}
	return false
}

func (m *ChannelInfoBase) GetBroadcast() bool {
	if m != nil {
		return m.Broadcast
	}
	return false
}

func (m *ChannelInfoBase) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

func (m *ChannelInfoBase) GetMegagroup() bool {
	if m != nil {
		return m.Megagroup
	}
	return false
}

func (m *ChannelInfoBase) GetRestricted() bool {
	if m != nil {
		return m.Restricted
	}
	return false
}

func (m *ChannelInfoBase) GetDemocracy() bool {
	if m != nil {
		return m.Democracy
	}
	return false
}

func (m *ChannelInfoBase) GetSignatures() bool {
	if m != nil {
		return m.Signatures
	}
	return false
}

func (m *ChannelInfoBase) GetMin() bool {
	if m != nil {
		return m.Min
	}
	return false
}

func (m *ChannelInfoBase) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ChannelInfoBase) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ChannelInfoBase) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *ChannelInfoBase) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *ChannelInfoBase) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ChannelInfoBase) GetRestrictionReason() string {
	if m != nil {
		return m.RestrictionReason
	}
	return ""
}

func (m *ChannelInfoBase) GetCluster() int32 {
	if m != nil {
		return m.Cluster
	}
	return 0
}

func (m *ChannelInfoBase) GetIsCreator() bool {
	if m != nil {
		return m.IsCreator
	}
	return false
}

func (m *ChannelInfoBase) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

func (m *ChannelInfoBase) GetLeft() bool {
	if m != nil {
		return m.Left
	}
	return false
}

func (m *ChannelInfoBase) GetKicked() bool {
	if m != nil {
		return m.Kicked
	}
	return false
}

func (m *ChannelInfoBase) GetMigratedFromChatId() int32 {
	if m != nil {
		return m.MigratedFromChatId
	}
	return 0
}

func (m *ChannelInfoBase) GetInviteRule() int32 {
	if m != nil {
		return m.InviteRule
	}
	return 0
}

func (m *ChannelInfoBase) GetAdminsCount() int32 {
	if m != nil {
		return m.AdminsCount
	}
	return 0
}

func (m *ChannelInfoBase) GetKickedCount() int32 {
	if m != nil {
		return m.KickedCount
	}
	return 0
}

func (m *ChannelInfoBase) GetBannedCount() int32 {
	if m != nil {
		return m.BannedCount
	}
	return 0
}

func (m *ChannelInfoBase) GetBotCount() int32 {
	if m != nil {
		return m.BotCount
	}
	return 0
}

func (m *ChannelInfoBase) GetParticipantsCount() int32 {
	if m != nil {
		return m.ParticipantsCount
	}
	return 0
}

func (m *ChannelInfoBase) GetIsInChannel() bool {
	if m != nil {
		return m.IsInChannel
	}
	return false
}

func (m *ChannelInfoBase) GetUtilDate() int32 {
	if m != nil {
		return m.UtilDate
	}
	return 0
}

func (m *ChannelInfoBase) GetExportedInviteLink() string {
	if m != nil {
		return m.ExportedInviteLink
	}
	return ""
}

func (m *ChannelInfoBase) GetCreator() int32 {
	if m != nil {
		return m.Creator
	}
	return 0
}

func (m *ChannelInfoBase) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *ChannelInfoBase) GetEveryoneQuiet() bool {
	if m != nil {
		return m.EveryoneQuiet
	}
	return false
}

func (m *ChannelInfoBase) GetPrivateChat() bool {
	if m != nil {
		return m.PrivateChat
	}
	return false
}

// 普通群的基础信息
type GetChatInfoResp struct {
	ChatId            int32          `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	AdminsEnabled     bool           `protobuf:"varint,2,opt,name=admins_enabled,json=adminsEnabled,proto3" json:"admins_enabled,omitempty"`
	Deactivated       bool           `protobuf:"varint,3,opt,name=deactivated,proto3" json:"deactivated,omitempty"`
	ExportedInvite    string         `protobuf:"bytes,4,opt,name=exported_invite,json=exportedInvite,proto3" json:"exported_invite,omitempty"`
	Encry             bool           `protobuf:"varint,5,opt,name=encry,proto3" json:"encry,omitempty"`
	Creator           int32          `protobuf:"varint,6,opt,name=creator,proto3" json:"creator,omitempty"`
	Title             string         `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`
	Photo             []byte         `protobuf:"bytes,8,opt,name=photo,proto3" json:"photo,omitempty"`
	FullPhoto         []byte         `protobuf:"bytes,9,opt,name=full_photo,json=fullPhoto,proto3" json:"full_photo,omitempty"`
	Version           int32          `protobuf:"varint,10,opt,name=version,proto3" json:"version,omitempty"`
	ParticipantsCount int32          `protobuf:"varint,11,opt,name=participants_count,json=participantsCount,proto3" json:"participants_count,omitempty"`
	Date              int32          `protobuf:"varint,12,opt,name=date,proto3" json:"date,omitempty"`
	MigrateTo         string         `protobuf:"bytes,13,opt,name=migrate_to,json=migrateTo,proto3" json:"migrate_to,omitempty"`
	Resultcode        ChatResultCode `protobuf:"varint,14,opt,name=resultcode,proto3,enum=imbotgateway.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *GetChatInfoResp) Reset()                    { *m = GetChatInfoResp{} }
func (m *GetChatInfoResp) String() string            { return proto.CompactTextString(m) }
func (*GetChatInfoResp) ProtoMessage()               {}
func (*GetChatInfoResp) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{2} }

func (m *GetChatInfoResp) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *GetChatInfoResp) GetAdminsEnabled() bool {
	if m != nil {
		return m.AdminsEnabled
	}
	return false
}

func (m *GetChatInfoResp) GetDeactivated() bool {
	if m != nil {
		return m.Deactivated
	}
	return false
}

func (m *GetChatInfoResp) GetExportedInvite() string {
	if m != nil {
		return m.ExportedInvite
	}
	return ""
}

func (m *GetChatInfoResp) GetEncry() bool {
	if m != nil {
		return m.Encry
	}
	return false
}

func (m *GetChatInfoResp) GetCreator() int32 {
	if m != nil {
		return m.Creator
	}
	return 0
}

func (m *GetChatInfoResp) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *GetChatInfoResp) GetPhoto() []byte {
	if m != nil {
		return m.Photo
	}
	return nil
}

func (m *GetChatInfoResp) GetFullPhoto() []byte {
	if m != nil {
		return m.FullPhoto
	}
	return nil
}

func (m *GetChatInfoResp) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *GetChatInfoResp) GetParticipantsCount() int32 {
	if m != nil {
		return m.ParticipantsCount
	}
	return 0
}

func (m *GetChatInfoResp) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *GetChatInfoResp) GetMigrateTo() string {
	if m != nil {
		return m.MigrateTo
	}
	return ""
}

func (m *GetChatInfoResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// Fid参数
type FidPara struct {
	Fid uint64 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
}

func (m *FidPara) Reset()                    { *m = FidPara{} }
func (m *FidPara) String() string            { return proto.CompactTextString(m) }
func (*FidPara) ProtoMessage()               {}
func (*FidPara) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{3} }

func (m *FidPara) GetFid() uint64 {
	if m != nil {
		return m.Fid
	}
	return 0
}

// 用户信息数组
type UserInfoArray struct {
	Userin []*UserInfo `protobuf:"bytes,1,rep,name=userin" json:"userin,omitempty"`
}

func (m *UserInfoArray) Reset()                    { *m = UserInfoArray{} }
func (m *UserInfoArray) String() string            { return proto.CompactTextString(m) }
func (*UserInfoArray) ProtoMessage()               {}
func (*UserInfoArray) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{4} }

func (m *UserInfoArray) GetUserin() []*UserInfo {
	if m != nil {
		return m.Userin
	}
	return nil
}

// 查询出来的用户基础信息（self 、contact、 mutual_contact 需要在逻辑中判断 ）
type UserInfo struct {
	UserId               int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccessHash           int64  `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	FirstName            string `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName             string `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Username             string `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	Phone                string `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`
	Status               int32  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	LastLogout           int32  `protobuf:"varint,8,opt,name=last_logout,json=lastLogout,proto3" json:"last_logout,omitempty"`
	ClusterRegion        int32  `protobuf:"varint,9,opt,name=cluster_region,json=clusterRegion,proto3" json:"cluster_region,omitempty"`
	FontRgb              string `protobuf:"bytes,10,opt,name=font_rgb,json=fontRgb,proto3" json:"font_rgb,omitempty"`
	CountryCode          string `protobuf:"bytes,11,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	Photo                string `protobuf:"bytes,12,opt,name=photo,proto3" json:"photo,omitempty"`
	BotInfoVersion       int32  `protobuf:"varint,13,opt,name=bot_info_version,json=botInfoVersion,proto3" json:"bot_info_version,omitempty"`
	BotInlinePlaceholder string `protobuf:"bytes,14,opt,name=bot_inline_placeholder,json=botInlinePlaceholder,proto3" json:"bot_inline_placeholder,omitempty"`
	RestrictionReason    string `protobuf:"bytes,15,opt,name=restriction_reason,json=restrictionReason,proto3" json:"restriction_reason,omitempty"`
	LangCode             string `protobuf:"bytes,16,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	LocalPhone           string `protobuf:"bytes,17,opt,name=local_phone,json=localPhone,proto3" json:"local_phone,omitempty"`
	Deleted              bool   `protobuf:"varint,18,opt,name=deleted,proto3" json:"deleted,omitempty"`
	Bot                  bool   `protobuf:"varint,19,opt,name=bot,proto3" json:"bot,omitempty"`
	BotChatHistory       bool   `protobuf:"varint,20,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNochats           bool   `protobuf:"varint,21,opt,name=bot_nochats,json=botNochats,proto3" json:"bot_nochats,omitempty"`
	Verified             bool   `protobuf:"varint,22,opt,name=verified,proto3" json:"verified,omitempty"`
	Restricted           bool   `protobuf:"varint,23,opt,name=restricted,proto3" json:"restricted,omitempty"`
	Min                  bool   `protobuf:"varint,24,opt,name=min,proto3" json:"min,omitempty"`
	BotInlineGeo         bool   `protobuf:"varint,25,opt,name=bot_inline_geo,json=botInlineGeo,proto3" json:"bot_inline_geo,omitempty"`
	Self                 bool   `protobuf:"varint,26,opt,name=self,proto3" json:"self,omitempty"`
	Contact              bool   `protobuf:"varint,27,opt,name=contact,proto3" json:"contact,omitempty"`
	MutalContact         bool   `protobuf:"varint,28,opt,name=mutal_contact,json=mutalContact,proto3" json:"mutal_contact,omitempty"`
	StarMark             bool   `protobuf:"varint,29,opt,name=star_mark,json=starMark,proto3" json:"star_mark,omitempty"`
	ShowContactPhone     bool   `protobuf:"varint,30,opt,name=show_contact_phone,json=showContactPhone,proto3" json:"show_contact_phone,omitempty"`
	GroupId              int32  `protobuf:"varint,31,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{5} }

func (m *UserInfo) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserInfo) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *UserInfo) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *UserInfo) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *UserInfo) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UserInfo) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *UserInfo) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *UserInfo) GetLastLogout() int32 {
	if m != nil {
		return m.LastLogout
	}
	return 0
}

func (m *UserInfo) GetClusterRegion() int32 {
	if m != nil {
		return m.ClusterRegion
	}
	return 0
}

func (m *UserInfo) GetFontRgb() string {
	if m != nil {
		return m.FontRgb
	}
	return ""
}

func (m *UserInfo) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *UserInfo) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *UserInfo) GetBotInfoVersion() int32 {
	if m != nil {
		return m.BotInfoVersion
	}
	return 0
}

func (m *UserInfo) GetBotInlinePlaceholder() string {
	if m != nil {
		return m.BotInlinePlaceholder
	}
	return ""
}

func (m *UserInfo) GetRestrictionReason() string {
	if m != nil {
		return m.RestrictionReason
	}
	return ""
}

func (m *UserInfo) GetLangCode() string {
	if m != nil {
		return m.LangCode
	}
	return ""
}

func (m *UserInfo) GetLocalPhone() string {
	if m != nil {
		return m.LocalPhone
	}
	return ""
}

func (m *UserInfo) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

func (m *UserInfo) GetBot() bool {
	if m != nil {
		return m.Bot
	}
	return false
}

func (m *UserInfo) GetBotChatHistory() bool {
	if m != nil {
		return m.BotChatHistory
	}
	return false
}

func (m *UserInfo) GetBotNochats() bool {
	if m != nil {
		return m.BotNochats
	}
	return false
}

func (m *UserInfo) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

func (m *UserInfo) GetRestricted() bool {
	if m != nil {
		return m.Restricted
	}
	return false
}

func (m *UserInfo) GetMin() bool {
	if m != nil {
		return m.Min
	}
	return false
}

func (m *UserInfo) GetBotInlineGeo() bool {
	if m != nil {
		return m.BotInlineGeo
	}
	return false
}

func (m *UserInfo) GetSelf() bool {
	if m != nil {
		return m.Self
	}
	return false
}

func (m *UserInfo) GetContact() bool {
	if m != nil {
		return m.Contact
	}
	return false
}

func (m *UserInfo) GetMutalContact() bool {
	if m != nil {
		return m.MutalContact
	}
	return false
}

func (m *UserInfo) GetStarMark() bool {
	if m != nil {
		return m.StarMark
	}
	return false
}

func (m *UserInfo) GetShowContactPhone() bool {
	if m != nil {
		return m.ShowContactPhone
	}
	return false
}

func (m *UserInfo) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

type UserMsg struct {
	Id           int64        `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	UserId       int32        `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId       int32        `protobuf:"varint,3,opt,name=WithId,proto3" json:"WithId,omitempty"`
	WithIdType   int32        `protobuf:"varint,4,opt,name=WithIdType,proto3" json:"WithIdType,omitempty"`
	MessageType  int32        `protobuf:"varint,5,opt,name=MessageType,proto3" json:"MessageType,omitempty"`
	Flags        int32        `protobuf:"varint,6,opt,name=Flags,proto3" json:"Flags,omitempty"`
	Out          bool         `protobuf:"varint,7,opt,name=Out,proto3" json:"Out,omitempty"`
	Mentioned    bool         `protobuf:"varint,8,opt,name=Mentioned,proto3" json:"Mentioned,omitempty"`
	MediaUnread  bool         `protobuf:"varint,9,opt,name=MediaUnread,proto3" json:"MediaUnread,omitempty"`
	Silent       bool         `protobuf:"varint,10,opt,name=Silent,proto3" json:"Silent,omitempty"`
	Post         bool         `protobuf:"varint,11,opt,name=Post,proto3" json:"Post,omitempty"`
	GroupId      int64        `protobuf:"varint,12,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	MsgId        int32        `protobuf:"varint,13,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	ToId         int32        `protobuf:"varint,14,opt,name=ToId,proto3" json:"ToId,omitempty"`
	Pts          int32        `protobuf:"varint,15,opt,name=Pts,proto3" json:"Pts,omitempty"`
	FwdFrom      []byte       `protobuf:"bytes,16,opt,name=FwdFrom,proto3" json:"FwdFrom,omitempty"`
	ViaBotId     int32        `protobuf:"varint,17,opt,name=ViaBotId,proto3" json:"ViaBotId,omitempty"`
	ReplyToMsgId int32        `protobuf:"varint,18,opt,name=ReplyToMsgId,proto3" json:"ReplyToMsgId,omitempty"`
	Date         int32        `protobuf:"varint,19,opt,name=Date,proto3" json:"Date,omitempty"`
	Message      string       `protobuf:"bytes,20,opt,name=Message,proto3" json:"Message,omitempty"`
	Media        int64        `protobuf:"varint,21,opt,name=Media,proto3" json:"Media,omitempty"`
	MediaData    []byte       `protobuf:"bytes,22,opt,name=MediaData,proto3" json:"MediaData,omitempty"`
	ReplyMarkup  []byte       `protobuf:"bytes,23,opt,name=ReplyMarkup,proto3" json:"ReplyMarkup,omitempty"`
	Entities     [][]byte     `protobuf:"bytes,24,rep,name=Entities" json:"Entities,omitempty"`
	FromId       int32        `protobuf:"varint,25,opt,name=FromId,proto3" json:"FromId,omitempty"`
	Views        int32        `protobuf:"varint,26,opt,name=Views,proto3" json:"Views,omitempty"`
	EditDate     int32        `protobuf:"varint,27,opt,name=EditDate,proto3" json:"EditDate,omitempty"`
	Action       []byte       `protobuf:"bytes,28,opt,name=Action,proto3" json:"Action,omitempty"`
	RandomId     int64        `protobuf:"varint,29,opt,name=RandomId,proto3" json:"RandomId,omitempty"`
	Uuid         int64        `protobuf:"varint,30,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	InsertDate   int32        `protobuf:"varint,31,opt,name=InsertDate,proto3" json:"InsertDate,omitempty"`
	UpdateDate   int32        `protobuf:"varint,32,opt,name=UpdateDate,proto3" json:"UpdateDate,omitempty"`
	Encry        int32        `protobuf:"varint,33,opt,name=Encry,proto3" json:"Encry,omitempty"`
	Combination  *Combination `protobuf:"bytes,34,opt,name=Combination" json:"Combination,omitempty"`
}

func (m *UserMsg) Reset()                    { *m = UserMsg{} }
func (m *UserMsg) String() string            { return proto.CompactTextString(m) }
func (*UserMsg) ProtoMessage()               {}
func (*UserMsg) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{6} }

func (m *UserMsg) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserMsg) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserMsg) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *UserMsg) GetWithIdType() int32 {
	if m != nil {
		return m.WithIdType
	}
	return 0
}

func (m *UserMsg) GetMessageType() int32 {
	if m != nil {
		return m.MessageType
	}
	return 0
}

func (m *UserMsg) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *UserMsg) GetOut() bool {
	if m != nil {
		return m.Out
	}
	return false
}

func (m *UserMsg) GetMentioned() bool {
	if m != nil {
		return m.Mentioned
	}
	return false
}

func (m *UserMsg) GetMediaUnread() bool {
	if m != nil {
		return m.MediaUnread
	}
	return false
}

func (m *UserMsg) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *UserMsg) GetPost() bool {
	if m != nil {
		return m.Post
	}
	return false
}

func (m *UserMsg) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UserMsg) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *UserMsg) GetToId() int32 {
	if m != nil {
		return m.ToId
	}
	return 0
}

func (m *UserMsg) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *UserMsg) GetFwdFrom() []byte {
	if m != nil {
		return m.FwdFrom
	}
	return nil
}

func (m *UserMsg) GetViaBotId() int32 {
	if m != nil {
		return m.ViaBotId
	}
	return 0
}

func (m *UserMsg) GetReplyToMsgId() int32 {
	if m != nil {
		return m.ReplyToMsgId
	}
	return 0
}

func (m *UserMsg) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *UserMsg) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *UserMsg) GetMedia() int64 {
	if m != nil {
		return m.Media
	}
	return 0
}

func (m *UserMsg) GetMediaData() []byte {
	if m != nil {
		return m.MediaData
	}
	return nil
}

func (m *UserMsg) GetReplyMarkup() []byte {
	if m != nil {
		return m.ReplyMarkup
	}
	return nil
}

func (m *UserMsg) GetEntities() [][]byte {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *UserMsg) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *UserMsg) GetViews() int32 {
	if m != nil {
		return m.Views
	}
	return 0
}

func (m *UserMsg) GetEditDate() int32 {
	if m != nil {
		return m.EditDate
	}
	return 0
}

func (m *UserMsg) GetAction() []byte {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *UserMsg) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *UserMsg) GetUuid() int64 {
	if m != nil {
		return m.Uuid
	}
	return 0
}

func (m *UserMsg) GetInsertDate() int32 {
	if m != nil {
		return m.InsertDate
	}
	return 0
}

func (m *UserMsg) GetUpdateDate() int32 {
	if m != nil {
		return m.UpdateDate
	}
	return 0
}

func (m *UserMsg) GetEncry() int32 {
	if m != nil {
		return m.Encry
	}
	return 0
}

func (m *UserMsg) GetCombination() *Combination {
	if m != nil {
		return m.Combination
	}
	return nil
}

type Combination struct {
	MentionedSlice []*MentionStatus `protobuf:"bytes,1,rep,name=MentionedSlice" json:"MentionedSlice,omitempty"`
	KeyId          []int64          `protobuf:"varint,2,rep,packed,name=KeyId" json:"KeyId,omitempty"`
}

func (m *Combination) Reset()                    { *m = Combination{} }
func (m *Combination) String() string            { return proto.CompactTextString(m) }
func (*Combination) ProtoMessage()               {}
func (*Combination) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{7} }

func (m *Combination) GetMentionedSlice() []*MentionStatus {
	if m != nil {
		return m.MentionedSlice
	}
	return nil
}

func (m *Combination) GetKeyId() []int64 {
	if m != nil {
		return m.KeyId
	}
	return nil
}

type MentionStatus struct {
	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Status int32 `protobuf:"varint,2,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (m *MentionStatus) Reset()                    { *m = MentionStatus{} }
func (m *MentionStatus) String() string            { return proto.CompactTextString(m) }
func (*MentionStatus) ProtoMessage()               {}
func (*MentionStatus) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{8} }

func (m *MentionStatus) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *MentionStatus) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func init() {
	proto.RegisterType((*Debug)(nil), "imbotgateway.Debug")
	proto.RegisterType((*ChannelInfoBase)(nil), "imbotgateway.ChannelInfoBase")
	proto.RegisterType((*GetChatInfoResp)(nil), "imbotgateway.GetChatInfoResp")
	proto.RegisterType((*FidPara)(nil), "imbotgateway.FidPara")
	proto.RegisterType((*UserInfoArray)(nil), "imbotgateway.UserInfoArray")
	proto.RegisterType((*UserInfo)(nil), "imbotgateway.userInfo")
	proto.RegisterType((*UserMsg)(nil), "imbotgateway.UserMsg")
	proto.RegisterType((*Combination)(nil), "imbotgateway.Combination")
	proto.RegisterType((*MentionStatus)(nil), "imbotgateway.MentionStatus")
	proto.RegisterEnum("imbotgateway.ERpcResultCode", ERpcResultCode_name, ERpcResultCode_value)
	proto.RegisterEnum("imbotgateway.ChatResultCode", ChatResultCode_name, ChatResultCode_value)
	proto.RegisterEnum("imbotgateway.ReErrCode", ReErrCode_name, ReErrCode_value)
}
func (m *Debug) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Debug) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Userid))
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if len(m.Ip) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.KeyId))
	}
	if m.SessionId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.SessionId))
	}
	if m.Layer != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Layer))
	}
	if m.Ostype != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Ostype))
	}
	if m.CurrentCrc != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.CurrentCrc))
	}
	if len(m.AppVersion) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.AppVersion)))
		i += copy(dAtA[i:], m.AppVersion)
	}
	return i, nil
}

func (m *ChannelInfoBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelInfoBase) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.AccessHash))
	}
	if m.Encry {
		dAtA[i] = 0x18
		i++
		if m.Encry {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Broadcast {
		dAtA[i] = 0x20
		i++
		if m.Broadcast {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Verified {
		dAtA[i] = 0x28
		i++
		if m.Verified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Megagroup {
		dAtA[i] = 0x30
		i++
		if m.Megagroup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Restricted {
		dAtA[i] = 0x38
		i++
		if m.Restricted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Democracy {
		dAtA[i] = 0x40
		i++
		if m.Democracy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Signatures {
		dAtA[i] = 0x48
		i++
		if m.Signatures {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Min {
		dAtA[i] = 0x50
		i++
		if m.Min {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.Date != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Date))
	}
	if m.Version != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Version))
	}
	if len(m.RestrictionReason) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.RestrictionReason)))
		i += copy(dAtA[i:], m.RestrictionReason)
	}
	if m.Cluster != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Cluster))
	}
	if m.IsCreator {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		if m.IsCreator {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsAdmin {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		if m.IsAdmin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Left {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		if m.Left {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Kicked {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		if m.Kicked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MigratedFromChatId != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.MigratedFromChatId))
	}
	if m.InviteRule != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.InviteRule))
	}
	if m.AdminsCount != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.AdminsCount))
	}
	if m.KickedCount != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.KickedCount))
	}
	if m.BannedCount != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.BannedCount))
	}
	if m.BotCount != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.BotCount))
	}
	if m.ParticipantsCount != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.ParticipantsCount))
	}
	if m.IsInChannel {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		if m.IsInChannel {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.UtilDate != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.UtilDate))
	}
	if len(m.ExportedInviteLink) > 0 {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ExportedInviteLink)))
		i += copy(dAtA[i:], m.ExportedInviteLink)
	}
	if m.Creator != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Creator))
	}
	if len(m.About) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.About)))
		i += copy(dAtA[i:], m.About)
	}
	if m.EveryoneQuiet {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		if m.EveryoneQuiet {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PrivateChat {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x2
		i++
		if m.PrivateChat {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GetChatInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChatInfoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.ChatId))
	}
	if m.AdminsEnabled {
		dAtA[i] = 0x10
		i++
		if m.AdminsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Deactivated {
		dAtA[i] = 0x18
		i++
		if m.Deactivated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ExportedInvite) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ExportedInvite)))
		i += copy(dAtA[i:], m.ExportedInvite)
	}
	if m.Encry {
		dAtA[i] = 0x28
		i++
		if m.Encry {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Creator != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Creator))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if len(m.FullPhoto) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.FullPhoto)))
		i += copy(dAtA[i:], m.FullPhoto)
	}
	if m.Version != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Version))
	}
	if m.ParticipantsCount != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.ParticipantsCount))
	}
	if m.Date != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Date))
	}
	if len(m.MigrateTo) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.MigrateTo)))
		i += copy(dAtA[i:], m.MigrateTo)
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *FidPara) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FidPara) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Fid))
	}
	return i, nil
}

func (m *UserInfoArray) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfoArray) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userin) > 0 {
		for _, msg := range m.Userin {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCommon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.AccessHash))
	}
	if len(m.FirstName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.FirstName)))
		i += copy(dAtA[i:], m.FirstName)
	}
	if len(m.LastName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.LastName)))
		i += copy(dAtA[i:], m.LastName)
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if m.Status != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Status))
	}
	if m.LastLogout != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.LastLogout))
	}
	if m.ClusterRegion != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.ClusterRegion))
	}
	if len(m.FontRgb) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.FontRgb)))
		i += copy(dAtA[i:], m.FontRgb)
	}
	if len(m.CountryCode) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.CountryCode)))
		i += copy(dAtA[i:], m.CountryCode)
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.BotInfoVersion != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.BotInfoVersion))
	}
	if len(m.BotInlinePlaceholder) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.BotInlinePlaceholder)))
		i += copy(dAtA[i:], m.BotInlinePlaceholder)
	}
	if len(m.RestrictionReason) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.RestrictionReason)))
		i += copy(dAtA[i:], m.RestrictionReason)
	}
	if len(m.LangCode) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.LangCode)))
		i += copy(dAtA[i:], m.LangCode)
	}
	if len(m.LocalPhone) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.LocalPhone)))
		i += copy(dAtA[i:], m.LocalPhone)
	}
	if m.Deleted {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		if m.Deleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Bot {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		if m.Bot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BotChatHistory {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		if m.BotChatHistory {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BotNochats {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		if m.BotNochats {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Verified {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		if m.Verified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Restricted {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		if m.Restricted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Min {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		if m.Min {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BotInlineGeo {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		if m.BotInlineGeo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Self {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		if m.Self {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Contact {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		if m.Contact {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MutalContact {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		if m.MutalContact {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.StarMark {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		if m.StarMark {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ShowContactPhone {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		if m.ShowContactPhone {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.GroupId != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.GroupId))
	}
	return i, nil
}

func (m *UserMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Id))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.WithId))
	}
	if m.WithIdType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.WithIdType))
	}
	if m.MessageType != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.MessageType))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Flags))
	}
	if m.Out {
		dAtA[i] = 0x38
		i++
		if m.Out {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Mentioned {
		dAtA[i] = 0x40
		i++
		if m.Mentioned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MediaUnread {
		dAtA[i] = 0x48
		i++
		if m.MediaUnread {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Silent {
		dAtA[i] = 0x50
		i++
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Post {
		dAtA[i] = 0x58
		i++
		if m.Post {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.GroupId != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.GroupId))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.MsgId))
	}
	if m.ToId != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.ToId))
	}
	if m.Pts != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Pts))
	}
	if len(m.FwdFrom) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.FwdFrom)))
		i += copy(dAtA[i:], m.FwdFrom)
	}
	if m.ViaBotId != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.ViaBotId))
	}
	if m.ReplyToMsgId != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.ReplyToMsgId))
	}
	if m.Date != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Date))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Media != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Media))
	}
	if len(m.MediaData) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.MediaData)))
		i += copy(dAtA[i:], m.MediaData)
	}
	if len(m.ReplyMarkup) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ReplyMarkup)))
		i += copy(dAtA[i:], m.ReplyMarkup)
	}
	if len(m.Entities) > 0 {
		for _, b := range m.Entities {
			dAtA[i] = 0xc2
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintCommon(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.FromId != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.FromId))
	}
	if m.Views != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Views))
	}
	if m.EditDate != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.EditDate))
	}
	if len(m.Action) > 0 {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Action)))
		i += copy(dAtA[i:], m.Action)
	}
	if m.RandomId != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.RandomId))
	}
	if m.Uuid != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Uuid))
	}
	if m.InsertDate != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.InsertDate))
	}
	if m.UpdateDate != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.UpdateDate))
	}
	if m.Encry != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Encry))
	}
	if m.Combination != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Combination.Size()))
		n1, err := m.Combination.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *Combination) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Combination) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MentionedSlice) > 0 {
		for _, msg := range m.MentionedSlice {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCommon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.KeyId) > 0 {
		dAtA3 := make([]byte, len(m.KeyId)*10)
		var j2 int
		for _, num1 := range m.KeyId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommon(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	return i, nil
}

func (m *MentionStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MentionStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.UserId))
	}
	if m.Status != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func encodeVarintCommon(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Debug) Size() (n int) {
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovCommon(uint64(m.Userid))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.KeyId != 0 {
		n += 1 + sovCommon(uint64(m.KeyId))
	}
	if m.SessionId != 0 {
		n += 1 + sovCommon(uint64(m.SessionId))
	}
	if m.Layer != 0 {
		n += 1 + sovCommon(uint64(m.Layer))
	}
	if m.Ostype != 0 {
		n += 1 + sovCommon(uint64(m.Ostype))
	}
	if m.CurrentCrc != 0 {
		n += 1 + sovCommon(uint64(m.CurrentCrc))
	}
	l = len(m.AppVersion)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *ChannelInfoBase) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovCommon(uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovCommon(uint64(m.AccessHash))
	}
	if m.Encry {
		n += 2
	}
	if m.Broadcast {
		n += 2
	}
	if m.Verified {
		n += 2
	}
	if m.Megagroup {
		n += 2
	}
	if m.Restricted {
		n += 2
	}
	if m.Democracy {
		n += 2
	}
	if m.Signatures {
		n += 2
	}
	if m.Min {
		n += 2
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovCommon(uint64(m.Date))
	}
	if m.Version != 0 {
		n += 1 + sovCommon(uint64(m.Version))
	}
	l = len(m.RestrictionReason)
	if l > 0 {
		n += 2 + l + sovCommon(uint64(l))
	}
	if m.Cluster != 0 {
		n += 2 + sovCommon(uint64(m.Cluster))
	}
	if m.IsCreator {
		n += 3
	}
	if m.IsAdmin {
		n += 3
	}
	if m.Left {
		n += 3
	}
	if m.Kicked {
		n += 3
	}
	if m.MigratedFromChatId != 0 {
		n += 2 + sovCommon(uint64(m.MigratedFromChatId))
	}
	if m.InviteRule != 0 {
		n += 2 + sovCommon(uint64(m.InviteRule))
	}
	if m.AdminsCount != 0 {
		n += 2 + sovCommon(uint64(m.AdminsCount))
	}
	if m.KickedCount != 0 {
		n += 2 + sovCommon(uint64(m.KickedCount))
	}
	if m.BannedCount != 0 {
		n += 2 + sovCommon(uint64(m.BannedCount))
	}
	if m.BotCount != 0 {
		n += 2 + sovCommon(uint64(m.BotCount))
	}
	if m.ParticipantsCount != 0 {
		n += 2 + sovCommon(uint64(m.ParticipantsCount))
	}
	if m.IsInChannel {
		n += 3
	}
	if m.UtilDate != 0 {
		n += 2 + sovCommon(uint64(m.UtilDate))
	}
	l = len(m.ExportedInviteLink)
	if l > 0 {
		n += 2 + l + sovCommon(uint64(l))
	}
	if m.Creator != 0 {
		n += 2 + sovCommon(uint64(m.Creator))
	}
	l = len(m.About)
	if l > 0 {
		n += 2 + l + sovCommon(uint64(l))
	}
	if m.EveryoneQuiet {
		n += 3
	}
	if m.PrivateChat {
		n += 3
	}
	return n
}

func (m *GetChatInfoResp) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovCommon(uint64(m.ChatId))
	}
	if m.AdminsEnabled {
		n += 2
	}
	if m.Deactivated {
		n += 2
	}
	l = len(m.ExportedInvite)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Encry {
		n += 2
	}
	if m.Creator != 0 {
		n += 1 + sovCommon(uint64(m.Creator))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.FullPhoto)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovCommon(uint64(m.Version))
	}
	if m.ParticipantsCount != 0 {
		n += 1 + sovCommon(uint64(m.ParticipantsCount))
	}
	if m.Date != 0 {
		n += 1 + sovCommon(uint64(m.Date))
	}
	l = len(m.MigrateTo)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Resultcode != 0 {
		n += 1 + sovCommon(uint64(m.Resultcode))
	}
	return n
}

func (m *FidPara) Size() (n int) {
	var l int
	_ = l
	if m.Fid != 0 {
		n += 1 + sovCommon(uint64(m.Fid))
	}
	return n
}

func (m *UserInfoArray) Size() (n int) {
	var l int
	_ = l
	if len(m.Userin) > 0 {
		for _, e := range m.Userin {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	return n
}

func (m *UserInfo) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovCommon(uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovCommon(uint64(m.AccessHash))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovCommon(uint64(m.Status))
	}
	if m.LastLogout != 0 {
		n += 1 + sovCommon(uint64(m.LastLogout))
	}
	if m.ClusterRegion != 0 {
		n += 1 + sovCommon(uint64(m.ClusterRegion))
	}
	l = len(m.FontRgb)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.BotInfoVersion != 0 {
		n += 1 + sovCommon(uint64(m.BotInfoVersion))
	}
	l = len(m.BotInlinePlaceholder)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.RestrictionReason)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.LangCode)
	if l > 0 {
		n += 2 + l + sovCommon(uint64(l))
	}
	l = len(m.LocalPhone)
	if l > 0 {
		n += 2 + l + sovCommon(uint64(l))
	}
	if m.Deleted {
		n += 3
	}
	if m.Bot {
		n += 3
	}
	if m.BotChatHistory {
		n += 3
	}
	if m.BotNochats {
		n += 3
	}
	if m.Verified {
		n += 3
	}
	if m.Restricted {
		n += 3
	}
	if m.Min {
		n += 3
	}
	if m.BotInlineGeo {
		n += 3
	}
	if m.Self {
		n += 3
	}
	if m.Contact {
		n += 3
	}
	if m.MutalContact {
		n += 3
	}
	if m.StarMark {
		n += 3
	}
	if m.ShowContactPhone {
		n += 3
	}
	if m.GroupId != 0 {
		n += 2 + sovCommon(uint64(m.GroupId))
	}
	return n
}

func (m *UserMsg) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCommon(uint64(m.Id))
	}
	if m.UserId != 0 {
		n += 1 + sovCommon(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovCommon(uint64(m.WithId))
	}
	if m.WithIdType != 0 {
		n += 1 + sovCommon(uint64(m.WithIdType))
	}
	if m.MessageType != 0 {
		n += 1 + sovCommon(uint64(m.MessageType))
	}
	if m.Flags != 0 {
		n += 1 + sovCommon(uint64(m.Flags))
	}
	if m.Out {
		n += 2
	}
	if m.Mentioned {
		n += 2
	}
	if m.MediaUnread {
		n += 2
	}
	if m.Silent {
		n += 2
	}
	if m.Post {
		n += 2
	}
	if m.GroupId != 0 {
		n += 1 + sovCommon(uint64(m.GroupId))
	}
	if m.MsgId != 0 {
		n += 1 + sovCommon(uint64(m.MsgId))
	}
	if m.ToId != 0 {
		n += 1 + sovCommon(uint64(m.ToId))
	}
	if m.Pts != 0 {
		n += 1 + sovCommon(uint64(m.Pts))
	}
	l = len(m.FwdFrom)
	if l > 0 {
		n += 2 + l + sovCommon(uint64(l))
	}
	if m.ViaBotId != 0 {
		n += 2 + sovCommon(uint64(m.ViaBotId))
	}
	if m.ReplyToMsgId != 0 {
		n += 2 + sovCommon(uint64(m.ReplyToMsgId))
	}
	if m.Date != 0 {
		n += 2 + sovCommon(uint64(m.Date))
	}
	l = len(m.Message)
	if l > 0 {
		n += 2 + l + sovCommon(uint64(l))
	}
	if m.Media != 0 {
		n += 2 + sovCommon(uint64(m.Media))
	}
	l = len(m.MediaData)
	if l > 0 {
		n += 2 + l + sovCommon(uint64(l))
	}
	l = len(m.ReplyMarkup)
	if l > 0 {
		n += 2 + l + sovCommon(uint64(l))
	}
	if len(m.Entities) > 0 {
		for _, b := range m.Entities {
			l = len(b)
			n += 2 + l + sovCommon(uint64(l))
		}
	}
	if m.FromId != 0 {
		n += 2 + sovCommon(uint64(m.FromId))
	}
	if m.Views != 0 {
		n += 2 + sovCommon(uint64(m.Views))
	}
	if m.EditDate != 0 {
		n += 2 + sovCommon(uint64(m.EditDate))
	}
	l = len(m.Action)
	if l > 0 {
		n += 2 + l + sovCommon(uint64(l))
	}
	if m.RandomId != 0 {
		n += 2 + sovCommon(uint64(m.RandomId))
	}
	if m.Uuid != 0 {
		n += 2 + sovCommon(uint64(m.Uuid))
	}
	if m.InsertDate != 0 {
		n += 2 + sovCommon(uint64(m.InsertDate))
	}
	if m.UpdateDate != 0 {
		n += 2 + sovCommon(uint64(m.UpdateDate))
	}
	if m.Encry != 0 {
		n += 2 + sovCommon(uint64(m.Encry))
	}
	if m.Combination != nil {
		l = m.Combination.Size()
		n += 2 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *Combination) Size() (n int) {
	var l int
	_ = l
	if len(m.MentionedSlice) > 0 {
		for _, e := range m.MentionedSlice {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.KeyId) > 0 {
		l = 0
		for _, e := range m.KeyId {
			l += sovCommon(uint64(e))
		}
		n += 1 + sovCommon(uint64(l)) + l
	}
	return n
}

func (m *MentionStatus) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovCommon(uint64(m.UserId))
	}
	if m.Status != 0 {
		n += 1 + sovCommon(uint64(m.Status))
	}
	return n
}

func sovCommon(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCommon(x uint64) (n int) {
	return sovCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Debug) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Debug: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Debug: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Layer", wireType)
			}
			m.Layer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Layer |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ostype", wireType)
			}
			m.Ostype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ostype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentCrc", wireType)
			}
			m.CurrentCrc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentCrc |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelInfoBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelInfoBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelInfoBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Encry = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Broadcast", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Broadcast = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verified = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Megagroup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Megagroup = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Restricted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Restricted = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Democracy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Democracy = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Signatures = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Min = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestrictionReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RestrictionReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			m.Cluster = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cluster |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCreator", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCreator = bool(v != 0)
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdmin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAdmin = bool(v != 0)
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Left", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Left = bool(v != 0)
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kicked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Kicked = bool(v != 0)
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigratedFromChatId", wireType)
			}
			m.MigratedFromChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MigratedFromChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteRule", wireType)
			}
			m.InviteRule = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InviteRule |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminsCount", wireType)
			}
			m.AdminsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminsCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KickedCount", wireType)
			}
			m.KickedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KickedCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BannedCount", wireType)
			}
			m.BannedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BannedCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotCount", wireType)
			}
			m.BotCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantsCount", wireType)
			}
			m.ParticipantsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipantsCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsInChannel", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsInChannel = bool(v != 0)
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UtilDate", wireType)
			}
			m.UtilDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UtilDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportedInviteLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportedInviteLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			m.Creator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Creator |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EveryoneQuiet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EveryoneQuiet = bool(v != 0)
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateChat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PrivateChat = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChatInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChatInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChatInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdminsEnabled = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deactivated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deactivated = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportedInvite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportedInvite = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Encry = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			m.Creator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Creator |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = append(m.Photo[:0], dAtA[iNdEx:postIndex]...)
			if m.Photo == nil {
				m.Photo = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullPhoto", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FullPhoto = append(m.FullPhoto[:0], dAtA[iNdEx:postIndex]...)
			if m.FullPhoto == nil {
				m.FullPhoto = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantsCount", wireType)
			}
			m.ParticipantsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipantsCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigrateTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MigrateTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FidPara) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FidPara: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FidPara: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfoArray) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfoArray: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfoArray: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userin = append(m.Userin, &UserInfo{})
			if err := m.Userin[len(m.Userin)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: userInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: userInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLogout", wireType)
			}
			m.LastLogout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastLogout |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterRegion", wireType)
			}
			m.ClusterRegion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterRegion |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FontRgb", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FontRgb = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotInfoVersion", wireType)
			}
			m.BotInfoVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotInfoVersion |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotInlinePlaceholder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BotInlinePlaceholder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestrictionReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RestrictionReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LangCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = bool(v != 0)
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bot = bool(v != 0)
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotChatHistory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotChatHistory = bool(v != 0)
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotNochats", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotNochats = bool(v != 0)
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verified = bool(v != 0)
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Restricted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Restricted = bool(v != 0)
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Min = bool(v != 0)
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotInlineGeo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotInlineGeo = bool(v != 0)
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Self", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Self = bool(v != 0)
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contact", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Contact = bool(v != 0)
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MutalContact", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MutalContact = bool(v != 0)
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StarMark", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StarMark = bool(v != 0)
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowContactPhone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowContactPhone = bool(v != 0)
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithIdType", wireType)
			}
			m.WithIdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithIdType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageType", wireType)
			}
			m.MessageType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Out", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Out = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mentioned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mentioned = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaUnread", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MediaUnread = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Post", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Post = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToId", wireType)
			}
			m.ToId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FwdFrom", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FwdFrom = append(m.FwdFrom[:0], dAtA[iNdEx:postIndex]...)
			if m.FwdFrom == nil {
				m.FwdFrom = []byte{}
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViaBotId", wireType)
			}
			m.ViaBotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ViaBotId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyToMsgId", wireType)
			}
			m.ReplyToMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyToMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			m.Media = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Media |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaData = append(m.MediaData[:0], dAtA[iNdEx:postIndex]...)
			if m.MediaData == nil {
				m.MediaData = []byte{}
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyMarkup", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyMarkup = append(m.ReplyMarkup[:0], dAtA[iNdEx:postIndex]...)
			if m.ReplyMarkup == nil {
				m.ReplyMarkup = []byte{}
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, make([]byte, postIndex-iNdEx))
			copy(m.Entities[len(m.Entities)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Views", wireType)
			}
			m.Views = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Views |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditDate", wireType)
			}
			m.EditDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EditDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = append(m.Action[:0], dAtA[iNdEx:postIndex]...)
			if m.Action == nil {
				m.Action = []byte{}
			}
			iNdEx = postIndex
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
			m.RandomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			m.Uuid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uuid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsertDate", wireType)
			}
			m.InsertDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InsertDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateDate", wireType)
			}
			m.UpdateDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			m.Encry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Combination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Combination == nil {
				m.Combination = &Combination{}
			}
			if err := m.Combination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Combination) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Combination: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Combination: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MentionedSlice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MentionedSlice = append(m.MentionedSlice, &MentionStatus{})
			if err := m.MentionedSlice[len(m.MentionedSlice)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.KeyId = append(m.KeyId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCommon
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.KeyId = append(m.KeyId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MentionStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MentionStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MentionStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCommon
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCommon(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCommon = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommon   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/imbotgateway/common.proto", fileDescriptorCommon)
}

var fileDescriptorCommon = []byte{
	// 2539 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x58, 0x4b, 0x6f, 0x23, 0xc7,
	0x11, 0xb6, 0xc4, 0xa5, 0x48, 0xb6, 0x28, 0x69, 0xd4, 0xd6, 0x4a, 0xb3, 0xd6, 0xae, 0x44, 0xcb,
	0x0e, 0x22, 0x18, 0xf1, 0x3a, 0xb1, 0x9d, 0x43, 0x90, 0x20, 0x01, 0x45, 0x8e, 0xb4, 0x83, 0x95,
	0x48, 0xa6, 0x49, 0xad, 0xd7, 0xa7, 0x41, 0x73, 0xa6, 0x45, 0x35, 0x34, 0x9c, 0x26, 0x66, 0x9a,
	0x5a, 0xf3, 0x96, 0x43, 0xde, 0xc9, 0x29, 0xf1, 0x0f, 0xc8, 0xfb, 0x9d, 0xbf, 0x11, 0xe4, 0x98,
	0x9c, 0x72, 0x0d, 0x9c, 0x63, 0x7e, 0x84, 0x83, 0xaa, 0xee, 0x21, 0x87, 0x5a, 0x1b, 0xc8, 0xad,
	0xeb, 0xab, 0x9a, 0xee, 0x7a, 0x57, 0x91, 0xe4, 0x9b, 0x23, 0xa9, 0x63, 0x3e, 0x7c, 0x1c, 0x5e,
	0x73, 0x9d, 0x89, 0xf4, 0x56, 0xa4, 0x8f, 0xe5, 0xf8, 0x1d, 0x99, 0x68, 0x91, 0x5e, 0xf1, 0x50,
	0x4c, 0x52, 0x35, 0x9c, 0x5e, 0xbd, 0x23, 0xc7, 0x43, 0xa5, 0x47, 0x5c, 0x8b, 0x17, 0x7c, 0xf6,
	0x4e, 0xa8, 0xc6, 0x63, 0x95, 0x3c, 0x9e, 0xa4, 0x4a, 0x2b, 0x5a, 0x2f, 0xb2, 0x8e, 0xfe, 0xbb,
	0x42, 0xca, 0x6d, 0x31, 0x9c, 0x8e, 0xe8, 0x2e, 0x59, 0x9b, 0x66, 0x22, 0x95, 0x91, 0xbb, 0xd2,
	0x58, 0x39, 0x2e, 0x33, 0x4b, 0xd1, 0x1d, 0x52, 0xee, 0x5d, 0xab, 0x44, 0xb8, 0xab, 0x8d, 0x95,
	0xe3, 0x1a, 0x33, 0x04, 0xdd, 0x24, 0xab, 0x72, 0xe2, 0x96, 0x10, 0x5a, 0x95, 0x13, 0x7a, 0x9f,
	0xac, 0xdd, 0x88, 0x59, 0x20, 0x23, 0xf7, 0x5e, 0x63, 0xe5, 0xf8, 0x1e, 0x2b, 0xdf, 0x88, 0x99,
	0x1f, 0xd1, 0x47, 0x84, 0x64, 0x22, 0xcb, 0xa4, 0x4a, 0x80, 0x55, 0x46, 0x56, 0xcd, 0x22, 0x3e,
	0xde, 0x1d, 0xf3, 0x99, 0x48, 0xdd, 0x35, 0x7c, 0xd2, 0x10, 0xa0, 0x89, 0xca, 0xf4, 0x6c, 0x22,
	0xdc, 0x4a, 0x63, 0xe5, 0x78, 0x83, 0x59, 0x8a, 0x1e, 0x92, 0xf5, 0x70, 0x9a, 0xa6, 0x22, 0xd1,
	0x41, 0x98, 0x86, 0x6e, 0x15, 0x99, 0xc4, 0x42, 0xad, 0x34, 0x04, 0x01, 0x3e, 0x99, 0x04, 0xb7,
	0x22, 0x85, 0xfb, 0xdd, 0x1a, 0x6a, 0x47, 0xf8, 0x64, 0xf2, 0xcc, 0x20, 0x47, 0x7f, 0xab, 0x92,
	0xad, 0xd6, 0x35, 0x4f, 0x12, 0x11, 0xfb, 0xc9, 0x95, 0x3a, 0xe1, 0x99, 0x00, 0x15, 0x43, 0x03,
	0x05, 0x73, 0xdb, 0x6b, 0x16, 0xf1, 0x23, 0xbc, 0x33, 0x0c, 0x45, 0x96, 0x05, 0xd7, 0x3c, 0xbb,
	0x46, 0x27, 0x94, 0x18, 0x31, 0xd0, 0x13, 0x9e, 0x5d, 0x83, 0x0d, 0x22, 0x09, 0xd3, 0x19, 0x3a,
	0xa3, 0xca, 0x0c, 0x41, 0x1f, 0x92, 0xda, 0x30, 0x55, 0x3c, 0x0a, 0x79, 0xa6, 0xd1, 0x25, 0x55,
	0xb6, 0x00, 0xe8, 0x6b, 0xa4, 0x7a, 0x2b, 0x52, 0x79, 0x25, 0x85, 0x71, 0x4a, 0x95, 0xcd, 0x69,
	0xf8, 0x72, 0x2c, 0x46, 0x7c, 0x94, 0xaa, 0xe9, 0x04, 0xfd, 0x52, 0x65, 0x0b, 0x80, 0x1e, 0x10,
	0x92, 0x8a, 0x4c, 0xa7, 0x32, 0xd4, 0x22, 0x42, 0xff, 0x54, 0x59, 0x01, 0x81, 0xaf, 0x23, 0x31,
	0x56, 0x61, 0xca, 0xc3, 0x19, 0x7a, 0xa8, 0xca, 0x16, 0x00, 0x7c, 0x9d, 0xc9, 0x51, 0xc2, 0xf5,
	0x34, 0x15, 0x19, 0xfa, 0xa7, 0xca, 0x0a, 0x08, 0x75, 0x48, 0x69, 0x2c, 0x13, 0x97, 0x20, 0x03,
	0x8e, 0x60, 0x9d, 0x96, 0x3a, 0x16, 0xee, 0xba, 0x89, 0x3e, 0x12, 0xa0, 0x3f, 0x64, 0x47, 0xc2,
	0xc7, 0xc2, 0xad, 0x23, 0x63, 0x4e, 0xc3, 0x17, 0x93, 0x6b, 0xa5, 0x95, 0xbb, 0x61, 0xbe, 0x40,
	0x82, 0x52, 0x72, 0x2f, 0xe2, 0x5a, 0xb8, 0x9b, 0xe8, 0x5f, 0x3c, 0x53, 0x97, 0x54, 0xf2, 0x50,
	0x6d, 0x21, 0x9c, 0x93, 0xf4, 0x6d, 0x42, 0x73, 0x9b, 0x20, 0x75, 0x52, 0xc1, 0x33, 0x95, 0xb8,
	0x0e, 0x5e, 0xb8, 0x5d, 0xe0, 0x30, 0x64, 0xc0, 0x45, 0x61, 0x3c, 0xcd, 0xb4, 0x48, 0xdd, 0x6d,
	0x73, 0x91, 0x25, 0x21, 0xb8, 0x32, 0x0b, 0xc2, 0x54, 0x70, 0xad, 0x52, 0x97, 0x1a, 0x7f, 0xc8,
	0xac, 0x65, 0x00, 0xfa, 0x80, 0x54, 0x65, 0x16, 0xf0, 0x08, 0x8c, 0x7e, 0x15, 0x99, 0x15, 0x99,
	0x35, 0x81, 0x04, 0x85, 0x63, 0x71, 0xa5, 0xdd, 0x1d, 0x84, 0xf1, 0x0c, 0x89, 0x79, 0x23, 0xc3,
	0x1b, 0x11, 0xb9, 0xf7, 0x11, 0xb5, 0x14, 0xfd, 0x0a, 0xb9, 0x3f, 0x96, 0xa3, 0x94, 0x6b, 0x11,
	0x05, 0x57, 0xa9, 0x1a, 0x07, 0x50, 0x9b, 0x90, 0x4d, 0xbb, 0xa8, 0x0d, 0xcd, 0x99, 0xa7, 0xa9,
	0x1a, 0xb7, 0xae, 0xb9, 0x36, 0x69, 0x25, 0x93, 0x5b, 0xa9, 0x45, 0x90, 0x4e, 0x63, 0xe1, 0xee,
	0xa1, 0x20, 0x31, 0x10, 0x9b, 0xc6, 0x82, 0xbe, 0x4e, 0xea, 0xa8, 0x48, 0x16, 0x84, 0x6a, 0x9a,
	0x68, 0xd7, 0x45, 0x89, 0x75, 0x83, 0xb5, 0x00, 0x02, 0x91, 0xa7, 0xa8, 0x80, 0x15, 0x79, 0x60,
	0x44, 0x0c, 0x36, 0x17, 0x39, 0x81, 0x4c, 0xce, 0x45, 0x5e, 0x33, 0x22, 0x06, 0x33, 0x22, 0xfb,
	0xa4, 0x76, 0xa2, 0xb4, 0xe5, 0xef, 0x23, 0xbf, 0x7a, 0xa2, 0xb4, 0x61, 0xbe, 0x4d, 0x68, 0x8f,
	0xa7, 0x5a, 0x86, 0x72, 0xc2, 0x13, 0x9d, 0xeb, 0xf2, 0x10, 0xa5, 0xb6, 0x8b, 0x1c, 0x23, 0xde,
	0x20, 0xeb, 0x7e, 0xe6, 0x27, 0xb6, 0xc4, 0xdc, 0x47, 0xe8, 0xa5, 0x22, 0x04, 0xaf, 0x4d, 0xb5,
	0x8c, 0x03, 0x4c, 0x86, 0x03, 0xf3, 0x1a, 0x00, 0x6d, 0x48, 0x88, 0x2f, 0x93, 0x1d, 0xf1, 0xd1,
	0x44, 0xa5, 0xe0, 0x47, 0xeb, 0x9d, 0x58, 0x26, 0x37, 0xee, 0x21, 0x06, 0x9e, 0xe6, 0x3c, 0x1f,
	0x59, 0xe7, 0x32, 0xb9, 0x81, 0xc8, 0xdb, 0x58, 0xba, 0x0d, 0x13, 0xf9, 0x3c, 0xb4, 0x3b, 0xa4,
	0xdc, 0x1c, 0xaa, 0xa9, 0x76, 0x5f, 0x37, 0x69, 0x88, 0x04, 0x7d, 0x93, 0x6c, 0x78, 0xb7, 0x22,
	0x9d, 0xa9, 0x44, 0x7c, 0x7b, 0x2a, 0x85, 0x76, 0x8f, 0x50, 0xc5, 0x65, 0x10, 0xcc, 0xe8, 0xa5,
	0xf2, 0x96, 0x6b, 0x01, 0xd1, 0x72, 0xdf, 0x30, 0x66, 0x14, 0xa0, 0xa3, 0x7f, 0x96, 0xc8, 0xd6,
	0x99, 0xd0, 0x18, 0xcc, 0xe4, 0x4a, 0x31, 0x91, 0x4d, 0xe8, 0x1e, 0xa9, 0xe4, 0x71, 0xb7, 0x1d,
	0x34, 0x34, 0xb1, 0xfe, 0x02, 0xd9, 0xe4, 0x26, 0x94, 0x22, 0xe1, 0xc3, 0x58, 0x44, 0xd8, 0x45,
	0xaa, 0x6c, 0xc3, 0xa0, 0x9e, 0x01, 0xe1, 0xd5, 0x48, 0xf0, 0x50, 0xe3, 0x2b, 0x91, 0x6d, 0x27,
	0x45, 0x88, 0x7e, 0x91, 0x6c, 0xdd, 0xf1, 0x0f, 0xb6, 0x96, 0x1a, 0xdb, 0x5c, 0x76, 0xcd, 0xa2,
	0x27, 0x95, 0x8b, 0x3d, 0x09, 0xca, 0xc4, 0x3a, 0x6b, 0xcd, 0x96, 0xc9, 0xc2, 0x59, 0xa6, 0xca,
	0x2b, 0xc5, 0x2a, 0x9f, 0x57, 0x32, 0xf4, 0x91, 0x7a, 0x5e, 0xc9, 0x8f, 0x08, 0xb9, 0x9a, 0xc6,
	0x71, 0x60, 0x58, 0x35, 0x64, 0xd5, 0x00, 0xe9, 0x21, 0xbb, 0x50, 0xd4, 0xe4, 0xa5, 0xa2, 0x9e,
	0xbc, 0x9c, 0x4b, 0xeb, 0x26, 0x97, 0x26, 0x2f, 0xe5, 0x52, 0xde, 0x31, 0xea, 0x85, 0x8e, 0xf1,
	0x88, 0x10, 0x5b, 0x4b, 0xc1, 0xbc, 0xc1, 0xd4, 0x2c, 0x32, 0x50, 0xf4, 0x1b, 0xd8, 0x1c, 0xa7,
	0xb1, 0x0e, 0x55, 0x64, 0x5a, 0xcd, 0xe6, 0xbb, 0x0f, 0x1f, 0x17, 0xe7, 0xdd, 0x63, 0x88, 0x18,
	0x43, 0x99, 0x96, 0x8a, 0x04, 0x2b, 0xc8, 0x1f, 0xed, 0x93, 0xca, 0xa9, 0x8c, 0x7a, 0x3c, 0xe5,
	0xd0, 0x07, 0xaf, 0x6c, 0x18, 0xef, 0x31, 0x38, 0x1e, 0x7d, 0x8b, 0x6c, 0x5c, 0x66, 0x22, 0x85,
	0x60, 0x37, 0xd3, 0x94, 0xcf, 0xe8, 0x63, 0x3b, 0x2e, 0x13, 0x77, 0xa5, 0x51, 0x3a, 0x5e, 0x7f,
	0x77, 0x77, 0xf9, 0x9d, 0xa9, 0x15, 0xb6, 0x63, 0x34, 0x39, 0xfa, 0x57, 0xc5, 0xf4, 0x4c, 0x00,
	0x21, 0x55, 0xe0, 0x1c, 0x2c, 0x0f, 0xdb, 0xff, 0x67, 0xda, 0x80, 0xf7, 0x65, 0x9a, 0xe9, 0x00,
	0x7b, 0xaf, 0x99, 0xbf, 0x35, 0x44, 0x3a, 0xd0, 0x7c, 0xf7, 0x49, 0x2d, 0xe6, 0x39, 0xd7, 0xe4,
	0x46, 0x15, 0x00, 0x64, 0x16, 0xbb, 0x76, 0xf9, 0x33, 0xbb, 0x76, 0x22, 0x30, 0x33, 0x4c, 0xd7,
	0x4e, 0x04, 0x34, 0xbc, 0x4c, 0x73, 0x3d, 0xcd, 0x30, 0x31, 0xca, 0xcc, 0x52, 0xa0, 0x26, 0x3e,
	0x13, 0xab, 0x11, 0x94, 0x58, 0xd5, 0x74, 0x2f, 0x80, 0xce, 0x11, 0x81, 0x94, 0xb7, 0x2d, 0x38,
	0x48, 0xc5, 0x28, 0x1f, 0xc6, 0x65, 0xb6, 0x61, 0x51, 0x86, 0x20, 0xf4, 0xdf, 0x2b, 0x95, 0xe8,
	0x20, 0x1d, 0x0d, 0x31, 0x5b, 0x6a, 0xac, 0x02, 0x34, 0x1b, 0x0d, 0xa1, 0x73, 0x61, 0x82, 0xa4,
	0xb3, 0x00, 0xa3, 0x69, 0xe6, 0xcf, 0xba, 0xc5, 0x20, 0x78, 0x8b, 0xfc, 0xac, 0x17, 0x27, 0xcd,
	0x31, 0x71, 0x86, 0x4a, 0x07, 0x32, 0xb9, 0x52, 0xf3, 0x4d, 0x60, 0x03, 0x1f, 0xdf, 0x1c, 0x2a,
	0xac, 0x56, 0xbb, 0x0d, 0xd0, 0xf7, 0xc9, 0xae, 0x91, 0x8c, 0x65, 0x22, 0x82, 0x49, 0xcc, 0x43,
	0x71, 0xad, 0xe2, 0x48, 0xa4, 0x98, 0x3a, 0x35, 0xb6, 0x83, 0xf2, 0xc0, 0xec, 0x2d, 0x78, 0x9f,
	0x33, 0x9b, 0xb6, 0x3e, 0x6f, 0x36, 0x61, 0x44, 0x92, 0x91, 0x31, 0xc2, 0xc9, 0x23, 0x92, 0x8c,
	0xd0, 0x02, 0xf0, 0xa3, 0x0a, 0x39, 0x16, 0x53, 0x22, 0x70, 0x78, 0xd5, 0x18, 0x41, 0xc8, 0xac,
	0x59, 0x2e, 0xa9, 0x44, 0x22, 0x16, 0xd0, 0x0f, 0xcc, 0xf0, 0xca, 0x49, 0x48, 0xd1, 0xa1, 0xd2,
	0x76, 0x6a, 0xc1, 0x31, 0x37, 0x1c, 0x7b, 0xd0, 0xb5, 0xcc, 0xb4, 0x4a, 0x67, 0x76, 0x7a, 0x81,
	0xe1, 0x90, 0xf8, 0x4f, 0x0c, 0x0a, 0xcf, 0x82, 0x64, 0xa2, 0x70, 0x87, 0xb4, 0xc3, 0x8c, 0x0c,
	0x95, 0xee, 0x18, 0x64, 0x69, 0x3f, 0xd9, 0xbd, 0xb3, 0x9f, 0x2c, 0x6f, 0x20, 0x7b, 0x2f, 0x6d,
	0x20, 0x76, 0x87, 0x70, 0x17, 0x3b, 0xc4, 0x9b, 0x64, 0xb3, 0xe0, 0xe7, 0x91, 0x50, 0x38, 0xa9,
	0xaa, 0xac, 0x3e, 0xf7, 0xef, 0x99, 0xc0, 0x0d, 0x21, 0x13, 0xf1, 0x15, 0x8e, 0xa8, 0x2a, 0xc3,
	0x33, 0x76, 0x2c, 0x95, 0x68, 0x1e, 0x9a, 0xc9, 0x54, 0x65, 0x39, 0x49, 0xdf, 0x20, 0x1b, 0xe3,
	0xa9, 0xe6, 0x71, 0x90, 0xf3, 0x1f, 0x9a, 0x2b, 0x11, 0x6c, 0x59, 0xa1, 0x7d, 0x52, 0xcb, 0x34,
	0x4f, 0x83, 0x31, 0x4f, 0x6f, 0xec, 0x30, 0xaa, 0x02, 0x70, 0xc1, 0xd3, 0x1b, 0xfa, 0x25, 0x42,
	0xb3, 0x6b, 0xf5, 0x22, 0xbf, 0xc0, 0x86, 0xe0, 0x00, 0xa5, 0x1c, 0xe0, 0xd8, 0x5b, 0x4c, 0x20,
	0x1e, 0x90, 0x2a, 0x2e, 0x60, 0x50, 0xb2, 0x87, 0xa6, 0xaf, 0x21, 0xed, 0x47, 0x47, 0x1f, 0x57,
	0x48, 0x05, 0x7a, 0xc3, 0x45, 0x36, 0x82, 0xb5, 0xd8, 0x37, 0x35, 0x5d, 0x62, 0xab, 0x7e, 0x04,
	0x05, 0x84, 0x6d, 0xc3, 0xb4, 0xfc, 0x32, 0xb3, 0x14, 0xe0, 0x1f, 0x48, 0x7d, 0xed, 0x9b, 0x36,
	0x5f, 0x66, 0x96, 0x02, 0xe7, 0x9a, 0xd3, 0x00, 0xd6, 0xdf, 0x7b, 0xa6, 0xae, 0x16, 0x08, 0xcc,
	0x88, 0x0b, 0x91, 0x65, 0x7c, 0x24, 0x50, 0xa0, 0x6c, 0xc6, 0x79, 0x01, 0x82, 0xa2, 0x38, 0x8d,
	0xf9, 0x28, 0xcb, 0x57, 0x6a, 0x24, 0x20, 0x28, 0xdd, 0xa9, 0xb6, 0xfb, 0x22, 0x1c, 0x61, 0x51,
	0xbc, 0x10, 0x09, 0x24, 0xaa, 0x88, 0xf2, 0x45, 0x71, 0x0e, 0x98, 0x77, 0x22, 0xc9, 0x2f, 0x93,
	0x54, 0xf0, 0xc8, 0x6e, 0x8a, 0x45, 0x08, 0x2c, 0xe8, 0xcb, 0x58, 0x24, 0xda, 0x6e, 0x8b, 0x96,
	0x82, 0x30, 0xf6, 0x54, 0x66, 0xfa, 0x7a, 0x95, 0xe1, 0x19, 0xc2, 0x78, 0x66, 0x9c, 0x85, 0xa5,
	0x5a, 0x62, 0x39, 0x09, 0xda, 0x5e, 0x64, 0x23, 0x3f, 0xb2, 0x15, 0x6a, 0x08, 0xb8, 0x63, 0xa0,
	0xfc, 0x28, 0x5f, 0x16, 0xe1, 0x0c, 0x16, 0xf4, 0x74, 0x66, 0x17, 0x45, 0x38, 0xc2, 0xad, 0xa7,
	0x2f, 0x70, 0xa7, 0xc2, 0xba, 0xaa, 0xb3, 0x9c, 0x84, 0xf4, 0x7d, 0x26, 0xf9, 0x89, 0xd2, 0x7e,
	0x64, 0x17, 0xc2, 0x39, 0x4d, 0x8f, 0x48, 0x9d, 0x89, 0x49, 0x3c, 0x1b, 0x28, 0xf3, 0x30, 0x45,
	0xfe, 0x12, 0x06, 0xef, 0xc3, 0x3e, 0x82, 0xc5, 0x55, 0x66, 0x78, 0x86, 0xd7, 0xac, 0x9b, 0xb1,
	0xa8, 0x6a, 0x2c, 0x27, 0xd1, 0x06, 0x70, 0x0c, 0xd6, 0x51, 0x89, 0x19, 0xc2, 0xf8, 0x37, 0x92,
	0xbc, 0xcd, 0x35, 0xc7, 0x1a, 0xaa, 0xb3, 0x05, 0x00, 0xfe, 0xc5, 0x17, 0x21, 0x13, 0xa7, 0x13,
	0xac, 0xa2, 0x3a, 0x2b, 0x42, 0x60, 0x83, 0x97, 0x68, 0xa9, 0xa5, 0xc8, 0x5c, 0xb7, 0x51, 0x3a,
	0xae, 0xb3, 0x39, 0x0d, 0xbe, 0x07, 0x3b, 0xfd, 0xc8, 0xae, 0x7c, 0x96, 0x02, 0x4d, 0x9e, 0x49,
	0xf1, 0x22, 0xb3, 0x6b, 0x9e, 0x21, 0xf0, 0xa6, 0x48, 0x6a, 0xb4, 0xc8, 0xee, 0x77, 0x39, 0x0d,
	0x37, 0x35, 0xb1, 0x5b, 0x61, 0xfd, 0xd4, 0x99, 0xa5, 0xe0, 0x1b, 0xc6, 0x93, 0x08, 0xdf, 0x78,
	0x84, 0x66, 0xcd, 0x69, 0xf0, 0xce, 0xe5, 0x54, 0x46, 0x58, 0x2a, 0x25, 0x86, 0x67, 0xc8, 0x5b,
	0x3f, 0xc9, 0x44, 0x6a, 0x5e, 0x31, 0x05, 0x52, 0x40, 0x80, 0x7f, 0x39, 0x81, 0x11, 0x8e, 0x7c,
	0xb3, 0xaa, 0x15, 0x10, 0xd0, 0xdc, 0xc3, 0x85, 0xe5, 0x75, 0xa3, 0x39, 0x12, 0xf4, 0xeb, 0x64,
	0xbd, 0xa5, 0xc6, 0x43, 0x99, 0x70, 0x54, 0x11, 0x76, 0xb5, 0xf5, 0x77, 0x1f, 0xdc, 0x19, 0xe8,
	0x0b, 0x01, 0x56, 0x94, 0x3e, 0xba, 0x5e, 0xfa, 0x98, 0xb6, 0xc8, 0xe6, 0x3c, 0xbd, 0xfb, 0xb1,
	0x0c, 0x85, 0x9d, 0xdb, 0xfb, 0xcb, 0xd7, 0x59, 0x99, 0x3e, 0xce, 0x39, 0x76, 0xe7, 0x13, 0x50,
	0xf3, 0x29, 0xfc, 0xae, 0x75, 0x57, 0x1b, 0x25, 0x08, 0x35, 0x12, 0xb0, 0x1b, 0x2c, 0x7d, 0x56,
	0xa8, 0xfa, 0x95, 0xbb, 0x55, 0x6f, 0x24, 0xf2, 0x6e, 0x60, 0xa8, 0xb7, 0x3e, 0x5e, 0x25, 0x9b,
	0x1e, 0x9b, 0x84, 0x8b, 0xc5, 0x84, 0x12, 0xb2, 0xc6, 0x58, 0x2b, 0xe8, 0x3e, 0x75, 0x5e, 0xa1,
	0x2e, 0xd9, 0x81, 0xf3, 0xa9, 0x7f, 0xee, 0x05, 0x9d, 0xee, 0x20, 0xf0, 0x9e, 0xfb, 0x7d, 0x7f,
	0xd0, 0x77, 0x56, 0x72, 0x4e, 0xff, 0xc3, 0xfe, 0xc0, 0xbb, 0x08, 0xbc, 0xe7, 0x2d, 0xaf, 0x37,
	0xf0, 0xbb, 0x1d, 0x67, 0x95, 0xee, 0x93, 0x3d, 0xe0, 0xf4, 0x9a, 0xac, 0x79, 0xe1, 0x0d, 0x3c,
	0x56, 0x60, 0x96, 0xe8, 0x1e, 0x79, 0x15, 0x98, 0xe7, 0xdd, 0x33, 0xbf, 0x55, 0x60, 0xdc, 0xa3,
	0x3b, 0xc4, 0x01, 0x06, 0xf3, 0x7a, 0x5e, 0x73, 0x10, 0xf4, 0xcf, 0xfd, 0x96, 0xe7, 0x94, 0xf3,
	0xbb, 0xfa, 0x5e, 0xbf, 0xef, 0x77, 0x3b, 0x4b, 0x2a, 0xac, 0xd1, 0x5d, 0x42, 0x81, 0xd9, 0x6e,
	0x0e, 0x9a, 0x85, 0xab, 0x2a, 0xb9, 0x6a, 0x9d, 0x6e, 0xd0, 0x6c, 0xb5, 0xbc, 0x7e, 0x3f, 0x60,
	0xfe, 0xd9, 0x93, 0x41, 0xdf, 0xa9, 0xe6, 0x8f, 0xb4, 0x4f, 0x0a, 0xf2, 0x35, 0xba, 0x4d, 0xd6,
	0x01, 0xbd, 0xec, 0x3c, 0xed, 0x74, 0x3f, 0xe8, 0x38, 0x9f, 0x7e, 0x5a, 0x7a, 0xeb, 0x3f, 0x65,
	0xb2, 0xb9, 0xbc, 0xaf, 0xd1, 0x2d, 0xb2, 0x0e, 0x48, 0xc0, 0x7a, 0xd6, 0x37, 0x0f, 0xc8, 0x0e,
	0x02, 0xcd, 0x76, 0xfb, 0xb2, 0xef, 0xb1, 0xf7, 0xbe, 0xfa, 0xfe, 0xd7, 0x02, 0xef, 0x79, 0xcf,
	0xf9, 0xc5, 0x21, 0xdd, 0x23, 0x14, 0x59, 0xe0, 0xfc, 0xa0, 0x97, 0x4a, 0x7e, 0x1b, 0xf2, 0x99,
	0xf3, 0xcb, 0xc3, 0xf9, 0x37, 0x03, 0x65, 0x78, 0x27, 0xb1, 0x82, 0x5f, 0x4c, 0xce, 0xaf, 0x0e,
	0xe9, 0x2e, 0xd9, 0x5e, 0x7c, 0x93, 0xe3, 0xbf, 0x5e, 0xe0, 0xd6, 0x33, 0x2d, 0xe6, 0x35, 0x07,
	0xce, 0x6f, 0x16, 0x57, 0x59, 0xbc, 0xd9, 0x6e, 0x07, 0xa0, 0x86, 0xf3, 0xdb, 0x43, 0x7a, 0x40,
	0x1e, 0x20, 0x0b, 0x8c, 0xf4, 0xda, 0xe6, 0x13, 0x2f, 0xb8, 0x68, 0x3e, 0xef, 0x5c, 0x5e, 0x38,
	0xbf, 0x3b, 0xa4, 0x6f, 0x92, 0xc3, 0x22, 0x7f, 0xd0, 0x6d, 0x37, 0x3f, 0xbc, 0x23, 0xf5, 0xfb,
	0x43, 0xda, 0x20, 0xfb, 0x45, 0xa9, 0xfc, 0x81, 0x5c, 0xe2, 0x0f, 0x87, 0xf4, 0x21, 0xd9, 0x43,
	0x89, 0x1e, 0xeb, 0x3e, 0xf1, 0x4f, 0x7c, 0xa3, 0xc4, 0x19, 0xeb, 0x5e, 0xf6, 0x9c, 0x3f, 0x2e,
	0xb4, 0x68, 0xb6, 0x2f, 0xfc, 0xce, 0xb9, 0xf7, 0xcc, 0x3b, 0x2f, 0x78, 0xfd, 0x4f, 0x87, 0xf4,
	0x90, 0xbc, 0x66, 0xf8, 0xe7, 0xcc, 0x6b, 0xb6, 0x3f, 0x3c, 0xf7, 0x4e, 0x07, 0x05, 0x81, 0x3f,
	0x2f, 0xbc, 0x88, 0x37, 0x06, 0x6d, 0xbf, 0x7f, 0xd2, 0xec, 0xb4, 0x9d, 0xbf, 0x2c, 0x5c, 0x62,
	0x18, 0x4f, 0xfd, 0xd6, 0x53, 0xaf, 0xed, 0xfc, 0x75, 0x71, 0xe3, 0x93, 0xee, 0x25, 0xeb, 0xbf,
	0xa4, 0xf0, 0xcf, 0x1a, 0x73, 0x95, 0xba, 0x9d, 0x96, 0xf7, 0x12, 0xff, 0xe7, 0x0d, 0xba, 0x4d,
	0xea, 0x26, 0x06, 0x36, 0x15, 0xbe, 0xdb, 0xa0, 0x8f, 0x88, 0x6b, 0x6c, 0xfc, 0x8c, 0x74, 0xfe,
	0x5e, 0x63, 0x1e, 0x85, 0xbb, 0x09, 0xfd, 0xfd, 0x46, 0x21, 0x40, 0x6d, 0xbf, 0x5f, 0x60, 0xfd,
	0xa0, 0x31, 0x37, 0x60, 0x29, 0x11, 0x7f, 0xd8, 0xa0, 0xfb, 0x64, 0xd7, 0xb8, 0x24, 0x8e, 0x55,
	0xe8, 0x47, 0x05, 0xe6, 0x8f, 0x1a, 0x73, 0xeb, 0x5a, 0x3c, 0x8e, 0xcf, 0x84, 0xc6, 0x3c, 0x59,
	0x08, 0xfc, 0xb8, 0x41, 0xef, 0x13, 0x27, 0xbf, 0xb5, 0xd3, 0x65, 0x5e, 0xab, 0xcb, 0xda, 0xce,
	0x4f, 0x1a, 0xd4, 0x25, 0xaf, 0x1a, 0x6f, 0xe1, 0x12, 0x31, 0xe7, 0xfc, 0xb4, 0xf1, 0xd6, 0x77,
	0x56, 0x49, 0x8d, 0x09, 0x2f, 0x4d, 0x31, 0xc1, 0xd7, 0x49, 0xa5, 0x3f, 0xc5, 0x75, 0xdf, 0x79,
	0x05, 0x88, 0xf6, 0x89, 0x97, 0xa6, 0x2a, 0x75, 0x56, 0xe8, 0x36, 0xd9, 0xf0, 0x13, 0x0d, 0xeb,
	0x7a, 0x6c, 0xa0, 0x55, 0x5a, 0x27, 0xd5, 0x8e, 0xd2, 0xde, 0x47, 0x32, 0xd3, 0x4e, 0x09, 0xea,
	0x0a, 0xd4, 0x81, 0x55, 0xbf, 0x1b, 0x86, 0xd3, 0x89, 0x14, 0x91, 0x73, 0x0f, 0x64, 0x60, 0xd9,
	0x86, 0xa5, 0xdb, 0x29, 0xd3, 0x4d, 0x42, 0x60, 0x7e, 0x5b, 0x7a, 0x8d, 0x6e, 0x90, 0x5a, 0x47,
	0xe9, 0x0b, 0x15, 0xc9, 0xab, 0x99, 0x53, 0x81, 0x07, 0xf3, 0xa4, 0xaf, 0x02, 0xef, 0x32, 0xc9,
	0xc9, 0x1a, 0xad, 0x91, 0xf2, 0x33, 0x1e, 0xcb, 0xc8, 0x21, 0x20, 0x76, 0x99, 0x18, 0x62, 0x1d,
	0x3a, 0xd5, 0x29, 0x97, 0xb1, 0x88, 0x9c, 0x3a, 0xa5, 0x64, 0x13, 0x7e, 0xa5, 0x74, 0x94, 0xce,
	0x8d, 0xd8, 0xc8, 0xd5, 0x82, 0x5f, 0x19, 0xa0, 0xec, 0x78, 0xa2, 0x67, 0xce, 0x26, 0x5c, 0xf1,
	0x4c, 0x4e, 0xba, 0x49, 0x3c, 0x73, 0xb6, 0x4e, 0xea, 0x7f, 0xff, 0xe4, 0x60, 0xe5, 0x1f, 0x9f,
	0x1c, 0xac, 0xfc, 0xfb, 0x93, 0x83, 0x95, 0xe1, 0x1a, 0xfe, 0x4f, 0xf9, 0xde, 0xff, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x80, 0x18, 0xbb, 0x9e, 0xe9, 0x14, 0x00, 0x00,
}
