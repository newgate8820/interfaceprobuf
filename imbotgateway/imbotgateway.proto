//protoc --gogofast_out=plugins=grpc:. gitlab.chatserver.im/interfaceprobuf/imbotgateway/*.proto
syntax = "proto3";

package imbotgateway;

import "common.proto";
option go_package="interfaceprobuf/imbotgateway";

// ChatType 聊天类型
enum ChatType {
    ChatTypeZero = 0;       //用户
    PeerUser = 1;       //用户聊天
    PeerChat = 2;       //普通群聊天
    ChannelChat = 3;    //超级群聊天
}

service BotgatewayService{
    //infoserver.pb.go
    //注册用户的接口(yuankan和lxl)
    rpc AuthSignUp (SignUpReq) returns (AuthSignUpResult) {
    }
    //获取用户完整信息，包含和自己的关联信息
    rpc GetFullUser (GetFullUserReq) returns (GetFullUserResult) {
    }

    //userserver.pb.go
    //账号(标记删除)
    rpc DeleteUserInfoById (DeleteAccountByIdReq) returns (DelAccountResult) {
    }
    //更新用户的username
    rpc UpdateUserName (UpdateuserNameReq) returns (UpdateuserNameResult) {
    }
    //注册指定用户的接口()
    rpc RegisterUserInfo (RegisterUserInfoReq) returns (RegisterUserInfoResult) {
    }
    //更新机器人头像
    rpc UpdateBotPic (UpdateBotPicRequest) returns (UpdateBotPicResult) {
    }
    //更新机器人相关信息
    rpc UpdateBotInfo (BotUpdateInfo) returns (BotUpdateInfoResult) {
    }
    //补充 更新机器人相关信息
    rpc UpdateBotInfoSupp(UpdateBotInfoSuppReq)returns(UpdateBotInfoSuppResult){
    }
    //通过用户电话号码获取用户基本信息
    rpc GetUserInfoByPhone (GetUserByphone) returns (GetUserInfoResult) {
    }
    //更新用户名称和about
    rpc UpdateUserProfile (UpdateUserProfileReq) returns (UpdateUserProfileResult) {
    }
    //获取用户信息
    rpc GetUserInfoById (GetUserInfoByIdReq) returns (GetUserInfoResult) {
    }
    //通过username获取用户基本信息
    rpc GetUserInfoByUsername (GetUserByUsername) returns (GetUserInfoResult) {
    }
    //获取一个sticker下面的所有贴图信息
    rpc GetStickerSetPackDcInfos (GetStickerSetPackDcInfosReq) returns (GetStickerSetPackDcInfosResult) {
    }
    //存储sticker集合的概要
    rpc StoreStickerSet (StoreShopStickerSetReq) returns (StoreShopStickerSetResult) {
    }
    //存储stickerSet下面的单个贴图
    rpc StoreStickerPackDc (StoreStickerPackDcReq) returns (StoreStickerPackDcResult) {
    }
    //用户安装sticker的操作
    rpc StoreUserStickerSet (StoreUserStickerSetReq) returns (StoreUserStickerSetResult) {
    }
    //删除指定的sticker集合
    rpc DeleteShopStickerSet (DeleteStickerSetReq) returns (DeleteStickerSetResult) {
    }
    //获取指定的sticker集合
    rpc GetStickerSetInfo (GetStickerSetInfoReq) returns (StickerSetInfo) {
    }
    //删除指定sticker包的单个sticker
    rpc DeleteStickerPackDocument (DeleteStickerPackDocumentReq) returns (DeleteStickerPackDocumentResult) {
    }
    //查询作者所有的sticker
    rpc GetAuthorAllStickerSet(GetAuthorAllStickerSetReq) returns (GetAuthorAllStickerSetResult){
    }
    //存储sickerSet 的documents
    rpc StoreStickerSetDocument (StoreShopStickerSetDocumentsReq) returns (StoreShopStickerSetDocumentsResult) {
    }

    //chatservice.pb.go
    //获取用户信息、群、超级群信息
    rpc GetUsersChats (GetUsersChatsReq) returns (GetUsersChatsResult) {
    }
    //通过群Id 用户Id 获取群基本信息
    rpc GetChatInfo (GetChatInfoReq) returns (GetChatInfoResp) {
    }

    //botserver.pb.go
    // 離開群組
    rpc LeaveChat (ReqData) returns (ReplyData) {
    }
    // 獲取群訊息
    rpc GetChat (ReqData) returns (ReplyData) {
    }
    // 獲取群成員數目
    rpc GetChatMembersCount (ReqGetChatMembersCount) returns (ReplyGetChatMembersCount) {
    }
    // 獲取群管理員
    rpc GetChatAdministrators (ReqData) returns (ReplyData) {
    }
    // 修改群名字
    rpc SetChatTitle (ReqData) returns (ReplyData) {
    }
    // 修改群簡介
    rpc SetChatDescription (ReqData) returns (ReplyData) {
    }
    // 置顶群消息
    rpc UpdatePinnedChannelMessage (ReqData) returns (ReplyData) {
    }
    // 發送Action
    rpc SendChatAction (ReqSendChatAction) returns (ReplyData) {
    }
    // 發送名片
    rpc SendContact (ReqData) returns (ReplyData) {
    }
    // 刪除消息
    rpc DeleteMessage (ReqDeleteMessage) returns (ReplyData) {
    }
    // GetGroups 获取群组消息
    rpc GetGroups (ReqGetGroups) returns (ReplyGetGroups) {
    }
    // GetGroups 获取使用者是管理員的群組消息
    rpc GetAdminGroups (ReqGetAdminGroups) returns (ReplyGetGroups) {
    }
    // 新增手動禁言名單
    rpc SetManualBlockList(ReqSetManualBlockList) returns (ManualBlockReplyData) {
    }
    // 刪除手動禁言名單
    rpc DelManualBlockList(ReqDelManualBlockList) returns (ManualBlockReplyData) {
    }
    // 讓使用者離開群(使用者後續還可以自動加入)
    rpc LeaveGroup(ReqData) returns (ReplyChannelData) {
    }

    //channelservice.pb.go
    //获取channel信息 不带user信息
    rpc GetChannelInfo(GetChannelInfoReq) returns (GetChannelInfoResp) {
    }

    //storage_proto.pb.go
    // 网关获取文件描述信息
    rpc GatewayGetFileDesc(MsgGetFileDescReq) returns (MsgGetFileDescResp) {
    }
    // QueryObjInfo 查询对象信息
    rpc QueryObjInfo(MsgQueryObjInfoReq) returns (MsgQueryObjInfoResp) {
    }
    // DownloadFile 下载文件或文件片
    rpc DownloadFile(MsgDownloadFileReq) returns (MsgDownloadFileResp) {
    }
    // UploadFile 上传文件或文件片
    rpc UploadFile(MsgUploadFileReq) returns (MsgUploadFileResp) {
    }
    // 网关上传文件
    rpc GatewayUploadFile(MsgFilePartsReq) returns (MsgFilePartsResp) {
    }
    // 网关上传文件描述信息
    rpc GatewayUploadFileDesc(MsgFileDescReq) returns (MsgFileDescResp) {
    }
    // 网关取上传文件的Fid, 与DC约定：1.收到此消息认为文件片已经传完；2.keyid+fileid与存储fid映射关系丢弃
    rpc GatewayGetUploadFileFid(MsgGetFidReq) returns (MsgGetFidResp) {
    }
    // ServiceLimit 服务上传下载限制
    rpc ServiceLimit(MsgServiceLimitReq) returns (MsgServiceLimitResp) {
    }

    //pbmessageserver.pb.go
    // 机器人调用接口
    rpc BotCall (ReqBotCall) returns (ReplyBotCall) {
    }
    // 根据 消息id和用户id 获取单聊消息\普通群消息
    rpc GetMessageByUserIdMsgId (ReqGetMessageByUserIdMsgId) returns (ReplyGetMessageByUserIdMsgId) {
    }
    // 根据 超级群ID和消息ID查询超级群信息
    rpc GetChannelMessageByChannelIdMsgId (ReqGetChannelMessageByChannelIdMsgId) returns (ReplyGetChannelMessageByChannelIdMsgId) {
    }
    // 根据 uuid和用户id 获取单聊消息\普通群消息
    rpc GetMessageByUserIdUuid (ReqGetMessageByUserIdUuid) returns (ReplyGetMessageByUserIdUuid) {
    }
    // 机器人发送webpage
    rpc BotCallMessageMedia(ReqBotCallMessageMedia) returns (ReplyBotCall){
    }
    // 发送给对方所有端
    rpc SendUserMsg (ReqSendUserMsg) returns (ReplyBool) {
    }
    // 机器人内联调用
    rpc BotInlineCall(ReqBotInlineCall) returns (ReplyBotInlineCall) {
    }
    // 根据超级群用户离线时间倒序获取超级群用户
    rpc GetChannelInactiveUsers(GetChannelInactiveUsersReq) returns (GetChannelInactiveUsersResult) {
    }
    //    普通群删除成员
    rpc DeleteChatUser (ReqDeleteChatUser) returns (ReplyDeleteChatUser) {
    }
    //获取给定超级群信息
    rpc Getchannels (ReqGetChannels) returns (ReplyGetChannels) {
    }
    //踢人并进组其再次加入超级群或者频道，或者解除该禁止
    rpc EditBanChannelUser (ReqBanChannelUser) returns (ReplyBanChannelUser) {
    }
    // 设置游戏分数
    rpc SetGameScore (ReqSetGameScore) returns (ReplySetGameScore) {
    }
    //    获取对话框
    rpc GetDialog (RequestDialog) returns (ReplyDialog) {
    }
    //变更群主
    rpc ChangeGroupAndChannelCrator (ReqChangeGroupAndChannelCrator) returns (ReplyChangeGroupAndChannelCrator) {
    }
    //主动加入超级群或者频道
    rpc JoinChannel (ReqJoinChannel) returns (ReplyJoinChannel) {
    }
    //获取超级群用户信息
    rpc GetParticipants (ReqParticipants) returns (ReplyParticipants) {
    }
    //    普通群升级超级群
    rpc MigrateChat (ReqMigrateChat) returns (ReplyMigrateChat) {
    }
    //    创建普通群
    rpc CreateChat (ReqCreateChat) returns (ReplyCreateChat) {
    }
    // 获取群的完整信息
    rpc GetFullChat (ReqGetFullChat) returns (ReplyGetFullChat) {
    }
    //离开超级群或者频道
    rpc LeaveChannel (ReqLeaveChannel) returns (ReplyLeaveChannel) {
    }
    //    发送媒体消息
    rpc SendMedia (ReqSendMedia) returns (ReplyResult) {
    }
    //    编辑群名称
    rpc EditChatTitle (ReqEditChatTitle) returns (ReplyEditChatTitle) {
    }

    //avthumb.pb.go
    // Resize 重设图片大小
    rpc Resize(ResizeRequest) returns (ResizeReply) {
    }
    // Constraint 约束图片尺寸
    rpc Constraint(ConstraintRequest) returns (ConstraintReply) {
    }
    // CompressImage 压缩图片质量
    rpc CompressImage(CompressImageRequest) returns (CompressImageReply) {
    }
    // GetVideoPreview 获取视频预览
    rpc GetVideoPreview(VideoPreviewRequest) returns (VideoPreviewReply) {
    }
    // GetAudioPreview 获取音频预览
    rpc GetAudioPreview(AudioPreviewRequest) returns (AudioPreviewReply) {
    }
}

//获取fullchannel
message ReqGetFullChannel {
    int32 fromId = 1;
    int32 channelId = 2;
    int64 accessHash = 3;
    Debug debug = 4;
    //messagedb.UserDialogAndMsg ChannelDialog = 5;
    //ChatMsgMeta msgMeta = 6;
}

//获取participants
message ReqGetParticipants {
    int32 offSet = 1;
    int32 limit = 2;
    int32 partiType = 3;
    int32 channelId = 4;
    int32 fromId = 5;
    string q = 6;
    int32 Hash = 7; // 校验唯一的， 如果不为0 则要进行唯一判断
    Debug debug = 8;
}

// 请求参数
message ReqUpdatePinnedChannelMessage {
    int32 from_id = 1;
    int32 flags = 2;
    bool silent = 3;
    //    InputChannel channel = 4;
    int32 channelId = 4;
    int32 id = 5;
    int64 from_keyid = 6;
    Debug debug = 7;

}

// 请求参数
message ReqEditChannelAbout {
    int32 from_id = 1;
    int64 fromKeyId = 2;
    int32 channelId = 3;
    string about = 4;
    int64 accessHash = 5;
    Debug debug = 6;
}

// edit title
message ReqEditChannelTitle {
    int32 channelId = 1;
    string title = 2;
    int32 userId = 3;
    int64 from_keyid = 4;
    Debug debug = 5;
}

message ReplyChannelData {
    bytes reply = 1;
    int32 errorCode = 2; //1: 无法获取 2: 数据过去超时 3: 崩溃 4: 发起id为0
    int32 ChannelId = 4; // 是否超级群
    int32 FromId = 5;
}


message ReqDelManualBlockList{
    BlockUser UnBlockUser =1;
    int32 bot_id = 2;
    Debug debug = 3;
}

message ReqSetManualBlockList{
    BlockUser BlockUser =1;
    int32 bot_id = 2;
    Debug debug = 3;
}

//禁言某用戶
message BlockUser {
    int32 userId =1;
    int64 blockTime =2;  //禁言时间
    int64 groupId =3;
}

message ManualBlockReplyData{
    bytes replyData = 1;
    bool reply = 2;
    int32 errorCode = 3;
}

//存储sticker 集合概要 Documents请求
message StoreShopStickerSetDocumentsReq {
    int32 id = 1;
    repeated int32 documents = 2;
    Debug debug = 3;
}

//存储sticker 集合概要 Documents返回结果
message StoreShopStickerSetDocumentsResult {
    ReErrCode Errorcode = 1; //返回错误码
}

//结构体AuthorStickerSet
message AuthorStickerSet{
    int32 user_id =1;
    int64 stickerset_id = 2;
    string short_name = 3;
    bool archived = 4;
    bool installed = 5;
    bool disabled = 6;
    int32 ordered = 7;
    int32 created = 8;
    int32 updated = 9;
}

//获取作者所有sticker
message GetAuthorAllStickerSetReq{
   int32 user_id = 1;
}

//获取作者所有sticker返回
message GetAuthorAllStickerSetResult{
   ReErrCode ErrorCode = 1; //返回错误码
   repeated AuthorStickerSet sets = 2;
}

//删除单个sticker
message DeleteStickerPackDocumentReq{
    int32 id = 1;
    int64 stickerset_id = 2;
}

//删除单个sticker返回
message DeleteStickerPackDocumentResult{
    ReErrCode Errorcode = 1; //返回错误码
}

//获取指定的sticker集合的请求
message GetStickerSetInfoReq {
    int32 id = 1; //sticker的id
    string short_name = 2;
    bool is_id = 3; //是否是根据Id来查 true 根据Id查询 false根据short_name 查询
    Debug debug = 4;
}

//sticker set 的基础信息
message StickerSetInfo {
    int32 id = 1;
    int64 access_hash = 2;
    bool free = 3;
    bool official = 4;
    bool masks = 5;
    string title = 6;
    string short_name = 7;
    int32 count = 8;
    int64 hash = 9;
    string emoticon = 10;
    repeated int32 documents = 11;
}

////获取指定的sticker集合的返回
message GetStickerSetInfoResult {
    StickerSetInfo stickerSetInfo = 1; //sticker的基础信息
    ReErrCode Errorcode = 2; //返回错误码
}

//删除sticker商城的请求
message DeleteStickerSetReq {
    int32 stickerId = 1;
    Debug debug = 2;
    int32 user_id = 3; //sticker作者id - 2018.10.18 新增
}

//删除sticker商城的返回
message DeleteStickerSetResult {
    ReErrCode Errorcode = 1; //返回错误码
}

//用户安装sticker集合的请求
message StoreUserStickerSetReq {
    int32 user_id = 1;
    int32 stickerset_id = 2;
    bool installed = 3;
    bool disabled = 4;
    int32 order = 5;
    bool archived = 6;
    Debug debug = 7;
}

//用户安装sticker集合的返回
message StoreUserStickerSetResult {
    ReErrCode Errorcode = 2; //返回错误码
}

//存储sticker文档的请求
message StoreStickerPackDcReq {
    StickerPackDocumentBase stickpackbase = 1;
    Debug debug = 2;
}

//存储sticker文档的返回
message StoreStickerPackDcResult {
    int32 id = 1;
    ReErrCode Errorcode = 2; //返回错误码
}
//存储sticker 集合概要的请求参数
message StoreShopStickerSetReq {
    int64 access_hash = 1;
    bool free = 2;
    bool official = 3;
    bool masks = 4;
    string title = 5;
    string short_name = 6;
    int32 count = 7;
    int64 hash = 8;
    string emoticon = 9;
    repeated int32 documents = 10;
    Debug debug = 11;
    int32 user_id = 12; //sticker作者id - 2018.10.18 新增
}
//存储sticker 集合概要的返回
message StoreShopStickerSetResult {
    int32 id = 1; //Sticker生成的id
    ReErrCode Errorcode = 2; //返回错误码
}
//###################################  avthumb.pb.go  #############################
// StatusCode 状态码
enum StatusCode {
    StatusCodeOK = 0;   // 操作成功
    StatusCodeFail = 1; // 操作失败
}

// ResizeRequest 重设图片大小请求
message ResizeRequest {
    bytes data = 1;         // 图片数据
    uint32 width = 2;       // 图片宽度
    uint32 height = 3;      // 图片高度
}

// ResizeReply 重设图片大小响应
message ResizeReply {
    StatusCode status = 1;  // 状态码
    bytes data = 2;         // 图片数据
}

// ConstraintRequest 约束图片大小请求
message ConstraintRequest {
    bytes data = 1;         // 图片数据
    uint32 max_size = 2;    // 最大尺寸
    bool output_webp = 3;   // 输出webp格式
}

// ConstraintReply 约束图片大小响应
message ConstraintReply {
    StatusCode status = 1;          // 状态码
    bytes data = 2;                 // 图片数据
    uint32 width = 3;               // 图片宽度
    uint32 height = 4;              // 图片高度
    uint32 origin_width = 5;        // 图片原始宽度
    uint32 origin_height = 6;       // 图片原始高度
}

// CompressImageRequest 压缩图片请求
message CompressImageRequest {
    bytes data = 1;         // 图片数据
    uint32 quality = 2;     // 图片质量(0-100)
}

// CompressImageReply 压缩图片响应
message CompressImageReply {
    StatusCode status = 1;  // 状态码
    bytes data = 2;         // 图片数据
}

// VideoPreviewRequest 获取视频预览请求
message VideoPreviewRequest {
    bytes data = 1;         // 视频数据
    uint32 max_size = 2;    // 预览图最大尺寸
}

// VideoPreviewReply 获取视频预览响应
message VideoPreviewReply {
    StatusCode status = 1;  // 状态码
    uint32 duration = 2;    // 播放时长
    bytes preview = 3;      // 图片预览
    uint32 width = 4;       // 预览图宽度
    uint32 height = 5;      // 预览图高度
}

// AudioPreviewRequest 获取音频预览请求
message AudioPreviewRequest {
    bytes data = 1;         // 音频数据
    uint32 max_size = 2;    // 封面图最大尺寸
}

// AudioPreviewReply 获取音频预览响应
message AudioPreviewReply {
    StatusCode status = 1;  // 状态码
    uint32 duration = 2;    // 播放时长
    bytes cover = 3;        // 封面图片
    string title = 4;       // 标题
    string artist = 5;      // 演奏者
    uint32 width = 6;       // 封面图宽度
    uint32 height = 7;      // 封面图高度
}

//###################################  pbmessageserver.pb.go  #############################
//获取participants
message ReqParticipants {
    int32 offSet = 1;
    int32 limit = 2;
    int32 partiType = 3;
    int32 channelId = 4;
    int32 fromId = 5;
    string q = 6;
    int32 Hash = 7; // 校验唯一的， 如果不为0 则要进行唯一判断
    Debug debug = 8;
}

//返回participants
message ReplyParticipants {
    bytes Updates = 1; // 二进制，真实类型是mtproto.tl_updates_layer62
    int32 error_code = 2;
}

message ReqCreateChat {
    int32 chatid = 1; // 群id
    string title = 2; // 名称
    int32 creator = 3; // 创建者
    repeated int32 users = 4; // 用户数据
    uint64 from_keyid = 5;
    Debug debug = 6;
}

message ReplyCreateChat {
    bytes result = 1; // 创建普通群返回
    int32 error = 5; // 1: 创建者id为0 2: 被加入的成员不允许 3: 成员不允许被添加 4: 其他, 5: 消息处理出错
}

message ReqMigrateChat {
    int32 fromid = 1; // 邀请者id
    int32 chatid = 2; //等待升级的普通群ID
    //    int32 channelid = 3; //升级后的超级群ID
    //    string title = 4; // 群标题
    //    repeated int32 members = 5; //现有用户
    //    string Phone = 6; //电话
    uint64 fromkeyid = 3; //邀请者的KEYID
    //    bool isBroadCast = 8; //超级群还是频道
    Debug debug = 4;
}

message ReplyMigrateChat {
    //    int32 msgid = 1; // 消息id
    //    int64 randomid = 2; // 消息随机id
    //    int32 date = 3; // 消息时间
    //    int32 pts = 4; // 消息pts
    //    int32 channelmsgid = 5; //频道的消息ID
    //    int32 channelpts = 6; //频道的PTS
    bytes result = 7; // 二进制，真实类型是mtproto.tl_updates_layer62
    int32 error = 8; // 1. 普通群处理失败 2. 超级群处理失败 3. 其他错误
}

//邀请用户进入超级群
message ReqJoinChannel {
    int32 channelId = 1; //超级群ID
    int32 userId = 3; // 自己的ID
    int64 from_keyid = 5; //自己的KEYID
    int64 accessHash = 6; //超级群的哈希
    bool byLink = 7; //是否通过链接加入
    int32 invitor = 8;
    int32 invite_type = 9;//邀请类型 0-链接 1-二维码
    Debug debug = 10;
}

//邀请操作的ACK
message ReplyJoinChannel {
    bytes reply = 1; // 二进制，真实类型是mtproto.tl_updates_layer62
    int32 error_code = 2;
}

//转移群主
message ReqChangeGroupAndChannelCrator {
    int32 GroupId = 1;
    int32 fromId = 2;
    int32 OperatorId = 3;
    bool IsChat = 4;
}

//回复转移群主
message ReplyChangeGroupAndChannelCrator {
    bool valid = 1;
    int32 error_code = 2;
}

// 机器人调用接口
message ReqBotCallMessageMedia {
    int32 fromBotId = 1;
    string MsgTxt = 2;
    bytes request = 3;
    int32 layer = 4;
    Debug debug = 5;
}

// 获取dialog接口
message RequestDialog {
    int32 userid = 1; // 用户id
    int32 flags = 2; // 标识位
    int32 offset_date = 3; // 偏移时间
    int32 offset_id = 4; // 偏移id
    bytes offset_peer = 5; // 偏移对象 (mt 协议)
    int32 limit = 6; // 偏移长度
    Debug debug = 7;
}
// 返回dialog
message ReplyDialog {
    //    repeated DialogSlice dialog = 1;
    bytes result = 1; // 对话框数据返回
    int32 error = 2; // 1: 无法获取到 2: userid 为0  3: 数据库返回超时 4: 消息服务crash
}

// 用户分数
message UserScore {
    int32 userid = 1;  // 用户id
    int32 score = 2;  // 用户分数
}

// 调用设置分数
message ReqSetGameScore {
    int32  userid = 1;  // 用户id
    repeated UserScore  scores  = 2;  // 新分数（非负数）
    bool   force  = 3;  // 如果为true 则覆盖原分数  如果为false则新分数大于旧的分数才会更新
    bool   disable_edit_message = 4; // 为true则不编辑
    int32  chat_id = 5; // 如果未指定inline_message_id，这里就需要填chatid
    int32  chat_type = 6;// 1-单聊 2-普通群 3-超级群
    int32  message_id = 7;  // 如果未指定inline_message_id，则需要填这里的message_id
    string inline_message_id = 8; // 如果未指定chatid或者message_id 就需要填写inline_message_id
    int32  botid = 9;  // 请求的机器人id
    Debug debug = 10; // debug
}
// 设置分数返回
message ReplySetGameScore {
    bool succeed = 1;
    string error = 2;
    int32  errorcode = 3;
}

message ReplyBanChannelUser {
    bytes Updates = 1; // 二进制，真实类型是mtproto.tl_updates_layer62
    int32 error_code = 2;
}
message ReqBanChannelUser {
    int32 fromId = 1;
    int64 fromKeyId = 2;
    int32 channelId = 3;
    int32 bannedUserId = 4;
    int64 accessHash = 5;
    int32 util_date = 6;
    ChannelBannedRights channelBannedRights = 7;
    Debug debug = 8;
}
message ChannelBannedRights {
    int32 flags = 1;
    bool view_messages = 2;
    bool send_messages = 3;
    bool send_media = 4;
    bool send_stickers = 5;
    bool send_gifs = 6;
    bool send_games = 7;
    bool send_inline = 8;
    bool embed_links = 9;
    int32 until_date = 10;
}

//请求给定channel
message ReqGetChannels {
    repeated int32 channelIds = 1;
    int32 fromId = 2;
    Debug debug = 3;
}

//返回get channles
message ReplyGetChannels {
    bytes reply = 1;
    int32 error_code = 2;
}

message ReqDeleteChatUser {
    int32 fromid = 1; // 用户id
    int32 chatid = 2; // 群id
    int32 userid = 3; // 被删除人id
    uint64 from_keyid = 4;
    Debug debug = 6;
}

message ReplyDeleteChatUser {
    bytes result = 1;
    int32 error = 2; // 1.发起方id为0 2: 群id为0 3: 自增pts和msgid失败
}

message ChannelInactiveUser{
	int32 id = 1;           //用户ID
	string name = 2;        //用户名
	int32 time = 3;         //活跃时间
	string timeStr = 4;     //活跃时间格式化字符串
}
message GetChannelInactiveUsersReq{
    int32 channelId = 1;
    int32 limit = 2;
    int32 userid = 3;
}
message GetChannelInactiveUsersResult{
    repeated ChannelInactiveUser users = 1;
    int32 count = 2;    //群当前总人数
    int32 errcode = 3; //返回错误码
}

// 机器人调用接口-Inline
message ReqBotInlineCall {
    Debug debug = 1; // debug
    int32 user_id = 2; // 用户id
    int32 bot_id = 3; // 机器人id
    uint64 message_id = 4; // msg_id
    uint64 key_id = 5; // keyid
    uint64 session_id = 6; // sessionid
    bytes data = 7; // tl encode data
    string id = 8; // sendInline时客户端带的id
}
// 机器人返回接口-Inline
message ReplyBotInlineCall {
    int32 err_code = 1;
    string message = 2;
    InlineCall inlinecall=3;

}
message InlineCall{
    int32 MsgId = 1;
    int32 FromId = 2;
    int32 ChatId = 3;
    int32 ChatType = 4;
    int32 BotId = 5;
}

// 发送给对方所有端
message ReqSendUserMsg {
    int32 fromid = 1; // 发送方id
    int64 fromKeyId = 2; // 发送方keyid
    int32 toid = 3; // 接收方id
    bytes data = 4; // Mt数据
    Debug debug = 5; // debug日志
}
// 置顶对话框返回
message ReplyBool {
    bool result = 1;
    int32 error = 2; // 1: 对话框不存在  2:无法置顶 3:其他错误
}

// 机器人调用接口
message ReqBotCall {
    int32 frombotId = 1;
    bytes request = 2;
    int32 layer = 3;
    Debug debug = 4;
}

// 机器人返回接口
message ReplyBotCall {
    bytes result = 1;
    int32 error = 2;
}


message ReqGetMessageByUserIdUuid {
    int32 UserId = 1;
    int64 Uuid = 2;
    Debug debug = 3;
}
message ReplyGetMessageByUserIdUuid {
    UserMsg UserMessage = 1;
    int32 error_code = 2;
}


message ReqGetChannelMessageByChannelIdMsgId {
    int32 ChannelId = 1;
    int32 MsgId = 2;
    Debug debug = 3;
}
message ReplyGetChannelMessageByChannelIdMsgId {
    UserMsg UserMessage = 1;
    int32 error_code = 2;
}

message ReqGetMessageByUserIdMsgId {
    int32 UserId = 1;
    int32 MsgId = 2;
    Debug debug = 3;
}
message ReplyGetMessageByUserIdMsgId {
    UserMsg UserMessage = 1;
    int32 error_code = 2;
}

//###################################  storage_proto.pb.go  #############################
// 网关上传文件描述信息请求
message MsgFileDescReq {
    uint64                 fid           = 1;        // 存储服务分配存储文件的唯一标识
    uint64                 access_hash   = 2;        // 访问hash
    bytes                  data          = 3;        // 数据
}
// 网关上传文件描述信息响应
message MsgFileDescResp{
    ERpcResultCode         result        = 1;        // 结果码
}

// 服务上传下载限制请求
message MsgServiceLimitReq {
    uint32                 reserved      = 1;        // 保留用
}
// 服务上传下载限制响应(单位：Byte)
message MsgServiceLimitResp {
    uint32                 usfsl         = 1;        // 上传小文件大小限制，usfsl=>upload small file size limit
    uint32                 ubfssl        = 2;        // 上传大文件分片大小限制，ubfsl=>upload big file slice size limit
    uint32                 dssl          = 3;        // 下载分片大小限制，usfsl=>download slice size limit
}

// 网关取Fid请求
message MsgGetFidReq {
    uint64                 keyid         = 1;        // Ref 消息协议
    int64                  fileid        = 2;        // Ref 消息协议
    uint32                 file_type     = 3;        // Ref 消息协议 1 small 2: big
    string                 md5           = 4;        // file_type为1时的文件hash，如果与服务实际收到不符丢掉；另外加密聊天客户端没有传md5,为空放弃校检
    uint32                 part_total    = 5;        // file_type为2时的文件分片总数，如果与服务实际收到不符丢掉
}
// 网关取Fid响应
message MsgGetFidResp{
    uint64                 fid           = 1;        // 存储服务分配存储文件的唯一标识
    uint64                 access_hash   = 2;        // 访问hash
    uint64                 file_size     = 3;        // 文件大小
    ERpcResultCode         result        = 4;        // 结果码
}

// 网关上传文件请求
message MsgFilePartsReq {
    uint64                 keyid         = 1;        // Ref 消息协议
    int64                  fileid        = 2;        // Ref 消息协议
    uint32                 part_id       = 3;        // 文件片ID，备注：从0开始分配
    uint32                 file_type     = 4;        // Ref 消息协议 1 small 2: big
    uint32                 part_total    = 5;        // file_type为2时有效，大文件片总数，小文件没有
    bytes                  data          = 6;        // 数据
}
// 网关上传文件响应
message MsgFilePartsResp{
    ERpcResultCode         result        = 1;        // 结果码
}

// 上传文件请求
message MsgUploadFileReq {
    UploadReqPara1         para1         = 1;        // Ref
    UploadReqPara2         para2         = 2;        // Ref
    bytes                  data          = 3;        // 数据
}
// 上传请求参数1（仅用于分片上传文件时）
message UploadReqPara1 {
    uint64                 fid           = 1;        // 之前申请的Fid
    uint32                 part_id       = 2;        // 文件片ID，备注：从0开始分配
    uint32                 part_size     = 3;        // 文件片大小
}
// 上传请求参数2（仅用于非分片上传文件时）
message UploadReqPara2 {
    string                 file_name     = 1;        // 上传文件的文件名
    uint32                 file_size     = 2;        // 文件大小
    string                 file_hash     = 3;        // 文件Hash SHA-256
    uint32                 ttl           = 4;        // 文件存储周期（秒）, 为0时表示永久存储（可通过接口修改）
}
// 文件上传响应参数1（仅用于分片上传文件时）
message FileUploadRespPara {
    uint64                 fid           = 1;        // 存储服务分配存储文件的唯一标识
    uint32                 part_id       = 2;        // 文件片ID
}
// 上传文件响应
message MsgUploadFileResp {
    ERpcResultCode         result        = 1;        // 结果码
    FileUploadRespPara     para1         = 2;        // Ref
    FidPara                para2         = 3;        // Ref，仅用于非分片文件上传
    uint64                 access_hash   = 4;        // 仅用于非分片文件上传存储之后的访问hash
}

// 下载文件请求
message MsgDownloadFileReq {
    uint64                 fid           = 1;        // 存储服务分配存储文件的唯一标识
    uint64                 access_hash   = 2;        // 访问hash
    uint32                 offset        = 3;        // 起始偏移，从0开始
    uint32                 length        = 4;        // 长度
}
// 下载文件响应参数1
message DownloadFileRespPara1 {
    uint64                 fid           = 1;        // 存储服务分配存储文件的唯一标识
    uint32                 offset        = 2;        // 起始偏移，从0开始
    string                 file_name     = 3;        // 上传文件时的文件名
}
// 下载文件响应参数2
message DownloadFileRespPara2 {
    uint32                 length        = 2;        // 长度
    bytes                  data          = 3;        // 数据
}
// 下载文件响应
message MsgDownloadFileResp {
    ERpcResultCode         result        = 1;        // 结果码
    DownloadFileRespPara1  para1         = 2;        // Ref, 保留选用，当result = RRC_OK 且选用时有效
    DownloadFileRespPara2  para2         = 3;        // Ref，当result = RRC_OK有效
}

// 查询对象信息请求
message MsgQueryObjInfoReq {
    uint64                 fid           = 1;        // 存储服务分配存储文件的唯一标识
}
// 查询对象信息响应参数
message QueryObjInfoRespPara {
    string                 name          = 1;        // 文件名
    uint64                 size          = 2;        // 文件大小（Byte）
    uint64                 access_hash   = 3;        // 访问hash，仅针对机器人服务返回处理
}
// 查询对象信息响应
message MsgQueryObjInfoResp {
    QueryObjInfoRespPara   para          = 1;        // Ref
    ERpcResultCode         result        = 2;        // 结果码
}

// 网关获取文件描述信息请求
message MsgGetFileDescReq {
    uint64                 fid           = 1;        // 存储服务分配存储文件的唯一标识
    uint64                 access_hash   = 2;        // 访问hash
}
// 网关获取文件描述信息响应
message MsgGetFileDescResp{
    ERpcResultCode         result        = 1;        // 结果码
    bytes                  data          = 2;        // 数据
}

//###################################  channelservice.pb.go  #############################
//获取channel信息  不带user信息
message GetChannelInfoReq {
    int32 channel_id  = 1 ; //channle的Id
    int64 access_hash = 2 ; //哈希值
    Debug Dlog = 3 ; //日志
}
//群基础信息
message GetChannelInfoResp {
    ChannelInfoBase  baseInfo    = 1 ;  //基础信息  不带user信息
    ChatResultCode   resultcode  = 2 ;     //返回结果码
}

//###################################  botserver.pb.go  #############################
message ReqGetAdminGroups {
    int32 UserID     = 1;
    //int32 PeerFilter = 2; // 2：只要普通群 4：只要超级群 8：只要频道 （可相互组合 ex: 2|4|8 暂时不支持单聊)
    Debug debug = 2;
}

message ReqGetGroups {
    int32 UserID     = 1;
    int32 PeerFilter = 2; // 2：只要普通群 4：只要超级群 8：只要频道 （可相互组合 ex: 2|4|8 暂时不支持单聊)
}

message Peer {
    int32 PeerID    = 1;
    string PeerName = 2;
}

message ReplyGetGroups {
    repeated Peer Groups      = 1; // 普通群
    repeated Peer SuperGroups = 2; // 超级群
    repeated Peer Channels    = 3; // 频道
}

message ReqDeleteMessage{
    ChatType ChatType =1;
    int32 user_id = 2;
    int32 chat_id = 3;
    repeated int32 msg_id = 4;
    Debug debug = 5;
}

message ReqSendChatAction{
    ChatType ChatType =1;
    int32 user_id = 2;
    int32 chat_id = 3;
    bytes actionData = 4 ;
    Debug debug = 5;
}

message ReqData{
    ChatType ChatType =1;
    bytes reqData = 2 ;
    int32 bot_id = 3;
}

message ReplyData{
    bytes reply = 1; //回覆結果
    int32 error = 2;
}

message ReqGetChatMembersCount{
    ChatType ChatType =1;
    int32 user_id = 2;
    int32 chat_id = 3;
    Debug debug = 4;
}

message ReplyGetChatMembersCount{
    int32 ChatMembersCount = 1;
    int32 ErrorCode = 2;
}

//通过群Id 用户Id 获取群基本信息
message GetChatInfoReq {
    int32        chat_id    = 1 ; //群id
    int32        user_id    = 2 ; //用户id
    bool         robot_get  = 3 ; //是否是机器人获取
    Debug Dlog       = 4 ; //日志
}

//获取用户信息、群、超级群信息的请求
message GetUsersChatsReq {
    int32 userid             = 1; // 获取方id
    repeated int32 users     = 2; // 获取用户信息的用户id数组
    repeated int32 chatid    = 3; //获取普通群信息的群id数组
    repeated int32 channelid = 4; // 获取超级群用户信息的超级群id数组
    int32 protocol_layer     = 5; // 协议层数
    Debug Dlog        = 6; //日志
}

//获取用户信息、群、超级群信息的返回
message GetUsersChatsResult {
    //repeated ChannelInfoBase channels = 1;
    //repeated GetChatInfoResp chats = 3;
    repeated bytes channels = 1;
    UserInfoArray users = 2;
    repeated bytes chats = 3;
    repeated int32 no_chats = 4;
    repeated int32 no_chans = 5;
    ChatResultCode resultcode = 6;//结果码
}

//根据用户id获取用户ID
message GetUserInfoByIdReq {
    int32 self_id = 1; //自己的用户ＩＤ
    int32 user_id = 2; //需要获取的用户ID
    Debug debug = 3;
}

message GetUserInfoByIdArrReq {
    int32 self_id = 1; //自己的用户ＩＤ
    repeated int32 user_ids = 2; //需要获取的用户ID
    Debug debug = 3;
}

//更新用户信息
message UpdateUserProfileReq {
    int32 user_id = 1; //用户ID
    int32 flags = 2; // flags 第0 位 为更新firstName 第一位 last_name 第二位为 about
    string first_name = 3;
    string last_name = 4;
    string about = 5;
    Debug debug = 6;
}

//更新用户昵称等的返回结果
message UpdateUserProfileResult {
    userInfo Uinfo = 1; //用户基本信息
    ReErrCode Errorcode = 2; //返回错误码
}

//根据用户电话号码来获取用户信息
message GetUserByphone {
    string phone = 1;
    Debug debug = 2;
}

//获取用户基本信息的返回结果
message GetUserInfoResult {
    userInfo Uinfo = 1; ///用户的基本信息
    ReErrCode Errorcode = 2; //返回错误码
}

message UpdateBotInfoSuppReq{
    int32 UserId = 1;
    string Placeholder = 2;
    bool  geo = 3;
    Debug debug = 4;
}

message UpdateBotInfoSuppResult{
    ReErrCode Errorcode = 1;
}

//机器人基础信息更改
message BotUpdateInfo {
    int32 user_id = 1;
    int32 bot_info_version = 2;
    bool bot_chat_history = 3;
    bool bot_no_chat = 4;
    Debug debug = 5;
}

//机器人更改信息的返回结果
message BotUpdateInfoResult {
    ReErrCode Errorcode = 1; //返回错误码
}

//更新机器人头像请求
message UpdateBotPicRequest {
    int32 bot_id = 1;
    bytes photo = 2; //(mtproto.TL_photo_layer105)
    Debug debug = 3;
}

message UpdateBotPicResult {
    ReErrCode Errorcode = 2; //返回错误码
}

//更新用户的username的请求
message UpdateuserNameReq {
    int32 user_id = 1; //用户的ID
    string userName = 2; //需要更新的用户名
    Debug debug = 3;
    int64 key_id = 4;
}

//更新用户的username的返回结果
message UpdateuserNameResult {
    userInfo Uinfo = 1; ///用户的基本信息
    ReErrCode Errorcode = 2; //返回错误码
}

//注册指定用户的请求
message RegisterUserInfoReq {
    int32 user_id = 1;
    int64 access_hash = 2;
    string PhoneNumber = 3; //电话号码
    string FirstName = 4;
    string LastName = 5;
    bool is_bot = 6;
    int32 bot_info_version = 7;
    bool bot_chat_history = 8;
    bool bot_no_chats = 9;
    Debug debug = 10;
}

//注册指定用户的请求
message RegisterUserInfoResult {
    userInfo uinfo = 1;
    ReErrCode Errorcode = 2; //返回错误码
}

//删除账号的请求
message DeleteAccountByIdReq {
    int32 user_id = 1; //被删除账号的用户id
    int32 del_id = 2; //删除者的Id
    Debug debug = 3;
}

//删除账号的返回结果
message DelAccountResult {
    ReErrCode Errorcode = 1; //返回错误码
}

//用户注册的请求结构
message SignUpReq {
    string PhoneNumber = 1; //电话号码
    string PhoneCodeHash = 2;
    string PhoneCode = 3; //验证码
    int64 keyId = 5; //用户的keyId(端的标识)
    string FirstName = 6;
    string LastName = 7;
    bool is_bot = 8;
    int32 bot_info_version = 9;
    bool bot_chat_history = 10;
    bool bot_no_chats = 11;
    int32 dc_id = 12;
    Debug debug = 13;
    string country_code = 14; // 国家码
    string local_phone = 15; // 不带国家码的号码
}

message AuthSignUpResult {
    ResultCode code = 1;
    userInfo userInfo = 2;
    enum ResultCode {
        Success = 0;
        InternalError = 1; // 服务器内部错误
        PhoneNumberInvalid = 2; // 无效的电话号码
        PhoneNumberOccupied = 3; // 电话号码已注册
        CaptchaExpired = 4; // 验证码失效
        CaptchaInvalid = 5; // 验证码无效
        FloodWait = 6;
        SignUpRobotBlocked = 7; // 机器人注册接口暂时关闭
    }
}

//getfull user的请求
message GetFullUserReq {
    int32 selfId = 1; //自己的用户Id
    int32 UserId = 2; // 需要获取的用户的ID
    int64 AccessHash = 3; //需要获取的用户的哈希值
    Debug debug = 4; //日志记录相关的
}

//getfull user的请求
message GetFullUserResult {
    userInfo uinfo = 1; //用户的基础信息
    bool isblocked = 2; //此用户是否是自己的黑名单
    bool phone_calls_private = 3; //userfull需要
    bool phone_calls_available = 4; //userfull需要
    string about = 5; //用户的个性签名
    int32 common_chat = 6; //共同群的个数
    ReErrCode Errorcode = 7; //返回错误码
}

//根据用户userName来获取用户基本信息
message GetUserByUsername {
    int32 self_id = 1;
    string username = 2;
    Debug debug = 3;
}

//获取群的完整信息
message ReqGetFullChat {
    int32 fromid = 1;
    int32 chatid = 2;
    Debug debug = 3;
}
message ReplyGetFullChat {
    bytes result = 1;
    int32 error = 2;
}

// 退出超级群
message ReqLeaveChannel {
    int32 channelId = 1; //退出的超级群ID
    int32 userId = 2; // 退出的用户
    int64 from_keyid = 3; //退出用户的KEYID
    Debug debug = 4;
}

// 推出超级群返回
message ReplyLeaveChannel {
    bytes reply = 1; // 二进制，真实类型是mtproto.tl_updates_layer62
    int32 error_code = 2;
}

//发送媒体
message ReqSendMedia {
    int32 fromid = 1; // 发送方id
    int32 flags = 2;
    bool silent = 3;
    bool background = 4;
    bool clear_draft = 5;
    bytes peer = 6;
    int32 reply_to_msg_id = 7;
    bytes media = 8;
    repeated bytes multi_media = 9;
    int64 random_id = 10;
    bytes reply_markup = 11;
    int64 newfileid = 12;
    uint64 fromkey_id = 13; // 发送方的key_id
    repeated int32 chatmeber = 14;
    Debug debug = 15;
    int32 via_bot_id = 16; //via_bot_id
}
// 状态返回
message ReplyResult {
    bytes result = 1;
    int32 error = 2; //1: 无法获取 2: 数据过去超时 3: 崩溃 4: 发起id为0
}

//编辑群名字
message ReqEditChatTitle {
    int32 fromid = 1; // 用户id
    int32 chatid = 2;
    string title = 3;
    uint64 from_keyid = 4;
    Debug debug = 5;
}

message ReplyEditChatTitle {
    bytes result = 1;
    int32 error = 5; //1. 群不存在 2. 编辑失败
}

//获取一个sticker下面的所有贴图信息的请求
message GetStickerSetPackDcInfosReq {
    int32 id = 1; //stickerSet 的id
    Debug debug = 2;
}

//获取一个sticker下面的所有贴图信息的返回
message GetStickerSetPackDcInfosResult {
    repeated StickerPackDocumentInfo StPDcInfo = 1;
}
//sticker集合里面具体内容
//存储单个sticker内容请求
message StickerPackDocumentBase {
    int64 attributes_stiker_set_id = 1;
    uint64 document_id = 2;
    int64 access_hash = 3;
    string mime_type = 4;
    int32 size = 5;
    string thumb = 6;
    int32 dc_id = 7;
    int32 date = 8;
    int32 attributes_image_size_w = 9;
    int32 attributes_image_size_h = 10;
    string attributes_stiker_alt = 11;
    int64 attributes_stiker_set_access_hash = 12;
    string attributes_file_name = 13;
}


message StickerPackDocumentInfo {
    int32 id = 1;
    StickerPackDocumentBase infoBase = 2;
}