//protoc --gogofast_out=plugins=grpc:. gitlab.chatserver.im/interfaceprobuf/imbotgateway/*.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: imbotgateway.proto

package imbotgateway

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ChatType 聊天类型
type ChatType int32

const (
	ChatType_ChatTypeZero ChatType = 0 //用户
	ChatType_PeerUser     ChatType = 1 //用户聊天
	ChatType_PeerChat     ChatType = 2 //普通群聊天
	ChatType_ChannelChat  ChatType = 3 //超级群聊天
)

// Enum value maps for ChatType.
var (
	ChatType_name = map[int32]string{
		0: "ChatTypeZero",
		1: "PeerUser",
		2: "PeerChat",
		3: "ChannelChat",
	}
	ChatType_value = map[string]int32{
		"ChatTypeZero": 0,
		"PeerUser":     1,
		"PeerChat":     2,
		"ChannelChat":  3,
	}
)

func (x ChatType) Enum() *ChatType {
	p := new(ChatType)
	*p = x
	return p
}

func (x ChatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatType) Descriptor() protoreflect.EnumDescriptor {
	return file_imbotgateway_proto_enumTypes[0].Descriptor()
}

func (ChatType) Type() protoreflect.EnumType {
	return &file_imbotgateway_proto_enumTypes[0]
}

func (x ChatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatType.Descriptor instead.
func (ChatType) EnumDescriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{0}
}

// ###################################  avthumb.pb.go  #############################
// StatusCode 状态码
type StatusCode int32

const (
	StatusCode_StatusCodeOK   StatusCode = 0 // 操作成功
	StatusCode_StatusCodeFail StatusCode = 1 // 操作失败
)

// Enum value maps for StatusCode.
var (
	StatusCode_name = map[int32]string{
		0: "StatusCodeOK",
		1: "StatusCodeFail",
	}
	StatusCode_value = map[string]int32{
		"StatusCodeOK":   0,
		"StatusCodeFail": 1,
	}
)

func (x StatusCode) Enum() *StatusCode {
	p := new(StatusCode)
	*p = x
	return p
}

func (x StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imbotgateway_proto_enumTypes[1].Descriptor()
}

func (StatusCode) Type() protoreflect.EnumType {
	return &file_imbotgateway_proto_enumTypes[1]
}

func (x StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusCode.Descriptor instead.
func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{1}
}

type AuthSignUpResult_ResultCode int32

const (
	AuthSignUpResult_Success             AuthSignUpResult_ResultCode = 0
	AuthSignUpResult_InternalError       AuthSignUpResult_ResultCode = 1 // 服务器内部错误
	AuthSignUpResult_PhoneNumberInvalid  AuthSignUpResult_ResultCode = 2 // 无效的电话号码
	AuthSignUpResult_PhoneNumberOccupied AuthSignUpResult_ResultCode = 3 // 电话号码已注册
	AuthSignUpResult_CaptchaExpired      AuthSignUpResult_ResultCode = 4 // 验证码失效
	AuthSignUpResult_CaptchaInvalid      AuthSignUpResult_ResultCode = 5 // 验证码无效
	AuthSignUpResult_FloodWait           AuthSignUpResult_ResultCode = 6
	AuthSignUpResult_SignUpRobotBlocked  AuthSignUpResult_ResultCode = 7 // 机器人注册接口暂时关闭
)

// Enum value maps for AuthSignUpResult_ResultCode.
var (
	AuthSignUpResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
		2: "PhoneNumberInvalid",
		3: "PhoneNumberOccupied",
		4: "CaptchaExpired",
		5: "CaptchaInvalid",
		6: "FloodWait",
		7: "SignUpRobotBlocked",
	}
	AuthSignUpResult_ResultCode_value = map[string]int32{
		"Success":             0,
		"InternalError":       1,
		"PhoneNumberInvalid":  2,
		"PhoneNumberOccupied": 3,
		"CaptchaExpired":      4,
		"CaptchaInvalid":      5,
		"FloodWait":           6,
		"SignUpRobotBlocked":  7,
	}
)

func (x AuthSignUpResult_ResultCode) Enum() *AuthSignUpResult_ResultCode {
	p := new(AuthSignUpResult_ResultCode)
	*p = x
	return p
}

func (x AuthSignUpResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthSignUpResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imbotgateway_proto_enumTypes[2].Descriptor()
}

func (AuthSignUpResult_ResultCode) Type() protoreflect.EnumType {
	return &file_imbotgateway_proto_enumTypes[2]
}

func (x AuthSignUpResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthSignUpResult_ResultCode.Descriptor instead.
func (AuthSignUpResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{133, 0}
}

// 获取fullchannel
type ReqGetFullChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId     int32  `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	ChannelId  int32  `protobuf:"varint,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	AccessHash int64  `protobuf:"varint,3,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug      *Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetFullChannel) Reset() {
	*x = ReqGetFullChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetFullChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetFullChannel) ProtoMessage() {}

func (x *ReqGetFullChannel) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetFullChannel.ProtoReflect.Descriptor instead.
func (*ReqGetFullChannel) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{0}
}

func (x *ReqGetFullChannel) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqGetFullChannel) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetFullChannel) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqGetFullChannel) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 获取participants
type ReqGetParticipants struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OffSet    int32  `protobuf:"varint,1,opt,name=offSet,proto3" json:"offSet,omitempty"`
	Limit     int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	PartiType int32  `protobuf:"varint,3,opt,name=partiType,proto3" json:"partiType,omitempty"`
	ChannelId int32  `protobuf:"varint,4,opt,name=channelId,proto3" json:"channelId,omitempty"`
	FromId    int32  `protobuf:"varint,5,opt,name=fromId,proto3" json:"fromId,omitempty"`
	Q         string `protobuf:"bytes,6,opt,name=q,proto3" json:"q,omitempty"`
	Hash      int32  `protobuf:"varint,7,opt,name=Hash,proto3" json:"Hash,omitempty"` // 校验唯一的， 如果不为0 则要进行唯一判断
	Debug     *Debug `protobuf:"bytes,8,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetParticipants) Reset() {
	*x = ReqGetParticipants{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetParticipants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetParticipants) ProtoMessage() {}

func (x *ReqGetParticipants) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetParticipants.ProtoReflect.Descriptor instead.
func (*ReqGetParticipants) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{1}
}

func (x *ReqGetParticipants) GetOffSet() int32 {
	if x != nil {
		return x.OffSet
	}
	return 0
}

func (x *ReqGetParticipants) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqGetParticipants) GetPartiType() int32 {
	if x != nil {
		return x.PartiType
	}
	return 0
}

func (x *ReqGetParticipants) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetParticipants) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqGetParticipants) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *ReqGetParticipants) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *ReqGetParticipants) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 请求参数
type ReqUpdatePinnedChannelMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId int32 `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	Flags  int32 `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	Silent bool  `protobuf:"varint,3,opt,name=silent,proto3" json:"silent,omitempty"`
	//    InputChannel channel = 4;
	ChannelId int32  `protobuf:"varint,4,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Id        int32  `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	FromKeyid int64  `protobuf:"varint,6,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *Debug `protobuf:"bytes,7,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqUpdatePinnedChannelMessage) Reset() {
	*x = ReqUpdatePinnedChannelMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdatePinnedChannelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdatePinnedChannelMessage) ProtoMessage() {}

func (x *ReqUpdatePinnedChannelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdatePinnedChannelMessage.ProtoReflect.Descriptor instead.
func (*ReqUpdatePinnedChannelMessage) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{2}
}

func (x *ReqUpdatePinnedChannelMessage) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqUpdatePinnedChannelMessage) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ReqUpdatePinnedChannelMessage) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

func (x *ReqUpdatePinnedChannelMessage) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqUpdatePinnedChannelMessage) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReqUpdatePinnedChannelMessage) GetFromKeyid() int64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqUpdatePinnedChannelMessage) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 请求参数
type ReqEditChannelAbout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId     int32  `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	FromKeyId  int64  `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	ChannelId  int32  `protobuf:"varint,3,opt,name=channelId,proto3" json:"channelId,omitempty"`
	About      string `protobuf:"bytes,4,opt,name=about,proto3" json:"about,omitempty"`
	AccessHash int64  `protobuf:"varint,5,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug      *Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqEditChannelAbout) Reset() {
	*x = ReqEditChannelAbout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqEditChannelAbout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqEditChannelAbout) ProtoMessage() {}

func (x *ReqEditChannelAbout) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqEditChannelAbout.ProtoReflect.Descriptor instead.
func (*ReqEditChannelAbout) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{3}
}

func (x *ReqEditChannelAbout) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqEditChannelAbout) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *ReqEditChannelAbout) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqEditChannelAbout) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *ReqEditChannelAbout) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqEditChannelAbout) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// edit title
type ReqEditChannelTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32  `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Title     string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	UserId    int32  `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	FromKeyid int64  `protobuf:"varint,4,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqEditChannelTitle) Reset() {
	*x = ReqEditChannelTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqEditChannelTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqEditChannelTitle) ProtoMessage() {}

func (x *ReqEditChannelTitle) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqEditChannelTitle.ProtoReflect.Descriptor instead.
func (*ReqEditChannelTitle) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{4}
}

func (x *ReqEditChannelTitle) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqEditChannelTitle) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ReqEditChannelTitle) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqEditChannelTitle) GetFromKeyid() int64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqEditChannelTitle) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyChannelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply     []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=errorCode,proto3" json:"errorCode,omitempty"` //1: 无法获取 2: 数据过去超时 3: 崩溃 4: 发起id为0
	ChannelId int32  `protobuf:"varint,4,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 是否超级群
	FromId    int32  `protobuf:"varint,5,opt,name=FromId,proto3" json:"FromId,omitempty"`
}

func (x *ReplyChannelData) Reset() {
	*x = ReplyChannelData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyChannelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyChannelData) ProtoMessage() {}

func (x *ReplyChannelData) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyChannelData.ProtoReflect.Descriptor instead.
func (*ReplyChannelData) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{5}
}

func (x *ReplyChannelData) GetReply() []byte {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *ReplyChannelData) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *ReplyChannelData) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReplyChannelData) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

type ReqDelManualBlockList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnBlockUser *BlockUser `protobuf:"bytes,1,opt,name=UnBlockUser,proto3" json:"UnBlockUser,omitempty"`
	BotId       int32      `protobuf:"varint,2,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	Debug       *Debug     `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqDelManualBlockList) Reset() {
	*x = ReqDelManualBlockList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDelManualBlockList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDelManualBlockList) ProtoMessage() {}

func (x *ReqDelManualBlockList) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDelManualBlockList.ProtoReflect.Descriptor instead.
func (*ReqDelManualBlockList) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{6}
}

func (x *ReqDelManualBlockList) GetUnBlockUser() *BlockUser {
	if x != nil {
		return x.UnBlockUser
	}
	return nil
}

func (x *ReqDelManualBlockList) GetBotId() int32 {
	if x != nil {
		return x.BotId
	}
	return 0
}

func (x *ReqDelManualBlockList) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqSetManualBlockList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockUser *BlockUser `protobuf:"bytes,1,opt,name=BlockUser,proto3" json:"BlockUser,omitempty"`
	BotId     int32      `protobuf:"varint,2,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	Debug     *Debug     `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqSetManualBlockList) Reset() {
	*x = ReqSetManualBlockList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSetManualBlockList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSetManualBlockList) ProtoMessage() {}

func (x *ReqSetManualBlockList) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSetManualBlockList.ProtoReflect.Descriptor instead.
func (*ReqSetManualBlockList) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{7}
}

func (x *ReqSetManualBlockList) GetBlockUser() *BlockUser {
	if x != nil {
		return x.BlockUser
	}
	return nil
}

func (x *ReqSetManualBlockList) GetBotId() int32 {
	if x != nil {
		return x.BotId
	}
	return 0
}

func (x *ReqSetManualBlockList) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 禁言某用戶
type BlockUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	BlockTime int64 `protobuf:"varint,2,opt,name=blockTime,proto3" json:"blockTime,omitempty"` //禁言时间
	GroupId   int64 `protobuf:"varint,3,opt,name=groupId,proto3" json:"groupId,omitempty"`
}

func (x *BlockUser) Reset() {
	*x = BlockUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUser) ProtoMessage() {}

func (x *BlockUser) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUser.ProtoReflect.Descriptor instead.
func (*BlockUser) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{8}
}

func (x *BlockUser) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *BlockUser) GetBlockTime() int64 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

func (x *BlockUser) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type ManualBlockReplyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyData []byte `protobuf:"bytes,1,opt,name=replyData,proto3" json:"replyData,omitempty"`
	Reply     bool   `protobuf:"varint,2,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode int32  `protobuf:"varint,3,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (x *ManualBlockReplyData) Reset() {
	*x = ManualBlockReplyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualBlockReplyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualBlockReplyData) ProtoMessage() {}

func (x *ManualBlockReplyData) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualBlockReplyData.ProtoReflect.Descriptor instead.
func (*ManualBlockReplyData) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{9}
}

func (x *ManualBlockReplyData) GetReplyData() []byte {
	if x != nil {
		return x.ReplyData
	}
	return nil
}

func (x *ManualBlockReplyData) GetReply() bool {
	if x != nil {
		return x.Reply
	}
	return false
}

func (x *ManualBlockReplyData) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// 存储sticker 集合概要 Documents请求
type StoreShopStickerSetDocumentsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Documents []int32 `protobuf:"varint,2,rep,packed,name=documents,proto3" json:"documents,omitempty"`
	Debug     *Debug  `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *StoreShopStickerSetDocumentsReq) Reset() {
	*x = StoreShopStickerSetDocumentsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreShopStickerSetDocumentsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreShopStickerSetDocumentsReq) ProtoMessage() {}

func (x *StoreShopStickerSetDocumentsReq) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreShopStickerSetDocumentsReq.ProtoReflect.Descriptor instead.
func (*StoreShopStickerSetDocumentsReq) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{10}
}

func (x *StoreShopStickerSetDocumentsReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StoreShopStickerSetDocumentsReq) GetDocuments() []int32 {
	if x != nil {
		return x.Documents
	}
	return nil
}

func (x *StoreShopStickerSetDocumentsReq) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 存储sticker 集合概要 Documents返回结果
type StoreShopStickerSetDocumentsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=imbotgateway.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *StoreShopStickerSetDocumentsResult) Reset() {
	*x = StoreShopStickerSetDocumentsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreShopStickerSetDocumentsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreShopStickerSetDocumentsResult) ProtoMessage() {}

func (x *StoreShopStickerSetDocumentsResult) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreShopStickerSetDocumentsResult.ProtoReflect.Descriptor instead.
func (*StoreShopStickerSetDocumentsResult) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{11}
}

func (x *StoreShopStickerSetDocumentsResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 结构体AuthorStickerSet
type AuthorStickerSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StickersetId int64  `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	ShortName    string `protobuf:"bytes,3,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Archived     bool   `protobuf:"varint,4,opt,name=archived,proto3" json:"archived,omitempty"`
	Installed    bool   `protobuf:"varint,5,opt,name=installed,proto3" json:"installed,omitempty"`
	Disabled     bool   `protobuf:"varint,6,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Ordered      int32  `protobuf:"varint,7,opt,name=ordered,proto3" json:"ordered,omitempty"`
	Created      int32  `protobuf:"varint,8,opt,name=created,proto3" json:"created,omitempty"`
	Updated      int32  `protobuf:"varint,9,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *AuthorStickerSet) Reset() {
	*x = AuthorStickerSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorStickerSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorStickerSet) ProtoMessage() {}

func (x *AuthorStickerSet) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorStickerSet.ProtoReflect.Descriptor instead.
func (*AuthorStickerSet) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{12}
}

func (x *AuthorStickerSet) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AuthorStickerSet) GetStickersetId() int64 {
	if x != nil {
		return x.StickersetId
	}
	return 0
}

func (x *AuthorStickerSet) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *AuthorStickerSet) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

func (x *AuthorStickerSet) GetInstalled() bool {
	if x != nil {
		return x.Installed
	}
	return false
}

func (x *AuthorStickerSet) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *AuthorStickerSet) GetOrdered() int32 {
	if x != nil {
		return x.Ordered
	}
	return 0
}

func (x *AuthorStickerSet) GetCreated() int32 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *AuthorStickerSet) GetUpdated() int32 {
	if x != nil {
		return x.Updated
	}
	return 0
}

// 获取作者所有sticker
type GetAuthorAllStickerSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetAuthorAllStickerSetReq) Reset() {
	*x = GetAuthorAllStickerSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuthorAllStickerSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuthorAllStickerSetReq) ProtoMessage() {}

func (x *GetAuthorAllStickerSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuthorAllStickerSetReq.ProtoReflect.Descriptor instead.
func (*GetAuthorAllStickerSetReq) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{13}
}

func (x *GetAuthorAllStickerSetReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 获取作者所有sticker返回
type GetAuthorAllStickerSetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode ReErrCode           `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=imbotgateway.ReErrCode" json:"ErrorCode,omitempty"` //返回错误码
	Sets      []*AuthorStickerSet `protobuf:"bytes,2,rep,name=sets,proto3" json:"sets,omitempty"`
}

func (x *GetAuthorAllStickerSetResult) Reset() {
	*x = GetAuthorAllStickerSetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuthorAllStickerSetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuthorAllStickerSetResult) ProtoMessage() {}

func (x *GetAuthorAllStickerSetResult) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuthorAllStickerSetResult.ProtoReflect.Descriptor instead.
func (*GetAuthorAllStickerSetResult) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{14}
}

func (x *GetAuthorAllStickerSetResult) GetErrorCode() ReErrCode {
	if x != nil {
		return x.ErrorCode
	}
	return ReErrCode_Success
}

func (x *GetAuthorAllStickerSetResult) GetSets() []*AuthorStickerSet {
	if x != nil {
		return x.Sets
	}
	return nil
}

// 删除单个sticker
type DeleteStickerPackDocumentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StickersetId int64 `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
}

func (x *DeleteStickerPackDocumentReq) Reset() {
	*x = DeleteStickerPackDocumentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStickerPackDocumentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStickerPackDocumentReq) ProtoMessage() {}

func (x *DeleteStickerPackDocumentReq) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStickerPackDocumentReq.ProtoReflect.Descriptor instead.
func (*DeleteStickerPackDocumentReq) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteStickerPackDocumentReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteStickerPackDocumentReq) GetStickersetId() int64 {
	if x != nil {
		return x.StickersetId
	}
	return 0
}

// 删除单个sticker返回
type DeleteStickerPackDocumentResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=imbotgateway.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *DeleteStickerPackDocumentResult) Reset() {
	*x = DeleteStickerPackDocumentResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStickerPackDocumentResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStickerPackDocumentResult) ProtoMessage() {}

func (x *DeleteStickerPackDocumentResult) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStickerPackDocumentResult.ProtoReflect.Descriptor instead.
func (*DeleteStickerPackDocumentResult) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteStickerPackDocumentResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 获取指定的sticker集合的请求
type GetStickerSetInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //sticker的id
	ShortName string `protobuf:"bytes,2,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	IsId      bool   `protobuf:"varint,3,opt,name=is_id,json=isId,proto3" json:"is_id,omitempty"` //是否是根据Id来查 true 根据Id查询 false根据short_name 查询
	Debug     *Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetStickerSetInfoReq) Reset() {
	*x = GetStickerSetInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStickerSetInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStickerSetInfoReq) ProtoMessage() {}

func (x *GetStickerSetInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStickerSetInfoReq.ProtoReflect.Descriptor instead.
func (*GetStickerSetInfoReq) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{17}
}

func (x *GetStickerSetInfoReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetStickerSetInfoReq) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *GetStickerSetInfoReq) GetIsId() bool {
	if x != nil {
		return x.IsId
	}
	return false
}

func (x *GetStickerSetInfoReq) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// sticker set 的基础信息
type StickerSetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AccessHash int64   `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Free       bool    `protobuf:"varint,3,opt,name=free,proto3" json:"free,omitempty"`
	Official   bool    `protobuf:"varint,4,opt,name=official,proto3" json:"official,omitempty"`
	Masks      bool    `protobuf:"varint,5,opt,name=masks,proto3" json:"masks,omitempty"`
	Title      string  `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	ShortName  string  `protobuf:"bytes,7,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Count      int32   `protobuf:"varint,8,opt,name=count,proto3" json:"count,omitempty"`
	Hash       int64   `protobuf:"varint,9,opt,name=hash,proto3" json:"hash,omitempty"`
	Emoticon   string  `protobuf:"bytes,10,opt,name=emoticon,proto3" json:"emoticon,omitempty"`
	Documents  []int32 `protobuf:"varint,11,rep,packed,name=documents,proto3" json:"documents,omitempty"`
}

func (x *StickerSetInfo) Reset() {
	*x = StickerSetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StickerSetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StickerSetInfo) ProtoMessage() {}

func (x *StickerSetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StickerSetInfo.ProtoReflect.Descriptor instead.
func (*StickerSetInfo) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{18}
}

func (x *StickerSetInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StickerSetInfo) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *StickerSetInfo) GetFree() bool {
	if x != nil {
		return x.Free
	}
	return false
}

func (x *StickerSetInfo) GetOfficial() bool {
	if x != nil {
		return x.Official
	}
	return false
}

func (x *StickerSetInfo) GetMasks() bool {
	if x != nil {
		return x.Masks
	}
	return false
}

func (x *StickerSetInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *StickerSetInfo) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *StickerSetInfo) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *StickerSetInfo) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *StickerSetInfo) GetEmoticon() string {
	if x != nil {
		return x.Emoticon
	}
	return ""
}

func (x *StickerSetInfo) GetDocuments() []int32 {
	if x != nil {
		return x.Documents
	}
	return nil
}

// //获取指定的sticker集合的返回
type GetStickerSetInfoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StickerSetInfo *StickerSetInfo `protobuf:"bytes,1,opt,name=stickerSetInfo,proto3" json:"stickerSetInfo,omitempty"`                    //sticker的基础信息
	Errorcode      ReErrCode       `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imbotgateway.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *GetStickerSetInfoResult) Reset() {
	*x = GetStickerSetInfoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStickerSetInfoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStickerSetInfoResult) ProtoMessage() {}

func (x *GetStickerSetInfoResult) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStickerSetInfoResult.ProtoReflect.Descriptor instead.
func (*GetStickerSetInfoResult) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{19}
}

func (x *GetStickerSetInfoResult) GetStickerSetInfo() *StickerSetInfo {
	if x != nil {
		return x.StickerSetInfo
	}
	return nil
}

func (x *GetStickerSetInfoResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 删除sticker商城的请求
type DeleteStickerSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StickerId int32  `protobuf:"varint,1,opt,name=stickerId,proto3" json:"stickerId,omitempty"`
	Debug     *Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
	UserId    int32  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //sticker作者id - 2018.10.18 新增
}

func (x *DeleteStickerSetReq) Reset() {
	*x = DeleteStickerSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStickerSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStickerSetReq) ProtoMessage() {}

func (x *DeleteStickerSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStickerSetReq.ProtoReflect.Descriptor instead.
func (*DeleteStickerSetReq) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteStickerSetReq) GetStickerId() int32 {
	if x != nil {
		return x.StickerId
	}
	return 0
}

func (x *DeleteStickerSetReq) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *DeleteStickerSetReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 删除sticker商城的返回
type DeleteStickerSetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=imbotgateway.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *DeleteStickerSetResult) Reset() {
	*x = DeleteStickerSetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStickerSetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStickerSetResult) ProtoMessage() {}

func (x *DeleteStickerSetResult) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStickerSetResult.ProtoReflect.Descriptor instead.
func (*DeleteStickerSetResult) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteStickerSetResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 用户安装sticker集合的请求
type StoreUserStickerSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StickersetId int32  `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	Installed    bool   `protobuf:"varint,3,opt,name=installed,proto3" json:"installed,omitempty"`
	Disabled     bool   `protobuf:"varint,4,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Order        int32  `protobuf:"varint,5,opt,name=order,proto3" json:"order,omitempty"`
	Archived     bool   `protobuf:"varint,6,opt,name=archived,proto3" json:"archived,omitempty"`
	Debug        *Debug `protobuf:"bytes,7,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *StoreUserStickerSetReq) Reset() {
	*x = StoreUserStickerSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreUserStickerSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreUserStickerSetReq) ProtoMessage() {}

func (x *StoreUserStickerSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreUserStickerSetReq.ProtoReflect.Descriptor instead.
func (*StoreUserStickerSetReq) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{22}
}

func (x *StoreUserStickerSetReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *StoreUserStickerSetReq) GetStickersetId() int32 {
	if x != nil {
		return x.StickersetId
	}
	return 0
}

func (x *StoreUserStickerSetReq) GetInstalled() bool {
	if x != nil {
		return x.Installed
	}
	return false
}

func (x *StoreUserStickerSetReq) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *StoreUserStickerSetReq) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *StoreUserStickerSetReq) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

func (x *StoreUserStickerSetReq) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 用户安装sticker集合的返回
type StoreUserStickerSetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imbotgateway.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *StoreUserStickerSetResult) Reset() {
	*x = StoreUserStickerSetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreUserStickerSetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreUserStickerSetResult) ProtoMessage() {}

func (x *StoreUserStickerSetResult) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreUserStickerSetResult.ProtoReflect.Descriptor instead.
func (*StoreUserStickerSetResult) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{23}
}

func (x *StoreUserStickerSetResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 存储sticker文档的请求
type StoreStickerPackDcReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stickpackbase *StickerPackDocumentBase `protobuf:"bytes,1,opt,name=stickpackbase,proto3" json:"stickpackbase,omitempty"`
	Debug         *Debug                   `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *StoreStickerPackDcReq) Reset() {
	*x = StoreStickerPackDcReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreStickerPackDcReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreStickerPackDcReq) ProtoMessage() {}

func (x *StoreStickerPackDcReq) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreStickerPackDcReq.ProtoReflect.Descriptor instead.
func (*StoreStickerPackDcReq) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{24}
}

func (x *StoreStickerPackDcReq) GetStickpackbase() *StickerPackDocumentBase {
	if x != nil {
		return x.Stickpackbase
	}
	return nil
}

func (x *StoreStickerPackDcReq) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 存储sticker文档的返回
type StoreStickerPackDcResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imbotgateway.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *StoreStickerPackDcResult) Reset() {
	*x = StoreStickerPackDcResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreStickerPackDcResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreStickerPackDcResult) ProtoMessage() {}

func (x *StoreStickerPackDcResult) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreStickerPackDcResult.ProtoReflect.Descriptor instead.
func (*StoreStickerPackDcResult) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{25}
}

func (x *StoreStickerPackDcResult) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StoreStickerPackDcResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 存储sticker 集合概要的请求参数
type StoreShopStickerSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessHash int64   `protobuf:"varint,1,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Free       bool    `protobuf:"varint,2,opt,name=free,proto3" json:"free,omitempty"`
	Official   bool    `protobuf:"varint,3,opt,name=official,proto3" json:"official,omitempty"`
	Masks      bool    `protobuf:"varint,4,opt,name=masks,proto3" json:"masks,omitempty"`
	Title      string  `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	ShortName  string  `protobuf:"bytes,6,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Count      int32   `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`
	Hash       int64   `protobuf:"varint,8,opt,name=hash,proto3" json:"hash,omitempty"`
	Emoticon   string  `protobuf:"bytes,9,opt,name=emoticon,proto3" json:"emoticon,omitempty"`
	Documents  []int32 `protobuf:"varint,10,rep,packed,name=documents,proto3" json:"documents,omitempty"`
	Debug      *Debug  `protobuf:"bytes,11,opt,name=debug,proto3" json:"debug,omitempty"`
	UserId     int32   `protobuf:"varint,12,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //sticker作者id - 2018.10.18 新增
}

func (x *StoreShopStickerSetReq) Reset() {
	*x = StoreShopStickerSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreShopStickerSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreShopStickerSetReq) ProtoMessage() {}

func (x *StoreShopStickerSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreShopStickerSetReq.ProtoReflect.Descriptor instead.
func (*StoreShopStickerSetReq) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{26}
}

func (x *StoreShopStickerSetReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *StoreShopStickerSetReq) GetFree() bool {
	if x != nil {
		return x.Free
	}
	return false
}

func (x *StoreShopStickerSetReq) GetOfficial() bool {
	if x != nil {
		return x.Official
	}
	return false
}

func (x *StoreShopStickerSetReq) GetMasks() bool {
	if x != nil {
		return x.Masks
	}
	return false
}

func (x *StoreShopStickerSetReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *StoreShopStickerSetReq) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *StoreShopStickerSetReq) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *StoreShopStickerSetReq) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *StoreShopStickerSetReq) GetEmoticon() string {
	if x != nil {
		return x.Emoticon
	}
	return ""
}

func (x *StoreShopStickerSetReq) GetDocuments() []int32 {
	if x != nil {
		return x.Documents
	}
	return nil
}

func (x *StoreShopStickerSetReq) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *StoreShopStickerSetReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 存储sticker 集合概要的返回
type StoreShopStickerSetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                           //Sticker生成的id
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imbotgateway.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *StoreShopStickerSetResult) Reset() {
	*x = StoreShopStickerSetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreShopStickerSetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreShopStickerSetResult) ProtoMessage() {}

func (x *StoreShopStickerSetResult) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreShopStickerSetResult.ProtoReflect.Descriptor instead.
func (*StoreShopStickerSetResult) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{27}
}

func (x *StoreShopStickerSetResult) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StoreShopStickerSetResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// ResizeRequest 重设图片大小请求
type ResizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data   []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`      // 图片数据
	Width  uint32 `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`   // 图片宽度
	Height uint32 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"` // 图片高度
}

func (x *ResizeRequest) Reset() {
	*x = ResizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResizeRequest) ProtoMessage() {}

func (x *ResizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResizeRequest.ProtoReflect.Descriptor instead.
func (*ResizeRequest) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{28}
}

func (x *ResizeRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ResizeRequest) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *ResizeRequest) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// ResizeReply 重设图片大小响应
type ResizeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=imbotgateway.StatusCode" json:"status,omitempty"` // 状态码
	Data   []byte     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`                                   // 图片数据
}

func (x *ResizeReply) Reset() {
	*x = ResizeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResizeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResizeReply) ProtoMessage() {}

func (x *ResizeReply) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResizeReply.ProtoReflect.Descriptor instead.
func (*ResizeReply) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{29}
}

func (x *ResizeReply) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_StatusCodeOK
}

func (x *ResizeReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// ConstraintRequest 约束图片大小请求
type ConstraintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`                                // 图片数据
	MaxSize    uint32 `protobuf:"varint,2,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`          // 最大尺寸
	OutputWebp bool   `protobuf:"varint,3,opt,name=output_webp,json=outputWebp,proto3" json:"output_webp,omitempty"` // 输出webp格式
}

func (x *ConstraintRequest) Reset() {
	*x = ConstraintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstraintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstraintRequest) ProtoMessage() {}

func (x *ConstraintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstraintRequest.ProtoReflect.Descriptor instead.
func (*ConstraintRequest) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{30}
}

func (x *ConstraintRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ConstraintRequest) GetMaxSize() uint32 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

func (x *ConstraintRequest) GetOutputWebp() bool {
	if x != nil {
		return x.OutputWebp
	}
	return false
}

// ConstraintReply 约束图片大小响应
type ConstraintReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=imbotgateway.StatusCode" json:"status,omitempty"`    // 状态码
	Data         []byte     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`                                      // 图片数据
	Width        uint32     `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`                                   // 图片宽度
	Height       uint32     `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`                                 // 图片高度
	OriginWidth  uint32     `protobuf:"varint,5,opt,name=origin_width,json=originWidth,proto3" json:"origin_width,omitempty"`    // 图片原始宽度
	OriginHeight uint32     `protobuf:"varint,6,opt,name=origin_height,json=originHeight,proto3" json:"origin_height,omitempty"` // 图片原始高度
}

func (x *ConstraintReply) Reset() {
	*x = ConstraintReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstraintReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstraintReply) ProtoMessage() {}

func (x *ConstraintReply) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstraintReply.ProtoReflect.Descriptor instead.
func (*ConstraintReply) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{31}
}

func (x *ConstraintReply) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_StatusCodeOK
}

func (x *ConstraintReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ConstraintReply) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *ConstraintReply) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ConstraintReply) GetOriginWidth() uint32 {
	if x != nil {
		return x.OriginWidth
	}
	return 0
}

func (x *ConstraintReply) GetOriginHeight() uint32 {
	if x != nil {
		return x.OriginHeight
	}
	return 0
}

// CompressImageRequest 压缩图片请求
type CompressImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`        // 图片数据
	Quality uint32 `protobuf:"varint,2,opt,name=quality,proto3" json:"quality,omitempty"` // 图片质量(0-100)
}

func (x *CompressImageRequest) Reset() {
	*x = CompressImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompressImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompressImageRequest) ProtoMessage() {}

func (x *CompressImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompressImageRequest.ProtoReflect.Descriptor instead.
func (*CompressImageRequest) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{32}
}

func (x *CompressImageRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CompressImageRequest) GetQuality() uint32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

// CompressImageReply 压缩图片响应
type CompressImageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=imbotgateway.StatusCode" json:"status,omitempty"` // 状态码
	Data   []byte     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`                                   // 图片数据
}

func (x *CompressImageReply) Reset() {
	*x = CompressImageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompressImageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompressImageReply) ProtoMessage() {}

func (x *CompressImageReply) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompressImageReply.ProtoReflect.Descriptor instead.
func (*CompressImageReply) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{33}
}

func (x *CompressImageReply) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_StatusCodeOK
}

func (x *CompressImageReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// VideoPreviewRequest 获取视频预览请求
type VideoPreviewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`                       // 视频数据
	MaxSize uint32 `protobuf:"varint,2,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"` // 预览图最大尺寸
}

func (x *VideoPreviewRequest) Reset() {
	*x = VideoPreviewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoPreviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoPreviewRequest) ProtoMessage() {}

func (x *VideoPreviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoPreviewRequest.ProtoReflect.Descriptor instead.
func (*VideoPreviewRequest) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{34}
}

func (x *VideoPreviewRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *VideoPreviewRequest) GetMaxSize() uint32 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

// VideoPreviewReply 获取视频预览响应
type VideoPreviewReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=imbotgateway.StatusCode" json:"status,omitempty"` // 状态码
	Duration uint32     `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`                          // 播放时长
	Preview  []byte     `protobuf:"bytes,3,opt,name=preview,proto3" json:"preview,omitempty"`                             // 图片预览
	Width    uint32     `protobuf:"varint,4,opt,name=width,proto3" json:"width,omitempty"`                                // 预览图宽度
	Height   uint32     `protobuf:"varint,5,opt,name=height,proto3" json:"height,omitempty"`                              // 预览图高度
}

func (x *VideoPreviewReply) Reset() {
	*x = VideoPreviewReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoPreviewReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoPreviewReply) ProtoMessage() {}

func (x *VideoPreviewReply) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoPreviewReply.ProtoReflect.Descriptor instead.
func (*VideoPreviewReply) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{35}
}

func (x *VideoPreviewReply) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_StatusCodeOK
}

func (x *VideoPreviewReply) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *VideoPreviewReply) GetPreview() []byte {
	if x != nil {
		return x.Preview
	}
	return nil
}

func (x *VideoPreviewReply) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *VideoPreviewReply) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// AudioPreviewRequest 获取音频预览请求
type AudioPreviewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`                       // 音频数据
	MaxSize uint32 `protobuf:"varint,2,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"` // 封面图最大尺寸
}

func (x *AudioPreviewRequest) Reset() {
	*x = AudioPreviewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioPreviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioPreviewRequest) ProtoMessage() {}

func (x *AudioPreviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioPreviewRequest.ProtoReflect.Descriptor instead.
func (*AudioPreviewRequest) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{36}
}

func (x *AudioPreviewRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *AudioPreviewRequest) GetMaxSize() uint32 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

// AudioPreviewReply 获取音频预览响应
type AudioPreviewReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=imbotgateway.StatusCode" json:"status,omitempty"` // 状态码
	Duration uint32     `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`                          // 播放时长
	Cover    []byte     `protobuf:"bytes,3,opt,name=cover,proto3" json:"cover,omitempty"`                                 // 封面图片
	Title    string     `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`                                 // 标题
	Artist   string     `protobuf:"bytes,5,opt,name=artist,proto3" json:"artist,omitempty"`                               // 演奏者
	Width    uint32     `protobuf:"varint,6,opt,name=width,proto3" json:"width,omitempty"`                                // 封面图宽度
	Height   uint32     `protobuf:"varint,7,opt,name=height,proto3" json:"height,omitempty"`                              // 封面图高度
}

func (x *AudioPreviewReply) Reset() {
	*x = AudioPreviewReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioPreviewReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioPreviewReply) ProtoMessage() {}

func (x *AudioPreviewReply) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioPreviewReply.ProtoReflect.Descriptor instead.
func (*AudioPreviewReply) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{37}
}

func (x *AudioPreviewReply) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_StatusCodeOK
}

func (x *AudioPreviewReply) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *AudioPreviewReply) GetCover() []byte {
	if x != nil {
		return x.Cover
	}
	return nil
}

func (x *AudioPreviewReply) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AudioPreviewReply) GetArtist() string {
	if x != nil {
		return x.Artist
	}
	return ""
}

func (x *AudioPreviewReply) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *AudioPreviewReply) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// ###################################  pbmessageserver.pb.go  #############################
// 获取participants
type ReqParticipants struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OffSet    int32  `protobuf:"varint,1,opt,name=offSet,proto3" json:"offSet,omitempty"`
	Limit     int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	PartiType int32  `protobuf:"varint,3,opt,name=partiType,proto3" json:"partiType,omitempty"`
	ChannelId int32  `protobuf:"varint,4,opt,name=channelId,proto3" json:"channelId,omitempty"`
	FromId    int32  `protobuf:"varint,5,opt,name=fromId,proto3" json:"fromId,omitempty"`
	Q         string `protobuf:"bytes,6,opt,name=q,proto3" json:"q,omitempty"`
	Hash      int32  `protobuf:"varint,7,opt,name=Hash,proto3" json:"Hash,omitempty"` // 校验唯一的， 如果不为0 则要进行唯一判断
	Debug     *Debug `protobuf:"bytes,8,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqParticipants) Reset() {
	*x = ReqParticipants{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqParticipants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqParticipants) ProtoMessage() {}

func (x *ReqParticipants) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqParticipants.ProtoReflect.Descriptor instead.
func (*ReqParticipants) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{38}
}

func (x *ReqParticipants) GetOffSet() int32 {
	if x != nil {
		return x.OffSet
	}
	return 0
}

func (x *ReqParticipants) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqParticipants) GetPartiType() int32 {
	if x != nil {
		return x.PartiType
	}
	return 0
}

func (x *ReqParticipants) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqParticipants) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqParticipants) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *ReqParticipants) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *ReqParticipants) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 返回participants
type ReplyParticipants struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updates   []byte `protobuf:"bytes,1,opt,name=Updates,proto3" json:"Updates,omitempty"` // 二进制，真实类型是mtproto.tl_updates_layer62
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyParticipants) Reset() {
	*x = ReplyParticipants{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyParticipants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyParticipants) ProtoMessage() {}

func (x *ReplyParticipants) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyParticipants.ProtoReflect.Descriptor instead.
func (*ReplyParticipants) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{39}
}

func (x *ReplyParticipants) GetUpdates() []byte {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *ReplyParticipants) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type ReqCreateChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chatid    int32   `protobuf:"varint,1,opt,name=chatid,proto3" json:"chatid,omitempty"`      // 群id
	Title     string  `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`         // 名称
	Creator   int32   `protobuf:"varint,3,opt,name=creator,proto3" json:"creator,omitempty"`    // 创建者
	Users     []int32 `protobuf:"varint,4,rep,packed,name=users,proto3" json:"users,omitempty"` // 用户数据
	FromKeyid uint64  `protobuf:"varint,5,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *Debug  `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqCreateChat) Reset() {
	*x = ReqCreateChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqCreateChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqCreateChat) ProtoMessage() {}

func (x *ReqCreateChat) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqCreateChat.ProtoReflect.Descriptor instead.
func (*ReqCreateChat) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{40}
}

func (x *ReqCreateChat) GetChatid() int32 {
	if x != nil {
		return x.Chatid
	}
	return 0
}

func (x *ReqCreateChat) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ReqCreateChat) GetCreator() int32 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *ReqCreateChat) GetUsers() []int32 {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *ReqCreateChat) GetFromKeyid() uint64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqCreateChat) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyCreateChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"` // 创建普通群返回
	Error  int32  `protobuf:"varint,5,opt,name=error,proto3" json:"error,omitempty"`  // 1: 创建者id为0 2: 被加入的成员不允许 3: 成员不允许被添加 4: 其他, 5: 消息处理出错
}

func (x *ReplyCreateChat) Reset() {
	*x = ReplyCreateChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyCreateChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyCreateChat) ProtoMessage() {}

func (x *ReplyCreateChat) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyCreateChat.ProtoReflect.Descriptor instead.
func (*ReplyCreateChat) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{41}
}

func (x *ReplyCreateChat) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplyCreateChat) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

type ReqMigrateChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid int32 `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"` // 邀请者id
	Chatid int32 `protobuf:"varint,2,opt,name=chatid,proto3" json:"chatid,omitempty"` //等待升级的普通群ID
	//    int32 channelid = 3; //升级后的超级群ID
	//    string title = 4; // 群标题
	//    repeated int32 members = 5; //现有用户
	//    string Phone = 6; //电话
	Fromkeyid uint64 `protobuf:"varint,3,opt,name=fromkeyid,proto3" json:"fromkeyid,omitempty"` //邀请者的KEYID
	//    bool isBroadCast = 8; //超级群还是频道
	Debug *Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqMigrateChat) Reset() {
	*x = ReqMigrateChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqMigrateChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqMigrateChat) ProtoMessage() {}

func (x *ReqMigrateChat) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqMigrateChat.ProtoReflect.Descriptor instead.
func (*ReqMigrateChat) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{42}
}

func (x *ReqMigrateChat) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqMigrateChat) GetChatid() int32 {
	if x != nil {
		return x.Chatid
	}
	return 0
}

func (x *ReqMigrateChat) GetFromkeyid() uint64 {
	if x != nil {
		return x.Fromkeyid
	}
	return 0
}

func (x *ReqMigrateChat) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyMigrateChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//    int32 msgid = 1; // 消息id
	//    int64 randomid = 2; // 消息随机id
	//    int32 date = 3; // 消息时间
	//    int32 pts = 4; // 消息pts
	//    int32 channelmsgid = 5; //频道的消息ID
	//    int32 channelpts = 6; //频道的PTS
	Result []byte `protobuf:"bytes,7,opt,name=result,proto3" json:"result,omitempty"` // 二进制，真实类型是mtproto.tl_updates_layer62
	Error  int32  `protobuf:"varint,8,opt,name=error,proto3" json:"error,omitempty"`  // 1. 普通群处理失败 2. 超级群处理失败 3. 其他错误
}

func (x *ReplyMigrateChat) Reset() {
	*x = ReplyMigrateChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyMigrateChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyMigrateChat) ProtoMessage() {}

func (x *ReplyMigrateChat) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyMigrateChat.ProtoReflect.Descriptor instead.
func (*ReplyMigrateChat) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{43}
}

func (x *ReplyMigrateChat) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplyMigrateChat) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// 邀请用户进入超级群
type ReqJoinChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32  `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`                  //超级群ID
	UserId     int32  `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`                        // 自己的ID
	FromKeyid  int64  `protobuf:"varint,5,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"` //自己的KEYID
	AccessHash int64  `protobuf:"varint,6,opt,name=accessHash,proto3" json:"accessHash,omitempty"`                //超级群的哈希
	ByLink     bool   `protobuf:"varint,7,opt,name=byLink,proto3" json:"byLink,omitempty"`                        //是否通过链接加入
	Invitor    int32  `protobuf:"varint,8,opt,name=invitor,proto3" json:"invitor,omitempty"`
	InviteType int32  `protobuf:"varint,9,opt,name=invite_type,json=inviteType,proto3" json:"invite_type,omitempty"` //邀请类型 0-链接 1-二维码
	Debug      *Debug `protobuf:"bytes,10,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqJoinChannel) Reset() {
	*x = ReqJoinChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqJoinChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqJoinChannel) ProtoMessage() {}

func (x *ReqJoinChannel) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqJoinChannel.ProtoReflect.Descriptor instead.
func (*ReqJoinChannel) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{44}
}

func (x *ReqJoinChannel) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqJoinChannel) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqJoinChannel) GetFromKeyid() int64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqJoinChannel) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqJoinChannel) GetByLink() bool {
	if x != nil {
		return x.ByLink
	}
	return false
}

func (x *ReqJoinChannel) GetInvitor() int32 {
	if x != nil {
		return x.Invitor
	}
	return 0
}

func (x *ReqJoinChannel) GetInviteType() int32 {
	if x != nil {
		return x.InviteType
	}
	return 0
}

func (x *ReqJoinChannel) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 邀请操作的ACK
type ReplyJoinChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply     []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"` // 二进制，真实类型是mtproto.tl_updates_layer62
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyJoinChannel) Reset() {
	*x = ReplyJoinChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyJoinChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyJoinChannel) ProtoMessage() {}

func (x *ReplyJoinChannel) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyJoinChannel.ProtoReflect.Descriptor instead.
func (*ReplyJoinChannel) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{45}
}

func (x *ReplyJoinChannel) GetReply() []byte {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *ReplyJoinChannel) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// 转移群主
type ReqChangeGroupAndChannelCrator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId    int32 `protobuf:"varint,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	FromId     int32 `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	OperatorId int32 `protobuf:"varint,3,opt,name=OperatorId,proto3" json:"OperatorId,omitempty"`
	IsChat     bool  `protobuf:"varint,4,opt,name=IsChat,proto3" json:"IsChat,omitempty"`
}

func (x *ReqChangeGroupAndChannelCrator) Reset() {
	*x = ReqChangeGroupAndChannelCrator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqChangeGroupAndChannelCrator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqChangeGroupAndChannelCrator) ProtoMessage() {}

func (x *ReqChangeGroupAndChannelCrator) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqChangeGroupAndChannelCrator.ProtoReflect.Descriptor instead.
func (*ReqChangeGroupAndChannelCrator) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{46}
}

func (x *ReqChangeGroupAndChannelCrator) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ReqChangeGroupAndChannelCrator) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqChangeGroupAndChannelCrator) GetOperatorId() int32 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *ReqChangeGroupAndChannelCrator) GetIsChat() bool {
	if x != nil {
		return x.IsChat
	}
	return false
}

// 回复转移群主
type ReplyChangeGroupAndChannelCrator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid     bool  `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	ErrorCode int32 `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyChangeGroupAndChannelCrator) Reset() {
	*x = ReplyChangeGroupAndChannelCrator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyChangeGroupAndChannelCrator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyChangeGroupAndChannelCrator) ProtoMessage() {}

func (x *ReplyChangeGroupAndChannelCrator) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyChangeGroupAndChannelCrator.ProtoReflect.Descriptor instead.
func (*ReplyChangeGroupAndChannelCrator) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{47}
}

func (x *ReplyChangeGroupAndChannelCrator) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *ReplyChangeGroupAndChannelCrator) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// 机器人调用接口
type ReqBotCallMessageMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromBotId int32  `protobuf:"varint,1,opt,name=fromBotId,proto3" json:"fromBotId,omitempty"`
	MsgTxt    string `protobuf:"bytes,2,opt,name=MsgTxt,proto3" json:"MsgTxt,omitempty"`
	Request   []byte `protobuf:"bytes,3,opt,name=request,proto3" json:"request,omitempty"`
	Layer     int32  `protobuf:"varint,4,opt,name=layer,proto3" json:"layer,omitempty"`
	Debug     *Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqBotCallMessageMedia) Reset() {
	*x = ReqBotCallMessageMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBotCallMessageMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBotCallMessageMedia) ProtoMessage() {}

func (x *ReqBotCallMessageMedia) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBotCallMessageMedia.ProtoReflect.Descriptor instead.
func (*ReqBotCallMessageMedia) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{48}
}

func (x *ReqBotCallMessageMedia) GetFromBotId() int32 {
	if x != nil {
		return x.FromBotId
	}
	return 0
}

func (x *ReqBotCallMessageMedia) GetMsgTxt() string {
	if x != nil {
		return x.MsgTxt
	}
	return ""
}

func (x *ReqBotCallMessageMedia) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ReqBotCallMessageMedia) GetLayer() int32 {
	if x != nil {
		return x.Layer
	}
	return 0
}

func (x *ReqBotCallMessageMedia) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 获取dialog接口
type RequestDialog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid     int32  `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`                           // 用户id
	Flags      int32  `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`                             // 标识位
	OffsetDate int32  `protobuf:"varint,3,opt,name=offset_date,json=offsetDate,proto3" json:"offset_date,omitempty"` // 偏移时间
	OffsetId   int32  `protobuf:"varint,4,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`       // 偏移id
	OffsetPeer []byte `protobuf:"bytes,5,opt,name=offset_peer,json=offsetPeer,proto3" json:"offset_peer,omitempty"`  // 偏移对象 (mt 协议)
	Limit      int32  `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`                             // 偏移长度
	Debug      *Debug `protobuf:"bytes,7,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *RequestDialog) Reset() {
	*x = RequestDialog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestDialog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestDialog) ProtoMessage() {}

func (x *RequestDialog) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestDialog.ProtoReflect.Descriptor instead.
func (*RequestDialog) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{49}
}

func (x *RequestDialog) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *RequestDialog) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *RequestDialog) GetOffsetDate() int32 {
	if x != nil {
		return x.OffsetDate
	}
	return 0
}

func (x *RequestDialog) GetOffsetId() int32 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

func (x *RequestDialog) GetOffsetPeer() []byte {
	if x != nil {
		return x.OffsetPeer
	}
	return nil
}

func (x *RequestDialog) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *RequestDialog) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 返回dialog
type ReplyDialog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//    repeated DialogSlice dialog = 1;
	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"` // 对话框数据返回
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`  // 1: 无法获取到 2: userid 为0  3: 数据库返回超时 4: 消息服务crash
}

func (x *ReplyDialog) Reset() {
	*x = ReplyDialog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyDialog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyDialog) ProtoMessage() {}

func (x *ReplyDialog) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyDialog.ProtoReflect.Descriptor instead.
func (*ReplyDialog) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{50}
}

func (x *ReplyDialog) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplyDialog) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// 用户分数
type UserScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid int32 `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"` // 用户id
	Score  int32 `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`   // 用户分数
}

func (x *UserScore) Reset() {
	*x = UserScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserScore) ProtoMessage() {}

func (x *UserScore) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserScore.ProtoReflect.Descriptor instead.
func (*UserScore) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{51}
}

func (x *UserScore) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *UserScore) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

// 调用设置分数
type ReqSetGameScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid             int32        `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`                                                     // 用户id
	Scores             []*UserScore `protobuf:"bytes,2,rep,name=scores,proto3" json:"scores,omitempty"`                                                      // 新分数（非负数）
	Force              bool         `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`                                                       // 如果为true 则覆盖原分数  如果为false则新分数大于旧的分数才会更新
	DisableEditMessage bool         `protobuf:"varint,4,opt,name=disable_edit_message,json=disableEditMessage,proto3" json:"disable_edit_message,omitempty"` // 为true则不编辑
	ChatId             int32        `protobuf:"varint,5,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`                                       // 如果未指定inline_message_id，这里就需要填chatid
	ChatType           int32        `protobuf:"varint,6,opt,name=chat_type,json=chatType,proto3" json:"chat_type,omitempty"`                                 // 1-单聊 2-普通群 3-超级群
	MessageId          int32        `protobuf:"varint,7,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`                              // 如果未指定inline_message_id，则需要填这里的message_id
	InlineMessageId    string       `protobuf:"bytes,8,opt,name=inline_message_id,json=inlineMessageId,proto3" json:"inline_message_id,omitempty"`           // 如果未指定chatid或者message_id 就需要填写inline_message_id
	Botid              int32        `protobuf:"varint,9,opt,name=botid,proto3" json:"botid,omitempty"`                                                       // 请求的机器人id
	Debug              *Debug       `protobuf:"bytes,10,opt,name=debug,proto3" json:"debug,omitempty"`                                                       // debug
}

func (x *ReqSetGameScore) Reset() {
	*x = ReqSetGameScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSetGameScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSetGameScore) ProtoMessage() {}

func (x *ReqSetGameScore) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSetGameScore.ProtoReflect.Descriptor instead.
func (*ReqSetGameScore) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{52}
}

func (x *ReqSetGameScore) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *ReqSetGameScore) GetScores() []*UserScore {
	if x != nil {
		return x.Scores
	}
	return nil
}

func (x *ReqSetGameScore) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *ReqSetGameScore) GetDisableEditMessage() bool {
	if x != nil {
		return x.DisableEditMessage
	}
	return false
}

func (x *ReqSetGameScore) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ReqSetGameScore) GetChatType() int32 {
	if x != nil {
		return x.ChatType
	}
	return 0
}

func (x *ReqSetGameScore) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *ReqSetGameScore) GetInlineMessageId() string {
	if x != nil {
		return x.InlineMessageId
	}
	return ""
}

func (x *ReqSetGameScore) GetBotid() int32 {
	if x != nil {
		return x.Botid
	}
	return 0
}

func (x *ReqSetGameScore) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 设置分数返回
type ReplySetGameScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed   bool   `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Error     string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Errorcode int32  `protobuf:"varint,3,opt,name=errorcode,proto3" json:"errorcode,omitempty"`
}

func (x *ReplySetGameScore) Reset() {
	*x = ReplySetGameScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplySetGameScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplySetGameScore) ProtoMessage() {}

func (x *ReplySetGameScore) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplySetGameScore.ProtoReflect.Descriptor instead.
func (*ReplySetGameScore) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{53}
}

func (x *ReplySetGameScore) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *ReplySetGameScore) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ReplySetGameScore) GetErrorcode() int32 {
	if x != nil {
		return x.Errorcode
	}
	return 0
}

type ReplyBanChannelUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updates   []byte `protobuf:"bytes,1,opt,name=Updates,proto3" json:"Updates,omitempty"` // 二进制，真实类型是mtproto.tl_updates_layer62
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyBanChannelUser) Reset() {
	*x = ReplyBanChannelUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyBanChannelUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyBanChannelUser) ProtoMessage() {}

func (x *ReplyBanChannelUser) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyBanChannelUser.ProtoReflect.Descriptor instead.
func (*ReplyBanChannelUser) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{54}
}

func (x *ReplyBanChannelUser) GetUpdates() []byte {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *ReplyBanChannelUser) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type ReqBanChannelUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId              int32                `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	FromKeyId           int64                `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	ChannelId           int32                `protobuf:"varint,3,opt,name=channelId,proto3" json:"channelId,omitempty"`
	BannedUserId        int32                `protobuf:"varint,4,opt,name=bannedUserId,proto3" json:"bannedUserId,omitempty"`
	AccessHash          int64                `protobuf:"varint,5,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	UtilDate            int32                `protobuf:"varint,6,opt,name=util_date,json=utilDate,proto3" json:"util_date,omitempty"`
	ChannelBannedRights *ChannelBannedRights `protobuf:"bytes,7,opt,name=channelBannedRights,proto3" json:"channelBannedRights,omitempty"`
	Debug               *Debug               `protobuf:"bytes,8,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqBanChannelUser) Reset() {
	*x = ReqBanChannelUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBanChannelUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBanChannelUser) ProtoMessage() {}

func (x *ReqBanChannelUser) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBanChannelUser.ProtoReflect.Descriptor instead.
func (*ReqBanChannelUser) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{55}
}

func (x *ReqBanChannelUser) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqBanChannelUser) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *ReqBanChannelUser) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqBanChannelUser) GetBannedUserId() int32 {
	if x != nil {
		return x.BannedUserId
	}
	return 0
}

func (x *ReqBanChannelUser) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqBanChannelUser) GetUtilDate() int32 {
	if x != nil {
		return x.UtilDate
	}
	return 0
}

func (x *ReqBanChannelUser) GetChannelBannedRights() *ChannelBannedRights {
	if x != nil {
		return x.ChannelBannedRights
	}
	return nil
}

func (x *ReqBanChannelUser) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ChannelBannedRights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags        int32 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	ViewMessages bool  `protobuf:"varint,2,opt,name=view_messages,json=viewMessages,proto3" json:"view_messages,omitempty"`
	SendMessages bool  `protobuf:"varint,3,opt,name=send_messages,json=sendMessages,proto3" json:"send_messages,omitempty"`
	SendMedia    bool  `protobuf:"varint,4,opt,name=send_media,json=sendMedia,proto3" json:"send_media,omitempty"`
	SendStickers bool  `protobuf:"varint,5,opt,name=send_stickers,json=sendStickers,proto3" json:"send_stickers,omitempty"`
	SendGifs     bool  `protobuf:"varint,6,opt,name=send_gifs,json=sendGifs,proto3" json:"send_gifs,omitempty"`
	SendGames    bool  `protobuf:"varint,7,opt,name=send_games,json=sendGames,proto3" json:"send_games,omitempty"`
	SendInline   bool  `protobuf:"varint,8,opt,name=send_inline,json=sendInline,proto3" json:"send_inline,omitempty"`
	EmbedLinks   bool  `protobuf:"varint,9,opt,name=embed_links,json=embedLinks,proto3" json:"embed_links,omitempty"`
	UntilDate    int32 `protobuf:"varint,10,opt,name=until_date,json=untilDate,proto3" json:"until_date,omitempty"`
}

func (x *ChannelBannedRights) Reset() {
	*x = ChannelBannedRights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelBannedRights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelBannedRights) ProtoMessage() {}

func (x *ChannelBannedRights) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelBannedRights.ProtoReflect.Descriptor instead.
func (*ChannelBannedRights) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{56}
}

func (x *ChannelBannedRights) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ChannelBannedRights) GetViewMessages() bool {
	if x != nil {
		return x.ViewMessages
	}
	return false
}

func (x *ChannelBannedRights) GetSendMessages() bool {
	if x != nil {
		return x.SendMessages
	}
	return false
}

func (x *ChannelBannedRights) GetSendMedia() bool {
	if x != nil {
		return x.SendMedia
	}
	return false
}

func (x *ChannelBannedRights) GetSendStickers() bool {
	if x != nil {
		return x.SendStickers
	}
	return false
}

func (x *ChannelBannedRights) GetSendGifs() bool {
	if x != nil {
		return x.SendGifs
	}
	return false
}

func (x *ChannelBannedRights) GetSendGames() bool {
	if x != nil {
		return x.SendGames
	}
	return false
}

func (x *ChannelBannedRights) GetSendInline() bool {
	if x != nil {
		return x.SendInline
	}
	return false
}

func (x *ChannelBannedRights) GetEmbedLinks() bool {
	if x != nil {
		return x.EmbedLinks
	}
	return false
}

func (x *ChannelBannedRights) GetUntilDate() int32 {
	if x != nil {
		return x.UntilDate
	}
	return 0
}

// 请求给定channel
type ReqGetChannels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelIds []int32 `protobuf:"varint,1,rep,packed,name=channelIds,proto3" json:"channelIds,omitempty"`
	FromId     int32   `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	Debug      *Debug  `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetChannels) Reset() {
	*x = ReqGetChannels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannels) ProtoMessage() {}

func (x *ReqGetChannels) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannels.ProtoReflect.Descriptor instead.
func (*ReqGetChannels) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{57}
}

func (x *ReqGetChannels) GetChannelIds() []int32 {
	if x != nil {
		return x.ChannelIds
	}
	return nil
}

func (x *ReqGetChannels) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqGetChannels) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 返回get channles
type ReplyGetChannels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply     []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyGetChannels) Reset() {
	*x = ReplyGetChannels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChannels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChannels) ProtoMessage() {}

func (x *ReplyGetChannels) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChannels.ProtoReflect.Descriptor instead.
func (*ReplyGetChannels) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{58}
}

func (x *ReplyGetChannels) GetReply() []byte {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *ReplyGetChannels) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type ReqDeleteChatUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid    int32  `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"` // 用户id
	Chatid    int32  `protobuf:"varint,2,opt,name=chatid,proto3" json:"chatid,omitempty"` // 群id
	Userid    int32  `protobuf:"varint,3,opt,name=userid,proto3" json:"userid,omitempty"` // 被删除人id
	FromKeyid uint64 `protobuf:"varint,4,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqDeleteChatUser) Reset() {
	*x = ReqDeleteChatUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteChatUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteChatUser) ProtoMessage() {}

func (x *ReqDeleteChatUser) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteChatUser.ProtoReflect.Descriptor instead.
func (*ReqDeleteChatUser) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{59}
}

func (x *ReqDeleteChatUser) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqDeleteChatUser) GetChatid() int32 {
	if x != nil {
		return x.Chatid
	}
	return 0
}

func (x *ReqDeleteChatUser) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *ReqDeleteChatUser) GetFromKeyid() uint64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqDeleteChatUser) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyDeleteChatUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"` // 1.发起方id为0 2: 群id为0 3: 自增pts和msgid失败
}

func (x *ReplyDeleteChatUser) Reset() {
	*x = ReplyDeleteChatUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyDeleteChatUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyDeleteChatUser) ProtoMessage() {}

func (x *ReplyDeleteChatUser) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyDeleteChatUser.ProtoReflect.Descriptor instead.
func (*ReplyDeleteChatUser) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{60}
}

func (x *ReplyDeleteChatUser) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplyDeleteChatUser) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

type ChannelInactiveUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`          //用户ID
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`       //用户名
	Time    int32  `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`      //活跃时间
	TimeStr string `protobuf:"bytes,4,opt,name=timeStr,proto3" json:"timeStr,omitempty"` //活跃时间格式化字符串
}

func (x *ChannelInactiveUser) Reset() {
	*x = ChannelInactiveUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelInactiveUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelInactiveUser) ProtoMessage() {}

func (x *ChannelInactiveUser) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelInactiveUser.ProtoReflect.Descriptor instead.
func (*ChannelInactiveUser) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{61}
}

func (x *ChannelInactiveUser) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChannelInactiveUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChannelInactiveUser) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ChannelInactiveUser) GetTimeStr() string {
	if x != nil {
		return x.TimeStr
	}
	return ""
}

type GetChannelInactiveUsersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32 `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Limit     int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Userid    int32 `protobuf:"varint,3,opt,name=userid,proto3" json:"userid,omitempty"`
}

func (x *GetChannelInactiveUsersReq) Reset() {
	*x = GetChannelInactiveUsersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelInactiveUsersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelInactiveUsersReq) ProtoMessage() {}

func (x *GetChannelInactiveUsersReq) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelInactiveUsersReq.ProtoReflect.Descriptor instead.
func (*GetChannelInactiveUsersReq) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{62}
}

func (x *GetChannelInactiveUsersReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *GetChannelInactiveUsersReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetChannelInactiveUsersReq) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

type GetChannelInactiveUsersResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users   []*ChannelInactiveUser `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	Count   int32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`     //群当前总人数
	Errcode int32                  `protobuf:"varint,3,opt,name=errcode,proto3" json:"errcode,omitempty"` //返回错误码
}

func (x *GetChannelInactiveUsersResult) Reset() {
	*x = GetChannelInactiveUsersResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelInactiveUsersResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelInactiveUsersResult) ProtoMessage() {}

func (x *GetChannelInactiveUsersResult) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelInactiveUsersResult.ProtoReflect.Descriptor instead.
func (*GetChannelInactiveUsersResult) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{63}
}

func (x *GetChannelInactiveUsersResult) GetUsers() []*ChannelInactiveUser {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *GetChannelInactiveUsersResult) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetChannelInactiveUsersResult) GetErrcode() int32 {
	if x != nil {
		return x.Errcode
	}
	return 0
}

// 机器人调用接口-Inline
type ReqBotInlineCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug     *Debug `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`                           // debug
	UserId    int32  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          // 用户id
	BotId     int32  `protobuf:"varint,3,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`             // 机器人id
	MessageId uint64 `protobuf:"varint,4,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` // msg_id
	KeyId     uint64 `protobuf:"varint,5,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`             // keyid
	SessionId uint64 `protobuf:"varint,6,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"` // sessionid
	Data      []byte `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`                             // tl encode data
	Id        string `protobuf:"bytes,8,opt,name=id,proto3" json:"id,omitempty"`                                 // sendInline时客户端带的id
}

func (x *ReqBotInlineCall) Reset() {
	*x = ReqBotInlineCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBotInlineCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBotInlineCall) ProtoMessage() {}

func (x *ReqBotInlineCall) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBotInlineCall.ProtoReflect.Descriptor instead.
func (*ReqBotInlineCall) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{64}
}

func (x *ReqBotInlineCall) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *ReqBotInlineCall) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqBotInlineCall) GetBotId() int32 {
	if x != nil {
		return x.BotId
	}
	return 0
}

func (x *ReqBotInlineCall) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *ReqBotInlineCall) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *ReqBotInlineCall) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *ReqBotInlineCall) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ReqBotInlineCall) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// 机器人返回接口-Inline
type ReplyBotInlineCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode    int32       `protobuf:"varint,1,opt,name=err_code,json=errCode,proto3" json:"err_code,omitempty"`
	Message    string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Inlinecall *InlineCall `protobuf:"bytes,3,opt,name=inlinecall,proto3" json:"inlinecall,omitempty"`
}

func (x *ReplyBotInlineCall) Reset() {
	*x = ReplyBotInlineCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyBotInlineCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyBotInlineCall) ProtoMessage() {}

func (x *ReplyBotInlineCall) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyBotInlineCall.ProtoReflect.Descriptor instead.
func (*ReplyBotInlineCall) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{65}
}

func (x *ReplyBotInlineCall) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *ReplyBotInlineCall) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ReplyBotInlineCall) GetInlinecall() *InlineCall {
	if x != nil {
		return x.Inlinecall
	}
	return nil
}

type InlineCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId    int32 `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	FromId   int32 `protobuf:"varint,2,opt,name=FromId,proto3" json:"FromId,omitempty"`
	ChatId   int32 `protobuf:"varint,3,opt,name=ChatId,proto3" json:"ChatId,omitempty"`
	ChatType int32 `protobuf:"varint,4,opt,name=ChatType,proto3" json:"ChatType,omitempty"`
	BotId    int32 `protobuf:"varint,5,opt,name=BotId,proto3" json:"BotId,omitempty"`
}

func (x *InlineCall) Reset() {
	*x = InlineCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InlineCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InlineCall) ProtoMessage() {}

func (x *InlineCall) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InlineCall.ProtoReflect.Descriptor instead.
func (*InlineCall) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{66}
}

func (x *InlineCall) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *InlineCall) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *InlineCall) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *InlineCall) GetChatType() int32 {
	if x != nil {
		return x.ChatType
	}
	return 0
}

func (x *InlineCall) GetBotId() int32 {
	if x != nil {
		return x.BotId
	}
	return 0
}

// 发送给对方所有端
type ReqSendUserMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid    int32  `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`       // 发送方id
	FromKeyId int64  `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"` // 发送方keyid
	Toid      int32  `protobuf:"varint,3,opt,name=toid,proto3" json:"toid,omitempty"`           // 接收方id
	Data      []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`            // Mt数据
	Debug     *Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`          // debug日志
}

func (x *ReqSendUserMsg) Reset() {
	*x = ReqSendUserMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSendUserMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSendUserMsg) ProtoMessage() {}

func (x *ReqSendUserMsg) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSendUserMsg.ProtoReflect.Descriptor instead.
func (*ReqSendUserMsg) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{67}
}

func (x *ReqSendUserMsg) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqSendUserMsg) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *ReqSendUserMsg) GetToid() int32 {
	if x != nil {
		return x.Toid
	}
	return 0
}

func (x *ReqSendUserMsg) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ReqSendUserMsg) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 置顶对话框返回
type ReplyBool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool  `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32 `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"` // 1: 对话框不存在  2:无法置顶 3:其他错误
}

func (x *ReplyBool) Reset() {
	*x = ReplyBool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyBool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyBool) ProtoMessage() {}

func (x *ReplyBool) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyBool.ProtoReflect.Descriptor instead.
func (*ReplyBool) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{68}
}

func (x *ReplyBool) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ReplyBool) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// 机器人调用接口
type ReqBotCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrombotId int32  `protobuf:"varint,1,opt,name=frombotId,proto3" json:"frombotId,omitempty"`
	Request   []byte `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	Layer     int32  `protobuf:"varint,3,opt,name=layer,proto3" json:"layer,omitempty"`
	Debug     *Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqBotCall) Reset() {
	*x = ReqBotCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBotCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBotCall) ProtoMessage() {}

func (x *ReqBotCall) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBotCall.ProtoReflect.Descriptor instead.
func (*ReqBotCall) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{69}
}

func (x *ReqBotCall) GetFrombotId() int32 {
	if x != nil {
		return x.FrombotId
	}
	return 0
}

func (x *ReqBotCall) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ReqBotCall) GetLayer() int32 {
	if x != nil {
		return x.Layer
	}
	return 0
}

func (x *ReqBotCall) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 机器人返回接口
type ReplyBotCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ReplyBotCall) Reset() {
	*x = ReplyBotCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyBotCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyBotCall) ProtoMessage() {}

func (x *ReplyBotCall) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyBotCall.ProtoReflect.Descriptor instead.
func (*ReplyBotCall) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{70}
}

func (x *ReplyBotCall) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplyBotCall) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

type ReqGetMessageByUserIdUuid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Uuid   int64  `protobuf:"varint,2,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	Debug  *Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetMessageByUserIdUuid) Reset() {
	*x = ReqGetMessageByUserIdUuid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetMessageByUserIdUuid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetMessageByUserIdUuid) ProtoMessage() {}

func (x *ReqGetMessageByUserIdUuid) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetMessageByUserIdUuid.ProtoReflect.Descriptor instead.
func (*ReqGetMessageByUserIdUuid) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{71}
}

func (x *ReqGetMessageByUserIdUuid) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetMessageByUserIdUuid) GetUuid() int64 {
	if x != nil {
		return x.Uuid
	}
	return 0
}

func (x *ReqGetMessageByUserIdUuid) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetMessageByUserIdUuid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMessage *UserMsg `protobuf:"bytes,1,opt,name=UserMessage,proto3" json:"UserMessage,omitempty"`
	ErrorCode   int32    `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyGetMessageByUserIdUuid) Reset() {
	*x = ReplyGetMessageByUserIdUuid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetMessageByUserIdUuid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetMessageByUserIdUuid) ProtoMessage() {}

func (x *ReplyGetMessageByUserIdUuid) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetMessageByUserIdUuid.ProtoReflect.Descriptor instead.
func (*ReplyGetMessageByUserIdUuid) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{72}
}

func (x *ReplyGetMessageByUserIdUuid) GetUserMessage() *UserMsg {
	if x != nil {
		return x.UserMessage
	}
	return nil
}

func (x *ReplyGetMessageByUserIdUuid) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type ReqGetChannelMessageByChannelIdMsgId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32  `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	MsgId     int32  `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	Debug     *Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetChannelMessageByChannelIdMsgId) Reset() {
	*x = ReqGetChannelMessageByChannelIdMsgId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannelMessageByChannelIdMsgId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannelMessageByChannelIdMsgId) ProtoMessage() {}

func (x *ReqGetChannelMessageByChannelIdMsgId) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannelMessageByChannelIdMsgId.ProtoReflect.Descriptor instead.
func (*ReqGetChannelMessageByChannelIdMsgId) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{73}
}

func (x *ReqGetChannelMessageByChannelIdMsgId) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetChannelMessageByChannelIdMsgId) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqGetChannelMessageByChannelIdMsgId) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetChannelMessageByChannelIdMsgId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMessage *UserMsg `protobuf:"bytes,1,opt,name=UserMessage,proto3" json:"UserMessage,omitempty"`
	ErrorCode   int32    `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyGetChannelMessageByChannelIdMsgId) Reset() {
	*x = ReplyGetChannelMessageByChannelIdMsgId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChannelMessageByChannelIdMsgId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChannelMessageByChannelIdMsgId) ProtoMessage() {}

func (x *ReplyGetChannelMessageByChannelIdMsgId) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChannelMessageByChannelIdMsgId.ProtoReflect.Descriptor instead.
func (*ReplyGetChannelMessageByChannelIdMsgId) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{74}
}

func (x *ReplyGetChannelMessageByChannelIdMsgId) GetUserMessage() *UserMsg {
	if x != nil {
		return x.UserMessage
	}
	return nil
}

func (x *ReplyGetChannelMessageByChannelIdMsgId) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type ReqGetMessageByUserIdMsgId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	MsgId  int32  `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	Debug  *Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetMessageByUserIdMsgId) Reset() {
	*x = ReqGetMessageByUserIdMsgId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetMessageByUserIdMsgId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetMessageByUserIdMsgId) ProtoMessage() {}

func (x *ReqGetMessageByUserIdMsgId) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetMessageByUserIdMsgId.ProtoReflect.Descriptor instead.
func (*ReqGetMessageByUserIdMsgId) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{75}
}

func (x *ReqGetMessageByUserIdMsgId) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetMessageByUserIdMsgId) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqGetMessageByUserIdMsgId) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetMessageByUserIdMsgId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMessage *UserMsg `protobuf:"bytes,1,opt,name=UserMessage,proto3" json:"UserMessage,omitempty"`
	ErrorCode   int32    `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyGetMessageByUserIdMsgId) Reset() {
	*x = ReplyGetMessageByUserIdMsgId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetMessageByUserIdMsgId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetMessageByUserIdMsgId) ProtoMessage() {}

func (x *ReplyGetMessageByUserIdMsgId) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetMessageByUserIdMsgId.ProtoReflect.Descriptor instead.
func (*ReplyGetMessageByUserIdMsgId) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{76}
}

func (x *ReplyGetMessageByUserIdMsgId) GetUserMessage() *UserMsg {
	if x != nil {
		return x.UserMessage
	}
	return nil
}

func (x *ReplyGetMessageByUserIdMsgId) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// ###################################  storage_proto.pb.go  #############################
// 网关上传文件描述信息请求
type MsgFileDescReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fid        uint64 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`                                 // 存储服务分配存储文件的唯一标识
	AccessHash uint64 `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` // 访问hash
	Data       []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`                                // 数据
}

func (x *MsgFileDescReq) Reset() {
	*x = MsgFileDescReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgFileDescReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgFileDescReq) ProtoMessage() {}

func (x *MsgFileDescReq) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgFileDescReq.ProtoReflect.Descriptor instead.
func (*MsgFileDescReq) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{77}
}

func (x *MsgFileDescReq) GetFid() uint64 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *MsgFileDescReq) GetAccessHash() uint64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *MsgFileDescReq) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// 网关上传文件描述信息响应
type MsgFileDescResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result ERpcResultCode `protobuf:"varint,1,opt,name=result,proto3,enum=imbotgateway.ERpcResultCode" json:"result,omitempty"` // 结果码
}

func (x *MsgFileDescResp) Reset() {
	*x = MsgFileDescResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgFileDescResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgFileDescResp) ProtoMessage() {}

func (x *MsgFileDescResp) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgFileDescResp.ProtoReflect.Descriptor instead.
func (*MsgFileDescResp) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{78}
}

func (x *MsgFileDescResp) GetResult() ERpcResultCode {
	if x != nil {
		return x.Result
	}
	return ERpcResultCode_RRC_OK
}

// 服务上传下载限制请求
type MsgServiceLimitReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reserved uint32 `protobuf:"varint,1,opt,name=reserved,proto3" json:"reserved,omitempty"` // 保留用
}

func (x *MsgServiceLimitReq) Reset() {
	*x = MsgServiceLimitReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgServiceLimitReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgServiceLimitReq) ProtoMessage() {}

func (x *MsgServiceLimitReq) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgServiceLimitReq.ProtoReflect.Descriptor instead.
func (*MsgServiceLimitReq) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{79}
}

func (x *MsgServiceLimitReq) GetReserved() uint32 {
	if x != nil {
		return x.Reserved
	}
	return 0
}

// 服务上传下载限制响应(单位：Byte)
type MsgServiceLimitResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Usfsl  uint32 `protobuf:"varint,1,opt,name=usfsl,proto3" json:"usfsl,omitempty"`   // 上传小文件大小限制，usfsl=>upload small file size limit
	Ubfssl uint32 `protobuf:"varint,2,opt,name=ubfssl,proto3" json:"ubfssl,omitempty"` // 上传大文件分片大小限制，ubfsl=>upload big file slice size limit
	Dssl   uint32 `protobuf:"varint,3,opt,name=dssl,proto3" json:"dssl,omitempty"`     // 下载分片大小限制，usfsl=>download slice size limit
}

func (x *MsgServiceLimitResp) Reset() {
	*x = MsgServiceLimitResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgServiceLimitResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgServiceLimitResp) ProtoMessage() {}

func (x *MsgServiceLimitResp) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgServiceLimitResp.ProtoReflect.Descriptor instead.
func (*MsgServiceLimitResp) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{80}
}

func (x *MsgServiceLimitResp) GetUsfsl() uint32 {
	if x != nil {
		return x.Usfsl
	}
	return 0
}

func (x *MsgServiceLimitResp) GetUbfssl() uint32 {
	if x != nil {
		return x.Ubfssl
	}
	return 0
}

func (x *MsgServiceLimitResp) GetDssl() uint32 {
	if x != nil {
		return x.Dssl
	}
	return 0
}

// 网关取Fid请求
type MsgGetFidReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyid     uint64 `protobuf:"varint,1,opt,name=keyid,proto3" json:"keyid,omitempty"`                          // Ref 消息协议
	Fileid    int64  `protobuf:"varint,2,opt,name=fileid,proto3" json:"fileid,omitempty"`                        // Ref 消息协议
	FileType  uint32 `protobuf:"varint,3,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`    // Ref 消息协议 1 small 2: big
	Md5       string `protobuf:"bytes,4,opt,name=md5,proto3" json:"md5,omitempty"`                               // file_type为1时的文件hash，如果与服务实际收到不符丢掉；另外加密聊天客户端没有传md5,为空放弃校检
	PartTotal uint32 `protobuf:"varint,5,opt,name=part_total,json=partTotal,proto3" json:"part_total,omitempty"` // file_type为2时的文件分片总数，如果与服务实际收到不符丢掉
}

func (x *MsgGetFidReq) Reset() {
	*x = MsgGetFidReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgGetFidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgGetFidReq) ProtoMessage() {}

func (x *MsgGetFidReq) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgGetFidReq.ProtoReflect.Descriptor instead.
func (*MsgGetFidReq) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{81}
}

func (x *MsgGetFidReq) GetKeyid() uint64 {
	if x != nil {
		return x.Keyid
	}
	return 0
}

func (x *MsgGetFidReq) GetFileid() int64 {
	if x != nil {
		return x.Fileid
	}
	return 0
}

func (x *MsgGetFidReq) GetFileType() uint32 {
	if x != nil {
		return x.FileType
	}
	return 0
}

func (x *MsgGetFidReq) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *MsgGetFidReq) GetPartTotal() uint32 {
	if x != nil {
		return x.PartTotal
	}
	return 0
}

// 网关取Fid响应
type MsgGetFidResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fid        uint64         `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`                                        // 存储服务分配存储文件的唯一标识
	AccessHash uint64         `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`        // 访问hash
	FileSize   uint64         `protobuf:"varint,3,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`              // 文件大小
	Result     ERpcResultCode `protobuf:"varint,4,opt,name=result,proto3,enum=imbotgateway.ERpcResultCode" json:"result,omitempty"` // 结果码
}

func (x *MsgGetFidResp) Reset() {
	*x = MsgGetFidResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgGetFidResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgGetFidResp) ProtoMessage() {}

func (x *MsgGetFidResp) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgGetFidResp.ProtoReflect.Descriptor instead.
func (*MsgGetFidResp) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{82}
}

func (x *MsgGetFidResp) GetFid() uint64 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *MsgGetFidResp) GetAccessHash() uint64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *MsgGetFidResp) GetFileSize() uint64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *MsgGetFidResp) GetResult() ERpcResultCode {
	if x != nil {
		return x.Result
	}
	return ERpcResultCode_RRC_OK
}

// 网关上传文件请求
type MsgFilePartsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyid     uint64 `protobuf:"varint,1,opt,name=keyid,proto3" json:"keyid,omitempty"`                          // Ref 消息协议
	Fileid    int64  `protobuf:"varint,2,opt,name=fileid,proto3" json:"fileid,omitempty"`                        // Ref 消息协议
	PartId    uint32 `protobuf:"varint,3,opt,name=part_id,json=partId,proto3" json:"part_id,omitempty"`          // 文件片ID，备注：从0开始分配
	FileType  uint32 `protobuf:"varint,4,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`    // Ref 消息协议 1 small 2: big
	PartTotal uint32 `protobuf:"varint,5,opt,name=part_total,json=partTotal,proto3" json:"part_total,omitempty"` // file_type为2时有效，大文件片总数，小文件没有
	Data      []byte `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`                             // 数据
}

func (x *MsgFilePartsReq) Reset() {
	*x = MsgFilePartsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgFilePartsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgFilePartsReq) ProtoMessage() {}

func (x *MsgFilePartsReq) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgFilePartsReq.ProtoReflect.Descriptor instead.
func (*MsgFilePartsReq) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{83}
}

func (x *MsgFilePartsReq) GetKeyid() uint64 {
	if x != nil {
		return x.Keyid
	}
	return 0
}

func (x *MsgFilePartsReq) GetFileid() int64 {
	if x != nil {
		return x.Fileid
	}
	return 0
}

func (x *MsgFilePartsReq) GetPartId() uint32 {
	if x != nil {
		return x.PartId
	}
	return 0
}

func (x *MsgFilePartsReq) GetFileType() uint32 {
	if x != nil {
		return x.FileType
	}
	return 0
}

func (x *MsgFilePartsReq) GetPartTotal() uint32 {
	if x != nil {
		return x.PartTotal
	}
	return 0
}

func (x *MsgFilePartsReq) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// 网关上传文件响应
type MsgFilePartsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result ERpcResultCode `protobuf:"varint,1,opt,name=result,proto3,enum=imbotgateway.ERpcResultCode" json:"result,omitempty"` // 结果码
}

func (x *MsgFilePartsResp) Reset() {
	*x = MsgFilePartsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgFilePartsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgFilePartsResp) ProtoMessage() {}

func (x *MsgFilePartsResp) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgFilePartsResp.ProtoReflect.Descriptor instead.
func (*MsgFilePartsResp) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{84}
}

func (x *MsgFilePartsResp) GetResult() ERpcResultCode {
	if x != nil {
		return x.Result
	}
	return ERpcResultCode_RRC_OK
}

// 上传文件请求
type MsgUploadFileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Para1 *UploadReqPara1 `protobuf:"bytes,1,opt,name=para1,proto3" json:"para1,omitempty"` // Ref
	Para2 *UploadReqPara2 `protobuf:"bytes,2,opt,name=para2,proto3" json:"para2,omitempty"` // Ref
	Data  []byte          `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`   // 数据
}

func (x *MsgUploadFileReq) Reset() {
	*x = MsgUploadFileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgUploadFileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgUploadFileReq) ProtoMessage() {}

func (x *MsgUploadFileReq) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgUploadFileReq.ProtoReflect.Descriptor instead.
func (*MsgUploadFileReq) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{85}
}

func (x *MsgUploadFileReq) GetPara1() *UploadReqPara1 {
	if x != nil {
		return x.Para1
	}
	return nil
}

func (x *MsgUploadFileReq) GetPara2() *UploadReqPara2 {
	if x != nil {
		return x.Para2
	}
	return nil
}

func (x *MsgUploadFileReq) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// 上传请求参数1（仅用于分片上传文件时）
type UploadReqPara1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fid      uint64 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`                           // 之前申请的Fid
	PartId   uint32 `protobuf:"varint,2,opt,name=part_id,json=partId,proto3" json:"part_id,omitempty"`       // 文件片ID，备注：从0开始分配
	PartSize uint32 `protobuf:"varint,3,opt,name=part_size,json=partSize,proto3" json:"part_size,omitempty"` // 文件片大小
}

func (x *UploadReqPara1) Reset() {
	*x = UploadReqPara1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadReqPara1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadReqPara1) ProtoMessage() {}

func (x *UploadReqPara1) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadReqPara1.ProtoReflect.Descriptor instead.
func (*UploadReqPara1) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{86}
}

func (x *UploadReqPara1) GetFid() uint64 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *UploadReqPara1) GetPartId() uint32 {
	if x != nil {
		return x.PartId
	}
	return 0
}

func (x *UploadReqPara1) GetPartSize() uint32 {
	if x != nil {
		return x.PartSize
	}
	return 0
}

// 上传请求参数2（仅用于非分片上传文件时）
type UploadReqPara2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`  // 上传文件的文件名
	FileSize uint32 `protobuf:"varint,2,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"` // 文件大小
	FileHash string `protobuf:"bytes,3,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`  // 文件Hash SHA-256
	Ttl      uint32 `protobuf:"varint,4,opt,name=ttl,proto3" json:"ttl,omitempty"`                           // 文件存储周期（秒）, 为0时表示永久存储（可通过接口修改）
}

func (x *UploadReqPara2) Reset() {
	*x = UploadReqPara2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadReqPara2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadReqPara2) ProtoMessage() {}

func (x *UploadReqPara2) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadReqPara2.ProtoReflect.Descriptor instead.
func (*UploadReqPara2) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{87}
}

func (x *UploadReqPara2) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *UploadReqPara2) GetFileSize() uint32 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *UploadReqPara2) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *UploadReqPara2) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

// 文件上传响应参数1（仅用于分片上传文件时）
type FileUploadRespPara struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fid    uint64 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`                     // 存储服务分配存储文件的唯一标识
	PartId uint32 `protobuf:"varint,2,opt,name=part_id,json=partId,proto3" json:"part_id,omitempty"` // 文件片ID
}

func (x *FileUploadRespPara) Reset() {
	*x = FileUploadRespPara{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileUploadRespPara) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileUploadRespPara) ProtoMessage() {}

func (x *FileUploadRespPara) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileUploadRespPara.ProtoReflect.Descriptor instead.
func (*FileUploadRespPara) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{88}
}

func (x *FileUploadRespPara) GetFid() uint64 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *FileUploadRespPara) GetPartId() uint32 {
	if x != nil {
		return x.PartId
	}
	return 0
}

// 上传文件响应
type MsgUploadFileResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result     ERpcResultCode      `protobuf:"varint,1,opt,name=result,proto3,enum=imbotgateway.ERpcResultCode" json:"result,omitempty"` // 结果码
	Para1      *FileUploadRespPara `protobuf:"bytes,2,opt,name=para1,proto3" json:"para1,omitempty"`                                     // Ref
	Para2      *FidPara            `protobuf:"bytes,3,opt,name=para2,proto3" json:"para2,omitempty"`                                     // Ref，仅用于非分片文件上传
	AccessHash uint64              `protobuf:"varint,4,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`        // 仅用于非分片文件上传存储之后的访问hash
}

func (x *MsgUploadFileResp) Reset() {
	*x = MsgUploadFileResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgUploadFileResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgUploadFileResp) ProtoMessage() {}

func (x *MsgUploadFileResp) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgUploadFileResp.ProtoReflect.Descriptor instead.
func (*MsgUploadFileResp) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{89}
}

func (x *MsgUploadFileResp) GetResult() ERpcResultCode {
	if x != nil {
		return x.Result
	}
	return ERpcResultCode_RRC_OK
}

func (x *MsgUploadFileResp) GetPara1() *FileUploadRespPara {
	if x != nil {
		return x.Para1
	}
	return nil
}

func (x *MsgUploadFileResp) GetPara2() *FidPara {
	if x != nil {
		return x.Para2
	}
	return nil
}

func (x *MsgUploadFileResp) GetAccessHash() uint64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

// 下载文件请求
type MsgDownloadFileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fid        uint64 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`                                 // 存储服务分配存储文件的唯一标识
	AccessHash uint64 `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` // 访问hash
	Offset     uint32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`                           // 起始偏移，从0开始
	Length     uint32 `protobuf:"varint,4,opt,name=length,proto3" json:"length,omitempty"`                           // 长度
}

func (x *MsgDownloadFileReq) Reset() {
	*x = MsgDownloadFileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgDownloadFileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgDownloadFileReq) ProtoMessage() {}

func (x *MsgDownloadFileReq) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgDownloadFileReq.ProtoReflect.Descriptor instead.
func (*MsgDownloadFileReq) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{90}
}

func (x *MsgDownloadFileReq) GetFid() uint64 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *MsgDownloadFileReq) GetAccessHash() uint64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *MsgDownloadFileReq) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *MsgDownloadFileReq) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

// 下载文件响应参数1
type DownloadFileRespPara1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fid      uint64 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`                          // 存储服务分配存储文件的唯一标识
	Offset   uint32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`                    // 起始偏移，从0开始
	FileName string `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"` // 上传文件时的文件名
}

func (x *DownloadFileRespPara1) Reset() {
	*x = DownloadFileRespPara1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadFileRespPara1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadFileRespPara1) ProtoMessage() {}

func (x *DownloadFileRespPara1) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadFileRespPara1.ProtoReflect.Descriptor instead.
func (*DownloadFileRespPara1) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{91}
}

func (x *DownloadFileRespPara1) GetFid() uint64 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *DownloadFileRespPara1) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *DownloadFileRespPara1) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

// 下载文件响应参数2
type DownloadFileRespPara2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Length uint32 `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"` // 长度
	Data   []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`      // 数据
}

func (x *DownloadFileRespPara2) Reset() {
	*x = DownloadFileRespPara2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadFileRespPara2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadFileRespPara2) ProtoMessage() {}

func (x *DownloadFileRespPara2) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadFileRespPara2.ProtoReflect.Descriptor instead.
func (*DownloadFileRespPara2) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{92}
}

func (x *DownloadFileRespPara2) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *DownloadFileRespPara2) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// 下载文件响应
type MsgDownloadFileResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result ERpcResultCode         `protobuf:"varint,1,opt,name=result,proto3,enum=imbotgateway.ERpcResultCode" json:"result,omitempty"` // 结果码
	Para1  *DownloadFileRespPara1 `protobuf:"bytes,2,opt,name=para1,proto3" json:"para1,omitempty"`                                     // Ref, 保留选用，当result = RRC_OK 且选用时有效
	Para2  *DownloadFileRespPara2 `protobuf:"bytes,3,opt,name=para2,proto3" json:"para2,omitempty"`                                     // Ref，当result = RRC_OK有效
}

func (x *MsgDownloadFileResp) Reset() {
	*x = MsgDownloadFileResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgDownloadFileResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgDownloadFileResp) ProtoMessage() {}

func (x *MsgDownloadFileResp) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgDownloadFileResp.ProtoReflect.Descriptor instead.
func (*MsgDownloadFileResp) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{93}
}

func (x *MsgDownloadFileResp) GetResult() ERpcResultCode {
	if x != nil {
		return x.Result
	}
	return ERpcResultCode_RRC_OK
}

func (x *MsgDownloadFileResp) GetPara1() *DownloadFileRespPara1 {
	if x != nil {
		return x.Para1
	}
	return nil
}

func (x *MsgDownloadFileResp) GetPara2() *DownloadFileRespPara2 {
	if x != nil {
		return x.Para2
	}
	return nil
}

// 查询对象信息请求
type MsgQueryObjInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fid uint64 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"` // 存储服务分配存储文件的唯一标识
}

func (x *MsgQueryObjInfoReq) Reset() {
	*x = MsgQueryObjInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgQueryObjInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgQueryObjInfoReq) ProtoMessage() {}

func (x *MsgQueryObjInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgQueryObjInfoReq.ProtoReflect.Descriptor instead.
func (*MsgQueryObjInfoReq) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{94}
}

func (x *MsgQueryObjInfoReq) GetFid() uint64 {
	if x != nil {
		return x.Fid
	}
	return 0
}

// 查询对象信息响应参数
type QueryObjInfoRespPara struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                // 文件名
	Size       uint64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`                               // 文件大小（Byte）
	AccessHash uint64 `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` // 访问hash，仅针对机器人服务返回处理
}

func (x *QueryObjInfoRespPara) Reset() {
	*x = QueryObjInfoRespPara{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryObjInfoRespPara) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryObjInfoRespPara) ProtoMessage() {}

func (x *QueryObjInfoRespPara) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryObjInfoRespPara.ProtoReflect.Descriptor instead.
func (*QueryObjInfoRespPara) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{95}
}

func (x *QueryObjInfoRespPara) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryObjInfoRespPara) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *QueryObjInfoRespPara) GetAccessHash() uint64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

// 查询对象信息响应
type MsgQueryObjInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Para   *QueryObjInfoRespPara `protobuf:"bytes,1,opt,name=para,proto3" json:"para,omitempty"`                                       // Ref
	Result ERpcResultCode        `protobuf:"varint,2,opt,name=result,proto3,enum=imbotgateway.ERpcResultCode" json:"result,omitempty"` // 结果码
}

func (x *MsgQueryObjInfoResp) Reset() {
	*x = MsgQueryObjInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgQueryObjInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgQueryObjInfoResp) ProtoMessage() {}

func (x *MsgQueryObjInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgQueryObjInfoResp.ProtoReflect.Descriptor instead.
func (*MsgQueryObjInfoResp) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{96}
}

func (x *MsgQueryObjInfoResp) GetPara() *QueryObjInfoRespPara {
	if x != nil {
		return x.Para
	}
	return nil
}

func (x *MsgQueryObjInfoResp) GetResult() ERpcResultCode {
	if x != nil {
		return x.Result
	}
	return ERpcResultCode_RRC_OK
}

// 网关获取文件描述信息请求
type MsgGetFileDescReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fid        uint64 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`                                 // 存储服务分配存储文件的唯一标识
	AccessHash uint64 `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` // 访问hash
}

func (x *MsgGetFileDescReq) Reset() {
	*x = MsgGetFileDescReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgGetFileDescReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgGetFileDescReq) ProtoMessage() {}

func (x *MsgGetFileDescReq) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgGetFileDescReq.ProtoReflect.Descriptor instead.
func (*MsgGetFileDescReq) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{97}
}

func (x *MsgGetFileDescReq) GetFid() uint64 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *MsgGetFileDescReq) GetAccessHash() uint64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

// 网关获取文件描述信息响应
type MsgGetFileDescResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result ERpcResultCode `protobuf:"varint,1,opt,name=result,proto3,enum=imbotgateway.ERpcResultCode" json:"result,omitempty"` // 结果码
	Data   []byte         `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`                                       // 数据
}

func (x *MsgGetFileDescResp) Reset() {
	*x = MsgGetFileDescResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgGetFileDescResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgGetFileDescResp) ProtoMessage() {}

func (x *MsgGetFileDescResp) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgGetFileDescResp.ProtoReflect.Descriptor instead.
func (*MsgGetFileDescResp) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{98}
}

func (x *MsgGetFileDescResp) GetResult() ERpcResultCode {
	if x != nil {
		return x.Result
	}
	return ERpcResultCode_RRC_OK
}

func (x *MsgGetFileDescResp) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// ###################################  channelservice.pb.go  #############################
// 获取channel信息  不带user信息
type GetChannelInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32  `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`    //channle的Id
	AccessHash int64  `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` //哈希值
	Dlog       *Debug `protobuf:"bytes,3,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                                //日志
}

func (x *GetChannelInfoReq) Reset() {
	*x = GetChannelInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelInfoReq) ProtoMessage() {}

func (x *GetChannelInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelInfoReq.ProtoReflect.Descriptor instead.
func (*GetChannelInfoReq) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{99}
}

func (x *GetChannelInfoReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *GetChannelInfoReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *GetChannelInfoReq) GetDlog() *Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 群基础信息
type GetChannelInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseInfo   *ChannelInfoBase `protobuf:"bytes,1,opt,name=baseInfo,proto3" json:"baseInfo,omitempty"`                                       //基础信息  不带user信息
	Resultcode ChatResultCode   `protobuf:"varint,2,opt,name=resultcode,proto3,enum=imbotgateway.ChatResultCode" json:"resultcode,omitempty"` //返回结果码
}

func (x *GetChannelInfoResp) Reset() {
	*x = GetChannelInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelInfoResp) ProtoMessage() {}

func (x *GetChannelInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelInfoResp.ProtoReflect.Descriptor instead.
func (*GetChannelInfoResp) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{100}
}

func (x *GetChannelInfoResp) GetBaseInfo() *ChannelInfoBase {
	if x != nil {
		return x.BaseInfo
	}
	return nil
}

func (x *GetChannelInfoResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// ###################################  botserver.pb.go  #############################
type ReqGetAdminGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID int32 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	//int32 PeerFilter = 2; // 2：只要普通群 4：只要超级群 8：只要频道 （可相互组合 ex: 2|4|8 暂时不支持单聊)
	Debug *Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetAdminGroups) Reset() {
	*x = ReqGetAdminGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetAdminGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetAdminGroups) ProtoMessage() {}

func (x *ReqGetAdminGroups) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetAdminGroups.ProtoReflect.Descriptor instead.
func (*ReqGetAdminGroups) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{101}
}

func (x *ReqGetAdminGroups) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *ReqGetAdminGroups) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqGetGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID     int32 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	PeerFilter int32 `protobuf:"varint,2,opt,name=PeerFilter,proto3" json:"PeerFilter,omitempty"` // 2：只要普通群 4：只要超级群 8：只要频道 （可相互组合 ex: 2|4|8 暂时不支持单聊)
}

func (x *ReqGetGroups) Reset() {
	*x = ReqGetGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetGroups) ProtoMessage() {}

func (x *ReqGetGroups) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetGroups.ProtoReflect.Descriptor instead.
func (*ReqGetGroups) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{102}
}

func (x *ReqGetGroups) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *ReqGetGroups) GetPeerFilter() int32 {
	if x != nil {
		return x.PeerFilter
	}
	return 0
}

type Peer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerID   int32  `protobuf:"varint,1,opt,name=PeerID,proto3" json:"PeerID,omitempty"`
	PeerName string `protobuf:"bytes,2,opt,name=PeerName,proto3" json:"PeerName,omitempty"`
}

func (x *Peer) Reset() {
	*x = Peer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peer) ProtoMessage() {}

func (x *Peer) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peer.ProtoReflect.Descriptor instead.
func (*Peer) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{103}
}

func (x *Peer) GetPeerID() int32 {
	if x != nil {
		return x.PeerID
	}
	return 0
}

func (x *Peer) GetPeerName() string {
	if x != nil {
		return x.PeerName
	}
	return ""
}

type ReplyGetGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups      []*Peer `protobuf:"bytes,1,rep,name=Groups,proto3" json:"Groups,omitempty"`           // 普通群
	SuperGroups []*Peer `protobuf:"bytes,2,rep,name=SuperGroups,proto3" json:"SuperGroups,omitempty"` // 超级群
	Channels    []*Peer `protobuf:"bytes,3,rep,name=Channels,proto3" json:"Channels,omitempty"`       // 频道
}

func (x *ReplyGetGroups) Reset() {
	*x = ReplyGetGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetGroups) ProtoMessage() {}

func (x *ReplyGetGroups) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetGroups.ProtoReflect.Descriptor instead.
func (*ReplyGetGroups) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{104}
}

func (x *ReplyGetGroups) GetGroups() []*Peer {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *ReplyGetGroups) GetSuperGroups() []*Peer {
	if x != nil {
		return x.SuperGroups
	}
	return nil
}

func (x *ReplyGetGroups) GetChannels() []*Peer {
	if x != nil {
		return x.Channels
	}
	return nil
}

type ReqDeleteMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatType ChatType `protobuf:"varint,1,opt,name=ChatType,proto3,enum=imbotgateway.ChatType" json:"ChatType,omitempty"`
	UserId   int32    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChatId   int32    `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	MsgId    []int32  `protobuf:"varint,4,rep,packed,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	Debug    *Debug   `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqDeleteMessage) Reset() {
	*x = ReqDeleteMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteMessage) ProtoMessage() {}

func (x *ReqDeleteMessage) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteMessage.ProtoReflect.Descriptor instead.
func (*ReqDeleteMessage) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{105}
}

func (x *ReqDeleteMessage) GetChatType() ChatType {
	if x != nil {
		return x.ChatType
	}
	return ChatType_ChatTypeZero
}

func (x *ReqDeleteMessage) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqDeleteMessage) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ReqDeleteMessage) GetMsgId() []int32 {
	if x != nil {
		return x.MsgId
	}
	return nil
}

func (x *ReqDeleteMessage) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqSendChatAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatType   ChatType `protobuf:"varint,1,opt,name=ChatType,proto3,enum=imbotgateway.ChatType" json:"ChatType,omitempty"`
	UserId     int32    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChatId     int32    `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	ActionData []byte   `protobuf:"bytes,4,opt,name=actionData,proto3" json:"actionData,omitempty"`
	Debug      *Debug   `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqSendChatAction) Reset() {
	*x = ReqSendChatAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSendChatAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSendChatAction) ProtoMessage() {}

func (x *ReqSendChatAction) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSendChatAction.ProtoReflect.Descriptor instead.
func (*ReqSendChatAction) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{106}
}

func (x *ReqSendChatAction) GetChatType() ChatType {
	if x != nil {
		return x.ChatType
	}
	return ChatType_ChatTypeZero
}

func (x *ReqSendChatAction) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqSendChatAction) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ReqSendChatAction) GetActionData() []byte {
	if x != nil {
		return x.ActionData
	}
	return nil
}

func (x *ReqSendChatAction) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatType ChatType `protobuf:"varint,1,opt,name=ChatType,proto3,enum=imbotgateway.ChatType" json:"ChatType,omitempty"`
	ReqData  []byte   `protobuf:"bytes,2,opt,name=reqData,proto3" json:"reqData,omitempty"`
	BotId    int32    `protobuf:"varint,3,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
}

func (x *ReqData) Reset() {
	*x = ReqData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqData) ProtoMessage() {}

func (x *ReqData) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqData.ProtoReflect.Descriptor instead.
func (*ReqData) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{107}
}

func (x *ReqData) GetChatType() ChatType {
	if x != nil {
		return x.ChatType
	}
	return ChatType_ChatTypeZero
}

func (x *ReqData) GetReqData() []byte {
	if x != nil {
		return x.ReqData
	}
	return nil
}

func (x *ReqData) GetBotId() int32 {
	if x != nil {
		return x.BotId
	}
	return 0
}

type ReplyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"` //回覆結果
	Error int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ReplyData) Reset() {
	*x = ReplyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyData) ProtoMessage() {}

func (x *ReplyData) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyData.ProtoReflect.Descriptor instead.
func (*ReplyData) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{108}
}

func (x *ReplyData) GetReply() []byte {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *ReplyData) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

type ReqGetChatMembersCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatType ChatType `protobuf:"varint,1,opt,name=ChatType,proto3,enum=imbotgateway.ChatType" json:"ChatType,omitempty"`
	UserId   int32    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChatId   int32    `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Debug    *Debug   `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetChatMembersCount) Reset() {
	*x = ReqGetChatMembersCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChatMembersCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChatMembersCount) ProtoMessage() {}

func (x *ReqGetChatMembersCount) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChatMembersCount.ProtoReflect.Descriptor instead.
func (*ReqGetChatMembersCount) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{109}
}

func (x *ReqGetChatMembersCount) GetChatType() ChatType {
	if x != nil {
		return x.ChatType
	}
	return ChatType_ChatTypeZero
}

func (x *ReqGetChatMembersCount) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetChatMembersCount) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ReqGetChatMembersCount) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetChatMembersCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatMembersCount int32 `protobuf:"varint,1,opt,name=ChatMembersCount,proto3" json:"ChatMembersCount,omitempty"`
	ErrorCode        int32 `protobuf:"varint,2,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (x *ReplyGetChatMembersCount) Reset() {
	*x = ReplyGetChatMembersCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChatMembersCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChatMembersCount) ProtoMessage() {}

func (x *ReplyGetChatMembersCount) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChatMembersCount.ProtoReflect.Descriptor instead.
func (*ReplyGetChatMembersCount) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{110}
}

func (x *ReplyGetChatMembersCount) GetChatMembersCount() int32 {
	if x != nil {
		return x.ChatMembersCount
	}
	return 0
}

func (x *ReplyGetChatMembersCount) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// 通过群Id 用户Id 获取群基本信息
type GetChatInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId   int32  `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`       //群id
	UserId   int32  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`       //用户id
	RobotGet bool   `protobuf:"varint,3,opt,name=robot_get,json=robotGet,proto3" json:"robot_get,omitempty"` //是否是机器人获取
	Dlog     *Debug `protobuf:"bytes,4,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                          //日志
}

func (x *GetChatInfoReq) Reset() {
	*x = GetChatInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatInfoReq) ProtoMessage() {}

func (x *GetChatInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatInfoReq.ProtoReflect.Descriptor instead.
func (*GetChatInfoReq) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{111}
}

func (x *GetChatInfoReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *GetChatInfoReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetChatInfoReq) GetRobotGet() bool {
	if x != nil {
		return x.RobotGet
	}
	return false
}

func (x *GetChatInfoReq) GetDlog() *Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 获取用户信息、群、超级群信息的请求
type GetUsersChatsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid        int32   `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`                                    // 获取方id
	Users         []int32 `protobuf:"varint,2,rep,packed,name=users,proto3" json:"users,omitempty"`                               // 获取用户信息的用户id数组
	Chatid        []int32 `protobuf:"varint,3,rep,packed,name=chatid,proto3" json:"chatid,omitempty"`                             //获取普通群信息的群id数组
	Channelid     []int32 `protobuf:"varint,4,rep,packed,name=channelid,proto3" json:"channelid,omitempty"`                       // 获取超级群用户信息的超级群id数组
	ProtocolLayer int32   `protobuf:"varint,5,opt,name=protocol_layer,json=protocolLayer,proto3" json:"protocol_layer,omitempty"` // 协议层数
	Dlog          *Debug  `protobuf:"bytes,6,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                                         //日志
}

func (x *GetUsersChatsReq) Reset() {
	*x = GetUsersChatsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUsersChatsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsersChatsReq) ProtoMessage() {}

func (x *GetUsersChatsReq) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsersChatsReq.ProtoReflect.Descriptor instead.
func (*GetUsersChatsReq) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{112}
}

func (x *GetUsersChatsReq) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *GetUsersChatsReq) GetUsers() []int32 {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *GetUsersChatsReq) GetChatid() []int32 {
	if x != nil {
		return x.Chatid
	}
	return nil
}

func (x *GetUsersChatsReq) GetChannelid() []int32 {
	if x != nil {
		return x.Channelid
	}
	return nil
}

func (x *GetUsersChatsReq) GetProtocolLayer() int32 {
	if x != nil {
		return x.ProtocolLayer
	}
	return 0
}

func (x *GetUsersChatsReq) GetDlog() *Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 获取用户信息、群、超级群信息的返回
type GetUsersChatsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//repeated ChannelInfoBase channels = 1;
	//repeated GetChatInfoResp chats = 3;
	Channels   [][]byte       `protobuf:"bytes,1,rep,name=channels,proto3" json:"channels,omitempty"`
	Users      *UserInfoArray `protobuf:"bytes,2,opt,name=users,proto3" json:"users,omitempty"`
	Chats      [][]byte       `protobuf:"bytes,3,rep,name=chats,proto3" json:"chats,omitempty"`
	NoChats    []int32        `protobuf:"varint,4,rep,packed,name=no_chats,json=noChats,proto3" json:"no_chats,omitempty"`
	NoChans    []int32        `protobuf:"varint,5,rep,packed,name=no_chans,json=noChans,proto3" json:"no_chans,omitempty"`
	Resultcode ChatResultCode `protobuf:"varint,6,opt,name=resultcode,proto3,enum=imbotgateway.ChatResultCode" json:"resultcode,omitempty"` //结果码
}

func (x *GetUsersChatsResult) Reset() {
	*x = GetUsersChatsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUsersChatsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsersChatsResult) ProtoMessage() {}

func (x *GetUsersChatsResult) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsersChatsResult.ProtoReflect.Descriptor instead.
func (*GetUsersChatsResult) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{113}
}

func (x *GetUsersChatsResult) GetChannels() [][]byte {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *GetUsersChatsResult) GetUsers() *UserInfoArray {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *GetUsersChatsResult) GetChats() [][]byte {
	if x != nil {
		return x.Chats
	}
	return nil
}

func (x *GetUsersChatsResult) GetNoChats() []int32 {
	if x != nil {
		return x.NoChats
	}
	return nil
}

func (x *GetUsersChatsResult) GetNoChans() []int32 {
	if x != nil {
		return x.NoChans
	}
	return nil
}

func (x *GetUsersChatsResult) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// 根据用户id获取用户ID
type GetUserInfoByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId int32  `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"` //自己的用户ＩＤ
	UserId int32  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //需要获取的用户ID
	Debug  *Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetUserInfoByIdReq) Reset() {
	*x = GetUserInfoByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoByIdReq) ProtoMessage() {}

func (x *GetUserInfoByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoByIdReq.ProtoReflect.Descriptor instead.
func (*GetUserInfoByIdReq) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{114}
}

func (x *GetUserInfoByIdReq) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *GetUserInfoByIdReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetUserInfoByIdReq) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type GetUserInfoByIdArrReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId  int32   `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`           //自己的用户ＩＤ
	UserIds []int32 `protobuf:"varint,2,rep,packed,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"` //需要获取的用户ID
	Debug   *Debug  `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetUserInfoByIdArrReq) Reset() {
	*x = GetUserInfoByIdArrReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoByIdArrReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoByIdArrReq) ProtoMessage() {}

func (x *GetUserInfoByIdArrReq) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoByIdArrReq.ProtoReflect.Descriptor instead.
func (*GetUserInfoByIdArrReq) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{115}
}

func (x *GetUserInfoByIdArrReq) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *GetUserInfoByIdArrReq) GetUserIds() []int32 {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *GetUserInfoByIdArrReq) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 更新用户信息
type UpdateUserProfileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户ID
	Flags     int32  `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`                 // flags 第0 位 为更新firstName 第一位 last_name 第二位为 about
	FirstName string `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	About     string `protobuf:"bytes,5,opt,name=about,proto3" json:"about,omitempty"`
	Debug     *Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UpdateUserProfileReq) Reset() {
	*x = UpdateUserProfileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserProfileReq) ProtoMessage() {}

func (x *UpdateUserProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserProfileReq.ProtoReflect.Descriptor instead.
func (*UpdateUserProfileReq) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{116}
}

func (x *UpdateUserProfileReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserProfileReq) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *UpdateUserProfileReq) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *UpdateUserProfileReq) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *UpdateUserProfileReq) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *UpdateUserProfileReq) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 更新用户昵称等的返回结果
type UpdateUserProfileResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uinfo     *UserInfo `protobuf:"bytes,1,opt,name=Uinfo,proto3" json:"Uinfo,omitempty"`                                      //用户基本信息
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imbotgateway.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *UpdateUserProfileResult) Reset() {
	*x = UpdateUserProfileResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserProfileResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserProfileResult) ProtoMessage() {}

func (x *UpdateUserProfileResult) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserProfileResult.ProtoReflect.Descriptor instead.
func (*UpdateUserProfileResult) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{117}
}

func (x *UpdateUserProfileResult) GetUinfo() *UserInfo {
	if x != nil {
		return x.Uinfo
	}
	return nil
}

func (x *UpdateUserProfileResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 根据用户电话号码来获取用户信息
type GetUserByphone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	Debug *Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetUserByphone) Reset() {
	*x = GetUserByphone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserByphone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserByphone) ProtoMessage() {}

func (x *GetUserByphone) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserByphone.ProtoReflect.Descriptor instead.
func (*GetUserByphone) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{118}
}

func (x *GetUserByphone) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *GetUserByphone) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 获取用户基本信息的返回结果
type GetUserInfoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uinfo     *UserInfo `protobuf:"bytes,1,opt,name=Uinfo,proto3" json:"Uinfo,omitempty"`                                      ///用户的基本信息
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imbotgateway.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *GetUserInfoResult) Reset() {
	*x = GetUserInfoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoResult) ProtoMessage() {}

func (x *GetUserInfoResult) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoResult.ProtoReflect.Descriptor instead.
func (*GetUserInfoResult) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{119}
}

func (x *GetUserInfoResult) GetUinfo() *UserInfo {
	if x != nil {
		return x.Uinfo
	}
	return nil
}

func (x *GetUserInfoResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

type UpdateBotInfoSuppReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Placeholder string `protobuf:"bytes,2,opt,name=Placeholder,proto3" json:"Placeholder,omitempty"`
	Geo         bool   `protobuf:"varint,3,opt,name=geo,proto3" json:"geo,omitempty"`
	Debug       *Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UpdateBotInfoSuppReq) Reset() {
	*x = UpdateBotInfoSuppReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBotInfoSuppReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBotInfoSuppReq) ProtoMessage() {}

func (x *UpdateBotInfoSuppReq) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBotInfoSuppReq.ProtoReflect.Descriptor instead.
func (*UpdateBotInfoSuppReq) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{120}
}

func (x *UpdateBotInfoSuppReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateBotInfoSuppReq) GetPlaceholder() string {
	if x != nil {
		return x.Placeholder
	}
	return ""
}

func (x *UpdateBotInfoSuppReq) GetGeo() bool {
	if x != nil {
		return x.Geo
	}
	return false
}

func (x *UpdateBotInfoSuppReq) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type UpdateBotInfoSuppResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=imbotgateway.ReErrCode" json:"Errorcode,omitempty"`
}

func (x *UpdateBotInfoSuppResult) Reset() {
	*x = UpdateBotInfoSuppResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBotInfoSuppResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBotInfoSuppResult) ProtoMessage() {}

func (x *UpdateBotInfoSuppResult) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBotInfoSuppResult.ProtoReflect.Descriptor instead.
func (*UpdateBotInfoSuppResult) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{121}
}

func (x *UpdateBotInfoSuppResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 机器人基础信息更改
type BotUpdateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BotInfoVersion int32  `protobuf:"varint,2,opt,name=bot_info_version,json=botInfoVersion,proto3" json:"bot_info_version,omitempty"`
	BotChatHistory bool   `protobuf:"varint,3,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNoChat      bool   `protobuf:"varint,4,opt,name=bot_no_chat,json=botNoChat,proto3" json:"bot_no_chat,omitempty"`
	Debug          *Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *BotUpdateInfo) Reset() {
	*x = BotUpdateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BotUpdateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotUpdateInfo) ProtoMessage() {}

func (x *BotUpdateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotUpdateInfo.ProtoReflect.Descriptor instead.
func (*BotUpdateInfo) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{122}
}

func (x *BotUpdateInfo) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *BotUpdateInfo) GetBotInfoVersion() int32 {
	if x != nil {
		return x.BotInfoVersion
	}
	return 0
}

func (x *BotUpdateInfo) GetBotChatHistory() bool {
	if x != nil {
		return x.BotChatHistory
	}
	return false
}

func (x *BotUpdateInfo) GetBotNoChat() bool {
	if x != nil {
		return x.BotNoChat
	}
	return false
}

func (x *BotUpdateInfo) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 机器人更改信息的返回结果
type BotUpdateInfoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=imbotgateway.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *BotUpdateInfoResult) Reset() {
	*x = BotUpdateInfoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BotUpdateInfoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotUpdateInfoResult) ProtoMessage() {}

func (x *BotUpdateInfoResult) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotUpdateInfoResult.ProtoReflect.Descriptor instead.
func (*BotUpdateInfoResult) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{123}
}

func (x *BotUpdateInfoResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 更新机器人头像请求
type UpdateBotPicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BotId int32  `protobuf:"varint,1,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	Photo []byte `protobuf:"bytes,2,opt,name=photo,proto3" json:"photo,omitempty"` //(mtproto.TL_photo_layer105)
	Debug *Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UpdateBotPicRequest) Reset() {
	*x = UpdateBotPicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBotPicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBotPicRequest) ProtoMessage() {}

func (x *UpdateBotPicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBotPicRequest.ProtoReflect.Descriptor instead.
func (*UpdateBotPicRequest) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{124}
}

func (x *UpdateBotPicRequest) GetBotId() int32 {
	if x != nil {
		return x.BotId
	}
	return 0
}

func (x *UpdateBotPicRequest) GetPhoto() []byte {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *UpdateBotPicRequest) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type UpdateBotPicResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imbotgateway.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *UpdateBotPicResult) Reset() {
	*x = UpdateBotPicResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBotPicResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBotPicResult) ProtoMessage() {}

func (x *UpdateBotPicResult) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBotPicResult.ProtoReflect.Descriptor instead.
func (*UpdateBotPicResult) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{125}
}

func (x *UpdateBotPicResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 更新用户的username的请求
type UpdateuserNameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户的ID
	UserName string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`            //需要更新的用户名
	Debug    *Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
	KeyId    int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *UpdateuserNameReq) Reset() {
	*x = UpdateuserNameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateuserNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateuserNameReq) ProtoMessage() {}

func (x *UpdateuserNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateuserNameReq.ProtoReflect.Descriptor instead.
func (*UpdateuserNameReq) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{126}
}

func (x *UpdateuserNameReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateuserNameReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UpdateuserNameReq) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *UpdateuserNameReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

// 更新用户的username的返回结果
type UpdateuserNameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uinfo     *UserInfo `protobuf:"bytes,1,opt,name=Uinfo,proto3" json:"Uinfo,omitempty"`                                      ///用户的基本信息
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imbotgateway.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *UpdateuserNameResult) Reset() {
	*x = UpdateuserNameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateuserNameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateuserNameResult) ProtoMessage() {}

func (x *UpdateuserNameResult) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateuserNameResult.ProtoReflect.Descriptor instead.
func (*UpdateuserNameResult) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{127}
}

func (x *UpdateuserNameResult) GetUinfo() *UserInfo {
	if x != nil {
		return x.Uinfo
	}
	return nil
}

func (x *UpdateuserNameResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 注册指定用户的请求
type RegisterUserInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccessHash     int64  `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	PhoneNumber    string `protobuf:"bytes,3,opt,name=PhoneNumber,proto3" json:"PhoneNumber,omitempty"` //电话号码
	FirstName      string `protobuf:"bytes,4,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	LastName       string `protobuf:"bytes,5,opt,name=LastName,proto3" json:"LastName,omitempty"`
	IsBot          bool   `protobuf:"varint,6,opt,name=is_bot,json=isBot,proto3" json:"is_bot,omitempty"`
	BotInfoVersion int32  `protobuf:"varint,7,opt,name=bot_info_version,json=botInfoVersion,proto3" json:"bot_info_version,omitempty"`
	BotChatHistory bool   `protobuf:"varint,8,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNoChats     bool   `protobuf:"varint,9,opt,name=bot_no_chats,json=botNoChats,proto3" json:"bot_no_chats,omitempty"`
	Debug          *Debug `protobuf:"bytes,10,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *RegisterUserInfoReq) Reset() {
	*x = RegisterUserInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterUserInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterUserInfoReq) ProtoMessage() {}

func (x *RegisterUserInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterUserInfoReq.ProtoReflect.Descriptor instead.
func (*RegisterUserInfoReq) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{128}
}

func (x *RegisterUserInfoReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RegisterUserInfoReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *RegisterUserInfoReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *RegisterUserInfoReq) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *RegisterUserInfoReq) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *RegisterUserInfoReq) GetIsBot() bool {
	if x != nil {
		return x.IsBot
	}
	return false
}

func (x *RegisterUserInfoReq) GetBotInfoVersion() int32 {
	if x != nil {
		return x.BotInfoVersion
	}
	return 0
}

func (x *RegisterUserInfoReq) GetBotChatHistory() bool {
	if x != nil {
		return x.BotChatHistory
	}
	return false
}

func (x *RegisterUserInfoReq) GetBotNoChats() bool {
	if x != nil {
		return x.BotNoChats
	}
	return false
}

func (x *RegisterUserInfoReq) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 注册指定用户的请求
type RegisterUserInfoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uinfo     *UserInfo `protobuf:"bytes,1,opt,name=uinfo,proto3" json:"uinfo,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imbotgateway.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *RegisterUserInfoResult) Reset() {
	*x = RegisterUserInfoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterUserInfoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterUserInfoResult) ProtoMessage() {}

func (x *RegisterUserInfoResult) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterUserInfoResult.ProtoReflect.Descriptor instead.
func (*RegisterUserInfoResult) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{129}
}

func (x *RegisterUserInfoResult) GetUinfo() *UserInfo {
	if x != nil {
		return x.Uinfo
	}
	return nil
}

func (x *RegisterUserInfoResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 删除账号的请求
type DeleteAccountByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //被删除账号的用户id
	DelId  int32  `protobuf:"varint,2,opt,name=del_id,json=delId,proto3" json:"del_id,omitempty"`    //删除者的Id
	Debug  *Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *DeleteAccountByIdReq) Reset() {
	*x = DeleteAccountByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAccountByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAccountByIdReq) ProtoMessage() {}

func (x *DeleteAccountByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAccountByIdReq.ProtoReflect.Descriptor instead.
func (*DeleteAccountByIdReq) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{130}
}

func (x *DeleteAccountByIdReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DeleteAccountByIdReq) GetDelId() int32 {
	if x != nil {
		return x.DelId
	}
	return 0
}

func (x *DeleteAccountByIdReq) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 删除账号的返回结果
type DelAccountResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=imbotgateway.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *DelAccountResult) Reset() {
	*x = DelAccountResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelAccountResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelAccountResult) ProtoMessage() {}

func (x *DelAccountResult) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelAccountResult.ProtoReflect.Descriptor instead.
func (*DelAccountResult) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{131}
}

func (x *DelAccountResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 用户注册的请求结构
type SignUpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneNumber    string `protobuf:"bytes,1,opt,name=PhoneNumber,proto3" json:"PhoneNumber,omitempty"` //电话号码
	PhoneCodeHash  string `protobuf:"bytes,2,opt,name=PhoneCodeHash,proto3" json:"PhoneCodeHash,omitempty"`
	PhoneCode      string `protobuf:"bytes,3,opt,name=PhoneCode,proto3" json:"PhoneCode,omitempty"` //验证码
	KeyId          int64  `protobuf:"varint,5,opt,name=keyId,proto3" json:"keyId,omitempty"`        //用户的keyId(端的标识)
	FirstName      string `protobuf:"bytes,6,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	LastName       string `protobuf:"bytes,7,opt,name=LastName,proto3" json:"LastName,omitempty"`
	IsBot          bool   `protobuf:"varint,8,opt,name=is_bot,json=isBot,proto3" json:"is_bot,omitempty"`
	BotInfoVersion int32  `protobuf:"varint,9,opt,name=bot_info_version,json=botInfoVersion,proto3" json:"bot_info_version,omitempty"`
	BotChatHistory bool   `protobuf:"varint,10,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNoChats     bool   `protobuf:"varint,11,opt,name=bot_no_chats,json=botNoChats,proto3" json:"bot_no_chats,omitempty"`
	DcId           int32  `protobuf:"varint,12,opt,name=dc_id,json=dcId,proto3" json:"dc_id,omitempty"`
	Debug          *Debug `protobuf:"bytes,13,opt,name=debug,proto3" json:"debug,omitempty"`
	CountryCode    string `protobuf:"bytes,14,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"` // 国家码
	LocalPhone     string `protobuf:"bytes,15,opt,name=local_phone,json=localPhone,proto3" json:"local_phone,omitempty"`    // 不带国家码的号码
}

func (x *SignUpReq) Reset() {
	*x = SignUpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignUpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignUpReq) ProtoMessage() {}

func (x *SignUpReq) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignUpReq.ProtoReflect.Descriptor instead.
func (*SignUpReq) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{132}
}

func (x *SignUpReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *SignUpReq) GetPhoneCodeHash() string {
	if x != nil {
		return x.PhoneCodeHash
	}
	return ""
}

func (x *SignUpReq) GetPhoneCode() string {
	if x != nil {
		return x.PhoneCode
	}
	return ""
}

func (x *SignUpReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *SignUpReq) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *SignUpReq) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *SignUpReq) GetIsBot() bool {
	if x != nil {
		return x.IsBot
	}
	return false
}

func (x *SignUpReq) GetBotInfoVersion() int32 {
	if x != nil {
		return x.BotInfoVersion
	}
	return 0
}

func (x *SignUpReq) GetBotChatHistory() bool {
	if x != nil {
		return x.BotChatHistory
	}
	return false
}

func (x *SignUpReq) GetBotNoChats() bool {
	if x != nil {
		return x.BotNoChats
	}
	return false
}

func (x *SignUpReq) GetDcId() int32 {
	if x != nil {
		return x.DcId
	}
	return 0
}

func (x *SignUpReq) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *SignUpReq) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *SignUpReq) GetLocalPhone() string {
	if x != nil {
		return x.LocalPhone
	}
	return ""
}

type AuthSignUpResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     AuthSignUpResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=imbotgateway.AuthSignUpResult_ResultCode" json:"code,omitempty"`
	UserInfo *UserInfo                   `protobuf:"bytes,2,opt,name=userInfo,proto3" json:"userInfo,omitempty"`
}

func (x *AuthSignUpResult) Reset() {
	*x = AuthSignUpResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthSignUpResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthSignUpResult) ProtoMessage() {}

func (x *AuthSignUpResult) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthSignUpResult.ProtoReflect.Descriptor instead.
func (*AuthSignUpResult) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{133}
}

func (x *AuthSignUpResult) GetCode() AuthSignUpResult_ResultCode {
	if x != nil {
		return x.Code
	}
	return AuthSignUpResult_Success
}

func (x *AuthSignUpResult) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

// getfull user的请求
type GetFullUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId     int32  `protobuf:"varint,1,opt,name=selfId,proto3" json:"selfId,omitempty"`         //自己的用户Id
	UserId     int32  `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`         // 需要获取的用户的ID
	AccessHash int64  `protobuf:"varint,3,opt,name=AccessHash,proto3" json:"AccessHash,omitempty"` //需要获取的用户的哈希值
	Debug      *Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`            //日志记录相关的
}

func (x *GetFullUserReq) Reset() {
	*x = GetFullUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFullUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFullUserReq) ProtoMessage() {}

func (x *GetFullUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFullUserReq.ProtoReflect.Descriptor instead.
func (*GetFullUserReq) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{134}
}

func (x *GetFullUserReq) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *GetFullUserReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetFullUserReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *GetFullUserReq) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// getfull user的请求
type GetFullUserResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uinfo               *UserInfo `protobuf:"bytes,1,opt,name=uinfo,proto3" json:"uinfo,omitempty"`                                                           //用户的基础信息
	Isblocked           bool      `protobuf:"varint,2,opt,name=isblocked,proto3" json:"isblocked,omitempty"`                                                  //此用户是否是自己的黑名单
	PhoneCallsPrivate   bool      `protobuf:"varint,3,opt,name=phone_calls_private,json=phoneCallsPrivate,proto3" json:"phone_calls_private,omitempty"`       //userfull需要
	PhoneCallsAvailable bool      `protobuf:"varint,4,opt,name=phone_calls_available,json=phoneCallsAvailable,proto3" json:"phone_calls_available,omitempty"` //userfull需要
	About               string    `protobuf:"bytes,5,opt,name=about,proto3" json:"about,omitempty"`                                                           //用户的个性签名
	CommonChat          int32     `protobuf:"varint,6,opt,name=common_chat,json=commonChat,proto3" json:"common_chat,omitempty"`                              //共同群的个数
	Errorcode           ReErrCode `protobuf:"varint,7,opt,name=Errorcode,proto3,enum=imbotgateway.ReErrCode" json:"Errorcode,omitempty"`                      //返回错误码
}

func (x *GetFullUserResult) Reset() {
	*x = GetFullUserResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFullUserResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFullUserResult) ProtoMessage() {}

func (x *GetFullUserResult) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFullUserResult.ProtoReflect.Descriptor instead.
func (*GetFullUserResult) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{135}
}

func (x *GetFullUserResult) GetUinfo() *UserInfo {
	if x != nil {
		return x.Uinfo
	}
	return nil
}

func (x *GetFullUserResult) GetIsblocked() bool {
	if x != nil {
		return x.Isblocked
	}
	return false
}

func (x *GetFullUserResult) GetPhoneCallsPrivate() bool {
	if x != nil {
		return x.PhoneCallsPrivate
	}
	return false
}

func (x *GetFullUserResult) GetPhoneCallsAvailable() bool {
	if x != nil {
		return x.PhoneCallsAvailable
	}
	return false
}

func (x *GetFullUserResult) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *GetFullUserResult) GetCommonChat() int32 {
	if x != nil {
		return x.CommonChat
	}
	return 0
}

func (x *GetFullUserResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 根据用户userName来获取用户基本信息
type GetUserByUsername struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId   int32  `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Debug    *Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetUserByUsername) Reset() {
	*x = GetUserByUsername{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserByUsername) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserByUsername) ProtoMessage() {}

func (x *GetUserByUsername) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserByUsername.ProtoReflect.Descriptor instead.
func (*GetUserByUsername) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{136}
}

func (x *GetUserByUsername) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *GetUserByUsername) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GetUserByUsername) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 获取群的完整信息
type ReqGetFullChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid int32  `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	Chatid int32  `protobuf:"varint,2,opt,name=chatid,proto3" json:"chatid,omitempty"`
	Debug  *Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetFullChat) Reset() {
	*x = ReqGetFullChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetFullChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetFullChat) ProtoMessage() {}

func (x *ReqGetFullChat) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetFullChat.ProtoReflect.Descriptor instead.
func (*ReqGetFullChat) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{137}
}

func (x *ReqGetFullChat) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqGetFullChat) GetChatid() int32 {
	if x != nil {
		return x.Chatid
	}
	return 0
}

func (x *ReqGetFullChat) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetFullChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ReplyGetFullChat) Reset() {
	*x = ReplyGetFullChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetFullChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetFullChat) ProtoMessage() {}

func (x *ReplyGetFullChat) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetFullChat.ProtoReflect.Descriptor instead.
func (*ReplyGetFullChat) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{138}
}

func (x *ReplyGetFullChat) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplyGetFullChat) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// 退出超级群
type ReqLeaveChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32  `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`                  //退出的超级群ID
	UserId    int32  `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`                        // 退出的用户
	FromKeyid int64  `protobuf:"varint,3,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"` //退出用户的KEYID
	Debug     *Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqLeaveChannel) Reset() {
	*x = ReqLeaveChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqLeaveChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqLeaveChannel) ProtoMessage() {}

func (x *ReqLeaveChannel) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqLeaveChannel.ProtoReflect.Descriptor instead.
func (*ReqLeaveChannel) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{139}
}

func (x *ReqLeaveChannel) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqLeaveChannel) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqLeaveChannel) GetFromKeyid() int64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqLeaveChannel) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 推出超级群返回
type ReplyLeaveChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply     []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"` // 二进制，真实类型是mtproto.tl_updates_layer62
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyLeaveChannel) Reset() {
	*x = ReplyLeaveChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyLeaveChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyLeaveChannel) ProtoMessage() {}

func (x *ReplyLeaveChannel) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyLeaveChannel.ProtoReflect.Descriptor instead.
func (*ReplyLeaveChannel) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{140}
}

func (x *ReplyLeaveChannel) GetReply() []byte {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *ReplyLeaveChannel) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// 发送媒体
type ReqSendMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid       int32    `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"` // 发送方id
	Flags        int32    `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	Silent       bool     `protobuf:"varint,3,opt,name=silent,proto3" json:"silent,omitempty"`
	Background   bool     `protobuf:"varint,4,opt,name=background,proto3" json:"background,omitempty"`
	ClearDraft   bool     `protobuf:"varint,5,opt,name=clear_draft,json=clearDraft,proto3" json:"clear_draft,omitempty"`
	Peer         []byte   `protobuf:"bytes,6,opt,name=peer,proto3" json:"peer,omitempty"`
	ReplyToMsgId int32    `protobuf:"varint,7,opt,name=reply_to_msg_id,json=replyToMsgId,proto3" json:"reply_to_msg_id,omitempty"`
	Media        []byte   `protobuf:"bytes,8,opt,name=media,proto3" json:"media,omitempty"`
	MultiMedia   [][]byte `protobuf:"bytes,9,rep,name=multi_media,json=multiMedia,proto3" json:"multi_media,omitempty"`
	RandomId     int64    `protobuf:"varint,10,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	ReplyMarkup  []byte   `protobuf:"bytes,11,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`
	Newfileid    int64    `protobuf:"varint,12,opt,name=newfileid,proto3" json:"newfileid,omitempty"`
	FromkeyId    uint64   `protobuf:"varint,13,opt,name=fromkey_id,json=fromkeyId,proto3" json:"fromkey_id,omitempty"` // 发送方的key_id
	Chatmeber    []int32  `protobuf:"varint,14,rep,packed,name=chatmeber,proto3" json:"chatmeber,omitempty"`
	Debug        *Debug   `protobuf:"bytes,15,opt,name=debug,proto3" json:"debug,omitempty"`
	ViaBotId     int32    `protobuf:"varint,16,opt,name=via_bot_id,json=viaBotId,proto3" json:"via_bot_id,omitempty"` //via_bot_id
}

func (x *ReqSendMedia) Reset() {
	*x = ReqSendMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSendMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSendMedia) ProtoMessage() {}

func (x *ReqSendMedia) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSendMedia.ProtoReflect.Descriptor instead.
func (*ReqSendMedia) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{141}
}

func (x *ReqSendMedia) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqSendMedia) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ReqSendMedia) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

func (x *ReqSendMedia) GetBackground() bool {
	if x != nil {
		return x.Background
	}
	return false
}

func (x *ReqSendMedia) GetClearDraft() bool {
	if x != nil {
		return x.ClearDraft
	}
	return false
}

func (x *ReqSendMedia) GetPeer() []byte {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *ReqSendMedia) GetReplyToMsgId() int32 {
	if x != nil {
		return x.ReplyToMsgId
	}
	return 0
}

func (x *ReqSendMedia) GetMedia() []byte {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *ReqSendMedia) GetMultiMedia() [][]byte {
	if x != nil {
		return x.MultiMedia
	}
	return nil
}

func (x *ReqSendMedia) GetRandomId() int64 {
	if x != nil {
		return x.RandomId
	}
	return 0
}

func (x *ReqSendMedia) GetReplyMarkup() []byte {
	if x != nil {
		return x.ReplyMarkup
	}
	return nil
}

func (x *ReqSendMedia) GetNewfileid() int64 {
	if x != nil {
		return x.Newfileid
	}
	return 0
}

func (x *ReqSendMedia) GetFromkeyId() uint64 {
	if x != nil {
		return x.FromkeyId
	}
	return 0
}

func (x *ReqSendMedia) GetChatmeber() []int32 {
	if x != nil {
		return x.Chatmeber
	}
	return nil
}

func (x *ReqSendMedia) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *ReqSendMedia) GetViaBotId() int32 {
	if x != nil {
		return x.ViaBotId
	}
	return 0
}

// 状态返回
type ReplyResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"` //1: 无法获取 2: 数据过去超时 3: 崩溃 4: 发起id为0
}

func (x *ReplyResult) Reset() {
	*x = ReplyResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyResult) ProtoMessage() {}

func (x *ReplyResult) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyResult.ProtoReflect.Descriptor instead.
func (*ReplyResult) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{142}
}

func (x *ReplyResult) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplyResult) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// 编辑群名字
type ReqEditChatTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid    int32  `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"` // 用户id
	Chatid    int32  `protobuf:"varint,2,opt,name=chatid,proto3" json:"chatid,omitempty"`
	Title     string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	FromKeyid uint64 `protobuf:"varint,4,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqEditChatTitle) Reset() {
	*x = ReqEditChatTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqEditChatTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqEditChatTitle) ProtoMessage() {}

func (x *ReqEditChatTitle) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqEditChatTitle.ProtoReflect.Descriptor instead.
func (*ReqEditChatTitle) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{143}
}

func (x *ReqEditChatTitle) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqEditChatTitle) GetChatid() int32 {
	if x != nil {
		return x.Chatid
	}
	return 0
}

func (x *ReqEditChatTitle) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ReqEditChatTitle) GetFromKeyid() uint64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqEditChatTitle) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyEditChatTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,5,opt,name=error,proto3" json:"error,omitempty"` //1. 群不存在 2. 编辑失败
}

func (x *ReplyEditChatTitle) Reset() {
	*x = ReplyEditChatTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyEditChatTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyEditChatTitle) ProtoMessage() {}

func (x *ReplyEditChatTitle) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyEditChatTitle.ProtoReflect.Descriptor instead.
func (*ReplyEditChatTitle) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{144}
}

func (x *ReplyEditChatTitle) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplyEditChatTitle) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// 获取一个sticker下面的所有贴图信息的请求
type GetStickerSetPackDcInfosReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //stickerSet 的id
	Debug *Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetStickerSetPackDcInfosReq) Reset() {
	*x = GetStickerSetPackDcInfosReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStickerSetPackDcInfosReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStickerSetPackDcInfosReq) ProtoMessage() {}

func (x *GetStickerSetPackDcInfosReq) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStickerSetPackDcInfosReq.ProtoReflect.Descriptor instead.
func (*GetStickerSetPackDcInfosReq) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{145}
}

func (x *GetStickerSetPackDcInfosReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetStickerSetPackDcInfosReq) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 获取一个sticker下面的所有贴图信息的返回
type GetStickerSetPackDcInfosResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StPDcInfo []*StickerPackDocumentInfo `protobuf:"bytes,1,rep,name=StPDcInfo,proto3" json:"StPDcInfo,omitempty"`
}

func (x *GetStickerSetPackDcInfosResult) Reset() {
	*x = GetStickerSetPackDcInfosResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStickerSetPackDcInfosResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStickerSetPackDcInfosResult) ProtoMessage() {}

func (x *GetStickerSetPackDcInfosResult) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStickerSetPackDcInfosResult.ProtoReflect.Descriptor instead.
func (*GetStickerSetPackDcInfosResult) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{146}
}

func (x *GetStickerSetPackDcInfosResult) GetStPDcInfo() []*StickerPackDocumentInfo {
	if x != nil {
		return x.StPDcInfo
	}
	return nil
}

// sticker集合里面具体内容
// 存储单个sticker内容请求
type StickerPackDocumentBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributesStikerSetId         int64  `protobuf:"varint,1,opt,name=attributes_stiker_set_id,json=attributesStikerSetId,proto3" json:"attributes_stiker_set_id,omitempty"`
	DocumentId                    uint64 `protobuf:"varint,2,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	AccessHash                    int64  `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	MimeType                      string `protobuf:"bytes,4,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	Size                          int32  `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	Thumb                         string `protobuf:"bytes,6,opt,name=thumb,proto3" json:"thumb,omitempty"`
	DcId                          int32  `protobuf:"varint,7,opt,name=dc_id,json=dcId,proto3" json:"dc_id,omitempty"`
	Date                          int32  `protobuf:"varint,8,opt,name=date,proto3" json:"date,omitempty"`
	AttributesImageSizeW          int32  `protobuf:"varint,9,opt,name=attributes_image_size_w,json=attributesImageSizeW,proto3" json:"attributes_image_size_w,omitempty"`
	AttributesImageSizeH          int32  `protobuf:"varint,10,opt,name=attributes_image_size_h,json=attributesImageSizeH,proto3" json:"attributes_image_size_h,omitempty"`
	AttributesStikerAlt           string `protobuf:"bytes,11,opt,name=attributes_stiker_alt,json=attributesStikerAlt,proto3" json:"attributes_stiker_alt,omitempty"`
	AttributesStikerSetAccessHash int64  `protobuf:"varint,12,opt,name=attributes_stiker_set_access_hash,json=attributesStikerSetAccessHash,proto3" json:"attributes_stiker_set_access_hash,omitempty"`
	AttributesFileName            string `protobuf:"bytes,13,opt,name=attributes_file_name,json=attributesFileName,proto3" json:"attributes_file_name,omitempty"`
}

func (x *StickerPackDocumentBase) Reset() {
	*x = StickerPackDocumentBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StickerPackDocumentBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StickerPackDocumentBase) ProtoMessage() {}

func (x *StickerPackDocumentBase) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StickerPackDocumentBase.ProtoReflect.Descriptor instead.
func (*StickerPackDocumentBase) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{147}
}

func (x *StickerPackDocumentBase) GetAttributesStikerSetId() int64 {
	if x != nil {
		return x.AttributesStikerSetId
	}
	return 0
}

func (x *StickerPackDocumentBase) GetDocumentId() uint64 {
	if x != nil {
		return x.DocumentId
	}
	return 0
}

func (x *StickerPackDocumentBase) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *StickerPackDocumentBase) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *StickerPackDocumentBase) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *StickerPackDocumentBase) GetThumb() string {
	if x != nil {
		return x.Thumb
	}
	return ""
}

func (x *StickerPackDocumentBase) GetDcId() int32 {
	if x != nil {
		return x.DcId
	}
	return 0
}

func (x *StickerPackDocumentBase) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *StickerPackDocumentBase) GetAttributesImageSizeW() int32 {
	if x != nil {
		return x.AttributesImageSizeW
	}
	return 0
}

func (x *StickerPackDocumentBase) GetAttributesImageSizeH() int32 {
	if x != nil {
		return x.AttributesImageSizeH
	}
	return 0
}

func (x *StickerPackDocumentBase) GetAttributesStikerAlt() string {
	if x != nil {
		return x.AttributesStikerAlt
	}
	return ""
}

func (x *StickerPackDocumentBase) GetAttributesStikerSetAccessHash() int64 {
	if x != nil {
		return x.AttributesStikerSetAccessHash
	}
	return 0
}

func (x *StickerPackDocumentBase) GetAttributesFileName() string {
	if x != nil {
		return x.AttributesFileName
	}
	return ""
}

type StickerPackDocumentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	InfoBase *StickerPackDocumentBase `protobuf:"bytes,2,opt,name=infoBase,proto3" json:"infoBase,omitempty"`
}

func (x *StickerPackDocumentInfo) Reset() {
	*x = StickerPackDocumentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imbotgateway_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StickerPackDocumentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StickerPackDocumentInfo) ProtoMessage() {}

func (x *StickerPackDocumentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_imbotgateway_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StickerPackDocumentInfo.ProtoReflect.Descriptor instead.
func (*StickerPackDocumentInfo) Descriptor() ([]byte, []int) {
	return file_imbotgateway_proto_rawDescGZIP(), []int{148}
}

func (x *StickerPackDocumentInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StickerPackDocumentInfo) GetInfoBase() *StickerPackDocumentBase {
	if x != nil {
		return x.InfoBase
	}
	return nil
}

var File_imbotgateway_proto protoreflect.FileDescriptor

var file_imbotgateway_proto_rawDesc = []byte{
	0x0a, 0x12, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x94, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x29, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d,
	0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xe3, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x53, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x53, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64,
	0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x12,
	0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xde, 0x01,
	0x0a, 0x1d, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65,
	0x79, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xcb,
	0x01, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x62, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x75,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xab, 0x01, 0x0a,
	0x13, 0x52, 0x65, 0x71, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x12,
	0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x7c, 0x0a, 0x10, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0x94, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x71,
	0x44, 0x65, 0x6c, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x55, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x0b, 0x55, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x12, 0x15, 0x0a,
	0x06, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62,
	0x6f, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22,
	0x90, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69,
	0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x22, 0x5b, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22,
	0x68, 0x0a, 0x14, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x7a, 0x0a, 0x1f, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x62, 0x6f,
	0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x5b, 0x0a, 0x22, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68,
	0x6f, 0x70, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65,
	0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x93, 0x02, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x34, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x89,
	0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x35, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x52, 0x04, 0x73, 0x65, 0x74, 0x73, 0x22, 0x53, 0x0a, 0x1c, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22,
	0x58, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x50, 0x61, 0x63, 0x6b, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x69, 0x73, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x22, 0xa0, 0x02, 0x0a, 0x0e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x72, 0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6d, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6d,
	0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6d,
	0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x44, 0x0a, 0x0e, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x62, 0x6f,
	0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x77, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x35, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xed, 0x01, 0x0a, 0x16, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d,
	0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x52, 0x0a, 0x19, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x15,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b,
	0x44, 0x63, 0x52, 0x65, 0x71, 0x12, 0x4b, 0x0a, 0x0d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x70, 0x61,
	0x63, 0x6b, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69,
	0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x0d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x70, 0x61, 0x63, 0x6b, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x61, 0x0a,
	0x18, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63,
	0x6b, 0x44, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x69,
	0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x45, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0xdc, 0x02, 0x0a, 0x16, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x72, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x72, 0x65, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6d, 0x61, 0x73,
	0x6b, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x62,
	0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x62, 0x0a, 0x19, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52,
	0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x51, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x53, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x63, 0x0a, 0x11, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x77, 0x65, 0x62, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x57, 0x65, 0x62, 0x70,
	0x22, 0xcd, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x22, 0x44, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x5a, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x30, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x69,
	0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x44, 0x0a, 0x13, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x11, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x30,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x22, 0x44, 0x0a, 0x13, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xd3, 0x01, 0x0a, 0x11, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x22, 0xe0, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x53, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x53, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x01, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x22, 0x4c, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0xb7, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69, 0x64,
	0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x3f, 0x0a, 0x0f, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x89, 0x01, 0x0a,
	0x0e, 0x52, 0x65, 0x71, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x29, 0x0a,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69,
	0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x40, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x83, 0x02, 0x0a, 0x0e, 0x52,
	0x65, 0x71, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79,
	0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x62, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x22, 0x47, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x1e, 0x52, 0x65,
	0x71, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x6e, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x49, 0x73, 0x43, 0x68, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x49, 0x73, 0x43, 0x68, 0x61, 0x74, 0x22, 0x57, 0x0a, 0x20, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0xa9, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x71, 0x42, 0x6f, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72,
	0x6f, 0x6d, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66,
	0x72, 0x6f, 0x6d, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x73, 0x67, 0x54,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x73, 0x67, 0x54, 0x78, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xdd, 0x01, 0x0a, 0x0d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x3b, 0x0a, 0x0b, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x39, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x22, 0xe4, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x53, 0x65, 0x74, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12,
	0x2f, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x64, 0x69,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x74,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x6f, 0x74, 0x69, 0x64, 0x12,
	0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x61, 0x0a, 0x11, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x53, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4e, 0x0a,
	0x13, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xc8, 0x02,
	0x0a, 0x11, 0x52, 0x65, 0x71, 0x42, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66,
	0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x74, 0x69, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x75, 0x74, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x29, 0x0a,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69,
	0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xd6, 0x02, 0x0a, 0x13, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x76,
	0x69, 0x65, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x69, 0x66,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x47, 0x69, 0x66,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x4c, 0x69, 0x6e,
	0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x44, 0x61, 0x74,
	0x65, 0x22, 0x73, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x62,
	0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x47, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0xa5, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63,
	0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d,
	0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x43, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x67, 0x0a, 0x13,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x72, 0x22, 0x68, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x22,
	0x88, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x37, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xe6, 0x01, 0x0a, 0x10, 0x52,
	0x65, 0x71, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x6f, 0x74,
	0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x72,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x38, 0x0a, 0x0a, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x0a, 0x69,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0x84, 0x01, 0x0a, 0x0a, 0x49, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x6f,
	0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x42, 0x6f, 0x74, 0x49, 0x64,
	0x22, 0x99, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x53, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66,
	0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x6f, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x39, 0x0a, 0x09,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x85, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x71, 0x42,
	0x6f, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x62, 0x6f,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x62,
	0x6f, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22,
	0x3c, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x6f, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x72, 0x0a,
	0x19, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x55, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x22, 0x75, 0x0a, 0x1b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x37, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x0b, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x24, 0x52, 0x65, 0x71,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x22, 0x80, 0x01, 0x0a, 0x26, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x75, 0x0a, 0x1a, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x76, 0x0a, 0x1c, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x57, 0x0a, 0x0e, 0x4d, 0x73, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x66, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x47, 0x0a, 0x0f, 0x4d,
	0x73, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x45, 0x52,
	0x70, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x30, 0x0a, 0x12, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x22, 0x57, 0x0a, 0x13, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x75, 0x73, 0x66, 0x73, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x75, 0x73,
	0x66, 0x73, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x62, 0x66, 0x73, 0x73, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x62, 0x66, 0x73, 0x73, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x73, 0x73, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x73, 0x73, 0x6c, 0x22,
	0x8a, 0x01, 0x0a, 0x0c, 0x4d, 0x73, 0x67, 0x47, 0x65, 0x74, 0x46, 0x69, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x64, 0x35, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x95, 0x01, 0x0a,
	0x0d, 0x4d, 0x73, 0x67, 0x47, 0x65, 0x74, 0x46, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x69, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x34,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x45, 0x52,
	0x70, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0xa8, 0x01, 0x0a, 0x0f, 0x4d, 0x73, 0x67, 0x46, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x61, 0x72, 0x74, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x48, 0x0a, 0x10, 0x4d, 0x73, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x45, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x10, 0x4d, 0x73,
	0x67, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x32,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x50, 0x61, 0x72, 0x61, 0x31, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x31, 0x12, 0x32, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x50, 0x61, 0x72, 0x61, 0x32, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x58, 0x0a, 0x0e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x50, 0x61, 0x72, 0x61, 0x31, 0x12, 0x10, 0x0a, 0x03,
	0x66, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74,
	0x53, 0x69, 0x7a, 0x65, 0x22, 0x79, 0x0a, 0x0e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x50, 0x61, 0x72, 0x61, 0x32, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x74, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x22,
	0x3f, 0x0a, 0x12, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x50, 0x61, 0x72, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x66, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x61, 0x72, 0x74, 0x49, 0x64,
	0x22, 0xcf, 0x01, 0x0a, 0x11, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x45, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x36, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6d,
	0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x50, 0x61, 0x72, 0x61, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x31, 0x12, 0x2b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x32, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x46, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61,
	0x73, 0x68, 0x22, 0x77, 0x0a, 0x12, 0x4d, 0x73, 0x67, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x5e, 0x0a, 0x15, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x50,
	0x61, 0x72, 0x61, 0x31, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x66, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x43, 0x0a, 0x15, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x50,
	0x61, 0x72, 0x61, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xc1, 0x01, 0x0a, 0x13, 0x4d, 0x73, 0x67, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x45, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x39,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x50, 0x61, 0x72,
	0x61, 0x31, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x31, 0x12, 0x39, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x50, 0x61, 0x72, 0x61, 0x32, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x32, 0x22, 0x26, 0x0a, 0x12, 0x4d, 0x73, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4f, 0x62, 0x6a, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x69, 0x64, 0x22, 0x5f, 0x0a, 0x14,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x62, 0x6a, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x50, 0x61, 0x72, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x22, 0x83, 0x01,
	0x0a, 0x13, 0x4d, 0x73, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x62, 0x6a, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x04, 0x70, 0x61, 0x72, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x62, 0x6a, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x50, 0x61, 0x72, 0x61, 0x52, 0x04, 0x70, 0x61, 0x72, 0x61, 0x12, 0x34, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x45, 0x52, 0x70,
	0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x46, 0x0a, 0x11, 0x4d, 0x73, 0x67, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x22, 0x5e, 0x0a, 0x12, 0x4d,
	0x73, 0x67, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x45, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7c, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x27, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0x8d, 0x01, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x39, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x0a, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x56, 0x0a, 0x11, 0x52, 0x65, 0x71,
	0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x22, 0x46, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x65, 0x65,
	0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x50,
	0x65, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x3a, 0x0a, 0x04, 0x50, 0x65, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x65, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x65, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x06, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x34, 0x0a, 0x0b, 0x53, 0x75, 0x70, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6d, 0x62, 0x6f,
	0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x0b, 0x53,
	0x75, 0x70, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69,
	0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x08, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x10, 0x52,
	0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x32, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x43, 0x68, 0x61, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63,
	0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d,
	0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xc4, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x53,
	0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a,
	0x08, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61,
	0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x6e,
	0x0a, 0x07, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x08, 0x43, 0x68, 0x61,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x69, 0x6d,
	0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x72, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x22, 0x37,
	0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xa9, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x71, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x43, 0x68,
	0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x22, 0x64, 0x0a, 0x18, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2a, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63,
	0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x47, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x44,
	0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x62, 0x6f,
	0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04,
	0x44, 0x6c, 0x6f, 0x67, 0x22, 0xc6, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x43, 0x68, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0xee, 0x01,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x12, 0x31, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x05, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x68, 0x61, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f,
	0x5f, 0x63, 0x68, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x6f,
	0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x73,
	0x12, 0x3c, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x71,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x22, 0x76, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x79, 0x49, 0x64, 0x41, 0x72, 0x72, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65,
	0x6c, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x6c,
	0x66, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x29,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xc2, 0x01, 0x0a, 0x14, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x62,
	0x6f, 0x75, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x7e,
	0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x55, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x62,
	0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x51,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x22, 0x78, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x55,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x14,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x75, 0x70,
	0x70, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x67, 0x65, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x67, 0x65, 0x6f,
	0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x50, 0x0a, 0x17, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x75, 0x70, 0x70,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x62, 0x6f,
	0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xc7, 0x01,
	0x0a, 0x0d, 0x42, 0x6f, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x62, 0x6f,
	0x74, 0x43, 0x68, 0x61, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0b,
	0x62, 0x6f, 0x74, 0x5f, 0x6e, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x62, 0x6f, 0x74, 0x4e, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x12, 0x29, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d,
	0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x4c, 0x0a, 0x13, 0x42, 0x6f, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x35,
	0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x6d, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x6f, 0x74, 0x50, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x6f,
	0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x22, 0x4b, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f,
	0x74, 0x50, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x45,
	0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x8a, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d,
	0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x7b,
	0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x55,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xe3, 0x02, 0x0a, 0x13,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x20, 0x0a,
	0x0b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f,
	0x62, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x42, 0x6f, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f,
	0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x74, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x6f, 0x74, 0x5f, 0x6e, 0x6f, 0x5f, 0x63,
	0x68, 0x61, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x6f, 0x74, 0x4e,
	0x6f, 0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x22, 0x7d, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x75,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x62,
	0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x69,
	0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x45, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x71, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x22, 0x49, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x62,
	0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xd2,
	0x03, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24,
	0x0a, 0x0d, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x42, 0x6f, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x62,
	0x6f, 0x74, 0x43, 0x68, 0x61, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a,
	0x0c, 0x62, 0x6f, 0x74, 0x5f, 0x6e, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x6f, 0x74, 0x4e, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x73, 0x12,
	0x13, 0x0a, 0x05, 0x64, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x64, 0x63, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x22, 0xb4, 0x02, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e,
	0x55, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3d, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x62, 0x6f,
	0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xac, 0x01, 0x0a, 0x0a,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x43,
	0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x04, 0x12,
	0x12, 0x0a, 0x0e, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x57, 0x61, 0x69, 0x74,
	0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x52, 0x6f, 0x62, 0x6f,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x07, 0x22, 0x8b, 0x01, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x29, 0x0a,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69,
	0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xb1, 0x02, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x46, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2c,
	0x0a, 0x05, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x73, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x62, 0x6f, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63,
	0x68, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x73, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x22, 0x6b, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x43,
	0x68, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61,
	0x74, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x40,
	0x0a, 0x10, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x68,
	0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x91, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x22, 0x48, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xeb,
	0x03, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73,
	0x69, 0x6c, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x64,
	0x72, 0x61, 0x66, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6c, 0x65, 0x61,
	0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0f, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x6d,
	0x61, 0x72, 0x6b, 0x75, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x66,
	0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x65, 0x77,
	0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x6b, 0x65,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d,
	0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x74, 0x6d, 0x65, 0x62,
	0x65, 0x72, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x74, 0x6d, 0x65,
	0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x1c,
	0x0a, 0x0a, 0x76, 0x69, 0x61, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x76, 0x69, 0x61, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x0b,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xa2, 0x01, 0x0a, 0x10, 0x52, 0x65,
	0x71, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65,
	0x79, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x42,
	0x0a, 0x12, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x58, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x65, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x50, 0x61, 0x63,
	0x6b, 0x44, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x43,
	0x0a, 0x09, 0x53, 0x74, 0x50, 0x44, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x53, 0x74, 0x50, 0x44, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0xa2, 0x04, 0x0a, 0x17, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50,
	0x61, 0x63, 0x6b, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x65, 0x12,
	0x37, 0x0a, 0x18, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x74,
	0x69, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x15, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x53, 0x74, 0x69,
	0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69,
	0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x12, 0x13, 0x0a, 0x05, 0x64, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x64, 0x63, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x57, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x68, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x14, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x48, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x69, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x6c,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x53, 0x74, 0x69, 0x6b, 0x65, 0x72, 0x41, 0x6c, 0x74, 0x12, 0x48, 0x0a, 0x21,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x69, 0x6b, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x53, 0x74, 0x69, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6c, 0x0a, 0x17, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x65, 0x52, 0x08, 0x69, 0x6e,
	0x66, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x49, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5a, 0x65,
	0x72, 0x6f, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x10, 0x02,
	0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x10,
	0x03, 0x2a, 0x32, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x4b, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x46,
	0x61, 0x69, 0x6c, 0x10, 0x01, 0x32, 0x98, 0x33, 0x0a, 0x11, 0x42, 0x6f, 0x74, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x41,
	0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x12, 0x17, 0x2e, 0x69, 0x6d, 0x62, 0x6f,
	0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x52,
	0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x1f, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x12, 0x22, 0x2e, 0x69, 0x6d, 0x62,
	0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1e,
	0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65,
	0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x57, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x10, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x2e,
	0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x1a, 0x24, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x6f, 0x74, 0x50, 0x69, 0x63, 0x12, 0x21, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f,
	0x74, 0x50, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x69, 0x6d,
	0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x6f, 0x74, 0x50, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x51, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1b, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x42, 0x6f, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x21, 0x2e,
	0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x42, 0x6f, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x60, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x53, 0x75, 0x70, 0x70, 0x12, 0x22, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x53, 0x75, 0x70, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x69, 0x6d,
	0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x75, 0x70, 0x70, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x2e, 0x69, 0x6d, 0x62,
	0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x79, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x1a, 0x1f, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x22, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x56, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64,
	0x12, 0x20, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x1a,
	0x1f, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x75, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x29,
	0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x44,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x69, 0x6d, 0x62, 0x6f,
	0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0f, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x24, 0x2e, 0x69,
	0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x27, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x63, 0x0a,
	0x12, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63,
	0x6b, 0x44, 0x63, 0x12, 0x23, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50,
	0x61, 0x63, 0x6b, 0x44, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x66, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x24, 0x2e, 0x69, 0x6d, 0x62, 0x6f,
	0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x27, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x14, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x12, 0x21, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x57, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x22, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x50, 0x61, 0x63, 0x6b, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x2d, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x6f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x41, 0x6c, 0x6c,
	0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x27, 0x2e, 0x69, 0x6d, 0x62,
	0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x12, 0x7c, 0x0a, 0x17, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x2e, 0x69,
	0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x69, 0x6d,
	0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x53, 0x68, 0x6f, 0x70, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x54, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x74, 0x73,
	0x12, 0x1e, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x21, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x09, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x12, 0x15, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x17, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x00, 0x12, 0x3b, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x12, 0x15, 0x2e,
	0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x71,
	0x44, 0x61, 0x74, 0x61, 0x1a, 0x17, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12,
	0x65, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x26, 0x2e, 0x69,
	0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x15, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52,
	0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x17, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x00, 0x12, 0x40, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x15, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x17, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x2e, 0x69, 0x6d, 0x62, 0x6f,
	0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61,
	0x1a, 0x17, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x1a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x15, 0x2e, 0x69, 0x6d, 0x62, 0x6f,
	0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61,
	0x1a, 0x17, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0e, 0x53,
	0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e,
	0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x71,
	0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x17,
	0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0b, 0x53, 0x65, 0x6e,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x15, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x1a,
	0x17, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x2e, 0x69, 0x6d,
	0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x17, 0x2e, 0x69, 0x6d,
	0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x1a, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x1a,
	0x1c, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x00, 0x12,
	0x51, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x12, 0x1f, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x1a, 0x1c, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x22, 0x00, 0x12, 0x5f, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x65, 0x74, 0x4d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x2e, 0x69, 0x6d, 0x62, 0x6f,
	0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0a, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x15, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x1e, 0x2e, 0x69, 0x6d, 0x62, 0x6f,
	0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x2e,
	0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x20,
	0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x59, 0x0a, 0x12, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x47, 0x65, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1f, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4d, 0x73, 0x67, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x69, 0x6d, 0x62, 0x6f,
	0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4d, 0x73, 0x67, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x55, 0x0a,
	0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x62, 0x6a, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x2e,
	0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4d, 0x73, 0x67,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x62, 0x6a, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a,
	0x21, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4d,
	0x73, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x62, 0x6a, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x4d, 0x73, 0x67, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4d, 0x73, 0x67, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0a, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x69, 0x6d, 0x62, 0x6f,
	0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x69, 0x6d, 0x62, 0x6f,
	0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x11,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x1d, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x4d, 0x73, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x1e, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x4d, 0x73, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x56, 0x0a, 0x15, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x2e, 0x69, 0x6d,
	0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4d, 0x73, 0x67, 0x46, 0x69,
	0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x69, 0x6d, 0x62, 0x6f,
	0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4d, 0x73, 0x67, 0x46, 0x69, 0x6c, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x17, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x47, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x46, 0x69, 0x64, 0x12, 0x1a, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x4d, 0x73, 0x67, 0x47, 0x65, 0x74, 0x46, 0x69, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x1b, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x4d, 0x73, 0x67, 0x47, 0x65, 0x74, 0x46, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x55, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x20, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x21, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x07, 0x42, 0x6f, 0x74, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x18, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x52, 0x65, 0x71, 0x42, 0x6f, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x1a, 0x1a, 0x2e, 0x69,
	0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x42, 0x6f, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x28, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x1a,
	0x2a, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x00, 0x12, 0x8f, 0x01,
	0x0a, 0x21, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x12, 0x32, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x1a, 0x34, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x00, 0x12,
	0x6e, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x55, 0x75, 0x69, 0x64, 0x12, 0x27, 0x2e, 0x69, 0x6d, 0x62, 0x6f,
	0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x55, 0x75,
	0x69, 0x64, 0x1a, 0x29, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x55, 0x75, 0x69, 0x64, 0x22, 0x00, 0x12,
	0x59, 0x0a, 0x13, 0x42, 0x6f, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x24, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x42, 0x6f, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x1a, 0x1a, 0x2e, 0x69,
	0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x42, 0x6f, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0b, 0x53, 0x65,
	0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x1c, 0x2e, 0x69, 0x6d, 0x62, 0x6f,
	0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x65, 0x6e, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x1a, 0x17, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x6f, 0x6f, 0x6c,
	0x22, 0x00, 0x12, 0x53, 0x0a, 0x0d, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x1e, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x1a, 0x20, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x12, 0x28, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x69,
	0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1f, 0x2e,
	0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x71,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x21,
	0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x12, 0x1c, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x1a, 0x1e, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x22, 0x00, 0x12, 0x5a, 0x0a, 0x12, 0x45, 0x64, 0x69, 0x74, 0x42, 0x61, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x42, 0x61, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x21, 0x2e, 0x69, 0x6d, 0x62, 0x6f,
	0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x61,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x50,
	0x0a, 0x0c, 0x53, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d,
	0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65,
	0x71, 0x53, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x1f, 0x2e,
	0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x53, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x00,
	0x12, 0x45, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x1b, 0x2e,
	0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x1a, 0x19, 0x2e, 0x69, 0x6d, 0x62,
	0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x1b, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2c, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x1a, 0x2e, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0b, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x1a, 0x1e, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x1a, 0x1f, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0b, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x1c, 0x2e, 0x69, 0x6d, 0x62, 0x6f,
	0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x1a, 0x1e, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x1b, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x1a, 0x1d, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c,
	0x43, 0x68, 0x61, 0x74, 0x12, 0x1c, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x68,
	0x61, 0x74, 0x1a, 0x1e, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x68,
	0x61, 0x74, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0c, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1d, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x1a, 0x1f, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x12, 0x1a, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x1a,
	0x19, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0d,
	0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x2e,
	0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x71,
	0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x1a, 0x20, 0x2e,
	0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x22,
	0x00, 0x12, 0x42, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x2e, 0x69, 0x6d,
	0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x69, 0x7a,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x22, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x69, 0x6d, 0x62,
	0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x57,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x12, 0x21, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x21, 0x2e, 0x69, 0x6d, 0x62,
	0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x42, 0x1e, 0x5a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_imbotgateway_proto_rawDescOnce sync.Once
	file_imbotgateway_proto_rawDescData = file_imbotgateway_proto_rawDesc
)

func file_imbotgateway_proto_rawDescGZIP() []byte {
	file_imbotgateway_proto_rawDescOnce.Do(func() {
		file_imbotgateway_proto_rawDescData = protoimpl.X.CompressGZIP(file_imbotgateway_proto_rawDescData)
	})
	return file_imbotgateway_proto_rawDescData
}

var file_imbotgateway_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_imbotgateway_proto_msgTypes = make([]protoimpl.MessageInfo, 149)
var file_imbotgateway_proto_goTypes = []interface{}{
	(ChatType)(0),                                  // 0: imbotgateway.ChatType
	(StatusCode)(0),                                // 1: imbotgateway.StatusCode
	(AuthSignUpResult_ResultCode)(0),               // 2: imbotgateway.AuthSignUpResult.ResultCode
	(*ReqGetFullChannel)(nil),                      // 3: imbotgateway.ReqGetFullChannel
	(*ReqGetParticipants)(nil),                     // 4: imbotgateway.ReqGetParticipants
	(*ReqUpdatePinnedChannelMessage)(nil),          // 5: imbotgateway.ReqUpdatePinnedChannelMessage
	(*ReqEditChannelAbout)(nil),                    // 6: imbotgateway.ReqEditChannelAbout
	(*ReqEditChannelTitle)(nil),                    // 7: imbotgateway.ReqEditChannelTitle
	(*ReplyChannelData)(nil),                       // 8: imbotgateway.ReplyChannelData
	(*ReqDelManualBlockList)(nil),                  // 9: imbotgateway.ReqDelManualBlockList
	(*ReqSetManualBlockList)(nil),                  // 10: imbotgateway.ReqSetManualBlockList
	(*BlockUser)(nil),                              // 11: imbotgateway.BlockUser
	(*ManualBlockReplyData)(nil),                   // 12: imbotgateway.ManualBlockReplyData
	(*StoreShopStickerSetDocumentsReq)(nil),        // 13: imbotgateway.StoreShopStickerSetDocumentsReq
	(*StoreShopStickerSetDocumentsResult)(nil),     // 14: imbotgateway.StoreShopStickerSetDocumentsResult
	(*AuthorStickerSet)(nil),                       // 15: imbotgateway.AuthorStickerSet
	(*GetAuthorAllStickerSetReq)(nil),              // 16: imbotgateway.GetAuthorAllStickerSetReq
	(*GetAuthorAllStickerSetResult)(nil),           // 17: imbotgateway.GetAuthorAllStickerSetResult
	(*DeleteStickerPackDocumentReq)(nil),           // 18: imbotgateway.DeleteStickerPackDocumentReq
	(*DeleteStickerPackDocumentResult)(nil),        // 19: imbotgateway.DeleteStickerPackDocumentResult
	(*GetStickerSetInfoReq)(nil),                   // 20: imbotgateway.GetStickerSetInfoReq
	(*StickerSetInfo)(nil),                         // 21: imbotgateway.StickerSetInfo
	(*GetStickerSetInfoResult)(nil),                // 22: imbotgateway.GetStickerSetInfoResult
	(*DeleteStickerSetReq)(nil),                    // 23: imbotgateway.DeleteStickerSetReq
	(*DeleteStickerSetResult)(nil),                 // 24: imbotgateway.DeleteStickerSetResult
	(*StoreUserStickerSetReq)(nil),                 // 25: imbotgateway.StoreUserStickerSetReq
	(*StoreUserStickerSetResult)(nil),              // 26: imbotgateway.StoreUserStickerSetResult
	(*StoreStickerPackDcReq)(nil),                  // 27: imbotgateway.StoreStickerPackDcReq
	(*StoreStickerPackDcResult)(nil),               // 28: imbotgateway.StoreStickerPackDcResult
	(*StoreShopStickerSetReq)(nil),                 // 29: imbotgateway.StoreShopStickerSetReq
	(*StoreShopStickerSetResult)(nil),              // 30: imbotgateway.StoreShopStickerSetResult
	(*ResizeRequest)(nil),                          // 31: imbotgateway.ResizeRequest
	(*ResizeReply)(nil),                            // 32: imbotgateway.ResizeReply
	(*ConstraintRequest)(nil),                      // 33: imbotgateway.ConstraintRequest
	(*ConstraintReply)(nil),                        // 34: imbotgateway.ConstraintReply
	(*CompressImageRequest)(nil),                   // 35: imbotgateway.CompressImageRequest
	(*CompressImageReply)(nil),                     // 36: imbotgateway.CompressImageReply
	(*VideoPreviewRequest)(nil),                    // 37: imbotgateway.VideoPreviewRequest
	(*VideoPreviewReply)(nil),                      // 38: imbotgateway.VideoPreviewReply
	(*AudioPreviewRequest)(nil),                    // 39: imbotgateway.AudioPreviewRequest
	(*AudioPreviewReply)(nil),                      // 40: imbotgateway.AudioPreviewReply
	(*ReqParticipants)(nil),                        // 41: imbotgateway.ReqParticipants
	(*ReplyParticipants)(nil),                      // 42: imbotgateway.ReplyParticipants
	(*ReqCreateChat)(nil),                          // 43: imbotgateway.ReqCreateChat
	(*ReplyCreateChat)(nil),                        // 44: imbotgateway.ReplyCreateChat
	(*ReqMigrateChat)(nil),                         // 45: imbotgateway.ReqMigrateChat
	(*ReplyMigrateChat)(nil),                       // 46: imbotgateway.ReplyMigrateChat
	(*ReqJoinChannel)(nil),                         // 47: imbotgateway.ReqJoinChannel
	(*ReplyJoinChannel)(nil),                       // 48: imbotgateway.ReplyJoinChannel
	(*ReqChangeGroupAndChannelCrator)(nil),         // 49: imbotgateway.ReqChangeGroupAndChannelCrator
	(*ReplyChangeGroupAndChannelCrator)(nil),       // 50: imbotgateway.ReplyChangeGroupAndChannelCrator
	(*ReqBotCallMessageMedia)(nil),                 // 51: imbotgateway.ReqBotCallMessageMedia
	(*RequestDialog)(nil),                          // 52: imbotgateway.RequestDialog
	(*ReplyDialog)(nil),                            // 53: imbotgateway.ReplyDialog
	(*UserScore)(nil),                              // 54: imbotgateway.UserScore
	(*ReqSetGameScore)(nil),                        // 55: imbotgateway.ReqSetGameScore
	(*ReplySetGameScore)(nil),                      // 56: imbotgateway.ReplySetGameScore
	(*ReplyBanChannelUser)(nil),                    // 57: imbotgateway.ReplyBanChannelUser
	(*ReqBanChannelUser)(nil),                      // 58: imbotgateway.ReqBanChannelUser
	(*ChannelBannedRights)(nil),                    // 59: imbotgateway.ChannelBannedRights
	(*ReqGetChannels)(nil),                         // 60: imbotgateway.ReqGetChannels
	(*ReplyGetChannels)(nil),                       // 61: imbotgateway.ReplyGetChannels
	(*ReqDeleteChatUser)(nil),                      // 62: imbotgateway.ReqDeleteChatUser
	(*ReplyDeleteChatUser)(nil),                    // 63: imbotgateway.ReplyDeleteChatUser
	(*ChannelInactiveUser)(nil),                    // 64: imbotgateway.ChannelInactiveUser
	(*GetChannelInactiveUsersReq)(nil),             // 65: imbotgateway.GetChannelInactiveUsersReq
	(*GetChannelInactiveUsersResult)(nil),          // 66: imbotgateway.GetChannelInactiveUsersResult
	(*ReqBotInlineCall)(nil),                       // 67: imbotgateway.ReqBotInlineCall
	(*ReplyBotInlineCall)(nil),                     // 68: imbotgateway.ReplyBotInlineCall
	(*InlineCall)(nil),                             // 69: imbotgateway.InlineCall
	(*ReqSendUserMsg)(nil),                         // 70: imbotgateway.ReqSendUserMsg
	(*ReplyBool)(nil),                              // 71: imbotgateway.ReplyBool
	(*ReqBotCall)(nil),                             // 72: imbotgateway.ReqBotCall
	(*ReplyBotCall)(nil),                           // 73: imbotgateway.ReplyBotCall
	(*ReqGetMessageByUserIdUuid)(nil),              // 74: imbotgateway.ReqGetMessageByUserIdUuid
	(*ReplyGetMessageByUserIdUuid)(nil),            // 75: imbotgateway.ReplyGetMessageByUserIdUuid
	(*ReqGetChannelMessageByChannelIdMsgId)(nil),   // 76: imbotgateway.ReqGetChannelMessageByChannelIdMsgId
	(*ReplyGetChannelMessageByChannelIdMsgId)(nil), // 77: imbotgateway.ReplyGetChannelMessageByChannelIdMsgId
	(*ReqGetMessageByUserIdMsgId)(nil),             // 78: imbotgateway.ReqGetMessageByUserIdMsgId
	(*ReplyGetMessageByUserIdMsgId)(nil),           // 79: imbotgateway.ReplyGetMessageByUserIdMsgId
	(*MsgFileDescReq)(nil),                         // 80: imbotgateway.MsgFileDescReq
	(*MsgFileDescResp)(nil),                        // 81: imbotgateway.MsgFileDescResp
	(*MsgServiceLimitReq)(nil),                     // 82: imbotgateway.MsgServiceLimitReq
	(*MsgServiceLimitResp)(nil),                    // 83: imbotgateway.MsgServiceLimitResp
	(*MsgGetFidReq)(nil),                           // 84: imbotgateway.MsgGetFidReq
	(*MsgGetFidResp)(nil),                          // 85: imbotgateway.MsgGetFidResp
	(*MsgFilePartsReq)(nil),                        // 86: imbotgateway.MsgFilePartsReq
	(*MsgFilePartsResp)(nil),                       // 87: imbotgateway.MsgFilePartsResp
	(*MsgUploadFileReq)(nil),                       // 88: imbotgateway.MsgUploadFileReq
	(*UploadReqPara1)(nil),                         // 89: imbotgateway.UploadReqPara1
	(*UploadReqPara2)(nil),                         // 90: imbotgateway.UploadReqPara2
	(*FileUploadRespPara)(nil),                     // 91: imbotgateway.FileUploadRespPara
	(*MsgUploadFileResp)(nil),                      // 92: imbotgateway.MsgUploadFileResp
	(*MsgDownloadFileReq)(nil),                     // 93: imbotgateway.MsgDownloadFileReq
	(*DownloadFileRespPara1)(nil),                  // 94: imbotgateway.DownloadFileRespPara1
	(*DownloadFileRespPara2)(nil),                  // 95: imbotgateway.DownloadFileRespPara2
	(*MsgDownloadFileResp)(nil),                    // 96: imbotgateway.MsgDownloadFileResp
	(*MsgQueryObjInfoReq)(nil),                     // 97: imbotgateway.MsgQueryObjInfoReq
	(*QueryObjInfoRespPara)(nil),                   // 98: imbotgateway.QueryObjInfoRespPara
	(*MsgQueryObjInfoResp)(nil),                    // 99: imbotgateway.MsgQueryObjInfoResp
	(*MsgGetFileDescReq)(nil),                      // 100: imbotgateway.MsgGetFileDescReq
	(*MsgGetFileDescResp)(nil),                     // 101: imbotgateway.MsgGetFileDescResp
	(*GetChannelInfoReq)(nil),                      // 102: imbotgateway.GetChannelInfoReq
	(*GetChannelInfoResp)(nil),                     // 103: imbotgateway.GetChannelInfoResp
	(*ReqGetAdminGroups)(nil),                      // 104: imbotgateway.ReqGetAdminGroups
	(*ReqGetGroups)(nil),                           // 105: imbotgateway.ReqGetGroups
	(*Peer)(nil),                                   // 106: imbotgateway.Peer
	(*ReplyGetGroups)(nil),                         // 107: imbotgateway.ReplyGetGroups
	(*ReqDeleteMessage)(nil),                       // 108: imbotgateway.ReqDeleteMessage
	(*ReqSendChatAction)(nil),                      // 109: imbotgateway.ReqSendChatAction
	(*ReqData)(nil),                                // 110: imbotgateway.ReqData
	(*ReplyData)(nil),                              // 111: imbotgateway.ReplyData
	(*ReqGetChatMembersCount)(nil),                 // 112: imbotgateway.ReqGetChatMembersCount
	(*ReplyGetChatMembersCount)(nil),               // 113: imbotgateway.ReplyGetChatMembersCount
	(*GetChatInfoReq)(nil),                         // 114: imbotgateway.GetChatInfoReq
	(*GetUsersChatsReq)(nil),                       // 115: imbotgateway.GetUsersChatsReq
	(*GetUsersChatsResult)(nil),                    // 116: imbotgateway.GetUsersChatsResult
	(*GetUserInfoByIdReq)(nil),                     // 117: imbotgateway.GetUserInfoByIdReq
	(*GetUserInfoByIdArrReq)(nil),                  // 118: imbotgateway.GetUserInfoByIdArrReq
	(*UpdateUserProfileReq)(nil),                   // 119: imbotgateway.UpdateUserProfileReq
	(*UpdateUserProfileResult)(nil),                // 120: imbotgateway.UpdateUserProfileResult
	(*GetUserByphone)(nil),                         // 121: imbotgateway.GetUserByphone
	(*GetUserInfoResult)(nil),                      // 122: imbotgateway.GetUserInfoResult
	(*UpdateBotInfoSuppReq)(nil),                   // 123: imbotgateway.UpdateBotInfoSuppReq
	(*UpdateBotInfoSuppResult)(nil),                // 124: imbotgateway.UpdateBotInfoSuppResult
	(*BotUpdateInfo)(nil),                          // 125: imbotgateway.BotUpdateInfo
	(*BotUpdateInfoResult)(nil),                    // 126: imbotgateway.BotUpdateInfoResult
	(*UpdateBotPicRequest)(nil),                    // 127: imbotgateway.UpdateBotPicRequest
	(*UpdateBotPicResult)(nil),                     // 128: imbotgateway.UpdateBotPicResult
	(*UpdateuserNameReq)(nil),                      // 129: imbotgateway.UpdateuserNameReq
	(*UpdateuserNameResult)(nil),                   // 130: imbotgateway.UpdateuserNameResult
	(*RegisterUserInfoReq)(nil),                    // 131: imbotgateway.RegisterUserInfoReq
	(*RegisterUserInfoResult)(nil),                 // 132: imbotgateway.RegisterUserInfoResult
	(*DeleteAccountByIdReq)(nil),                   // 133: imbotgateway.DeleteAccountByIdReq
	(*DelAccountResult)(nil),                       // 134: imbotgateway.DelAccountResult
	(*SignUpReq)(nil),                              // 135: imbotgateway.SignUpReq
	(*AuthSignUpResult)(nil),                       // 136: imbotgateway.AuthSignUpResult
	(*GetFullUserReq)(nil),                         // 137: imbotgateway.GetFullUserReq
	(*GetFullUserResult)(nil),                      // 138: imbotgateway.GetFullUserResult
	(*GetUserByUsername)(nil),                      // 139: imbotgateway.GetUserByUsername
	(*ReqGetFullChat)(nil),                         // 140: imbotgateway.ReqGetFullChat
	(*ReplyGetFullChat)(nil),                       // 141: imbotgateway.ReplyGetFullChat
	(*ReqLeaveChannel)(nil),                        // 142: imbotgateway.ReqLeaveChannel
	(*ReplyLeaveChannel)(nil),                      // 143: imbotgateway.ReplyLeaveChannel
	(*ReqSendMedia)(nil),                           // 144: imbotgateway.ReqSendMedia
	(*ReplyResult)(nil),                            // 145: imbotgateway.ReplyResult
	(*ReqEditChatTitle)(nil),                       // 146: imbotgateway.ReqEditChatTitle
	(*ReplyEditChatTitle)(nil),                     // 147: imbotgateway.ReplyEditChatTitle
	(*GetStickerSetPackDcInfosReq)(nil),            // 148: imbotgateway.GetStickerSetPackDcInfosReq
	(*GetStickerSetPackDcInfosResult)(nil),         // 149: imbotgateway.GetStickerSetPackDcInfosResult
	(*StickerPackDocumentBase)(nil),                // 150: imbotgateway.StickerPackDocumentBase
	(*StickerPackDocumentInfo)(nil),                // 151: imbotgateway.StickerPackDocumentInfo
	(*Debug)(nil),                                  // 152: imbotgateway.Debug
	(ReErrCode)(0),                                 // 153: imbotgateway.ReErrCode
	(*UserMsg)(nil),                                // 154: imbotgateway.UserMsg
	(ERpcResultCode)(0),                            // 155: imbotgateway.ERpcResultCode
	(*FidPara)(nil),                                // 156: imbotgateway.FidPara
	(*ChannelInfoBase)(nil),                        // 157: imbotgateway.ChannelInfoBase
	(ChatResultCode)(0),                            // 158: imbotgateway.ChatResultCode
	(*UserInfoArray)(nil),                          // 159: imbotgateway.UserInfoArray
	(*UserInfo)(nil),                               // 160: imbotgateway.userInfo
	(*GetChatInfoResp)(nil),                        // 161: imbotgateway.GetChatInfoResp
}
var file_imbotgateway_proto_depIdxs = []int32{
	152, // 0: imbotgateway.ReqGetFullChannel.debug:type_name -> imbotgateway.Debug
	152, // 1: imbotgateway.ReqGetParticipants.debug:type_name -> imbotgateway.Debug
	152, // 2: imbotgateway.ReqUpdatePinnedChannelMessage.debug:type_name -> imbotgateway.Debug
	152, // 3: imbotgateway.ReqEditChannelAbout.debug:type_name -> imbotgateway.Debug
	152, // 4: imbotgateway.ReqEditChannelTitle.debug:type_name -> imbotgateway.Debug
	11,  // 5: imbotgateway.ReqDelManualBlockList.UnBlockUser:type_name -> imbotgateway.BlockUser
	152, // 6: imbotgateway.ReqDelManualBlockList.debug:type_name -> imbotgateway.Debug
	11,  // 7: imbotgateway.ReqSetManualBlockList.BlockUser:type_name -> imbotgateway.BlockUser
	152, // 8: imbotgateway.ReqSetManualBlockList.debug:type_name -> imbotgateway.Debug
	152, // 9: imbotgateway.StoreShopStickerSetDocumentsReq.debug:type_name -> imbotgateway.Debug
	153, // 10: imbotgateway.StoreShopStickerSetDocumentsResult.Errorcode:type_name -> imbotgateway.ReErrCode
	153, // 11: imbotgateway.GetAuthorAllStickerSetResult.ErrorCode:type_name -> imbotgateway.ReErrCode
	15,  // 12: imbotgateway.GetAuthorAllStickerSetResult.sets:type_name -> imbotgateway.AuthorStickerSet
	153, // 13: imbotgateway.DeleteStickerPackDocumentResult.Errorcode:type_name -> imbotgateway.ReErrCode
	152, // 14: imbotgateway.GetStickerSetInfoReq.debug:type_name -> imbotgateway.Debug
	21,  // 15: imbotgateway.GetStickerSetInfoResult.stickerSetInfo:type_name -> imbotgateway.StickerSetInfo
	153, // 16: imbotgateway.GetStickerSetInfoResult.Errorcode:type_name -> imbotgateway.ReErrCode
	152, // 17: imbotgateway.DeleteStickerSetReq.debug:type_name -> imbotgateway.Debug
	153, // 18: imbotgateway.DeleteStickerSetResult.Errorcode:type_name -> imbotgateway.ReErrCode
	152, // 19: imbotgateway.StoreUserStickerSetReq.debug:type_name -> imbotgateway.Debug
	153, // 20: imbotgateway.StoreUserStickerSetResult.Errorcode:type_name -> imbotgateway.ReErrCode
	150, // 21: imbotgateway.StoreStickerPackDcReq.stickpackbase:type_name -> imbotgateway.StickerPackDocumentBase
	152, // 22: imbotgateway.StoreStickerPackDcReq.debug:type_name -> imbotgateway.Debug
	153, // 23: imbotgateway.StoreStickerPackDcResult.Errorcode:type_name -> imbotgateway.ReErrCode
	152, // 24: imbotgateway.StoreShopStickerSetReq.debug:type_name -> imbotgateway.Debug
	153, // 25: imbotgateway.StoreShopStickerSetResult.Errorcode:type_name -> imbotgateway.ReErrCode
	1,   // 26: imbotgateway.ResizeReply.status:type_name -> imbotgateway.StatusCode
	1,   // 27: imbotgateway.ConstraintReply.status:type_name -> imbotgateway.StatusCode
	1,   // 28: imbotgateway.CompressImageReply.status:type_name -> imbotgateway.StatusCode
	1,   // 29: imbotgateway.VideoPreviewReply.status:type_name -> imbotgateway.StatusCode
	1,   // 30: imbotgateway.AudioPreviewReply.status:type_name -> imbotgateway.StatusCode
	152, // 31: imbotgateway.ReqParticipants.debug:type_name -> imbotgateway.Debug
	152, // 32: imbotgateway.ReqCreateChat.debug:type_name -> imbotgateway.Debug
	152, // 33: imbotgateway.ReqMigrateChat.debug:type_name -> imbotgateway.Debug
	152, // 34: imbotgateway.ReqJoinChannel.debug:type_name -> imbotgateway.Debug
	152, // 35: imbotgateway.ReqBotCallMessageMedia.debug:type_name -> imbotgateway.Debug
	152, // 36: imbotgateway.RequestDialog.debug:type_name -> imbotgateway.Debug
	54,  // 37: imbotgateway.ReqSetGameScore.scores:type_name -> imbotgateway.UserScore
	152, // 38: imbotgateway.ReqSetGameScore.debug:type_name -> imbotgateway.Debug
	59,  // 39: imbotgateway.ReqBanChannelUser.channelBannedRights:type_name -> imbotgateway.ChannelBannedRights
	152, // 40: imbotgateway.ReqBanChannelUser.debug:type_name -> imbotgateway.Debug
	152, // 41: imbotgateway.ReqGetChannels.debug:type_name -> imbotgateway.Debug
	152, // 42: imbotgateway.ReqDeleteChatUser.debug:type_name -> imbotgateway.Debug
	64,  // 43: imbotgateway.GetChannelInactiveUsersResult.users:type_name -> imbotgateway.ChannelInactiveUser
	152, // 44: imbotgateway.ReqBotInlineCall.debug:type_name -> imbotgateway.Debug
	69,  // 45: imbotgateway.ReplyBotInlineCall.inlinecall:type_name -> imbotgateway.InlineCall
	152, // 46: imbotgateway.ReqSendUserMsg.debug:type_name -> imbotgateway.Debug
	152, // 47: imbotgateway.ReqBotCall.debug:type_name -> imbotgateway.Debug
	152, // 48: imbotgateway.ReqGetMessageByUserIdUuid.debug:type_name -> imbotgateway.Debug
	154, // 49: imbotgateway.ReplyGetMessageByUserIdUuid.UserMessage:type_name -> imbotgateway.UserMsg
	152, // 50: imbotgateway.ReqGetChannelMessageByChannelIdMsgId.debug:type_name -> imbotgateway.Debug
	154, // 51: imbotgateway.ReplyGetChannelMessageByChannelIdMsgId.UserMessage:type_name -> imbotgateway.UserMsg
	152, // 52: imbotgateway.ReqGetMessageByUserIdMsgId.debug:type_name -> imbotgateway.Debug
	154, // 53: imbotgateway.ReplyGetMessageByUserIdMsgId.UserMessage:type_name -> imbotgateway.UserMsg
	155, // 54: imbotgateway.MsgFileDescResp.result:type_name -> imbotgateway.ERpcResultCode
	155, // 55: imbotgateway.MsgGetFidResp.result:type_name -> imbotgateway.ERpcResultCode
	155, // 56: imbotgateway.MsgFilePartsResp.result:type_name -> imbotgateway.ERpcResultCode
	89,  // 57: imbotgateway.MsgUploadFileReq.para1:type_name -> imbotgateway.UploadReqPara1
	90,  // 58: imbotgateway.MsgUploadFileReq.para2:type_name -> imbotgateway.UploadReqPara2
	155, // 59: imbotgateway.MsgUploadFileResp.result:type_name -> imbotgateway.ERpcResultCode
	91,  // 60: imbotgateway.MsgUploadFileResp.para1:type_name -> imbotgateway.FileUploadRespPara
	156, // 61: imbotgateway.MsgUploadFileResp.para2:type_name -> imbotgateway.FidPara
	155, // 62: imbotgateway.MsgDownloadFileResp.result:type_name -> imbotgateway.ERpcResultCode
	94,  // 63: imbotgateway.MsgDownloadFileResp.para1:type_name -> imbotgateway.DownloadFileRespPara1
	95,  // 64: imbotgateway.MsgDownloadFileResp.para2:type_name -> imbotgateway.DownloadFileRespPara2
	98,  // 65: imbotgateway.MsgQueryObjInfoResp.para:type_name -> imbotgateway.QueryObjInfoRespPara
	155, // 66: imbotgateway.MsgQueryObjInfoResp.result:type_name -> imbotgateway.ERpcResultCode
	155, // 67: imbotgateway.MsgGetFileDescResp.result:type_name -> imbotgateway.ERpcResultCode
	152, // 68: imbotgateway.GetChannelInfoReq.Dlog:type_name -> imbotgateway.Debug
	157, // 69: imbotgateway.GetChannelInfoResp.baseInfo:type_name -> imbotgateway.ChannelInfoBase
	158, // 70: imbotgateway.GetChannelInfoResp.resultcode:type_name -> imbotgateway.ChatResultCode
	152, // 71: imbotgateway.ReqGetAdminGroups.debug:type_name -> imbotgateway.Debug
	106, // 72: imbotgateway.ReplyGetGroups.Groups:type_name -> imbotgateway.Peer
	106, // 73: imbotgateway.ReplyGetGroups.SuperGroups:type_name -> imbotgateway.Peer
	106, // 74: imbotgateway.ReplyGetGroups.Channels:type_name -> imbotgateway.Peer
	0,   // 75: imbotgateway.ReqDeleteMessage.ChatType:type_name -> imbotgateway.ChatType
	152, // 76: imbotgateway.ReqDeleteMessage.debug:type_name -> imbotgateway.Debug
	0,   // 77: imbotgateway.ReqSendChatAction.ChatType:type_name -> imbotgateway.ChatType
	152, // 78: imbotgateway.ReqSendChatAction.debug:type_name -> imbotgateway.Debug
	0,   // 79: imbotgateway.ReqData.ChatType:type_name -> imbotgateway.ChatType
	0,   // 80: imbotgateway.ReqGetChatMembersCount.ChatType:type_name -> imbotgateway.ChatType
	152, // 81: imbotgateway.ReqGetChatMembersCount.debug:type_name -> imbotgateway.Debug
	152, // 82: imbotgateway.GetChatInfoReq.Dlog:type_name -> imbotgateway.Debug
	152, // 83: imbotgateway.GetUsersChatsReq.Dlog:type_name -> imbotgateway.Debug
	159, // 84: imbotgateway.GetUsersChatsResult.users:type_name -> imbotgateway.UserInfoArray
	158, // 85: imbotgateway.GetUsersChatsResult.resultcode:type_name -> imbotgateway.ChatResultCode
	152, // 86: imbotgateway.GetUserInfoByIdReq.debug:type_name -> imbotgateway.Debug
	152, // 87: imbotgateway.GetUserInfoByIdArrReq.debug:type_name -> imbotgateway.Debug
	152, // 88: imbotgateway.UpdateUserProfileReq.debug:type_name -> imbotgateway.Debug
	160, // 89: imbotgateway.UpdateUserProfileResult.Uinfo:type_name -> imbotgateway.userInfo
	153, // 90: imbotgateway.UpdateUserProfileResult.Errorcode:type_name -> imbotgateway.ReErrCode
	152, // 91: imbotgateway.GetUserByphone.debug:type_name -> imbotgateway.Debug
	160, // 92: imbotgateway.GetUserInfoResult.Uinfo:type_name -> imbotgateway.userInfo
	153, // 93: imbotgateway.GetUserInfoResult.Errorcode:type_name -> imbotgateway.ReErrCode
	152, // 94: imbotgateway.UpdateBotInfoSuppReq.debug:type_name -> imbotgateway.Debug
	153, // 95: imbotgateway.UpdateBotInfoSuppResult.Errorcode:type_name -> imbotgateway.ReErrCode
	152, // 96: imbotgateway.BotUpdateInfo.debug:type_name -> imbotgateway.Debug
	153, // 97: imbotgateway.BotUpdateInfoResult.Errorcode:type_name -> imbotgateway.ReErrCode
	152, // 98: imbotgateway.UpdateBotPicRequest.debug:type_name -> imbotgateway.Debug
	153, // 99: imbotgateway.UpdateBotPicResult.Errorcode:type_name -> imbotgateway.ReErrCode
	152, // 100: imbotgateway.UpdateuserNameReq.debug:type_name -> imbotgateway.Debug
	160, // 101: imbotgateway.UpdateuserNameResult.Uinfo:type_name -> imbotgateway.userInfo
	153, // 102: imbotgateway.UpdateuserNameResult.Errorcode:type_name -> imbotgateway.ReErrCode
	152, // 103: imbotgateway.RegisterUserInfoReq.debug:type_name -> imbotgateway.Debug
	160, // 104: imbotgateway.RegisterUserInfoResult.uinfo:type_name -> imbotgateway.userInfo
	153, // 105: imbotgateway.RegisterUserInfoResult.Errorcode:type_name -> imbotgateway.ReErrCode
	152, // 106: imbotgateway.DeleteAccountByIdReq.debug:type_name -> imbotgateway.Debug
	153, // 107: imbotgateway.DelAccountResult.Errorcode:type_name -> imbotgateway.ReErrCode
	152, // 108: imbotgateway.SignUpReq.debug:type_name -> imbotgateway.Debug
	2,   // 109: imbotgateway.AuthSignUpResult.code:type_name -> imbotgateway.AuthSignUpResult.ResultCode
	160, // 110: imbotgateway.AuthSignUpResult.userInfo:type_name -> imbotgateway.userInfo
	152, // 111: imbotgateway.GetFullUserReq.debug:type_name -> imbotgateway.Debug
	160, // 112: imbotgateway.GetFullUserResult.uinfo:type_name -> imbotgateway.userInfo
	153, // 113: imbotgateway.GetFullUserResult.Errorcode:type_name -> imbotgateway.ReErrCode
	152, // 114: imbotgateway.GetUserByUsername.debug:type_name -> imbotgateway.Debug
	152, // 115: imbotgateway.ReqGetFullChat.debug:type_name -> imbotgateway.Debug
	152, // 116: imbotgateway.ReqLeaveChannel.debug:type_name -> imbotgateway.Debug
	152, // 117: imbotgateway.ReqSendMedia.debug:type_name -> imbotgateway.Debug
	152, // 118: imbotgateway.ReqEditChatTitle.debug:type_name -> imbotgateway.Debug
	152, // 119: imbotgateway.GetStickerSetPackDcInfosReq.debug:type_name -> imbotgateway.Debug
	151, // 120: imbotgateway.GetStickerSetPackDcInfosResult.StPDcInfo:type_name -> imbotgateway.StickerPackDocumentInfo
	150, // 121: imbotgateway.StickerPackDocumentInfo.infoBase:type_name -> imbotgateway.StickerPackDocumentBase
	135, // 122: imbotgateway.BotgatewayService.AuthSignUp:input_type -> imbotgateway.SignUpReq
	137, // 123: imbotgateway.BotgatewayService.GetFullUser:input_type -> imbotgateway.GetFullUserReq
	133, // 124: imbotgateway.BotgatewayService.DeleteUserInfoById:input_type -> imbotgateway.DeleteAccountByIdReq
	129, // 125: imbotgateway.BotgatewayService.UpdateUserName:input_type -> imbotgateway.UpdateuserNameReq
	131, // 126: imbotgateway.BotgatewayService.RegisterUserInfo:input_type -> imbotgateway.RegisterUserInfoReq
	127, // 127: imbotgateway.BotgatewayService.UpdateBotPic:input_type -> imbotgateway.UpdateBotPicRequest
	125, // 128: imbotgateway.BotgatewayService.UpdateBotInfo:input_type -> imbotgateway.BotUpdateInfo
	123, // 129: imbotgateway.BotgatewayService.UpdateBotInfoSupp:input_type -> imbotgateway.UpdateBotInfoSuppReq
	121, // 130: imbotgateway.BotgatewayService.GetUserInfoByPhone:input_type -> imbotgateway.GetUserByphone
	119, // 131: imbotgateway.BotgatewayService.UpdateUserProfile:input_type -> imbotgateway.UpdateUserProfileReq
	117, // 132: imbotgateway.BotgatewayService.GetUserInfoById:input_type -> imbotgateway.GetUserInfoByIdReq
	139, // 133: imbotgateway.BotgatewayService.GetUserInfoByUsername:input_type -> imbotgateway.GetUserByUsername
	148, // 134: imbotgateway.BotgatewayService.GetStickerSetPackDcInfos:input_type -> imbotgateway.GetStickerSetPackDcInfosReq
	29,  // 135: imbotgateway.BotgatewayService.StoreStickerSet:input_type -> imbotgateway.StoreShopStickerSetReq
	27,  // 136: imbotgateway.BotgatewayService.StoreStickerPackDc:input_type -> imbotgateway.StoreStickerPackDcReq
	25,  // 137: imbotgateway.BotgatewayService.StoreUserStickerSet:input_type -> imbotgateway.StoreUserStickerSetReq
	23,  // 138: imbotgateway.BotgatewayService.DeleteShopStickerSet:input_type -> imbotgateway.DeleteStickerSetReq
	20,  // 139: imbotgateway.BotgatewayService.GetStickerSetInfo:input_type -> imbotgateway.GetStickerSetInfoReq
	18,  // 140: imbotgateway.BotgatewayService.DeleteStickerPackDocument:input_type -> imbotgateway.DeleteStickerPackDocumentReq
	16,  // 141: imbotgateway.BotgatewayService.GetAuthorAllStickerSet:input_type -> imbotgateway.GetAuthorAllStickerSetReq
	13,  // 142: imbotgateway.BotgatewayService.StoreStickerSetDocument:input_type -> imbotgateway.StoreShopStickerSetDocumentsReq
	115, // 143: imbotgateway.BotgatewayService.GetUsersChats:input_type -> imbotgateway.GetUsersChatsReq
	114, // 144: imbotgateway.BotgatewayService.GetChatInfo:input_type -> imbotgateway.GetChatInfoReq
	110, // 145: imbotgateway.BotgatewayService.LeaveChat:input_type -> imbotgateway.ReqData
	110, // 146: imbotgateway.BotgatewayService.GetChat:input_type -> imbotgateway.ReqData
	112, // 147: imbotgateway.BotgatewayService.GetChatMembersCount:input_type -> imbotgateway.ReqGetChatMembersCount
	110, // 148: imbotgateway.BotgatewayService.GetChatAdministrators:input_type -> imbotgateway.ReqData
	110, // 149: imbotgateway.BotgatewayService.SetChatTitle:input_type -> imbotgateway.ReqData
	110, // 150: imbotgateway.BotgatewayService.SetChatDescription:input_type -> imbotgateway.ReqData
	110, // 151: imbotgateway.BotgatewayService.UpdatePinnedChannelMessage:input_type -> imbotgateway.ReqData
	109, // 152: imbotgateway.BotgatewayService.SendChatAction:input_type -> imbotgateway.ReqSendChatAction
	110, // 153: imbotgateway.BotgatewayService.SendContact:input_type -> imbotgateway.ReqData
	108, // 154: imbotgateway.BotgatewayService.DeleteMessage:input_type -> imbotgateway.ReqDeleteMessage
	105, // 155: imbotgateway.BotgatewayService.GetGroups:input_type -> imbotgateway.ReqGetGroups
	104, // 156: imbotgateway.BotgatewayService.GetAdminGroups:input_type -> imbotgateway.ReqGetAdminGroups
	10,  // 157: imbotgateway.BotgatewayService.SetManualBlockList:input_type -> imbotgateway.ReqSetManualBlockList
	9,   // 158: imbotgateway.BotgatewayService.DelManualBlockList:input_type -> imbotgateway.ReqDelManualBlockList
	110, // 159: imbotgateway.BotgatewayService.LeaveGroup:input_type -> imbotgateway.ReqData
	102, // 160: imbotgateway.BotgatewayService.GetChannelInfo:input_type -> imbotgateway.GetChannelInfoReq
	100, // 161: imbotgateway.BotgatewayService.GatewayGetFileDesc:input_type -> imbotgateway.MsgGetFileDescReq
	97,  // 162: imbotgateway.BotgatewayService.QueryObjInfo:input_type -> imbotgateway.MsgQueryObjInfoReq
	93,  // 163: imbotgateway.BotgatewayService.DownloadFile:input_type -> imbotgateway.MsgDownloadFileReq
	88,  // 164: imbotgateway.BotgatewayService.UploadFile:input_type -> imbotgateway.MsgUploadFileReq
	86,  // 165: imbotgateway.BotgatewayService.GatewayUploadFile:input_type -> imbotgateway.MsgFilePartsReq
	80,  // 166: imbotgateway.BotgatewayService.GatewayUploadFileDesc:input_type -> imbotgateway.MsgFileDescReq
	84,  // 167: imbotgateway.BotgatewayService.GatewayGetUploadFileFid:input_type -> imbotgateway.MsgGetFidReq
	82,  // 168: imbotgateway.BotgatewayService.ServiceLimit:input_type -> imbotgateway.MsgServiceLimitReq
	72,  // 169: imbotgateway.BotgatewayService.BotCall:input_type -> imbotgateway.ReqBotCall
	78,  // 170: imbotgateway.BotgatewayService.GetMessageByUserIdMsgId:input_type -> imbotgateway.ReqGetMessageByUserIdMsgId
	76,  // 171: imbotgateway.BotgatewayService.GetChannelMessageByChannelIdMsgId:input_type -> imbotgateway.ReqGetChannelMessageByChannelIdMsgId
	74,  // 172: imbotgateway.BotgatewayService.GetMessageByUserIdUuid:input_type -> imbotgateway.ReqGetMessageByUserIdUuid
	51,  // 173: imbotgateway.BotgatewayService.BotCallMessageMedia:input_type -> imbotgateway.ReqBotCallMessageMedia
	70,  // 174: imbotgateway.BotgatewayService.SendUserMsg:input_type -> imbotgateway.ReqSendUserMsg
	67,  // 175: imbotgateway.BotgatewayService.BotInlineCall:input_type -> imbotgateway.ReqBotInlineCall
	65,  // 176: imbotgateway.BotgatewayService.GetChannelInactiveUsers:input_type -> imbotgateway.GetChannelInactiveUsersReq
	62,  // 177: imbotgateway.BotgatewayService.DeleteChatUser:input_type -> imbotgateway.ReqDeleteChatUser
	60,  // 178: imbotgateway.BotgatewayService.Getchannels:input_type -> imbotgateway.ReqGetChannels
	58,  // 179: imbotgateway.BotgatewayService.EditBanChannelUser:input_type -> imbotgateway.ReqBanChannelUser
	55,  // 180: imbotgateway.BotgatewayService.SetGameScore:input_type -> imbotgateway.ReqSetGameScore
	52,  // 181: imbotgateway.BotgatewayService.GetDialog:input_type -> imbotgateway.RequestDialog
	49,  // 182: imbotgateway.BotgatewayService.ChangeGroupAndChannelCrator:input_type -> imbotgateway.ReqChangeGroupAndChannelCrator
	47,  // 183: imbotgateway.BotgatewayService.JoinChannel:input_type -> imbotgateway.ReqJoinChannel
	41,  // 184: imbotgateway.BotgatewayService.GetParticipants:input_type -> imbotgateway.ReqParticipants
	45,  // 185: imbotgateway.BotgatewayService.MigrateChat:input_type -> imbotgateway.ReqMigrateChat
	43,  // 186: imbotgateway.BotgatewayService.CreateChat:input_type -> imbotgateway.ReqCreateChat
	140, // 187: imbotgateway.BotgatewayService.GetFullChat:input_type -> imbotgateway.ReqGetFullChat
	142, // 188: imbotgateway.BotgatewayService.LeaveChannel:input_type -> imbotgateway.ReqLeaveChannel
	144, // 189: imbotgateway.BotgatewayService.SendMedia:input_type -> imbotgateway.ReqSendMedia
	146, // 190: imbotgateway.BotgatewayService.EditChatTitle:input_type -> imbotgateway.ReqEditChatTitle
	31,  // 191: imbotgateway.BotgatewayService.Resize:input_type -> imbotgateway.ResizeRequest
	33,  // 192: imbotgateway.BotgatewayService.Constraint:input_type -> imbotgateway.ConstraintRequest
	35,  // 193: imbotgateway.BotgatewayService.CompressImage:input_type -> imbotgateway.CompressImageRequest
	37,  // 194: imbotgateway.BotgatewayService.GetVideoPreview:input_type -> imbotgateway.VideoPreviewRequest
	39,  // 195: imbotgateway.BotgatewayService.GetAudioPreview:input_type -> imbotgateway.AudioPreviewRequest
	136, // 196: imbotgateway.BotgatewayService.AuthSignUp:output_type -> imbotgateway.AuthSignUpResult
	138, // 197: imbotgateway.BotgatewayService.GetFullUser:output_type -> imbotgateway.GetFullUserResult
	134, // 198: imbotgateway.BotgatewayService.DeleteUserInfoById:output_type -> imbotgateway.DelAccountResult
	130, // 199: imbotgateway.BotgatewayService.UpdateUserName:output_type -> imbotgateway.UpdateuserNameResult
	132, // 200: imbotgateway.BotgatewayService.RegisterUserInfo:output_type -> imbotgateway.RegisterUserInfoResult
	128, // 201: imbotgateway.BotgatewayService.UpdateBotPic:output_type -> imbotgateway.UpdateBotPicResult
	126, // 202: imbotgateway.BotgatewayService.UpdateBotInfo:output_type -> imbotgateway.BotUpdateInfoResult
	124, // 203: imbotgateway.BotgatewayService.UpdateBotInfoSupp:output_type -> imbotgateway.UpdateBotInfoSuppResult
	122, // 204: imbotgateway.BotgatewayService.GetUserInfoByPhone:output_type -> imbotgateway.GetUserInfoResult
	120, // 205: imbotgateway.BotgatewayService.UpdateUserProfile:output_type -> imbotgateway.UpdateUserProfileResult
	122, // 206: imbotgateway.BotgatewayService.GetUserInfoById:output_type -> imbotgateway.GetUserInfoResult
	122, // 207: imbotgateway.BotgatewayService.GetUserInfoByUsername:output_type -> imbotgateway.GetUserInfoResult
	149, // 208: imbotgateway.BotgatewayService.GetStickerSetPackDcInfos:output_type -> imbotgateway.GetStickerSetPackDcInfosResult
	30,  // 209: imbotgateway.BotgatewayService.StoreStickerSet:output_type -> imbotgateway.StoreShopStickerSetResult
	28,  // 210: imbotgateway.BotgatewayService.StoreStickerPackDc:output_type -> imbotgateway.StoreStickerPackDcResult
	26,  // 211: imbotgateway.BotgatewayService.StoreUserStickerSet:output_type -> imbotgateway.StoreUserStickerSetResult
	24,  // 212: imbotgateway.BotgatewayService.DeleteShopStickerSet:output_type -> imbotgateway.DeleteStickerSetResult
	21,  // 213: imbotgateway.BotgatewayService.GetStickerSetInfo:output_type -> imbotgateway.StickerSetInfo
	19,  // 214: imbotgateway.BotgatewayService.DeleteStickerPackDocument:output_type -> imbotgateway.DeleteStickerPackDocumentResult
	17,  // 215: imbotgateway.BotgatewayService.GetAuthorAllStickerSet:output_type -> imbotgateway.GetAuthorAllStickerSetResult
	14,  // 216: imbotgateway.BotgatewayService.StoreStickerSetDocument:output_type -> imbotgateway.StoreShopStickerSetDocumentsResult
	116, // 217: imbotgateway.BotgatewayService.GetUsersChats:output_type -> imbotgateway.GetUsersChatsResult
	161, // 218: imbotgateway.BotgatewayService.GetChatInfo:output_type -> imbotgateway.GetChatInfoResp
	111, // 219: imbotgateway.BotgatewayService.LeaveChat:output_type -> imbotgateway.ReplyData
	111, // 220: imbotgateway.BotgatewayService.GetChat:output_type -> imbotgateway.ReplyData
	113, // 221: imbotgateway.BotgatewayService.GetChatMembersCount:output_type -> imbotgateway.ReplyGetChatMembersCount
	111, // 222: imbotgateway.BotgatewayService.GetChatAdministrators:output_type -> imbotgateway.ReplyData
	111, // 223: imbotgateway.BotgatewayService.SetChatTitle:output_type -> imbotgateway.ReplyData
	111, // 224: imbotgateway.BotgatewayService.SetChatDescription:output_type -> imbotgateway.ReplyData
	111, // 225: imbotgateway.BotgatewayService.UpdatePinnedChannelMessage:output_type -> imbotgateway.ReplyData
	111, // 226: imbotgateway.BotgatewayService.SendChatAction:output_type -> imbotgateway.ReplyData
	111, // 227: imbotgateway.BotgatewayService.SendContact:output_type -> imbotgateway.ReplyData
	111, // 228: imbotgateway.BotgatewayService.DeleteMessage:output_type -> imbotgateway.ReplyData
	107, // 229: imbotgateway.BotgatewayService.GetGroups:output_type -> imbotgateway.ReplyGetGroups
	107, // 230: imbotgateway.BotgatewayService.GetAdminGroups:output_type -> imbotgateway.ReplyGetGroups
	12,  // 231: imbotgateway.BotgatewayService.SetManualBlockList:output_type -> imbotgateway.ManualBlockReplyData
	12,  // 232: imbotgateway.BotgatewayService.DelManualBlockList:output_type -> imbotgateway.ManualBlockReplyData
	8,   // 233: imbotgateway.BotgatewayService.LeaveGroup:output_type -> imbotgateway.ReplyChannelData
	103, // 234: imbotgateway.BotgatewayService.GetChannelInfo:output_type -> imbotgateway.GetChannelInfoResp
	101, // 235: imbotgateway.BotgatewayService.GatewayGetFileDesc:output_type -> imbotgateway.MsgGetFileDescResp
	99,  // 236: imbotgateway.BotgatewayService.QueryObjInfo:output_type -> imbotgateway.MsgQueryObjInfoResp
	96,  // 237: imbotgateway.BotgatewayService.DownloadFile:output_type -> imbotgateway.MsgDownloadFileResp
	92,  // 238: imbotgateway.BotgatewayService.UploadFile:output_type -> imbotgateway.MsgUploadFileResp
	87,  // 239: imbotgateway.BotgatewayService.GatewayUploadFile:output_type -> imbotgateway.MsgFilePartsResp
	81,  // 240: imbotgateway.BotgatewayService.GatewayUploadFileDesc:output_type -> imbotgateway.MsgFileDescResp
	85,  // 241: imbotgateway.BotgatewayService.GatewayGetUploadFileFid:output_type -> imbotgateway.MsgGetFidResp
	83,  // 242: imbotgateway.BotgatewayService.ServiceLimit:output_type -> imbotgateway.MsgServiceLimitResp
	73,  // 243: imbotgateway.BotgatewayService.BotCall:output_type -> imbotgateway.ReplyBotCall
	79,  // 244: imbotgateway.BotgatewayService.GetMessageByUserIdMsgId:output_type -> imbotgateway.ReplyGetMessageByUserIdMsgId
	77,  // 245: imbotgateway.BotgatewayService.GetChannelMessageByChannelIdMsgId:output_type -> imbotgateway.ReplyGetChannelMessageByChannelIdMsgId
	75,  // 246: imbotgateway.BotgatewayService.GetMessageByUserIdUuid:output_type -> imbotgateway.ReplyGetMessageByUserIdUuid
	73,  // 247: imbotgateway.BotgatewayService.BotCallMessageMedia:output_type -> imbotgateway.ReplyBotCall
	71,  // 248: imbotgateway.BotgatewayService.SendUserMsg:output_type -> imbotgateway.ReplyBool
	68,  // 249: imbotgateway.BotgatewayService.BotInlineCall:output_type -> imbotgateway.ReplyBotInlineCall
	66,  // 250: imbotgateway.BotgatewayService.GetChannelInactiveUsers:output_type -> imbotgateway.GetChannelInactiveUsersResult
	63,  // 251: imbotgateway.BotgatewayService.DeleteChatUser:output_type -> imbotgateway.ReplyDeleteChatUser
	61,  // 252: imbotgateway.BotgatewayService.Getchannels:output_type -> imbotgateway.ReplyGetChannels
	57,  // 253: imbotgateway.BotgatewayService.EditBanChannelUser:output_type -> imbotgateway.ReplyBanChannelUser
	56,  // 254: imbotgateway.BotgatewayService.SetGameScore:output_type -> imbotgateway.ReplySetGameScore
	53,  // 255: imbotgateway.BotgatewayService.GetDialog:output_type -> imbotgateway.ReplyDialog
	50,  // 256: imbotgateway.BotgatewayService.ChangeGroupAndChannelCrator:output_type -> imbotgateway.ReplyChangeGroupAndChannelCrator
	48,  // 257: imbotgateway.BotgatewayService.JoinChannel:output_type -> imbotgateway.ReplyJoinChannel
	42,  // 258: imbotgateway.BotgatewayService.GetParticipants:output_type -> imbotgateway.ReplyParticipants
	46,  // 259: imbotgateway.BotgatewayService.MigrateChat:output_type -> imbotgateway.ReplyMigrateChat
	44,  // 260: imbotgateway.BotgatewayService.CreateChat:output_type -> imbotgateway.ReplyCreateChat
	141, // 261: imbotgateway.BotgatewayService.GetFullChat:output_type -> imbotgateway.ReplyGetFullChat
	143, // 262: imbotgateway.BotgatewayService.LeaveChannel:output_type -> imbotgateway.ReplyLeaveChannel
	145, // 263: imbotgateway.BotgatewayService.SendMedia:output_type -> imbotgateway.ReplyResult
	147, // 264: imbotgateway.BotgatewayService.EditChatTitle:output_type -> imbotgateway.ReplyEditChatTitle
	32,  // 265: imbotgateway.BotgatewayService.Resize:output_type -> imbotgateway.ResizeReply
	34,  // 266: imbotgateway.BotgatewayService.Constraint:output_type -> imbotgateway.ConstraintReply
	36,  // 267: imbotgateway.BotgatewayService.CompressImage:output_type -> imbotgateway.CompressImageReply
	38,  // 268: imbotgateway.BotgatewayService.GetVideoPreview:output_type -> imbotgateway.VideoPreviewReply
	40,  // 269: imbotgateway.BotgatewayService.GetAudioPreview:output_type -> imbotgateway.AudioPreviewReply
	196, // [196:270] is the sub-list for method output_type
	122, // [122:196] is the sub-list for method input_type
	122, // [122:122] is the sub-list for extension type_name
	122, // [122:122] is the sub-list for extension extendee
	0,   // [0:122] is the sub-list for field type_name
}

func init() { file_imbotgateway_proto_init() }
func file_imbotgateway_proto_init() {
	if File_imbotgateway_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_imbotgateway_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetFullChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetParticipants); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdatePinnedChannelMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqEditChannelAbout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqEditChannelTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyChannelData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDelManualBlockList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSetManualBlockList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualBlockReplyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreShopStickerSetDocumentsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreShopStickerSetDocumentsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorStickerSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuthorAllStickerSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuthorAllStickerSetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStickerPackDocumentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStickerPackDocumentResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStickerSetInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StickerSetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStickerSetInfoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStickerSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStickerSetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreUserStickerSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreUserStickerSetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreStickerPackDcReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreStickerPackDcResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreShopStickerSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreShopStickerSetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResizeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstraintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstraintReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompressImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompressImageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoPreviewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoPreviewReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioPreviewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioPreviewReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqParticipants); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyParticipants); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqCreateChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyCreateChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqMigrateChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyMigrateChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqJoinChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyJoinChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqChangeGroupAndChannelCrator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyChangeGroupAndChannelCrator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBotCallMessageMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestDialog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyDialog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSetGameScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplySetGameScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyBanChannelUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBanChannelUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelBannedRights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChannels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteChatUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyDeleteChatUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelInactiveUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelInactiveUsersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelInactiveUsersResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBotInlineCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyBotInlineCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InlineCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSendUserMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyBool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBotCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyBotCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetMessageByUserIdUuid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetMessageByUserIdUuid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannelMessageByChannelIdMsgId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChannelMessageByChannelIdMsgId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetMessageByUserIdMsgId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetMessageByUserIdMsgId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgFileDescReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgFileDescResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgServiceLimitReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgServiceLimitResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgGetFidReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgGetFidResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgFilePartsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgFilePartsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgUploadFileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadReqPara1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadReqPara2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileUploadRespPara); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgUploadFileResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgDownloadFileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadFileRespPara1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadFileRespPara2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgDownloadFileResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgQueryObjInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryObjInfoRespPara); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgQueryObjInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgGetFileDescReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgGetFileDescResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetAdminGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Peer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSendChatAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChatMembersCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChatMembersCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChatInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUsersChatsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUsersChatsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInfoByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInfoByIdArrReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserProfileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserProfileResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserByphone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInfoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBotInfoSuppReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBotInfoSuppResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BotUpdateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BotUpdateInfoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBotPicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBotPicResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateuserNameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateuserNameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterUserInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterUserInfoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAccountByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelAccountResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignUpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthSignUpResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFullUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFullUserResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserByUsername); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetFullChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetFullChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqLeaveChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyLeaveChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSendMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqEditChatTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyEditChatTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStickerSetPackDcInfosReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStickerSetPackDcInfosResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StickerPackDocumentBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imbotgateway_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StickerPackDocumentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_imbotgateway_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   149,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_imbotgateway_proto_goTypes,
		DependencyIndexes: file_imbotgateway_proto_depIdxs,
		EnumInfos:         file_imbotgateway_proto_enumTypes,
		MessageInfos:      file_imbotgateway_proto_msgTypes,
	}.Build()
	File_imbotgateway_proto = out.File
	file_imbotgateway_proto_rawDesc = nil
	file_imbotgateway_proto_goTypes = nil
	file_imbotgateway_proto_depIdxs = nil
}
