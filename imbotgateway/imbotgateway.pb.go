// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/imbotgateway/imbotgateway.proto

package imbotgateway

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ChatType 聊天类型
type ChatType int32

const (
	ChatType_ChatTypeZero ChatType = 0
	ChatType_PeerUser     ChatType = 1
	ChatType_PeerChat     ChatType = 2
	ChatType_ChannelChat  ChatType = 3
)

var ChatType_name = map[int32]string{
	0: "ChatTypeZero",
	1: "PeerUser",
	2: "PeerChat",
	3: "ChannelChat",
}
var ChatType_value = map[string]int32{
	"ChatTypeZero": 0,
	"PeerUser":     1,
	"PeerChat":     2,
	"ChannelChat":  3,
}

func (x ChatType) String() string {
	return proto.EnumName(ChatType_name, int32(x))
}
func (ChatType) EnumDescriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{0} }

// ###################################  avthumb.pb.go  #############################
// StatusCode 状态码
type StatusCode int32

const (
	StatusCode_StatusCodeOK   StatusCode = 0
	StatusCode_StatusCodeFail StatusCode = 1
)

var StatusCode_name = map[int32]string{
	0: "StatusCodeOK",
	1: "StatusCodeFail",
}
var StatusCode_value = map[string]int32{
	"StatusCodeOK":   0,
	"StatusCodeFail": 1,
}

func (x StatusCode) String() string {
	return proto.EnumName(StatusCode_name, int32(x))
}
func (StatusCode) EnumDescriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{1} }

type AuthSignUpResult_ResultCode int32

const (
	AuthSignUpResult_Success             AuthSignUpResult_ResultCode = 0
	AuthSignUpResult_InternalError       AuthSignUpResult_ResultCode = 1
	AuthSignUpResult_PhoneNumberInvalid  AuthSignUpResult_ResultCode = 2
	AuthSignUpResult_PhoneNumberOccupied AuthSignUpResult_ResultCode = 3
	AuthSignUpResult_CaptchaExpired      AuthSignUpResult_ResultCode = 4
	AuthSignUpResult_CaptchaInvalid      AuthSignUpResult_ResultCode = 5
	AuthSignUpResult_FloodWait           AuthSignUpResult_ResultCode = 6
	AuthSignUpResult_SignUpRobotBlocked  AuthSignUpResult_ResultCode = 7
)

var AuthSignUpResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
	2: "PhoneNumberInvalid",
	3: "PhoneNumberOccupied",
	4: "CaptchaExpired",
	5: "CaptchaInvalid",
	6: "FloodWait",
	7: "SignUpRobotBlocked",
}
var AuthSignUpResult_ResultCode_value = map[string]int32{
	"Success":             0,
	"InternalError":       1,
	"PhoneNumberInvalid":  2,
	"PhoneNumberOccupied": 3,
	"CaptchaExpired":      4,
	"CaptchaInvalid":      5,
	"FloodWait":           6,
	"SignUpRobotBlocked":  7,
}

func (x AuthSignUpResult_ResultCode) String() string {
	return proto.EnumName(AuthSignUpResult_ResultCode_name, int32(x))
}
func (AuthSignUpResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{133, 0}
}

// 获取fullchannel
type ReqGetFullChannel struct {
	FromId     int32  `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	ChannelId  int32  `protobuf:"varint,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	AccessHash int64  `protobuf:"varint,3,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug      *Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqGetFullChannel) Reset()                    { *m = ReqGetFullChannel{} }
func (m *ReqGetFullChannel) String() string            { return proto.CompactTextString(m) }
func (*ReqGetFullChannel) ProtoMessage()               {}
func (*ReqGetFullChannel) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{0} }

func (m *ReqGetFullChannel) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqGetFullChannel) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetFullChannel) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqGetFullChannel) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 获取participants
type ReqGetParticipants struct {
	OffSet    int32  `protobuf:"varint,1,opt,name=offSet,proto3" json:"offSet,omitempty"`
	Limit     int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	PartiType int32  `protobuf:"varint,3,opt,name=partiType,proto3" json:"partiType,omitempty"`
	ChannelId int32  `protobuf:"varint,4,opt,name=channelId,proto3" json:"channelId,omitempty"`
	FromId    int32  `protobuf:"varint,5,opt,name=fromId,proto3" json:"fromId,omitempty"`
	Q         string `protobuf:"bytes,6,opt,name=q,proto3" json:"q,omitempty"`
	Hash      int32  `protobuf:"varint,7,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Debug     *Debug `protobuf:"bytes,8,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqGetParticipants) Reset()                    { *m = ReqGetParticipants{} }
func (m *ReqGetParticipants) String() string            { return proto.CompactTextString(m) }
func (*ReqGetParticipants) ProtoMessage()               {}
func (*ReqGetParticipants) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{1} }

func (m *ReqGetParticipants) GetOffSet() int32 {
	if m != nil {
		return m.OffSet
	}
	return 0
}

func (m *ReqGetParticipants) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqGetParticipants) GetPartiType() int32 {
	if m != nil {
		return m.PartiType
	}
	return 0
}

func (m *ReqGetParticipants) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetParticipants) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqGetParticipants) GetQ() string {
	if m != nil {
		return m.Q
	}
	return ""
}

func (m *ReqGetParticipants) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *ReqGetParticipants) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 请求参数
type ReqUpdatePinnedChannelMessage struct {
	FromId int32 `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	Flags  int32 `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	Silent bool  `protobuf:"varint,3,opt,name=silent,proto3" json:"silent,omitempty"`
	//    InputChannel channel = 4;
	ChannelId int32  `protobuf:"varint,4,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Id        int32  `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	FromKeyid int64  `protobuf:"varint,6,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *Debug `protobuf:"bytes,7,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqUpdatePinnedChannelMessage) Reset()         { *m = ReqUpdatePinnedChannelMessage{} }
func (m *ReqUpdatePinnedChannelMessage) String() string { return proto.CompactTextString(m) }
func (*ReqUpdatePinnedChannelMessage) ProtoMessage()    {}
func (*ReqUpdatePinnedChannelMessage) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{2}
}

func (m *ReqUpdatePinnedChannelMessage) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqUpdatePinnedChannelMessage) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ReqUpdatePinnedChannelMessage) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *ReqUpdatePinnedChannelMessage) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqUpdatePinnedChannelMessage) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ReqUpdatePinnedChannelMessage) GetFromKeyid() int64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqUpdatePinnedChannelMessage) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 请求参数
type ReqEditChannelAbout struct {
	FromId     int32  `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	FromKeyId  int64  `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	ChannelId  int32  `protobuf:"varint,3,opt,name=channelId,proto3" json:"channelId,omitempty"`
	About      string `protobuf:"bytes,4,opt,name=about,proto3" json:"about,omitempty"`
	AccessHash int64  `protobuf:"varint,5,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug      *Debug `protobuf:"bytes,6,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqEditChannelAbout) Reset()                    { *m = ReqEditChannelAbout{} }
func (m *ReqEditChannelAbout) String() string            { return proto.CompactTextString(m) }
func (*ReqEditChannelAbout) ProtoMessage()               {}
func (*ReqEditChannelAbout) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{3} }

func (m *ReqEditChannelAbout) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqEditChannelAbout) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *ReqEditChannelAbout) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqEditChannelAbout) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *ReqEditChannelAbout) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqEditChannelAbout) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// edit title
type ReqEditChannelTitle struct {
	ChannelId int32  `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Title     string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	UserId    int32  `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	FromKeyid int64  `protobuf:"varint,4,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqEditChannelTitle) Reset()                    { *m = ReqEditChannelTitle{} }
func (m *ReqEditChannelTitle) String() string            { return proto.CompactTextString(m) }
func (*ReqEditChannelTitle) ProtoMessage()               {}
func (*ReqEditChannelTitle) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{4} }

func (m *ReqEditChannelTitle) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqEditChannelTitle) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ReqEditChannelTitle) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqEditChannelTitle) GetFromKeyid() int64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqEditChannelTitle) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyChannelData struct {
	Reply     []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	ChannelId int32  `protobuf:"varint,4,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	FromId    int32  `protobuf:"varint,5,opt,name=FromId,proto3" json:"FromId,omitempty"`
}

func (m *ReplyChannelData) Reset()                    { *m = ReplyChannelData{} }
func (m *ReplyChannelData) String() string            { return proto.CompactTextString(m) }
func (*ReplyChannelData) ProtoMessage()               {}
func (*ReplyChannelData) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{5} }

func (m *ReplyChannelData) GetReply() []byte {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *ReplyChannelData) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *ReplyChannelData) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReplyChannelData) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

type ReqDelManualBlockList struct {
	UnBlockUser *BlockUser `protobuf:"bytes,1,opt,name=UnBlockUser" json:"UnBlockUser,omitempty"`
	BotId       int32      `protobuf:"varint,2,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	Debug       *Debug     `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqDelManualBlockList) Reset()         { *m = ReqDelManualBlockList{} }
func (m *ReqDelManualBlockList) String() string { return proto.CompactTextString(m) }
func (*ReqDelManualBlockList) ProtoMessage()    {}
func (*ReqDelManualBlockList) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{6}
}

func (m *ReqDelManualBlockList) GetUnBlockUser() *BlockUser {
	if m != nil {
		return m.UnBlockUser
	}
	return nil
}

func (m *ReqDelManualBlockList) GetBotId() int32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *ReqDelManualBlockList) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqSetManualBlockList struct {
	BlockUser *BlockUser `protobuf:"bytes,1,opt,name=BlockUser" json:"BlockUser,omitempty"`
	BotId     int32      `protobuf:"varint,2,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	Debug     *Debug     `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqSetManualBlockList) Reset()         { *m = ReqSetManualBlockList{} }
func (m *ReqSetManualBlockList) String() string { return proto.CompactTextString(m) }
func (*ReqSetManualBlockList) ProtoMessage()    {}
func (*ReqSetManualBlockList) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{7}
}

func (m *ReqSetManualBlockList) GetBlockUser() *BlockUser {
	if m != nil {
		return m.BlockUser
	}
	return nil
}

func (m *ReqSetManualBlockList) GetBotId() int32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *ReqSetManualBlockList) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 禁言某用戶
type BlockUser struct {
	UserId    int32 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	BlockTime int64 `protobuf:"varint,2,opt,name=blockTime,proto3" json:"blockTime,omitempty"`
	GroupId   int64 `protobuf:"varint,3,opt,name=groupId,proto3" json:"groupId,omitempty"`
}

func (m *BlockUser) Reset()                    { *m = BlockUser{} }
func (m *BlockUser) String() string            { return proto.CompactTextString(m) }
func (*BlockUser) ProtoMessage()               {}
func (*BlockUser) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{8} }

func (m *BlockUser) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *BlockUser) GetBlockTime() int64 {
	if m != nil {
		return m.BlockTime
	}
	return 0
}

func (m *BlockUser) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

type ManualBlockReplyData struct {
	ReplyData []byte `protobuf:"bytes,1,opt,name=replyData,proto3" json:"replyData,omitempty"`
	Reply     bool   `protobuf:"varint,2,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode int32  `protobuf:"varint,3,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (m *ManualBlockReplyData) Reset()         { *m = ManualBlockReplyData{} }
func (m *ManualBlockReplyData) String() string { return proto.CompactTextString(m) }
func (*ManualBlockReplyData) ProtoMessage()    {}
func (*ManualBlockReplyData) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{9}
}

func (m *ManualBlockReplyData) GetReplyData() []byte {
	if m != nil {
		return m.ReplyData
	}
	return nil
}

func (m *ManualBlockReplyData) GetReply() bool {
	if m != nil {
		return m.Reply
	}
	return false
}

func (m *ManualBlockReplyData) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// 存储sticker 集合概要 Documents请求
type StoreShopStickerSetDocumentsReq struct {
	Id        int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Documents []int32 `protobuf:"varint,2,rep,packed,name=documents" json:"documents,omitempty"`
	Debug     *Debug  `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *StoreShopStickerSetDocumentsReq) Reset()         { *m = StoreShopStickerSetDocumentsReq{} }
func (m *StoreShopStickerSetDocumentsReq) String() string { return proto.CompactTextString(m) }
func (*StoreShopStickerSetDocumentsReq) ProtoMessage()    {}
func (*StoreShopStickerSetDocumentsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{10}
}

func (m *StoreShopStickerSetDocumentsReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *StoreShopStickerSetDocumentsReq) GetDocuments() []int32 {
	if m != nil {
		return m.Documents
	}
	return nil
}

func (m *StoreShopStickerSetDocumentsReq) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 存储sticker 集合概要 Documents返回结果
type StoreShopStickerSetDocumentsResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=imbotgateway.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *StoreShopStickerSetDocumentsResult) Reset()         { *m = StoreShopStickerSetDocumentsResult{} }
func (m *StoreShopStickerSetDocumentsResult) String() string { return proto.CompactTextString(m) }
func (*StoreShopStickerSetDocumentsResult) ProtoMessage()    {}
func (*StoreShopStickerSetDocumentsResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{11}
}

func (m *StoreShopStickerSetDocumentsResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 结构体AuthorStickerSet
type AuthorStickerSet struct {
	UserId       int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StickersetId int64  `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	ShortName    string `protobuf:"bytes,3,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Archived     bool   `protobuf:"varint,4,opt,name=archived,proto3" json:"archived,omitempty"`
	Installed    bool   `protobuf:"varint,5,opt,name=installed,proto3" json:"installed,omitempty"`
	Disabled     bool   `protobuf:"varint,6,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Ordered      int32  `protobuf:"varint,7,opt,name=ordered,proto3" json:"ordered,omitempty"`
	Created      int32  `protobuf:"varint,8,opt,name=created,proto3" json:"created,omitempty"`
	Updated      int32  `protobuf:"varint,9,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (m *AuthorStickerSet) Reset()                    { *m = AuthorStickerSet{} }
func (m *AuthorStickerSet) String() string            { return proto.CompactTextString(m) }
func (*AuthorStickerSet) ProtoMessage()               {}
func (*AuthorStickerSet) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{12} }

func (m *AuthorStickerSet) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *AuthorStickerSet) GetStickersetId() int64 {
	if m != nil {
		return m.StickersetId
	}
	return 0
}

func (m *AuthorStickerSet) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *AuthorStickerSet) GetArchived() bool {
	if m != nil {
		return m.Archived
	}
	return false
}

func (m *AuthorStickerSet) GetInstalled() bool {
	if m != nil {
		return m.Installed
	}
	return false
}

func (m *AuthorStickerSet) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *AuthorStickerSet) GetOrdered() int32 {
	if m != nil {
		return m.Ordered
	}
	return 0
}

func (m *AuthorStickerSet) GetCreated() int32 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *AuthorStickerSet) GetUpdated() int32 {
	if m != nil {
		return m.Updated
	}
	return 0
}

// 获取作者所有sticker
type GetAuthorAllStickerSetReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *GetAuthorAllStickerSetReq) Reset()         { *m = GetAuthorAllStickerSetReq{} }
func (m *GetAuthorAllStickerSetReq) String() string { return proto.CompactTextString(m) }
func (*GetAuthorAllStickerSetReq) ProtoMessage()    {}
func (*GetAuthorAllStickerSetReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{13}
}

func (m *GetAuthorAllStickerSetReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// 获取作者所有sticker返回
type GetAuthorAllStickerSetResult struct {
	ErrorCode ReErrCode           `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=imbotgateway.ReErrCode" json:"ErrorCode,omitempty"`
	Sets      []*AuthorStickerSet `protobuf:"bytes,2,rep,name=sets" json:"sets,omitempty"`
}

func (m *GetAuthorAllStickerSetResult) Reset()         { *m = GetAuthorAllStickerSetResult{} }
func (m *GetAuthorAllStickerSetResult) String() string { return proto.CompactTextString(m) }
func (*GetAuthorAllStickerSetResult) ProtoMessage()    {}
func (*GetAuthorAllStickerSetResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{14}
}

func (m *GetAuthorAllStickerSetResult) GetErrorCode() ReErrCode {
	if m != nil {
		return m.ErrorCode
	}
	return ReErrCode_Success
}

func (m *GetAuthorAllStickerSetResult) GetSets() []*AuthorStickerSet {
	if m != nil {
		return m.Sets
	}
	return nil
}

// 删除单个sticker
type DeleteStickerPackDocumentReq struct {
	Id           int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StickersetId int64 `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
}

func (m *DeleteStickerPackDocumentReq) Reset()         { *m = DeleteStickerPackDocumentReq{} }
func (m *DeleteStickerPackDocumentReq) String() string { return proto.CompactTextString(m) }
func (*DeleteStickerPackDocumentReq) ProtoMessage()    {}
func (*DeleteStickerPackDocumentReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{15}
}

func (m *DeleteStickerPackDocumentReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DeleteStickerPackDocumentReq) GetStickersetId() int64 {
	if m != nil {
		return m.StickersetId
	}
	return 0
}

// 删除单个sticker返回
type DeleteStickerPackDocumentResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=imbotgateway.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *DeleteStickerPackDocumentResult) Reset()         { *m = DeleteStickerPackDocumentResult{} }
func (m *DeleteStickerPackDocumentResult) String() string { return proto.CompactTextString(m) }
func (*DeleteStickerPackDocumentResult) ProtoMessage()    {}
func (*DeleteStickerPackDocumentResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{16}
}

func (m *DeleteStickerPackDocumentResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 获取指定的sticker集合的请求
type GetStickerSetInfoReq struct {
	Id        int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ShortName string `protobuf:"bytes,2,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	IsId      bool   `protobuf:"varint,3,opt,name=is_id,json=isId,proto3" json:"is_id,omitempty"`
	Debug     *Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetStickerSetInfoReq) Reset()         { *m = GetStickerSetInfoReq{} }
func (m *GetStickerSetInfoReq) String() string { return proto.CompactTextString(m) }
func (*GetStickerSetInfoReq) ProtoMessage()    {}
func (*GetStickerSetInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{17}
}

func (m *GetStickerSetInfoReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetStickerSetInfoReq) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *GetStickerSetInfoReq) GetIsId() bool {
	if m != nil {
		return m.IsId
	}
	return false
}

func (m *GetStickerSetInfoReq) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// sticker set 的基础信息
type StickerSetInfo struct {
	Id         int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AccessHash int64   `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Free       bool    `protobuf:"varint,3,opt,name=free,proto3" json:"free,omitempty"`
	Official   bool    `protobuf:"varint,4,opt,name=official,proto3" json:"official,omitempty"`
	Masks      bool    `protobuf:"varint,5,opt,name=masks,proto3" json:"masks,omitempty"`
	Title      string  `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	ShortName  string  `protobuf:"bytes,7,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Count      int32   `protobuf:"varint,8,opt,name=count,proto3" json:"count,omitempty"`
	Hash       int64   `protobuf:"varint,9,opt,name=hash,proto3" json:"hash,omitempty"`
	Emoticon   string  `protobuf:"bytes,10,opt,name=emoticon,proto3" json:"emoticon,omitempty"`
	Documents  []int32 `protobuf:"varint,11,rep,packed,name=documents" json:"documents,omitempty"`
}

func (m *StickerSetInfo) Reset()                    { *m = StickerSetInfo{} }
func (m *StickerSetInfo) String() string            { return proto.CompactTextString(m) }
func (*StickerSetInfo) ProtoMessage()               {}
func (*StickerSetInfo) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{18} }

func (m *StickerSetInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *StickerSetInfo) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *StickerSetInfo) GetFree() bool {
	if m != nil {
		return m.Free
	}
	return false
}

func (m *StickerSetInfo) GetOfficial() bool {
	if m != nil {
		return m.Official
	}
	return false
}

func (m *StickerSetInfo) GetMasks() bool {
	if m != nil {
		return m.Masks
	}
	return false
}

func (m *StickerSetInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *StickerSetInfo) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *StickerSetInfo) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *StickerSetInfo) GetHash() int64 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *StickerSetInfo) GetEmoticon() string {
	if m != nil {
		return m.Emoticon
	}
	return ""
}

func (m *StickerSetInfo) GetDocuments() []int32 {
	if m != nil {
		return m.Documents
	}
	return nil
}

// //获取指定的sticker集合的返回
type GetStickerSetInfoResult struct {
	StickerSetInfo *StickerSetInfo `protobuf:"bytes,1,opt,name=stickerSetInfo" json:"stickerSetInfo,omitempty"`
	Errorcode      ReErrCode       `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imbotgateway.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *GetStickerSetInfoResult) Reset()         { *m = GetStickerSetInfoResult{} }
func (m *GetStickerSetInfoResult) String() string { return proto.CompactTextString(m) }
func (*GetStickerSetInfoResult) ProtoMessage()    {}
func (*GetStickerSetInfoResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{19}
}

func (m *GetStickerSetInfoResult) GetStickerSetInfo() *StickerSetInfo {
	if m != nil {
		return m.StickerSetInfo
	}
	return nil
}

func (m *GetStickerSetInfoResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 删除sticker商城的请求
type DeleteStickerSetReq struct {
	StickerId int32  `protobuf:"varint,1,opt,name=stickerId,proto3" json:"stickerId,omitempty"`
	Debug     *Debug `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
	UserId    int32  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *DeleteStickerSetReq) Reset()         { *m = DeleteStickerSetReq{} }
func (m *DeleteStickerSetReq) String() string { return proto.CompactTextString(m) }
func (*DeleteStickerSetReq) ProtoMessage()    {}
func (*DeleteStickerSetReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{20}
}

func (m *DeleteStickerSetReq) GetStickerId() int32 {
	if m != nil {
		return m.StickerId
	}
	return 0
}

func (m *DeleteStickerSetReq) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *DeleteStickerSetReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// 删除sticker商城的返回
type DeleteStickerSetResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=imbotgateway.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *DeleteStickerSetResult) Reset()         { *m = DeleteStickerSetResult{} }
func (m *DeleteStickerSetResult) String() string { return proto.CompactTextString(m) }
func (*DeleteStickerSetResult) ProtoMessage()    {}
func (*DeleteStickerSetResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{21}
}

func (m *DeleteStickerSetResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 用户安装sticker集合的请求
type StoreUserStickerSetReq struct {
	UserId       int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StickersetId int32  `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	Installed    bool   `protobuf:"varint,3,opt,name=installed,proto3" json:"installed,omitempty"`
	Disabled     bool   `protobuf:"varint,4,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Order        int32  `protobuf:"varint,5,opt,name=order,proto3" json:"order,omitempty"`
	Archived     bool   `protobuf:"varint,6,opt,name=archived,proto3" json:"archived,omitempty"`
	Debug        *Debug `protobuf:"bytes,7,opt,name=debug" json:"debug,omitempty"`
}

func (m *StoreUserStickerSetReq) Reset()         { *m = StoreUserStickerSetReq{} }
func (m *StoreUserStickerSetReq) String() string { return proto.CompactTextString(m) }
func (*StoreUserStickerSetReq) ProtoMessage()    {}
func (*StoreUserStickerSetReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{22}
}

func (m *StoreUserStickerSetReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *StoreUserStickerSetReq) GetStickersetId() int32 {
	if m != nil {
		return m.StickersetId
	}
	return 0
}

func (m *StoreUserStickerSetReq) GetInstalled() bool {
	if m != nil {
		return m.Installed
	}
	return false
}

func (m *StoreUserStickerSetReq) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *StoreUserStickerSetReq) GetOrder() int32 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *StoreUserStickerSetReq) GetArchived() bool {
	if m != nil {
		return m.Archived
	}
	return false
}

func (m *StoreUserStickerSetReq) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 用户安装sticker集合的返回
type StoreUserStickerSetResult struct {
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imbotgateway.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *StoreUserStickerSetResult) Reset()         { *m = StoreUserStickerSetResult{} }
func (m *StoreUserStickerSetResult) String() string { return proto.CompactTextString(m) }
func (*StoreUserStickerSetResult) ProtoMessage()    {}
func (*StoreUserStickerSetResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{23}
}

func (m *StoreUserStickerSetResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 存储sticker文档的请求
type StoreStickerPackDcReq struct {
	Stickpackbase *StickerPackDocumentBase `protobuf:"bytes,1,opt,name=stickpackbase" json:"stickpackbase,omitempty"`
	Debug         *Debug                   `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
}

func (m *StoreStickerPackDcReq) Reset()         { *m = StoreStickerPackDcReq{} }
func (m *StoreStickerPackDcReq) String() string { return proto.CompactTextString(m) }
func (*StoreStickerPackDcReq) ProtoMessage()    {}
func (*StoreStickerPackDcReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{24}
}

func (m *StoreStickerPackDcReq) GetStickpackbase() *StickerPackDocumentBase {
	if m != nil {
		return m.Stickpackbase
	}
	return nil
}

func (m *StoreStickerPackDcReq) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 存储sticker文档的返回
type StoreStickerPackDcResult struct {
	Id        int32     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imbotgateway.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *StoreStickerPackDcResult) Reset()         { *m = StoreStickerPackDcResult{} }
func (m *StoreStickerPackDcResult) String() string { return proto.CompactTextString(m) }
func (*StoreStickerPackDcResult) ProtoMessage()    {}
func (*StoreStickerPackDcResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{25}
}

func (m *StoreStickerPackDcResult) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *StoreStickerPackDcResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 存储sticker 集合概要的请求参数
type StoreShopStickerSetReq struct {
	AccessHash int64   `protobuf:"varint,1,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Free       bool    `protobuf:"varint,2,opt,name=free,proto3" json:"free,omitempty"`
	Official   bool    `protobuf:"varint,3,opt,name=official,proto3" json:"official,omitempty"`
	Masks      bool    `protobuf:"varint,4,opt,name=masks,proto3" json:"masks,omitempty"`
	Title      string  `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	ShortName  string  `protobuf:"bytes,6,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Count      int32   `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`
	Hash       int64   `protobuf:"varint,8,opt,name=hash,proto3" json:"hash,omitempty"`
	Emoticon   string  `protobuf:"bytes,9,opt,name=emoticon,proto3" json:"emoticon,omitempty"`
	Documents  []int32 `protobuf:"varint,10,rep,packed,name=documents" json:"documents,omitempty"`
	Debug      *Debug  `protobuf:"bytes,11,opt,name=debug" json:"debug,omitempty"`
	UserId     int32   `protobuf:"varint,12,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *StoreShopStickerSetReq) Reset()         { *m = StoreShopStickerSetReq{} }
func (m *StoreShopStickerSetReq) String() string { return proto.CompactTextString(m) }
func (*StoreShopStickerSetReq) ProtoMessage()    {}
func (*StoreShopStickerSetReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{26}
}

func (m *StoreShopStickerSetReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *StoreShopStickerSetReq) GetFree() bool {
	if m != nil {
		return m.Free
	}
	return false
}

func (m *StoreShopStickerSetReq) GetOfficial() bool {
	if m != nil {
		return m.Official
	}
	return false
}

func (m *StoreShopStickerSetReq) GetMasks() bool {
	if m != nil {
		return m.Masks
	}
	return false
}

func (m *StoreShopStickerSetReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *StoreShopStickerSetReq) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *StoreShopStickerSetReq) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *StoreShopStickerSetReq) GetHash() int64 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *StoreShopStickerSetReq) GetEmoticon() string {
	if m != nil {
		return m.Emoticon
	}
	return ""
}

func (m *StoreShopStickerSetReq) GetDocuments() []int32 {
	if m != nil {
		return m.Documents
	}
	return nil
}

func (m *StoreShopStickerSetReq) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *StoreShopStickerSetReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// 存储sticker 集合概要的返回
type StoreShopStickerSetResult struct {
	Id        int32     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imbotgateway.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *StoreShopStickerSetResult) Reset()         { *m = StoreShopStickerSetResult{} }
func (m *StoreShopStickerSetResult) String() string { return proto.CompactTextString(m) }
func (*StoreShopStickerSetResult) ProtoMessage()    {}
func (*StoreShopStickerSetResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{27}
}

func (m *StoreShopStickerSetResult) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *StoreShopStickerSetResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// ResizeRequest 重设图片大小请求
type ResizeRequest struct {
	Data   []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Width  uint32 `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	Height uint32 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *ResizeRequest) Reset()                    { *m = ResizeRequest{} }
func (m *ResizeRequest) String() string            { return proto.CompactTextString(m) }
func (*ResizeRequest) ProtoMessage()               {}
func (*ResizeRequest) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{28} }

func (m *ResizeRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ResizeRequest) GetWidth() uint32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *ResizeRequest) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

// ResizeReply 重设图片大小响应
type ResizeReply struct {
	Status StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=imbotgateway.StatusCode" json:"status,omitempty"`
	Data   []byte     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ResizeReply) Reset()                    { *m = ResizeReply{} }
func (m *ResizeReply) String() string            { return proto.CompactTextString(m) }
func (*ResizeReply) ProtoMessage()               {}
func (*ResizeReply) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{29} }

func (m *ResizeReply) GetStatus() StatusCode {
	if m != nil {
		return m.Status
	}
	return StatusCode_StatusCodeOK
}

func (m *ResizeReply) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// ConstraintRequest 约束图片大小请求
type ConstraintRequest struct {
	Data       []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	MaxSize    uint32 `protobuf:"varint,2,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
	OutputWebp bool   `protobuf:"varint,3,opt,name=output_webp,json=outputWebp,proto3" json:"output_webp,omitempty"`
}

func (m *ConstraintRequest) Reset()                    { *m = ConstraintRequest{} }
func (m *ConstraintRequest) String() string            { return proto.CompactTextString(m) }
func (*ConstraintRequest) ProtoMessage()               {}
func (*ConstraintRequest) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{30} }

func (m *ConstraintRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ConstraintRequest) GetMaxSize() uint32 {
	if m != nil {
		return m.MaxSize
	}
	return 0
}

func (m *ConstraintRequest) GetOutputWebp() bool {
	if m != nil {
		return m.OutputWebp
	}
	return false
}

// ConstraintReply 约束图片大小响应
type ConstraintReply struct {
	Status       StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=imbotgateway.StatusCode" json:"status,omitempty"`
	Data         []byte     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Width        uint32     `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	Height       uint32     `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	OriginWidth  uint32     `protobuf:"varint,5,opt,name=origin_width,json=originWidth,proto3" json:"origin_width,omitempty"`
	OriginHeight uint32     `protobuf:"varint,6,opt,name=origin_height,json=originHeight,proto3" json:"origin_height,omitempty"`
}

func (m *ConstraintReply) Reset()                    { *m = ConstraintReply{} }
func (m *ConstraintReply) String() string            { return proto.CompactTextString(m) }
func (*ConstraintReply) ProtoMessage()               {}
func (*ConstraintReply) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{31} }

func (m *ConstraintReply) GetStatus() StatusCode {
	if m != nil {
		return m.Status
	}
	return StatusCode_StatusCodeOK
}

func (m *ConstraintReply) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ConstraintReply) GetWidth() uint32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *ConstraintReply) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ConstraintReply) GetOriginWidth() uint32 {
	if m != nil {
		return m.OriginWidth
	}
	return 0
}

func (m *ConstraintReply) GetOriginHeight() uint32 {
	if m != nil {
		return m.OriginHeight
	}
	return 0
}

// CompressImageRequest 压缩图片请求
type CompressImageRequest struct {
	Data    []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Quality uint32 `protobuf:"varint,2,opt,name=quality,proto3" json:"quality,omitempty"`
}

func (m *CompressImageRequest) Reset()         { *m = CompressImageRequest{} }
func (m *CompressImageRequest) String() string { return proto.CompactTextString(m) }
func (*CompressImageRequest) ProtoMessage()    {}
func (*CompressImageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{32}
}

func (m *CompressImageRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CompressImageRequest) GetQuality() uint32 {
	if m != nil {
		return m.Quality
	}
	return 0
}

// CompressImageReply 压缩图片响应
type CompressImageReply struct {
	Status StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=imbotgateway.StatusCode" json:"status,omitempty"`
	Data   []byte     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *CompressImageReply) Reset()                    { *m = CompressImageReply{} }
func (m *CompressImageReply) String() string            { return proto.CompactTextString(m) }
func (*CompressImageReply) ProtoMessage()               {}
func (*CompressImageReply) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{33} }

func (m *CompressImageReply) GetStatus() StatusCode {
	if m != nil {
		return m.Status
	}
	return StatusCode_StatusCodeOK
}

func (m *CompressImageReply) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// VideoPreviewRequest 获取视频预览请求
type VideoPreviewRequest struct {
	Data    []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	MaxSize uint32 `protobuf:"varint,2,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
}

func (m *VideoPreviewRequest) Reset()         { *m = VideoPreviewRequest{} }
func (m *VideoPreviewRequest) String() string { return proto.CompactTextString(m) }
func (*VideoPreviewRequest) ProtoMessage()    {}
func (*VideoPreviewRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{34}
}

func (m *VideoPreviewRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *VideoPreviewRequest) GetMaxSize() uint32 {
	if m != nil {
		return m.MaxSize
	}
	return 0
}

// VideoPreviewReply 获取视频预览响应
type VideoPreviewReply struct {
	Status   StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=imbotgateway.StatusCode" json:"status,omitempty"`
	Duration uint32     `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	Preview  []byte     `protobuf:"bytes,3,opt,name=preview,proto3" json:"preview,omitempty"`
	Width    uint32     `protobuf:"varint,4,opt,name=width,proto3" json:"width,omitempty"`
	Height   uint32     `protobuf:"varint,5,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *VideoPreviewReply) Reset()                    { *m = VideoPreviewReply{} }
func (m *VideoPreviewReply) String() string            { return proto.CompactTextString(m) }
func (*VideoPreviewReply) ProtoMessage()               {}
func (*VideoPreviewReply) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{35} }

func (m *VideoPreviewReply) GetStatus() StatusCode {
	if m != nil {
		return m.Status
	}
	return StatusCode_StatusCodeOK
}

func (m *VideoPreviewReply) GetDuration() uint32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *VideoPreviewReply) GetPreview() []byte {
	if m != nil {
		return m.Preview
	}
	return nil
}

func (m *VideoPreviewReply) GetWidth() uint32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *VideoPreviewReply) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

// AudioPreviewRequest 获取音频预览请求
type AudioPreviewRequest struct {
	Data    []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	MaxSize uint32 `protobuf:"varint,2,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
}

func (m *AudioPreviewRequest) Reset()         { *m = AudioPreviewRequest{} }
func (m *AudioPreviewRequest) String() string { return proto.CompactTextString(m) }
func (*AudioPreviewRequest) ProtoMessage()    {}
func (*AudioPreviewRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{36}
}

func (m *AudioPreviewRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AudioPreviewRequest) GetMaxSize() uint32 {
	if m != nil {
		return m.MaxSize
	}
	return 0
}

// AudioPreviewReply 获取音频预览响应
type AudioPreviewReply struct {
	Status   StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=imbotgateway.StatusCode" json:"status,omitempty"`
	Duration uint32     `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	Cover    []byte     `protobuf:"bytes,3,opt,name=cover,proto3" json:"cover,omitempty"`
	Title    string     `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Artist   string     `protobuf:"bytes,5,opt,name=artist,proto3" json:"artist,omitempty"`
	Width    uint32     `protobuf:"varint,6,opt,name=width,proto3" json:"width,omitempty"`
	Height   uint32     `protobuf:"varint,7,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *AudioPreviewReply) Reset()                    { *m = AudioPreviewReply{} }
func (m *AudioPreviewReply) String() string            { return proto.CompactTextString(m) }
func (*AudioPreviewReply) ProtoMessage()               {}
func (*AudioPreviewReply) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{37} }

func (m *AudioPreviewReply) GetStatus() StatusCode {
	if m != nil {
		return m.Status
	}
	return StatusCode_StatusCodeOK
}

func (m *AudioPreviewReply) GetDuration() uint32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *AudioPreviewReply) GetCover() []byte {
	if m != nil {
		return m.Cover
	}
	return nil
}

func (m *AudioPreviewReply) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *AudioPreviewReply) GetArtist() string {
	if m != nil {
		return m.Artist
	}
	return ""
}

func (m *AudioPreviewReply) GetWidth() uint32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *AudioPreviewReply) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

// ###################################  pbmessageserver.pb.go  #############################
// 获取participants
type ReqParticipants struct {
	OffSet    int32  `protobuf:"varint,1,opt,name=offSet,proto3" json:"offSet,omitempty"`
	Limit     int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	PartiType int32  `protobuf:"varint,3,opt,name=partiType,proto3" json:"partiType,omitempty"`
	ChannelId int32  `protobuf:"varint,4,opt,name=channelId,proto3" json:"channelId,omitempty"`
	FromId    int32  `protobuf:"varint,5,opt,name=fromId,proto3" json:"fromId,omitempty"`
	Q         string `protobuf:"bytes,6,opt,name=q,proto3" json:"q,omitempty"`
	Hash      int32  `protobuf:"varint,7,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Debug     *Debug `protobuf:"bytes,8,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqParticipants) Reset()                    { *m = ReqParticipants{} }
func (m *ReqParticipants) String() string            { return proto.CompactTextString(m) }
func (*ReqParticipants) ProtoMessage()               {}
func (*ReqParticipants) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{38} }

func (m *ReqParticipants) GetOffSet() int32 {
	if m != nil {
		return m.OffSet
	}
	return 0
}

func (m *ReqParticipants) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqParticipants) GetPartiType() int32 {
	if m != nil {
		return m.PartiType
	}
	return 0
}

func (m *ReqParticipants) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqParticipants) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqParticipants) GetQ() string {
	if m != nil {
		return m.Q
	}
	return ""
}

func (m *ReqParticipants) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *ReqParticipants) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 返回participants
type ReplyParticipants struct {
	Updates   []byte `protobuf:"bytes,1,opt,name=Updates,proto3" json:"Updates,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyParticipants) Reset()                    { *m = ReplyParticipants{} }
func (m *ReplyParticipants) String() string            { return proto.CompactTextString(m) }
func (*ReplyParticipants) ProtoMessage()               {}
func (*ReplyParticipants) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{39} }

func (m *ReplyParticipants) GetUpdates() []byte {
	if m != nil {
		return m.Updates
	}
	return nil
}

func (m *ReplyParticipants) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type ReqCreateChat struct {
	Chatid    int32   `protobuf:"varint,1,opt,name=chatid,proto3" json:"chatid,omitempty"`
	Title     string  `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Creator   int32   `protobuf:"varint,3,opt,name=creator,proto3" json:"creator,omitempty"`
	Users     []int32 `protobuf:"varint,4,rep,packed,name=users" json:"users,omitempty"`
	FromKeyid uint64  `protobuf:"varint,5,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *Debug  `protobuf:"bytes,6,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqCreateChat) Reset()                    { *m = ReqCreateChat{} }
func (m *ReqCreateChat) String() string            { return proto.CompactTextString(m) }
func (*ReqCreateChat) ProtoMessage()               {}
func (*ReqCreateChat) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{40} }

func (m *ReqCreateChat) GetChatid() int32 {
	if m != nil {
		return m.Chatid
	}
	return 0
}

func (m *ReqCreateChat) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ReqCreateChat) GetCreator() int32 {
	if m != nil {
		return m.Creator
	}
	return 0
}

func (m *ReqCreateChat) GetUsers() []int32 {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ReqCreateChat) GetFromKeyid() uint64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqCreateChat) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyCreateChat struct {
	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,5,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyCreateChat) Reset()                    { *m = ReplyCreateChat{} }
func (m *ReplyCreateChat) String() string            { return proto.CompactTextString(m) }
func (*ReplyCreateChat) ProtoMessage()               {}
func (*ReplyCreateChat) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{41} }

func (m *ReplyCreateChat) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyCreateChat) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

type ReqMigrateChat struct {
	Fromid int32 `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	Chatid int32 `protobuf:"varint,2,opt,name=chatid,proto3" json:"chatid,omitempty"`
	//    int32 channelid = 3; //升级后的超级群ID
	//    string title = 4; // 群标题
	//    repeated int32 members = 5; //现有用户
	//    string Phone = 6; //电话
	Fromkeyid uint64 `protobuf:"varint,3,opt,name=fromkeyid,proto3" json:"fromkeyid,omitempty"`
	//    bool isBroadCast = 8; //超级群还是频道
	Debug *Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqMigrateChat) Reset()                    { *m = ReqMigrateChat{} }
func (m *ReqMigrateChat) String() string            { return proto.CompactTextString(m) }
func (*ReqMigrateChat) ProtoMessage()               {}
func (*ReqMigrateChat) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{42} }

func (m *ReqMigrateChat) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqMigrateChat) GetChatid() int32 {
	if m != nil {
		return m.Chatid
	}
	return 0
}

func (m *ReqMigrateChat) GetFromkeyid() uint64 {
	if m != nil {
		return m.Fromkeyid
	}
	return 0
}

func (m *ReqMigrateChat) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyMigrateChat struct {
	//    int32 msgid = 1; // 消息id
	//    int64 randomid = 2; // 消息随机id
	//    int32 date = 3; // 消息时间
	//    int32 pts = 4; // 消息pts
	//    int32 channelmsgid = 5; //频道的消息ID
	//    int32 channelpts = 6; //频道的PTS
	Result []byte `protobuf:"bytes,7,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,8,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyMigrateChat) Reset()                    { *m = ReplyMigrateChat{} }
func (m *ReplyMigrateChat) String() string            { return proto.CompactTextString(m) }
func (*ReplyMigrateChat) ProtoMessage()               {}
func (*ReplyMigrateChat) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{43} }

func (m *ReplyMigrateChat) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyMigrateChat) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// 邀请用户进入超级群
type ReqJoinChannel struct {
	ChannelId  int32  `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	UserId     int32  `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	FromKeyid  int64  `protobuf:"varint,5,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	AccessHash int64  `protobuf:"varint,6,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	ByLink     bool   `protobuf:"varint,7,opt,name=byLink,proto3" json:"byLink,omitempty"`
	Invitor    int32  `protobuf:"varint,8,opt,name=invitor,proto3" json:"invitor,omitempty"`
	InviteType int32  `protobuf:"varint,9,opt,name=invite_type,json=inviteType,proto3" json:"invite_type,omitempty"`
	Debug      *Debug `protobuf:"bytes,10,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqJoinChannel) Reset()                    { *m = ReqJoinChannel{} }
func (m *ReqJoinChannel) String() string            { return proto.CompactTextString(m) }
func (*ReqJoinChannel) ProtoMessage()               {}
func (*ReqJoinChannel) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{44} }

func (m *ReqJoinChannel) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqJoinChannel) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqJoinChannel) GetFromKeyid() int64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqJoinChannel) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqJoinChannel) GetByLink() bool {
	if m != nil {
		return m.ByLink
	}
	return false
}

func (m *ReqJoinChannel) GetInvitor() int32 {
	if m != nil {
		return m.Invitor
	}
	return 0
}

func (m *ReqJoinChannel) GetInviteType() int32 {
	if m != nil {
		return m.InviteType
	}
	return 0
}

func (m *ReqJoinChannel) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 邀请操作的ACK
type ReplyJoinChannel struct {
	Reply     []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyJoinChannel) Reset()                    { *m = ReplyJoinChannel{} }
func (m *ReplyJoinChannel) String() string            { return proto.CompactTextString(m) }
func (*ReplyJoinChannel) ProtoMessage()               {}
func (*ReplyJoinChannel) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{45} }

func (m *ReplyJoinChannel) GetReply() []byte {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *ReplyJoinChannel) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// 转移群主
type ReqChangeGroupAndChannelCrator struct {
	GroupId    int32 `protobuf:"varint,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	FromId     int32 `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	OperatorId int32 `protobuf:"varint,3,opt,name=OperatorId,proto3" json:"OperatorId,omitempty"`
	IsChat     bool  `protobuf:"varint,4,opt,name=IsChat,proto3" json:"IsChat,omitempty"`
}

func (m *ReqChangeGroupAndChannelCrator) Reset()         { *m = ReqChangeGroupAndChannelCrator{} }
func (m *ReqChangeGroupAndChannelCrator) String() string { return proto.CompactTextString(m) }
func (*ReqChangeGroupAndChannelCrator) ProtoMessage()    {}
func (*ReqChangeGroupAndChannelCrator) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{46}
}

func (m *ReqChangeGroupAndChannelCrator) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *ReqChangeGroupAndChannelCrator) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqChangeGroupAndChannelCrator) GetOperatorId() int32 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

func (m *ReqChangeGroupAndChannelCrator) GetIsChat() bool {
	if m != nil {
		return m.IsChat
	}
	return false
}

// 回复转移群主
type ReplyChangeGroupAndChannelCrator struct {
	Valid     bool  `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	ErrorCode int32 `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyChangeGroupAndChannelCrator) Reset()         { *m = ReplyChangeGroupAndChannelCrator{} }
func (m *ReplyChangeGroupAndChannelCrator) String() string { return proto.CompactTextString(m) }
func (*ReplyChangeGroupAndChannelCrator) ProtoMessage()    {}
func (*ReplyChangeGroupAndChannelCrator) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{47}
}

func (m *ReplyChangeGroupAndChannelCrator) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *ReplyChangeGroupAndChannelCrator) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// 机器人调用接口
type ReqBotCallMessageMedia struct {
	FromBotId int32  `protobuf:"varint,1,opt,name=fromBotId,proto3" json:"fromBotId,omitempty"`
	MsgTxt    string `protobuf:"bytes,2,opt,name=MsgTxt,proto3" json:"MsgTxt,omitempty"`
	Request   []byte `protobuf:"bytes,3,opt,name=request,proto3" json:"request,omitempty"`
	Layer     int32  `protobuf:"varint,4,opt,name=layer,proto3" json:"layer,omitempty"`
	Debug     *Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqBotCallMessageMedia) Reset()         { *m = ReqBotCallMessageMedia{} }
func (m *ReqBotCallMessageMedia) String() string { return proto.CompactTextString(m) }
func (*ReqBotCallMessageMedia) ProtoMessage()    {}
func (*ReqBotCallMessageMedia) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{48}
}

func (m *ReqBotCallMessageMedia) GetFromBotId() int32 {
	if m != nil {
		return m.FromBotId
	}
	return 0
}

func (m *ReqBotCallMessageMedia) GetMsgTxt() string {
	if m != nil {
		return m.MsgTxt
	}
	return ""
}

func (m *ReqBotCallMessageMedia) GetRequest() []byte {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ReqBotCallMessageMedia) GetLayer() int32 {
	if m != nil {
		return m.Layer
	}
	return 0
}

func (m *ReqBotCallMessageMedia) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 获取dialog接口
type RequestDialog struct {
	Userid     int32  `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Flags      int32  `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	OffsetDate int32  `protobuf:"varint,3,opt,name=offset_date,json=offsetDate,proto3" json:"offset_date,omitempty"`
	OffsetId   int32  `protobuf:"varint,4,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
	OffsetPeer []byte `protobuf:"bytes,5,opt,name=offset_peer,json=offsetPeer,proto3" json:"offset_peer,omitempty"`
	Limit      int32  `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	Debug      *Debug `protobuf:"bytes,7,opt,name=debug" json:"debug,omitempty"`
}

func (m *RequestDialog) Reset()                    { *m = RequestDialog{} }
func (m *RequestDialog) String() string            { return proto.CompactTextString(m) }
func (*RequestDialog) ProtoMessage()               {}
func (*RequestDialog) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{49} }

func (m *RequestDialog) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *RequestDialog) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *RequestDialog) GetOffsetDate() int32 {
	if m != nil {
		return m.OffsetDate
	}
	return 0
}

func (m *RequestDialog) GetOffsetId() int32 {
	if m != nil {
		return m.OffsetId
	}
	return 0
}

func (m *RequestDialog) GetOffsetPeer() []byte {
	if m != nil {
		return m.OffsetPeer
	}
	return nil
}

func (m *RequestDialog) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *RequestDialog) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 返回dialog
type ReplyDialog struct {
	//    repeated DialogSlice dialog = 1;
	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyDialog) Reset()                    { *m = ReplyDialog{} }
func (m *ReplyDialog) String() string            { return proto.CompactTextString(m) }
func (*ReplyDialog) ProtoMessage()               {}
func (*ReplyDialog) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{50} }

func (m *ReplyDialog) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyDialog) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// 用户分数
type UserScore struct {
	Userid int32 `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Score  int32 `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
}

func (m *UserScore) Reset()                    { *m = UserScore{} }
func (m *UserScore) String() string            { return proto.CompactTextString(m) }
func (*UserScore) ProtoMessage()               {}
func (*UserScore) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{51} }

func (m *UserScore) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *UserScore) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

// 调用设置分数
type ReqSetGameScore struct {
	Userid             int32        `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Scores             []*UserScore `protobuf:"bytes,2,rep,name=scores" json:"scores,omitempty"`
	Force              bool         `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
	DisableEditMessage bool         `protobuf:"varint,4,opt,name=disable_edit_message,json=disableEditMessage,proto3" json:"disable_edit_message,omitempty"`
	ChatId             int32        `protobuf:"varint,5,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	ChatType           int32        `protobuf:"varint,6,opt,name=chat_type,json=chatType,proto3" json:"chat_type,omitempty"`
	MessageId          int32        `protobuf:"varint,7,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	InlineMessageId    string       `protobuf:"bytes,8,opt,name=inline_message_id,json=inlineMessageId,proto3" json:"inline_message_id,omitempty"`
	Botid              int32        `protobuf:"varint,9,opt,name=botid,proto3" json:"botid,omitempty"`
	Debug              *Debug       `protobuf:"bytes,10,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqSetGameScore) Reset()                    { *m = ReqSetGameScore{} }
func (m *ReqSetGameScore) String() string            { return proto.CompactTextString(m) }
func (*ReqSetGameScore) ProtoMessage()               {}
func (*ReqSetGameScore) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{52} }

func (m *ReqSetGameScore) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *ReqSetGameScore) GetScores() []*UserScore {
	if m != nil {
		return m.Scores
	}
	return nil
}

func (m *ReqSetGameScore) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *ReqSetGameScore) GetDisableEditMessage() bool {
	if m != nil {
		return m.DisableEditMessage
	}
	return false
}

func (m *ReqSetGameScore) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *ReqSetGameScore) GetChatType() int32 {
	if m != nil {
		return m.ChatType
	}
	return 0
}

func (m *ReqSetGameScore) GetMessageId() int32 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *ReqSetGameScore) GetInlineMessageId() string {
	if m != nil {
		return m.InlineMessageId
	}
	return ""
}

func (m *ReqSetGameScore) GetBotid() int32 {
	if m != nil {
		return m.Botid
	}
	return 0
}

func (m *ReqSetGameScore) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 设置分数返回
type ReplySetGameScore struct {
	Succeed   bool   `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Error     string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Errorcode int32  `protobuf:"varint,3,opt,name=errorcode,proto3" json:"errorcode,omitempty"`
}

func (m *ReplySetGameScore) Reset()                    { *m = ReplySetGameScore{} }
func (m *ReplySetGameScore) String() string            { return proto.CompactTextString(m) }
func (*ReplySetGameScore) ProtoMessage()               {}
func (*ReplySetGameScore) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{53} }

func (m *ReplySetGameScore) GetSucceed() bool {
	if m != nil {
		return m.Succeed
	}
	return false
}

func (m *ReplySetGameScore) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ReplySetGameScore) GetErrorcode() int32 {
	if m != nil {
		return m.Errorcode
	}
	return 0
}

type ReplyBanChannelUser struct {
	Updates   []byte `protobuf:"bytes,1,opt,name=Updates,proto3" json:"Updates,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyBanChannelUser) Reset()         { *m = ReplyBanChannelUser{} }
func (m *ReplyBanChannelUser) String() string { return proto.CompactTextString(m) }
func (*ReplyBanChannelUser) ProtoMessage()    {}
func (*ReplyBanChannelUser) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{54}
}

func (m *ReplyBanChannelUser) GetUpdates() []byte {
	if m != nil {
		return m.Updates
	}
	return nil
}

func (m *ReplyBanChannelUser) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type ReqBanChannelUser struct {
	FromId              int32                `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	FromKeyId           int64                `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	ChannelId           int32                `protobuf:"varint,3,opt,name=channelId,proto3" json:"channelId,omitempty"`
	BannedUserId        int32                `protobuf:"varint,4,opt,name=bannedUserId,proto3" json:"bannedUserId,omitempty"`
	AccessHash          int64                `protobuf:"varint,5,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	UtilDate            int32                `protobuf:"varint,6,opt,name=util_date,json=utilDate,proto3" json:"util_date,omitempty"`
	ChannelBannedRights *ChannelBannedRights `protobuf:"bytes,7,opt,name=channelBannedRights" json:"channelBannedRights,omitempty"`
	Debug               *Debug               `protobuf:"bytes,8,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqBanChannelUser) Reset()                    { *m = ReqBanChannelUser{} }
func (m *ReqBanChannelUser) String() string            { return proto.CompactTextString(m) }
func (*ReqBanChannelUser) ProtoMessage()               {}
func (*ReqBanChannelUser) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{55} }

func (m *ReqBanChannelUser) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqBanChannelUser) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *ReqBanChannelUser) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqBanChannelUser) GetBannedUserId() int32 {
	if m != nil {
		return m.BannedUserId
	}
	return 0
}

func (m *ReqBanChannelUser) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqBanChannelUser) GetUtilDate() int32 {
	if m != nil {
		return m.UtilDate
	}
	return 0
}

func (m *ReqBanChannelUser) GetChannelBannedRights() *ChannelBannedRights {
	if m != nil {
		return m.ChannelBannedRights
	}
	return nil
}

func (m *ReqBanChannelUser) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ChannelBannedRights struct {
	Flags        int32 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	ViewMessages bool  `protobuf:"varint,2,opt,name=view_messages,json=viewMessages,proto3" json:"view_messages,omitempty"`
	SendMessages bool  `protobuf:"varint,3,opt,name=send_messages,json=sendMessages,proto3" json:"send_messages,omitempty"`
	SendMedia    bool  `protobuf:"varint,4,opt,name=send_media,json=sendMedia,proto3" json:"send_media,omitempty"`
	SendStickers bool  `protobuf:"varint,5,opt,name=send_stickers,json=sendStickers,proto3" json:"send_stickers,omitempty"`
	SendGifs     bool  `protobuf:"varint,6,opt,name=send_gifs,json=sendGifs,proto3" json:"send_gifs,omitempty"`
	SendGames    bool  `protobuf:"varint,7,opt,name=send_games,json=sendGames,proto3" json:"send_games,omitempty"`
	SendInline   bool  `protobuf:"varint,8,opt,name=send_inline,json=sendInline,proto3" json:"send_inline,omitempty"`
	EmbedLinks   bool  `protobuf:"varint,9,opt,name=embed_links,json=embedLinks,proto3" json:"embed_links,omitempty"`
	UntilDate    int32 `protobuf:"varint,10,opt,name=until_date,json=untilDate,proto3" json:"until_date,omitempty"`
}

func (m *ChannelBannedRights) Reset()         { *m = ChannelBannedRights{} }
func (m *ChannelBannedRights) String() string { return proto.CompactTextString(m) }
func (*ChannelBannedRights) ProtoMessage()    {}
func (*ChannelBannedRights) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{56}
}

func (m *ChannelBannedRights) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ChannelBannedRights) GetViewMessages() bool {
	if m != nil {
		return m.ViewMessages
	}
	return false
}

func (m *ChannelBannedRights) GetSendMessages() bool {
	if m != nil {
		return m.SendMessages
	}
	return false
}

func (m *ChannelBannedRights) GetSendMedia() bool {
	if m != nil {
		return m.SendMedia
	}
	return false
}

func (m *ChannelBannedRights) GetSendStickers() bool {
	if m != nil {
		return m.SendStickers
	}
	return false
}

func (m *ChannelBannedRights) GetSendGifs() bool {
	if m != nil {
		return m.SendGifs
	}
	return false
}

func (m *ChannelBannedRights) GetSendGames() bool {
	if m != nil {
		return m.SendGames
	}
	return false
}

func (m *ChannelBannedRights) GetSendInline() bool {
	if m != nil {
		return m.SendInline
	}
	return false
}

func (m *ChannelBannedRights) GetEmbedLinks() bool {
	if m != nil {
		return m.EmbedLinks
	}
	return false
}

func (m *ChannelBannedRights) GetUntilDate() int32 {
	if m != nil {
		return m.UntilDate
	}
	return 0
}

// 请求给定channel
type ReqGetChannels struct {
	ChannelIds []int32 `protobuf:"varint,1,rep,packed,name=channelIds" json:"channelIds,omitempty"`
	FromId     int32   `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	Debug      *Debug  `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqGetChannels) Reset()                    { *m = ReqGetChannels{} }
func (m *ReqGetChannels) String() string            { return proto.CompactTextString(m) }
func (*ReqGetChannels) ProtoMessage()               {}
func (*ReqGetChannels) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{57} }

func (m *ReqGetChannels) GetChannelIds() []int32 {
	if m != nil {
		return m.ChannelIds
	}
	return nil
}

func (m *ReqGetChannels) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqGetChannels) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 返回get channles
type ReplyGetChannels struct {
	Reply     []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyGetChannels) Reset()                    { *m = ReplyGetChannels{} }
func (m *ReplyGetChannels) String() string            { return proto.CompactTextString(m) }
func (*ReplyGetChannels) ProtoMessage()               {}
func (*ReplyGetChannels) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{58} }

func (m *ReplyGetChannels) GetReply() []byte {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *ReplyGetChannels) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type ReqDeleteChatUser struct {
	Fromid    int32  `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	Chatid    int32  `protobuf:"varint,2,opt,name=chatid,proto3" json:"chatid,omitempty"`
	Userid    int32  `protobuf:"varint,3,opt,name=userid,proto3" json:"userid,omitempty"`
	FromKeyid uint64 `protobuf:"varint,4,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *Debug `protobuf:"bytes,6,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqDeleteChatUser) Reset()                    { *m = ReqDeleteChatUser{} }
func (m *ReqDeleteChatUser) String() string            { return proto.CompactTextString(m) }
func (*ReqDeleteChatUser) ProtoMessage()               {}
func (*ReqDeleteChatUser) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{59} }

func (m *ReqDeleteChatUser) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqDeleteChatUser) GetChatid() int32 {
	if m != nil {
		return m.Chatid
	}
	return 0
}

func (m *ReqDeleteChatUser) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *ReqDeleteChatUser) GetFromKeyid() uint64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqDeleteChatUser) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyDeleteChatUser struct {
	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyDeleteChatUser) Reset()         { *m = ReplyDeleteChatUser{} }
func (m *ReplyDeleteChatUser) String() string { return proto.CompactTextString(m) }
func (*ReplyDeleteChatUser) ProtoMessage()    {}
func (*ReplyDeleteChatUser) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{60}
}

func (m *ReplyDeleteChatUser) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyDeleteChatUser) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

type ChannelInactiveUser struct {
	Id      int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Time    int32  `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	TimeStr string `protobuf:"bytes,4,opt,name=timeStr,proto3" json:"timeStr,omitempty"`
}

func (m *ChannelInactiveUser) Reset()         { *m = ChannelInactiveUser{} }
func (m *ChannelInactiveUser) String() string { return proto.CompactTextString(m) }
func (*ChannelInactiveUser) ProtoMessage()    {}
func (*ChannelInactiveUser) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{61}
}

func (m *ChannelInactiveUser) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ChannelInactiveUser) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChannelInactiveUser) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *ChannelInactiveUser) GetTimeStr() string {
	if m != nil {
		return m.TimeStr
	}
	return ""
}

type GetChannelInactiveUsersReq struct {
	ChannelId int32 `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Limit     int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Userid    int32 `protobuf:"varint,3,opt,name=userid,proto3" json:"userid,omitempty"`
}

func (m *GetChannelInactiveUsersReq) Reset()         { *m = GetChannelInactiveUsersReq{} }
func (m *GetChannelInactiveUsersReq) String() string { return proto.CompactTextString(m) }
func (*GetChannelInactiveUsersReq) ProtoMessage()    {}
func (*GetChannelInactiveUsersReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{62}
}

func (m *GetChannelInactiveUsersReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *GetChannelInactiveUsersReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetChannelInactiveUsersReq) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

type GetChannelInactiveUsersResult struct {
	Users   []*ChannelInactiveUser `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
	Count   int32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Errcode int32                  `protobuf:"varint,3,opt,name=errcode,proto3" json:"errcode,omitempty"`
}

func (m *GetChannelInactiveUsersResult) Reset()         { *m = GetChannelInactiveUsersResult{} }
func (m *GetChannelInactiveUsersResult) String() string { return proto.CompactTextString(m) }
func (*GetChannelInactiveUsersResult) ProtoMessage()    {}
func (*GetChannelInactiveUsersResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{63}
}

func (m *GetChannelInactiveUsersResult) GetUsers() []*ChannelInactiveUser {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *GetChannelInactiveUsersResult) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *GetChannelInactiveUsersResult) GetErrcode() int32 {
	if m != nil {
		return m.Errcode
	}
	return 0
}

// 机器人调用接口-Inline
type ReqBotInlineCall struct {
	Debug     *Debug `protobuf:"bytes,1,opt,name=debug" json:"debug,omitempty"`
	UserId    int32  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BotId     int32  `protobuf:"varint,3,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	MessageId uint64 `protobuf:"varint,4,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	KeyId     uint64 `protobuf:"varint,5,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	SessionId uint64 `protobuf:"varint,6,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Data      []byte `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	Id        string `protobuf:"bytes,8,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *ReqBotInlineCall) Reset()                    { *m = ReqBotInlineCall{} }
func (m *ReqBotInlineCall) String() string            { return proto.CompactTextString(m) }
func (*ReqBotInlineCall) ProtoMessage()               {}
func (*ReqBotInlineCall) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{64} }

func (m *ReqBotInlineCall) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *ReqBotInlineCall) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqBotInlineCall) GetBotId() int32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *ReqBotInlineCall) GetMessageId() uint64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *ReqBotInlineCall) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *ReqBotInlineCall) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *ReqBotInlineCall) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReqBotInlineCall) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// 机器人返回接口-Inline
type ReplyBotInlineCall struct {
	ErrCode    int32       `protobuf:"varint,1,opt,name=err_code,json=errCode,proto3" json:"err_code,omitempty"`
	Message    string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Inlinecall *InlineCall `protobuf:"bytes,3,opt,name=inlinecall" json:"inlinecall,omitempty"`
}

func (m *ReplyBotInlineCall) Reset()                    { *m = ReplyBotInlineCall{} }
func (m *ReplyBotInlineCall) String() string            { return proto.CompactTextString(m) }
func (*ReplyBotInlineCall) ProtoMessage()               {}
func (*ReplyBotInlineCall) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{65} }

func (m *ReplyBotInlineCall) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *ReplyBotInlineCall) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ReplyBotInlineCall) GetInlinecall() *InlineCall {
	if m != nil {
		return m.Inlinecall
	}
	return nil
}

type InlineCall struct {
	MsgId    int32 `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	FromId   int32 `protobuf:"varint,2,opt,name=FromId,proto3" json:"FromId,omitempty"`
	ChatId   int32 `protobuf:"varint,3,opt,name=ChatId,proto3" json:"ChatId,omitempty"`
	ChatType int32 `protobuf:"varint,4,opt,name=ChatType,proto3" json:"ChatType,omitempty"`
	BotId    int32 `protobuf:"varint,5,opt,name=BotId,proto3" json:"BotId,omitempty"`
}

func (m *InlineCall) Reset()                    { *m = InlineCall{} }
func (m *InlineCall) String() string            { return proto.CompactTextString(m) }
func (*InlineCall) ProtoMessage()               {}
func (*InlineCall) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{66} }

func (m *InlineCall) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *InlineCall) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *InlineCall) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *InlineCall) GetChatType() int32 {
	if m != nil {
		return m.ChatType
	}
	return 0
}

func (m *InlineCall) GetBotId() int32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

// 发送给对方所有端
type ReqSendUserMsg struct {
	Fromid    int32  `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	FromKeyId int64  `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	Toid      int32  `protobuf:"varint,3,opt,name=toid,proto3" json:"toid,omitempty"`
	Data      []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Debug     *Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqSendUserMsg) Reset()                    { *m = ReqSendUserMsg{} }
func (m *ReqSendUserMsg) String() string            { return proto.CompactTextString(m) }
func (*ReqSendUserMsg) ProtoMessage()               {}
func (*ReqSendUserMsg) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{67} }

func (m *ReqSendUserMsg) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqSendUserMsg) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *ReqSendUserMsg) GetToid() int32 {
	if m != nil {
		return m.Toid
	}
	return 0
}

func (m *ReqSendUserMsg) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReqSendUserMsg) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 置顶对话框返回
type ReplyBool struct {
	Result bool  `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32 `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyBool) Reset()                    { *m = ReplyBool{} }
func (m *ReplyBool) String() string            { return proto.CompactTextString(m) }
func (*ReplyBool) ProtoMessage()               {}
func (*ReplyBool) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{68} }

func (m *ReplyBool) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *ReplyBool) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// 机器人调用接口
type ReqBotCall struct {
	FrombotId int32  `protobuf:"varint,1,opt,name=frombotId,proto3" json:"frombotId,omitempty"`
	Request   []byte `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	Layer     int32  `protobuf:"varint,3,opt,name=layer,proto3" json:"layer,omitempty"`
	Debug     *Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqBotCall) Reset()                    { *m = ReqBotCall{} }
func (m *ReqBotCall) String() string            { return proto.CompactTextString(m) }
func (*ReqBotCall) ProtoMessage()               {}
func (*ReqBotCall) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{69} }

func (m *ReqBotCall) GetFrombotId() int32 {
	if m != nil {
		return m.FrombotId
	}
	return 0
}

func (m *ReqBotCall) GetRequest() []byte {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ReqBotCall) GetLayer() int32 {
	if m != nil {
		return m.Layer
	}
	return 0
}

func (m *ReqBotCall) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 机器人返回接口
type ReplyBotCall struct {
	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyBotCall) Reset()                    { *m = ReplyBotCall{} }
func (m *ReplyBotCall) String() string            { return proto.CompactTextString(m) }
func (*ReplyBotCall) ProtoMessage()               {}
func (*ReplyBotCall) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{70} }

func (m *ReplyBotCall) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyBotCall) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

type ReqGetMessageByUserIdUuid struct {
	UserId int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Uuid   int64  `protobuf:"varint,2,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	Debug  *Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqGetMessageByUserIdUuid) Reset()         { *m = ReqGetMessageByUserIdUuid{} }
func (m *ReqGetMessageByUserIdUuid) String() string { return proto.CompactTextString(m) }
func (*ReqGetMessageByUserIdUuid) ProtoMessage()    {}
func (*ReqGetMessageByUserIdUuid) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{71}
}

func (m *ReqGetMessageByUserIdUuid) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetMessageByUserIdUuid) GetUuid() int64 {
	if m != nil {
		return m.Uuid
	}
	return 0
}

func (m *ReqGetMessageByUserIdUuid) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetMessageByUserIdUuid struct {
	UserMessage *UserMsg `protobuf:"bytes,1,opt,name=UserMessage" json:"UserMessage,omitempty"`
	ErrorCode   int32    `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyGetMessageByUserIdUuid) Reset()         { *m = ReplyGetMessageByUserIdUuid{} }
func (m *ReplyGetMessageByUserIdUuid) String() string { return proto.CompactTextString(m) }
func (*ReplyGetMessageByUserIdUuid) ProtoMessage()    {}
func (*ReplyGetMessageByUserIdUuid) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{72}
}

func (m *ReplyGetMessageByUserIdUuid) GetUserMessage() *UserMsg {
	if m != nil {
		return m.UserMessage
	}
	return nil
}

func (m *ReplyGetMessageByUserIdUuid) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type ReqGetChannelMessageByChannelIdMsgId struct {
	ChannelId int32  `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	MsgId     int32  `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	Debug     *Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqGetChannelMessageByChannelIdMsgId) Reset()         { *m = ReqGetChannelMessageByChannelIdMsgId{} }
func (m *ReqGetChannelMessageByChannelIdMsgId) String() string { return proto.CompactTextString(m) }
func (*ReqGetChannelMessageByChannelIdMsgId) ProtoMessage()    {}
func (*ReqGetChannelMessageByChannelIdMsgId) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{73}
}

func (m *ReqGetChannelMessageByChannelIdMsgId) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetChannelMessageByChannelIdMsgId) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ReqGetChannelMessageByChannelIdMsgId) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetChannelMessageByChannelIdMsgId struct {
	UserMessage *UserMsg `protobuf:"bytes,1,opt,name=UserMessage" json:"UserMessage,omitempty"`
	ErrorCode   int32    `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyGetChannelMessageByChannelIdMsgId) Reset() {
	*m = ReplyGetChannelMessageByChannelIdMsgId{}
}
func (m *ReplyGetChannelMessageByChannelIdMsgId) String() string { return proto.CompactTextString(m) }
func (*ReplyGetChannelMessageByChannelIdMsgId) ProtoMessage()    {}
func (*ReplyGetChannelMessageByChannelIdMsgId) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{74}
}

func (m *ReplyGetChannelMessageByChannelIdMsgId) GetUserMessage() *UserMsg {
	if m != nil {
		return m.UserMessage
	}
	return nil
}

func (m *ReplyGetChannelMessageByChannelIdMsgId) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type ReqGetMessageByUserIdMsgId struct {
	UserId int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	MsgId  int32  `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	Debug  *Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqGetMessageByUserIdMsgId) Reset()         { *m = ReqGetMessageByUserIdMsgId{} }
func (m *ReqGetMessageByUserIdMsgId) String() string { return proto.CompactTextString(m) }
func (*ReqGetMessageByUserIdMsgId) ProtoMessage()    {}
func (*ReqGetMessageByUserIdMsgId) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{75}
}

func (m *ReqGetMessageByUserIdMsgId) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetMessageByUserIdMsgId) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ReqGetMessageByUserIdMsgId) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetMessageByUserIdMsgId struct {
	UserMessage *UserMsg `protobuf:"bytes,1,opt,name=UserMessage" json:"UserMessage,omitempty"`
	ErrorCode   int32    `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyGetMessageByUserIdMsgId) Reset()         { *m = ReplyGetMessageByUserIdMsgId{} }
func (m *ReplyGetMessageByUserIdMsgId) String() string { return proto.CompactTextString(m) }
func (*ReplyGetMessageByUserIdMsgId) ProtoMessage()    {}
func (*ReplyGetMessageByUserIdMsgId) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{76}
}

func (m *ReplyGetMessageByUserIdMsgId) GetUserMessage() *UserMsg {
	if m != nil {
		return m.UserMessage
	}
	return nil
}

func (m *ReplyGetMessageByUserIdMsgId) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// ###################################  storage_proto.pb.go  #############################
// 网关上传文件描述信息请求
type MsgFileDescReq struct {
	Fid        uint64 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	AccessHash uint64 `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Data       []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *MsgFileDescReq) Reset()                    { *m = MsgFileDescReq{} }
func (m *MsgFileDescReq) String() string            { return proto.CompactTextString(m) }
func (*MsgFileDescReq) ProtoMessage()               {}
func (*MsgFileDescReq) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{77} }

func (m *MsgFileDescReq) GetFid() uint64 {
	if m != nil {
		return m.Fid
	}
	return 0
}

func (m *MsgFileDescReq) GetAccessHash() uint64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *MsgFileDescReq) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// 网关上传文件描述信息响应
type MsgFileDescResp struct {
	Result ERpcResultCode `protobuf:"varint,1,opt,name=result,proto3,enum=imbotgateway.ERpcResultCode" json:"result,omitempty"`
}

func (m *MsgFileDescResp) Reset()                    { *m = MsgFileDescResp{} }
func (m *MsgFileDescResp) String() string            { return proto.CompactTextString(m) }
func (*MsgFileDescResp) ProtoMessage()               {}
func (*MsgFileDescResp) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{78} }

func (m *MsgFileDescResp) GetResult() ERpcResultCode {
	if m != nil {
		return m.Result
	}
	return ERpcResultCode_RRC_OK
}

// 服务上传下载限制请求
type MsgServiceLimitReq struct {
	Reserved uint32 `protobuf:"varint,1,opt,name=reserved,proto3" json:"reserved,omitempty"`
}

func (m *MsgServiceLimitReq) Reset()                    { *m = MsgServiceLimitReq{} }
func (m *MsgServiceLimitReq) String() string            { return proto.CompactTextString(m) }
func (*MsgServiceLimitReq) ProtoMessage()               {}
func (*MsgServiceLimitReq) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{79} }

func (m *MsgServiceLimitReq) GetReserved() uint32 {
	if m != nil {
		return m.Reserved
	}
	return 0
}

// 服务上传下载限制响应(单位：Byte)
type MsgServiceLimitResp struct {
	Usfsl  uint32 `protobuf:"varint,1,opt,name=usfsl,proto3" json:"usfsl,omitempty"`
	Ubfssl uint32 `protobuf:"varint,2,opt,name=ubfssl,proto3" json:"ubfssl,omitempty"`
	Dssl   uint32 `protobuf:"varint,3,opt,name=dssl,proto3" json:"dssl,omitempty"`
}

func (m *MsgServiceLimitResp) Reset()         { *m = MsgServiceLimitResp{} }
func (m *MsgServiceLimitResp) String() string { return proto.CompactTextString(m) }
func (*MsgServiceLimitResp) ProtoMessage()    {}
func (*MsgServiceLimitResp) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{80}
}

func (m *MsgServiceLimitResp) GetUsfsl() uint32 {
	if m != nil {
		return m.Usfsl
	}
	return 0
}

func (m *MsgServiceLimitResp) GetUbfssl() uint32 {
	if m != nil {
		return m.Ubfssl
	}
	return 0
}

func (m *MsgServiceLimitResp) GetDssl() uint32 {
	if m != nil {
		return m.Dssl
	}
	return 0
}

// 网关取Fid请求
type MsgGetFidReq struct {
	Keyid     uint64 `protobuf:"varint,1,opt,name=keyid,proto3" json:"keyid,omitempty"`
	Fileid    int64  `protobuf:"varint,2,opt,name=fileid,proto3" json:"fileid,omitempty"`
	FileType  uint32 `protobuf:"varint,3,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
	Md5       string `protobuf:"bytes,4,opt,name=md5,proto3" json:"md5,omitempty"`
	PartTotal uint32 `protobuf:"varint,5,opt,name=part_total,json=partTotal,proto3" json:"part_total,omitempty"`
}

func (m *MsgGetFidReq) Reset()                    { *m = MsgGetFidReq{} }
func (m *MsgGetFidReq) String() string            { return proto.CompactTextString(m) }
func (*MsgGetFidReq) ProtoMessage()               {}
func (*MsgGetFidReq) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{81} }

func (m *MsgGetFidReq) GetKeyid() uint64 {
	if m != nil {
		return m.Keyid
	}
	return 0
}

func (m *MsgGetFidReq) GetFileid() int64 {
	if m != nil {
		return m.Fileid
	}
	return 0
}

func (m *MsgGetFidReq) GetFileType() uint32 {
	if m != nil {
		return m.FileType
	}
	return 0
}

func (m *MsgGetFidReq) GetMd5() string {
	if m != nil {
		return m.Md5
	}
	return ""
}

func (m *MsgGetFidReq) GetPartTotal() uint32 {
	if m != nil {
		return m.PartTotal
	}
	return 0
}

// 网关取Fid响应
type MsgGetFidResp struct {
	Fid        uint64         `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	AccessHash uint64         `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	FileSize   uint64         `protobuf:"varint,3,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	Result     ERpcResultCode `protobuf:"varint,4,opt,name=result,proto3,enum=imbotgateway.ERpcResultCode" json:"result,omitempty"`
}

func (m *MsgGetFidResp) Reset()                    { *m = MsgGetFidResp{} }
func (m *MsgGetFidResp) String() string            { return proto.CompactTextString(m) }
func (*MsgGetFidResp) ProtoMessage()               {}
func (*MsgGetFidResp) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{82} }

func (m *MsgGetFidResp) GetFid() uint64 {
	if m != nil {
		return m.Fid
	}
	return 0
}

func (m *MsgGetFidResp) GetAccessHash() uint64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *MsgGetFidResp) GetFileSize() uint64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *MsgGetFidResp) GetResult() ERpcResultCode {
	if m != nil {
		return m.Result
	}
	return ERpcResultCode_RRC_OK
}

// 网关上传文件请求
type MsgFilePartsReq struct {
	Keyid     uint64 `protobuf:"varint,1,opt,name=keyid,proto3" json:"keyid,omitempty"`
	Fileid    int64  `protobuf:"varint,2,opt,name=fileid,proto3" json:"fileid,omitempty"`
	PartId    uint32 `protobuf:"varint,3,opt,name=part_id,json=partId,proto3" json:"part_id,omitempty"`
	FileType  uint32 `protobuf:"varint,4,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
	PartTotal uint32 `protobuf:"varint,5,opt,name=part_total,json=partTotal,proto3" json:"part_total,omitempty"`
	Data      []byte `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *MsgFilePartsReq) Reset()                    { *m = MsgFilePartsReq{} }
func (m *MsgFilePartsReq) String() string            { return proto.CompactTextString(m) }
func (*MsgFilePartsReq) ProtoMessage()               {}
func (*MsgFilePartsReq) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{83} }

func (m *MsgFilePartsReq) GetKeyid() uint64 {
	if m != nil {
		return m.Keyid
	}
	return 0
}

func (m *MsgFilePartsReq) GetFileid() int64 {
	if m != nil {
		return m.Fileid
	}
	return 0
}

func (m *MsgFilePartsReq) GetPartId() uint32 {
	if m != nil {
		return m.PartId
	}
	return 0
}

func (m *MsgFilePartsReq) GetFileType() uint32 {
	if m != nil {
		return m.FileType
	}
	return 0
}

func (m *MsgFilePartsReq) GetPartTotal() uint32 {
	if m != nil {
		return m.PartTotal
	}
	return 0
}

func (m *MsgFilePartsReq) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// 网关上传文件响应
type MsgFilePartsResp struct {
	Result ERpcResultCode `protobuf:"varint,1,opt,name=result,proto3,enum=imbotgateway.ERpcResultCode" json:"result,omitempty"`
}

func (m *MsgFilePartsResp) Reset()                    { *m = MsgFilePartsResp{} }
func (m *MsgFilePartsResp) String() string            { return proto.CompactTextString(m) }
func (*MsgFilePartsResp) ProtoMessage()               {}
func (*MsgFilePartsResp) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{84} }

func (m *MsgFilePartsResp) GetResult() ERpcResultCode {
	if m != nil {
		return m.Result
	}
	return ERpcResultCode_RRC_OK
}

// 上传文件请求
type MsgUploadFileReq struct {
	Para1 *UploadReqPara1 `protobuf:"bytes,1,opt,name=para1" json:"para1,omitempty"`
	Para2 *UploadReqPara2 `protobuf:"bytes,2,opt,name=para2" json:"para2,omitempty"`
	Data  []byte          `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *MsgUploadFileReq) Reset()                    { *m = MsgUploadFileReq{} }
func (m *MsgUploadFileReq) String() string            { return proto.CompactTextString(m) }
func (*MsgUploadFileReq) ProtoMessage()               {}
func (*MsgUploadFileReq) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{85} }

func (m *MsgUploadFileReq) GetPara1() *UploadReqPara1 {
	if m != nil {
		return m.Para1
	}
	return nil
}

func (m *MsgUploadFileReq) GetPara2() *UploadReqPara2 {
	if m != nil {
		return m.Para2
	}
	return nil
}

func (m *MsgUploadFileReq) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// 上传请求参数1（仅用于分片上传文件时）
type UploadReqPara1 struct {
	Fid      uint64 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	PartId   uint32 `protobuf:"varint,2,opt,name=part_id,json=partId,proto3" json:"part_id,omitempty"`
	PartSize uint32 `protobuf:"varint,3,opt,name=part_size,json=partSize,proto3" json:"part_size,omitempty"`
}

func (m *UploadReqPara1) Reset()                    { *m = UploadReqPara1{} }
func (m *UploadReqPara1) String() string            { return proto.CompactTextString(m) }
func (*UploadReqPara1) ProtoMessage()               {}
func (*UploadReqPara1) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{86} }

func (m *UploadReqPara1) GetFid() uint64 {
	if m != nil {
		return m.Fid
	}
	return 0
}

func (m *UploadReqPara1) GetPartId() uint32 {
	if m != nil {
		return m.PartId
	}
	return 0
}

func (m *UploadReqPara1) GetPartSize() uint32 {
	if m != nil {
		return m.PartSize
	}
	return 0
}

// 上传请求参数2（仅用于非分片上传文件时）
type UploadReqPara2 struct {
	FileName string `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FileSize uint32 `protobuf:"varint,2,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	FileHash string `protobuf:"bytes,3,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	Ttl      uint32 `protobuf:"varint,4,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (m *UploadReqPara2) Reset()                    { *m = UploadReqPara2{} }
func (m *UploadReqPara2) String() string            { return proto.CompactTextString(m) }
func (*UploadReqPara2) ProtoMessage()               {}
func (*UploadReqPara2) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{87} }

func (m *UploadReqPara2) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *UploadReqPara2) GetFileSize() uint32 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *UploadReqPara2) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

func (m *UploadReqPara2) GetTtl() uint32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

// 文件上传响应参数1（仅用于分片上传文件时）
type FileUploadRespPara struct {
	Fid    uint64 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	PartId uint32 `protobuf:"varint,2,opt,name=part_id,json=partId,proto3" json:"part_id,omitempty"`
}

func (m *FileUploadRespPara) Reset()                    { *m = FileUploadRespPara{} }
func (m *FileUploadRespPara) String() string            { return proto.CompactTextString(m) }
func (*FileUploadRespPara) ProtoMessage()               {}
func (*FileUploadRespPara) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{88} }

func (m *FileUploadRespPara) GetFid() uint64 {
	if m != nil {
		return m.Fid
	}
	return 0
}

func (m *FileUploadRespPara) GetPartId() uint32 {
	if m != nil {
		return m.PartId
	}
	return 0
}

// 上传文件响应
type MsgUploadFileResp struct {
	Result     ERpcResultCode      `protobuf:"varint,1,opt,name=result,proto3,enum=imbotgateway.ERpcResultCode" json:"result,omitempty"`
	Para1      *FileUploadRespPara `protobuf:"bytes,2,opt,name=para1" json:"para1,omitempty"`
	Para2      *FidPara            `protobuf:"bytes,3,opt,name=para2" json:"para2,omitempty"`
	AccessHash uint64              `protobuf:"varint,4,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
}

func (m *MsgUploadFileResp) Reset()                    { *m = MsgUploadFileResp{} }
func (m *MsgUploadFileResp) String() string            { return proto.CompactTextString(m) }
func (*MsgUploadFileResp) ProtoMessage()               {}
func (*MsgUploadFileResp) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{89} }

func (m *MsgUploadFileResp) GetResult() ERpcResultCode {
	if m != nil {
		return m.Result
	}
	return ERpcResultCode_RRC_OK
}

func (m *MsgUploadFileResp) GetPara1() *FileUploadRespPara {
	if m != nil {
		return m.Para1
	}
	return nil
}

func (m *MsgUploadFileResp) GetPara2() *FidPara {
	if m != nil {
		return m.Para2
	}
	return nil
}

func (m *MsgUploadFileResp) GetAccessHash() uint64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

// 下载文件请求
type MsgDownloadFileReq struct {
	Fid        uint64 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	AccessHash uint64 `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Offset     uint32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Length     uint32 `protobuf:"varint,4,opt,name=length,proto3" json:"length,omitempty"`
}

func (m *MsgDownloadFileReq) Reset()                    { *m = MsgDownloadFileReq{} }
func (m *MsgDownloadFileReq) String() string            { return proto.CompactTextString(m) }
func (*MsgDownloadFileReq) ProtoMessage()               {}
func (*MsgDownloadFileReq) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{90} }

func (m *MsgDownloadFileReq) GetFid() uint64 {
	if m != nil {
		return m.Fid
	}
	return 0
}

func (m *MsgDownloadFileReq) GetAccessHash() uint64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *MsgDownloadFileReq) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *MsgDownloadFileReq) GetLength() uint32 {
	if m != nil {
		return m.Length
	}
	return 0
}

// 下载文件响应参数1
type DownloadFileRespPara1 struct {
	Fid      uint64 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	Offset   uint32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	FileName string `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
}

func (m *DownloadFileRespPara1) Reset()         { *m = DownloadFileRespPara1{} }
func (m *DownloadFileRespPara1) String() string { return proto.CompactTextString(m) }
func (*DownloadFileRespPara1) ProtoMessage()    {}
func (*DownloadFileRespPara1) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{91}
}

func (m *DownloadFileRespPara1) GetFid() uint64 {
	if m != nil {
		return m.Fid
	}
	return 0
}

func (m *DownloadFileRespPara1) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *DownloadFileRespPara1) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

// 下载文件响应参数2
type DownloadFileRespPara2 struct {
	Length uint32 `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
	Data   []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *DownloadFileRespPara2) Reset()         { *m = DownloadFileRespPara2{} }
func (m *DownloadFileRespPara2) String() string { return proto.CompactTextString(m) }
func (*DownloadFileRespPara2) ProtoMessage()    {}
func (*DownloadFileRespPara2) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{92}
}

func (m *DownloadFileRespPara2) GetLength() uint32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *DownloadFileRespPara2) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// 下载文件响应
type MsgDownloadFileResp struct {
	Result ERpcResultCode         `protobuf:"varint,1,opt,name=result,proto3,enum=imbotgateway.ERpcResultCode" json:"result,omitempty"`
	Para1  *DownloadFileRespPara1 `protobuf:"bytes,2,opt,name=para1" json:"para1,omitempty"`
	Para2  *DownloadFileRespPara2 `protobuf:"bytes,3,opt,name=para2" json:"para2,omitempty"`
}

func (m *MsgDownloadFileResp) Reset()         { *m = MsgDownloadFileResp{} }
func (m *MsgDownloadFileResp) String() string { return proto.CompactTextString(m) }
func (*MsgDownloadFileResp) ProtoMessage()    {}
func (*MsgDownloadFileResp) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{93}
}

func (m *MsgDownloadFileResp) GetResult() ERpcResultCode {
	if m != nil {
		return m.Result
	}
	return ERpcResultCode_RRC_OK
}

func (m *MsgDownloadFileResp) GetPara1() *DownloadFileRespPara1 {
	if m != nil {
		return m.Para1
	}
	return nil
}

func (m *MsgDownloadFileResp) GetPara2() *DownloadFileRespPara2 {
	if m != nil {
		return m.Para2
	}
	return nil
}

// 查询对象信息请求
type MsgQueryObjInfoReq struct {
	Fid uint64 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
}

func (m *MsgQueryObjInfoReq) Reset()                    { *m = MsgQueryObjInfoReq{} }
func (m *MsgQueryObjInfoReq) String() string            { return proto.CompactTextString(m) }
func (*MsgQueryObjInfoReq) ProtoMessage()               {}
func (*MsgQueryObjInfoReq) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{94} }

func (m *MsgQueryObjInfoReq) GetFid() uint64 {
	if m != nil {
		return m.Fid
	}
	return 0
}

// 查询对象信息响应参数
type QueryObjInfoRespPara struct {
	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Size_      uint64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	AccessHash uint64 `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
}

func (m *QueryObjInfoRespPara) Reset()         { *m = QueryObjInfoRespPara{} }
func (m *QueryObjInfoRespPara) String() string { return proto.CompactTextString(m) }
func (*QueryObjInfoRespPara) ProtoMessage()    {}
func (*QueryObjInfoRespPara) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{95}
}

func (m *QueryObjInfoRespPara) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryObjInfoRespPara) GetSize_() uint64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *QueryObjInfoRespPara) GetAccessHash() uint64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

// 查询对象信息响应
type MsgQueryObjInfoResp struct {
	Para   *QueryObjInfoRespPara `protobuf:"bytes,1,opt,name=para" json:"para,omitempty"`
	Result ERpcResultCode        `protobuf:"varint,2,opt,name=result,proto3,enum=imbotgateway.ERpcResultCode" json:"result,omitempty"`
}

func (m *MsgQueryObjInfoResp) Reset()         { *m = MsgQueryObjInfoResp{} }
func (m *MsgQueryObjInfoResp) String() string { return proto.CompactTextString(m) }
func (*MsgQueryObjInfoResp) ProtoMessage()    {}
func (*MsgQueryObjInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{96}
}

func (m *MsgQueryObjInfoResp) GetPara() *QueryObjInfoRespPara {
	if m != nil {
		return m.Para
	}
	return nil
}

func (m *MsgQueryObjInfoResp) GetResult() ERpcResultCode {
	if m != nil {
		return m.Result
	}
	return ERpcResultCode_RRC_OK
}

// 网关获取文件描述信息请求
type MsgGetFileDescReq struct {
	Fid        uint64 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	AccessHash uint64 `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
}

func (m *MsgGetFileDescReq) Reset()                    { *m = MsgGetFileDescReq{} }
func (m *MsgGetFileDescReq) String() string            { return proto.CompactTextString(m) }
func (*MsgGetFileDescReq) ProtoMessage()               {}
func (*MsgGetFileDescReq) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{97} }

func (m *MsgGetFileDescReq) GetFid() uint64 {
	if m != nil {
		return m.Fid
	}
	return 0
}

func (m *MsgGetFileDescReq) GetAccessHash() uint64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

// 网关获取文件描述信息响应
type MsgGetFileDescResp struct {
	Result ERpcResultCode `protobuf:"varint,1,opt,name=result,proto3,enum=imbotgateway.ERpcResultCode" json:"result,omitempty"`
	Data   []byte         `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *MsgGetFileDescResp) Reset()                    { *m = MsgGetFileDescResp{} }
func (m *MsgGetFileDescResp) String() string            { return proto.CompactTextString(m) }
func (*MsgGetFileDescResp) ProtoMessage()               {}
func (*MsgGetFileDescResp) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{98} }

func (m *MsgGetFileDescResp) GetResult() ERpcResultCode {
	if m != nil {
		return m.Result
	}
	return ERpcResultCode_RRC_OK
}

func (m *MsgGetFileDescResp) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// ###################################  channelservice.pb.go  #############################
// 获取channel信息  不带user信息
type GetChannelInfoReq struct {
	ChannelId  int32  `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	AccessHash int64  `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Dlog       *Debug `protobuf:"bytes,3,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *GetChannelInfoReq) Reset()                    { *m = GetChannelInfoReq{} }
func (m *GetChannelInfoReq) String() string            { return proto.CompactTextString(m) }
func (*GetChannelInfoReq) ProtoMessage()               {}
func (*GetChannelInfoReq) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{99} }

func (m *GetChannelInfoReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *GetChannelInfoReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *GetChannelInfoReq) GetDlog() *Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 群基础信息
type GetChannelInfoResp struct {
	BaseInfo   *ChannelInfoBase `protobuf:"bytes,1,opt,name=baseInfo" json:"baseInfo,omitempty"`
	Resultcode ChatResultCode   `protobuf:"varint,2,opt,name=resultcode,proto3,enum=imbotgateway.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *GetChannelInfoResp) Reset()         { *m = GetChannelInfoResp{} }
func (m *GetChannelInfoResp) String() string { return proto.CompactTextString(m) }
func (*GetChannelInfoResp) ProtoMessage()    {}
func (*GetChannelInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{100}
}

func (m *GetChannelInfoResp) GetBaseInfo() *ChannelInfoBase {
	if m != nil {
		return m.BaseInfo
	}
	return nil
}

func (m *GetChannelInfoResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// ###################################  botserver.pb.go  #############################
type ReqGetAdminGroups struct {
	UserID int32 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	// int32 PeerFilter = 2; // 2：只要普通群 4：只要超级群 8：只要频道 （可相互组合 ex: 2|4|8 暂时不支持单聊)
	Debug *Debug `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqGetAdminGroups) Reset()                    { *m = ReqGetAdminGroups{} }
func (m *ReqGetAdminGroups) String() string            { return proto.CompactTextString(m) }
func (*ReqGetAdminGroups) ProtoMessage()               {}
func (*ReqGetAdminGroups) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{101} }

func (m *ReqGetAdminGroups) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *ReqGetAdminGroups) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqGetGroups struct {
	UserID     int32 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	PeerFilter int32 `protobuf:"varint,2,opt,name=PeerFilter,proto3" json:"PeerFilter,omitempty"`
}

func (m *ReqGetGroups) Reset()                    { *m = ReqGetGroups{} }
func (m *ReqGetGroups) String() string            { return proto.CompactTextString(m) }
func (*ReqGetGroups) ProtoMessage()               {}
func (*ReqGetGroups) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{102} }

func (m *ReqGetGroups) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *ReqGetGroups) GetPeerFilter() int32 {
	if m != nil {
		return m.PeerFilter
	}
	return 0
}

type Peer struct {
	PeerID   int32  `protobuf:"varint,1,opt,name=PeerID,proto3" json:"PeerID,omitempty"`
	PeerName string `protobuf:"bytes,2,opt,name=PeerName,proto3" json:"PeerName,omitempty"`
}

func (m *Peer) Reset()                    { *m = Peer{} }
func (m *Peer) String() string            { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()               {}
func (*Peer) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{103} }

func (m *Peer) GetPeerID() int32 {
	if m != nil {
		return m.PeerID
	}
	return 0
}

func (m *Peer) GetPeerName() string {
	if m != nil {
		return m.PeerName
	}
	return ""
}

type ReplyGetGroups struct {
	Groups      []*Peer `protobuf:"bytes,1,rep,name=Groups" json:"Groups,omitempty"`
	SuperGroups []*Peer `protobuf:"bytes,2,rep,name=SuperGroups" json:"SuperGroups,omitempty"`
	Channels    []*Peer `protobuf:"bytes,3,rep,name=Channels" json:"Channels,omitempty"`
}

func (m *ReplyGetGroups) Reset()                    { *m = ReplyGetGroups{} }
func (m *ReplyGetGroups) String() string            { return proto.CompactTextString(m) }
func (*ReplyGetGroups) ProtoMessage()               {}
func (*ReplyGetGroups) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{104} }

func (m *ReplyGetGroups) GetGroups() []*Peer {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *ReplyGetGroups) GetSuperGroups() []*Peer {
	if m != nil {
		return m.SuperGroups
	}
	return nil
}

func (m *ReplyGetGroups) GetChannels() []*Peer {
	if m != nil {
		return m.Channels
	}
	return nil
}

type ReqDeleteMessage struct {
	ChatType ChatType `protobuf:"varint,1,opt,name=ChatType,proto3,enum=imbotgateway.ChatType" json:"ChatType,omitempty"`
	UserId   int32    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChatId   int32    `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	MsgId    []int32  `protobuf:"varint,4,rep,packed,name=msg_id,json=msgId" json:"msg_id,omitempty"`
	Debug    *Debug   `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqDeleteMessage) Reset()                    { *m = ReqDeleteMessage{} }
func (m *ReqDeleteMessage) String() string            { return proto.CompactTextString(m) }
func (*ReqDeleteMessage) ProtoMessage()               {}
func (*ReqDeleteMessage) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{105} }

func (m *ReqDeleteMessage) GetChatType() ChatType {
	if m != nil {
		return m.ChatType
	}
	return ChatType_ChatTypeZero
}

func (m *ReqDeleteMessage) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqDeleteMessage) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *ReqDeleteMessage) GetMsgId() []int32 {
	if m != nil {
		return m.MsgId
	}
	return nil
}

func (m *ReqDeleteMessage) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqSendChatAction struct {
	ChatType   ChatType `protobuf:"varint,1,opt,name=ChatType,proto3,enum=imbotgateway.ChatType" json:"ChatType,omitempty"`
	UserId     int32    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChatId     int32    `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	ActionData []byte   `protobuf:"bytes,4,opt,name=actionData,proto3" json:"actionData,omitempty"`
	Debug      *Debug   `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqSendChatAction) Reset()                    { *m = ReqSendChatAction{} }
func (m *ReqSendChatAction) String() string            { return proto.CompactTextString(m) }
func (*ReqSendChatAction) ProtoMessage()               {}
func (*ReqSendChatAction) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{106} }

func (m *ReqSendChatAction) GetChatType() ChatType {
	if m != nil {
		return m.ChatType
	}
	return ChatType_ChatTypeZero
}

func (m *ReqSendChatAction) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqSendChatAction) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *ReqSendChatAction) GetActionData() []byte {
	if m != nil {
		return m.ActionData
	}
	return nil
}

func (m *ReqSendChatAction) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqData struct {
	ChatType ChatType `protobuf:"varint,1,opt,name=ChatType,proto3,enum=imbotgateway.ChatType" json:"ChatType,omitempty"`
	ReqData  []byte   `protobuf:"bytes,2,opt,name=reqData,proto3" json:"reqData,omitempty"`
	BotId    int32    `protobuf:"varint,3,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
}

func (m *ReqData) Reset()                    { *m = ReqData{} }
func (m *ReqData) String() string            { return proto.CompactTextString(m) }
func (*ReqData) ProtoMessage()               {}
func (*ReqData) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{107} }

func (m *ReqData) GetChatType() ChatType {
	if m != nil {
		return m.ChatType
	}
	return ChatType_ChatTypeZero
}

func (m *ReqData) GetReqData() []byte {
	if m != nil {
		return m.ReqData
	}
	return nil
}

func (m *ReqData) GetBotId() int32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

type ReplyData struct {
	Reply []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	Error int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyData) Reset()                    { *m = ReplyData{} }
func (m *ReplyData) String() string            { return proto.CompactTextString(m) }
func (*ReplyData) ProtoMessage()               {}
func (*ReplyData) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{108} }

func (m *ReplyData) GetReply() []byte {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *ReplyData) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

type ReqGetChatMembersCount struct {
	ChatType ChatType `protobuf:"varint,1,opt,name=ChatType,proto3,enum=imbotgateway.ChatType" json:"ChatType,omitempty"`
	UserId   int32    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChatId   int32    `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Debug    *Debug   `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqGetChatMembersCount) Reset()         { *m = ReqGetChatMembersCount{} }
func (m *ReqGetChatMembersCount) String() string { return proto.CompactTextString(m) }
func (*ReqGetChatMembersCount) ProtoMessage()    {}
func (*ReqGetChatMembersCount) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{109}
}

func (m *ReqGetChatMembersCount) GetChatType() ChatType {
	if m != nil {
		return m.ChatType
	}
	return ChatType_ChatTypeZero
}

func (m *ReqGetChatMembersCount) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetChatMembersCount) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *ReqGetChatMembersCount) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetChatMembersCount struct {
	ChatMembersCount int32 `protobuf:"varint,1,opt,name=ChatMembersCount,proto3" json:"ChatMembersCount,omitempty"`
	ErrorCode        int32 `protobuf:"varint,2,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *ReplyGetChatMembersCount) Reset()         { *m = ReplyGetChatMembersCount{} }
func (m *ReplyGetChatMembersCount) String() string { return proto.CompactTextString(m) }
func (*ReplyGetChatMembersCount) ProtoMessage()    {}
func (*ReplyGetChatMembersCount) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{110}
}

func (m *ReplyGetChatMembersCount) GetChatMembersCount() int32 {
	if m != nil {
		return m.ChatMembersCount
	}
	return 0
}

func (m *ReplyGetChatMembersCount) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// 通过群Id 用户Id 获取群基本信息
type GetChatInfoReq struct {
	ChatId   int32  `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	UserId   int32  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RobotGet bool   `protobuf:"varint,3,opt,name=robot_get,json=robotGet,proto3" json:"robot_get,omitempty"`
	Dlog     *Debug `protobuf:"bytes,4,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *GetChatInfoReq) Reset()                    { *m = GetChatInfoReq{} }
func (m *GetChatInfoReq) String() string            { return proto.CompactTextString(m) }
func (*GetChatInfoReq) ProtoMessage()               {}
func (*GetChatInfoReq) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{111} }

func (m *GetChatInfoReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *GetChatInfoReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetChatInfoReq) GetRobotGet() bool {
	if m != nil {
		return m.RobotGet
	}
	return false
}

func (m *GetChatInfoReq) GetDlog() *Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 获取用户信息、群、超级群信息的请求
type GetUsersChatsReq struct {
	Userid        int32   `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Users         []int32 `protobuf:"varint,2,rep,packed,name=users" json:"users,omitempty"`
	Chatid        []int32 `protobuf:"varint,3,rep,packed,name=chatid" json:"chatid,omitempty"`
	Channelid     []int32 `protobuf:"varint,4,rep,packed,name=channelid" json:"channelid,omitempty"`
	ProtocolLayer int32   `protobuf:"varint,5,opt,name=protocol_layer,json=protocolLayer,proto3" json:"protocol_layer,omitempty"`
	Dlog          *Debug  `protobuf:"bytes,6,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *GetUsersChatsReq) Reset()                    { *m = GetUsersChatsReq{} }
func (m *GetUsersChatsReq) String() string            { return proto.CompactTextString(m) }
func (*GetUsersChatsReq) ProtoMessage()               {}
func (*GetUsersChatsReq) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{112} }

func (m *GetUsersChatsReq) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *GetUsersChatsReq) GetUsers() []int32 {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *GetUsersChatsReq) GetChatid() []int32 {
	if m != nil {
		return m.Chatid
	}
	return nil
}

func (m *GetUsersChatsReq) GetChannelid() []int32 {
	if m != nil {
		return m.Channelid
	}
	return nil
}

func (m *GetUsersChatsReq) GetProtocolLayer() int32 {
	if m != nil {
		return m.ProtocolLayer
	}
	return 0
}

func (m *GetUsersChatsReq) GetDlog() *Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 获取用户信息、群、超级群信息的返回
type GetUsersChatsResult struct {
	// repeated ChannelInfoBase channels = 1;
	// repeated GetChatInfoResp chats = 3;
	Channels   [][]byte       `protobuf:"bytes,1,rep,name=channels" json:"channels,omitempty"`
	Users      *UserInfoArray `protobuf:"bytes,2,opt,name=users" json:"users,omitempty"`
	Chats      [][]byte       `protobuf:"bytes,3,rep,name=chats" json:"chats,omitempty"`
	NoChats    []int32        `protobuf:"varint,4,rep,packed,name=no_chats,json=noChats" json:"no_chats,omitempty"`
	NoChans    []int32        `protobuf:"varint,5,rep,packed,name=no_chans,json=noChans" json:"no_chans,omitempty"`
	Resultcode ChatResultCode `protobuf:"varint,6,opt,name=resultcode,proto3,enum=imbotgateway.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *GetUsersChatsResult) Reset()         { *m = GetUsersChatsResult{} }
func (m *GetUsersChatsResult) String() string { return proto.CompactTextString(m) }
func (*GetUsersChatsResult) ProtoMessage()    {}
func (*GetUsersChatsResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{113}
}

func (m *GetUsersChatsResult) GetChannels() [][]byte {
	if m != nil {
		return m.Channels
	}
	return nil
}

func (m *GetUsersChatsResult) GetUsers() *UserInfoArray {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *GetUsersChatsResult) GetChats() [][]byte {
	if m != nil {
		return m.Chats
	}
	return nil
}

func (m *GetUsersChatsResult) GetNoChats() []int32 {
	if m != nil {
		return m.NoChats
	}
	return nil
}

func (m *GetUsersChatsResult) GetNoChans() []int32 {
	if m != nil {
		return m.NoChans
	}
	return nil
}

func (m *GetUsersChatsResult) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// 根据用户id获取用户ID
type GetUserInfoByIdReq struct {
	SelfId int32  `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	UserId int32  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Debug  *Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetUserInfoByIdReq) Reset()         { *m = GetUserInfoByIdReq{} }
func (m *GetUserInfoByIdReq) String() string { return proto.CompactTextString(m) }
func (*GetUserInfoByIdReq) ProtoMessage()    {}
func (*GetUserInfoByIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{114}
}

func (m *GetUserInfoByIdReq) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *GetUserInfoByIdReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetUserInfoByIdReq) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type GetUserInfoByIdArrReq struct {
	SelfId  int32   `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	UserIds []int32 `protobuf:"varint,2,rep,packed,name=user_ids,json=userIds" json:"user_ids,omitempty"`
	Debug   *Debug  `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetUserInfoByIdArrReq) Reset()         { *m = GetUserInfoByIdArrReq{} }
func (m *GetUserInfoByIdArrReq) String() string { return proto.CompactTextString(m) }
func (*GetUserInfoByIdArrReq) ProtoMessage()    {}
func (*GetUserInfoByIdArrReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{115}
}

func (m *GetUserInfoByIdArrReq) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *GetUserInfoByIdArrReq) GetUserIds() []int32 {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func (m *GetUserInfoByIdArrReq) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 更新用户信息
type UpdateUserProfileReq struct {
	UserId    int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Flags     int32  `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	FirstName string `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	About     string `protobuf:"bytes,5,opt,name=about,proto3" json:"about,omitempty"`
	Debug     *Debug `protobuf:"bytes,6,opt,name=debug" json:"debug,omitempty"`
}

func (m *UpdateUserProfileReq) Reset()         { *m = UpdateUserProfileReq{} }
func (m *UpdateUserProfileReq) String() string { return proto.CompactTextString(m) }
func (*UpdateUserProfileReq) ProtoMessage()    {}
func (*UpdateUserProfileReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{116}
}

func (m *UpdateUserProfileReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateUserProfileReq) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *UpdateUserProfileReq) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *UpdateUserProfileReq) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *UpdateUserProfileReq) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *UpdateUserProfileReq) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 更新用户昵称等的返回结果
type UpdateUserProfileResult struct {
	Uinfo     *UserInfo `protobuf:"bytes,1,opt,name=Uinfo" json:"Uinfo,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imbotgateway.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *UpdateUserProfileResult) Reset()         { *m = UpdateUserProfileResult{} }
func (m *UpdateUserProfileResult) String() string { return proto.CompactTextString(m) }
func (*UpdateUserProfileResult) ProtoMessage()    {}
func (*UpdateUserProfileResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{117}
}

func (m *UpdateUserProfileResult) GetUinfo() *UserInfo {
	if m != nil {
		return m.Uinfo
	}
	return nil
}

func (m *UpdateUserProfileResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 根据用户电话号码来获取用户信息
type GetUserByphone struct {
	Phone string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	Debug *Debug `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetUserByphone) Reset()                    { *m = GetUserByphone{} }
func (m *GetUserByphone) String() string            { return proto.CompactTextString(m) }
func (*GetUserByphone) ProtoMessage()               {}
func (*GetUserByphone) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{118} }

func (m *GetUserByphone) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *GetUserByphone) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 获取用户基本信息的返回结果
type GetUserInfoResult struct {
	Uinfo     *UserInfo `protobuf:"bytes,1,opt,name=Uinfo" json:"Uinfo,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imbotgateway.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *GetUserInfoResult) Reset()                    { *m = GetUserInfoResult{} }
func (m *GetUserInfoResult) String() string            { return proto.CompactTextString(m) }
func (*GetUserInfoResult) ProtoMessage()               {}
func (*GetUserInfoResult) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{119} }

func (m *GetUserInfoResult) GetUinfo() *UserInfo {
	if m != nil {
		return m.Uinfo
	}
	return nil
}

func (m *GetUserInfoResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

type UpdateBotInfoSuppReq struct {
	UserId      int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Placeholder string `protobuf:"bytes,2,opt,name=Placeholder,proto3" json:"Placeholder,omitempty"`
	Geo         bool   `protobuf:"varint,3,opt,name=geo,proto3" json:"geo,omitempty"`
	Debug       *Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *UpdateBotInfoSuppReq) Reset()         { *m = UpdateBotInfoSuppReq{} }
func (m *UpdateBotInfoSuppReq) String() string { return proto.CompactTextString(m) }
func (*UpdateBotInfoSuppReq) ProtoMessage()    {}
func (*UpdateBotInfoSuppReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{120}
}

func (m *UpdateBotInfoSuppReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateBotInfoSuppReq) GetPlaceholder() string {
	if m != nil {
		return m.Placeholder
	}
	return ""
}

func (m *UpdateBotInfoSuppReq) GetGeo() bool {
	if m != nil {
		return m.Geo
	}
	return false
}

func (m *UpdateBotInfoSuppReq) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type UpdateBotInfoSuppResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=imbotgateway.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *UpdateBotInfoSuppResult) Reset()         { *m = UpdateBotInfoSuppResult{} }
func (m *UpdateBotInfoSuppResult) String() string { return proto.CompactTextString(m) }
func (*UpdateBotInfoSuppResult) ProtoMessage()    {}
func (*UpdateBotInfoSuppResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{121}
}

func (m *UpdateBotInfoSuppResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 机器人基础信息更改
type BotUpdateInfo struct {
	UserId         int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BotInfoVersion int32  `protobuf:"varint,2,opt,name=bot_info_version,json=botInfoVersion,proto3" json:"bot_info_version,omitempty"`
	BotChatHistory bool   `protobuf:"varint,3,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNoChat      bool   `protobuf:"varint,4,opt,name=bot_no_chat,json=botNoChat,proto3" json:"bot_no_chat,omitempty"`
	Debug          *Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *BotUpdateInfo) Reset()                    { *m = BotUpdateInfo{} }
func (m *BotUpdateInfo) String() string            { return proto.CompactTextString(m) }
func (*BotUpdateInfo) ProtoMessage()               {}
func (*BotUpdateInfo) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{122} }

func (m *BotUpdateInfo) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *BotUpdateInfo) GetBotInfoVersion() int32 {
	if m != nil {
		return m.BotInfoVersion
	}
	return 0
}

func (m *BotUpdateInfo) GetBotChatHistory() bool {
	if m != nil {
		return m.BotChatHistory
	}
	return false
}

func (m *BotUpdateInfo) GetBotNoChat() bool {
	if m != nil {
		return m.BotNoChat
	}
	return false
}

func (m *BotUpdateInfo) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 机器人更改信息的返回结果
type BotUpdateInfoResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=imbotgateway.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *BotUpdateInfoResult) Reset()         { *m = BotUpdateInfoResult{} }
func (m *BotUpdateInfoResult) String() string { return proto.CompactTextString(m) }
func (*BotUpdateInfoResult) ProtoMessage()    {}
func (*BotUpdateInfoResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{123}
}

func (m *BotUpdateInfoResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 更新机器人头像请求
type UpdateBotPicRequest struct {
	BotId int32  `protobuf:"varint,1,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	Photo []byte `protobuf:"bytes,2,opt,name=photo,proto3" json:"photo,omitempty"`
	Debug *Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *UpdateBotPicRequest) Reset()         { *m = UpdateBotPicRequest{} }
func (m *UpdateBotPicRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateBotPicRequest) ProtoMessage()    {}
func (*UpdateBotPicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{124}
}

func (m *UpdateBotPicRequest) GetBotId() int32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *UpdateBotPicRequest) GetPhoto() []byte {
	if m != nil {
		return m.Photo
	}
	return nil
}

func (m *UpdateBotPicRequest) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type UpdateBotPicResult struct {
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imbotgateway.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *UpdateBotPicResult) Reset()         { *m = UpdateBotPicResult{} }
func (m *UpdateBotPicResult) String() string { return proto.CompactTextString(m) }
func (*UpdateBotPicResult) ProtoMessage()    {}
func (*UpdateBotPicResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{125}
}

func (m *UpdateBotPicResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 更新用户的username的请求
type UpdateuserNameReq struct {
	UserId   int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	Debug    *Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
	KeyId    int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (m *UpdateuserNameReq) Reset()                    { *m = UpdateuserNameReq{} }
func (m *UpdateuserNameReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateuserNameReq) ProtoMessage()               {}
func (*UpdateuserNameReq) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{126} }

func (m *UpdateuserNameReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateuserNameReq) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *UpdateuserNameReq) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *UpdateuserNameReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

// 更新用户的username的返回结果
type UpdateuserNameResult struct {
	Uinfo     *UserInfo `protobuf:"bytes,1,opt,name=Uinfo" json:"Uinfo,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imbotgateway.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *UpdateuserNameResult) Reset()         { *m = UpdateuserNameResult{} }
func (m *UpdateuserNameResult) String() string { return proto.CompactTextString(m) }
func (*UpdateuserNameResult) ProtoMessage()    {}
func (*UpdateuserNameResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{127}
}

func (m *UpdateuserNameResult) GetUinfo() *UserInfo {
	if m != nil {
		return m.Uinfo
	}
	return nil
}

func (m *UpdateuserNameResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 注册指定用户的请求
type RegisterUserInfoReq struct {
	UserId         int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccessHash     int64  `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	PhoneNumber    string `protobuf:"bytes,3,opt,name=PhoneNumber,proto3" json:"PhoneNumber,omitempty"`
	FirstName      string `protobuf:"bytes,4,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	LastName       string `protobuf:"bytes,5,opt,name=LastName,proto3" json:"LastName,omitempty"`
	IsBot          bool   `protobuf:"varint,6,opt,name=is_bot,json=isBot,proto3" json:"is_bot,omitempty"`
	BotInfoVersion int32  `protobuf:"varint,7,opt,name=bot_info_version,json=botInfoVersion,proto3" json:"bot_info_version,omitempty"`
	BotChatHistory bool   `protobuf:"varint,8,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNoChats     bool   `protobuf:"varint,9,opt,name=bot_no_chats,json=botNoChats,proto3" json:"bot_no_chats,omitempty"`
	Debug          *Debug `protobuf:"bytes,10,opt,name=debug" json:"debug,omitempty"`
}

func (m *RegisterUserInfoReq) Reset()         { *m = RegisterUserInfoReq{} }
func (m *RegisterUserInfoReq) String() string { return proto.CompactTextString(m) }
func (*RegisterUserInfoReq) ProtoMessage()    {}
func (*RegisterUserInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{128}
}

func (m *RegisterUserInfoReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *RegisterUserInfoReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *RegisterUserInfoReq) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *RegisterUserInfoReq) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *RegisterUserInfoReq) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *RegisterUserInfoReq) GetIsBot() bool {
	if m != nil {
		return m.IsBot
	}
	return false
}

func (m *RegisterUserInfoReq) GetBotInfoVersion() int32 {
	if m != nil {
		return m.BotInfoVersion
	}
	return 0
}

func (m *RegisterUserInfoReq) GetBotChatHistory() bool {
	if m != nil {
		return m.BotChatHistory
	}
	return false
}

func (m *RegisterUserInfoReq) GetBotNoChats() bool {
	if m != nil {
		return m.BotNoChats
	}
	return false
}

func (m *RegisterUserInfoReq) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 注册指定用户的请求
type RegisterUserInfoResult struct {
	Uinfo     *UserInfo `protobuf:"bytes,1,opt,name=uinfo" json:"uinfo,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imbotgateway.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *RegisterUserInfoResult) Reset()         { *m = RegisterUserInfoResult{} }
func (m *RegisterUserInfoResult) String() string { return proto.CompactTextString(m) }
func (*RegisterUserInfoResult) ProtoMessage()    {}
func (*RegisterUserInfoResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{129}
}

func (m *RegisterUserInfoResult) GetUinfo() *UserInfo {
	if m != nil {
		return m.Uinfo
	}
	return nil
}

func (m *RegisterUserInfoResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 删除账号的请求
type DeleteAccountByIdReq struct {
	UserId int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DelId  int32  `protobuf:"varint,2,opt,name=del_id,json=delId,proto3" json:"del_id,omitempty"`
	Debug  *Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *DeleteAccountByIdReq) Reset()         { *m = DeleteAccountByIdReq{} }
func (m *DeleteAccountByIdReq) String() string { return proto.CompactTextString(m) }
func (*DeleteAccountByIdReq) ProtoMessage()    {}
func (*DeleteAccountByIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{130}
}

func (m *DeleteAccountByIdReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DeleteAccountByIdReq) GetDelId() int32 {
	if m != nil {
		return m.DelId
	}
	return 0
}

func (m *DeleteAccountByIdReq) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 删除账号的返回结果
type DelAccountResult struct {
	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=imbotgateway.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *DelAccountResult) Reset()                    { *m = DelAccountResult{} }
func (m *DelAccountResult) String() string            { return proto.CompactTextString(m) }
func (*DelAccountResult) ProtoMessage()               {}
func (*DelAccountResult) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{131} }

func (m *DelAccountResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 用户注册的请求结构
type SignUpReq struct {
	PhoneNumber    string `protobuf:"bytes,1,opt,name=PhoneNumber,proto3" json:"PhoneNumber,omitempty"`
	PhoneCodeHash  string `protobuf:"bytes,2,opt,name=PhoneCodeHash,proto3" json:"PhoneCodeHash,omitempty"`
	PhoneCode      string `protobuf:"bytes,3,opt,name=PhoneCode,proto3" json:"PhoneCode,omitempty"`
	KeyId          int64  `protobuf:"varint,5,opt,name=keyId,proto3" json:"keyId,omitempty"`
	FirstName      string `protobuf:"bytes,6,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	LastName       string `protobuf:"bytes,7,opt,name=LastName,proto3" json:"LastName,omitempty"`
	IsBot          bool   `protobuf:"varint,8,opt,name=is_bot,json=isBot,proto3" json:"is_bot,omitempty"`
	BotInfoVersion int32  `protobuf:"varint,9,opt,name=bot_info_version,json=botInfoVersion,proto3" json:"bot_info_version,omitempty"`
	BotChatHistory bool   `protobuf:"varint,10,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNoChats     bool   `protobuf:"varint,11,opt,name=bot_no_chats,json=botNoChats,proto3" json:"bot_no_chats,omitempty"`
	DcId           int32  `protobuf:"varint,12,opt,name=dc_id,json=dcId,proto3" json:"dc_id,omitempty"`
	Debug          *Debug `protobuf:"bytes,13,opt,name=debug" json:"debug,omitempty"`
	CountryCode    string `protobuf:"bytes,14,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	LocalPhone     string `protobuf:"bytes,15,opt,name=local_phone,json=localPhone,proto3" json:"local_phone,omitempty"`
}

func (m *SignUpReq) Reset()                    { *m = SignUpReq{} }
func (m *SignUpReq) String() string            { return proto.CompactTextString(m) }
func (*SignUpReq) ProtoMessage()               {}
func (*SignUpReq) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{132} }

func (m *SignUpReq) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *SignUpReq) GetPhoneCodeHash() string {
	if m != nil {
		return m.PhoneCodeHash
	}
	return ""
}

func (m *SignUpReq) GetPhoneCode() string {
	if m != nil {
		return m.PhoneCode
	}
	return ""
}

func (m *SignUpReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *SignUpReq) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *SignUpReq) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *SignUpReq) GetIsBot() bool {
	if m != nil {
		return m.IsBot
	}
	return false
}

func (m *SignUpReq) GetBotInfoVersion() int32 {
	if m != nil {
		return m.BotInfoVersion
	}
	return 0
}

func (m *SignUpReq) GetBotChatHistory() bool {
	if m != nil {
		return m.BotChatHistory
	}
	return false
}

func (m *SignUpReq) GetBotNoChats() bool {
	if m != nil {
		return m.BotNoChats
	}
	return false
}

func (m *SignUpReq) GetDcId() int32 {
	if m != nil {
		return m.DcId
	}
	return 0
}

func (m *SignUpReq) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *SignUpReq) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *SignUpReq) GetLocalPhone() string {
	if m != nil {
		return m.LocalPhone
	}
	return ""
}

type AuthSignUpResult struct {
	Code     AuthSignUpResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=imbotgateway.AuthSignUpResult_ResultCode" json:"code,omitempty"`
	UserInfo *UserInfo                   `protobuf:"bytes,2,opt,name=userInfo" json:"userInfo,omitempty"`
}

func (m *AuthSignUpResult) Reset()                    { *m = AuthSignUpResult{} }
func (m *AuthSignUpResult) String() string            { return proto.CompactTextString(m) }
func (*AuthSignUpResult) ProtoMessage()               {}
func (*AuthSignUpResult) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{133} }

func (m *AuthSignUpResult) GetCode() AuthSignUpResult_ResultCode {
	if m != nil {
		return m.Code
	}
	return AuthSignUpResult_Success
}

func (m *AuthSignUpResult) GetUserInfo() *UserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

// getfull user的请求
type GetFullUserReq struct {
	SelfId     int32  `protobuf:"varint,1,opt,name=selfId,proto3" json:"selfId,omitempty"`
	UserId     int32  `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	AccessHash int64  `protobuf:"varint,3,opt,name=AccessHash,proto3" json:"AccessHash,omitempty"`
	Debug      *Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetFullUserReq) Reset()                    { *m = GetFullUserReq{} }
func (m *GetFullUserReq) String() string            { return proto.CompactTextString(m) }
func (*GetFullUserReq) ProtoMessage()               {}
func (*GetFullUserReq) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{134} }

func (m *GetFullUserReq) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *GetFullUserReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetFullUserReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *GetFullUserReq) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// getfull user的请求
type GetFullUserResult struct {
	Uinfo               *UserInfo `protobuf:"bytes,1,opt,name=uinfo" json:"uinfo,omitempty"`
	Isblocked           bool      `protobuf:"varint,2,opt,name=isblocked,proto3" json:"isblocked,omitempty"`
	PhoneCallsPrivate   bool      `protobuf:"varint,3,opt,name=phone_calls_private,json=phoneCallsPrivate,proto3" json:"phone_calls_private,omitempty"`
	PhoneCallsAvailable bool      `protobuf:"varint,4,opt,name=phone_calls_available,json=phoneCallsAvailable,proto3" json:"phone_calls_available,omitempty"`
	About               string    `protobuf:"bytes,5,opt,name=about,proto3" json:"about,omitempty"`
	CommonChat          int32     `protobuf:"varint,6,opt,name=common_chat,json=commonChat,proto3" json:"common_chat,omitempty"`
	Errorcode           ReErrCode `protobuf:"varint,7,opt,name=Errorcode,proto3,enum=imbotgateway.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *GetFullUserResult) Reset()                    { *m = GetFullUserResult{} }
func (m *GetFullUserResult) String() string            { return proto.CompactTextString(m) }
func (*GetFullUserResult) ProtoMessage()               {}
func (*GetFullUserResult) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{135} }

func (m *GetFullUserResult) GetUinfo() *UserInfo {
	if m != nil {
		return m.Uinfo
	}
	return nil
}

func (m *GetFullUserResult) GetIsblocked() bool {
	if m != nil {
		return m.Isblocked
	}
	return false
}

func (m *GetFullUserResult) GetPhoneCallsPrivate() bool {
	if m != nil {
		return m.PhoneCallsPrivate
	}
	return false
}

func (m *GetFullUserResult) GetPhoneCallsAvailable() bool {
	if m != nil {
		return m.PhoneCallsAvailable
	}
	return false
}

func (m *GetFullUserResult) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *GetFullUserResult) GetCommonChat() int32 {
	if m != nil {
		return m.CommonChat
	}
	return 0
}

func (m *GetFullUserResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

// 根据用户userName来获取用户基本信息
type GetUserByUsername struct {
	SelfId   int32  `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Debug    *Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetUserByUsername) Reset()                    { *m = GetUserByUsername{} }
func (m *GetUserByUsername) String() string            { return proto.CompactTextString(m) }
func (*GetUserByUsername) ProtoMessage()               {}
func (*GetUserByUsername) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{136} }

func (m *GetUserByUsername) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *GetUserByUsername) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *GetUserByUsername) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 获取群的完整信息
type ReqGetFullChat struct {
	Fromid int32  `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	Chatid int32  `protobuf:"varint,2,opt,name=chatid,proto3" json:"chatid,omitempty"`
	Debug  *Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqGetFullChat) Reset()                    { *m = ReqGetFullChat{} }
func (m *ReqGetFullChat) String() string            { return proto.CompactTextString(m) }
func (*ReqGetFullChat) ProtoMessage()               {}
func (*ReqGetFullChat) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{137} }

func (m *ReqGetFullChat) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqGetFullChat) GetChatid() int32 {
	if m != nil {
		return m.Chatid
	}
	return 0
}

func (m *ReqGetFullChat) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetFullChat struct {
	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyGetFullChat) Reset()                    { *m = ReplyGetFullChat{} }
func (m *ReplyGetFullChat) String() string            { return proto.CompactTextString(m) }
func (*ReplyGetFullChat) ProtoMessage()               {}
func (*ReplyGetFullChat) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{138} }

func (m *ReplyGetFullChat) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyGetFullChat) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// 退出超级群
type ReqLeaveChannel struct {
	ChannelId int32  `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	UserId    int32  `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	FromKeyid int64  `protobuf:"varint,3,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqLeaveChannel) Reset()                    { *m = ReqLeaveChannel{} }
func (m *ReqLeaveChannel) String() string            { return proto.CompactTextString(m) }
func (*ReqLeaveChannel) ProtoMessage()               {}
func (*ReqLeaveChannel) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{139} }

func (m *ReqLeaveChannel) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqLeaveChannel) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqLeaveChannel) GetFromKeyid() int64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqLeaveChannel) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 推出超级群返回
type ReplyLeaveChannel struct {
	Reply     []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyLeaveChannel) Reset()                    { *m = ReplyLeaveChannel{} }
func (m *ReplyLeaveChannel) String() string            { return proto.CompactTextString(m) }
func (*ReplyLeaveChannel) ProtoMessage()               {}
func (*ReplyLeaveChannel) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{140} }

func (m *ReplyLeaveChannel) GetReply() []byte {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *ReplyLeaveChannel) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// 发送媒体
type ReqSendMedia struct {
	Fromid       int32    `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	Flags        int32    `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	Silent       bool     `protobuf:"varint,3,opt,name=silent,proto3" json:"silent,omitempty"`
	Background   bool     `protobuf:"varint,4,opt,name=background,proto3" json:"background,omitempty"`
	ClearDraft   bool     `protobuf:"varint,5,opt,name=clear_draft,json=clearDraft,proto3" json:"clear_draft,omitempty"`
	Peer         []byte   `protobuf:"bytes,6,opt,name=peer,proto3" json:"peer,omitempty"`
	ReplyToMsgId int32    `protobuf:"varint,7,opt,name=reply_to_msg_id,json=replyToMsgId,proto3" json:"reply_to_msg_id,omitempty"`
	Media        []byte   `protobuf:"bytes,8,opt,name=media,proto3" json:"media,omitempty"`
	MultiMedia   [][]byte `protobuf:"bytes,9,rep,name=multi_media,json=multiMedia" json:"multi_media,omitempty"`
	RandomId     int64    `protobuf:"varint,10,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	ReplyMarkup  []byte   `protobuf:"bytes,11,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`
	Newfileid    int64    `protobuf:"varint,12,opt,name=newfileid,proto3" json:"newfileid,omitempty"`
	FromkeyId    uint64   `protobuf:"varint,13,opt,name=fromkey_id,json=fromkeyId,proto3" json:"fromkey_id,omitempty"`
	Chatmeber    []int32  `protobuf:"varint,14,rep,packed,name=chatmeber" json:"chatmeber,omitempty"`
	Debug        *Debug   `protobuf:"bytes,15,opt,name=debug" json:"debug,omitempty"`
	ViaBotId     int32    `protobuf:"varint,16,opt,name=via_bot_id,json=viaBotId,proto3" json:"via_bot_id,omitempty"`
}

func (m *ReqSendMedia) Reset()                    { *m = ReqSendMedia{} }
func (m *ReqSendMedia) String() string            { return proto.CompactTextString(m) }
func (*ReqSendMedia) ProtoMessage()               {}
func (*ReqSendMedia) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{141} }

func (m *ReqSendMedia) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqSendMedia) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ReqSendMedia) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *ReqSendMedia) GetBackground() bool {
	if m != nil {
		return m.Background
	}
	return false
}

func (m *ReqSendMedia) GetClearDraft() bool {
	if m != nil {
		return m.ClearDraft
	}
	return false
}

func (m *ReqSendMedia) GetPeer() []byte {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *ReqSendMedia) GetReplyToMsgId() int32 {
	if m != nil {
		return m.ReplyToMsgId
	}
	return 0
}

func (m *ReqSendMedia) GetMedia() []byte {
	if m != nil {
		return m.Media
	}
	return nil
}

func (m *ReqSendMedia) GetMultiMedia() [][]byte {
	if m != nil {
		return m.MultiMedia
	}
	return nil
}

func (m *ReqSendMedia) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *ReqSendMedia) GetReplyMarkup() []byte {
	if m != nil {
		return m.ReplyMarkup
	}
	return nil
}

func (m *ReqSendMedia) GetNewfileid() int64 {
	if m != nil {
		return m.Newfileid
	}
	return 0
}

func (m *ReqSendMedia) GetFromkeyId() uint64 {
	if m != nil {
		return m.FromkeyId
	}
	return 0
}

func (m *ReqSendMedia) GetChatmeber() []int32 {
	if m != nil {
		return m.Chatmeber
	}
	return nil
}

func (m *ReqSendMedia) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *ReqSendMedia) GetViaBotId() int32 {
	if m != nil {
		return m.ViaBotId
	}
	return 0
}

// 状态返回
type ReplyResult struct {
	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyResult) Reset()                    { *m = ReplyResult{} }
func (m *ReplyResult) String() string            { return proto.CompactTextString(m) }
func (*ReplyResult) ProtoMessage()               {}
func (*ReplyResult) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{142} }

func (m *ReplyResult) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyResult) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// 编辑群名字
type ReqEditChatTitle struct {
	Fromid    int32  `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	Chatid    int32  `protobuf:"varint,2,opt,name=chatid,proto3" json:"chatid,omitempty"`
	Title     string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	FromKeyid uint64 `protobuf:"varint,4,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqEditChatTitle) Reset()                    { *m = ReqEditChatTitle{} }
func (m *ReqEditChatTitle) String() string            { return proto.CompactTextString(m) }
func (*ReqEditChatTitle) ProtoMessage()               {}
func (*ReqEditChatTitle) Descriptor() ([]byte, []int) { return fileDescriptorImbotgateway, []int{143} }

func (m *ReqEditChatTitle) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqEditChatTitle) GetChatid() int32 {
	if m != nil {
		return m.Chatid
	}
	return 0
}

func (m *ReqEditChatTitle) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ReqEditChatTitle) GetFromKeyid() uint64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqEditChatTitle) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyEditChatTitle struct {
	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,5,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyEditChatTitle) Reset()         { *m = ReplyEditChatTitle{} }
func (m *ReplyEditChatTitle) String() string { return proto.CompactTextString(m) }
func (*ReplyEditChatTitle) ProtoMessage()    {}
func (*ReplyEditChatTitle) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{144}
}

func (m *ReplyEditChatTitle) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyEditChatTitle) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// 获取一个sticker下面的所有贴图信息的请求
type GetStickerSetPackDcInfosReq struct {
	Id    int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Debug *Debug `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetStickerSetPackDcInfosReq) Reset()         { *m = GetStickerSetPackDcInfosReq{} }
func (m *GetStickerSetPackDcInfosReq) String() string { return proto.CompactTextString(m) }
func (*GetStickerSetPackDcInfosReq) ProtoMessage()    {}
func (*GetStickerSetPackDcInfosReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{145}
}

func (m *GetStickerSetPackDcInfosReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetStickerSetPackDcInfosReq) GetDebug() *Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 获取一个sticker下面的所有贴图信息的返回
type GetStickerSetPackDcInfosResult struct {
	StPDcInfo []*StickerPackDocumentInfo `protobuf:"bytes,1,rep,name=StPDcInfo" json:"StPDcInfo,omitempty"`
}

func (m *GetStickerSetPackDcInfosResult) Reset()         { *m = GetStickerSetPackDcInfosResult{} }
func (m *GetStickerSetPackDcInfosResult) String() string { return proto.CompactTextString(m) }
func (*GetStickerSetPackDcInfosResult) ProtoMessage()    {}
func (*GetStickerSetPackDcInfosResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{146}
}

func (m *GetStickerSetPackDcInfosResult) GetStPDcInfo() []*StickerPackDocumentInfo {
	if m != nil {
		return m.StPDcInfo
	}
	return nil
}

// sticker集合里面具体内容
// 存储单个sticker内容请求
type StickerPackDocumentBase struct {
	AttributesStikerSetId         int64  `protobuf:"varint,1,opt,name=attributes_stiker_set_id,json=attributesStikerSetId,proto3" json:"attributes_stiker_set_id,omitempty"`
	DocumentId                    uint64 `protobuf:"varint,2,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	AccessHash                    int64  `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	MimeType                      string `protobuf:"bytes,4,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	Size_                         int32  `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	Thumb                         string `protobuf:"bytes,6,opt,name=thumb,proto3" json:"thumb,omitempty"`
	DcId                          int32  `protobuf:"varint,7,opt,name=dc_id,json=dcId,proto3" json:"dc_id,omitempty"`
	Date                          int32  `protobuf:"varint,8,opt,name=date,proto3" json:"date,omitempty"`
	AttributesImageSizeW          int32  `protobuf:"varint,9,opt,name=attributes_image_size_w,json=attributesImageSizeW,proto3" json:"attributes_image_size_w,omitempty"`
	AttributesImageSizeH          int32  `protobuf:"varint,10,opt,name=attributes_image_size_h,json=attributesImageSizeH,proto3" json:"attributes_image_size_h,omitempty"`
	AttributesStikerAlt           string `protobuf:"bytes,11,opt,name=attributes_stiker_alt,json=attributesStikerAlt,proto3" json:"attributes_stiker_alt,omitempty"`
	AttributesStikerSetAccessHash int64  `protobuf:"varint,12,opt,name=attributes_stiker_set_access_hash,json=attributesStikerSetAccessHash,proto3" json:"attributes_stiker_set_access_hash,omitempty"`
	AttributesFileName            string `protobuf:"bytes,13,opt,name=attributes_file_name,json=attributesFileName,proto3" json:"attributes_file_name,omitempty"`
}

func (m *StickerPackDocumentBase) Reset()         { *m = StickerPackDocumentBase{} }
func (m *StickerPackDocumentBase) String() string { return proto.CompactTextString(m) }
func (*StickerPackDocumentBase) ProtoMessage()    {}
func (*StickerPackDocumentBase) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{147}
}

func (m *StickerPackDocumentBase) GetAttributesStikerSetId() int64 {
	if m != nil {
		return m.AttributesStikerSetId
	}
	return 0
}

func (m *StickerPackDocumentBase) GetDocumentId() uint64 {
	if m != nil {
		return m.DocumentId
	}
	return 0
}

func (m *StickerPackDocumentBase) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *StickerPackDocumentBase) GetMimeType() string {
	if m != nil {
		return m.MimeType
	}
	return ""
}

func (m *StickerPackDocumentBase) GetSize_() int32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *StickerPackDocumentBase) GetThumb() string {
	if m != nil {
		return m.Thumb
	}
	return ""
}

func (m *StickerPackDocumentBase) GetDcId() int32 {
	if m != nil {
		return m.DcId
	}
	return 0
}

func (m *StickerPackDocumentBase) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *StickerPackDocumentBase) GetAttributesImageSizeW() int32 {
	if m != nil {
		return m.AttributesImageSizeW
	}
	return 0
}

func (m *StickerPackDocumentBase) GetAttributesImageSizeH() int32 {
	if m != nil {
		return m.AttributesImageSizeH
	}
	return 0
}

func (m *StickerPackDocumentBase) GetAttributesStikerAlt() string {
	if m != nil {
		return m.AttributesStikerAlt
	}
	return ""
}

func (m *StickerPackDocumentBase) GetAttributesStikerSetAccessHash() int64 {
	if m != nil {
		return m.AttributesStikerSetAccessHash
	}
	return 0
}

func (m *StickerPackDocumentBase) GetAttributesFileName() string {
	if m != nil {
		return m.AttributesFileName
	}
	return ""
}

type StickerPackDocumentInfo struct {
	Id       int32                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	InfoBase *StickerPackDocumentBase `protobuf:"bytes,2,opt,name=infoBase" json:"infoBase,omitempty"`
}

func (m *StickerPackDocumentInfo) Reset()         { *m = StickerPackDocumentInfo{} }
func (m *StickerPackDocumentInfo) String() string { return proto.CompactTextString(m) }
func (*StickerPackDocumentInfo) ProtoMessage()    {}
func (*StickerPackDocumentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorImbotgateway, []int{148}
}

func (m *StickerPackDocumentInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *StickerPackDocumentInfo) GetInfoBase() *StickerPackDocumentBase {
	if m != nil {
		return m.InfoBase
	}
	return nil
}

func init() {
	proto.RegisterType((*ReqGetFullChannel)(nil), "imbotgateway.ReqGetFullChannel")
	proto.RegisterType((*ReqGetParticipants)(nil), "imbotgateway.ReqGetParticipants")
	proto.RegisterType((*ReqUpdatePinnedChannelMessage)(nil), "imbotgateway.ReqUpdatePinnedChannelMessage")
	proto.RegisterType((*ReqEditChannelAbout)(nil), "imbotgateway.ReqEditChannelAbout")
	proto.RegisterType((*ReqEditChannelTitle)(nil), "imbotgateway.ReqEditChannelTitle")
	proto.RegisterType((*ReplyChannelData)(nil), "imbotgateway.ReplyChannelData")
	proto.RegisterType((*ReqDelManualBlockList)(nil), "imbotgateway.ReqDelManualBlockList")
	proto.RegisterType((*ReqSetManualBlockList)(nil), "imbotgateway.ReqSetManualBlockList")
	proto.RegisterType((*BlockUser)(nil), "imbotgateway.BlockUser")
	proto.RegisterType((*ManualBlockReplyData)(nil), "imbotgateway.ManualBlockReplyData")
	proto.RegisterType((*StoreShopStickerSetDocumentsReq)(nil), "imbotgateway.StoreShopStickerSetDocumentsReq")
	proto.RegisterType((*StoreShopStickerSetDocumentsResult)(nil), "imbotgateway.StoreShopStickerSetDocumentsResult")
	proto.RegisterType((*AuthorStickerSet)(nil), "imbotgateway.AuthorStickerSet")
	proto.RegisterType((*GetAuthorAllStickerSetReq)(nil), "imbotgateway.GetAuthorAllStickerSetReq")
	proto.RegisterType((*GetAuthorAllStickerSetResult)(nil), "imbotgateway.GetAuthorAllStickerSetResult")
	proto.RegisterType((*DeleteStickerPackDocumentReq)(nil), "imbotgateway.DeleteStickerPackDocumentReq")
	proto.RegisterType((*DeleteStickerPackDocumentResult)(nil), "imbotgateway.DeleteStickerPackDocumentResult")
	proto.RegisterType((*GetStickerSetInfoReq)(nil), "imbotgateway.GetStickerSetInfoReq")
	proto.RegisterType((*StickerSetInfo)(nil), "imbotgateway.StickerSetInfo")
	proto.RegisterType((*GetStickerSetInfoResult)(nil), "imbotgateway.GetStickerSetInfoResult")
	proto.RegisterType((*DeleteStickerSetReq)(nil), "imbotgateway.DeleteStickerSetReq")
	proto.RegisterType((*DeleteStickerSetResult)(nil), "imbotgateway.DeleteStickerSetResult")
	proto.RegisterType((*StoreUserStickerSetReq)(nil), "imbotgateway.StoreUserStickerSetReq")
	proto.RegisterType((*StoreUserStickerSetResult)(nil), "imbotgateway.StoreUserStickerSetResult")
	proto.RegisterType((*StoreStickerPackDcReq)(nil), "imbotgateway.StoreStickerPackDcReq")
	proto.RegisterType((*StoreStickerPackDcResult)(nil), "imbotgateway.StoreStickerPackDcResult")
	proto.RegisterType((*StoreShopStickerSetReq)(nil), "imbotgateway.StoreShopStickerSetReq")
	proto.RegisterType((*StoreShopStickerSetResult)(nil), "imbotgateway.StoreShopStickerSetResult")
	proto.RegisterType((*ResizeRequest)(nil), "imbotgateway.ResizeRequest")
	proto.RegisterType((*ResizeReply)(nil), "imbotgateway.ResizeReply")
	proto.RegisterType((*ConstraintRequest)(nil), "imbotgateway.ConstraintRequest")
	proto.RegisterType((*ConstraintReply)(nil), "imbotgateway.ConstraintReply")
	proto.RegisterType((*CompressImageRequest)(nil), "imbotgateway.CompressImageRequest")
	proto.RegisterType((*CompressImageReply)(nil), "imbotgateway.CompressImageReply")
	proto.RegisterType((*VideoPreviewRequest)(nil), "imbotgateway.VideoPreviewRequest")
	proto.RegisterType((*VideoPreviewReply)(nil), "imbotgateway.VideoPreviewReply")
	proto.RegisterType((*AudioPreviewRequest)(nil), "imbotgateway.AudioPreviewRequest")
	proto.RegisterType((*AudioPreviewReply)(nil), "imbotgateway.AudioPreviewReply")
	proto.RegisterType((*ReqParticipants)(nil), "imbotgateway.ReqParticipants")
	proto.RegisterType((*ReplyParticipants)(nil), "imbotgateway.ReplyParticipants")
	proto.RegisterType((*ReqCreateChat)(nil), "imbotgateway.ReqCreateChat")
	proto.RegisterType((*ReplyCreateChat)(nil), "imbotgateway.ReplyCreateChat")
	proto.RegisterType((*ReqMigrateChat)(nil), "imbotgateway.ReqMigrateChat")
	proto.RegisterType((*ReplyMigrateChat)(nil), "imbotgateway.ReplyMigrateChat")
	proto.RegisterType((*ReqJoinChannel)(nil), "imbotgateway.ReqJoinChannel")
	proto.RegisterType((*ReplyJoinChannel)(nil), "imbotgateway.ReplyJoinChannel")
	proto.RegisterType((*ReqChangeGroupAndChannelCrator)(nil), "imbotgateway.ReqChangeGroupAndChannelCrator")
	proto.RegisterType((*ReplyChangeGroupAndChannelCrator)(nil), "imbotgateway.ReplyChangeGroupAndChannelCrator")
	proto.RegisterType((*ReqBotCallMessageMedia)(nil), "imbotgateway.ReqBotCallMessageMedia")
	proto.RegisterType((*RequestDialog)(nil), "imbotgateway.RequestDialog")
	proto.RegisterType((*ReplyDialog)(nil), "imbotgateway.ReplyDialog")
	proto.RegisterType((*UserScore)(nil), "imbotgateway.UserScore")
	proto.RegisterType((*ReqSetGameScore)(nil), "imbotgateway.ReqSetGameScore")
	proto.RegisterType((*ReplySetGameScore)(nil), "imbotgateway.ReplySetGameScore")
	proto.RegisterType((*ReplyBanChannelUser)(nil), "imbotgateway.ReplyBanChannelUser")
	proto.RegisterType((*ReqBanChannelUser)(nil), "imbotgateway.ReqBanChannelUser")
	proto.RegisterType((*ChannelBannedRights)(nil), "imbotgateway.ChannelBannedRights")
	proto.RegisterType((*ReqGetChannels)(nil), "imbotgateway.ReqGetChannels")
	proto.RegisterType((*ReplyGetChannels)(nil), "imbotgateway.ReplyGetChannels")
	proto.RegisterType((*ReqDeleteChatUser)(nil), "imbotgateway.ReqDeleteChatUser")
	proto.RegisterType((*ReplyDeleteChatUser)(nil), "imbotgateway.ReplyDeleteChatUser")
	proto.RegisterType((*ChannelInactiveUser)(nil), "imbotgateway.ChannelInactiveUser")
	proto.RegisterType((*GetChannelInactiveUsersReq)(nil), "imbotgateway.GetChannelInactiveUsersReq")
	proto.RegisterType((*GetChannelInactiveUsersResult)(nil), "imbotgateway.GetChannelInactiveUsersResult")
	proto.RegisterType((*ReqBotInlineCall)(nil), "imbotgateway.ReqBotInlineCall")
	proto.RegisterType((*ReplyBotInlineCall)(nil), "imbotgateway.ReplyBotInlineCall")
	proto.RegisterType((*InlineCall)(nil), "imbotgateway.InlineCall")
	proto.RegisterType((*ReqSendUserMsg)(nil), "imbotgateway.ReqSendUserMsg")
	proto.RegisterType((*ReplyBool)(nil), "imbotgateway.ReplyBool")
	proto.RegisterType((*ReqBotCall)(nil), "imbotgateway.ReqBotCall")
	proto.RegisterType((*ReplyBotCall)(nil), "imbotgateway.ReplyBotCall")
	proto.RegisterType((*ReqGetMessageByUserIdUuid)(nil), "imbotgateway.ReqGetMessageByUserIdUuid")
	proto.RegisterType((*ReplyGetMessageByUserIdUuid)(nil), "imbotgateway.ReplyGetMessageByUserIdUuid")
	proto.RegisterType((*ReqGetChannelMessageByChannelIdMsgId)(nil), "imbotgateway.ReqGetChannelMessageByChannelIdMsgId")
	proto.RegisterType((*ReplyGetChannelMessageByChannelIdMsgId)(nil), "imbotgateway.ReplyGetChannelMessageByChannelIdMsgId")
	proto.RegisterType((*ReqGetMessageByUserIdMsgId)(nil), "imbotgateway.ReqGetMessageByUserIdMsgId")
	proto.RegisterType((*ReplyGetMessageByUserIdMsgId)(nil), "imbotgateway.ReplyGetMessageByUserIdMsgId")
	proto.RegisterType((*MsgFileDescReq)(nil), "imbotgateway.MsgFileDescReq")
	proto.RegisterType((*MsgFileDescResp)(nil), "imbotgateway.MsgFileDescResp")
	proto.RegisterType((*MsgServiceLimitReq)(nil), "imbotgateway.MsgServiceLimitReq")
	proto.RegisterType((*MsgServiceLimitResp)(nil), "imbotgateway.MsgServiceLimitResp")
	proto.RegisterType((*MsgGetFidReq)(nil), "imbotgateway.MsgGetFidReq")
	proto.RegisterType((*MsgGetFidResp)(nil), "imbotgateway.MsgGetFidResp")
	proto.RegisterType((*MsgFilePartsReq)(nil), "imbotgateway.MsgFilePartsReq")
	proto.RegisterType((*MsgFilePartsResp)(nil), "imbotgateway.MsgFilePartsResp")
	proto.RegisterType((*MsgUploadFileReq)(nil), "imbotgateway.MsgUploadFileReq")
	proto.RegisterType((*UploadReqPara1)(nil), "imbotgateway.UploadReqPara1")
	proto.RegisterType((*UploadReqPara2)(nil), "imbotgateway.UploadReqPara2")
	proto.RegisterType((*FileUploadRespPara)(nil), "imbotgateway.FileUploadRespPara")
	proto.RegisterType((*MsgUploadFileResp)(nil), "imbotgateway.MsgUploadFileResp")
	proto.RegisterType((*MsgDownloadFileReq)(nil), "imbotgateway.MsgDownloadFileReq")
	proto.RegisterType((*DownloadFileRespPara1)(nil), "imbotgateway.DownloadFileRespPara1")
	proto.RegisterType((*DownloadFileRespPara2)(nil), "imbotgateway.DownloadFileRespPara2")
	proto.RegisterType((*MsgDownloadFileResp)(nil), "imbotgateway.MsgDownloadFileResp")
	proto.RegisterType((*MsgQueryObjInfoReq)(nil), "imbotgateway.MsgQueryObjInfoReq")
	proto.RegisterType((*QueryObjInfoRespPara)(nil), "imbotgateway.QueryObjInfoRespPara")
	proto.RegisterType((*MsgQueryObjInfoResp)(nil), "imbotgateway.MsgQueryObjInfoResp")
	proto.RegisterType((*MsgGetFileDescReq)(nil), "imbotgateway.MsgGetFileDescReq")
	proto.RegisterType((*MsgGetFileDescResp)(nil), "imbotgateway.MsgGetFileDescResp")
	proto.RegisterType((*GetChannelInfoReq)(nil), "imbotgateway.GetChannelInfoReq")
	proto.RegisterType((*GetChannelInfoResp)(nil), "imbotgateway.GetChannelInfoResp")
	proto.RegisterType((*ReqGetAdminGroups)(nil), "imbotgateway.ReqGetAdminGroups")
	proto.RegisterType((*ReqGetGroups)(nil), "imbotgateway.ReqGetGroups")
	proto.RegisterType((*Peer)(nil), "imbotgateway.Peer")
	proto.RegisterType((*ReplyGetGroups)(nil), "imbotgateway.ReplyGetGroups")
	proto.RegisterType((*ReqDeleteMessage)(nil), "imbotgateway.ReqDeleteMessage")
	proto.RegisterType((*ReqSendChatAction)(nil), "imbotgateway.ReqSendChatAction")
	proto.RegisterType((*ReqData)(nil), "imbotgateway.ReqData")
	proto.RegisterType((*ReplyData)(nil), "imbotgateway.ReplyData")
	proto.RegisterType((*ReqGetChatMembersCount)(nil), "imbotgateway.ReqGetChatMembersCount")
	proto.RegisterType((*ReplyGetChatMembersCount)(nil), "imbotgateway.ReplyGetChatMembersCount")
	proto.RegisterType((*GetChatInfoReq)(nil), "imbotgateway.GetChatInfoReq")
	proto.RegisterType((*GetUsersChatsReq)(nil), "imbotgateway.GetUsersChatsReq")
	proto.RegisterType((*GetUsersChatsResult)(nil), "imbotgateway.GetUsersChatsResult")
	proto.RegisterType((*GetUserInfoByIdReq)(nil), "imbotgateway.GetUserInfoByIdReq")
	proto.RegisterType((*GetUserInfoByIdArrReq)(nil), "imbotgateway.GetUserInfoByIdArrReq")
	proto.RegisterType((*UpdateUserProfileReq)(nil), "imbotgateway.UpdateUserProfileReq")
	proto.RegisterType((*UpdateUserProfileResult)(nil), "imbotgateway.UpdateUserProfileResult")
	proto.RegisterType((*GetUserByphone)(nil), "imbotgateway.GetUserByphone")
	proto.RegisterType((*GetUserInfoResult)(nil), "imbotgateway.GetUserInfoResult")
	proto.RegisterType((*UpdateBotInfoSuppReq)(nil), "imbotgateway.UpdateBotInfoSuppReq")
	proto.RegisterType((*UpdateBotInfoSuppResult)(nil), "imbotgateway.UpdateBotInfoSuppResult")
	proto.RegisterType((*BotUpdateInfo)(nil), "imbotgateway.BotUpdateInfo")
	proto.RegisterType((*BotUpdateInfoResult)(nil), "imbotgateway.BotUpdateInfoResult")
	proto.RegisterType((*UpdateBotPicRequest)(nil), "imbotgateway.UpdateBotPicRequest")
	proto.RegisterType((*UpdateBotPicResult)(nil), "imbotgateway.UpdateBotPicResult")
	proto.RegisterType((*UpdateuserNameReq)(nil), "imbotgateway.UpdateuserNameReq")
	proto.RegisterType((*UpdateuserNameResult)(nil), "imbotgateway.UpdateuserNameResult")
	proto.RegisterType((*RegisterUserInfoReq)(nil), "imbotgateway.RegisterUserInfoReq")
	proto.RegisterType((*RegisterUserInfoResult)(nil), "imbotgateway.RegisterUserInfoResult")
	proto.RegisterType((*DeleteAccountByIdReq)(nil), "imbotgateway.DeleteAccountByIdReq")
	proto.RegisterType((*DelAccountResult)(nil), "imbotgateway.DelAccountResult")
	proto.RegisterType((*SignUpReq)(nil), "imbotgateway.SignUpReq")
	proto.RegisterType((*AuthSignUpResult)(nil), "imbotgateway.AuthSignUpResult")
	proto.RegisterType((*GetFullUserReq)(nil), "imbotgateway.GetFullUserReq")
	proto.RegisterType((*GetFullUserResult)(nil), "imbotgateway.GetFullUserResult")
	proto.RegisterType((*GetUserByUsername)(nil), "imbotgateway.GetUserByUsername")
	proto.RegisterType((*ReqGetFullChat)(nil), "imbotgateway.ReqGetFullChat")
	proto.RegisterType((*ReplyGetFullChat)(nil), "imbotgateway.ReplyGetFullChat")
	proto.RegisterType((*ReqLeaveChannel)(nil), "imbotgateway.ReqLeaveChannel")
	proto.RegisterType((*ReplyLeaveChannel)(nil), "imbotgateway.ReplyLeaveChannel")
	proto.RegisterType((*ReqSendMedia)(nil), "imbotgateway.ReqSendMedia")
	proto.RegisterType((*ReplyResult)(nil), "imbotgateway.ReplyResult")
	proto.RegisterType((*ReqEditChatTitle)(nil), "imbotgateway.ReqEditChatTitle")
	proto.RegisterType((*ReplyEditChatTitle)(nil), "imbotgateway.ReplyEditChatTitle")
	proto.RegisterType((*GetStickerSetPackDcInfosReq)(nil), "imbotgateway.GetStickerSetPackDcInfosReq")
	proto.RegisterType((*GetStickerSetPackDcInfosResult)(nil), "imbotgateway.GetStickerSetPackDcInfosResult")
	proto.RegisterType((*StickerPackDocumentBase)(nil), "imbotgateway.StickerPackDocumentBase")
	proto.RegisterType((*StickerPackDocumentInfo)(nil), "imbotgateway.StickerPackDocumentInfo")
	proto.RegisterEnum("imbotgateway.ChatType", ChatType_name, ChatType_value)
	proto.RegisterEnum("imbotgateway.StatusCode", StatusCode_name, StatusCode_value)
	proto.RegisterEnum("imbotgateway.AuthSignUpResult_ResultCode", AuthSignUpResult_ResultCode_name, AuthSignUpResult_ResultCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BotgatewayService service

type BotgatewayServiceClient interface {
	// infoserver.pb.go
	// 注册用户的接口(yuankan和lxl)
	AuthSignUp(ctx context.Context, in *SignUpReq, opts ...grpc.CallOption) (*AuthSignUpResult, error)
	// 获取用户完整信息，包含和自己的关联信息
	GetFullUser(ctx context.Context, in *GetFullUserReq, opts ...grpc.CallOption) (*GetFullUserResult, error)
	// userserver.pb.go
	// 账号(标记删除)
	DeleteUserInfoById(ctx context.Context, in *DeleteAccountByIdReq, opts ...grpc.CallOption) (*DelAccountResult, error)
	// 更新用户的username
	UpdateUserName(ctx context.Context, in *UpdateuserNameReq, opts ...grpc.CallOption) (*UpdateuserNameResult, error)
	// 注册指定用户的接口()
	RegisterUserInfo(ctx context.Context, in *RegisterUserInfoReq, opts ...grpc.CallOption) (*RegisterUserInfoResult, error)
	// 更新机器人头像
	UpdateBotPic(ctx context.Context, in *UpdateBotPicRequest, opts ...grpc.CallOption) (*UpdateBotPicResult, error)
	// 更新机器人相关信息
	UpdateBotInfo(ctx context.Context, in *BotUpdateInfo, opts ...grpc.CallOption) (*BotUpdateInfoResult, error)
	// 补充 更新机器人相关信息
	UpdateBotInfoSupp(ctx context.Context, in *UpdateBotInfoSuppReq, opts ...grpc.CallOption) (*UpdateBotInfoSuppResult, error)
	// 通过用户电话号码获取用户基本信息
	GetUserInfoByPhone(ctx context.Context, in *GetUserByphone, opts ...grpc.CallOption) (*GetUserInfoResult, error)
	// 更新用户名称和about
	UpdateUserProfile(ctx context.Context, in *UpdateUserProfileReq, opts ...grpc.CallOption) (*UpdateUserProfileResult, error)
	// 获取用户信息
	GetUserInfoById(ctx context.Context, in *GetUserInfoByIdReq, opts ...grpc.CallOption) (*GetUserInfoResult, error)
	// 通过username获取用户基本信息
	GetUserInfoByUsername(ctx context.Context, in *GetUserByUsername, opts ...grpc.CallOption) (*GetUserInfoResult, error)
	// 获取一个sticker下面的所有贴图信息
	GetStickerSetPackDcInfos(ctx context.Context, in *GetStickerSetPackDcInfosReq, opts ...grpc.CallOption) (*GetStickerSetPackDcInfosResult, error)
	// 存储sticker集合的概要
	StoreStickerSet(ctx context.Context, in *StoreShopStickerSetReq, opts ...grpc.CallOption) (*StoreShopStickerSetResult, error)
	// 存储stickerSet下面的单个贴图
	StoreStickerPackDc(ctx context.Context, in *StoreStickerPackDcReq, opts ...grpc.CallOption) (*StoreStickerPackDcResult, error)
	// 用户安装sticker的操作
	StoreUserStickerSet(ctx context.Context, in *StoreUserStickerSetReq, opts ...grpc.CallOption) (*StoreUserStickerSetResult, error)
	// 删除指定的sticker集合
	DeleteShopStickerSet(ctx context.Context, in *DeleteStickerSetReq, opts ...grpc.CallOption) (*DeleteStickerSetResult, error)
	// 获取指定的sticker集合
	GetStickerSetInfo(ctx context.Context, in *GetStickerSetInfoReq, opts ...grpc.CallOption) (*StickerSetInfo, error)
	// 删除指定sticker包的单个sticker
	DeleteStickerPackDocument(ctx context.Context, in *DeleteStickerPackDocumentReq, opts ...grpc.CallOption) (*DeleteStickerPackDocumentResult, error)
	// 查询作者所有的sticker
	GetAuthorAllStickerSet(ctx context.Context, in *GetAuthorAllStickerSetReq, opts ...grpc.CallOption) (*GetAuthorAllStickerSetResult, error)
	// 存储sickerSet 的documents
	StoreStickerSetDocument(ctx context.Context, in *StoreShopStickerSetDocumentsReq, opts ...grpc.CallOption) (*StoreShopStickerSetDocumentsResult, error)
	// chatservice.pb.go
	// 获取用户信息、群、超级群信息
	GetUsersChats(ctx context.Context, in *GetUsersChatsReq, opts ...grpc.CallOption) (*GetUsersChatsResult, error)
	// 通过群Id 用户Id 获取群基本信息
	GetChatInfo(ctx context.Context, in *GetChatInfoReq, opts ...grpc.CallOption) (*GetChatInfoResp, error)
	// botserver.pb.go
	// 離開群組
	LeaveChat(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error)
	// 獲取群訊息
	GetChat(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error)
	// 獲取群成員數目
	GetChatMembersCount(ctx context.Context, in *ReqGetChatMembersCount, opts ...grpc.CallOption) (*ReplyGetChatMembersCount, error)
	// 獲取群管理員
	GetChatAdministrators(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error)
	// 修改群名字
	SetChatTitle(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error)
	// 修改群簡介
	SetChatDescription(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error)
	// 置顶群消息
	UpdatePinnedChannelMessage(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error)
	// 發送Action
	SendChatAction(ctx context.Context, in *ReqSendChatAction, opts ...grpc.CallOption) (*ReplyData, error)
	// 發送名片
	SendContact(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error)
	// 刪除消息
	DeleteMessage(ctx context.Context, in *ReqDeleteMessage, opts ...grpc.CallOption) (*ReplyData, error)
	// GetGroups 获取群组消息
	GetGroups(ctx context.Context, in *ReqGetGroups, opts ...grpc.CallOption) (*ReplyGetGroups, error)
	// GetGroups 获取使用者是管理員的群組消息
	GetAdminGroups(ctx context.Context, in *ReqGetAdminGroups, opts ...grpc.CallOption) (*ReplyGetGroups, error)
	// 新增手動禁言名單
	SetManualBlockList(ctx context.Context, in *ReqSetManualBlockList, opts ...grpc.CallOption) (*ManualBlockReplyData, error)
	// 刪除手動禁言名單
	DelManualBlockList(ctx context.Context, in *ReqDelManualBlockList, opts ...grpc.CallOption) (*ManualBlockReplyData, error)
	// 讓使用者離開群(使用者後續還可以自動加入)
	LeaveGroup(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// channelservice.pb.go
	// 获取channel信息 不带user信息
	GetChannelInfo(ctx context.Context, in *GetChannelInfoReq, opts ...grpc.CallOption) (*GetChannelInfoResp, error)
	// storage_proto.pb.go
	// 网关获取文件描述信息
	GatewayGetFileDesc(ctx context.Context, in *MsgGetFileDescReq, opts ...grpc.CallOption) (*MsgGetFileDescResp, error)
	// QueryObjInfo 查询对象信息
	QueryObjInfo(ctx context.Context, in *MsgQueryObjInfoReq, opts ...grpc.CallOption) (*MsgQueryObjInfoResp, error)
	// DownloadFile 下载文件或文件片
	DownloadFile(ctx context.Context, in *MsgDownloadFileReq, opts ...grpc.CallOption) (*MsgDownloadFileResp, error)
	// UploadFile 上传文件或文件片
	UploadFile(ctx context.Context, in *MsgUploadFileReq, opts ...grpc.CallOption) (*MsgUploadFileResp, error)
	// 网关上传文件
	GatewayUploadFile(ctx context.Context, in *MsgFilePartsReq, opts ...grpc.CallOption) (*MsgFilePartsResp, error)
	// 网关上传文件描述信息
	GatewayUploadFileDesc(ctx context.Context, in *MsgFileDescReq, opts ...grpc.CallOption) (*MsgFileDescResp, error)
	// 网关取上传文件的Fid, 与DC约定：1.收到此消息认为文件片已经传完；2.keyid+fileid与存储fid映射关系丢弃
	GatewayGetUploadFileFid(ctx context.Context, in *MsgGetFidReq, opts ...grpc.CallOption) (*MsgGetFidResp, error)
	// ServiceLimit 服务上传下载限制
	ServiceLimit(ctx context.Context, in *MsgServiceLimitReq, opts ...grpc.CallOption) (*MsgServiceLimitResp, error)
	// pbmessageserver.pb.go
	// 机器人调用接口
	BotCall(ctx context.Context, in *ReqBotCall, opts ...grpc.CallOption) (*ReplyBotCall, error)
	// 根据 消息id和用户id 获取单聊消息\普通群消息
	GetMessageByUserIdMsgId(ctx context.Context, in *ReqGetMessageByUserIdMsgId, opts ...grpc.CallOption) (*ReplyGetMessageByUserIdMsgId, error)
	// 根据 超级群ID和消息ID查询超级群信息
	GetChannelMessageByChannelIdMsgId(ctx context.Context, in *ReqGetChannelMessageByChannelIdMsgId, opts ...grpc.CallOption) (*ReplyGetChannelMessageByChannelIdMsgId, error)
	// 根据 uuid和用户id 获取单聊消息\普通群消息
	GetMessageByUserIdUuid(ctx context.Context, in *ReqGetMessageByUserIdUuid, opts ...grpc.CallOption) (*ReplyGetMessageByUserIdUuid, error)
	// 机器人发送webpage
	BotCallMessageMedia(ctx context.Context, in *ReqBotCallMessageMedia, opts ...grpc.CallOption) (*ReplyBotCall, error)
	// 发送给对方所有端
	SendUserMsg(ctx context.Context, in *ReqSendUserMsg, opts ...grpc.CallOption) (*ReplyBool, error)
	// 机器人内联调用
	BotInlineCall(ctx context.Context, in *ReqBotInlineCall, opts ...grpc.CallOption) (*ReplyBotInlineCall, error)
	// 根据超级群用户离线时间倒序获取超级群用户
	GetChannelInactiveUsers(ctx context.Context, in *GetChannelInactiveUsersReq, opts ...grpc.CallOption) (*GetChannelInactiveUsersResult, error)
	//    普通群删除成员
	DeleteChatUser(ctx context.Context, in *ReqDeleteChatUser, opts ...grpc.CallOption) (*ReplyDeleteChatUser, error)
	// 获取给定超级群信息
	Getchannels(ctx context.Context, in *ReqGetChannels, opts ...grpc.CallOption) (*ReplyGetChannels, error)
	// 踢人并进组其再次加入超级群或者频道，或者解除该禁止
	EditBanChannelUser(ctx context.Context, in *ReqBanChannelUser, opts ...grpc.CallOption) (*ReplyBanChannelUser, error)
	// 设置游戏分数
	SetGameScore(ctx context.Context, in *ReqSetGameScore, opts ...grpc.CallOption) (*ReplySetGameScore, error)
	//    获取对话框
	GetDialog(ctx context.Context, in *RequestDialog, opts ...grpc.CallOption) (*ReplyDialog, error)
	// 变更群主
	ChangeGroupAndChannelCrator(ctx context.Context, in *ReqChangeGroupAndChannelCrator, opts ...grpc.CallOption) (*ReplyChangeGroupAndChannelCrator, error)
	// 主动加入超级群或者频道
	JoinChannel(ctx context.Context, in *ReqJoinChannel, opts ...grpc.CallOption) (*ReplyJoinChannel, error)
	// 获取超级群用户信息
	GetParticipants(ctx context.Context, in *ReqParticipants, opts ...grpc.CallOption) (*ReplyParticipants, error)
	//    普通群升级超级群
	MigrateChat(ctx context.Context, in *ReqMigrateChat, opts ...grpc.CallOption) (*ReplyMigrateChat, error)
	//    创建普通群
	CreateChat(ctx context.Context, in *ReqCreateChat, opts ...grpc.CallOption) (*ReplyCreateChat, error)
	// 获取群的完整信息
	GetFullChat(ctx context.Context, in *ReqGetFullChat, opts ...grpc.CallOption) (*ReplyGetFullChat, error)
	// 离开超级群或者频道
	LeaveChannel(ctx context.Context, in *ReqLeaveChannel, opts ...grpc.CallOption) (*ReplyLeaveChannel, error)
	//    发送媒体消息
	SendMedia(ctx context.Context, in *ReqSendMedia, opts ...grpc.CallOption) (*ReplyResult, error)
	//    编辑群名称
	EditChatTitle(ctx context.Context, in *ReqEditChatTitle, opts ...grpc.CallOption) (*ReplyEditChatTitle, error)
	// avthumb.pb.go
	// Resize 重设图片大小
	Resize(ctx context.Context, in *ResizeRequest, opts ...grpc.CallOption) (*ResizeReply, error)
	// Constraint 约束图片尺寸
	Constraint(ctx context.Context, in *ConstraintRequest, opts ...grpc.CallOption) (*ConstraintReply, error)
	// CompressImage 压缩图片质量
	CompressImage(ctx context.Context, in *CompressImageRequest, opts ...grpc.CallOption) (*CompressImageReply, error)
	// GetVideoPreview 获取视频预览
	GetVideoPreview(ctx context.Context, in *VideoPreviewRequest, opts ...grpc.CallOption) (*VideoPreviewReply, error)
	// GetAudioPreview 获取音频预览
	GetAudioPreview(ctx context.Context, in *AudioPreviewRequest, opts ...grpc.CallOption) (*AudioPreviewReply, error)
}

type botgatewayServiceClient struct {
	cc *grpc.ClientConn
}

func NewBotgatewayServiceClient(cc *grpc.ClientConn) BotgatewayServiceClient {
	return &botgatewayServiceClient{cc}
}

func (c *botgatewayServiceClient) AuthSignUp(ctx context.Context, in *SignUpReq, opts ...grpc.CallOption) (*AuthSignUpResult, error) {
	out := new(AuthSignUpResult)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/AuthSignUp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetFullUser(ctx context.Context, in *GetFullUserReq, opts ...grpc.CallOption) (*GetFullUserResult, error) {
	out := new(GetFullUserResult)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetFullUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) DeleteUserInfoById(ctx context.Context, in *DeleteAccountByIdReq, opts ...grpc.CallOption) (*DelAccountResult, error) {
	out := new(DelAccountResult)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/DeleteUserInfoById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) UpdateUserName(ctx context.Context, in *UpdateuserNameReq, opts ...grpc.CallOption) (*UpdateuserNameResult, error) {
	out := new(UpdateuserNameResult)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/UpdateUserName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) RegisterUserInfo(ctx context.Context, in *RegisterUserInfoReq, opts ...grpc.CallOption) (*RegisterUserInfoResult, error) {
	out := new(RegisterUserInfoResult)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/RegisterUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) UpdateBotPic(ctx context.Context, in *UpdateBotPicRequest, opts ...grpc.CallOption) (*UpdateBotPicResult, error) {
	out := new(UpdateBotPicResult)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/UpdateBotPic", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) UpdateBotInfo(ctx context.Context, in *BotUpdateInfo, opts ...grpc.CallOption) (*BotUpdateInfoResult, error) {
	out := new(BotUpdateInfoResult)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/UpdateBotInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) UpdateBotInfoSupp(ctx context.Context, in *UpdateBotInfoSuppReq, opts ...grpc.CallOption) (*UpdateBotInfoSuppResult, error) {
	out := new(UpdateBotInfoSuppResult)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/UpdateBotInfoSupp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetUserInfoByPhone(ctx context.Context, in *GetUserByphone, opts ...grpc.CallOption) (*GetUserInfoResult, error) {
	out := new(GetUserInfoResult)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetUserInfoByPhone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) UpdateUserProfile(ctx context.Context, in *UpdateUserProfileReq, opts ...grpc.CallOption) (*UpdateUserProfileResult, error) {
	out := new(UpdateUserProfileResult)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/UpdateUserProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetUserInfoById(ctx context.Context, in *GetUserInfoByIdReq, opts ...grpc.CallOption) (*GetUserInfoResult, error) {
	out := new(GetUserInfoResult)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetUserInfoById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetUserInfoByUsername(ctx context.Context, in *GetUserByUsername, opts ...grpc.CallOption) (*GetUserInfoResult, error) {
	out := new(GetUserInfoResult)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetUserInfoByUsername", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetStickerSetPackDcInfos(ctx context.Context, in *GetStickerSetPackDcInfosReq, opts ...grpc.CallOption) (*GetStickerSetPackDcInfosResult, error) {
	out := new(GetStickerSetPackDcInfosResult)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetStickerSetPackDcInfos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) StoreStickerSet(ctx context.Context, in *StoreShopStickerSetReq, opts ...grpc.CallOption) (*StoreShopStickerSetResult, error) {
	out := new(StoreShopStickerSetResult)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/StoreStickerSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) StoreStickerPackDc(ctx context.Context, in *StoreStickerPackDcReq, opts ...grpc.CallOption) (*StoreStickerPackDcResult, error) {
	out := new(StoreStickerPackDcResult)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/StoreStickerPackDc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) StoreUserStickerSet(ctx context.Context, in *StoreUserStickerSetReq, opts ...grpc.CallOption) (*StoreUserStickerSetResult, error) {
	out := new(StoreUserStickerSetResult)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/StoreUserStickerSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) DeleteShopStickerSet(ctx context.Context, in *DeleteStickerSetReq, opts ...grpc.CallOption) (*DeleteStickerSetResult, error) {
	out := new(DeleteStickerSetResult)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/DeleteShopStickerSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetStickerSetInfo(ctx context.Context, in *GetStickerSetInfoReq, opts ...grpc.CallOption) (*StickerSetInfo, error) {
	out := new(StickerSetInfo)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetStickerSetInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) DeleteStickerPackDocument(ctx context.Context, in *DeleteStickerPackDocumentReq, opts ...grpc.CallOption) (*DeleteStickerPackDocumentResult, error) {
	out := new(DeleteStickerPackDocumentResult)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/DeleteStickerPackDocument", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetAuthorAllStickerSet(ctx context.Context, in *GetAuthorAllStickerSetReq, opts ...grpc.CallOption) (*GetAuthorAllStickerSetResult, error) {
	out := new(GetAuthorAllStickerSetResult)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetAuthorAllStickerSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) StoreStickerSetDocument(ctx context.Context, in *StoreShopStickerSetDocumentsReq, opts ...grpc.CallOption) (*StoreShopStickerSetDocumentsResult, error) {
	out := new(StoreShopStickerSetDocumentsResult)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/StoreStickerSetDocument", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetUsersChats(ctx context.Context, in *GetUsersChatsReq, opts ...grpc.CallOption) (*GetUsersChatsResult, error) {
	out := new(GetUsersChatsResult)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetUsersChats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetChatInfo(ctx context.Context, in *GetChatInfoReq, opts ...grpc.CallOption) (*GetChatInfoResp, error) {
	out := new(GetChatInfoResp)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetChatInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) LeaveChat(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error) {
	out := new(ReplyData)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/LeaveChat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetChat(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error) {
	out := new(ReplyData)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetChat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetChatMembersCount(ctx context.Context, in *ReqGetChatMembersCount, opts ...grpc.CallOption) (*ReplyGetChatMembersCount, error) {
	out := new(ReplyGetChatMembersCount)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetChatMembersCount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetChatAdministrators(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error) {
	out := new(ReplyData)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetChatAdministrators", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) SetChatTitle(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error) {
	out := new(ReplyData)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/SetChatTitle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) SetChatDescription(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error) {
	out := new(ReplyData)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/SetChatDescription", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) UpdatePinnedChannelMessage(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error) {
	out := new(ReplyData)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/UpdatePinnedChannelMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) SendChatAction(ctx context.Context, in *ReqSendChatAction, opts ...grpc.CallOption) (*ReplyData, error) {
	out := new(ReplyData)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/SendChatAction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) SendContact(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error) {
	out := new(ReplyData)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/SendContact", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) DeleteMessage(ctx context.Context, in *ReqDeleteMessage, opts ...grpc.CallOption) (*ReplyData, error) {
	out := new(ReplyData)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/DeleteMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetGroups(ctx context.Context, in *ReqGetGroups, opts ...grpc.CallOption) (*ReplyGetGroups, error) {
	out := new(ReplyGetGroups)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetAdminGroups(ctx context.Context, in *ReqGetAdminGroups, opts ...grpc.CallOption) (*ReplyGetGroups, error) {
	out := new(ReplyGetGroups)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetAdminGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) SetManualBlockList(ctx context.Context, in *ReqSetManualBlockList, opts ...grpc.CallOption) (*ManualBlockReplyData, error) {
	out := new(ManualBlockReplyData)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/SetManualBlockList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) DelManualBlockList(ctx context.Context, in *ReqDelManualBlockList, opts ...grpc.CallOption) (*ManualBlockReplyData, error) {
	out := new(ManualBlockReplyData)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/DelManualBlockList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) LeaveGroup(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/LeaveGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetChannelInfo(ctx context.Context, in *GetChannelInfoReq, opts ...grpc.CallOption) (*GetChannelInfoResp, error) {
	out := new(GetChannelInfoResp)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetChannelInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GatewayGetFileDesc(ctx context.Context, in *MsgGetFileDescReq, opts ...grpc.CallOption) (*MsgGetFileDescResp, error) {
	out := new(MsgGetFileDescResp)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/GatewayGetFileDesc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) QueryObjInfo(ctx context.Context, in *MsgQueryObjInfoReq, opts ...grpc.CallOption) (*MsgQueryObjInfoResp, error) {
	out := new(MsgQueryObjInfoResp)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/QueryObjInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) DownloadFile(ctx context.Context, in *MsgDownloadFileReq, opts ...grpc.CallOption) (*MsgDownloadFileResp, error) {
	out := new(MsgDownloadFileResp)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/DownloadFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) UploadFile(ctx context.Context, in *MsgUploadFileReq, opts ...grpc.CallOption) (*MsgUploadFileResp, error) {
	out := new(MsgUploadFileResp)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/UploadFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GatewayUploadFile(ctx context.Context, in *MsgFilePartsReq, opts ...grpc.CallOption) (*MsgFilePartsResp, error) {
	out := new(MsgFilePartsResp)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/GatewayUploadFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GatewayUploadFileDesc(ctx context.Context, in *MsgFileDescReq, opts ...grpc.CallOption) (*MsgFileDescResp, error) {
	out := new(MsgFileDescResp)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/GatewayUploadFileDesc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GatewayGetUploadFileFid(ctx context.Context, in *MsgGetFidReq, opts ...grpc.CallOption) (*MsgGetFidResp, error) {
	out := new(MsgGetFidResp)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/GatewayGetUploadFileFid", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) ServiceLimit(ctx context.Context, in *MsgServiceLimitReq, opts ...grpc.CallOption) (*MsgServiceLimitResp, error) {
	out := new(MsgServiceLimitResp)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/ServiceLimit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) BotCall(ctx context.Context, in *ReqBotCall, opts ...grpc.CallOption) (*ReplyBotCall, error) {
	out := new(ReplyBotCall)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/BotCall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetMessageByUserIdMsgId(ctx context.Context, in *ReqGetMessageByUserIdMsgId, opts ...grpc.CallOption) (*ReplyGetMessageByUserIdMsgId, error) {
	out := new(ReplyGetMessageByUserIdMsgId)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetMessageByUserIdMsgId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetChannelMessageByChannelIdMsgId(ctx context.Context, in *ReqGetChannelMessageByChannelIdMsgId, opts ...grpc.CallOption) (*ReplyGetChannelMessageByChannelIdMsgId, error) {
	out := new(ReplyGetChannelMessageByChannelIdMsgId)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetChannelMessageByChannelIdMsgId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetMessageByUserIdUuid(ctx context.Context, in *ReqGetMessageByUserIdUuid, opts ...grpc.CallOption) (*ReplyGetMessageByUserIdUuid, error) {
	out := new(ReplyGetMessageByUserIdUuid)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetMessageByUserIdUuid", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) BotCallMessageMedia(ctx context.Context, in *ReqBotCallMessageMedia, opts ...grpc.CallOption) (*ReplyBotCall, error) {
	out := new(ReplyBotCall)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/BotCallMessageMedia", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) SendUserMsg(ctx context.Context, in *ReqSendUserMsg, opts ...grpc.CallOption) (*ReplyBool, error) {
	out := new(ReplyBool)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/SendUserMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) BotInlineCall(ctx context.Context, in *ReqBotInlineCall, opts ...grpc.CallOption) (*ReplyBotInlineCall, error) {
	out := new(ReplyBotInlineCall)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/BotInlineCall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetChannelInactiveUsers(ctx context.Context, in *GetChannelInactiveUsersReq, opts ...grpc.CallOption) (*GetChannelInactiveUsersResult, error) {
	out := new(GetChannelInactiveUsersResult)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetChannelInactiveUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) DeleteChatUser(ctx context.Context, in *ReqDeleteChatUser, opts ...grpc.CallOption) (*ReplyDeleteChatUser, error) {
	out := new(ReplyDeleteChatUser)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/DeleteChatUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) Getchannels(ctx context.Context, in *ReqGetChannels, opts ...grpc.CallOption) (*ReplyGetChannels, error) {
	out := new(ReplyGetChannels)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/Getchannels", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) EditBanChannelUser(ctx context.Context, in *ReqBanChannelUser, opts ...grpc.CallOption) (*ReplyBanChannelUser, error) {
	out := new(ReplyBanChannelUser)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/EditBanChannelUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) SetGameScore(ctx context.Context, in *ReqSetGameScore, opts ...grpc.CallOption) (*ReplySetGameScore, error) {
	out := new(ReplySetGameScore)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/SetGameScore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetDialog(ctx context.Context, in *RequestDialog, opts ...grpc.CallOption) (*ReplyDialog, error) {
	out := new(ReplyDialog)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetDialog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) ChangeGroupAndChannelCrator(ctx context.Context, in *ReqChangeGroupAndChannelCrator, opts ...grpc.CallOption) (*ReplyChangeGroupAndChannelCrator, error) {
	out := new(ReplyChangeGroupAndChannelCrator)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/ChangeGroupAndChannelCrator", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) JoinChannel(ctx context.Context, in *ReqJoinChannel, opts ...grpc.CallOption) (*ReplyJoinChannel, error) {
	out := new(ReplyJoinChannel)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/JoinChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetParticipants(ctx context.Context, in *ReqParticipants, opts ...grpc.CallOption) (*ReplyParticipants, error) {
	out := new(ReplyParticipants)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetParticipants", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) MigrateChat(ctx context.Context, in *ReqMigrateChat, opts ...grpc.CallOption) (*ReplyMigrateChat, error) {
	out := new(ReplyMigrateChat)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/MigrateChat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) CreateChat(ctx context.Context, in *ReqCreateChat, opts ...grpc.CallOption) (*ReplyCreateChat, error) {
	out := new(ReplyCreateChat)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/CreateChat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetFullChat(ctx context.Context, in *ReqGetFullChat, opts ...grpc.CallOption) (*ReplyGetFullChat, error) {
	out := new(ReplyGetFullChat)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetFullChat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) LeaveChannel(ctx context.Context, in *ReqLeaveChannel, opts ...grpc.CallOption) (*ReplyLeaveChannel, error) {
	out := new(ReplyLeaveChannel)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/LeaveChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) SendMedia(ctx context.Context, in *ReqSendMedia, opts ...grpc.CallOption) (*ReplyResult, error) {
	out := new(ReplyResult)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/SendMedia", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) EditChatTitle(ctx context.Context, in *ReqEditChatTitle, opts ...grpc.CallOption) (*ReplyEditChatTitle, error) {
	out := new(ReplyEditChatTitle)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/EditChatTitle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) Resize(ctx context.Context, in *ResizeRequest, opts ...grpc.CallOption) (*ResizeReply, error) {
	out := new(ResizeReply)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/Resize", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) Constraint(ctx context.Context, in *ConstraintRequest, opts ...grpc.CallOption) (*ConstraintReply, error) {
	out := new(ConstraintReply)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/Constraint", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) CompressImage(ctx context.Context, in *CompressImageRequest, opts ...grpc.CallOption) (*CompressImageReply, error) {
	out := new(CompressImageReply)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/CompressImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetVideoPreview(ctx context.Context, in *VideoPreviewRequest, opts ...grpc.CallOption) (*VideoPreviewReply, error) {
	out := new(VideoPreviewReply)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetVideoPreview", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetAudioPreview(ctx context.Context, in *AudioPreviewRequest, opts ...grpc.CallOption) (*AudioPreviewReply, error) {
	out := new(AudioPreviewReply)
	err := grpc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetAudioPreview", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BotgatewayService service

type BotgatewayServiceServer interface {
	// infoserver.pb.go
	// 注册用户的接口(yuankan和lxl)
	AuthSignUp(context.Context, *SignUpReq) (*AuthSignUpResult, error)
	// 获取用户完整信息，包含和自己的关联信息
	GetFullUser(context.Context, *GetFullUserReq) (*GetFullUserResult, error)
	// userserver.pb.go
	// 账号(标记删除)
	DeleteUserInfoById(context.Context, *DeleteAccountByIdReq) (*DelAccountResult, error)
	// 更新用户的username
	UpdateUserName(context.Context, *UpdateuserNameReq) (*UpdateuserNameResult, error)
	// 注册指定用户的接口()
	RegisterUserInfo(context.Context, *RegisterUserInfoReq) (*RegisterUserInfoResult, error)
	// 更新机器人头像
	UpdateBotPic(context.Context, *UpdateBotPicRequest) (*UpdateBotPicResult, error)
	// 更新机器人相关信息
	UpdateBotInfo(context.Context, *BotUpdateInfo) (*BotUpdateInfoResult, error)
	// 补充 更新机器人相关信息
	UpdateBotInfoSupp(context.Context, *UpdateBotInfoSuppReq) (*UpdateBotInfoSuppResult, error)
	// 通过用户电话号码获取用户基本信息
	GetUserInfoByPhone(context.Context, *GetUserByphone) (*GetUserInfoResult, error)
	// 更新用户名称和about
	UpdateUserProfile(context.Context, *UpdateUserProfileReq) (*UpdateUserProfileResult, error)
	// 获取用户信息
	GetUserInfoById(context.Context, *GetUserInfoByIdReq) (*GetUserInfoResult, error)
	// 通过username获取用户基本信息
	GetUserInfoByUsername(context.Context, *GetUserByUsername) (*GetUserInfoResult, error)
	// 获取一个sticker下面的所有贴图信息
	GetStickerSetPackDcInfos(context.Context, *GetStickerSetPackDcInfosReq) (*GetStickerSetPackDcInfosResult, error)
	// 存储sticker集合的概要
	StoreStickerSet(context.Context, *StoreShopStickerSetReq) (*StoreShopStickerSetResult, error)
	// 存储stickerSet下面的单个贴图
	StoreStickerPackDc(context.Context, *StoreStickerPackDcReq) (*StoreStickerPackDcResult, error)
	// 用户安装sticker的操作
	StoreUserStickerSet(context.Context, *StoreUserStickerSetReq) (*StoreUserStickerSetResult, error)
	// 删除指定的sticker集合
	DeleteShopStickerSet(context.Context, *DeleteStickerSetReq) (*DeleteStickerSetResult, error)
	// 获取指定的sticker集合
	GetStickerSetInfo(context.Context, *GetStickerSetInfoReq) (*StickerSetInfo, error)
	// 删除指定sticker包的单个sticker
	DeleteStickerPackDocument(context.Context, *DeleteStickerPackDocumentReq) (*DeleteStickerPackDocumentResult, error)
	// 查询作者所有的sticker
	GetAuthorAllStickerSet(context.Context, *GetAuthorAllStickerSetReq) (*GetAuthorAllStickerSetResult, error)
	// 存储sickerSet 的documents
	StoreStickerSetDocument(context.Context, *StoreShopStickerSetDocumentsReq) (*StoreShopStickerSetDocumentsResult, error)
	// chatservice.pb.go
	// 获取用户信息、群、超级群信息
	GetUsersChats(context.Context, *GetUsersChatsReq) (*GetUsersChatsResult, error)
	// 通过群Id 用户Id 获取群基本信息
	GetChatInfo(context.Context, *GetChatInfoReq) (*GetChatInfoResp, error)
	// botserver.pb.go
	// 離開群組
	LeaveChat(context.Context, *ReqData) (*ReplyData, error)
	// 獲取群訊息
	GetChat(context.Context, *ReqData) (*ReplyData, error)
	// 獲取群成員數目
	GetChatMembersCount(context.Context, *ReqGetChatMembersCount) (*ReplyGetChatMembersCount, error)
	// 獲取群管理員
	GetChatAdministrators(context.Context, *ReqData) (*ReplyData, error)
	// 修改群名字
	SetChatTitle(context.Context, *ReqData) (*ReplyData, error)
	// 修改群簡介
	SetChatDescription(context.Context, *ReqData) (*ReplyData, error)
	// 置顶群消息
	UpdatePinnedChannelMessage(context.Context, *ReqData) (*ReplyData, error)
	// 發送Action
	SendChatAction(context.Context, *ReqSendChatAction) (*ReplyData, error)
	// 發送名片
	SendContact(context.Context, *ReqData) (*ReplyData, error)
	// 刪除消息
	DeleteMessage(context.Context, *ReqDeleteMessage) (*ReplyData, error)
	// GetGroups 获取群组消息
	GetGroups(context.Context, *ReqGetGroups) (*ReplyGetGroups, error)
	// GetGroups 获取使用者是管理員的群組消息
	GetAdminGroups(context.Context, *ReqGetAdminGroups) (*ReplyGetGroups, error)
	// 新增手動禁言名單
	SetManualBlockList(context.Context, *ReqSetManualBlockList) (*ManualBlockReplyData, error)
	// 刪除手動禁言名單
	DelManualBlockList(context.Context, *ReqDelManualBlockList) (*ManualBlockReplyData, error)
	// 讓使用者離開群(使用者後續還可以自動加入)
	LeaveGroup(context.Context, *ReqData) (*ReplyChannelData, error)
	// channelservice.pb.go
	// 获取channel信息 不带user信息
	GetChannelInfo(context.Context, *GetChannelInfoReq) (*GetChannelInfoResp, error)
	// storage_proto.pb.go
	// 网关获取文件描述信息
	GatewayGetFileDesc(context.Context, *MsgGetFileDescReq) (*MsgGetFileDescResp, error)
	// QueryObjInfo 查询对象信息
	QueryObjInfo(context.Context, *MsgQueryObjInfoReq) (*MsgQueryObjInfoResp, error)
	// DownloadFile 下载文件或文件片
	DownloadFile(context.Context, *MsgDownloadFileReq) (*MsgDownloadFileResp, error)
	// UploadFile 上传文件或文件片
	UploadFile(context.Context, *MsgUploadFileReq) (*MsgUploadFileResp, error)
	// 网关上传文件
	GatewayUploadFile(context.Context, *MsgFilePartsReq) (*MsgFilePartsResp, error)
	// 网关上传文件描述信息
	GatewayUploadFileDesc(context.Context, *MsgFileDescReq) (*MsgFileDescResp, error)
	// 网关取上传文件的Fid, 与DC约定：1.收到此消息认为文件片已经传完；2.keyid+fileid与存储fid映射关系丢弃
	GatewayGetUploadFileFid(context.Context, *MsgGetFidReq) (*MsgGetFidResp, error)
	// ServiceLimit 服务上传下载限制
	ServiceLimit(context.Context, *MsgServiceLimitReq) (*MsgServiceLimitResp, error)
	// pbmessageserver.pb.go
	// 机器人调用接口
	BotCall(context.Context, *ReqBotCall) (*ReplyBotCall, error)
	// 根据 消息id和用户id 获取单聊消息\普通群消息
	GetMessageByUserIdMsgId(context.Context, *ReqGetMessageByUserIdMsgId) (*ReplyGetMessageByUserIdMsgId, error)
	// 根据 超级群ID和消息ID查询超级群信息
	GetChannelMessageByChannelIdMsgId(context.Context, *ReqGetChannelMessageByChannelIdMsgId) (*ReplyGetChannelMessageByChannelIdMsgId, error)
	// 根据 uuid和用户id 获取单聊消息\普通群消息
	GetMessageByUserIdUuid(context.Context, *ReqGetMessageByUserIdUuid) (*ReplyGetMessageByUserIdUuid, error)
	// 机器人发送webpage
	BotCallMessageMedia(context.Context, *ReqBotCallMessageMedia) (*ReplyBotCall, error)
	// 发送给对方所有端
	SendUserMsg(context.Context, *ReqSendUserMsg) (*ReplyBool, error)
	// 机器人内联调用
	BotInlineCall(context.Context, *ReqBotInlineCall) (*ReplyBotInlineCall, error)
	// 根据超级群用户离线时间倒序获取超级群用户
	GetChannelInactiveUsers(context.Context, *GetChannelInactiveUsersReq) (*GetChannelInactiveUsersResult, error)
	//    普通群删除成员
	DeleteChatUser(context.Context, *ReqDeleteChatUser) (*ReplyDeleteChatUser, error)
	// 获取给定超级群信息
	Getchannels(context.Context, *ReqGetChannels) (*ReplyGetChannels, error)
	// 踢人并进组其再次加入超级群或者频道，或者解除该禁止
	EditBanChannelUser(context.Context, *ReqBanChannelUser) (*ReplyBanChannelUser, error)
	// 设置游戏分数
	SetGameScore(context.Context, *ReqSetGameScore) (*ReplySetGameScore, error)
	//    获取对话框
	GetDialog(context.Context, *RequestDialog) (*ReplyDialog, error)
	// 变更群主
	ChangeGroupAndChannelCrator(context.Context, *ReqChangeGroupAndChannelCrator) (*ReplyChangeGroupAndChannelCrator, error)
	// 主动加入超级群或者频道
	JoinChannel(context.Context, *ReqJoinChannel) (*ReplyJoinChannel, error)
	// 获取超级群用户信息
	GetParticipants(context.Context, *ReqParticipants) (*ReplyParticipants, error)
	//    普通群升级超级群
	MigrateChat(context.Context, *ReqMigrateChat) (*ReplyMigrateChat, error)
	//    创建普通群
	CreateChat(context.Context, *ReqCreateChat) (*ReplyCreateChat, error)
	// 获取群的完整信息
	GetFullChat(context.Context, *ReqGetFullChat) (*ReplyGetFullChat, error)
	// 离开超级群或者频道
	LeaveChannel(context.Context, *ReqLeaveChannel) (*ReplyLeaveChannel, error)
	//    发送媒体消息
	SendMedia(context.Context, *ReqSendMedia) (*ReplyResult, error)
	//    编辑群名称
	EditChatTitle(context.Context, *ReqEditChatTitle) (*ReplyEditChatTitle, error)
	// avthumb.pb.go
	// Resize 重设图片大小
	Resize(context.Context, *ResizeRequest) (*ResizeReply, error)
	// Constraint 约束图片尺寸
	Constraint(context.Context, *ConstraintRequest) (*ConstraintReply, error)
	// CompressImage 压缩图片质量
	CompressImage(context.Context, *CompressImageRequest) (*CompressImageReply, error)
	// GetVideoPreview 获取视频预览
	GetVideoPreview(context.Context, *VideoPreviewRequest) (*VideoPreviewReply, error)
	// GetAudioPreview 获取音频预览
	GetAudioPreview(context.Context, *AudioPreviewRequest) (*AudioPreviewReply, error)
}

func RegisterBotgatewayServiceServer(s *grpc.Server, srv BotgatewayServiceServer) {
	s.RegisterService(&_BotgatewayService_serviceDesc, srv)
}

func _BotgatewayService_AuthSignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).AuthSignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/AuthSignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).AuthSignUp(ctx, req.(*SignUpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetFullUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFullUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetFullUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetFullUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetFullUser(ctx, req.(*GetFullUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_DeleteUserInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).DeleteUserInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/DeleteUserInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).DeleteUserInfoById(ctx, req.(*DeleteAccountByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_UpdateUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateuserNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).UpdateUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/UpdateUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).UpdateUserName(ctx, req.(*UpdateuserNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_RegisterUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).RegisterUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/RegisterUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).RegisterUserInfo(ctx, req.(*RegisterUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_UpdateBotPic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBotPicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).UpdateBotPic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/UpdateBotPic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).UpdateBotPic(ctx, req.(*UpdateBotPicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_UpdateBotInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotUpdateInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).UpdateBotInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/UpdateBotInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).UpdateBotInfo(ctx, req.(*BotUpdateInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_UpdateBotInfoSupp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBotInfoSuppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).UpdateBotInfoSupp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/UpdateBotInfoSupp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).UpdateBotInfoSupp(ctx, req.(*UpdateBotInfoSuppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetUserInfoByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByphone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetUserInfoByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetUserInfoByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetUserInfoByPhone(ctx, req.(*GetUserByphone))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/UpdateUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).UpdateUserProfile(ctx, req.(*UpdateUserProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetUserInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetUserInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetUserInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetUserInfoById(ctx, req.(*GetUserInfoByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetUserInfoByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetUserInfoByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetUserInfoByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetUserInfoByUsername(ctx, req.(*GetUserByUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetStickerSetPackDcInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStickerSetPackDcInfosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetStickerSetPackDcInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetStickerSetPackDcInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetStickerSetPackDcInfos(ctx, req.(*GetStickerSetPackDcInfosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_StoreStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreShopStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).StoreStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/StoreStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).StoreStickerSet(ctx, req.(*StoreShopStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_StoreStickerPackDc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreStickerPackDcReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).StoreStickerPackDc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/StoreStickerPackDc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).StoreStickerPackDc(ctx, req.(*StoreStickerPackDcReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_StoreUserStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreUserStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).StoreUserStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/StoreUserStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).StoreUserStickerSet(ctx, req.(*StoreUserStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_DeleteShopStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).DeleteShopStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/DeleteShopStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).DeleteShopStickerSet(ctx, req.(*DeleteStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetStickerSetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStickerSetInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetStickerSetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetStickerSetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetStickerSetInfo(ctx, req.(*GetStickerSetInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_DeleteStickerPackDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStickerPackDocumentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).DeleteStickerPackDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/DeleteStickerPackDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).DeleteStickerPackDocument(ctx, req.(*DeleteStickerPackDocumentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetAuthorAllStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorAllStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetAuthorAllStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetAuthorAllStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetAuthorAllStickerSet(ctx, req.(*GetAuthorAllStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_StoreStickerSetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreShopStickerSetDocumentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).StoreStickerSetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/StoreStickerSetDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).StoreStickerSetDocument(ctx, req.(*StoreShopStickerSetDocumentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetUsersChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersChatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetUsersChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetUsersChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetUsersChats(ctx, req.(*GetUsersChatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetChatInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetChatInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetChatInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetChatInfo(ctx, req.(*GetChatInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_LeaveChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).LeaveChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/LeaveChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).LeaveChat(ctx, req.(*ReqData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetChat(ctx, req.(*ReqData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetChatMembersCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChatMembersCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetChatMembersCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetChatMembersCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetChatMembersCount(ctx, req.(*ReqGetChatMembersCount))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetChatAdministrators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetChatAdministrators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetChatAdministrators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetChatAdministrators(ctx, req.(*ReqData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_SetChatTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).SetChatTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/SetChatTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).SetChatTitle(ctx, req.(*ReqData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_SetChatDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).SetChatDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/SetChatDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).SetChatDescription(ctx, req.(*ReqData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_UpdatePinnedChannelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).UpdatePinnedChannelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/UpdatePinnedChannelMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).UpdatePinnedChannelMessage(ctx, req.(*ReqData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_SendChatAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendChatAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).SendChatAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/SendChatAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).SendChatAction(ctx, req.(*ReqSendChatAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_SendContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).SendContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/SendContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).SendContact(ctx, req.(*ReqData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/DeleteMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).DeleteMessage(ctx, req.(*ReqDeleteMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetGroups)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetGroups(ctx, req.(*ReqGetGroups))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetAdminGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetAdminGroups)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetAdminGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetAdminGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetAdminGroups(ctx, req.(*ReqGetAdminGroups))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_SetManualBlockList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSetManualBlockList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).SetManualBlockList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/SetManualBlockList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).SetManualBlockList(ctx, req.(*ReqSetManualBlockList))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_DelManualBlockList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDelManualBlockList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).DelManualBlockList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/DelManualBlockList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).DelManualBlockList(ctx, req.(*ReqDelManualBlockList))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_LeaveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).LeaveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/LeaveGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).LeaveGroup(ctx, req.(*ReqData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetChannelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetChannelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetChannelInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetChannelInfo(ctx, req.(*GetChannelInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GatewayGetFileDesc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGetFileDescReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GatewayGetFileDesc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GatewayGetFileDesc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GatewayGetFileDesc(ctx, req.(*MsgGetFileDescReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_QueryObjInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgQueryObjInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).QueryObjInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/QueryObjInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).QueryObjInfo(ctx, req.(*MsgQueryObjInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_DownloadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDownloadFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).DownloadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/DownloadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).DownloadFile(ctx, req.(*MsgDownloadFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUploadFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/UploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).UploadFile(ctx, req.(*MsgUploadFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GatewayUploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFilePartsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GatewayUploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GatewayUploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GatewayUploadFile(ctx, req.(*MsgFilePartsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GatewayUploadFileDesc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFileDescReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GatewayUploadFileDesc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GatewayUploadFileDesc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GatewayUploadFileDesc(ctx, req.(*MsgFileDescReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GatewayGetUploadFileFid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGetFidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GatewayGetUploadFileFid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GatewayGetUploadFileFid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GatewayGetUploadFileFid(ctx, req.(*MsgGetFidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_ServiceLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgServiceLimitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).ServiceLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/ServiceLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).ServiceLimit(ctx, req.(*MsgServiceLimitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_BotCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBotCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).BotCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/BotCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).BotCall(ctx, req.(*ReqBotCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetMessageByUserIdMsgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetMessageByUserIdMsgId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetMessageByUserIdMsgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetMessageByUserIdMsgId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetMessageByUserIdMsgId(ctx, req.(*ReqGetMessageByUserIdMsgId))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetChannelMessageByChannelIdMsgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMessageByChannelIdMsgId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetChannelMessageByChannelIdMsgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetChannelMessageByChannelIdMsgId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetChannelMessageByChannelIdMsgId(ctx, req.(*ReqGetChannelMessageByChannelIdMsgId))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetMessageByUserIdUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetMessageByUserIdUuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetMessageByUserIdUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetMessageByUserIdUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetMessageByUserIdUuid(ctx, req.(*ReqGetMessageByUserIdUuid))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_BotCallMessageMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBotCallMessageMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).BotCallMessageMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/BotCallMessageMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).BotCallMessageMedia(ctx, req.(*ReqBotCallMessageMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_SendUserMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendUserMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).SendUserMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/SendUserMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).SendUserMsg(ctx, req.(*ReqSendUserMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_BotInlineCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBotInlineCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).BotInlineCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/BotInlineCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).BotInlineCall(ctx, req.(*ReqBotInlineCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetChannelInactiveUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelInactiveUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetChannelInactiveUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetChannelInactiveUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetChannelInactiveUsers(ctx, req.(*GetChannelInactiveUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_DeleteChatUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteChatUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).DeleteChatUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/DeleteChatUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).DeleteChatUser(ctx, req.(*ReqDeleteChatUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_Getchannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannels)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).Getchannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/Getchannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).Getchannels(ctx, req.(*ReqGetChannels))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_EditBanChannelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBanChannelUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).EditBanChannelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/EditBanChannelUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).EditBanChannelUser(ctx, req.(*ReqBanChannelUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_SetGameScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSetGameScore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).SetGameScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/SetGameScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).SetGameScore(ctx, req.(*ReqSetGameScore))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDialog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetDialog(ctx, req.(*RequestDialog))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_ChangeGroupAndChannelCrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChangeGroupAndChannelCrator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).ChangeGroupAndChannelCrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/ChangeGroupAndChannelCrator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).ChangeGroupAndChannelCrator(ctx, req.(*ReqChangeGroupAndChannelCrator))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_JoinChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqJoinChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).JoinChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/JoinChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).JoinChannel(ctx, req.(*ReqJoinChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqParticipants)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetParticipants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetParticipants(ctx, req.(*ReqParticipants))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_MigrateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMigrateChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).MigrateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/MigrateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).MigrateChat(ctx, req.(*ReqMigrateChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_CreateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).CreateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/CreateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).CreateChat(ctx, req.(*ReqCreateChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetFullChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetFullChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetFullChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetFullChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetFullChat(ctx, req.(*ReqGetFullChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_LeaveChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLeaveChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).LeaveChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/LeaveChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).LeaveChannel(ctx, req.(*ReqLeaveChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_SendMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).SendMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/SendMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).SendMedia(ctx, req.(*ReqSendMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_EditChatTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditChatTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).EditChatTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/EditChatTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).EditChatTitle(ctx, req.(*ReqEditChatTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_Resize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).Resize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/Resize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).Resize(ctx, req.(*ResizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_Constraint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConstraintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).Constraint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/Constraint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).Constraint(ctx, req.(*ConstraintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_CompressImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompressImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).CompressImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/CompressImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).CompressImage(ctx, req.(*CompressImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetVideoPreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoPreviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetVideoPreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetVideoPreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetVideoPreview(ctx, req.(*VideoPreviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetAudioPreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AudioPreviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetAudioPreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetAudioPreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetAudioPreview(ctx, req.(*AudioPreviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BotgatewayService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "imbotgateway.BotgatewayService",
	HandlerType: (*BotgatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthSignUp",
			Handler:    _BotgatewayService_AuthSignUp_Handler,
		},
		{
			MethodName: "GetFullUser",
			Handler:    _BotgatewayService_GetFullUser_Handler,
		},
		{
			MethodName: "DeleteUserInfoById",
			Handler:    _BotgatewayService_DeleteUserInfoById_Handler,
		},
		{
			MethodName: "UpdateUserName",
			Handler:    _BotgatewayService_UpdateUserName_Handler,
		},
		{
			MethodName: "RegisterUserInfo",
			Handler:    _BotgatewayService_RegisterUserInfo_Handler,
		},
		{
			MethodName: "UpdateBotPic",
			Handler:    _BotgatewayService_UpdateBotPic_Handler,
		},
		{
			MethodName: "UpdateBotInfo",
			Handler:    _BotgatewayService_UpdateBotInfo_Handler,
		},
		{
			MethodName: "UpdateBotInfoSupp",
			Handler:    _BotgatewayService_UpdateBotInfoSupp_Handler,
		},
		{
			MethodName: "GetUserInfoByPhone",
			Handler:    _BotgatewayService_GetUserInfoByPhone_Handler,
		},
		{
			MethodName: "UpdateUserProfile",
			Handler:    _BotgatewayService_UpdateUserProfile_Handler,
		},
		{
			MethodName: "GetUserInfoById",
			Handler:    _BotgatewayService_GetUserInfoById_Handler,
		},
		{
			MethodName: "GetUserInfoByUsername",
			Handler:    _BotgatewayService_GetUserInfoByUsername_Handler,
		},
		{
			MethodName: "GetStickerSetPackDcInfos",
			Handler:    _BotgatewayService_GetStickerSetPackDcInfos_Handler,
		},
		{
			MethodName: "StoreStickerSet",
			Handler:    _BotgatewayService_StoreStickerSet_Handler,
		},
		{
			MethodName: "StoreStickerPackDc",
			Handler:    _BotgatewayService_StoreStickerPackDc_Handler,
		},
		{
			MethodName: "StoreUserStickerSet",
			Handler:    _BotgatewayService_StoreUserStickerSet_Handler,
		},
		{
			MethodName: "DeleteShopStickerSet",
			Handler:    _BotgatewayService_DeleteShopStickerSet_Handler,
		},
		{
			MethodName: "GetStickerSetInfo",
			Handler:    _BotgatewayService_GetStickerSetInfo_Handler,
		},
		{
			MethodName: "DeleteStickerPackDocument",
			Handler:    _BotgatewayService_DeleteStickerPackDocument_Handler,
		},
		{
			MethodName: "GetAuthorAllStickerSet",
			Handler:    _BotgatewayService_GetAuthorAllStickerSet_Handler,
		},
		{
			MethodName: "StoreStickerSetDocument",
			Handler:    _BotgatewayService_StoreStickerSetDocument_Handler,
		},
		{
			MethodName: "GetUsersChats",
			Handler:    _BotgatewayService_GetUsersChats_Handler,
		},
		{
			MethodName: "GetChatInfo",
			Handler:    _BotgatewayService_GetChatInfo_Handler,
		},
		{
			MethodName: "LeaveChat",
			Handler:    _BotgatewayService_LeaveChat_Handler,
		},
		{
			MethodName: "GetChat",
			Handler:    _BotgatewayService_GetChat_Handler,
		},
		{
			MethodName: "GetChatMembersCount",
			Handler:    _BotgatewayService_GetChatMembersCount_Handler,
		},
		{
			MethodName: "GetChatAdministrators",
			Handler:    _BotgatewayService_GetChatAdministrators_Handler,
		},
		{
			MethodName: "SetChatTitle",
			Handler:    _BotgatewayService_SetChatTitle_Handler,
		},
		{
			MethodName: "SetChatDescription",
			Handler:    _BotgatewayService_SetChatDescription_Handler,
		},
		{
			MethodName: "UpdatePinnedChannelMessage",
			Handler:    _BotgatewayService_UpdatePinnedChannelMessage_Handler,
		},
		{
			MethodName: "SendChatAction",
			Handler:    _BotgatewayService_SendChatAction_Handler,
		},
		{
			MethodName: "SendContact",
			Handler:    _BotgatewayService_SendContact_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _BotgatewayService_DeleteMessage_Handler,
		},
		{
			MethodName: "GetGroups",
			Handler:    _BotgatewayService_GetGroups_Handler,
		},
		{
			MethodName: "GetAdminGroups",
			Handler:    _BotgatewayService_GetAdminGroups_Handler,
		},
		{
			MethodName: "SetManualBlockList",
			Handler:    _BotgatewayService_SetManualBlockList_Handler,
		},
		{
			MethodName: "DelManualBlockList",
			Handler:    _BotgatewayService_DelManualBlockList_Handler,
		},
		{
			MethodName: "LeaveGroup",
			Handler:    _BotgatewayService_LeaveGroup_Handler,
		},
		{
			MethodName: "GetChannelInfo",
			Handler:    _BotgatewayService_GetChannelInfo_Handler,
		},
		{
			MethodName: "GatewayGetFileDesc",
			Handler:    _BotgatewayService_GatewayGetFileDesc_Handler,
		},
		{
			MethodName: "QueryObjInfo",
			Handler:    _BotgatewayService_QueryObjInfo_Handler,
		},
		{
			MethodName: "DownloadFile",
			Handler:    _BotgatewayService_DownloadFile_Handler,
		},
		{
			MethodName: "UploadFile",
			Handler:    _BotgatewayService_UploadFile_Handler,
		},
		{
			MethodName: "GatewayUploadFile",
			Handler:    _BotgatewayService_GatewayUploadFile_Handler,
		},
		{
			MethodName: "GatewayUploadFileDesc",
			Handler:    _BotgatewayService_GatewayUploadFileDesc_Handler,
		},
		{
			MethodName: "GatewayGetUploadFileFid",
			Handler:    _BotgatewayService_GatewayGetUploadFileFid_Handler,
		},
		{
			MethodName: "ServiceLimit",
			Handler:    _BotgatewayService_ServiceLimit_Handler,
		},
		{
			MethodName: "BotCall",
			Handler:    _BotgatewayService_BotCall_Handler,
		},
		{
			MethodName: "GetMessageByUserIdMsgId",
			Handler:    _BotgatewayService_GetMessageByUserIdMsgId_Handler,
		},
		{
			MethodName: "GetChannelMessageByChannelIdMsgId",
			Handler:    _BotgatewayService_GetChannelMessageByChannelIdMsgId_Handler,
		},
		{
			MethodName: "GetMessageByUserIdUuid",
			Handler:    _BotgatewayService_GetMessageByUserIdUuid_Handler,
		},
		{
			MethodName: "BotCallMessageMedia",
			Handler:    _BotgatewayService_BotCallMessageMedia_Handler,
		},
		{
			MethodName: "SendUserMsg",
			Handler:    _BotgatewayService_SendUserMsg_Handler,
		},
		{
			MethodName: "BotInlineCall",
			Handler:    _BotgatewayService_BotInlineCall_Handler,
		},
		{
			MethodName: "GetChannelInactiveUsers",
			Handler:    _BotgatewayService_GetChannelInactiveUsers_Handler,
		},
		{
			MethodName: "DeleteChatUser",
			Handler:    _BotgatewayService_DeleteChatUser_Handler,
		},
		{
			MethodName: "Getchannels",
			Handler:    _BotgatewayService_Getchannels_Handler,
		},
		{
			MethodName: "EditBanChannelUser",
			Handler:    _BotgatewayService_EditBanChannelUser_Handler,
		},
		{
			MethodName: "SetGameScore",
			Handler:    _BotgatewayService_SetGameScore_Handler,
		},
		{
			MethodName: "GetDialog",
			Handler:    _BotgatewayService_GetDialog_Handler,
		},
		{
			MethodName: "ChangeGroupAndChannelCrator",
			Handler:    _BotgatewayService_ChangeGroupAndChannelCrator_Handler,
		},
		{
			MethodName: "JoinChannel",
			Handler:    _BotgatewayService_JoinChannel_Handler,
		},
		{
			MethodName: "GetParticipants",
			Handler:    _BotgatewayService_GetParticipants_Handler,
		},
		{
			MethodName: "MigrateChat",
			Handler:    _BotgatewayService_MigrateChat_Handler,
		},
		{
			MethodName: "CreateChat",
			Handler:    _BotgatewayService_CreateChat_Handler,
		},
		{
			MethodName: "GetFullChat",
			Handler:    _BotgatewayService_GetFullChat_Handler,
		},
		{
			MethodName: "LeaveChannel",
			Handler:    _BotgatewayService_LeaveChannel_Handler,
		},
		{
			MethodName: "SendMedia",
			Handler:    _BotgatewayService_SendMedia_Handler,
		},
		{
			MethodName: "EditChatTitle",
			Handler:    _BotgatewayService_EditChatTitle_Handler,
		},
		{
			MethodName: "Resize",
			Handler:    _BotgatewayService_Resize_Handler,
		},
		{
			MethodName: "Constraint",
			Handler:    _BotgatewayService_Constraint_Handler,
		},
		{
			MethodName: "CompressImage",
			Handler:    _BotgatewayService_CompressImage_Handler,
		},
		{
			MethodName: "GetVideoPreview",
			Handler:    _BotgatewayService_GetVideoPreview_Handler,
		},
		{
			MethodName: "GetAudioPreview",
			Handler:    _BotgatewayService_GetAudioPreview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/imbotgateway/imbotgateway.proto",
}

func (m *ReqGetFullChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetFullChannel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.FromId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.AccessHash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n1, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *ReqGetParticipants) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetParticipants) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OffSet != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.OffSet))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Limit))
	}
	if m.PartiType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.PartiType))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ChannelId))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.FromId))
	}
	if len(m.Q) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Q)))
		i += copy(dAtA[i:], m.Q)
	}
	if m.Hash != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Hash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n2, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *ReqUpdatePinnedChannelMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdatePinnedChannelMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.FromId))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Flags))
	}
	if m.Silent {
		dAtA[i] = 0x18
		i++
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ChannelId))
	}
	if m.Id != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Id))
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n3, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *ReqEditChannelAbout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqEditChannelAbout) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.FromKeyId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.About) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.About)))
		i += copy(dAtA[i:], m.About)
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.AccessHash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n4, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *ReqEditChannelTitle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqEditChannelTitle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.UserId))
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n5, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *ReplyChannelData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyChannelData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Reply) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Reply)))
		i += copy(dAtA[i:], m.Reply)
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ErrorCode))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ChannelId))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.FromId))
	}
	return i, nil
}

func (m *ReqDelManualBlockList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDelManualBlockList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UnBlockUser != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.UnBlockUser.Size()))
		n6, err := m.UnBlockUser.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.BotId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.BotId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n7, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *ReqSetManualBlockList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSetManualBlockList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BlockUser != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.BlockUser.Size()))
		n8, err := m.BlockUser.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.BotId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.BotId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n9, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *BlockUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.UserId))
	}
	if m.BlockTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.BlockTime))
	}
	if m.GroupId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.GroupId))
	}
	return i, nil
}

func (m *ManualBlockReplyData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ManualBlockReplyData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ReplyData) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.ReplyData)))
		i += copy(dAtA[i:], m.ReplyData)
	}
	if m.Reply {
		dAtA[i] = 0x10
		i++
		if m.Reply {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *StoreShopStickerSetDocumentsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreShopStickerSetDocumentsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Id))
	}
	if len(m.Documents) > 0 {
		dAtA11 := make([]byte, len(m.Documents)*10)
		var j10 int
		for _, num1 := range m.Documents {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(j10))
		i += copy(dAtA[i:], dAtA11[:j10])
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n12, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *StoreShopStickerSetDocumentsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreShopStickerSetDocumentsResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *AuthorStickerSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorStickerSet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.UserId))
	}
	if m.StickersetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.StickersetId))
	}
	if len(m.ShortName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.ShortName)))
		i += copy(dAtA[i:], m.ShortName)
	}
	if m.Archived {
		dAtA[i] = 0x20
		i++
		if m.Archived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Installed {
		dAtA[i] = 0x28
		i++
		if m.Installed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Disabled {
		dAtA[i] = 0x30
		i++
		if m.Disabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Ordered != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Ordered))
	}
	if m.Created != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Created))
	}
	if m.Updated != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Updated))
	}
	return i, nil
}

func (m *GetAuthorAllStickerSetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuthorAllStickerSetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *GetAuthorAllStickerSetResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuthorAllStickerSetResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.Sets) > 0 {
		for _, msg := range m.Sets {
			dAtA[i] = 0x12
			i++
			i = encodeVarintImbotgateway(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DeleteStickerPackDocumentReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteStickerPackDocumentReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Id))
	}
	if m.StickersetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.StickersetId))
	}
	return i, nil
}

func (m *DeleteStickerPackDocumentResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteStickerPackDocumentResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetStickerSetInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStickerSetInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Id))
	}
	if len(m.ShortName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.ShortName)))
		i += copy(dAtA[i:], m.ShortName)
	}
	if m.IsId {
		dAtA[i] = 0x18
		i++
		if m.IsId {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n13, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *StickerSetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StickerSetInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Id))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.AccessHash))
	}
	if m.Free {
		dAtA[i] = 0x18
		i++
		if m.Free {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Official {
		dAtA[i] = 0x20
		i++
		if m.Official {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Masks {
		dAtA[i] = 0x28
		i++
		if m.Masks {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.ShortName) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.ShortName)))
		i += copy(dAtA[i:], m.ShortName)
	}
	if m.Count != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Count))
	}
	if m.Hash != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Hash))
	}
	if len(m.Emoticon) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Emoticon)))
		i += copy(dAtA[i:], m.Emoticon)
	}
	if len(m.Documents) > 0 {
		dAtA15 := make([]byte, len(m.Documents)*10)
		var j14 int
		for _, num1 := range m.Documents {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA15[j14] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j14++
			}
			dAtA15[j14] = uint8(num)
			j14++
		}
		dAtA[i] = 0x5a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(j14))
		i += copy(dAtA[i:], dAtA15[:j14])
	}
	return i, nil
}

func (m *GetStickerSetInfoResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStickerSetInfoResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StickerSetInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.StickerSetInfo.Size()))
		n16, err := m.StickerSetInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *DeleteStickerSetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteStickerSetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StickerId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.StickerId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n17, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *DeleteStickerSetResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteStickerSetResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *StoreUserStickerSetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreUserStickerSetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.UserId))
	}
	if m.StickersetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.StickersetId))
	}
	if m.Installed {
		dAtA[i] = 0x18
		i++
		if m.Installed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Disabled {
		dAtA[i] = 0x20
		i++
		if m.Disabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Order != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Order))
	}
	if m.Archived {
		dAtA[i] = 0x30
		i++
		if m.Archived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Debug != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n18, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}

func (m *StoreUserStickerSetResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreUserStickerSetResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *StoreStickerPackDcReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreStickerPackDcReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Stickpackbase != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Stickpackbase.Size()))
		n19, err := m.Stickpackbase.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n20, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}

func (m *StoreStickerPackDcResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreStickerPackDcResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Id))
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *StoreShopStickerSetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreShopStickerSetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AccessHash != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.AccessHash))
	}
	if m.Free {
		dAtA[i] = 0x10
		i++
		if m.Free {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Official {
		dAtA[i] = 0x18
		i++
		if m.Official {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Masks {
		dAtA[i] = 0x20
		i++
		if m.Masks {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.ShortName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.ShortName)))
		i += copy(dAtA[i:], m.ShortName)
	}
	if m.Count != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Count))
	}
	if m.Hash != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Hash))
	}
	if len(m.Emoticon) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Emoticon)))
		i += copy(dAtA[i:], m.Emoticon)
	}
	if len(m.Documents) > 0 {
		dAtA22 := make([]byte, len(m.Documents)*10)
		var j21 int
		for _, num1 := range m.Documents {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA22[j21] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j21++
			}
			dAtA22[j21] = uint8(num)
			j21++
		}
		dAtA[i] = 0x52
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(j21))
		i += copy(dAtA[i:], dAtA22[:j21])
	}
	if m.Debug != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n23, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.UserId != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *StoreShopStickerSetResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreShopStickerSetResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Id))
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *ResizeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResizeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.Width != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Width))
	}
	if m.Height != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Height))
	}
	return i, nil
}

func (m *ResizeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResizeReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Status))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *ConstraintRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConstraintRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.MaxSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.MaxSize))
	}
	if m.OutputWebp {
		dAtA[i] = 0x18
		i++
		if m.OutputWebp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ConstraintReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConstraintReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Status))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.Width != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Width))
	}
	if m.Height != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Height))
	}
	if m.OriginWidth != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.OriginWidth))
	}
	if m.OriginHeight != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.OriginHeight))
	}
	return i, nil
}

func (m *CompressImageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompressImageRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.Quality != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Quality))
	}
	return i, nil
}

func (m *CompressImageReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompressImageReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Status))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *VideoPreviewRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoPreviewRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.MaxSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.MaxSize))
	}
	return i, nil
}

func (m *VideoPreviewReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoPreviewReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Status))
	}
	if m.Duration != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Duration))
	}
	if len(m.Preview) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Preview)))
		i += copy(dAtA[i:], m.Preview)
	}
	if m.Width != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Width))
	}
	if m.Height != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Height))
	}
	return i, nil
}

func (m *AudioPreviewRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AudioPreviewRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.MaxSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.MaxSize))
	}
	return i, nil
}

func (m *AudioPreviewReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AudioPreviewReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Status))
	}
	if m.Duration != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Duration))
	}
	if len(m.Cover) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Cover)))
		i += copy(dAtA[i:], m.Cover)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Artist) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Artist)))
		i += copy(dAtA[i:], m.Artist)
	}
	if m.Width != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Width))
	}
	if m.Height != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Height))
	}
	return i, nil
}

func (m *ReqParticipants) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqParticipants) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OffSet != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.OffSet))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Limit))
	}
	if m.PartiType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.PartiType))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ChannelId))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.FromId))
	}
	if len(m.Q) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Q)))
		i += copy(dAtA[i:], m.Q)
	}
	if m.Hash != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Hash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n24, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}

func (m *ReplyParticipants) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyParticipants) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Updates) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Updates)))
		i += copy(dAtA[i:], m.Updates)
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqCreateChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCreateChat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Chatid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Chatid))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.Creator != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Creator))
	}
	if len(m.Users) > 0 {
		dAtA26 := make([]byte, len(m.Users)*10)
		var j25 int
		for _, num1 := range m.Users {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA26[j25] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j25++
			}
			dAtA26[j25] = uint8(num)
			j25++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(j25))
		i += copy(dAtA[i:], dAtA26[:j25])
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n27, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}

func (m *ReplyCreateChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyCreateChat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.Error != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *ReqMigrateChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqMigrateChat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fromid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Fromid))
	}
	if m.Chatid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Chatid))
	}
	if m.Fromkeyid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Fromkeyid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n28, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}

func (m *ReplyMigrateChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyMigrateChat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.Error != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *ReqJoinChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqJoinChannel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.UserId))
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.FromKeyid))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.AccessHash))
	}
	if m.ByLink {
		dAtA[i] = 0x38
		i++
		if m.ByLink {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Invitor != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Invitor))
	}
	if m.InviteType != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.InviteType))
	}
	if m.Debug != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n29, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}

func (m *ReplyJoinChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyJoinChannel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Reply) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Reply)))
		i += copy(dAtA[i:], m.Reply)
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqChangeGroupAndChannelCrator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChangeGroupAndChannelCrator) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.GroupId))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.FromId))
	}
	if m.OperatorId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.OperatorId))
	}
	if m.IsChat {
		dAtA[i] = 0x20
		i++
		if m.IsChat {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ReplyChangeGroupAndChannelCrator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyChangeGroupAndChannelCrator) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Valid {
		dAtA[i] = 0x8
		i++
		if m.Valid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqBotCallMessageMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqBotCallMessageMedia) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromBotId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.FromBotId))
	}
	if len(m.MsgTxt) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.MsgTxt)))
		i += copy(dAtA[i:], m.MsgTxt)
	}
	if len(m.Request) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Request)))
		i += copy(dAtA[i:], m.Request)
	}
	if m.Layer != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Layer))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n30, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}

func (m *RequestDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestDialog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Userid))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Flags))
	}
	if m.OffsetDate != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.OffsetDate))
	}
	if m.OffsetId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.OffsetId))
	}
	if len(m.OffsetPeer) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.OffsetPeer)))
		i += copy(dAtA[i:], m.OffsetPeer)
	}
	if m.Limit != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Limit))
	}
	if m.Debug != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n31, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}

func (m *ReplyDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyDialog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *UserScore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserScore) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Userid))
	}
	if m.Score != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Score))
	}
	return i, nil
}

func (m *ReqSetGameScore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSetGameScore) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Userid))
	}
	if len(m.Scores) > 0 {
		for _, msg := range m.Scores {
			dAtA[i] = 0x12
			i++
			i = encodeVarintImbotgateway(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Force {
		dAtA[i] = 0x18
		i++
		if m.Force {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DisableEditMessage {
		dAtA[i] = 0x20
		i++
		if m.DisableEditMessage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ChatId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ChatId))
	}
	if m.ChatType != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ChatType))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.MessageId))
	}
	if len(m.InlineMessageId) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.InlineMessageId)))
		i += copy(dAtA[i:], m.InlineMessageId)
	}
	if m.Botid != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Botid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n32, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}

func (m *ReplySetGameScore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplySetGameScore) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Succeed {
		dAtA[i] = 0x8
		i++
		if m.Succeed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *ReplyBanChannelUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyBanChannelUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Updates) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Updates)))
		i += copy(dAtA[i:], m.Updates)
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqBanChannelUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqBanChannelUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.FromKeyId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ChannelId))
	}
	if m.BannedUserId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.BannedUserId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.AccessHash))
	}
	if m.UtilDate != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.UtilDate))
	}
	if m.ChannelBannedRights != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ChannelBannedRights.Size()))
		n33, err := m.ChannelBannedRights.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	if m.Debug != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n34, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	return i, nil
}

func (m *ChannelBannedRights) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelBannedRights) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Flags != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Flags))
	}
	if m.ViewMessages {
		dAtA[i] = 0x10
		i++
		if m.ViewMessages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SendMessages {
		dAtA[i] = 0x18
		i++
		if m.SendMessages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SendMedia {
		dAtA[i] = 0x20
		i++
		if m.SendMedia {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SendStickers {
		dAtA[i] = 0x28
		i++
		if m.SendStickers {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SendGifs {
		dAtA[i] = 0x30
		i++
		if m.SendGifs {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SendGames {
		dAtA[i] = 0x38
		i++
		if m.SendGames {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SendInline {
		dAtA[i] = 0x40
		i++
		if m.SendInline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.EmbedLinks {
		dAtA[i] = 0x48
		i++
		if m.EmbedLinks {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.UntilDate != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.UntilDate))
	}
	return i, nil
}

func (m *ReqGetChannels) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannels) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChannelIds) > 0 {
		dAtA36 := make([]byte, len(m.ChannelIds)*10)
		var j35 int
		for _, num1 := range m.ChannelIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA36[j35] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j35++
			}
			dAtA36[j35] = uint8(num)
			j35++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(j35))
		i += copy(dAtA[i:], dAtA36[:j35])
	}
	if m.FromId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.FromId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n37, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	return i, nil
}

func (m *ReplyGetChannels) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetChannels) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Reply) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Reply)))
		i += copy(dAtA[i:], m.Reply)
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqDeleteChatUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDeleteChatUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fromid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Fromid))
	}
	if m.Chatid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Chatid))
	}
	if m.Userid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Userid))
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n38, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	return i, nil
}

func (m *ReplyDeleteChatUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyDeleteChatUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *ChannelInactiveUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelInactiveUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Time != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Time))
	}
	if len(m.TimeStr) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.TimeStr)))
		i += copy(dAtA[i:], m.TimeStr)
	}
	return i, nil
}

func (m *GetChannelInactiveUsersReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelInactiveUsersReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ChannelId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Limit))
	}
	if m.Userid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Userid))
	}
	return i, nil
}

func (m *GetChannelInactiveUsersResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelInactiveUsersResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0xa
			i++
			i = encodeVarintImbotgateway(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Count))
	}
	if m.Errcode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Errcode))
	}
	return i, nil
}

func (m *ReqBotInlineCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqBotInlineCall) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n39, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.UserId))
	}
	if m.BotId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.BotId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.KeyId))
	}
	if m.SessionId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.SessionId))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *ReplyBotInlineCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyBotInlineCall) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ErrCode))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Inlinecall != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Inlinecall.Size()))
		n40, err := m.Inlinecall.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	return i, nil
}

func (m *InlineCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InlineCall) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.MsgId))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.FromId))
	}
	if m.ChatId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ChatId))
	}
	if m.ChatType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ChatType))
	}
	if m.BotId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.BotId))
	}
	return i, nil
}

func (m *ReqSendUserMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSendUserMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fromid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Fromid))
	}
	if m.FromKeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.FromKeyId))
	}
	if m.Toid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Toid))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n41, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	return i, nil
}

func (m *ReplyBool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyBool) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *ReqBotCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqBotCall) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FrombotId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.FrombotId))
	}
	if len(m.Request) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Request)))
		i += copy(dAtA[i:], m.Request)
	}
	if m.Layer != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Layer))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n42, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	return i, nil
}

func (m *ReplyBotCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyBotCall) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *ReqGetMessageByUserIdUuid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetMessageByUserIdUuid) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.UserId))
	}
	if m.Uuid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Uuid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n43, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	return i, nil
}

func (m *ReplyGetMessageByUserIdUuid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetMessageByUserIdUuid) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserMessage != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.UserMessage.Size()))
		n44, err := m.UserMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqGetChannelMessageByChannelIdMsgId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelMessageByChannelIdMsgId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ChannelId))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.MsgId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n45, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	return i, nil
}

func (m *ReplyGetChannelMessageByChannelIdMsgId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetChannelMessageByChannelIdMsgId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserMessage != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.UserMessage.Size()))
		n46, err := m.UserMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqGetMessageByUserIdMsgId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetMessageByUserIdMsgId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.UserId))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.MsgId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n47, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	return i, nil
}

func (m *ReplyGetMessageByUserIdMsgId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetMessageByUserIdMsgId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserMessage != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.UserMessage.Size()))
		n48, err := m.UserMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *MsgFileDescReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFileDescReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Fid))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.AccessHash))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *MsgFileDescResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFileDescResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func (m *MsgServiceLimitReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgServiceLimitReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Reserved != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Reserved))
	}
	return i, nil
}

func (m *MsgServiceLimitResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgServiceLimitResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Usfsl != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Usfsl))
	}
	if m.Ubfssl != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Ubfssl))
	}
	if m.Dssl != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Dssl))
	}
	return i, nil
}

func (m *MsgGetFidReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGetFidReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Keyid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Keyid))
	}
	if m.Fileid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Fileid))
	}
	if m.FileType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.FileType))
	}
	if len(m.Md5) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Md5)))
		i += copy(dAtA[i:], m.Md5)
	}
	if m.PartTotal != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.PartTotal))
	}
	return i, nil
}

func (m *MsgGetFidResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGetFidResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Fid))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.AccessHash))
	}
	if m.FileSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.FileSize))
	}
	if m.Result != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func (m *MsgFilePartsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFilePartsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Keyid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Keyid))
	}
	if m.Fileid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Fileid))
	}
	if m.PartId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.PartId))
	}
	if m.FileType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.FileType))
	}
	if m.PartTotal != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.PartTotal))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *MsgFilePartsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFilePartsResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func (m *MsgUploadFileReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUploadFileReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Para1 != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Para1.Size()))
		n49, err := m.Para1.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n49
	}
	if m.Para2 != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Para2.Size()))
		n50, err := m.Para2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n50
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *UploadReqPara1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadReqPara1) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Fid))
	}
	if m.PartId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.PartId))
	}
	if m.PartSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.PartSize))
	}
	return i, nil
}

func (m *UploadReqPara2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadReqPara2) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FileName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.FileName)))
		i += copy(dAtA[i:], m.FileName)
	}
	if m.FileSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.FileSize))
	}
	if len(m.FileHash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.FileHash)))
		i += copy(dAtA[i:], m.FileHash)
	}
	if m.Ttl != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Ttl))
	}
	return i, nil
}

func (m *FileUploadRespPara) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileUploadRespPara) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Fid))
	}
	if m.PartId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.PartId))
	}
	return i, nil
}

func (m *MsgUploadFileResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUploadFileResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Result))
	}
	if m.Para1 != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Para1.Size()))
		n51, err := m.Para1.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n51
	}
	if m.Para2 != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Para2.Size()))
		n52, err := m.Para2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n52
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.AccessHash))
	}
	return i, nil
}

func (m *MsgDownloadFileReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDownloadFileReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Fid))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.AccessHash))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Offset))
	}
	if m.Length != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Length))
	}
	return i, nil
}

func (m *DownloadFileRespPara1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownloadFileRespPara1) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Fid))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Offset))
	}
	if len(m.FileName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.FileName)))
		i += copy(dAtA[i:], m.FileName)
	}
	return i, nil
}

func (m *DownloadFileRespPara2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownloadFileRespPara2) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Length != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Length))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *MsgDownloadFileResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDownloadFileResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Result))
	}
	if m.Para1 != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Para1.Size()))
		n53, err := m.Para1.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n53
	}
	if m.Para2 != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Para2.Size()))
		n54, err := m.Para2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n54
	}
	return i, nil
}

func (m *MsgQueryObjInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgQueryObjInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Fid))
	}
	return i, nil
}

func (m *QueryObjInfoRespPara) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryObjInfoRespPara) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Size_ != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Size_))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.AccessHash))
	}
	return i, nil
}

func (m *MsgQueryObjInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgQueryObjInfoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Para != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Para.Size()))
		n55, err := m.Para.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n55
	}
	if m.Result != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func (m *MsgGetFileDescReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGetFileDescReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Fid))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.AccessHash))
	}
	return i, nil
}

func (m *MsgGetFileDescResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGetFileDescResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Result))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *GetChannelInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.AccessHash))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Dlog.Size()))
		n56, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n56
	}
	return i, nil
}

func (m *GetChannelInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelInfoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BaseInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.BaseInfo.Size()))
		n57, err := m.BaseInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n57
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *ReqGetAdminGroups) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetAdminGroups) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.UserID))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n58, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n58
	}
	return i, nil
}

func (m *ReqGetGroups) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetGroups) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.UserID))
	}
	if m.PeerFilter != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.PeerFilter))
	}
	return i, nil
}

func (m *Peer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Peer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PeerID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.PeerID))
	}
	if len(m.PeerName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.PeerName)))
		i += copy(dAtA[i:], m.PeerName)
	}
	return i, nil
}

func (m *ReplyGetGroups) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetGroups) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, msg := range m.Groups {
			dAtA[i] = 0xa
			i++
			i = encodeVarintImbotgateway(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.SuperGroups) > 0 {
		for _, msg := range m.SuperGroups {
			dAtA[i] = 0x12
			i++
			i = encodeVarintImbotgateway(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Channels) > 0 {
		for _, msg := range m.Channels {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintImbotgateway(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ReqDeleteMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDeleteMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ChatType))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.UserId))
	}
	if m.ChatId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ChatId))
	}
	if len(m.MsgId) > 0 {
		dAtA60 := make([]byte, len(m.MsgId)*10)
		var j59 int
		for _, num1 := range m.MsgId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA60[j59] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j59++
			}
			dAtA60[j59] = uint8(num)
			j59++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(j59))
		i += copy(dAtA[i:], dAtA60[:j59])
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n61, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n61
	}
	return i, nil
}

func (m *ReqSendChatAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSendChatAction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ChatType))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.UserId))
	}
	if m.ChatId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ChatId))
	}
	if len(m.ActionData) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.ActionData)))
		i += copy(dAtA[i:], m.ActionData)
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n62, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n62
	}
	return i, nil
}

func (m *ReqData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ChatType))
	}
	if len(m.ReqData) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.ReqData)))
		i += copy(dAtA[i:], m.ReqData)
	}
	if m.BotId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.BotId))
	}
	return i, nil
}

func (m *ReplyData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Reply) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Reply)))
		i += copy(dAtA[i:], m.Reply)
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *ReqGetChatMembersCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChatMembersCount) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ChatType))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.UserId))
	}
	if m.ChatId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ChatId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n63, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n63
	}
	return i, nil
}

func (m *ReplyGetChatMembersCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetChatMembersCount) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatMembersCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ChatMembersCount))
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *GetChatInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChatInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ChatId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.UserId))
	}
	if m.RobotGet {
		dAtA[i] = 0x18
		i++
		if m.RobotGet {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Dlog != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Dlog.Size()))
		n64, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n64
	}
	return i, nil
}

func (m *GetUsersChatsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUsersChatsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Userid))
	}
	if len(m.Users) > 0 {
		dAtA66 := make([]byte, len(m.Users)*10)
		var j65 int
		for _, num1 := range m.Users {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA66[j65] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j65++
			}
			dAtA66[j65] = uint8(num)
			j65++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(j65))
		i += copy(dAtA[i:], dAtA66[:j65])
	}
	if len(m.Chatid) > 0 {
		dAtA68 := make([]byte, len(m.Chatid)*10)
		var j67 int
		for _, num1 := range m.Chatid {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA68[j67] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j67++
			}
			dAtA68[j67] = uint8(num)
			j67++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(j67))
		i += copy(dAtA[i:], dAtA68[:j67])
	}
	if len(m.Channelid) > 0 {
		dAtA70 := make([]byte, len(m.Channelid)*10)
		var j69 int
		for _, num1 := range m.Channelid {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA70[j69] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j69++
			}
			dAtA70[j69] = uint8(num)
			j69++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(j69))
		i += copy(dAtA[i:], dAtA70[:j69])
	}
	if m.ProtocolLayer != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ProtocolLayer))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Dlog.Size()))
		n71, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n71
	}
	return i, nil
}

func (m *GetUsersChatsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUsersChatsResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Channels) > 0 {
		for _, b := range m.Channels {
			dAtA[i] = 0xa
			i++
			i = encodeVarintImbotgateway(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.Users != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Users.Size()))
		n72, err := m.Users.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n72
	}
	if len(m.Chats) > 0 {
		for _, b := range m.Chats {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintImbotgateway(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.NoChats) > 0 {
		dAtA74 := make([]byte, len(m.NoChats)*10)
		var j73 int
		for _, num1 := range m.NoChats {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA74[j73] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j73++
			}
			dAtA74[j73] = uint8(num)
			j73++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(j73))
		i += copy(dAtA[i:], dAtA74[:j73])
	}
	if len(m.NoChans) > 0 {
		dAtA76 := make([]byte, len(m.NoChans)*10)
		var j75 int
		for _, num1 := range m.NoChans {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA76[j75] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j75++
			}
			dAtA76[j75] = uint8(num)
			j75++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(j75))
		i += copy(dAtA[i:], dAtA76[:j75])
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *GetUserInfoByIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserInfoByIdReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.SelfId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.UserId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n77, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n77
	}
	return i, nil
}

func (m *GetUserInfoByIdArrReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserInfoByIdArrReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.SelfId))
	}
	if len(m.UserIds) > 0 {
		dAtA79 := make([]byte, len(m.UserIds)*10)
		var j78 int
		for _, num1 := range m.UserIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA79[j78] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j78++
			}
			dAtA79[j78] = uint8(num)
			j78++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(j78))
		i += copy(dAtA[i:], dAtA79[:j78])
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n80, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n80
	}
	return i, nil
}

func (m *UpdateUserProfileReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserProfileReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.UserId))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Flags))
	}
	if len(m.FirstName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.FirstName)))
		i += copy(dAtA[i:], m.FirstName)
	}
	if len(m.LastName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.LastName)))
		i += copy(dAtA[i:], m.LastName)
	}
	if len(m.About) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.About)))
		i += copy(dAtA[i:], m.About)
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n81, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n81
	}
	return i, nil
}

func (m *UpdateUserProfileResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserProfileResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uinfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Uinfo.Size()))
		n82, err := m.Uinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n82
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetUserByphone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserByphone) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Phone) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n83, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n83
	}
	return i, nil
}

func (m *GetUserInfoResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserInfoResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uinfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Uinfo.Size()))
		n84, err := m.Uinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n84
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *UpdateBotInfoSuppReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBotInfoSuppReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.UserId))
	}
	if len(m.Placeholder) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Placeholder)))
		i += copy(dAtA[i:], m.Placeholder)
	}
	if m.Geo {
		dAtA[i] = 0x18
		i++
		if m.Geo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n85, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n85
	}
	return i, nil
}

func (m *UpdateBotInfoSuppResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBotInfoSuppResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *BotUpdateInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BotUpdateInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.UserId))
	}
	if m.BotInfoVersion != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.BotInfoVersion))
	}
	if m.BotChatHistory {
		dAtA[i] = 0x18
		i++
		if m.BotChatHistory {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BotNoChat {
		dAtA[i] = 0x20
		i++
		if m.BotNoChat {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n86, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n86
	}
	return i, nil
}

func (m *BotUpdateInfoResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BotUpdateInfoResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *UpdateBotPicRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBotPicRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BotId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.BotId))
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n87, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n87
	}
	return i, nil
}

func (m *UpdateBotPicResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBotPicResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *UpdateuserNameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateuserNameReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.UserId))
	}
	if len(m.UserName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.UserName)))
		i += copy(dAtA[i:], m.UserName)
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n88, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n88
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.KeyId))
	}
	return i, nil
}

func (m *UpdateuserNameResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateuserNameResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uinfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Uinfo.Size()))
		n89, err := m.Uinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n89
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *RegisterUserInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterUserInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.AccessHash))
	}
	if len(m.PhoneNumber) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.PhoneNumber)))
		i += copy(dAtA[i:], m.PhoneNumber)
	}
	if len(m.FirstName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.FirstName)))
		i += copy(dAtA[i:], m.FirstName)
	}
	if len(m.LastName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.LastName)))
		i += copy(dAtA[i:], m.LastName)
	}
	if m.IsBot {
		dAtA[i] = 0x30
		i++
		if m.IsBot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BotInfoVersion != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.BotInfoVersion))
	}
	if m.BotChatHistory {
		dAtA[i] = 0x40
		i++
		if m.BotChatHistory {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BotNoChats {
		dAtA[i] = 0x48
		i++
		if m.BotNoChats {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Debug != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n90, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n90
	}
	return i, nil
}

func (m *RegisterUserInfoResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterUserInfoResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uinfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Uinfo.Size()))
		n91, err := m.Uinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n91
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *DeleteAccountByIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAccountByIdReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.UserId))
	}
	if m.DelId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.DelId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n92, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n92
	}
	return i, nil
}

func (m *DelAccountResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelAccountResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errorcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *SignUpReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignUpReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PhoneNumber) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.PhoneNumber)))
		i += copy(dAtA[i:], m.PhoneNumber)
	}
	if len(m.PhoneCodeHash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.PhoneCodeHash)))
		i += copy(dAtA[i:], m.PhoneCodeHash)
	}
	if len(m.PhoneCode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.PhoneCode)))
		i += copy(dAtA[i:], m.PhoneCode)
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.KeyId))
	}
	if len(m.FirstName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.FirstName)))
		i += copy(dAtA[i:], m.FirstName)
	}
	if len(m.LastName) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.LastName)))
		i += copy(dAtA[i:], m.LastName)
	}
	if m.IsBot {
		dAtA[i] = 0x40
		i++
		if m.IsBot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BotInfoVersion != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.BotInfoVersion))
	}
	if m.BotChatHistory {
		dAtA[i] = 0x50
		i++
		if m.BotChatHistory {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BotNoChats {
		dAtA[i] = 0x58
		i++
		if m.BotNoChats {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DcId != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.DcId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n93, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n93
	}
	if len(m.CountryCode) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.CountryCode)))
		i += copy(dAtA[i:], m.CountryCode)
	}
	if len(m.LocalPhone) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.LocalPhone)))
		i += copy(dAtA[i:], m.LocalPhone)
	}
	return i, nil
}

func (m *AuthSignUpResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthSignUpResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Code))
	}
	if m.UserInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.UserInfo.Size()))
		n94, err := m.UserInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n94
	}
	return i, nil
}

func (m *GetFullUserReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFullUserReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.SelfId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.AccessHash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n95, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n95
	}
	return i, nil
}

func (m *GetFullUserResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFullUserResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uinfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Uinfo.Size()))
		n96, err := m.Uinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n96
	}
	if m.Isblocked {
		dAtA[i] = 0x10
		i++
		if m.Isblocked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PhoneCallsPrivate {
		dAtA[i] = 0x18
		i++
		if m.PhoneCallsPrivate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PhoneCallsAvailable {
		dAtA[i] = 0x20
		i++
		if m.PhoneCallsAvailable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.About) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.About)))
		i += copy(dAtA[i:], m.About)
	}
	if m.CommonChat != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.CommonChat))
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetUserByUsername) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserByUsername) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.SelfId))
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n97, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n97
	}
	return i, nil
}

func (m *ReqGetFullChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetFullChat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fromid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Fromid))
	}
	if m.Chatid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Chatid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n98, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n98
	}
	return i, nil
}

func (m *ReplyGetFullChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetFullChat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *ReqLeaveChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqLeaveChannel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.UserId))
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n99, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n99
	}
	return i, nil
}

func (m *ReplyLeaveChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyLeaveChannel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Reply) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Reply)))
		i += copy(dAtA[i:], m.Reply)
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqSendMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSendMedia) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fromid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Fromid))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Flags))
	}
	if m.Silent {
		dAtA[i] = 0x18
		i++
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Background {
		dAtA[i] = 0x20
		i++
		if m.Background {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ClearDraft {
		dAtA[i] = 0x28
		i++
		if m.ClearDraft {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Peer) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Peer)))
		i += copy(dAtA[i:], m.Peer)
	}
	if m.ReplyToMsgId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ReplyToMsgId))
	}
	if len(m.Media) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Media)))
		i += copy(dAtA[i:], m.Media)
	}
	if len(m.MultiMedia) > 0 {
		for _, b := range m.MultiMedia {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintImbotgateway(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.RandomId != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.RandomId))
	}
	if len(m.ReplyMarkup) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.ReplyMarkup)))
		i += copy(dAtA[i:], m.ReplyMarkup)
	}
	if m.Newfileid != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Newfileid))
	}
	if m.FromkeyId != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.FromkeyId))
	}
	if len(m.Chatmeber) > 0 {
		dAtA101 := make([]byte, len(m.Chatmeber)*10)
		var j100 int
		for _, num1 := range m.Chatmeber {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA101[j100] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j100++
			}
			dAtA101[j100] = uint8(num)
			j100++
		}
		dAtA[i] = 0x72
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(j100))
		i += copy(dAtA[i:], dAtA101[:j100])
	}
	if m.Debug != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n102, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n102
	}
	if m.ViaBotId != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.ViaBotId))
	}
	return i, nil
}

func (m *ReplyResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *ReqEditChatTitle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqEditChatTitle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fromid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Fromid))
	}
	if m.Chatid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Chatid))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n103, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n103
	}
	return i, nil
}

func (m *ReplyEditChatTitle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyEditChatTitle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.Error != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *GetStickerSetPackDcInfosReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStickerSetPackDcInfosReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Id))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Debug.Size()))
		n104, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n104
	}
	return i, nil
}

func (m *GetStickerSetPackDcInfosResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStickerSetPackDcInfosResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StPDcInfo) > 0 {
		for _, msg := range m.StPDcInfo {
			dAtA[i] = 0xa
			i++
			i = encodeVarintImbotgateway(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *StickerPackDocumentBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StickerPackDocumentBase) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AttributesStikerSetId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.AttributesStikerSetId))
	}
	if m.DocumentId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.DocumentId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.AccessHash))
	}
	if len(m.MimeType) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.MimeType)))
		i += copy(dAtA[i:], m.MimeType)
	}
	if m.Size_ != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Size_))
	}
	if len(m.Thumb) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.Thumb)))
		i += copy(dAtA[i:], m.Thumb)
	}
	if m.DcId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.DcId))
	}
	if m.Date != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Date))
	}
	if m.AttributesImageSizeW != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.AttributesImageSizeW))
	}
	if m.AttributesImageSizeH != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.AttributesImageSizeH))
	}
	if len(m.AttributesStikerAlt) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.AttributesStikerAlt)))
		i += copy(dAtA[i:], m.AttributesStikerAlt)
	}
	if m.AttributesStikerSetAccessHash != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.AttributesStikerSetAccessHash))
	}
	if len(m.AttributesFileName) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(len(m.AttributesFileName)))
		i += copy(dAtA[i:], m.AttributesFileName)
	}
	return i, nil
}

func (m *StickerPackDocumentInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StickerPackDocumentInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.Id))
	}
	if m.InfoBase != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImbotgateway(dAtA, i, uint64(m.InfoBase.Size()))
		n105, err := m.InfoBase.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n105
	}
	return i, nil
}

func encodeVarintImbotgateway(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ReqGetFullChannel) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovImbotgateway(uint64(m.FromId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovImbotgateway(uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImbotgateway(uint64(m.AccessHash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *ReqGetParticipants) Size() (n int) {
	var l int
	_ = l
	if m.OffSet != 0 {
		n += 1 + sovImbotgateway(uint64(m.OffSet))
	}
	if m.Limit != 0 {
		n += 1 + sovImbotgateway(uint64(m.Limit))
	}
	if m.PartiType != 0 {
		n += 1 + sovImbotgateway(uint64(m.PartiType))
	}
	if m.ChannelId != 0 {
		n += 1 + sovImbotgateway(uint64(m.ChannelId))
	}
	if m.FromId != 0 {
		n += 1 + sovImbotgateway(uint64(m.FromId))
	}
	l = len(m.Q)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Hash != 0 {
		n += 1 + sovImbotgateway(uint64(m.Hash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *ReqUpdatePinnedChannelMessage) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovImbotgateway(uint64(m.FromId))
	}
	if m.Flags != 0 {
		n += 1 + sovImbotgateway(uint64(m.Flags))
	}
	if m.Silent {
		n += 2
	}
	if m.ChannelId != 0 {
		n += 1 + sovImbotgateway(uint64(m.ChannelId))
	}
	if m.Id != 0 {
		n += 1 + sovImbotgateway(uint64(m.Id))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovImbotgateway(uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *ReqEditChannelAbout) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovImbotgateway(uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		n += 1 + sovImbotgateway(uint64(m.FromKeyId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovImbotgateway(uint64(m.ChannelId))
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImbotgateway(uint64(m.AccessHash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *ReqEditChannelTitle) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovImbotgateway(uint64(m.ChannelId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovImbotgateway(uint64(m.UserId))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovImbotgateway(uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *ReplyChannelData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Reply)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImbotgateway(uint64(m.ErrorCode))
	}
	if m.ChannelId != 0 {
		n += 1 + sovImbotgateway(uint64(m.ChannelId))
	}
	if m.FromId != 0 {
		n += 1 + sovImbotgateway(uint64(m.FromId))
	}
	return n
}

func (m *ReqDelManualBlockList) Size() (n int) {
	var l int
	_ = l
	if m.UnBlockUser != nil {
		l = m.UnBlockUser.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.BotId != 0 {
		n += 1 + sovImbotgateway(uint64(m.BotId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *ReqSetManualBlockList) Size() (n int) {
	var l int
	_ = l
	if m.BlockUser != nil {
		l = m.BlockUser.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.BotId != 0 {
		n += 1 + sovImbotgateway(uint64(m.BotId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *BlockUser) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImbotgateway(uint64(m.UserId))
	}
	if m.BlockTime != 0 {
		n += 1 + sovImbotgateway(uint64(m.BlockTime))
	}
	if m.GroupId != 0 {
		n += 1 + sovImbotgateway(uint64(m.GroupId))
	}
	return n
}

func (m *ManualBlockReplyData) Size() (n int) {
	var l int
	_ = l
	l = len(m.ReplyData)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Reply {
		n += 2
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImbotgateway(uint64(m.ErrorCode))
	}
	return n
}

func (m *StoreShopStickerSetDocumentsReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovImbotgateway(uint64(m.Id))
	}
	if len(m.Documents) > 0 {
		l = 0
		for _, e := range m.Documents {
			l += sovImbotgateway(uint64(e))
		}
		n += 1 + sovImbotgateway(uint64(l)) + l
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *StoreShopStickerSetDocumentsResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImbotgateway(uint64(m.Errorcode))
	}
	return n
}

func (m *AuthorStickerSet) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImbotgateway(uint64(m.UserId))
	}
	if m.StickersetId != 0 {
		n += 1 + sovImbotgateway(uint64(m.StickersetId))
	}
	l = len(m.ShortName)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Archived {
		n += 2
	}
	if m.Installed {
		n += 2
	}
	if m.Disabled {
		n += 2
	}
	if m.Ordered != 0 {
		n += 1 + sovImbotgateway(uint64(m.Ordered))
	}
	if m.Created != 0 {
		n += 1 + sovImbotgateway(uint64(m.Created))
	}
	if m.Updated != 0 {
		n += 1 + sovImbotgateway(uint64(m.Updated))
	}
	return n
}

func (m *GetAuthorAllStickerSetReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImbotgateway(uint64(m.UserId))
	}
	return n
}

func (m *GetAuthorAllStickerSetResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovImbotgateway(uint64(m.ErrorCode))
	}
	if len(m.Sets) > 0 {
		for _, e := range m.Sets {
			l = e.Size()
			n += 1 + l + sovImbotgateway(uint64(l))
		}
	}
	return n
}

func (m *DeleteStickerPackDocumentReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovImbotgateway(uint64(m.Id))
	}
	if m.StickersetId != 0 {
		n += 1 + sovImbotgateway(uint64(m.StickersetId))
	}
	return n
}

func (m *DeleteStickerPackDocumentResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImbotgateway(uint64(m.Errorcode))
	}
	return n
}

func (m *GetStickerSetInfoReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovImbotgateway(uint64(m.Id))
	}
	l = len(m.ShortName)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.IsId {
		n += 2
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *StickerSetInfo) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovImbotgateway(uint64(m.Id))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImbotgateway(uint64(m.AccessHash))
	}
	if m.Free {
		n += 2
	}
	if m.Official {
		n += 2
	}
	if m.Masks {
		n += 2
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	l = len(m.ShortName)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovImbotgateway(uint64(m.Count))
	}
	if m.Hash != 0 {
		n += 1 + sovImbotgateway(uint64(m.Hash))
	}
	l = len(m.Emoticon)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if len(m.Documents) > 0 {
		l = 0
		for _, e := range m.Documents {
			l += sovImbotgateway(uint64(e))
		}
		n += 1 + sovImbotgateway(uint64(l)) + l
	}
	return n
}

func (m *GetStickerSetInfoResult) Size() (n int) {
	var l int
	_ = l
	if m.StickerSetInfo != nil {
		l = m.StickerSetInfo.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImbotgateway(uint64(m.Errorcode))
	}
	return n
}

func (m *DeleteStickerSetReq) Size() (n int) {
	var l int
	_ = l
	if m.StickerId != 0 {
		n += 1 + sovImbotgateway(uint64(m.StickerId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovImbotgateway(uint64(m.UserId))
	}
	return n
}

func (m *DeleteStickerSetResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImbotgateway(uint64(m.Errorcode))
	}
	return n
}

func (m *StoreUserStickerSetReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImbotgateway(uint64(m.UserId))
	}
	if m.StickersetId != 0 {
		n += 1 + sovImbotgateway(uint64(m.StickersetId))
	}
	if m.Installed {
		n += 2
	}
	if m.Disabled {
		n += 2
	}
	if m.Order != 0 {
		n += 1 + sovImbotgateway(uint64(m.Order))
	}
	if m.Archived {
		n += 2
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *StoreUserStickerSetResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImbotgateway(uint64(m.Errorcode))
	}
	return n
}

func (m *StoreStickerPackDcReq) Size() (n int) {
	var l int
	_ = l
	if m.Stickpackbase != nil {
		l = m.Stickpackbase.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *StoreStickerPackDcResult) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovImbotgateway(uint64(m.Id))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImbotgateway(uint64(m.Errorcode))
	}
	return n
}

func (m *StoreShopStickerSetReq) Size() (n int) {
	var l int
	_ = l
	if m.AccessHash != 0 {
		n += 1 + sovImbotgateway(uint64(m.AccessHash))
	}
	if m.Free {
		n += 2
	}
	if m.Official {
		n += 2
	}
	if m.Masks {
		n += 2
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	l = len(m.ShortName)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovImbotgateway(uint64(m.Count))
	}
	if m.Hash != 0 {
		n += 1 + sovImbotgateway(uint64(m.Hash))
	}
	l = len(m.Emoticon)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if len(m.Documents) > 0 {
		l = 0
		for _, e := range m.Documents {
			l += sovImbotgateway(uint64(e))
		}
		n += 1 + sovImbotgateway(uint64(l)) + l
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovImbotgateway(uint64(m.UserId))
	}
	return n
}

func (m *StoreShopStickerSetResult) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovImbotgateway(uint64(m.Id))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImbotgateway(uint64(m.Errorcode))
	}
	return n
}

func (m *ResizeRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Width != 0 {
		n += 1 + sovImbotgateway(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovImbotgateway(uint64(m.Height))
	}
	return n
}

func (m *ResizeReply) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovImbotgateway(uint64(m.Status))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *ConstraintRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.MaxSize != 0 {
		n += 1 + sovImbotgateway(uint64(m.MaxSize))
	}
	if m.OutputWebp {
		n += 2
	}
	return n
}

func (m *ConstraintReply) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovImbotgateway(uint64(m.Status))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Width != 0 {
		n += 1 + sovImbotgateway(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovImbotgateway(uint64(m.Height))
	}
	if m.OriginWidth != 0 {
		n += 1 + sovImbotgateway(uint64(m.OriginWidth))
	}
	if m.OriginHeight != 0 {
		n += 1 + sovImbotgateway(uint64(m.OriginHeight))
	}
	return n
}

func (m *CompressImageRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Quality != 0 {
		n += 1 + sovImbotgateway(uint64(m.Quality))
	}
	return n
}

func (m *CompressImageReply) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovImbotgateway(uint64(m.Status))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *VideoPreviewRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.MaxSize != 0 {
		n += 1 + sovImbotgateway(uint64(m.MaxSize))
	}
	return n
}

func (m *VideoPreviewReply) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovImbotgateway(uint64(m.Status))
	}
	if m.Duration != 0 {
		n += 1 + sovImbotgateway(uint64(m.Duration))
	}
	l = len(m.Preview)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Width != 0 {
		n += 1 + sovImbotgateway(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovImbotgateway(uint64(m.Height))
	}
	return n
}

func (m *AudioPreviewRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.MaxSize != 0 {
		n += 1 + sovImbotgateway(uint64(m.MaxSize))
	}
	return n
}

func (m *AudioPreviewReply) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovImbotgateway(uint64(m.Status))
	}
	if m.Duration != 0 {
		n += 1 + sovImbotgateway(uint64(m.Duration))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	l = len(m.Artist)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Width != 0 {
		n += 1 + sovImbotgateway(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovImbotgateway(uint64(m.Height))
	}
	return n
}

func (m *ReqParticipants) Size() (n int) {
	var l int
	_ = l
	if m.OffSet != 0 {
		n += 1 + sovImbotgateway(uint64(m.OffSet))
	}
	if m.Limit != 0 {
		n += 1 + sovImbotgateway(uint64(m.Limit))
	}
	if m.PartiType != 0 {
		n += 1 + sovImbotgateway(uint64(m.PartiType))
	}
	if m.ChannelId != 0 {
		n += 1 + sovImbotgateway(uint64(m.ChannelId))
	}
	if m.FromId != 0 {
		n += 1 + sovImbotgateway(uint64(m.FromId))
	}
	l = len(m.Q)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Hash != 0 {
		n += 1 + sovImbotgateway(uint64(m.Hash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *ReplyParticipants) Size() (n int) {
	var l int
	_ = l
	l = len(m.Updates)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImbotgateway(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqCreateChat) Size() (n int) {
	var l int
	_ = l
	if m.Chatid != 0 {
		n += 1 + sovImbotgateway(uint64(m.Chatid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Creator != 0 {
		n += 1 + sovImbotgateway(uint64(m.Creator))
	}
	if len(m.Users) > 0 {
		l = 0
		for _, e := range m.Users {
			l += sovImbotgateway(uint64(e))
		}
		n += 1 + sovImbotgateway(uint64(l)) + l
	}
	if m.FromKeyid != 0 {
		n += 1 + sovImbotgateway(uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *ReplyCreateChat) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovImbotgateway(uint64(m.Error))
	}
	return n
}

func (m *ReqMigrateChat) Size() (n int) {
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovImbotgateway(uint64(m.Fromid))
	}
	if m.Chatid != 0 {
		n += 1 + sovImbotgateway(uint64(m.Chatid))
	}
	if m.Fromkeyid != 0 {
		n += 1 + sovImbotgateway(uint64(m.Fromkeyid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *ReplyMigrateChat) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovImbotgateway(uint64(m.Error))
	}
	return n
}

func (m *ReqJoinChannel) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovImbotgateway(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovImbotgateway(uint64(m.UserId))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovImbotgateway(uint64(m.FromKeyid))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImbotgateway(uint64(m.AccessHash))
	}
	if m.ByLink {
		n += 2
	}
	if m.Invitor != 0 {
		n += 1 + sovImbotgateway(uint64(m.Invitor))
	}
	if m.InviteType != 0 {
		n += 1 + sovImbotgateway(uint64(m.InviteType))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *ReplyJoinChannel) Size() (n int) {
	var l int
	_ = l
	l = len(m.Reply)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImbotgateway(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqChangeGroupAndChannelCrator) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovImbotgateway(uint64(m.GroupId))
	}
	if m.FromId != 0 {
		n += 1 + sovImbotgateway(uint64(m.FromId))
	}
	if m.OperatorId != 0 {
		n += 1 + sovImbotgateway(uint64(m.OperatorId))
	}
	if m.IsChat {
		n += 2
	}
	return n
}

func (m *ReplyChangeGroupAndChannelCrator) Size() (n int) {
	var l int
	_ = l
	if m.Valid {
		n += 2
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImbotgateway(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqBotCallMessageMedia) Size() (n int) {
	var l int
	_ = l
	if m.FromBotId != 0 {
		n += 1 + sovImbotgateway(uint64(m.FromBotId))
	}
	l = len(m.MsgTxt)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	l = len(m.Request)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Layer != 0 {
		n += 1 + sovImbotgateway(uint64(m.Layer))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *RequestDialog) Size() (n int) {
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovImbotgateway(uint64(m.Userid))
	}
	if m.Flags != 0 {
		n += 1 + sovImbotgateway(uint64(m.Flags))
	}
	if m.OffsetDate != 0 {
		n += 1 + sovImbotgateway(uint64(m.OffsetDate))
	}
	if m.OffsetId != 0 {
		n += 1 + sovImbotgateway(uint64(m.OffsetId))
	}
	l = len(m.OffsetPeer)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovImbotgateway(uint64(m.Limit))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *ReplyDialog) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovImbotgateway(uint64(m.Error))
	}
	return n
}

func (m *UserScore) Size() (n int) {
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovImbotgateway(uint64(m.Userid))
	}
	if m.Score != 0 {
		n += 1 + sovImbotgateway(uint64(m.Score))
	}
	return n
}

func (m *ReqSetGameScore) Size() (n int) {
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovImbotgateway(uint64(m.Userid))
	}
	if len(m.Scores) > 0 {
		for _, e := range m.Scores {
			l = e.Size()
			n += 1 + l + sovImbotgateway(uint64(l))
		}
	}
	if m.Force {
		n += 2
	}
	if m.DisableEditMessage {
		n += 2
	}
	if m.ChatId != 0 {
		n += 1 + sovImbotgateway(uint64(m.ChatId))
	}
	if m.ChatType != 0 {
		n += 1 + sovImbotgateway(uint64(m.ChatType))
	}
	if m.MessageId != 0 {
		n += 1 + sovImbotgateway(uint64(m.MessageId))
	}
	l = len(m.InlineMessageId)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Botid != 0 {
		n += 1 + sovImbotgateway(uint64(m.Botid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *ReplySetGameScore) Size() (n int) {
	var l int
	_ = l
	if m.Succeed {
		n += 2
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImbotgateway(uint64(m.Errorcode))
	}
	return n
}

func (m *ReplyBanChannelUser) Size() (n int) {
	var l int
	_ = l
	l = len(m.Updates)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImbotgateway(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqBanChannelUser) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovImbotgateway(uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		n += 1 + sovImbotgateway(uint64(m.FromKeyId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovImbotgateway(uint64(m.ChannelId))
	}
	if m.BannedUserId != 0 {
		n += 1 + sovImbotgateway(uint64(m.BannedUserId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImbotgateway(uint64(m.AccessHash))
	}
	if m.UtilDate != 0 {
		n += 1 + sovImbotgateway(uint64(m.UtilDate))
	}
	if m.ChannelBannedRights != nil {
		l = m.ChannelBannedRights.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *ChannelBannedRights) Size() (n int) {
	var l int
	_ = l
	if m.Flags != 0 {
		n += 1 + sovImbotgateway(uint64(m.Flags))
	}
	if m.ViewMessages {
		n += 2
	}
	if m.SendMessages {
		n += 2
	}
	if m.SendMedia {
		n += 2
	}
	if m.SendStickers {
		n += 2
	}
	if m.SendGifs {
		n += 2
	}
	if m.SendGames {
		n += 2
	}
	if m.SendInline {
		n += 2
	}
	if m.EmbedLinks {
		n += 2
	}
	if m.UntilDate != 0 {
		n += 1 + sovImbotgateway(uint64(m.UntilDate))
	}
	return n
}

func (m *ReqGetChannels) Size() (n int) {
	var l int
	_ = l
	if len(m.ChannelIds) > 0 {
		l = 0
		for _, e := range m.ChannelIds {
			l += sovImbotgateway(uint64(e))
		}
		n += 1 + sovImbotgateway(uint64(l)) + l
	}
	if m.FromId != 0 {
		n += 1 + sovImbotgateway(uint64(m.FromId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *ReplyGetChannels) Size() (n int) {
	var l int
	_ = l
	l = len(m.Reply)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImbotgateway(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqDeleteChatUser) Size() (n int) {
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovImbotgateway(uint64(m.Fromid))
	}
	if m.Chatid != 0 {
		n += 1 + sovImbotgateway(uint64(m.Chatid))
	}
	if m.Userid != 0 {
		n += 1 + sovImbotgateway(uint64(m.Userid))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovImbotgateway(uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *ReplyDeleteChatUser) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovImbotgateway(uint64(m.Error))
	}
	return n
}

func (m *ChannelInactiveUser) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovImbotgateway(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovImbotgateway(uint64(m.Time))
	}
	l = len(m.TimeStr)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *GetChannelInactiveUsersReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovImbotgateway(uint64(m.ChannelId))
	}
	if m.Limit != 0 {
		n += 1 + sovImbotgateway(uint64(m.Limit))
	}
	if m.Userid != 0 {
		n += 1 + sovImbotgateway(uint64(m.Userid))
	}
	return n
}

func (m *GetChannelInactiveUsersResult) Size() (n int) {
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovImbotgateway(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovImbotgateway(uint64(m.Count))
	}
	if m.Errcode != 0 {
		n += 1 + sovImbotgateway(uint64(m.Errcode))
	}
	return n
}

func (m *ReqBotInlineCall) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovImbotgateway(uint64(m.UserId))
	}
	if m.BotId != 0 {
		n += 1 + sovImbotgateway(uint64(m.BotId))
	}
	if m.MessageId != 0 {
		n += 1 + sovImbotgateway(uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		n += 1 + sovImbotgateway(uint64(m.KeyId))
	}
	if m.SessionId != 0 {
		n += 1 + sovImbotgateway(uint64(m.SessionId))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *ReplyBotInlineCall) Size() (n int) {
	var l int
	_ = l
	if m.ErrCode != 0 {
		n += 1 + sovImbotgateway(uint64(m.ErrCode))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Inlinecall != nil {
		l = m.Inlinecall.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *InlineCall) Size() (n int) {
	var l int
	_ = l
	if m.MsgId != 0 {
		n += 1 + sovImbotgateway(uint64(m.MsgId))
	}
	if m.FromId != 0 {
		n += 1 + sovImbotgateway(uint64(m.FromId))
	}
	if m.ChatId != 0 {
		n += 1 + sovImbotgateway(uint64(m.ChatId))
	}
	if m.ChatType != 0 {
		n += 1 + sovImbotgateway(uint64(m.ChatType))
	}
	if m.BotId != 0 {
		n += 1 + sovImbotgateway(uint64(m.BotId))
	}
	return n
}

func (m *ReqSendUserMsg) Size() (n int) {
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovImbotgateway(uint64(m.Fromid))
	}
	if m.FromKeyId != 0 {
		n += 1 + sovImbotgateway(uint64(m.FromKeyId))
	}
	if m.Toid != 0 {
		n += 1 + sovImbotgateway(uint64(m.Toid))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *ReplyBool) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	if m.Error != 0 {
		n += 1 + sovImbotgateway(uint64(m.Error))
	}
	return n
}

func (m *ReqBotCall) Size() (n int) {
	var l int
	_ = l
	if m.FrombotId != 0 {
		n += 1 + sovImbotgateway(uint64(m.FrombotId))
	}
	l = len(m.Request)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Layer != 0 {
		n += 1 + sovImbotgateway(uint64(m.Layer))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *ReplyBotCall) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovImbotgateway(uint64(m.Error))
	}
	return n
}

func (m *ReqGetMessageByUserIdUuid) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImbotgateway(uint64(m.UserId))
	}
	if m.Uuid != 0 {
		n += 1 + sovImbotgateway(uint64(m.Uuid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *ReplyGetMessageByUserIdUuid) Size() (n int) {
	var l int
	_ = l
	if m.UserMessage != nil {
		l = m.UserMessage.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImbotgateway(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqGetChannelMessageByChannelIdMsgId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovImbotgateway(uint64(m.ChannelId))
	}
	if m.MsgId != 0 {
		n += 1 + sovImbotgateway(uint64(m.MsgId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *ReplyGetChannelMessageByChannelIdMsgId) Size() (n int) {
	var l int
	_ = l
	if m.UserMessage != nil {
		l = m.UserMessage.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImbotgateway(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqGetMessageByUserIdMsgId) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImbotgateway(uint64(m.UserId))
	}
	if m.MsgId != 0 {
		n += 1 + sovImbotgateway(uint64(m.MsgId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *ReplyGetMessageByUserIdMsgId) Size() (n int) {
	var l int
	_ = l
	if m.UserMessage != nil {
		l = m.UserMessage.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImbotgateway(uint64(m.ErrorCode))
	}
	return n
}

func (m *MsgFileDescReq) Size() (n int) {
	var l int
	_ = l
	if m.Fid != 0 {
		n += 1 + sovImbotgateway(uint64(m.Fid))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImbotgateway(uint64(m.AccessHash))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *MsgFileDescResp) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovImbotgateway(uint64(m.Result))
	}
	return n
}

func (m *MsgServiceLimitReq) Size() (n int) {
	var l int
	_ = l
	if m.Reserved != 0 {
		n += 1 + sovImbotgateway(uint64(m.Reserved))
	}
	return n
}

func (m *MsgServiceLimitResp) Size() (n int) {
	var l int
	_ = l
	if m.Usfsl != 0 {
		n += 1 + sovImbotgateway(uint64(m.Usfsl))
	}
	if m.Ubfssl != 0 {
		n += 1 + sovImbotgateway(uint64(m.Ubfssl))
	}
	if m.Dssl != 0 {
		n += 1 + sovImbotgateway(uint64(m.Dssl))
	}
	return n
}

func (m *MsgGetFidReq) Size() (n int) {
	var l int
	_ = l
	if m.Keyid != 0 {
		n += 1 + sovImbotgateway(uint64(m.Keyid))
	}
	if m.Fileid != 0 {
		n += 1 + sovImbotgateway(uint64(m.Fileid))
	}
	if m.FileType != 0 {
		n += 1 + sovImbotgateway(uint64(m.FileType))
	}
	l = len(m.Md5)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.PartTotal != 0 {
		n += 1 + sovImbotgateway(uint64(m.PartTotal))
	}
	return n
}

func (m *MsgGetFidResp) Size() (n int) {
	var l int
	_ = l
	if m.Fid != 0 {
		n += 1 + sovImbotgateway(uint64(m.Fid))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImbotgateway(uint64(m.AccessHash))
	}
	if m.FileSize != 0 {
		n += 1 + sovImbotgateway(uint64(m.FileSize))
	}
	if m.Result != 0 {
		n += 1 + sovImbotgateway(uint64(m.Result))
	}
	return n
}

func (m *MsgFilePartsReq) Size() (n int) {
	var l int
	_ = l
	if m.Keyid != 0 {
		n += 1 + sovImbotgateway(uint64(m.Keyid))
	}
	if m.Fileid != 0 {
		n += 1 + sovImbotgateway(uint64(m.Fileid))
	}
	if m.PartId != 0 {
		n += 1 + sovImbotgateway(uint64(m.PartId))
	}
	if m.FileType != 0 {
		n += 1 + sovImbotgateway(uint64(m.FileType))
	}
	if m.PartTotal != 0 {
		n += 1 + sovImbotgateway(uint64(m.PartTotal))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *MsgFilePartsResp) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovImbotgateway(uint64(m.Result))
	}
	return n
}

func (m *MsgUploadFileReq) Size() (n int) {
	var l int
	_ = l
	if m.Para1 != nil {
		l = m.Para1.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Para2 != nil {
		l = m.Para2.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *UploadReqPara1) Size() (n int) {
	var l int
	_ = l
	if m.Fid != 0 {
		n += 1 + sovImbotgateway(uint64(m.Fid))
	}
	if m.PartId != 0 {
		n += 1 + sovImbotgateway(uint64(m.PartId))
	}
	if m.PartSize != 0 {
		n += 1 + sovImbotgateway(uint64(m.PartSize))
	}
	return n
}

func (m *UploadReqPara2) Size() (n int) {
	var l int
	_ = l
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.FileSize != 0 {
		n += 1 + sovImbotgateway(uint64(m.FileSize))
	}
	l = len(m.FileHash)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Ttl != 0 {
		n += 1 + sovImbotgateway(uint64(m.Ttl))
	}
	return n
}

func (m *FileUploadRespPara) Size() (n int) {
	var l int
	_ = l
	if m.Fid != 0 {
		n += 1 + sovImbotgateway(uint64(m.Fid))
	}
	if m.PartId != 0 {
		n += 1 + sovImbotgateway(uint64(m.PartId))
	}
	return n
}

func (m *MsgUploadFileResp) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovImbotgateway(uint64(m.Result))
	}
	if m.Para1 != nil {
		l = m.Para1.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Para2 != nil {
		l = m.Para2.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImbotgateway(uint64(m.AccessHash))
	}
	return n
}

func (m *MsgDownloadFileReq) Size() (n int) {
	var l int
	_ = l
	if m.Fid != 0 {
		n += 1 + sovImbotgateway(uint64(m.Fid))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImbotgateway(uint64(m.AccessHash))
	}
	if m.Offset != 0 {
		n += 1 + sovImbotgateway(uint64(m.Offset))
	}
	if m.Length != 0 {
		n += 1 + sovImbotgateway(uint64(m.Length))
	}
	return n
}

func (m *DownloadFileRespPara1) Size() (n int) {
	var l int
	_ = l
	if m.Fid != 0 {
		n += 1 + sovImbotgateway(uint64(m.Fid))
	}
	if m.Offset != 0 {
		n += 1 + sovImbotgateway(uint64(m.Offset))
	}
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *DownloadFileRespPara2) Size() (n int) {
	var l int
	_ = l
	if m.Length != 0 {
		n += 1 + sovImbotgateway(uint64(m.Length))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *MsgDownloadFileResp) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovImbotgateway(uint64(m.Result))
	}
	if m.Para1 != nil {
		l = m.Para1.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Para2 != nil {
		l = m.Para2.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *MsgQueryObjInfoReq) Size() (n int) {
	var l int
	_ = l
	if m.Fid != 0 {
		n += 1 + sovImbotgateway(uint64(m.Fid))
	}
	return n
}

func (m *QueryObjInfoRespPara) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovImbotgateway(uint64(m.Size_))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImbotgateway(uint64(m.AccessHash))
	}
	return n
}

func (m *MsgQueryObjInfoResp) Size() (n int) {
	var l int
	_ = l
	if m.Para != nil {
		l = m.Para.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Result != 0 {
		n += 1 + sovImbotgateway(uint64(m.Result))
	}
	return n
}

func (m *MsgGetFileDescReq) Size() (n int) {
	var l int
	_ = l
	if m.Fid != 0 {
		n += 1 + sovImbotgateway(uint64(m.Fid))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImbotgateway(uint64(m.AccessHash))
	}
	return n
}

func (m *MsgGetFileDescResp) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovImbotgateway(uint64(m.Result))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *GetChannelInfoReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovImbotgateway(uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImbotgateway(uint64(m.AccessHash))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *GetChannelInfoResp) Size() (n int) {
	var l int
	_ = l
	if m.BaseInfo != nil {
		l = m.BaseInfo.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Resultcode != 0 {
		n += 1 + sovImbotgateway(uint64(m.Resultcode))
	}
	return n
}

func (m *ReqGetAdminGroups) Size() (n int) {
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovImbotgateway(uint64(m.UserID))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *ReqGetGroups) Size() (n int) {
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovImbotgateway(uint64(m.UserID))
	}
	if m.PeerFilter != 0 {
		n += 1 + sovImbotgateway(uint64(m.PeerFilter))
	}
	return n
}

func (m *Peer) Size() (n int) {
	var l int
	_ = l
	if m.PeerID != 0 {
		n += 1 + sovImbotgateway(uint64(m.PeerID))
	}
	l = len(m.PeerName)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *ReplyGetGroups) Size() (n int) {
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovImbotgateway(uint64(l))
		}
	}
	if len(m.SuperGroups) > 0 {
		for _, e := range m.SuperGroups {
			l = e.Size()
			n += 1 + l + sovImbotgateway(uint64(l))
		}
	}
	if len(m.Channels) > 0 {
		for _, e := range m.Channels {
			l = e.Size()
			n += 1 + l + sovImbotgateway(uint64(l))
		}
	}
	return n
}

func (m *ReqDeleteMessage) Size() (n int) {
	var l int
	_ = l
	if m.ChatType != 0 {
		n += 1 + sovImbotgateway(uint64(m.ChatType))
	}
	if m.UserId != 0 {
		n += 1 + sovImbotgateway(uint64(m.UserId))
	}
	if m.ChatId != 0 {
		n += 1 + sovImbotgateway(uint64(m.ChatId))
	}
	if len(m.MsgId) > 0 {
		l = 0
		for _, e := range m.MsgId {
			l += sovImbotgateway(uint64(e))
		}
		n += 1 + sovImbotgateway(uint64(l)) + l
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *ReqSendChatAction) Size() (n int) {
	var l int
	_ = l
	if m.ChatType != 0 {
		n += 1 + sovImbotgateway(uint64(m.ChatType))
	}
	if m.UserId != 0 {
		n += 1 + sovImbotgateway(uint64(m.UserId))
	}
	if m.ChatId != 0 {
		n += 1 + sovImbotgateway(uint64(m.ChatId))
	}
	l = len(m.ActionData)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *ReqData) Size() (n int) {
	var l int
	_ = l
	if m.ChatType != 0 {
		n += 1 + sovImbotgateway(uint64(m.ChatType))
	}
	l = len(m.ReqData)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.BotId != 0 {
		n += 1 + sovImbotgateway(uint64(m.BotId))
	}
	return n
}

func (m *ReplyData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Reply)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovImbotgateway(uint64(m.Error))
	}
	return n
}

func (m *ReqGetChatMembersCount) Size() (n int) {
	var l int
	_ = l
	if m.ChatType != 0 {
		n += 1 + sovImbotgateway(uint64(m.ChatType))
	}
	if m.UserId != 0 {
		n += 1 + sovImbotgateway(uint64(m.UserId))
	}
	if m.ChatId != 0 {
		n += 1 + sovImbotgateway(uint64(m.ChatId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *ReplyGetChatMembersCount) Size() (n int) {
	var l int
	_ = l
	if m.ChatMembersCount != 0 {
		n += 1 + sovImbotgateway(uint64(m.ChatMembersCount))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImbotgateway(uint64(m.ErrorCode))
	}
	return n
}

func (m *GetChatInfoReq) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovImbotgateway(uint64(m.ChatId))
	}
	if m.UserId != 0 {
		n += 1 + sovImbotgateway(uint64(m.UserId))
	}
	if m.RobotGet {
		n += 2
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *GetUsersChatsReq) Size() (n int) {
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovImbotgateway(uint64(m.Userid))
	}
	if len(m.Users) > 0 {
		l = 0
		for _, e := range m.Users {
			l += sovImbotgateway(uint64(e))
		}
		n += 1 + sovImbotgateway(uint64(l)) + l
	}
	if len(m.Chatid) > 0 {
		l = 0
		for _, e := range m.Chatid {
			l += sovImbotgateway(uint64(e))
		}
		n += 1 + sovImbotgateway(uint64(l)) + l
	}
	if len(m.Channelid) > 0 {
		l = 0
		for _, e := range m.Channelid {
			l += sovImbotgateway(uint64(e))
		}
		n += 1 + sovImbotgateway(uint64(l)) + l
	}
	if m.ProtocolLayer != 0 {
		n += 1 + sovImbotgateway(uint64(m.ProtocolLayer))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *GetUsersChatsResult) Size() (n int) {
	var l int
	_ = l
	if len(m.Channels) > 0 {
		for _, b := range m.Channels {
			l = len(b)
			n += 1 + l + sovImbotgateway(uint64(l))
		}
	}
	if m.Users != nil {
		l = m.Users.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if len(m.Chats) > 0 {
		for _, b := range m.Chats {
			l = len(b)
			n += 1 + l + sovImbotgateway(uint64(l))
		}
	}
	if len(m.NoChats) > 0 {
		l = 0
		for _, e := range m.NoChats {
			l += sovImbotgateway(uint64(e))
		}
		n += 1 + sovImbotgateway(uint64(l)) + l
	}
	if len(m.NoChans) > 0 {
		l = 0
		for _, e := range m.NoChans {
			l += sovImbotgateway(uint64(e))
		}
		n += 1 + sovImbotgateway(uint64(l)) + l
	}
	if m.Resultcode != 0 {
		n += 1 + sovImbotgateway(uint64(m.Resultcode))
	}
	return n
}

func (m *GetUserInfoByIdReq) Size() (n int) {
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovImbotgateway(uint64(m.SelfId))
	}
	if m.UserId != 0 {
		n += 1 + sovImbotgateway(uint64(m.UserId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *GetUserInfoByIdArrReq) Size() (n int) {
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovImbotgateway(uint64(m.SelfId))
	}
	if len(m.UserIds) > 0 {
		l = 0
		for _, e := range m.UserIds {
			l += sovImbotgateway(uint64(e))
		}
		n += 1 + sovImbotgateway(uint64(l)) + l
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *UpdateUserProfileReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImbotgateway(uint64(m.UserId))
	}
	if m.Flags != 0 {
		n += 1 + sovImbotgateway(uint64(m.Flags))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *UpdateUserProfileResult) Size() (n int) {
	var l int
	_ = l
	if m.Uinfo != nil {
		l = m.Uinfo.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImbotgateway(uint64(m.Errorcode))
	}
	return n
}

func (m *GetUserByphone) Size() (n int) {
	var l int
	_ = l
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *GetUserInfoResult) Size() (n int) {
	var l int
	_ = l
	if m.Uinfo != nil {
		l = m.Uinfo.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImbotgateway(uint64(m.Errorcode))
	}
	return n
}

func (m *UpdateBotInfoSuppReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImbotgateway(uint64(m.UserId))
	}
	l = len(m.Placeholder)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Geo {
		n += 2
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *UpdateBotInfoSuppResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImbotgateway(uint64(m.Errorcode))
	}
	return n
}

func (m *BotUpdateInfo) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImbotgateway(uint64(m.UserId))
	}
	if m.BotInfoVersion != 0 {
		n += 1 + sovImbotgateway(uint64(m.BotInfoVersion))
	}
	if m.BotChatHistory {
		n += 2
	}
	if m.BotNoChat {
		n += 2
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *BotUpdateInfoResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImbotgateway(uint64(m.Errorcode))
	}
	return n
}

func (m *UpdateBotPicRequest) Size() (n int) {
	var l int
	_ = l
	if m.BotId != 0 {
		n += 1 + sovImbotgateway(uint64(m.BotId))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *UpdateBotPicResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImbotgateway(uint64(m.Errorcode))
	}
	return n
}

func (m *UpdateuserNameReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImbotgateway(uint64(m.UserId))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.KeyId != 0 {
		n += 1 + sovImbotgateway(uint64(m.KeyId))
	}
	return n
}

func (m *UpdateuserNameResult) Size() (n int) {
	var l int
	_ = l
	if m.Uinfo != nil {
		l = m.Uinfo.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImbotgateway(uint64(m.Errorcode))
	}
	return n
}

func (m *RegisterUserInfoReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImbotgateway(uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImbotgateway(uint64(m.AccessHash))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.IsBot {
		n += 2
	}
	if m.BotInfoVersion != 0 {
		n += 1 + sovImbotgateway(uint64(m.BotInfoVersion))
	}
	if m.BotChatHistory {
		n += 2
	}
	if m.BotNoChats {
		n += 2
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *RegisterUserInfoResult) Size() (n int) {
	var l int
	_ = l
	if m.Uinfo != nil {
		l = m.Uinfo.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImbotgateway(uint64(m.Errorcode))
	}
	return n
}

func (m *DeleteAccountByIdReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImbotgateway(uint64(m.UserId))
	}
	if m.DelId != 0 {
		n += 1 + sovImbotgateway(uint64(m.DelId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *DelAccountResult) Size() (n int) {
	var l int
	_ = l
	if m.Errorcode != 0 {
		n += 1 + sovImbotgateway(uint64(m.Errorcode))
	}
	return n
}

func (m *SignUpReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	l = len(m.PhoneCodeHash)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	l = len(m.PhoneCode)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.KeyId != 0 {
		n += 1 + sovImbotgateway(uint64(m.KeyId))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.IsBot {
		n += 2
	}
	if m.BotInfoVersion != 0 {
		n += 1 + sovImbotgateway(uint64(m.BotInfoVersion))
	}
	if m.BotChatHistory {
		n += 2
	}
	if m.BotNoChats {
		n += 2
	}
	if m.DcId != 0 {
		n += 1 + sovImbotgateway(uint64(m.DcId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	l = len(m.LocalPhone)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *AuthSignUpResult) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovImbotgateway(uint64(m.Code))
	}
	if m.UserInfo != nil {
		l = m.UserInfo.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *GetFullUserReq) Size() (n int) {
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovImbotgateway(uint64(m.SelfId))
	}
	if m.UserId != 0 {
		n += 1 + sovImbotgateway(uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImbotgateway(uint64(m.AccessHash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *GetFullUserResult) Size() (n int) {
	var l int
	_ = l
	if m.Uinfo != nil {
		l = m.Uinfo.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Isblocked {
		n += 2
	}
	if m.PhoneCallsPrivate {
		n += 2
	}
	if m.PhoneCallsAvailable {
		n += 2
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.CommonChat != 0 {
		n += 1 + sovImbotgateway(uint64(m.CommonChat))
	}
	if m.Errorcode != 0 {
		n += 1 + sovImbotgateway(uint64(m.Errorcode))
	}
	return n
}

func (m *GetUserByUsername) Size() (n int) {
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovImbotgateway(uint64(m.SelfId))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *ReqGetFullChat) Size() (n int) {
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovImbotgateway(uint64(m.Fromid))
	}
	if m.Chatid != 0 {
		n += 1 + sovImbotgateway(uint64(m.Chatid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *ReplyGetFullChat) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovImbotgateway(uint64(m.Error))
	}
	return n
}

func (m *ReqLeaveChannel) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovImbotgateway(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovImbotgateway(uint64(m.UserId))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovImbotgateway(uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *ReplyLeaveChannel) Size() (n int) {
	var l int
	_ = l
	l = len(m.Reply)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImbotgateway(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqSendMedia) Size() (n int) {
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovImbotgateway(uint64(m.Fromid))
	}
	if m.Flags != 0 {
		n += 1 + sovImbotgateway(uint64(m.Flags))
	}
	if m.Silent {
		n += 2
	}
	if m.Background {
		n += 2
	}
	if m.ClearDraft {
		n += 2
	}
	l = len(m.Peer)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.ReplyToMsgId != 0 {
		n += 1 + sovImbotgateway(uint64(m.ReplyToMsgId))
	}
	l = len(m.Media)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if len(m.MultiMedia) > 0 {
		for _, b := range m.MultiMedia {
			l = len(b)
			n += 1 + l + sovImbotgateway(uint64(l))
		}
	}
	if m.RandomId != 0 {
		n += 1 + sovImbotgateway(uint64(m.RandomId))
	}
	l = len(m.ReplyMarkup)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Newfileid != 0 {
		n += 1 + sovImbotgateway(uint64(m.Newfileid))
	}
	if m.FromkeyId != 0 {
		n += 1 + sovImbotgateway(uint64(m.FromkeyId))
	}
	if len(m.Chatmeber) > 0 {
		l = 0
		for _, e := range m.Chatmeber {
			l += sovImbotgateway(uint64(e))
		}
		n += 1 + sovImbotgateway(uint64(l)) + l
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.ViaBotId != 0 {
		n += 2 + sovImbotgateway(uint64(m.ViaBotId))
	}
	return n
}

func (m *ReplyResult) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovImbotgateway(uint64(m.Error))
	}
	return n
}

func (m *ReqEditChatTitle) Size() (n int) {
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovImbotgateway(uint64(m.Fromid))
	}
	if m.Chatid != 0 {
		n += 1 + sovImbotgateway(uint64(m.Chatid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovImbotgateway(uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *ReplyEditChatTitle) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovImbotgateway(uint64(m.Error))
	}
	return n
}

func (m *GetStickerSetPackDcInfosReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovImbotgateway(uint64(m.Id))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *GetStickerSetPackDcInfosResult) Size() (n int) {
	var l int
	_ = l
	if len(m.StPDcInfo) > 0 {
		for _, e := range m.StPDcInfo {
			l = e.Size()
			n += 1 + l + sovImbotgateway(uint64(l))
		}
	}
	return n
}

func (m *StickerPackDocumentBase) Size() (n int) {
	var l int
	_ = l
	if m.AttributesStikerSetId != 0 {
		n += 1 + sovImbotgateway(uint64(m.AttributesStikerSetId))
	}
	if m.DocumentId != 0 {
		n += 1 + sovImbotgateway(uint64(m.DocumentId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovImbotgateway(uint64(m.AccessHash))
	}
	l = len(m.MimeType)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovImbotgateway(uint64(m.Size_))
	}
	l = len(m.Thumb)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.DcId != 0 {
		n += 1 + sovImbotgateway(uint64(m.DcId))
	}
	if m.Date != 0 {
		n += 1 + sovImbotgateway(uint64(m.Date))
	}
	if m.AttributesImageSizeW != 0 {
		n += 1 + sovImbotgateway(uint64(m.AttributesImageSizeW))
	}
	if m.AttributesImageSizeH != 0 {
		n += 1 + sovImbotgateway(uint64(m.AttributesImageSizeH))
	}
	l = len(m.AttributesStikerAlt)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	if m.AttributesStikerSetAccessHash != 0 {
		n += 1 + sovImbotgateway(uint64(m.AttributesStikerSetAccessHash))
	}
	l = len(m.AttributesFileName)
	if l > 0 {
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func (m *StickerPackDocumentInfo) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovImbotgateway(uint64(m.Id))
	}
	if m.InfoBase != nil {
		l = m.InfoBase.Size()
		n += 1 + l + sovImbotgateway(uint64(l))
	}
	return n
}

func sovImbotgateway(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozImbotgateway(x uint64) (n int) {
	return sovImbotgateway(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReqGetFullChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetFullChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetFullChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetParticipants) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetParticipants: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetParticipants: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffSet", wireType)
			}
			m.OffSet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffSet |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartiType", wireType)
			}
			m.PartiType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartiType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Q = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdatePinnedChannelMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdatePinnedChannelMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdatePinnedChannelMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqEditChannelAbout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqEditChannelAbout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqEditChannelAbout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqEditChannelTitle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqEditChannelTitle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqEditChannelTitle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyChannelData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyChannelData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyChannelData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = append(m.Reply[:0], dAtA[iNdEx:postIndex]...)
			if m.Reply == nil {
				m.Reply = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDelManualBlockList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDelManualBlockList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDelManualBlockList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnBlockUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnBlockUser == nil {
				m.UnBlockUser = &BlockUser{}
			}
			if err := m.UnBlockUser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotId", wireType)
			}
			m.BotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSetManualBlockList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSetManualBlockList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSetManualBlockList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockUser == nil {
				m.BlockUser = &BlockUser{}
			}
			if err := m.BlockUser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotId", wireType)
			}
			m.BotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTime", wireType)
			}
			m.BlockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ManualBlockReplyData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ManualBlockReplyData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ManualBlockReplyData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyData = append(m.ReplyData[:0], dAtA[iNdEx:postIndex]...)
			if m.ReplyData == nil {
				m.ReplyData = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Reply = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreShopStickerSetDocumentsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreShopStickerSetDocumentsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreShopStickerSetDocumentsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImbotgateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Documents = append(m.Documents, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImbotgateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImbotgateway
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImbotgateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Documents = append(m.Documents, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Documents", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreShopStickerSetDocumentsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreShopStickerSetDocumentsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreShopStickerSetDocumentsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthorStickerSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthorStickerSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthorStickerSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickersetId", wireType)
			}
			m.StickersetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StickersetId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Archived = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Installed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Installed = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disabled = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ordered", wireType)
			}
			m.Ordered = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ordered |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			m.Updated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Updated |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuthorAllStickerSetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuthorAllStickerSetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuthorAllStickerSetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuthorAllStickerSetResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuthorAllStickerSetResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuthorAllStickerSetResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sets = append(m.Sets, &AuthorStickerSet{})
			if err := m.Sets[len(m.Sets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteStickerPackDocumentReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteStickerPackDocumentReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteStickerPackDocumentReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickersetId", wireType)
			}
			m.StickersetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StickersetId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteStickerPackDocumentResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteStickerPackDocumentResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteStickerPackDocumentResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStickerSetInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStickerSetInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStickerSetInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsId", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsId = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StickerSetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StickerSetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StickerSetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Free", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Free = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Official", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Official = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Masks", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Masks = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Emoticon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Emoticon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImbotgateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Documents = append(m.Documents, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImbotgateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImbotgateway
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImbotgateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Documents = append(m.Documents, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Documents", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStickerSetInfoResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStickerSetInfoResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStickerSetInfoResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickerSetInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StickerSetInfo == nil {
				m.StickerSetInfo = &StickerSetInfo{}
			}
			if err := m.StickerSetInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteStickerSetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteStickerSetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteStickerSetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickerId", wireType)
			}
			m.StickerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StickerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteStickerSetResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteStickerSetResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteStickerSetResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreUserStickerSetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreUserStickerSetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreUserStickerSetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickersetId", wireType)
			}
			m.StickersetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StickersetId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Installed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Installed = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disabled = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Archived = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreUserStickerSetResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreUserStickerSetResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreUserStickerSetResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreStickerPackDcReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreStickerPackDcReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreStickerPackDcReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stickpackbase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stickpackbase == nil {
				m.Stickpackbase = &StickerPackDocumentBase{}
			}
			if err := m.Stickpackbase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreStickerPackDcResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreStickerPackDcResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreStickerPackDcResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreShopStickerSetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreShopStickerSetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreShopStickerSetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Free", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Free = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Official", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Official = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Masks", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Masks = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Emoticon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Emoticon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImbotgateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Documents = append(m.Documents, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImbotgateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImbotgateway
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImbotgateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Documents = append(m.Documents, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Documents", wireType)
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreShopStickerSetResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreShopStickerSetResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreShopStickerSetResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResizeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResizeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResizeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResizeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResizeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResizeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (StatusCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConstraintRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConstraintRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConstraintRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSize", wireType)
			}
			m.MaxSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputWebp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutputWebp = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConstraintReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConstraintReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConstraintReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (StatusCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginWidth", wireType)
			}
			m.OriginWidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginWidth |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginHeight", wireType)
			}
			m.OriginHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginHeight |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompressImageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompressImageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompressImageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			m.Quality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quality |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompressImageReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompressImageReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompressImageReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (StatusCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoPreviewRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoPreviewRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoPreviewRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSize", wireType)
			}
			m.MaxSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoPreviewReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoPreviewReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoPreviewReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (StatusCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preview", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Preview = append(m.Preview[:0], dAtA[iNdEx:postIndex]...)
			if m.Preview == nil {
				m.Preview = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AudioPreviewRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AudioPreviewRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AudioPreviewRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSize", wireType)
			}
			m.MaxSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AudioPreviewReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AudioPreviewReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AudioPreviewReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (StatusCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = append(m.Cover[:0], dAtA[iNdEx:postIndex]...)
			if m.Cover == nil {
				m.Cover = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Artist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Artist = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqParticipants) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqParticipants: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqParticipants: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffSet", wireType)
			}
			m.OffSet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffSet |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartiType", wireType)
			}
			m.PartiType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartiType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Q = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyParticipants) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyParticipants: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyParticipants: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updates = append(m.Updates[:0], dAtA[iNdEx:postIndex]...)
			if m.Updates == nil {
				m.Updates = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCreateChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCreateChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCreateChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chatid", wireType)
			}
			m.Chatid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chatid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			m.Creator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Creator |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImbotgateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Users = append(m.Users, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImbotgateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImbotgateway
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImbotgateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Users = append(m.Users, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyCreateChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyCreateChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyCreateChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqMigrateChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqMigrateChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqMigrateChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chatid", wireType)
			}
			m.Chatid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chatid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromkeyid", wireType)
			}
			m.Fromkeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromkeyid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyMigrateChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyMigrateChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyMigrateChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqJoinChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqJoinChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqJoinChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByLink", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ByLink = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invitor", wireType)
			}
			m.Invitor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Invitor |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteType", wireType)
			}
			m.InviteType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InviteType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyJoinChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyJoinChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyJoinChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = append(m.Reply[:0], dAtA[iNdEx:postIndex]...)
			if m.Reply == nil {
				m.Reply = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChangeGroupAndChannelCrator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChangeGroupAndChannelCrator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChangeGroupAndChannelCrator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			m.OperatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsChat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsChat = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyChangeGroupAndChannelCrator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyChangeGroupAndChannelCrator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyChangeGroupAndChannelCrator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqBotCallMessageMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqBotCallMessageMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqBotCallMessageMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromBotId", wireType)
			}
			m.FromBotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromBotId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgTxt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgTxt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request[:0], dAtA[iNdEx:postIndex]...)
			if m.Request == nil {
				m.Request = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Layer", wireType)
			}
			m.Layer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Layer |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestDialog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetDate", wireType)
			}
			m.OffsetDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetId", wireType)
			}
			m.OffsetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetPeer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OffsetPeer = append(m.OffsetPeer[:0], dAtA[iNdEx:postIndex]...)
			if m.OffsetPeer == nil {
				m.OffsetPeer = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyDialog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserScore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserScore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserScore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSetGameScore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSetGameScore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSetGameScore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scores = append(m.Scores, &UserScore{})
			if err := m.Scores[len(m.Scores)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Force = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableEditMessage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableEditMessage = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatType", wireType)
			}
			m.ChatType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InlineMessageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InlineMessageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Botid", wireType)
			}
			m.Botid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Botid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplySetGameScore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplySetGameScore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplySetGameScore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Succeed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Succeed = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyBanChannelUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyBanChannelUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyBanChannelUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updates = append(m.Updates[:0], dAtA[iNdEx:postIndex]...)
			if m.Updates == nil {
				m.Updates = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqBanChannelUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqBanChannelUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqBanChannelUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BannedUserId", wireType)
			}
			m.BannedUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BannedUserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UtilDate", wireType)
			}
			m.UtilDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UtilDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelBannedRights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelBannedRights == nil {
				m.ChannelBannedRights = &ChannelBannedRights{}
			}
			if err := m.ChannelBannedRights.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelBannedRights) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelBannedRights: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelBannedRights: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewMessages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ViewMessages = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendMessages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendMessages = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendMedia", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendMedia = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendStickers", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendStickers = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendGifs", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendGifs = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendGames", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendGames = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendInline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendInline = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmbedLinks", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EmbedLinks = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UntilDate", wireType)
			}
			m.UntilDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UntilDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannels) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannels: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannels: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImbotgateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChannelIds = append(m.ChannelIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImbotgateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImbotgateway
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImbotgateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChannelIds = append(m.ChannelIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelIds", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetChannels) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetChannels: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetChannels: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = append(m.Reply[:0], dAtA[iNdEx:postIndex]...)
			if m.Reply == nil {
				m.Reply = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDeleteChatUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDeleteChatUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDeleteChatUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chatid", wireType)
			}
			m.Chatid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chatid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyDeleteChatUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyDeleteChatUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyDeleteChatUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelInactiveUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelInactiveUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelInactiveUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelInactiveUsersReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelInactiveUsersReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelInactiveUsersReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelInactiveUsersResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelInactiveUsersResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelInactiveUsersResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &ChannelInactiveUser{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errcode", wireType)
			}
			m.Errcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errcode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqBotInlineCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqBotInlineCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqBotInlineCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotId", wireType)
			}
			m.BotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyBotInlineCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyBotInlineCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyBotInlineCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inlinecall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Inlinecall == nil {
				m.Inlinecall = &InlineCall{}
			}
			if err := m.Inlinecall.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InlineCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InlineCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InlineCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatType", wireType)
			}
			m.ChatType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotId", wireType)
			}
			m.BotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSendUserMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSendUserMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSendUserMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Toid", wireType)
			}
			m.Toid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Toid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyBool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyBool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyBool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqBotCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqBotCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqBotCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrombotId", wireType)
			}
			m.FrombotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrombotId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request[:0], dAtA[iNdEx:postIndex]...)
			if m.Request == nil {
				m.Request = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Layer", wireType)
			}
			m.Layer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Layer |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyBotCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyBotCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyBotCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetMessageByUserIdUuid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetMessageByUserIdUuid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetMessageByUserIdUuid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			m.Uuid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uuid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetMessageByUserIdUuid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetMessageByUserIdUuid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetMessageByUserIdUuid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserMessage == nil {
				m.UserMessage = &UserMsg{}
			}
			if err := m.UserMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelMessageByChannelIdMsgId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelMessageByChannelIdMsgId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelMessageByChannelIdMsgId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetChannelMessageByChannelIdMsgId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetChannelMessageByChannelIdMsgId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetChannelMessageByChannelIdMsgId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserMessage == nil {
				m.UserMessage = &UserMsg{}
			}
			if err := m.UserMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetMessageByUserIdMsgId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetMessageByUserIdMsgId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetMessageByUserIdMsgId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetMessageByUserIdMsgId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetMessageByUserIdMsgId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetMessageByUserIdMsgId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserMessage == nil {
				m.UserMessage = &UserMsg{}
			}
			if err := m.UserMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFileDescReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFileDescReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFileDescReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFileDescResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFileDescResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFileDescResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (ERpcResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgServiceLimitReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgServiceLimitReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgServiceLimitReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserved", wireType)
			}
			m.Reserved = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reserved |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgServiceLimitResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgServiceLimitResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgServiceLimitResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usfsl", wireType)
			}
			m.Usfsl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Usfsl |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ubfssl", wireType)
			}
			m.Ubfssl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ubfssl |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dssl", wireType)
			}
			m.Dssl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dssl |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGetFidReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGetFidReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGetFidReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyid", wireType)
			}
			m.Keyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Keyid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fileid", wireType)
			}
			m.Fileid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fileid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileType", wireType)
			}
			m.FileType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Md5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Md5 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartTotal", wireType)
			}
			m.PartTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartTotal |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGetFidResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGetFidResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGetFidResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			m.FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSize |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (ERpcResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFilePartsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFilePartsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFilePartsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyid", wireType)
			}
			m.Keyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Keyid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fileid", wireType)
			}
			m.Fileid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fileid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartId", wireType)
			}
			m.PartId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileType", wireType)
			}
			m.FileType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartTotal", wireType)
			}
			m.PartTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartTotal |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFilePartsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFilePartsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFilePartsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (ERpcResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUploadFileReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUploadFileReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUploadFileReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Para1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Para1 == nil {
				m.Para1 = &UploadReqPara1{}
			}
			if err := m.Para1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Para2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Para2 == nil {
				m.Para2 = &UploadReqPara2{}
			}
			if err := m.Para2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadReqPara1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadReqPara1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadReqPara1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartId", wireType)
			}
			m.PartId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartSize", wireType)
			}
			m.PartSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadReqPara2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadReqPara2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadReqPara2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			m.FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ttl", wireType)
			}
			m.Ttl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ttl |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileUploadRespPara) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileUploadRespPara: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileUploadRespPara: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartId", wireType)
			}
			m.PartId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUploadFileResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUploadFileResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUploadFileResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (ERpcResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Para1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Para1 == nil {
				m.Para1 = &FileUploadRespPara{}
			}
			if err := m.Para1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Para2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Para2 == nil {
				m.Para2 = &FidPara{}
			}
			if err := m.Para2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDownloadFileReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDownloadFileReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDownloadFileReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownloadFileRespPara1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownloadFileRespPara1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownloadFileRespPara1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownloadFileRespPara2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownloadFileRespPara2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownloadFileRespPara2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDownloadFileResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDownloadFileResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDownloadFileResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (ERpcResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Para1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Para1 == nil {
				m.Para1 = &DownloadFileRespPara1{}
			}
			if err := m.Para1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Para2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Para2 == nil {
				m.Para2 = &DownloadFileRespPara2{}
			}
			if err := m.Para2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgQueryObjInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgQueryObjInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgQueryObjInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryObjInfoRespPara) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryObjInfoRespPara: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryObjInfoRespPara: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgQueryObjInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgQueryObjInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgQueryObjInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Para", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Para == nil {
				m.Para = &QueryObjInfoRespPara{}
			}
			if err := m.Para.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (ERpcResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGetFileDescReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGetFileDescReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGetFileDescReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGetFileDescResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGetFileDescResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGetFileDescResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (ERpcResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseInfo == nil {
				m.BaseInfo = &ChannelInfoBase{}
			}
			if err := m.BaseInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetAdminGroups) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetAdminGroups: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetAdminGroups: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetGroups) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetGroups: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetGroups: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerFilter", wireType)
			}
			m.PeerFilter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerFilter |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Peer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Peer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Peer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			m.PeerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetGroups) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetGroups: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetGroups: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Peer{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuperGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuperGroups = append(m.SuperGroups, &Peer{})
			if err := m.SuperGroups[len(m.SuperGroups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channels = append(m.Channels, &Peer{})
			if err := m.Channels[len(m.Channels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDeleteMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDeleteMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDeleteMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatType", wireType)
			}
			m.ChatType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatType |= (ChatType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImbotgateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MsgId = append(m.MsgId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImbotgateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImbotgateway
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImbotgateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MsgId = append(m.MsgId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSendChatAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSendChatAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSendChatAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatType", wireType)
			}
			m.ChatType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatType |= (ChatType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActionData = append(m.ActionData[:0], dAtA[iNdEx:postIndex]...)
			if m.ActionData == nil {
				m.ActionData = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatType", wireType)
			}
			m.ChatType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatType |= (ChatType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqData = append(m.ReqData[:0], dAtA[iNdEx:postIndex]...)
			if m.ReqData == nil {
				m.ReqData = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotId", wireType)
			}
			m.BotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = append(m.Reply[:0], dAtA[iNdEx:postIndex]...)
			if m.Reply == nil {
				m.Reply = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChatMembersCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChatMembersCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChatMembersCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatType", wireType)
			}
			m.ChatType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatType |= (ChatType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetChatMembersCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetChatMembersCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetChatMembersCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatMembersCount", wireType)
			}
			m.ChatMembersCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatMembersCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChatInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChatInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChatInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RobotGet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RobotGet = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUsersChatsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUsersChatsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUsersChatsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImbotgateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Users = append(m.Users, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImbotgateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImbotgateway
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImbotgateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Users = append(m.Users, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImbotgateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Chatid = append(m.Chatid, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImbotgateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImbotgateway
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImbotgateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Chatid = append(m.Chatid, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Chatid", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImbotgateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Channelid = append(m.Channelid, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImbotgateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImbotgateway
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImbotgateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Channelid = append(m.Channelid, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Channelid", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolLayer", wireType)
			}
			m.ProtocolLayer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProtocolLayer |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUsersChatsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUsersChatsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUsersChatsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channels", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channels = append(m.Channels, make([]byte, postIndex-iNdEx))
			copy(m.Channels[len(m.Channels)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Users == nil {
				m.Users = &UserInfoArray{}
			}
			if err := m.Users.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chats", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chats = append(m.Chats, make([]byte, postIndex-iNdEx))
			copy(m.Chats[len(m.Chats)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImbotgateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NoChats = append(m.NoChats, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImbotgateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImbotgateway
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImbotgateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NoChats = append(m.NoChats, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChats", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImbotgateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NoChans = append(m.NoChans, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImbotgateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImbotgateway
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImbotgateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NoChans = append(m.NoChans, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChans", wireType)
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserInfoByIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserInfoByIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserInfoByIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserInfoByIdArrReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserInfoByIdArrReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserInfoByIdArrReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImbotgateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIds = append(m.UserIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImbotgateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImbotgateway
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImbotgateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIds = append(m.UserIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIds", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserProfileReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserProfileReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserProfileReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserProfileResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserProfileResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserProfileResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uinfo == nil {
				m.Uinfo = &UserInfo{}
			}
			if err := m.Uinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserByphone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserByphone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserByphone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserInfoResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserInfoResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserInfoResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uinfo == nil {
				m.Uinfo = &UserInfo{}
			}
			if err := m.Uinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBotInfoSuppReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBotInfoSuppReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBotInfoSuppReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Placeholder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Placeholder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Geo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Geo = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBotInfoSuppResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBotInfoSuppResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBotInfoSuppResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BotUpdateInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BotUpdateInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BotUpdateInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotInfoVersion", wireType)
			}
			m.BotInfoVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotInfoVersion |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotChatHistory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotChatHistory = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotNoChat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotNoChat = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BotUpdateInfoResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BotUpdateInfoResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BotUpdateInfoResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBotPicRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBotPicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBotPicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotId", wireType)
			}
			m.BotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = append(m.Photo[:0], dAtA[iNdEx:postIndex]...)
			if m.Photo == nil {
				m.Photo = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBotPicResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBotPicResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBotPicResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateuserNameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateuserNameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateuserNameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateuserNameResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateuserNameResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateuserNameResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uinfo == nil {
				m.Uinfo = &UserInfo{}
			}
			if err := m.Uinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterUserInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterUserInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterUserInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBot = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotInfoVersion", wireType)
			}
			m.BotInfoVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotInfoVersion |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotChatHistory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotChatHistory = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotNoChats", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotNoChats = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterUserInfoResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterUserInfoResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterUserInfoResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uinfo == nil {
				m.Uinfo = &UserInfo{}
			}
			if err := m.Uinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAccountByIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAccountByIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAccountByIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelId", wireType)
			}
			m.DelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelAccountResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelAccountResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelAccountResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignUpReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignUpReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignUpReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCodeHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCodeHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBot = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotInfoVersion", wireType)
			}
			m.BotInfoVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotInfoVersion |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotChatHistory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotChatHistory = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotNoChats", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotNoChats = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcId", wireType)
			}
			m.DcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DcId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthSignUpResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthSignUpResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthSignUpResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (AuthSignUpResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserInfo == nil {
				m.UserInfo = &UserInfo{}
			}
			if err := m.UserInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFullUserReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFullUserReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFullUserReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFullUserResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFullUserResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFullUserResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uinfo == nil {
				m.Uinfo = &UserInfo{}
			}
			if err := m.Uinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Isblocked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Isblocked = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCallsPrivate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PhoneCallsPrivate = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCallsAvailable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PhoneCallsAvailable = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonChat", wireType)
			}
			m.CommonChat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommonChat |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserByUsername) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserByUsername: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserByUsername: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetFullChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetFullChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetFullChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chatid", wireType)
			}
			m.Chatid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chatid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetFullChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetFullChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetFullChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqLeaveChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqLeaveChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqLeaveChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyLeaveChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyLeaveChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyLeaveChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = append(m.Reply[:0], dAtA[iNdEx:postIndex]...)
			if m.Reply == nil {
				m.Reply = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSendMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSendMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSendMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Background", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Background = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearDraft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClearDraft = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peer = append(m.Peer[:0], dAtA[iNdEx:postIndex]...)
			if m.Peer == nil {
				m.Peer = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyToMsgId", wireType)
			}
			m.ReplyToMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyToMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Media = append(m.Media[:0], dAtA[iNdEx:postIndex]...)
			if m.Media == nil {
				m.Media = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiMedia", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MultiMedia = append(m.MultiMedia, make([]byte, postIndex-iNdEx))
			copy(m.MultiMedia[len(m.MultiMedia)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
			m.RandomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyMarkup", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyMarkup = append(m.ReplyMarkup[:0], dAtA[iNdEx:postIndex]...)
			if m.ReplyMarkup == nil {
				m.ReplyMarkup = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Newfileid", wireType)
			}
			m.Newfileid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Newfileid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromkeyId", wireType)
			}
			m.FromkeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromkeyId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImbotgateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Chatmeber = append(m.Chatmeber, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImbotgateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImbotgateway
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImbotgateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Chatmeber = append(m.Chatmeber, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Chatmeber", wireType)
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViaBotId", wireType)
			}
			m.ViaBotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ViaBotId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqEditChatTitle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqEditChatTitle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqEditChatTitle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chatid", wireType)
			}
			m.Chatid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chatid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyEditChatTitle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyEditChatTitle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyEditChatTitle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStickerSetPackDcInfosReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStickerSetPackDcInfosReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStickerSetPackDcInfosReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStickerSetPackDcInfosResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStickerSetPackDcInfosResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStickerSetPackDcInfosResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StPDcInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StPDcInfo = append(m.StPDcInfo, &StickerPackDocumentInfo{})
			if err := m.StPDcInfo[len(m.StPDcInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StickerPackDocumentBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StickerPackDocumentBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StickerPackDocumentBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributesStikerSetId", wireType)
			}
			m.AttributesStikerSetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttributesStikerSetId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocumentId", wireType)
			}
			m.DocumentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DocumentId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MimeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MimeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thumb", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Thumb = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcId", wireType)
			}
			m.DcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DcId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributesImageSizeW", wireType)
			}
			m.AttributesImageSizeW = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttributesImageSizeW |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributesImageSizeH", wireType)
			}
			m.AttributesImageSizeH = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttributesImageSizeH |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributesStikerAlt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttributesStikerAlt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributesStikerSetAccessHash", wireType)
			}
			m.AttributesStikerSetAccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttributesStikerSetAccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributesFileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttributesFileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StickerPackDocumentInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StickerPackDocumentInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StickerPackDocumentInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfoBase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImbotgateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InfoBase == nil {
				m.InfoBase = &StickerPackDocumentBase{}
			}
			if err := m.InfoBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImbotgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImbotgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipImbotgateway(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowImbotgateway
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImbotgateway
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthImbotgateway
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowImbotgateway
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipImbotgateway(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthImbotgateway = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowImbotgateway   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/imbotgateway/imbotgateway.proto", fileDescriptorImbotgateway)
}

var fileDescriptorImbotgateway = []byte{
	// 6980 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x7d, 0x5b, 0x6f, 0x1c, 0xc9,
	0x75, 0x30, 0x7b, 0xee, 0x73, 0x78, 0x11, 0xd5, 0xa4, 0x24, 0x6a, 0x44, 0x52, 0x52, 0xef, 0xae,
	0xf7, 0x62, 0x5b, 0x5e, 0xd3, 0x6b, 0xef, 0xb7, 0x9f, 0xed, 0xcf, 0xe6, 0x45, 0xa4, 0xe8, 0x15,
	0xb5, 0x74, 0x8f, 0xb4, 0xf2, 0x67, 0xe3, 0xf3, 0x7c, 0x3d, 0x33, 0xc5, 0x61, 0x87, 0x3d, 0xd3,
	0xc3, 0xee, 0x1e, 0x6a, 0xb9, 0xb1, 0x83, 0x00, 0x8e, 0x01, 0xc7, 0x81, 0xe3, 0x04, 0xb9, 0x20,
	0x79, 0x0b, 0x0c, 0x04, 0x88, 0x91, 0xbc, 0x04, 0x08, 0x10, 0x20, 0x6f, 0x09, 0x82, 0xc4, 0x40,
	0x10, 0x24, 0x48, 0x80, 0x3c, 0x25, 0x81, 0x61, 0x07, 0x79, 0x09, 0x92, 0xdf, 0x10, 0xd4, 0xa9,
	0xaa, 0xee, 0xea, 0xea, 0xea, 0x19, 0x0e, 0xb5, 0xde, 0x87, 0x3c, 0x71, 0xea, 0x54, 0x75, 0xd5,
	0xb9, 0xd5, 0xa9, 0x53, 0xa7, 0x4e, 0x15, 0x61, 0xa7, 0xe7, 0x46, 0x9e, 0xd3, 0xbe, 0xd7, 0x39,
	0x76, 0xa2, 0x90, 0x04, 0x67, 0x24, 0xb8, 0xe7, 0xf6, 0x3f, 0xe1, 0x0e, 0x22, 0x12, 0x1c, 0x39,
	0x1d, 0x32, 0x0c, 0xfc, 0xf6, 0xe8, 0xe8, 0x13, 0x6e, 0xbf, 0xed, 0x47, 0x3d, 0x27, 0x22, 0xcf,
	0x9c, 0xf3, 0x54, 0xe1, 0xde, 0x30, 0xf0, 0x23, 0xdf, 0x9c, 0x93, 0x61, 0x8d, 0xff, 0x33, 0x7d,
	0x9f, 0x1d, 0xbf, 0xdf, 0xf7, 0x07, 0xac, 0x37, 0xeb, 0x37, 0x0d, 0xb8, 0x6a, 0x93, 0xd3, 0x3d,
	0x12, 0xed, 0x8e, 0x3c, 0x6f, 0xfb, 0xd8, 0x19, 0x0c, 0x88, 0x67, 0x5e, 0x87, 0xca, 0x51, 0xe0,
	0xf7, 0xf7, 0xbb, 0x2b, 0xc6, 0x1d, 0xe3, 0x95, 0xb2, 0xcd, 0x4b, 0xe6, 0x2a, 0xd4, 0x3b, 0xac,
	0xc9, 0x7e, 0x77, 0xa5, 0x80, 0x55, 0x09, 0xc0, 0x5c, 0x07, 0x70, 0x3a, 0x1d, 0x12, 0x86, 0x0f,
	0x9c, 0xf0, 0x78, 0xa5, 0x78, 0xc7, 0x78, 0xa5, 0x68, 0x4b, 0x10, 0xf3, 0x55, 0x28, 0x77, 0x49,
	0x7b, 0xd4, 0x5b, 0x29, 0xdd, 0x31, 0x5e, 0x99, 0xdd, 0x58, 0xba, 0x97, 0xa2, 0x6e, 0x87, 0x56,
	0xd9, 0xac, 0x85, 0xf5, 0x53, 0x03, 0x4c, 0x86, 0xd6, 0xa1, 0x13, 0x44, 0x6e, 0xc7, 0x1d, 0x3a,
	0x83, 0x28, 0xa4, 0x78, 0xf9, 0x47, 0x47, 0x4d, 0x12, 0x09, 0xbc, 0x58, 0xc9, 0x5c, 0x86, 0xb2,
	0xe7, 0xf6, 0xdd, 0x88, 0xe3, 0xc4, 0x0a, 0x14, 0xdb, 0x21, 0xfd, 0xfa, 0xf1, 0xf9, 0x90, 0x20,
	0x3a, 0x65, 0x3b, 0x01, 0xa4, 0x69, 0x29, 0xa9, 0xb4, 0x24, 0x1c, 0x28, 0xa7, 0x38, 0x30, 0x07,
	0xc6, 0xe9, 0x4a, 0xe5, 0x8e, 0xf1, 0x4a, 0xdd, 0x36, 0x4e, 0x4d, 0x13, 0x4a, 0x48, 0x6b, 0x15,
	0xdb, 0x94, 0xd2, 0x54, 0xd6, 0x26, 0x52, 0xf9, 0xaf, 0x06, 0xac, 0xd9, 0xe4, 0xf4, 0xc9, 0xb0,
	0xeb, 0x44, 0xe4, 0xd0, 0x1d, 0x0c, 0x48, 0x97, 0x4b, 0xe0, 0x80, 0x84, 0xa1, 0xd3, 0x23, 0xe6,
	0x0d, 0xa8, 0xd2, 0x81, 0x5b, 0xae, 0x2a, 0x89, 0x65, 0x28, 0x1f, 0x79, 0x4e, 0x2f, 0x14, 0x14,
	0x63, 0x81, 0x62, 0x1d, 0xba, 0x1e, 0x19, 0x44, 0x48, 0x6e, 0xcd, 0xe6, 0xa5, 0x09, 0xb4, 0x2e,
	0x40, 0xc1, 0x15, 0x74, 0x16, 0xdc, 0xae, 0xb9, 0x06, 0x80, 0x83, 0x9e, 0x90, 0x73, 0xb7, 0x8b,
	0xc4, 0x16, 0xed, 0x3a, 0x85, 0xbc, 0x4d, 0x01, 0x09, 0x81, 0xd5, 0x89, 0x04, 0xfe, 0x8d, 0x01,
	0x4b, 0x36, 0x39, 0xbd, 0xdf, 0x75, 0x23, 0x4e, 0xd8, 0x66, 0xdb, 0x1f, 0x45, 0xf9, 0x64, 0xad,
	0x82, 0x18, 0x88, 0x2b, 0x58, 0x32, 0xb2, 0xaa, 0x7e, 0x45, 0x95, 0x8c, 0x65, 0x28, 0x3b, 0xb4,
	0x77, 0x24, 0xb0, 0x6e, 0xb3, 0x82, 0xa2, 0x94, 0xe5, 0x7c, 0xa5, 0xac, 0x4c, 0xa4, 0xe6, 0x0f,
	0x33, 0xd4, 0x3c, 0x76, 0x23, 0x4f, 0xd1, 0x24, 0x43, 0x83, 0x56, 0x44, 0x9b, 0x21, 0x39, 0x75,
	0x9b, 0x15, 0xa8, 0xa4, 0x46, 0x21, 0x09, 0x62, 0x3a, 0x78, 0x49, 0xe1, 0x7d, 0x29, 0x97, 0xf7,
	0xe5, 0x89, 0xd8, 0x7e, 0x03, 0x16, 0x6d, 0x32, 0xf4, 0xce, 0x39, 0xaa, 0x3b, 0x4e, 0xe4, 0x50,
	0x5c, 0x02, 0x0a, 0x43, 0x2c, 0xe7, 0x6c, 0x56, 0xa0, 0xf8, 0x93, 0x20, 0xf0, 0x83, 0x6d, 0xbf,
	0x4b, 0xc4, 0xac, 0x8e, 0x01, 0xb4, 0x76, 0x5b, 0xd5, 0x9d, 0x6d, 0x79, 0x9e, 0xec, 0xa6, 0xe6,
	0x09, 0x2b, 0x51, 0xbb, 0x72, 0xcd, 0x26, 0xa7, 0x3b, 0xc4, 0x3b, 0x70, 0x06, 0x23, 0xc7, 0xdb,
	0xf2, 0xfc, 0xce, 0xc9, 0x43, 0x37, 0x8c, 0xcc, 0xb7, 0x60, 0xf6, 0xc9, 0x00, 0x8b, 0x4f, 0x42,
	0x12, 0x20, 0x26, 0xb3, 0x1b, 0x37, 0xd2, 0x84, 0xc4, 0xd5, 0xb6, 0xdc, 0xd6, 0xbc, 0x06, 0x95,
	0xb6, 0x1f, 0x51, 0xad, 0xe1, 0x5a, 0xdf, 0xf6, 0xa3, 0x7d, 0x89, 0x29, 0xc5, 0x89, 0x4c, 0xf9,
	0x35, 0x86, 0x56, 0x93, 0x44, 0x2a, 0x5a, 0x9f, 0x86, 0xfa, 0x85, 0x91, 0xaa, 0x7f, 0x90, 0x28,
	0x7d, 0x4d, 0x1a, 0x58, 0x52, 0x0b, 0x23, 0xa5, 0x16, 0xab, 0x50, 0x6f, 0xd3, 0x46, 0x8f, 0xdd,
	0x3e, 0x11, 0xf3, 0x22, 0x06, 0x98, 0x2b, 0x50, 0xed, 0x05, 0xfe, 0x68, 0xc8, 0xb5, 0xa9, 0x68,
	0x8b, 0xa2, 0x75, 0x0c, 0xcb, 0x12, 0xa1, 0xa8, 0x0f, 0xa8, 0x08, 0xab, 0x50, 0x0f, 0x44, 0x81,
	0x2b, 0x43, 0x02, 0x48, 0xd4, 0xa4, 0x80, 0x56, 0x44, 0xa7, 0x26, 0x45, 0x45, 0x4d, 0xac, 0xf7,
	0xe1, 0x76, 0x33, 0xf2, 0x03, 0xd2, 0x3c, 0xf6, 0x87, 0xcd, 0xc8, 0xed, 0x9c, 0x90, 0xa0, 0x49,
	0xa2, 0x1d, 0xbf, 0x33, 0xea, 0x93, 0x41, 0x14, 0xda, 0xe4, 0x94, 0xdb, 0x19, 0x23, 0xb6, 0x33,
	0xab, 0x50, 0xef, 0x8a, 0xfa, 0x95, 0xc2, 0x9d, 0x22, 0xed, 0x30, 0x06, 0x4c, 0xc7, 0x42, 0x6b,
	0xfc, 0xd8, 0xe1, 0xc8, 0x43, 0x09, 0xdf, 0xa7, 0xe8, 0x76, 0x28, 0xfe, 0x14, 0x8b, 0x05, 0x55,
	0xc2, 0x36, 0xb9, 0x1f, 0x20, 0x35, 0x76, 0xd2, 0xd2, 0xfa, 0x8d, 0x02, 0x2c, 0x6e, 0x8e, 0xa2,
	0x63, 0x3f, 0x48, 0xba, 0xa6, 0x06, 0x8c, 0x4a, 0x46, 0x32, 0x60, 0x5c, 0x50, 0x2f, 0xc0, 0x7c,
	0xc8, 0x9a, 0x85, 0x24, 0x56, 0x8b, 0xa2, 0x3d, 0x97, 0x00, 0xd9, 0x24, 0x0f, 0x8f, 0xfd, 0x20,
	0x6a, 0x0d, 0x9c, 0x3e, 0x63, 0x65, 0xdd, 0xae, 0x23, 0xe4, 0x91, 0xd3, 0x27, 0x66, 0x03, 0x6a,
	0x4e, 0xd0, 0x39, 0x76, 0xcf, 0x08, 0x9b, 0x70, 0x35, 0x3b, 0x2e, 0x53, 0x9e, 0xb9, 0x83, 0x30,
	0x72, 0x3c, 0x8f, 0xb0, 0x29, 0x57, 0xb3, 0x13, 0x00, 0xfd, 0xb2, 0xeb, 0x86, 0x4e, 0x9b, 0x56,
	0x56, 0xd8, 0x97, 0xa2, 0x4c, 0x95, 0xc4, 0x0f, 0xba, 0x24, 0x20, 0x5d, 0xbe, 0x5c, 0x89, 0x22,
	0xad, 0xe9, 0x04, 0xc4, 0x89, 0x48, 0x17, 0xd7, 0xac, 0xb2, 0x2d, 0x8a, 0xb4, 0x66, 0x84, 0x8b,
	0x53, 0x77, 0xa5, 0xce, 0x6a, 0x78, 0xd1, 0x7a, 0x03, 0x6e, 0xee, 0x91, 0x88, 0xf1, 0x65, 0xd3,
	0xf3, 0x12, 0xd6, 0x50, 0x41, 0xe7, 0x71, 0xc7, 0xfa, 0x65, 0x03, 0x56, 0xf3, 0x3e, 0x4b, 0xc9,
	0x68, 0xfb, 0xc2, 0x32, 0x42, 0x1b, 0xb5, 0x01, 0xa5, 0x90, 0x70, 0x25, 0x9a, 0xdd, 0x58, 0x4f,
	0x7f, 0xa1, 0x0a, 0xcf, 0xc6, 0xb6, 0x56, 0x13, 0x56, 0x77, 0x88, 0x47, 0x22, 0xc2, 0x6b, 0x0e,
	0x9d, 0xce, 0x89, 0x50, 0x19, 0x9d, 0xb6, 0x5e, 0x44, 0xb2, 0xd6, 0x57, 0xe0, 0xf6, 0x98, 0x4e,
	0x9f, 0x47, 0x0d, 0xbf, 0x6d, 0xc0, 0xf2, 0x1e, 0x89, 0x12, 0x32, 0xf6, 0x07, 0x47, 0xbe, 0x0e,
	0xcf, 0xb4, 0x72, 0x15, 0x54, 0xe5, 0x5a, 0x82, 0xb2, 0x1b, 0x52, 0xf4, 0x99, 0x87, 0x50, 0x72,
	0x43, 0xd9, 0x5c, 0x4d, 0xf6, 0xcc, 0x7e, 0xaf, 0x00, 0x0b, 0x69, 0x24, 0x32, 0x18, 0xdc, 0x86,
	0x59, 0xb6, 0xc0, 0xb6, 0x8e, 0xe9, 0x9a, 0x5b, 0xc8, 0xac, 0xb9, 0x26, 0x94, 0x8e, 0x02, 0x42,
	0x04, 0x0a, 0xf4, 0x37, 0x55, 0x5d, 0xff, 0xe8, 0xc8, 0xed, 0xb8, 0x8e, 0x27, 0x94, 0x5e, 0x94,
	0xa9, 0x3d, 0xea, 0x3b, 0xe1, 0x49, 0xc8, 0x15, 0x9e, 0x15, 0x92, 0x85, 0xb5, 0x22, 0x2f, 0xac,
	0x69, 0xf2, 0xab, 0x2a, 0xf9, 0xcb, 0x50, 0xee, 0xf8, 0xa3, 0x41, 0xc4, 0x35, 0x9d, 0x15, 0x28,
	0x42, 0x88, 0x6a, 0x1d, 0x51, 0xc5, 0xdf, 0x14, 0x21, 0xd2, 0xf7, 0x23, 0xb7, 0xe3, 0x0f, 0x56,
	0x00, 0xbb, 0x89, 0xcb, 0x69, 0xcb, 0x35, 0xab, 0x58, 0x2e, 0xeb, 0xb7, 0x0d, 0xb8, 0xa1, 0x11,
	0x15, 0x4a, 0x7f, 0x07, 0x16, 0xc2, 0x14, 0x9c, 0xaf, 0x35, 0xab, 0x69, 0x96, 0x2b, 0xdf, 0x2a,
	0xdf, 0xa4, 0x75, 0xa8, 0x70, 0x61, 0x1d, 0x7a, 0x06, 0x4b, 0x29, 0xed, 0xe4, 0xd3, 0x75, 0x15,
	0xea, 0xbc, 0xff, 0xc4, 0x7f, 0x89, 0x01, 0x89, 0x6e, 0x14, 0x26, 0xe9, 0x86, 0x3c, 0xef, 0x53,
	0x5e, 0x8d, 0xf5, 0x0e, 0x5c, 0xcf, 0x0e, 0xfc, 0x3c, 0xb3, 0xe1, 0x3f, 0x0d, 0xb8, 0x8e, 0x26,
	0x9f, 0xae, 0x9a, 0x17, 0x33, 0x3e, 0xfa, 0x09, 0x5c, 0x56, 0x4c, 0x73, 0xca, 0xbe, 0x16, 0xc7,
	0xd9, 0xd7, 0x92, 0x62, 0x5f, 0x97, 0xa1, 0x8c, 0x06, 0x95, 0x3b, 0x42, 0xac, 0x90, 0xb2, 0xe5,
	0x15, 0xc5, 0x96, 0x4f, 0xe1, 0x48, 0xdb, 0x70, 0x53, 0x4b, 0x6e, 0x96, 0x87, 0x17, 0xd7, 0x86,
	0xef, 0x1b, 0x70, 0x8d, 0x2d, 0x9b, 0x92, 0xad, 0xea, 0x50, 0x16, 0xbe, 0xcd, 0x39, 0x35, 0x74,
	0x3a, 0x27, 0x6d, 0x27, 0x24, 0x5c, 0x47, 0x5f, 0xd2, 0xea, 0xa8, 0x6c, 0xe2, 0xb6, 0x9c, 0x90,
	0xd8, 0xe9, 0x6f, 0xa7, 0xd0, 0x1f, 0xcb, 0x81, 0x15, 0x1d, 0x42, 0x48, 0xa4, 0x6a, 0x64, 0x2e,
	0x49, 0xf4, 0x3f, 0x17, 0xb8, 0xe2, 0xa4, 0x7d, 0x05, 0x4a, 0xb5, 0x62, 0xb6, 0x8c, 0x5c, 0xb3,
	0x55, 0xc8, 0x31, 0x5b, 0xc5, 0x3c, 0xb3, 0x55, 0xd2, 0x9a, 0xad, 0x72, 0xbe, 0xd9, 0xaa, 0xe4,
	0x9a, 0xad, 0xaa, 0xce, 0x6c, 0xd5, 0x72, 0xcc, 0x56, 0x7d, 0x9c, 0xd9, 0x82, 0x5c, 0x87, 0x6b,
	0x76, 0x9a, 0x89, 0x3e, 0x97, 0x9a, 0xe8, 0x6d, 0xae, 0xa7, 0x2a, 0x77, 0x3f, 0x48, 0x11, 0x7e,
	0x19, 0xe6, 0x6d, 0x12, 0xba, 0xef, 0x13, 0x9b, 0x9c, 0x8e, 0x48, 0x88, 0x6c, 0xe8, 0x26, 0x7e,
	0x2c, 0xfe, 0xa6, 0x0c, 0x7b, 0xe6, 0x76, 0x23, 0xb6, 0xfa, 0xcc, 0xdb, 0xac, 0x40, 0xdd, 0xeb,
	0x63, 0xe2, 0xf6, 0x8e, 0xd9, 0xfe, 0x78, 0xde, 0xe6, 0x25, 0xab, 0x09, 0xb3, 0xa2, 0x4b, 0xea,
	0xe9, 0xbe, 0x0e, 0x95, 0x30, 0x72, 0xa2, 0x51, 0xc8, 0x2d, 0xd2, 0x8a, 0xaa, 0xf8, 0xb4, 0x0e,
	0xd1, 0xe2, 0xed, 0x62, 0x14, 0x0a, 0x09, 0x0a, 0x56, 0x07, 0xae, 0x6e, 0xfb, 0x83, 0x30, 0x0a,
	0x1c, 0x17, 0x3d, 0x8a, 0x5c, 0x5c, 0x6f, 0x42, 0xad, 0xef, 0xbc, 0xd7, 0xa2, 0xe3, 0x73, 0x74,
	0xab, 0x7d, 0xe7, 0xbd, 0xa6, 0xfb, 0x3e, 0xa1, 0x3a, 0xe9, 0x8f, 0xa2, 0xe1, 0x28, 0x6a, 0x3d,
	0x23, 0xed, 0x21, 0xd7, 0x30, 0x60, 0xa0, 0xa7, 0xa4, 0x3d, 0xb4, 0xfe, 0xd6, 0x80, 0x2b, 0xf2,
	0x28, 0x1f, 0x18, 0xfa, 0x09, 0x07, 0x8b, 0x7a, 0x0e, 0x96, 0x64, 0x0e, 0x9a, 0x77, 0x61, 0xce,
	0x0f, 0xdc, 0x9e, 0x3b, 0x68, 0xb1, 0x8f, 0xca, 0x58, 0x3b, 0xcb, 0x60, 0x4f, 0xf1, 0xd3, 0x17,
	0x60, 0x9e, 0x37, 0xe1, 0x3d, 0x54, 0xb0, 0x0d, 0xff, 0xee, 0x01, 0x93, 0xc4, 0x0e, 0x2c, 0x6f,
	0xfb, 0xfd, 0x61, 0x40, 0xc2, 0x70, 0xbf, 0xef, 0xf4, 0xc6, 0xca, 0x78, 0x05, 0xaa, 0xa7, 0x23,
	0xc7, 0x73, 0xa3, 0x73, 0xc1, 0x36, 0x5e, 0xb4, 0xbe, 0x0a, 0xa6, 0xd2, 0xcb, 0x07, 0x27, 0xd6,
	0x1d, 0x58, 0x7a, 0xd7, 0xed, 0x12, 0xff, 0x30, 0x20, 0x67, 0x2e, 0x79, 0x76, 0x39, 0xc1, 0x5a,
	0x3f, 0x34, 0xe0, 0x6a, 0xba, 0x9b, 0xcb, 0x61, 0x48, 0x57, 0xa4, 0x51, 0xe0, 0x44, 0xae, 0x3f,
	0xe0, 0x43, 0xc4, 0x65, 0xca, 0x9f, 0x21, 0xeb, 0x1d, 0x65, 0x38, 0x67, 0x8b, 0x62, 0x22, 0xdb,
	0x92, 0x5e, 0xb6, 0xe5, 0xd4, 0xec, 0xd8, 0x81, 0xa5, 0xcd, 0x51, 0xd7, 0x7d, 0x4e, 0x8a, 0xff,
	0xd1, 0x80, 0xab, 0xe9, 0x6e, 0x3e, 0x78, 0x8a, 0xd1, 0x4c, 0x9e, 0x91, 0x80, 0xd3, 0xcb, 0x0a,
	0x89, 0xc5, 0x2d, 0x29, 0x11, 0x18, 0x27, 0x88, 0xdc, 0x30, 0xe2, 0x86, 0x98, 0x97, 0x12, 0xde,
	0x54, 0xf4, 0xbc, 0xa9, 0xa6, 0x78, 0xf3, 0x63, 0x03, 0xae, 0xd8, 0xe4, 0xf4, 0x7f, 0x72, 0x94,
	0xf2, 0x21, 0x5c, 0x45, 0x59, 0xa5, 0x68, 0x5c, 0x81, 0x2a, 0x0b, 0x5b, 0x86, 0x5c, 0xfe, 0xa2,
	0x48, 0x57, 0x32, 0x8c, 0x0a, 0xb4, 0x3a, 0xba, 0x70, 0x92, 0xf5, 0xa7, 0x06, 0x35, 0xdf, 0xa7,
	0xdb, 0xb8, 0xc3, 0xdc, 0x3e, 0x76, 0x22, 0x4a, 0x44, 0xe7, 0xd8, 0x89, 0x12, 0x7f, 0x8d, 0x95,
	0x72, 0x02, 0x67, 0x62, 0xb3, 0xea, 0x07, 0x9c, 0x59, 0xa2, 0x48, 0xdb, 0xd3, 0x55, 0x88, 0x2e,
	0xb7, 0x74, 0x65, 0x63, 0x05, 0x25, 0xa0, 0x46, 0xd9, 0x54, 0xd2, 0x06, 0xd4, 0x26, 0x87, 0xff,
	0xbe, 0x40, 0x25, 0x3d, 0xf4, 0xce, 0xd3, 0xa8, 0x07, 0xb8, 0xb6, 0x71, 0x26, 0xf0, 0x12, 0x45,
	0x05, 0x29, 0x16, 0xbe, 0x20, 0x16, 0xe8, 0xee, 0x77, 0xc1, 0x26, 0xa7, 0x07, 0x6e, 0x2f, 0x90,
	0x3a, 0xa0, 0xb8, 0xa4, 0xe3, 0xa0, 0x6e, 0x57, 0xe2, 0x49, 0x21, 0xc5, 0x13, 0x1e, 0x1f, 0x65,
	0xc4, 0x14, 0x13, 0x62, 0x4e, 0xd2, 0xc4, 0x4c, 0xde, 0xc6, 0x7d, 0x91, 0x47, 0x07, 0x15, 0x64,
	0x38, 0x35, 0x55, 0x3d, 0x35, 0x35, 0x99, 0x9a, 0x6f, 0x15, 0x90, 0x9a, 0x2f, 0xf9, 0xee, 0x40,
	0x1c, 0x1b, 0x8c, 0x0f, 0x84, 0x5e, 0x2c, 0xe4, 0x59, 0x56, 0x43, 0x9e, 0xe9, 0x00, 0x6e, 0x25,
	0xe3, 0x95, 0x5d, 0x87, 0x4a, 0xfb, 0xfc, 0xa1, 0x3b, 0x38, 0x41, 0xac, 0x6b, 0x36, 0x2f, 0x51,
	0x45, 0x71, 0x07, 0x67, 0x6e, 0x14, 0xe3, 0x2d, 0x8a, 0x74, 0x51, 0xc5, 0x9f, 0xa4, 0x15, 0xd1,
	0x39, 0xc7, 0x22, 0x1b, 0xc0, 0x40, 0x38, 0xe9, 0x62, 0x3e, 0xc2, 0x44, 0x3e, 0xee, 0x71, 0x3e,
	0xca, 0x6c, 0xd0, 0x47, 0x59, 0x27, 0xcc, 0x8b, 0xef, 0x1a, 0xb0, 0x4e, 0xe7, 0xc5, 0xb1, 0x33,
	0xe8, 0x91, 0xbd, 0xc0, 0x1f, 0x0d, 0x37, 0x07, 0xe2, 0x34, 0x60, 0x3b, 0x40, 0x05, 0x5f, 0x81,
	0xea, 0x1e, 0x0f, 0xf3, 0x31, 0xe6, 0x8a, 0xa2, 0x64, 0x07, 0x0a, 0x29, 0x3b, 0xb0, 0x0e, 0xf0,
	0xce, 0x90, 0xe0, 0xd7, 0x31, 0xdb, 0x25, 0x08, 0xfd, 0x6e, 0x3f, 0xa4, 0xb2, 0xe7, 0x2e, 0x2a,
	0x2f, 0x59, 0x4f, 0xe1, 0x4e, 0x1c, 0x3b, 0xce, 0xc3, 0x66, 0x19, 0xca, 0x67, 0x8e, 0xc7, 0x35,
	0xb7, 0x66, 0xb3, 0xc2, 0x24, 0x2a, 0x7f, 0x68, 0xc0, 0x75, 0x9b, 0x9c, 0x6e, 0xf9, 0xd1, 0xb6,
	0xe3, 0x89, 0x53, 0x8e, 0x03, 0xd2, 0x75, 0x1d, 0xa1, 0xda, 0x5b, 0x7e, 0x94, 0x28, 0x4f, 0x0c,
	0xa0, 0x98, 0x1e, 0x84, 0xbd, 0xc7, 0xef, 0x45, 0xdc, 0x1a, 0xf0, 0x12, 0xe5, 0x49, 0xc0, 0xd6,
	0x23, 0xb1, 0xc6, 0xf1, 0x22, 0x5a, 0x5b, 0xe7, 0x9c, 0x04, 0xdc, 0x6a, 0xb2, 0xc2, 0x34, 0x01,
	0xf4, 0x7f, 0x61, 0x96, 0x8a, 0x76, 0xb6, 0xe3, 0x3a, 0x9e, 0xdf, 0x13, 0x1a, 0x9c, 0xde, 0x59,
	0xba, 0x79, 0x87, 0x31, 0xd4, 0x77, 0x3b, 0x3a, 0xa2, 0x7b, 0x4d, 0x6a, 0x18, 0x05, 0xf7, 0x19,
	0x68, 0xc7, 0x89, 0x88, 0x79, 0x0b, 0xea, 0xbc, 0x81, 0x2b, 0x6c, 0x7b, 0x8d, 0x01, 0xf6, 0xbb,
	0xd2, 0xd7, 0x43, 0xc2, 0x37, 0x95, 0x73, 0xe2, 0xeb, 0x43, 0xc2, 0x56, 0x35, 0xb6, 0x9a, 0x54,
	0xe4, 0xd5, 0x64, 0x8a, 0x3d, 0xe5, 0x67, 0xa9, 0xd3, 0x3b, 0xf4, 0xce, 0x13, 0xe2, 0xc6, 0xdb,
	0xb2, 0x82, 0x3c, 0xfb, 0xdf, 0x82, 0x3a, 0xee, 0x45, 0x3b, 0x7e, 0x40, 0xc6, 0xf1, 0x25, 0xa4,
	0x0d, 0xc4, 0xa7, 0x58, 0xb0, 0xfe, 0xad, 0x80, 0x4b, 0x66, 0x93, 0x44, 0x7b, 0x4e, 0x9f, 0x8c,
	0xef, 0xe1, 0x13, 0x50, 0xc1, 0x8f, 0x44, 0x68, 0x4f, 0xd9, 0x1f, 0xc4, 0x28, 0xd8, 0xbc, 0x19,
	0x8a, 0xc2, 0x0f, 0x3a, 0x22, 0xb6, 0xc4, 0x0a, 0xe6, 0xeb, 0xb0, 0xcc, 0xf7, 0xe9, 0x2d, 0xd2,
	0x75, 0xa3, 0x56, 0x9f, 0x29, 0x1e, 0xd7, 0x7a, 0x93, 0xd7, 0xdd, 0xef, 0xba, 0x91, 0x74, 0xf0,
	0x46, 0x4d, 0x6e, 0x2b, 0x3e, 0x18, 0x43, 0x0b, 0xbc, 0xdf, 0xa5, 0x42, 0xc3, 0x0a, 0x34, 0x1d,
	0x8c, 0xf5, 0x35, 0x0a, 0x40, 0xc3, 0xb1, 0x06, 0xc0, 0xbb, 0xa6, 0x1f, 0xb2, 0xf5, 0xb6, 0xce,
	0x21, 0xfb, 0x5d, 0xf3, 0x35, 0xb8, 0xea, 0x0e, 0x3c, 0x77, 0x40, 0x5a, 0x52, 0xab, 0x1a, 0xea,
	0xf3, 0x15, 0x56, 0x71, 0x10, 0xb7, 0x5d, 0x86, 0x72, 0xdb, 0xa7, 0x0b, 0x40, 0x3d, 0x3e, 0x57,
	0x90, 0x2d, 0x3c, 0x5c, 0x60, 0x33, 0xcd, 0x96, 0xed, 0x14, 0x9f, 0x57, 0xa0, 0x1a, 0x8e, 0x3a,
	0x1d, 0x42, 0xc4, 0xb4, 0x15, 0xc5, 0xb4, 0x98, 0xeb, 0x5c, 0xcc, 0x71, 0xcc, 0xbf, 0xa3, 0xc6,
	0xfc, 0x71, 0x27, 0xf6, 0x08, 0x96, 0x70, 0x88, 0x2d, 0x47, 0xd8, 0x3e, 0x3c, 0xc4, 0xb8, 0xb4,
	0x6f, 0xf0, 0xa3, 0x02, 0x1e, 0x46, 0x2b, 0xdd, 0x8d, 0x39, 0x8c, 0xbe, 0xf4, 0x59, 0xa1, 0x05,
	0x73, 0x6d, 0xfa, 0xbb, 0xfb, 0x84, 0xad, 0x48, 0x6c, 0xf6, 0xa5, 0x60, 0x13, 0x4f, 0x0e, 0x6f,
	0x41, 0x7d, 0x14, 0xb9, 0x1e, 0x9b, 0xdd, 0x5c, 0x13, 0x28, 0x00, 0xe7, 0x76, 0x13, 0x96, 0xf8,
	0x68, 0x5b, 0xd8, 0xa7, 0x4d, 0xbd, 0xc5, 0x90, 0xcf, 0xca, 0xbb, 0x69, 0xb1, 0x6d, 0x67, 0x1b,
	0xda, 0xba, 0xaf, 0xa7, 0x71, 0xda, 0xfe, 0xa9, 0x00, 0x4b, 0x9a, 0x7e, 0x13, 0x53, 0x65, 0xc8,
	0xa6, 0xea, 0x05, 0x98, 0xa7, 0x2e, 0xb9, 0x50, 0xcb, 0x90, 0x87, 0x38, 0xe6, 0x28, 0x90, 0xab,
	0x24, 0x36, 0x0a, 0xc9, 0xa0, 0x9b, 0x34, 0x62, 0x53, 0x6c, 0x8e, 0x02, 0xe3, 0x46, 0x6b, 0x00,
	0xbc, 0x51, 0xd7, 0x75, 0xf8, 0xfc, 0xaa, 0xb3, 0x16, 0xd4, 0xc8, 0x8b, 0x3e, 0x44, 0xcc, 0x8d,
	0x47, 0x74, 0xb1, 0x0f, 0x1e, 0x2f, 0x08, 0x29, 0x63, 0xb1, 0x51, 0xcf, 0x3d, 0x0a, 0x45, 0xd0,
	0x8c, 0x02, 0xf6, 0xdc, 0xa3, 0x64, 0x80, 0x9e, 0xd3, 0x27, 0x21, 0x5f, 0xf2, 0xb1, 0x39, 0x55,
	0x72, 0x34, 0xba, 0x58, 0xcd, 0xa6, 0x13, 0x32, 0xaa, 0x66, 0xe3, 0x17, 0xfb, 0x08, 0xa1, 0x0d,
	0x48, 0xbf, 0x4d, 0xba, 0x2d, 0xcf, 0x1d, 0x9c, 0x84, 0x38, 0xbb, 0x6a, 0x36, 0x20, 0x88, 0xba,
	0x0d, 0x38, 0xc0, 0x68, 0x10, 0xcb, 0x15, 0x98, 0xe6, 0x20, 0x84, 0x0a, 0xd6, 0x0a, 0xd1, 0xeb,
	0xd9, 0x23, 0xe2, 0x08, 0x38, 0xa4, 0x7a, 0x12, 0x2b, 0x16, 0xe5, 0x2b, 0x75, 0x3e, 0x25, 0x48,
	0xee, 0xe2, 0x3c, 0xc5, 0x01, 0x97, 0xf0, 0x32, 0xe4, 0x61, 0x2f, 0xe5, 0x65, 0xfc, 0x3e, 0x4b,
	0xf7, 0x60, 0xc1, 0x58, 0xba, 0xd4, 0xcb, 0x33, 0xec, 0xc2, 0x5e, 0x68, 0x62, 0xad, 0x8b, 0x29,
	0x6b, 0x9d, 0x3d, 0xbc, 0xbe, 0xac, 0xaf, 0xbd, 0xcd, 0x2d, 0x4b, 0x16, 0xd1, 0x29, 0xd6, 0xa8,
	0x5e, 0x3c, 0x05, 0xf6, 0x07, 0x4e, 0x27, 0x72, 0xcf, 0x30, 0x7c, 0x9a, 0x09, 0x43, 0x99, 0x50,
	0x92, 0x8e, 0x4a, 0xf0, 0x37, 0x85, 0x45, 0x6e, 0x5f, 0x98, 0x3c, 0xfc, 0x4d, 0xcd, 0x1a, 0xfd,
	0xdb, 0x8c, 0x02, 0xbe, 0x91, 0x14, 0x45, 0xeb, 0x18, 0x1a, 0x89, 0x64, 0xe4, 0xb1, 0x42, 0x1e,
	0x5e, 0x1f, 0x9f, 0x1e, 0xa0, 0xd9, 0x14, 0xe6, 0x70, 0xd8, 0xfa, 0x8e, 0x01, 0x6b, 0xb9, 0x43,
	0x21, 0x2b, 0xde, 0x14, 0xbb, 0x20, 0x03, 0x17, 0x4c, 0xbd, 0xa9, 0x91, 0x3f, 0x14, 0x1b, 0xa5,
	0x38, 0xc4, 0x58, 0x90, 0x43, 0x8c, 0x2b, 0x50, 0x25, 0x81, 0x6c, 0xfe, 0x45, 0xd1, 0xfa, 0x77,
	0x83, 0x2a, 0x25, 0x75, 0xe5, 0xd8, 0xcc, 0xa2, 0x0e, 0x5d, 0x22, 0x62, 0x63, 0x9a, 0x18, 0x62,
	0x21, 0xb5, 0x1f, 0x48, 0x8e, 0xd4, 0x8b, 0xf2, 0x91, 0x7a, 0x7a, 0x6d, 0xe5, 0xca, 0x95, 0xac,
	0xad, 0xd7, 0xa0, 0x72, 0x42, 0xce, 0x5b, 0xf1, 0x1e, 0xaf, 0x7c, 0x82, 0xcb, 0x00, 0x9a, 0x8b,
	0x30, 0x74, 0xfd, 0x41, 0x8b, 0xe7, 0xb2, 0x94, 0xa8, 0xb9, 0x40, 0xc8, 0x7e, 0x37, 0x8e, 0x61,
	0x54, 0xa5, 0x18, 0x06, 0xd3, 0x0f, 0xb6, 0x2c, 0x17, 0xdc, 0xae, 0xf5, 0x2d, 0xcc, 0x45, 0xa2,
	0xcb, 0x5c, 0x8a, 0xd4, 0x9b, 0x50, 0x23, 0x01, 0x9f, 0x67, 0x46, 0xcc, 0x1a, 0x3c, 0x8e, 0x5c,
	0x81, 0xaa, 0xf0, 0x30, 0x98, 0x52, 0x89, 0xa2, 0xf9, 0xbf, 0x00, 0x98, 0x65, 0xea, 0x38, 0x9e,
	0xc7, 0x27, 0xbe, 0x12, 0xf2, 0x48, 0x86, 0xb0, 0xa5, 0xb6, 0xd6, 0x2f, 0x19, 0x00, 0xd2, 0xe8,
	0xcb, 0x50, 0x3e, 0x08, 0x7b, 0xb1, 0x42, 0xb1, 0x82, 0x94, 0x8d, 0x51, 0x90, 0xb3, 0x31, 0x28,
	0x7c, 0x1b, 0xdd, 0x17, 0xa1, 0x4e, 0xac, 0x64, 0x36, 0xa0, 0xb6, 0xcd, 0x7d, 0x17, 0xe1, 0x80,
	0x8a, 0x32, 0x1d, 0x81, 0xf9, 0xe2, 0x7c, 0x0f, 0x8b, 0x05, 0xeb, 0x77, 0xd9, 0x1e, 0xb6, 0x49,
	0x06, 0xb8, 0x4c, 0x1e, 0x84, 0xbd, 0x5c, 0xeb, 0x31, 0x7e, 0x7d, 0xa6, 0x33, 0xcc, 0x8f, 0x65,
	0x8c, 0xbf, 0x63, 0x69, 0x94, 0x24, 0x69, 0x4c, 0xe1, 0xb0, 0xbf, 0x05, 0x75, 0x2e, 0x27, 0xdf,
	0x53, 0x4c, 0x45, 0x6d, 0x82, 0xa9, 0xf8, 0xb6, 0x01, 0x90, 0xec, 0x4b, 0x04, 0xea, 0x6d, 0x75,
	0x2f, 0xc2, 0x34, 0x51, 0xda, 0x73, 0x14, 0x72, 0xf6, 0x1c, 0x45, 0xed, 0x9e, 0x63, 0xf2, 0xb6,
	0xfc, 0x73, 0x30, 0x27, 0x54, 0x0d, 0x11, 0x99, 0xce, 0xe0, 0x05, 0x70, 0x93, 0xad, 0x4d, 0x7c,
	0x39, 0xde, 0x3a, 0x67, 0xae, 0xcc, 0x93, 0x11, 0x33, 0xda, 0x4f, 0x52, 0xa9, 0x25, 0xdc, 0xcd,
	0x31, 0xa1, 0x44, 0xeb, 0xb9, 0x84, 0xf0, 0xf7, 0x34, 0x4b, 0xd3, 0x08, 0x6e, 0x89, 0xa5, 0x49,
	0x37, 0xea, 0x9b, 0x30, 0x8b, 0x7a, 0xc2, 0xa7, 0x03, 0x33, 0x0b, 0xd7, 0xb2, 0x5e, 0xfc, 0x41,
	0xd8, 0xb3, 0xe5, 0x96, 0x93, 0x16, 0xb2, 0x6f, 0x1b, 0xf0, 0x62, 0x6a, 0x1d, 0x8e, 0x07, 0x8f,
	0x73, 0x93, 0xd8, 0x94, 0x48, 0xa5, 0x2f, 0x19, 0x6a, 0xfa, 0x52, 0x3c, 0x8d, 0x0a, 0xf2, 0x34,
	0x9a, 0x82, 0xfc, 0x5f, 0x34, 0xe0, 0x23, 0xca, 0xd2, 0x9c, 0x87, 0xc9, 0xcf, 0x8a, 0x15, 0x23,
	0x68, 0x68, 0xa5, 0x1e, 0x9b, 0x04, 0xad, 0xd8, 0x9f, 0x9b, 0xf2, 0x33, 0x58, 0xcd, 0x11, 0xfc,
	0xcf, 0x96, 0xdc, 0xa7, 0xb0, 0x70, 0x10, 0xf6, 0x76, 0x5d, 0x8f, 0xec, 0x90, 0x10, 0x8f, 0x2b,
	0x17, 0xa1, 0x78, 0xc4, 0xad, 0x4f, 0xc9, 0xa6, 0x3f, 0x75, 0x19, 0x08, 0x25, 0xf5, 0x28, 0x0f,
	0x2d, 0x4d, 0x51, 0x0a, 0xec, 0xef, 0xc1, 0x95, 0x54, 0xc7, 0xe1, 0xd0, 0x7c, 0x23, 0x35, 0xfd,
	0x16, 0xd4, 0x53, 0xfa, 0xfb, 0xf6, 0x90, 0x1f, 0x4f, 0xb2, 0x08, 0x35, 0x6b, 0x6b, 0xbd, 0x0e,
	0xe6, 0x41, 0xd8, 0x6b, 0x92, 0xe0, 0xcc, 0xed, 0x90, 0x87, 0x74, 0x3d, 0xa7, 0x58, 0x36, 0xa0,
	0x16, 0x10, 0x4c, 0xd1, 0x65, 0xa8, 0xce, 0xdb, 0x71, 0xd9, 0x7a, 0x0a, 0x4b, 0x99, 0x2f, 0xc2,
	0x21, 0x8b, 0x68, 0x1e, 0x85, 0x1e, 0x6f, 0xcf, 0x0a, 0xe8, 0x1b, 0xb4, 0x8f, 0xc2, 0xd0, 0xe3,
	0xe1, 0x6f, 0x5e, 0x42, 0x9a, 0x28, 0x94, 0x9d, 0xd7, 0xe0, 0x6f, 0xeb, 0xbb, 0x06, 0xcc, 0x1d,
	0x84, 0xbd, 0x3d, 0x12, 0xed, 0xba, 0x5d, 0x8a, 0xc5, 0x32, 0x94, 0x99, 0x77, 0x66, 0xc4, 0xab,
	0x24, 0xb3, 0x0d, 0x47, 0xae, 0x47, 0x62, 0x2b, 0xc0, 0x4b, 0xd4, 0x13, 0xa7, 0xbf, 0xd8, 0x66,
	0x97, 0xf5, 0x5b, 0xa3, 0x00, 0x5c, 0x20, 0x16, 0xa1, 0xd8, 0xef, 0x7e, 0x9a, 0xfb, 0x42, 0xf4,
	0x27, 0x95, 0xdc, 0xd0, 0x09, 0xa2, 0x56, 0xe4, 0x47, 0x8e, 0xc7, 0x0f, 0x11, 0x30, 0x96, 0xfd,
	0x98, 0x02, 0xac, 0xdf, 0x32, 0x60, 0x5e, 0x42, 0x26, 0x1c, 0x5e, 0x46, 0x72, 0x02, 0x25, 0x3c,
	0x62, 0x60, 0x11, 0x50, 0x44, 0x09, 0x8f, 0xcb, 0x12, 0x79, 0x95, 0xa6, 0x90, 0xd7, 0x1f, 0x18,
	0xb1, 0xe4, 0x0f, 0x9d, 0x80, 0xe5, 0xaa, 0x4d, 0xc7, 0xa7, 0x1b, 0x50, 0x45, 0xc2, 0xf9, 0x7a,
	0x36, 0x6f, 0x57, 0x68, 0x71, 0x5f, 0x61, 0x60, 0x49, 0x61, 0xe0, 0x78, 0x76, 0xc5, 0x3a, 0x5a,
	0x91, 0x74, 0xf4, 0x01, 0x2c, 0xa6, 0x31, 0xbd, 0xb4, 0x92, 0xfe, 0xaa, 0x81, 0x5d, 0x3d, 0x19,
	0x7a, 0xbe, 0xd3, 0xa5, 0x1d, 0x52, 0xaa, 0x37, 0xa0, 0x3c, 0x74, 0x02, 0xe7, 0x93, 0xfa, 0xa4,
	0x14, 0xd6, 0x96, 0x9d, 0x76, 0x38, 0x9f, 0xb4, 0x59, 0x53, 0xf1, 0xcd, 0x06, 0x3f, 0xdf, 0x1f,
	0xf7, 0xcd, 0x06, 0xfb, 0x66, 0x43, 0x3b, 0xfd, 0xbe, 0x02, 0x0b, 0xe9, 0x01, 0x34, 0xda, 0x21,
	0xf1, 0xb9, 0xa0, 0xf2, 0x19, 0x2b, 0x62, 0xad, 0x98, 0xb7, 0x6b, 0x14, 0x80, 0x27, 0x4f, 0xe7,
	0x4a, 0xcf, 0x1b, 0xb1, 0x58, 0xd0, 0xef, 0x37, 0xd8, 0x29, 0x39, 0x05, 0xe0, 0x59, 0x7b, 0x4a,
	0xc3, 0x0a, 0x89, 0xcc, 0x50, 0xc3, 0x44, 0xe5, 0xb1, 0x48, 0x71, 0xe7, 0x5f, 0xa2, 0x6e, 0x2e,
	0x42, 0x31, 0x8a, 0x3c, 0x2e, 0x67, 0xfa, 0xd3, 0xfa, 0x02, 0x98, 0x94, 0xb7, 0x62, 0xf8, 0x70,
	0x48, 0xc7, 0x9f, 0x82, 0x30, 0xeb, 0xef, 0x0c, 0xb8, 0xaa, 0x88, 0xe9, 0xb2, 0x22, 0x37, 0x3f,
	0x23, 0xa4, 0xcb, 0x24, 0x75, 0x27, 0xfd, 0x51, 0x16, 0x4f, 0x21, 0xe1, 0x8f, 0x0a, 0x09, 0x17,
	0x75, 0x36, 0x7c, 0xd7, 0xed, 0x26, 0x8d, 0x37, 0xd4, 0x09, 0x5c, 0x52, 0x27, 0xb0, 0xf5, 0x0c,
	0xad, 0xe3, 0x8e, 0xff, 0x6c, 0x20, 0x6b, 0xde, 0x25, 0x2c, 0x01, 0x3b, 0x66, 0x0b, 0x49, 0x7c,
	0x98, 0xcf, 0x4a, 0x14, 0xee, 0x91, 0x41, 0x2f, 0x3e, 0xdd, 0xe4, 0x25, 0xeb, 0xeb, 0x70, 0x2d,
	0x3d, 0x2a, 0xa3, 0x52, 0xa7, 0x67, 0x49, 0xd7, 0x85, 0x54, 0xd7, 0x29, 0xbd, 0x29, 0xa6, 0xf5,
	0xc6, 0xda, 0xd6, 0xf7, 0xbf, 0x21, 0x21, 0x54, 0x90, 0x11, 0xd2, 0xce, 0x82, 0x3f, 0x37, 0x70,
	0x29, 0x50, 0x3b, 0xba, 0xa4, 0xc4, 0xdf, 0x4a, 0x4b, 0xfc, 0x05, 0x65, 0x39, 0xd7, 0x71, 0x43,
	0x08, 0xfd, 0xad, 0xb4, 0xd0, 0x2f, 0xf0, 0xa9, 0x98, 0xdd, 0xd6, 0x47, 0x50, 0xc2, 0x5f, 0x1e,
	0x91, 0xe0, 0xfc, 0x9d, 0xf6, 0xcf, 0x89, 0x3c, 0xc5, 0x0c, 0x97, 0xad, 0x16, 0x2c, 0xa7, 0x1b,
	0xf1, 0xe9, 0x21, 0x36, 0xe4, 0x46, 0x7a, 0x43, 0x1e, 0xcf, 0xc7, 0x92, 0x8d, 0xbf, 0x55, 0x0d,
	0x29, 0x66, 0x54, 0xed, 0x5b, 0x8c, 0x99, 0xea, 0x20, 0xe6, 0x67, 0xa0, 0x44, 0x31, 0xe5, 0x56,
	0xce, 0x4a, 0x93, 0xa6, 0x43, 0xc9, 0xc6, 0xf6, 0x92, 0x10, 0x0a, 0x53, 0x58, 0xda, 0x5d, 0x9c,
	0xc1, 0xb8, 0xea, 0x3d, 0x8f, 0xcf, 0x62, 0x7d, 0x1d, 0xd9, 0x9a, 0xea, 0xe7, 0xd2, 0x8a, 0xa1,
	0x4b, 0x6c, 0xf8, 0x06, 0x5c, 0x95, 0x43, 0x0b, 0x4c, 0x6a, 0x6b, 0x71, 0x70, 0x2b, 0x49, 0xa8,
	0x93, 0xa2, 0x17, 0x13, 0x53, 0x3d, 0x5f, 0x86, 0xd2, 0x8e, 0xe7, 0x8f, 0xf5, 0x27, 0xb1, 0x81,
	0xf5, 0x3d, 0x03, 0x4c, 0x75, 0xf8, 0x70, 0x68, 0xbe, 0x05, 0xb5, 0xb6, 0x13, 0x12, 0x29, 0x53,
	0x72, 0x2d, 0x27, 0xa2, 0x71, 0xe4, 0x63, 0xf6, 0x59, 0xdc, 0xdc, 0xfc, 0x1c, 0x00, 0xa3, 0x56,
	0xca, 0x2f, 0x5a, 0xcd, 0x7c, 0x1c, 0x49, 0xdc, 0x91, 0xda, 0x5b, 0xef, 0x8a, 0x7b, 0x51, 0x9b,
	0xdd, 0xbe, 0x3b, 0xc0, 0x23, 0xb0, 0x30, 0x76, 0xa6, 0x77, 0x52, 0xce, 0xf4, 0xce, 0x34, 0x39,
	0x6e, 0xbb, 0x74, 0x87, 0x47, 0xfb, 0x9d, 0xd0, 0xe5, 0x3a, 0xc0, 0x21, 0x21, 0xc1, 0xae, 0xeb,
	0x45, 0x44, 0x6c, 0xf3, 0x24, 0x88, 0xf5, 0xbf, 0xa1, 0x84, 0xc7, 0x40, 0xd7, 0xa1, 0x42, 0xff,
	0x26, 0xdf, 0xb3, 0x12, 0x75, 0x37, 0xe9, 0xaf, 0x47, 0x49, 0x64, 0x2b, 0x2e, 0x5b, 0x3f, 0xc0,
	0x4d, 0x3c, 0xf3, 0xdd, 0x39, 0x1a, 0xaf, 0x41, 0x85, 0xfd, 0xe2, 0x71, 0x23, 0x33, 0x4d, 0x02,
	0xfd, 0xd4, 0xe6, 0x2d, 0xcc, 0x37, 0x60, 0xb6, 0x39, 0x1a, 0x92, 0x80, 0x7f, 0x50, 0xc8, 0xfd,
	0x40, 0x6e, 0x66, 0xde, 0xc3, 0x58, 0x03, 0xc6, 0x2e, 0x57, 0x8a, 0xb9, 0x9f, 0xc4, 0x6d, 0xac,
	0x3f, 0x63, 0xf1, 0x25, 0x16, 0x01, 0x14, 0x7b, 0x83, 0x0d, 0x29, 0x60, 0xc1, 0xf4, 0xfd, 0x7a,
	0x56, 0xa2, 0xb4, 0x56, 0x0a, 0x64, 0xe4, 0x06, 0x9a, 0xa4, 0x33, 0x9e, 0x62, 0xea, 0x8c, 0xe7,
	0x1a, 0x54, 0xfa, 0x61, 0x8f, 0x85, 0x99, 0x30, 0x95, 0xa0, 0x9f, 0xde, 0x1c, 0x4d, 0x0e, 0x45,
	0xfc, 0x25, 0x8b, 0xb3, 0x36, 0x09, 0x9e, 0x9a, 0x46, 0x9b, 0x1d, 0x4c, 0x4f, 0xf9, 0x70, 0xb0,
	0xc7, 0x73, 0x0b, 0x3a, 0xde, 0x4e, 0x12, 0x4b, 0x91, 0x20, 0xd3, 0x90, 0x31, 0x80, 0x2a, 0x15,
	0x01, 0xfd, 0xea, 0x32, 0xb8, 0xb3, 0x40, 0xc9, 0x4e, 0x62, 0x68, 0x44, 0x31, 0x27, 0xc6, 0x67,
	0xbd, 0xc9, 0x23, 0x38, 0x63, 0x2e, 0x2b, 0xe9, 0x23, 0x1f, 0xfc, 0x5c, 0x99, 0x19, 0x90, 0xe8,
	0x80, 0xf4, 0xdb, 0x24, 0x08, 0xb7, 0x31, 0x82, 0xf9, 0xe1, 0x30, 0x7d, 0x8a, 0x18, 0x4f, 0x17,
	0x56, 0xa4, 0x88, 0x41, 0x1a, 0xd9, 0xd7, 0x60, 0x51, 0x85, 0xf1, 0x79, 0x9d, 0x81, 0x9b, 0xab,
	0xf2, 0x5d, 0x09, 0xbe, 0x4d, 0x8e, 0x01, 0xd6, 0x77, 0x0c, 0x58, 0xe0, 0x23, 0x08, 0x5b, 0x2e,
	0x21, 0x6f, 0xa4, 0x90, 0xcf, 0x25, 0xf7, 0x16, 0xd4, 0x03, 0x9f, 0x0a, 0xaa, 0x47, 0xc4, 0x95,
	0xc2, 0x1a, 0x02, 0xf6, 0x48, 0x14, 0x9b, 0xf6, 0xd2, 0x24, 0xd3, 0xfe, 0x57, 0x06, 0x2c, 0xee,
	0x11, 0x8c, 0xe0, 0x63, 0x7a, 0x01, 0x6e, 0xb0, 0xc6, 0x9c, 0x19, 0xb3, 0xf8, 0x75, 0x41, 0xce,
	0xe2, 0x49, 0x4e, 0x22, 0x8a, 0x08, 0x96, 0xf2, 0x61, 0xf8, 0x62, 0x14, 0x4f, 0xd6, 0x04, 0x60,
	0xbe, 0x04, 0x0b, 0x78, 0xcb, 0xb5, 0xe3, 0x7b, 0x2d, 0x16, 0x97, 0x63, 0xb1, 0xcc, 0x79, 0x01,
	0x7d, 0x88, 0xf1, 0x39, 0x41, 0x48, 0x65, 0x12, 0x21, 0xff, 0x65, 0xc0, 0x92, 0x42, 0x08, 0xae,
	0xa6, 0x0d, 0xa8, 0x75, 0x84, 0x69, 0xa3, 0xe6, 0x73, 0xce, 0x8e, 0xcb, 0xe6, 0x27, 0x13, 0x7a,
	0x68, 0xef, 0xb7, 0xb2, 0x01, 0x10, 0x2a, 0x9e, 0xcd, 0x20, 0x70, 0xce, 0xe5, 0x48, 0x3c, 0xed,
	0x1d, 0x69, 0x9d, 0xb3, 0x59, 0xc1, 0xbc, 0x09, 0xb5, 0x81, 0xdf, 0x62, 0x15, 0x8c, 0xd2, 0xea,
	0xc0, 0xdf, 0x4e, 0x57, 0x0d, 0xc2, 0x95, 0xb2, 0x54, 0x35, 0x08, 0x95, 0x45, 0xb0, 0x32, 0xe5,
	0x22, 0x78, 0x8a, 0x6b, 0xb2, 0x40, 0x72, 0xeb, 0x7c, 0xbf, 0xcb, 0xf5, 0x28, 0x24, 0xde, 0x91,
	0xa4, 0x47, 0xb4, 0x38, 0x4e, 0x8f, 0xa6, 0x0a, 0x2b, 0x5d, 0x53, 0x86, 0xdc, 0x0c, 0x82, 0xb1,
	0xa3, 0xde, 0x84, 0x1a, 0x1f, 0x55, 0x28, 0x4d, 0x95, 0x0d, 0x3b, 0xd5, 0x1d, 0xb2, 0xbf, 0x30,
	0x60, 0x99, 0x1d, 0x53, 0xd3, 0xb1, 0x0f, 0x03, 0xff, 0x88, 0xef, 0x4c, 0x72, 0xef, 0x13, 0xe8,
	0xb3, 0x3e, 0xd6, 0x00, 0x8e, 0xdc, 0x20, 0x4c, 0xdf, 0xed, 0x42, 0x88, 0xd8, 0x5c, 0x7a, 0x8e,
	0xa8, 0x65, 0xa1, 0x93, 0x1a, 0x05, 0x88, 0x2c, 0x6f, 0x76, 0x83, 0xb5, 0x2c, 0xdf, 0x60, 0x9d,
	0xe2, 0xd8, 0xec, 0x17, 0xe0, 0x86, 0x86, 0x06, 0xd4, 0xd1, 0x8f, 0x41, 0xf9, 0x89, 0x9b, 0x78,
	0x51, 0x8a, 0x0d, 0x1c, 0x71, 0x7e, 0xdb, 0xac, 0xd1, 0xe5, 0x53, 0xb3, 0x17, 0xb8, 0xf0, 0xb6,
	0xce, 0x87, 0xc7, 0xfe, 0x00, 0x49, 0xc2, 0x1f, 0xdc, 0x99, 0x67, 0x85, 0x69, 0xfc, 0xa5, 0xf7,
	0xd0, 0x2b, 0x15, 0xfa, 0xf0, 0x61, 0x12, 0xf3, 0xbd, 0x58, 0x23, 0xf0, 0xe0, 0xe7, 0xc8, 0x6f,
	0x8e, 0x86, 0x43, 0x6e, 0xba, 0xb4, 0x21, 0xd5, 0x3b, 0x30, 0x7b, 0xe8, 0x39, 0x1d, 0x72, 0xec,
	0x7b, 0x5d, 0x22, 0x12, 0x29, 0x64, 0x10, 0xf5, 0xfa, 0x7b, 0xc4, 0xe7, 0x96, 0x94, 0xfe, 0x9c,
	0x66, 0xdd, 0x38, 0x14, 0xc2, 0x4d, 0xa1, 0xf3, 0x3c, 0xb7, 0x68, 0xfe, 0xda, 0x80, 0xf9, 0x2d,
	0x3f, 0x62, 0xbd, 0xa2, 0xcf, 0x9c, 0xab, 0xec, 0xaf, 0xc0, 0x22, 0x2e, 0xd8, 0x83, 0x23, 0xbf,
	0x75, 0x46, 0x82, 0x50, 0x64, 0xdf, 0x96, 0xed, 0x85, 0x36, 0x43, 0xe7, 0x5d, 0x06, 0x15, 0x2d,
	0x71, 0xa5, 0x39, 0x76, 0xc3, 0xc8, 0x0f, 0xce, 0x39, 0xc1, 0xb4, 0x25, 0x35, 0x36, 0x0f, 0x18,
	0xd4, 0x5c, 0x87, 0x59, 0xda, 0x92, 0x5b, 0x35, 0x91, 0x2c, 0xd0, 0xf6, 0xa3, 0x47, 0x68, 0xd7,
	0xa6, 0x71, 0x54, 0x1e, 0xc2, 0x52, 0x8a, 0x90, 0xe7, 0xe3, 0x4b, 0x1f, 0x96, 0x62, 0x4e, 0x1f,
	0xba, 0x1d, 0x91, 0xf0, 0x9c, 0x38, 0x2d, 0x86, 0x7c, 0x30, 0xc9, 0x54, 0x3c, 0xf2, 0xb9, 0x8f,
	0xc3, 0x0a, 0xd3, 0x98, 0x9e, 0xb7, 0xc1, 0x4c, 0x0f, 0xf7, 0x3c, 0xb7, 0x7a, 0xbe, 0x6b, 0xc0,
	0x55, 0xd6, 0x1b, 0x95, 0x1c, 0x35, 0x2b, 0x63, 0x8d, 0x58, 0x83, 0x19, 0x4f, 0x79, 0x9b, 0x20,
	0xca, 0x53, 0x90, 0x20, 0x9d, 0xbe, 0xb2, 0x2b, 0xeb, 0xec, 0xf4, 0xd5, 0xfa, 0x79, 0x31, 0x83,
	0x12, 0x5c, 0x3e, 0xbc, 0xf9, 0xfb, 0xd3, 0x02, 0x2c, 0xd9, 0xa4, 0xe7, 0x86, 0x11, 0x09, 0x12,
	0xfb, 0x31, 0x86, 0x17, 0x13, 0x37, 0xb3, 0x74, 0x82, 0x53, 0xfb, 0xf5, 0x68, 0x44, 0xdd, 0x30,
	0x6e, 0xdc, 0x65, 0x10, 0xf5, 0x47, 0x76, 0x85, 0xad, 0xe7, 0xe6, 0x3d, 0x01, 0x50, 0x66, 0x3f,
	0xe4, 0xb6, 0x9e, 0x9b, 0xf8, 0xb8, 0x4c, 0x39, 0xe8, 0x86, 0xad, 0xb6, 0x1f, 0xf1, 0x8c, 0x97,
	0xb2, 0x1b, 0x6e, 0xf9, 0x91, 0x76, 0xde, 0x55, 0x2f, 0x3c, 0xef, 0x6a, 0xda, 0x79, 0x77, 0x07,
	0xe6, 0xa4, 0x79, 0x17, 0xe7, 0xc0, 0xc4, 0x13, 0x2f, 0x9c, 0x26, 0xcd, 0xec, 0x9b, 0xd4, 0xf1,
	0x56, 0x99, 0x2c, 0x84, 0x3c, 0xba, 0x88, 0x90, 0x47, 0xcf, 0x23, 0xe4, 0x53, 0x58, 0x66, 0x3b,
	0xc4, 0xcd, 0x0e, 0x26, 0x2c, 0x48, 0x3e, 0x8a, 0x5e, 0xc8, 0xd7, 0xa0, 0xd2, 0x65, 0xc1, 0x0c,
	0xbe, 0x6c, 0x77, 0x31, 0x90, 0x31, 0xc5, 0x74, 0xdd, 0x87, 0xc5, 0x1d, 0xe2, 0xf1, 0xf1, 0x9e,
	0xcf, 0xd0, 0xfc, 0x43, 0x11, 0xea, 0x4d, 0xb7, 0x37, 0x78, 0x82, 0xeb, 0x8a, 0xa2, 0x5e, 0x46,
	0x56, 0xbd, 0x5e, 0x84, 0x79, 0x2c, 0xd2, 0x7e, 0x1e, 0x08, 0x1d, 0xad, 0xdb, 0x69, 0x20, 0x55,
	0xc2, 0x18, 0x20, 0x3c, 0x90, 0x18, 0xc0, 0x4f, 0x36, 0xf6, 0x45, 0xa6, 0x35, 0xcf, 0x93, 0x48,
	0x29, 0x6e, 0x65, 0x9c, 0xe2, 0x56, 0x73, 0x15, 0xb7, 0x36, 0x49, 0x71, 0xeb, 0x17, 0x56, 0x5c,
	0xb8, 0x90, 0xe2, 0xce, 0x66, 0x14, 0x77, 0x09, 0xca, 0xdd, 0x4e, 0x72, 0x2d, 0xad, 0xd4, 0xed,
	0xc8, 0xb2, 0x9d, 0x9f, 0x68, 0xc7, 0xee, 0xc2, 0x1c, 0x8a, 0x35, 0x38, 0x67, 0xa7, 0x8f, 0x0b,
	0x4c, 0x06, 0x1c, 0x86, 0xfc, 0xbb, 0x0d, 0xb3, 0x9e, 0xdf, 0x71, 0xbc, 0x16, 0xf3, 0x6b, 0xae,
	0x60, 0x0b, 0x40, 0x10, 0x32, 0xd9, 0xfa, 0x13, 0xfe, 0x60, 0x80, 0x10, 0x2c, 0x2a, 0xc8, 0xe7,
	0xa1, 0x24, 0xe9, 0xc6, 0xab, 0xd9, 0x1b, 0xea, 0x72, 0xeb, 0x7b, 0x92, 0x3b, 0x8e, 0x9f, 0xd1,
	0x4d, 0xac, 0x98, 0x30, 0xdc, 0x67, 0xca, 0x9b, 0x4e, 0x71, 0x3b, 0xeb, 0x8f, 0x30, 0xa7, 0x41,
	0x74, 0x64, 0xce, 0x42, 0xb5, 0x39, 0x42, 0x5b, 0xb6, 0x38, 0x63, 0x5e, 0x85, 0xf9, 0xfd, 0x41,
	0x44, 0x82, 0x81, 0xe3, 0xa1, 0x36, 0x2e, 0x1a, 0xe6, 0x75, 0x30, 0x25, 0x55, 0xdb, 0x1f, 0x60,
	0x3e, 0xf7, 0x62, 0xc1, 0xbc, 0x01, 0x4b, 0x12, 0xfc, 0x9d, 0x4e, 0x67, 0x34, 0x74, 0x49, 0x77,
	0xb1, 0x68, 0x9a, 0xb0, 0xb0, 0xed, 0x0c, 0xa3, 0xce, 0xb1, 0x73, 0xff, 0xbd, 0xa1, 0x1b, 0x90,
	0xee, 0x62, 0x49, 0x82, 0x89, 0x0e, 0xca, 0xe6, 0x3c, 0xd4, 0x77, 0x3d, 0xdf, 0xef, 0x3e, 0x75,
	0xdc, 0x68, 0xb1, 0x42, 0xc7, 0xe1, 0xb4, 0xd2, 0x8d, 0x24, 0xbe, 0x4b, 0x41, 0xba, 0x8b, 0x55,
	0xeb, 0x57, 0xd8, 0x86, 0x75, 0x77, 0xe4, 0x61, 0xda, 0x27, 0x77, 0xb4, 0x98, 0x8f, 0xaf, 0x78,
	0xfc, 0x89, 0x03, 0x56, 0x48, 0x39, 0x60, 0xeb, 0x00, 0x9b, 0x99, 0x07, 0x88, 0x36, 0x2f, 0xf5,
	0x00, 0xd1, 0x1f, 0x17, 0xd0, 0xef, 0x4c, 0xb0, 0xb9, 0x84, 0x49, 0x5b, 0x85, 0xba, 0x1b, 0xb6,
	0x19, 0x81, 0x3c, 0xa3, 0x32, 0x01, 0x98, 0xf7, 0x60, 0x09, 0x35, 0xa8, 0xd5, 0x71, 0x3c, 0x2f,
	0x6c, 0x0d, 0x03, 0xf7, 0x4c, 0xa4, 0x89, 0xd7, 0xec, 0xab, 0x58, 0xb5, 0x4d, 0x6b, 0x0e, 0x59,
	0x85, 0xb9, 0x01, 0xd7, 0xe4, 0xf6, 0xce, 0x99, 0xe3, 0x7a, 0x4e, 0xdb, 0x13, 0x49, 0xcc, 0x4b,
	0xc9, 0x17, 0x9b, 0xa2, 0x2a, 0x67, 0x43, 0x71, 0x1b, 0x66, 0xd9, 0x1b, 0x50, 0xcc, 0xef, 0x62,
	0xa9, 0xab, 0xc0, 0x40, 0xe8, 0x78, 0xa5, 0xac, 0x59, 0xf5, 0xc2, 0xd6, 0x2c, 0x8c, 0x5d, 0x75,
	0x96, 0x09, 0x80, 0x81, 0xfb, 0xdc, 0x6d, 0x1b, 0xf7, 0x3c, 0x06, 0x8a, 0xe7, 0x31, 0x98, 0xce,
	0xf3, 0xb0, 0x4e, 0x44, 0x3e, 0x26, 0x7f, 0xbf, 0x6a, 0xfa, 0x3b, 0x35, 0x53, 0x0c, 0xf6, 0xc5,
	0x24, 0x0f, 0x53, 0x1e, 0x6e, 0x8a, 0x14, 0x9d, 0x5f, 0x67, 0xf7, 0xc5, 0x1e, 0x12, 0xe7, 0x8c,
	0x4c, 0x7b, 0x6d, 0xa6, 0x30, 0xe6, 0xda, 0x4c, 0x31, 0xf7, 0xa5, 0xa0, 0xc9, 0xba, 0xfe, 0x80,
	0x67, 0x8a, 0xa7, 0x90, 0xba, 0x54, 0x7a, 0xe9, 0x7f, 0x14, 0x31, 0xba, 0xdd, 0x8c, 0xf3, 0x7d,
	0xf3, 0x64, 0x31, 0xdd, 0xf3, 0x55, 0xeb, 0x00, 0x6d, 0xa7, 0x73, 0xd2, 0x0b, 0xfc, 0xd1, 0x40,
	0x5c, 0xbc, 0x97, 0x20, 0xa8, 0xd0, 0x1e, 0x71, 0x82, 0x56, 0x37, 0x70, 0x8e, 0x22, 0x9e, 0x53,
	0x0c, 0x08, 0xda, 0xa1, 0x10, 0xd3, 0x84, 0x12, 0xde, 0xa2, 0xe0, 0x47, 0xe9, 0xf4, 0xb7, 0xf9,
	0x12, 0x5c, 0x41, 0x9a, 0x5a, 0x91, 0xdf, 0xe2, 0xd1, 0x5e, 0xe6, 0x58, 0xcd, 0x21, 0xf8, 0xb1,
	0xcf, 0xd2, 0x58, 0x96, 0xa1, 0xcc, 0x72, 0x99, 0x6b, 0x8c, 0x0f, 0x58, 0xa0, 0x23, 0xf6, 0x47,
	0x5e, 0xe4, 0xf2, 0x3c, 0xe7, 0x3a, 0x06, 0x6a, 0x00, 0x41, 0x8c, 0xf0, 0x5b, 0x50, 0x0f, 0x9c,
	0x41, 0x97, 0xbd, 0x71, 0x05, 0x28, 0x9c, 0x1a, 0x03, 0xec, 0x77, 0xe9, 0x2a, 0xc3, 0x86, 0xee,
	0x3b, 0xc1, 0xc9, 0x68, 0x88, 0xeb, 0xd8, 0x9c, 0x3d, 0x8b, 0xb0, 0x03, 0x04, 0x51, 0x9d, 0x18,
	0x90, 0x67, 0x3c, 0xd9, 0x60, 0x8e, 0x09, 0x37, 0x06, 0x08, 0xd9, 0x73, 0x97, 0x7b, 0x3e, 0x75,
	0x0f, 0x2c, 0xce, 0x7d, 0x8f, 0xfa, 0x84, 0xba, 0x11, 0x0b, 0x71, 0x54, 0x8c, 0x01, 0x12, 0xcd,
	0xb8, 0x32, 0x71, 0x39, 0x5c, 0x05, 0x38, 0x73, 0x9d, 0x16, 0xdf, 0xf5, 0x2c, 0xb2, 0x0c, 0xc1,
	0x33, 0xd7, 0x61, 0xb9, 0x80, 0xe2, 0x02, 0x09, 0x37, 0x8e, 0xd3, 0x4d, 0x84, 0x1f, 0xb0, 0xf0,
	0x3e, 0x7f, 0x4c, 0x2b, 0x7a, 0x2c, 0xee, 0x64, 0x4e, 0x35, 0x75, 0xe3, 0x2b, 0x82, 0x45, 0xe5,
	0x2e, 0xfd, 0x85, 0xd2, 0x90, 0x27, 0x6f, 0x2b, 0xb7, 0x78, 0xe6, 0x67, 0x06, 0xcb, 0x29, 0x6e,
	0xfd, 0x7d, 0x05, 0x6e, 0xa5, 0x1e, 0x03, 0x61, 0xaf, 0x1a, 0xd0, 0x75, 0x42, 0xfb, 0x28, 0xd2,
	0x14, 0xa1, 0x11, 0x02, 0xeb, 0xf9, 0x3d, 0x23, 0x46, 0xdb, 0x50, 0x6f, 0x46, 0x87, 0x0c, 0xc6,
	0x0f, 0x76, 0x26, 0x3f, 0xe2, 0x80, 0x4b, 0x58, 0xf2, 0x9d, 0xf5, 0x83, 0x12, 0xdc, 0xc8, 0x79,
	0xeb, 0xc1, 0x7c, 0x13, 0x56, 0x9c, 0x28, 0x0a, 0xdc, 0xf6, 0x28, 0x22, 0x61, 0x2b, 0x8c, 0xdc,
	0x13, 0x12, 0xb4, 0xf8, 0x8d, 0x26, 0xf6, 0x80, 0xc2, 0xb5, 0xa4, 0xbe, 0x89, 0xd5, 0x4d, 0x71,
	0xbd, 0x49, 0xbc, 0x3c, 0x20, 0x7c, 0xf1, 0x92, 0x0d, 0x02, 0x94, 0xdd, 0x8c, 0x15, 0x75, 0xd7,
	0x2f, 0xfa, 0x6e, 0x5f, 0x4a, 0xad, 0xa9, 0xdb, 0x35, 0x0a, 0xc0, 0x00, 0xbe, 0x38, 0x2e, 0x66,
	0x92, 0x60, 0xc7, 0xc5, 0x54, 0x59, 0x8e, 0x47, 0xfd, 0x76, 0xfc, 0x5e, 0x0c, 0x2d, 0x24, 0x1e,
	0x63, 0x55, 0xf2, 0x18, 0xd9, 0xf1, 0x28, 0xe1, 0x17, 0x07, 0xf1, 0xb7, 0xf9, 0x69, 0xb8, 0x21,
	0x91, 0xea, 0xf6, 0x9d, 0x1e, 0x4b, 0x11, 0x69, 0x3d, 0xe3, 0x7e, 0xed, 0x72, 0x52, 0x8d, 0x97,
	0xce, 0x9b, 0xee, 0xfb, 0xe4, 0x69, 0xfe, 0x67, 0xc7, 0xfc, 0x6e, 0x81, 0xee, 0xb3, 0x07, 0x74,
	0xb5, 0xcf, 0x32, 0xd6, 0xf1, 0x22, 0xb4, 0x15, 0x75, 0x7b, 0x49, 0xe5, 0xea, 0xa6, 0x17, 0x99,
	0x0f, 0xe0, 0xae, 0x5e, 0x18, 0x32, 0x23, 0x99, 0x2d, 0x59, 0xd3, 0x48, 0x45, 0x72, 0x94, 0x5e,
	0x07, 0x09, 0xab, 0x56, 0x92, 0xf2, 0x30, 0x8f, 0x83, 0x9b, 0x49, 0xdd, 0xae, 0x48, 0x7e, 0xf0,
	0xb4, 0x3a, 0xa2, 0x7d, 0x1e, 0x68, 0x13, 0x6a, 0x2e, 0x3f, 0xad, 0xe5, 0x4a, 0x7e, 0xc1, 0x87,
	0x45, 0xe2, 0xcf, 0x5e, 0xdb, 0x4f, 0xce, 0x74, 0xcc, 0x45, 0x98, 0x13, 0xbf, 0xbf, 0x4a, 0x02,
	0x7f, 0x71, 0xc6, 0x9c, 0x63, 0x47, 0x9f, 0xd4, 0x05, 0x59, 0x34, 0x44, 0x89, 0xb6, 0x59, 0x2c,
	0x98, 0x57, 0x60, 0x56, 0x5c, 0x63, 0xa4, 0x80, 0xe2, 0x6b, 0x1b, 0x00, 0xc9, 0x25, 0x73, 0xda,
	0x59, 0x52, 0x7a, 0xe7, 0xed, 0xc5, 0x19, 0xea, 0xd1, 0x26, 0x90, 0x5d, 0xc7, 0xf5, 0x16, 0x8d,
	0x8d, 0xdf, 0xf9, 0x14, 0x5c, 0xdd, 0x8a, 0xf1, 0xe5, 0x69, 0x7b, 0xe6, 0x1e, 0x40, 0xe2, 0xc8,
	0x9b, 0x8a, 0xc3, 0x14, 0xef, 0xf2, 0x1a, 0xeb, 0xe3, 0x7d, 0x7f, 0x6b, 0xc6, 0x7c, 0x04, 0xb3,
	0x92, 0xeb, 0x69, 0x2a, 0xe1, 0xfa, 0xb4, 0x8f, 0xdc, 0xb8, 0x3d, 0xa6, 0x96, 0xf7, 0xf7, 0x55,
	0x30, 0xd9, 0x1e, 0x59, 0x8e, 0xaa, 0x9b, 0x96, 0x6a, 0x59, 0xb2, 0xbb, 0x68, 0x15, 0x57, 0x75,
	0xdb, 0x6b, 0xcd, 0x98, 0x4f, 0x61, 0x21, 0x89, 0x38, 0xe3, 0x7e, 0xf0, 0xb6, 0x9a, 0x00, 0xa6,
	0xc4, 0xa2, 0x1a, 0xd6, 0xf8, 0x06, 0xbc, 0xe3, 0xff, 0x47, 0x97, 0x87, 0x74, 0x5c, 0xc1, 0xbc,
	0xab, 0x3a, 0xa1, 0x99, 0xe0, 0x4e, 0xe3, 0xc5, 0x49, 0x4d, 0x78, 0xf7, 0x4f, 0x60, 0x4e, 0x8e,
	0xb9, 0xa9, 0x5d, 0x6b, 0xc2, 0x7f, 0x8d, 0x3b, 0xe3, 0x9a, 0xf0, 0x6e, 0xbf, 0x0c, 0xf3, 0xa9,
	0x18, 0xad, 0xa9, 0x9c, 0xf7, 0xa4, 0x82, 0x94, 0x8d, 0xbb, 0x63, 0x2a, 0xe3, 0x2e, 0xff, 0xbf,
	0x88, 0xe7, 0x49, 0x61, 0x5f, 0xd3, 0xca, 0xc1, 0x45, 0x0a, 0x53, 0x37, 0x5e, 0x9a, 0xd8, 0x26,
	0xe6, 0x45, 0xfa, 0x94, 0x07, 0xb7, 0x7b, 0x1a, 0xb5, 0x93, 0xe2, 0xfa, 0x1a, 0xb5, 0xcb, 0xb0,
	0x38, 0x46, 0x5c, 0x3a, 0x8c, 0xd0, 0x23, 0x9e, 0x3e, 0x71, 0xd1, 0x23, 0x9e, 0x39, 0xd1, 0xb0,
	0x66, 0xcc, 0x77, 0xe1, 0x8a, 0x72, 0x56, 0x64, 0xde, 0xc9, 0xc5, 0x4b, 0xe8, 0xf4, 0x05, 0x30,
	0xff, 0x9a, 0x72, 0x06, 0x15, 0x6f, 0x66, 0x6e, 0xe7, 0xf0, 0x44, 0x34, 0xb8, 0x48, 0xe7, 0x23,
	0x58, 0xc9, 0x5b, 0xb5, 0xcd, 0x57, 0x33, 0x9f, 0xe7, 0xf9, 0x0d, 0x8d, 0x8f, 0x5d, 0xb4, 0x29,
	0x1f, 0xb6, 0x0d, 0x57, 0xe4, 0xb7, 0x95, 0x9a, 0x24, 0x32, 0x5f, 0x54, 0xcd, 0xae, 0xee, 0x59,
	0xa4, 0xc6, 0xcb, 0x17, 0x68, 0xc5, 0xc7, 0xe8, 0x80, 0x99, 0x7d, 0xbf, 0xc9, 0x7c, 0x41, 0xd7,
	0x81, 0xf2, 0xe4, 0x54, 0xe3, 0x23, 0x93, 0x1b, 0xf1, 0x41, 0x8e, 0x60, 0x49, 0xf3, 0x14, 0x96,
	0x96, 0x98, 0xcc, 0xe3, 0x60, 0x5a, 0x62, 0x74, 0x6f, 0x6a, 0x59, 0x33, 0xa6, 0x23, 0x22, 0x8b,
	0x69, 0x62, 0x55, 0x4b, 0xa1, 0x79, 0x50, 0x4d, 0x35, 0x42, 0xfa, 0xa7, 0xcf, 0xd0, 0x78, 0x5e,
	0xcd, 0xbc, 0x13, 0xa7, 0xce, 0x10, 0xdd, 0x9b, 0x7f, 0x8d, 0xb1, 0xaf, 0xc5, 0x59, 0x33, 0xe6,
	0x7b, 0x70, 0x33, 0xf7, 0x19, 0x42, 0xf3, 0xb5, 0x31, 0xd8, 0x29, 0x8f, 0x20, 0x36, 0x3e, 0x7e,
	0xe1, 0xb6, 0x9c, 0x24, 0x1f, 0xae, 0xeb, 0x1f, 0x78, 0x34, 0x5f, 0xce, 0xd0, 0xa5, 0x7f, 0x3d,
	0xb2, 0xf1, 0xda, 0xc5, 0x1a, 0xf2, 0x01, 0xbf, 0x41, 0x1d, 0x8f, 0x94, 0x5e, 0xc7, 0x84, 0x7e,
	0x7c, 0xa2, 0xe6, 0xca, 0xcf, 0x93, 0x36, 0x5e, 0x9f, 0xa6, 0x39, 0x1f, 0xfd, 0x31, 0xcc, 0xa7,
	0x12, 0x02, 0xcc, 0x75, 0xad, 0x01, 0x88, 0xd3, 0x1e, 0x54, 0x93, 0xaf, 0xc9, 0x26, 0xb0, 0x66,
	0xcc, 0x87, 0xe8, 0x00, 0x88, 0xd4, 0x0d, 0x8d, 0x25, 0x96, 0xb2, 0x3a, 0x1a, 0x6b, 0x63, 0x6a,
	0xc3, 0xa1, 0x35, 0x63, 0x7e, 0x1e, 0xea, 0x62, 0x67, 0x1f, 0x99, 0xd7, 0xd4, 0xf5, 0x11, 0xf3,
	0x71, 0x1a, 0x99, 0xf0, 0x0e, 0x4f, 0xc2, 0xb1, 0x66, 0xcc, 0xcf, 0x42, 0x95, 0xf7, 0x79, 0x89,
	0x8f, 0x09, 0x26, 0x4c, 0x64, 0x52, 0x57, 0x32, 0xab, 0xb4, 0x2e, 0x73, 0x47, 0xb5, 0x09, 0x79,
	0x49, 0x33, 0xd6, 0x8c, 0xb9, 0x8f, 0x06, 0x1b, 0x33, 0xad, 0xba, 0x7d, 0x77, 0xe0, 0x86, 0x11,
	0xbe, 0x51, 0x11, 0x5e, 0x02, 0xe3, 0x2f, 0xc2, 0x5c, 0x93, 0x48, 0x9b, 0xbd, 0xe9, 0x7b, 0xd8,
	0x05, 0x93, 0xf7, 0xb0, 0x43, 0xc2, 0x4e, 0xe0, 0x0e, 0x31, 0xf7, 0x6b, 0xfa, 0x7e, 0x1e, 0x41,
	0x63, 0xcc, 0xcb, 0xe0, 0xd3, 0xf7, 0xf7, 0x10, 0x16, 0x94, 0x7c, 0xb4, 0xdb, 0x99, 0x3e, 0xd2,
	0x0d, 0xc6, 0xf5, 0xf6, 0x05, 0x98, 0xc5, 0xc6, 0xfe, 0x20, 0x72, 0x3a, 0x97, 0x51, 0x8d, 0x2f,
	0xc1, 0x7c, 0x3a, 0xb7, 0x6f, 0x3d, 0xdb, 0x85, 0x5c, 0x3f, 0xae, 0xaf, 0x3d, 0xa8, 0x27, 0xa9,
	0x8c, 0x0d, 0x9d, 0x72, 0xb1, 0x3a, 0xd5, 0x70, 0xa6, 0x93, 0x20, 0xd1, 0x7f, 0x5b, 0x50, 0x52,
	0x3e, 0x6f, 0xeb, 0x7a, 0x93, 0x1a, 0x4c, 0xec, 0xb2, 0x85, 0xea, 0xa0, 0x3e, 0x37, 0xfd, 0x82,
	0x86, 0xf5, 0x6a, 0x23, 0xd5, 0x53, 0xd6, 0xbd, 0xe4, 0xcc, 0x06, 0xd0, 0x3c, 0xb3, 0xfd, 0x82,
	0x8e, 0x9b, 0x97, 0x1b, 0xe0, 0x3e, 0x00, 0x1a, 0x10, 0x24, 0x29, 0x4f, 0xd2, 0xeb, 0x1a, 0x36,
	0x48, 0x4f, 0x8f, 0xa3, 0x9b, 0xb9, 0x90, 0x4e, 0xf0, 0xd5, 0xb8, 0x53, 0xe9, 0xec, 0xe3, 0xc6,
	0x9d, 0xf1, 0x0d, 0xd0, 0xbc, 0xfd, 0x5f, 0x30, 0xf7, 0x58, 0xbd, 0x94, 0x1a, 0xad, 0x76, 0x9d,
	0x49, 0xc0, 0x56, 0xbb, 0xce, 0x66, 0x56, 0xb3, 0x4d, 0x82, 0x9c, 0x0d, 0x6e, 0x66, 0xbf, 0x51,
	0x92, 0xdc, 0x55, 0xf3, 0xae, 0x49, 0x3e, 0x67, 0xdd, 0xca, 0xf9, 0xf3, 0x9a, 0x6e, 0x95, 0xdb,
	0x11, 0x9a, 0x6e, 0xd5, 0x04, 0x7c, 0x6b, 0xc6, 0x7c, 0x07, 0x20, 0xb9, 0x26, 0xa2, 0xce, 0x26,
	0xf5, 0xaa, 0x4f, 0xe3, 0xf6, 0xd8, 0x7a, 0xec, 0xf0, 0x31, 0x5c, 0xe5, 0x9c, 0x95, 0xfa, 0x5d,
	0xcb, 0x7c, 0x27, 0xdf, 0x9b, 0x6a, 0xac, 0x8f, 0xab, 0xc6, 0x5e, 0xdf, 0x85, 0x6b, 0x99, 0x5e,
	0x51, 0x64, 0xab, 0xda, 0x4f, 0x85, 0xbc, 0xd6, 0xc6, 0xd4, 0x72, 0x6c, 0x6f, 0x24, 0x7a, 0x90,
	0x74, 0xbd, 0xeb, 0x76, 0x55, 0x8b, 0x20, 0x5f, 0x88, 0x6b, 0xdc, 0xca, 0xad, 0x13, 0xb2, 0x92,
	0xaf, 0xe5, 0x69, 0x64, 0xa5, 0xdc, 0xf3, 0xd3, 0xc8, 0x4a, 0xbd, 0xd7, 0x67, 0xcd, 0x98, 0x9b,
	0x50, 0x15, 0x57, 0x7c, 0x57, 0x32, 0xf3, 0x89, 0xd7, 0x34, 0x1a, 0x9a, 0x29, 0xc5, 0xeb, 0xac,
	0x19, 0xf3, 0x14, 0x1f, 0x19, 0xd6, 0x5e, 0xbd, 0x7c, 0x45, 0x67, 0xb3, 0x74, 0x2d, 0x55, 0x5f,
	0x6b, 0xdc, 0x85, 0x4e, 0x6b, 0xc6, 0xfc, 0xbe, 0x01, 0x77, 0x27, 0xdf, 0x73, 0xdd, 0xc8, 0x59,
	0xdc, 0xc7, 0x7c, 0xd3, 0x78, 0x23, 0x77, 0xa9, 0x1f, 0xf3, 0x95, 0x35, 0x63, 0x0e, 0xd0, 0xdd,
	0xd4, 0x5d, 0x3c, 0x7e, 0xf9, 0x02, 0x3c, 0xa0, 0x0d, 0x1b, 0xaf, 0x5e, 0x88, 0x05, 0xb4, 0x29,
	0x1a, 0x9b, 0x25, 0xdd, 0xdb, 0x55, 0x2f, 0xe6, 0xc9, 0x50, 0x6e, 0x35, 0x41, 0x9e, 0xbb, 0x6c,
	0x41, 0x15, 0xb7, 0xea, 0x57, 0xb5, 0x6b, 0x33, 0xaf, 0xd5, 0xae, 0x85, 0x5b, 0xbe, 0x4f, 0xfb,
	0x69, 0x62, 0x4e, 0x97, 0xf4, 0x54, 0xc0, 0xba, 0x0e, 0xb9, 0xa4, 0x5e, 0xb5, 0x84, 0xd9, 0xa7,
	0x0e, 0xac, 0x19, 0x33, 0x40, 0x65, 0xd3, 0x3d, 0x3b, 0xa1, 0x2a, 0x5b, 0xfe, 0x43, 0x18, 0x8d,
	0x8f, 0x5e, 0xb0, 0x65, 0xbc, 0xbb, 0x5f, 0x50, 0x9e, 0xff, 0xb8, 0x9d, 0xe3, 0x21, 0x88, 0x06,
	0x8d, 0xbb, 0x3a, 0x17, 0x21, 0xd5, 0xc4, 0x9a, 0x31, 0x0f, 0xd0, 0xbb, 0x8e, 0x13, 0x74, 0x57,
	0xc7, 0xa8, 0x6b, 0xa8, 0x5d, 0xd6, 0xa4, 0x7a, 0x16, 0x5d, 0xbb, 0xdf, 0x75, 0x23, 0xe5, 0xd1,
	0xa2, 0x2c, 0xaa, 0xe9, 0x06, 0x5a, 0x54, 0xd3, 0x4d, 0xac, 0x19, 0xf3, 0x10, 0x9d, 0xd1, 0xe4,
	0xf9, 0xa6, 0x35, 0x9d, 0xd7, 0x10, 0x57, 0x37, 0x6e, 0x6b, 0xfa, 0x94, 0x1b, 0xe0, 0x5a, 0x4e,
	0x3d, 0x25, 0xfe, 0xe4, 0xd7, 0xad, 0x4c, 0x77, 0xc9, 0x63, 0x67, 0x8d, 0x9b, 0x3a, 0x5e, 0x62,
	0x95, 0x35, 0x63, 0x7e, 0x13, 0x6e, 0x8d, 0x7b, 0x1b, 0xee, 0x63, 0x99, 0x8e, 0xc7, 0xb4, 0x6e,
	0xdc, 0xcb, 0x71, 0x1d, 0x72, 0xda, 0x33, 0x11, 0xa6, 0xde, 0x1d, 0xcc, 0x0c, 0x27, 0xd5, 0x6a,
	0x45, 0x28, 0xd5, 0xe3, 0x94, 0xb9, 0xa2, 0xfe, 0xa7, 0xa1, 0x2c, 0xa7, 0xe5, 0x6a, 0x2d, 0xa7,
	0xe5, 0x06, 0x0c, 0x47, 0xf9, 0x71, 0xc5, 0x2c, 0x8e, 0x52, 0xad, 0x16, 0x47, 0xa9, 0x1e, 0xdd,
	0x65, 0x90, 0x1e, 0x9e, 0xcc, 0x4a, 0x2e, 0xa9, 0x6c, 0xac, 0xe9, 0xf8, 0x19, 0x57, 0xc7, 0x33,
	0x20, 0x3e, 0xc1, 0xd6, 0xce, 0x00, 0x51, 0x9b, 0x37, 0x03, 0x44, 0x3d, 0xd3, 0xd2, 0xd4, 0xd1,
	0x71, 0x96, 0x77, 0x72, 0xb5, 0x96, 0x77, 0x72, 0x03, 0x6b, 0xc6, 0xdc, 0x81, 0x7a, 0x72, 0x86,
	0xdc, 0xd0, 0x5a, 0x42, 0x66, 0x52, 0x75, 0x4a, 0x1a, 0x1b, 0x90, 0x26, 0xcc, 0xa7, 0x0f, 0xee,
	0xb2, 0x96, 0x30, 0x55, 0xaf, 0xb5, 0x84, 0xa9, 0x16, 0xd6, 0x8c, 0xb9, 0x05, 0x15, 0xf6, 0x54,
	0x74, 0x56, 0x06, 0xd2, 0x9b, 0xd4, 0x59, 0xc4, 0xe2, 0xd7, 0xa5, 0x71, 0x67, 0x07, 0xc9, 0x9b,
	0xcd, 0xaa, 0xa9, 0xc8, 0xbc, 0x19, 0xad, 0xca, 0x53, 0x79, 0xee, 0x19, 0xe3, 0x48, 0xf3, 0xa9,
	0xe7, 0x8e, 0xd5, 0x18, 0x92, 0xee, 0x45, 0x65, 0x95, 0xd8, 0xec, 0x7b, 0xc9, 0xd8, 0x31, 0x9d,
	0x18, 0xf2, 0x3b, 0xc5, 0x6a, 0xf8, 0x4b, 0xf3, 0x14, 0xb2, 0x2a, 0xe0, 0xcc, 0x33, 0xc7, 0x71,
	0xc7, 0xf2, 0x73, 0xc0, 0x6a, 0xc7, 0x9a, 0x17, 0x87, 0xd5, 0x8e, 0x33, 0xaf, 0x09, 0x5b, 0x33,
	0x5b, 0x73, 0x3f, 0xfa, 0xc9, 0xba, 0xf1, 0xf7, 0x3f, 0x59, 0x37, 0x7e, 0xfc, 0x93, 0x75, 0xa3,
	0x5d, 0xc1, 0x8b, 0x1e, 0x9f, 0xfa, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4e, 0xf0, 0xce, 0xde,
	0x7a, 0x6d, 0x00, 0x00,
}
