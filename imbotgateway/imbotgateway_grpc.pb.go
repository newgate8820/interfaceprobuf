// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: imbotgateway.proto

package imbotgateway

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BotgatewayServiceClient is the client API for BotgatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BotgatewayServiceClient interface {
	//infoserver.pb.go
	//注册用户的接口(yuankan和lxl)
	AuthSignUp(ctx context.Context, in *SignUpReq, opts ...grpc.CallOption) (*AuthSignUpResult, error)
	//获取用户完整信息，包含和自己的关联信息
	GetFullUser(ctx context.Context, in *GetFullUserReq, opts ...grpc.CallOption) (*GetFullUserResult, error)
	//userserver.pb.go
	//账号(标记删除)
	DeleteUserInfoById(ctx context.Context, in *DeleteAccountByIdReq, opts ...grpc.CallOption) (*DelAccountResult, error)
	//更新用户的username
	UpdateUserName(ctx context.Context, in *UpdateuserNameReq, opts ...grpc.CallOption) (*UpdateuserNameResult, error)
	//注册指定用户的接口()
	RegisterUserInfo(ctx context.Context, in *RegisterUserInfoReq, opts ...grpc.CallOption) (*RegisterUserInfoResult, error)
	//更新机器人头像
	UpdateBotPic(ctx context.Context, in *UpdateBotPicRequest, opts ...grpc.CallOption) (*UpdateBotPicResult, error)
	//更新机器人相关信息
	UpdateBotInfo(ctx context.Context, in *BotUpdateInfo, opts ...grpc.CallOption) (*BotUpdateInfoResult, error)
	//补充 更新机器人相关信息
	UpdateBotInfoSupp(ctx context.Context, in *UpdateBotInfoSuppReq, opts ...grpc.CallOption) (*UpdateBotInfoSuppResult, error)
	//通过用户电话号码获取用户基本信息
	GetUserInfoByPhone(ctx context.Context, in *GetUserByphone, opts ...grpc.CallOption) (*GetUserInfoResult, error)
	//更新用户名称和about
	UpdateUserProfile(ctx context.Context, in *UpdateUserProfileReq, opts ...grpc.CallOption) (*UpdateUserProfileResult, error)
	//获取用户信息
	GetUserInfoById(ctx context.Context, in *GetUserInfoByIdReq, opts ...grpc.CallOption) (*GetUserInfoResult, error)
	//通过username获取用户基本信息
	GetUserInfoByUsername(ctx context.Context, in *GetUserByUsername, opts ...grpc.CallOption) (*GetUserInfoResult, error)
	//获取一个sticker下面的所有贴图信息
	GetStickerSetPackDcInfos(ctx context.Context, in *GetStickerSetPackDcInfosReq, opts ...grpc.CallOption) (*GetStickerSetPackDcInfosResult, error)
	//存储sticker集合的概要
	StoreStickerSet(ctx context.Context, in *StoreShopStickerSetReq, opts ...grpc.CallOption) (*StoreShopStickerSetResult, error)
	//存储stickerSet下面的单个贴图
	StoreStickerPackDc(ctx context.Context, in *StoreStickerPackDcReq, opts ...grpc.CallOption) (*StoreStickerPackDcResult, error)
	//用户安装sticker的操作
	StoreUserStickerSet(ctx context.Context, in *StoreUserStickerSetReq, opts ...grpc.CallOption) (*StoreUserStickerSetResult, error)
	//删除指定的sticker集合
	DeleteShopStickerSet(ctx context.Context, in *DeleteStickerSetReq, opts ...grpc.CallOption) (*DeleteStickerSetResult, error)
	//获取指定的sticker集合
	GetStickerSetInfo(ctx context.Context, in *GetStickerSetInfoReq, opts ...grpc.CallOption) (*StickerSetInfo, error)
	//删除指定sticker包的单个sticker
	DeleteStickerPackDocument(ctx context.Context, in *DeleteStickerPackDocumentReq, opts ...grpc.CallOption) (*DeleteStickerPackDocumentResult, error)
	//查询作者所有的sticker
	GetAuthorAllStickerSet(ctx context.Context, in *GetAuthorAllStickerSetReq, opts ...grpc.CallOption) (*GetAuthorAllStickerSetResult, error)
	//存储sickerSet 的documents
	StoreStickerSetDocument(ctx context.Context, in *StoreShopStickerSetDocumentsReq, opts ...grpc.CallOption) (*StoreShopStickerSetDocumentsResult, error)
	//chatservice.pb.go
	//获取用户信息、群、超级群信息
	GetUsersChats(ctx context.Context, in *GetUsersChatsReq, opts ...grpc.CallOption) (*GetUsersChatsResult, error)
	//通过群Id 用户Id 获取群基本信息
	GetChatInfo(ctx context.Context, in *GetChatInfoReq, opts ...grpc.CallOption) (*GetChatInfoResp, error)
	//botserver.pb.go
	// 離開群組
	LeaveChat(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error)
	// 獲取群訊息
	GetChat(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error)
	// 獲取群成員數目
	GetChatMembersCount(ctx context.Context, in *ReqGetChatMembersCount, opts ...grpc.CallOption) (*ReplyGetChatMembersCount, error)
	// 獲取群管理員
	GetChatAdministrators(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error)
	// 修改群名字
	SetChatTitle(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error)
	// 修改群簡介
	SetChatDescription(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error)
	// 置顶群消息
	UpdatePinnedChannelMessage(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error)
	// 發送Action
	SendChatAction(ctx context.Context, in *ReqSendChatAction, opts ...grpc.CallOption) (*ReplyData, error)
	// 發送名片
	SendContact(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error)
	// 刪除消息
	DeleteMessage(ctx context.Context, in *ReqDeleteMessage, opts ...grpc.CallOption) (*ReplyData, error)
	// GetGroups 获取群组消息
	GetGroups(ctx context.Context, in *ReqGetGroups, opts ...grpc.CallOption) (*ReplyGetGroups, error)
	// GetGroups 获取使用者是管理員的群組消息
	GetAdminGroups(ctx context.Context, in *ReqGetAdminGroups, opts ...grpc.CallOption) (*ReplyGetGroups, error)
	// 新增手動禁言名單
	SetManualBlockList(ctx context.Context, in *ReqSetManualBlockList, opts ...grpc.CallOption) (*ManualBlockReplyData, error)
	// 刪除手動禁言名單
	DelManualBlockList(ctx context.Context, in *ReqDelManualBlockList, opts ...grpc.CallOption) (*ManualBlockReplyData, error)
	// 讓使用者離開群(使用者後續還可以自動加入)
	LeaveGroup(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyChannelData, error)
	//channelservice.pb.go
	//获取channel信息 不带user信息
	GetChannelInfo(ctx context.Context, in *GetChannelInfoReq, opts ...grpc.CallOption) (*GetChannelInfoResp, error)
	//storage_proto.pb.go
	// 网关获取文件描述信息
	GatewayGetFileDesc(ctx context.Context, in *MsgGetFileDescReq, opts ...grpc.CallOption) (*MsgGetFileDescResp, error)
	// QueryObjInfo 查询对象信息
	QueryObjInfo(ctx context.Context, in *MsgQueryObjInfoReq, opts ...grpc.CallOption) (*MsgQueryObjInfoResp, error)
	// DownloadFile 下载文件或文件片
	DownloadFile(ctx context.Context, in *MsgDownloadFileReq, opts ...grpc.CallOption) (*MsgDownloadFileResp, error)
	// UploadFile 上传文件或文件片
	UploadFile(ctx context.Context, in *MsgUploadFileReq, opts ...grpc.CallOption) (*MsgUploadFileResp, error)
	// 网关上传文件
	GatewayUploadFile(ctx context.Context, in *MsgFilePartsReq, opts ...grpc.CallOption) (*MsgFilePartsResp, error)
	// 网关上传文件描述信息
	GatewayUploadFileDesc(ctx context.Context, in *MsgFileDescReq, opts ...grpc.CallOption) (*MsgFileDescResp, error)
	// 网关取上传文件的Fid, 与DC约定：1.收到此消息认为文件片已经传完；2.keyid+fileid与存储fid映射关系丢弃
	GatewayGetUploadFileFid(ctx context.Context, in *MsgGetFidReq, opts ...grpc.CallOption) (*MsgGetFidResp, error)
	// ServiceLimit 服务上传下载限制
	ServiceLimit(ctx context.Context, in *MsgServiceLimitReq, opts ...grpc.CallOption) (*MsgServiceLimitResp, error)
	//pbmessageserver.pb.go
	// 机器人调用接口
	BotCall(ctx context.Context, in *ReqBotCall, opts ...grpc.CallOption) (*ReplyBotCall, error)
	// 根据 消息id和用户id 获取单聊消息\普通群消息
	GetMessageByUserIdMsgId(ctx context.Context, in *ReqGetMessageByUserIdMsgId, opts ...grpc.CallOption) (*ReplyGetMessageByUserIdMsgId, error)
	// 根据 超级群ID和消息ID查询超级群信息
	GetChannelMessageByChannelIdMsgId(ctx context.Context, in *ReqGetChannelMessageByChannelIdMsgId, opts ...grpc.CallOption) (*ReplyGetChannelMessageByChannelIdMsgId, error)
	// 根据 uuid和用户id 获取单聊消息\普通群消息
	GetMessageByUserIdUuid(ctx context.Context, in *ReqGetMessageByUserIdUuid, opts ...grpc.CallOption) (*ReplyGetMessageByUserIdUuid, error)
	// 机器人发送webpage
	BotCallMessageMedia(ctx context.Context, in *ReqBotCallMessageMedia, opts ...grpc.CallOption) (*ReplyBotCall, error)
	// 发送给对方所有端
	SendUserMsg(ctx context.Context, in *ReqSendUserMsg, opts ...grpc.CallOption) (*ReplyBool, error)
	// 机器人内联调用
	BotInlineCall(ctx context.Context, in *ReqBotInlineCall, opts ...grpc.CallOption) (*ReplyBotInlineCall, error)
	// 根据超级群用户离线时间倒序获取超级群用户
	GetChannelInactiveUsers(ctx context.Context, in *GetChannelInactiveUsersReq, opts ...grpc.CallOption) (*GetChannelInactiveUsersResult, error)
	//    普通群删除成员
	DeleteChatUser(ctx context.Context, in *ReqDeleteChatUser, opts ...grpc.CallOption) (*ReplyDeleteChatUser, error)
	//获取给定超级群信息
	Getchannels(ctx context.Context, in *ReqGetChannels, opts ...grpc.CallOption) (*ReplyGetChannels, error)
	//踢人并进组其再次加入超级群或者频道，或者解除该禁止
	EditBanChannelUser(ctx context.Context, in *ReqBanChannelUser, opts ...grpc.CallOption) (*ReplyBanChannelUser, error)
	// 设置游戏分数
	SetGameScore(ctx context.Context, in *ReqSetGameScore, opts ...grpc.CallOption) (*ReplySetGameScore, error)
	//    获取对话框
	GetDialog(ctx context.Context, in *RequestDialog, opts ...grpc.CallOption) (*ReplyDialog, error)
	//变更群主
	ChangeGroupAndChannelCrator(ctx context.Context, in *ReqChangeGroupAndChannelCrator, opts ...grpc.CallOption) (*ReplyChangeGroupAndChannelCrator, error)
	//主动加入超级群或者频道
	JoinChannel(ctx context.Context, in *ReqJoinChannel, opts ...grpc.CallOption) (*ReplyJoinChannel, error)
	//获取超级群用户信息
	GetParticipants(ctx context.Context, in *ReqParticipants, opts ...grpc.CallOption) (*ReplyParticipants, error)
	//    普通群升级超级群
	MigrateChat(ctx context.Context, in *ReqMigrateChat, opts ...grpc.CallOption) (*ReplyMigrateChat, error)
	//    创建普通群
	CreateChat(ctx context.Context, in *ReqCreateChat, opts ...grpc.CallOption) (*ReplyCreateChat, error)
	// 获取群的完整信息
	GetFullChat(ctx context.Context, in *ReqGetFullChat, opts ...grpc.CallOption) (*ReplyGetFullChat, error)
	//离开超级群或者频道
	LeaveChannel(ctx context.Context, in *ReqLeaveChannel, opts ...grpc.CallOption) (*ReplyLeaveChannel, error)
	//    发送媒体消息
	SendMedia(ctx context.Context, in *ReqSendMedia, opts ...grpc.CallOption) (*ReplyResult, error)
	//    编辑群名称
	EditChatTitle(ctx context.Context, in *ReqEditChatTitle, opts ...grpc.CallOption) (*ReplyEditChatTitle, error)
	//avthumb.pb.go
	// Resize 重设图片大小
	Resize(ctx context.Context, in *ResizeRequest, opts ...grpc.CallOption) (*ResizeReply, error)
	// Constraint 约束图片尺寸
	Constraint(ctx context.Context, in *ConstraintRequest, opts ...grpc.CallOption) (*ConstraintReply, error)
	// CompressImage 压缩图片质量
	CompressImage(ctx context.Context, in *CompressImageRequest, opts ...grpc.CallOption) (*CompressImageReply, error)
	// GetVideoPreview 获取视频预览
	GetVideoPreview(ctx context.Context, in *VideoPreviewRequest, opts ...grpc.CallOption) (*VideoPreviewReply, error)
	// GetAudioPreview 获取音频预览
	GetAudioPreview(ctx context.Context, in *AudioPreviewRequest, opts ...grpc.CallOption) (*AudioPreviewReply, error)
}

type botgatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBotgatewayServiceClient(cc grpc.ClientConnInterface) BotgatewayServiceClient {
	return &botgatewayServiceClient{cc}
}

func (c *botgatewayServiceClient) AuthSignUp(ctx context.Context, in *SignUpReq, opts ...grpc.CallOption) (*AuthSignUpResult, error) {
	out := new(AuthSignUpResult)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/AuthSignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetFullUser(ctx context.Context, in *GetFullUserReq, opts ...grpc.CallOption) (*GetFullUserResult, error) {
	out := new(GetFullUserResult)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetFullUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) DeleteUserInfoById(ctx context.Context, in *DeleteAccountByIdReq, opts ...grpc.CallOption) (*DelAccountResult, error) {
	out := new(DelAccountResult)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/DeleteUserInfoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) UpdateUserName(ctx context.Context, in *UpdateuserNameReq, opts ...grpc.CallOption) (*UpdateuserNameResult, error) {
	out := new(UpdateuserNameResult)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/UpdateUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) RegisterUserInfo(ctx context.Context, in *RegisterUserInfoReq, opts ...grpc.CallOption) (*RegisterUserInfoResult, error) {
	out := new(RegisterUserInfoResult)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/RegisterUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) UpdateBotPic(ctx context.Context, in *UpdateBotPicRequest, opts ...grpc.CallOption) (*UpdateBotPicResult, error) {
	out := new(UpdateBotPicResult)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/UpdateBotPic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) UpdateBotInfo(ctx context.Context, in *BotUpdateInfo, opts ...grpc.CallOption) (*BotUpdateInfoResult, error) {
	out := new(BotUpdateInfoResult)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/UpdateBotInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) UpdateBotInfoSupp(ctx context.Context, in *UpdateBotInfoSuppReq, opts ...grpc.CallOption) (*UpdateBotInfoSuppResult, error) {
	out := new(UpdateBotInfoSuppResult)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/UpdateBotInfoSupp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetUserInfoByPhone(ctx context.Context, in *GetUserByphone, opts ...grpc.CallOption) (*GetUserInfoResult, error) {
	out := new(GetUserInfoResult)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetUserInfoByPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) UpdateUserProfile(ctx context.Context, in *UpdateUserProfileReq, opts ...grpc.CallOption) (*UpdateUserProfileResult, error) {
	out := new(UpdateUserProfileResult)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/UpdateUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetUserInfoById(ctx context.Context, in *GetUserInfoByIdReq, opts ...grpc.CallOption) (*GetUserInfoResult, error) {
	out := new(GetUserInfoResult)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetUserInfoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetUserInfoByUsername(ctx context.Context, in *GetUserByUsername, opts ...grpc.CallOption) (*GetUserInfoResult, error) {
	out := new(GetUserInfoResult)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetUserInfoByUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetStickerSetPackDcInfos(ctx context.Context, in *GetStickerSetPackDcInfosReq, opts ...grpc.CallOption) (*GetStickerSetPackDcInfosResult, error) {
	out := new(GetStickerSetPackDcInfosResult)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetStickerSetPackDcInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) StoreStickerSet(ctx context.Context, in *StoreShopStickerSetReq, opts ...grpc.CallOption) (*StoreShopStickerSetResult, error) {
	out := new(StoreShopStickerSetResult)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/StoreStickerSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) StoreStickerPackDc(ctx context.Context, in *StoreStickerPackDcReq, opts ...grpc.CallOption) (*StoreStickerPackDcResult, error) {
	out := new(StoreStickerPackDcResult)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/StoreStickerPackDc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) StoreUserStickerSet(ctx context.Context, in *StoreUserStickerSetReq, opts ...grpc.CallOption) (*StoreUserStickerSetResult, error) {
	out := new(StoreUserStickerSetResult)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/StoreUserStickerSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) DeleteShopStickerSet(ctx context.Context, in *DeleteStickerSetReq, opts ...grpc.CallOption) (*DeleteStickerSetResult, error) {
	out := new(DeleteStickerSetResult)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/DeleteShopStickerSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetStickerSetInfo(ctx context.Context, in *GetStickerSetInfoReq, opts ...grpc.CallOption) (*StickerSetInfo, error) {
	out := new(StickerSetInfo)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetStickerSetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) DeleteStickerPackDocument(ctx context.Context, in *DeleteStickerPackDocumentReq, opts ...grpc.CallOption) (*DeleteStickerPackDocumentResult, error) {
	out := new(DeleteStickerPackDocumentResult)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/DeleteStickerPackDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetAuthorAllStickerSet(ctx context.Context, in *GetAuthorAllStickerSetReq, opts ...grpc.CallOption) (*GetAuthorAllStickerSetResult, error) {
	out := new(GetAuthorAllStickerSetResult)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetAuthorAllStickerSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) StoreStickerSetDocument(ctx context.Context, in *StoreShopStickerSetDocumentsReq, opts ...grpc.CallOption) (*StoreShopStickerSetDocumentsResult, error) {
	out := new(StoreShopStickerSetDocumentsResult)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/StoreStickerSetDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetUsersChats(ctx context.Context, in *GetUsersChatsReq, opts ...grpc.CallOption) (*GetUsersChatsResult, error) {
	out := new(GetUsersChatsResult)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetUsersChats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetChatInfo(ctx context.Context, in *GetChatInfoReq, opts ...grpc.CallOption) (*GetChatInfoResp, error) {
	out := new(GetChatInfoResp)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetChatInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) LeaveChat(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error) {
	out := new(ReplyData)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/LeaveChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetChat(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error) {
	out := new(ReplyData)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetChatMembersCount(ctx context.Context, in *ReqGetChatMembersCount, opts ...grpc.CallOption) (*ReplyGetChatMembersCount, error) {
	out := new(ReplyGetChatMembersCount)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetChatMembersCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetChatAdministrators(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error) {
	out := new(ReplyData)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetChatAdministrators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) SetChatTitle(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error) {
	out := new(ReplyData)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/SetChatTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) SetChatDescription(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error) {
	out := new(ReplyData)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/SetChatDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) UpdatePinnedChannelMessage(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error) {
	out := new(ReplyData)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/UpdatePinnedChannelMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) SendChatAction(ctx context.Context, in *ReqSendChatAction, opts ...grpc.CallOption) (*ReplyData, error) {
	out := new(ReplyData)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/SendChatAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) SendContact(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error) {
	out := new(ReplyData)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/SendContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) DeleteMessage(ctx context.Context, in *ReqDeleteMessage, opts ...grpc.CallOption) (*ReplyData, error) {
	out := new(ReplyData)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/DeleteMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetGroups(ctx context.Context, in *ReqGetGroups, opts ...grpc.CallOption) (*ReplyGetGroups, error) {
	out := new(ReplyGetGroups)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetAdminGroups(ctx context.Context, in *ReqGetAdminGroups, opts ...grpc.CallOption) (*ReplyGetGroups, error) {
	out := new(ReplyGetGroups)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetAdminGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) SetManualBlockList(ctx context.Context, in *ReqSetManualBlockList, opts ...grpc.CallOption) (*ManualBlockReplyData, error) {
	out := new(ManualBlockReplyData)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/SetManualBlockList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) DelManualBlockList(ctx context.Context, in *ReqDelManualBlockList, opts ...grpc.CallOption) (*ManualBlockReplyData, error) {
	out := new(ManualBlockReplyData)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/DelManualBlockList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) LeaveGroup(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/LeaveGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetChannelInfo(ctx context.Context, in *GetChannelInfoReq, opts ...grpc.CallOption) (*GetChannelInfoResp, error) {
	out := new(GetChannelInfoResp)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetChannelInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GatewayGetFileDesc(ctx context.Context, in *MsgGetFileDescReq, opts ...grpc.CallOption) (*MsgGetFileDescResp, error) {
	out := new(MsgGetFileDescResp)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/GatewayGetFileDesc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) QueryObjInfo(ctx context.Context, in *MsgQueryObjInfoReq, opts ...grpc.CallOption) (*MsgQueryObjInfoResp, error) {
	out := new(MsgQueryObjInfoResp)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/QueryObjInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) DownloadFile(ctx context.Context, in *MsgDownloadFileReq, opts ...grpc.CallOption) (*MsgDownloadFileResp, error) {
	out := new(MsgDownloadFileResp)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/DownloadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) UploadFile(ctx context.Context, in *MsgUploadFileReq, opts ...grpc.CallOption) (*MsgUploadFileResp, error) {
	out := new(MsgUploadFileResp)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/UploadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GatewayUploadFile(ctx context.Context, in *MsgFilePartsReq, opts ...grpc.CallOption) (*MsgFilePartsResp, error) {
	out := new(MsgFilePartsResp)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/GatewayUploadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GatewayUploadFileDesc(ctx context.Context, in *MsgFileDescReq, opts ...grpc.CallOption) (*MsgFileDescResp, error) {
	out := new(MsgFileDescResp)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/GatewayUploadFileDesc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GatewayGetUploadFileFid(ctx context.Context, in *MsgGetFidReq, opts ...grpc.CallOption) (*MsgGetFidResp, error) {
	out := new(MsgGetFidResp)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/GatewayGetUploadFileFid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) ServiceLimit(ctx context.Context, in *MsgServiceLimitReq, opts ...grpc.CallOption) (*MsgServiceLimitResp, error) {
	out := new(MsgServiceLimitResp)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/ServiceLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) BotCall(ctx context.Context, in *ReqBotCall, opts ...grpc.CallOption) (*ReplyBotCall, error) {
	out := new(ReplyBotCall)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/BotCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetMessageByUserIdMsgId(ctx context.Context, in *ReqGetMessageByUserIdMsgId, opts ...grpc.CallOption) (*ReplyGetMessageByUserIdMsgId, error) {
	out := new(ReplyGetMessageByUserIdMsgId)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetMessageByUserIdMsgId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetChannelMessageByChannelIdMsgId(ctx context.Context, in *ReqGetChannelMessageByChannelIdMsgId, opts ...grpc.CallOption) (*ReplyGetChannelMessageByChannelIdMsgId, error) {
	out := new(ReplyGetChannelMessageByChannelIdMsgId)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetChannelMessageByChannelIdMsgId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetMessageByUserIdUuid(ctx context.Context, in *ReqGetMessageByUserIdUuid, opts ...grpc.CallOption) (*ReplyGetMessageByUserIdUuid, error) {
	out := new(ReplyGetMessageByUserIdUuid)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetMessageByUserIdUuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) BotCallMessageMedia(ctx context.Context, in *ReqBotCallMessageMedia, opts ...grpc.CallOption) (*ReplyBotCall, error) {
	out := new(ReplyBotCall)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/BotCallMessageMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) SendUserMsg(ctx context.Context, in *ReqSendUserMsg, opts ...grpc.CallOption) (*ReplyBool, error) {
	out := new(ReplyBool)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/SendUserMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) BotInlineCall(ctx context.Context, in *ReqBotInlineCall, opts ...grpc.CallOption) (*ReplyBotInlineCall, error) {
	out := new(ReplyBotInlineCall)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/BotInlineCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetChannelInactiveUsers(ctx context.Context, in *GetChannelInactiveUsersReq, opts ...grpc.CallOption) (*GetChannelInactiveUsersResult, error) {
	out := new(GetChannelInactiveUsersResult)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetChannelInactiveUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) DeleteChatUser(ctx context.Context, in *ReqDeleteChatUser, opts ...grpc.CallOption) (*ReplyDeleteChatUser, error) {
	out := new(ReplyDeleteChatUser)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/DeleteChatUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) Getchannels(ctx context.Context, in *ReqGetChannels, opts ...grpc.CallOption) (*ReplyGetChannels, error) {
	out := new(ReplyGetChannels)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/Getchannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) EditBanChannelUser(ctx context.Context, in *ReqBanChannelUser, opts ...grpc.CallOption) (*ReplyBanChannelUser, error) {
	out := new(ReplyBanChannelUser)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/EditBanChannelUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) SetGameScore(ctx context.Context, in *ReqSetGameScore, opts ...grpc.CallOption) (*ReplySetGameScore, error) {
	out := new(ReplySetGameScore)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/SetGameScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetDialog(ctx context.Context, in *RequestDialog, opts ...grpc.CallOption) (*ReplyDialog, error) {
	out := new(ReplyDialog)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetDialog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) ChangeGroupAndChannelCrator(ctx context.Context, in *ReqChangeGroupAndChannelCrator, opts ...grpc.CallOption) (*ReplyChangeGroupAndChannelCrator, error) {
	out := new(ReplyChangeGroupAndChannelCrator)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/ChangeGroupAndChannelCrator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) JoinChannel(ctx context.Context, in *ReqJoinChannel, opts ...grpc.CallOption) (*ReplyJoinChannel, error) {
	out := new(ReplyJoinChannel)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/JoinChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetParticipants(ctx context.Context, in *ReqParticipants, opts ...grpc.CallOption) (*ReplyParticipants, error) {
	out := new(ReplyParticipants)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetParticipants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) MigrateChat(ctx context.Context, in *ReqMigrateChat, opts ...grpc.CallOption) (*ReplyMigrateChat, error) {
	out := new(ReplyMigrateChat)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/MigrateChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) CreateChat(ctx context.Context, in *ReqCreateChat, opts ...grpc.CallOption) (*ReplyCreateChat, error) {
	out := new(ReplyCreateChat)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/CreateChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetFullChat(ctx context.Context, in *ReqGetFullChat, opts ...grpc.CallOption) (*ReplyGetFullChat, error) {
	out := new(ReplyGetFullChat)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetFullChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) LeaveChannel(ctx context.Context, in *ReqLeaveChannel, opts ...grpc.CallOption) (*ReplyLeaveChannel, error) {
	out := new(ReplyLeaveChannel)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/LeaveChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) SendMedia(ctx context.Context, in *ReqSendMedia, opts ...grpc.CallOption) (*ReplyResult, error) {
	out := new(ReplyResult)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/SendMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) EditChatTitle(ctx context.Context, in *ReqEditChatTitle, opts ...grpc.CallOption) (*ReplyEditChatTitle, error) {
	out := new(ReplyEditChatTitle)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/EditChatTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) Resize(ctx context.Context, in *ResizeRequest, opts ...grpc.CallOption) (*ResizeReply, error) {
	out := new(ResizeReply)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/Resize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) Constraint(ctx context.Context, in *ConstraintRequest, opts ...grpc.CallOption) (*ConstraintReply, error) {
	out := new(ConstraintReply)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/Constraint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) CompressImage(ctx context.Context, in *CompressImageRequest, opts ...grpc.CallOption) (*CompressImageReply, error) {
	out := new(CompressImageReply)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/CompressImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetVideoPreview(ctx context.Context, in *VideoPreviewRequest, opts ...grpc.CallOption) (*VideoPreviewReply, error) {
	out := new(VideoPreviewReply)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetVideoPreview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botgatewayServiceClient) GetAudioPreview(ctx context.Context, in *AudioPreviewRequest, opts ...grpc.CallOption) (*AudioPreviewReply, error) {
	out := new(AudioPreviewReply)
	err := c.cc.Invoke(ctx, "/imbotgateway.BotgatewayService/GetAudioPreview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BotgatewayServiceServer is the server API for BotgatewayService service.
// All implementations must embed UnimplementedBotgatewayServiceServer
// for forward compatibility
type BotgatewayServiceServer interface {
	//infoserver.pb.go
	//注册用户的接口(yuankan和lxl)
	AuthSignUp(context.Context, *SignUpReq) (*AuthSignUpResult, error)
	//获取用户完整信息，包含和自己的关联信息
	GetFullUser(context.Context, *GetFullUserReq) (*GetFullUserResult, error)
	//userserver.pb.go
	//账号(标记删除)
	DeleteUserInfoById(context.Context, *DeleteAccountByIdReq) (*DelAccountResult, error)
	//更新用户的username
	UpdateUserName(context.Context, *UpdateuserNameReq) (*UpdateuserNameResult, error)
	//注册指定用户的接口()
	RegisterUserInfo(context.Context, *RegisterUserInfoReq) (*RegisterUserInfoResult, error)
	//更新机器人头像
	UpdateBotPic(context.Context, *UpdateBotPicRequest) (*UpdateBotPicResult, error)
	//更新机器人相关信息
	UpdateBotInfo(context.Context, *BotUpdateInfo) (*BotUpdateInfoResult, error)
	//补充 更新机器人相关信息
	UpdateBotInfoSupp(context.Context, *UpdateBotInfoSuppReq) (*UpdateBotInfoSuppResult, error)
	//通过用户电话号码获取用户基本信息
	GetUserInfoByPhone(context.Context, *GetUserByphone) (*GetUserInfoResult, error)
	//更新用户名称和about
	UpdateUserProfile(context.Context, *UpdateUserProfileReq) (*UpdateUserProfileResult, error)
	//获取用户信息
	GetUserInfoById(context.Context, *GetUserInfoByIdReq) (*GetUserInfoResult, error)
	//通过username获取用户基本信息
	GetUserInfoByUsername(context.Context, *GetUserByUsername) (*GetUserInfoResult, error)
	//获取一个sticker下面的所有贴图信息
	GetStickerSetPackDcInfos(context.Context, *GetStickerSetPackDcInfosReq) (*GetStickerSetPackDcInfosResult, error)
	//存储sticker集合的概要
	StoreStickerSet(context.Context, *StoreShopStickerSetReq) (*StoreShopStickerSetResult, error)
	//存储stickerSet下面的单个贴图
	StoreStickerPackDc(context.Context, *StoreStickerPackDcReq) (*StoreStickerPackDcResult, error)
	//用户安装sticker的操作
	StoreUserStickerSet(context.Context, *StoreUserStickerSetReq) (*StoreUserStickerSetResult, error)
	//删除指定的sticker集合
	DeleteShopStickerSet(context.Context, *DeleteStickerSetReq) (*DeleteStickerSetResult, error)
	//获取指定的sticker集合
	GetStickerSetInfo(context.Context, *GetStickerSetInfoReq) (*StickerSetInfo, error)
	//删除指定sticker包的单个sticker
	DeleteStickerPackDocument(context.Context, *DeleteStickerPackDocumentReq) (*DeleteStickerPackDocumentResult, error)
	//查询作者所有的sticker
	GetAuthorAllStickerSet(context.Context, *GetAuthorAllStickerSetReq) (*GetAuthorAllStickerSetResult, error)
	//存储sickerSet 的documents
	StoreStickerSetDocument(context.Context, *StoreShopStickerSetDocumentsReq) (*StoreShopStickerSetDocumentsResult, error)
	//chatservice.pb.go
	//获取用户信息、群、超级群信息
	GetUsersChats(context.Context, *GetUsersChatsReq) (*GetUsersChatsResult, error)
	//通过群Id 用户Id 获取群基本信息
	GetChatInfo(context.Context, *GetChatInfoReq) (*GetChatInfoResp, error)
	//botserver.pb.go
	// 離開群組
	LeaveChat(context.Context, *ReqData) (*ReplyData, error)
	// 獲取群訊息
	GetChat(context.Context, *ReqData) (*ReplyData, error)
	// 獲取群成員數目
	GetChatMembersCount(context.Context, *ReqGetChatMembersCount) (*ReplyGetChatMembersCount, error)
	// 獲取群管理員
	GetChatAdministrators(context.Context, *ReqData) (*ReplyData, error)
	// 修改群名字
	SetChatTitle(context.Context, *ReqData) (*ReplyData, error)
	// 修改群簡介
	SetChatDescription(context.Context, *ReqData) (*ReplyData, error)
	// 置顶群消息
	UpdatePinnedChannelMessage(context.Context, *ReqData) (*ReplyData, error)
	// 發送Action
	SendChatAction(context.Context, *ReqSendChatAction) (*ReplyData, error)
	// 發送名片
	SendContact(context.Context, *ReqData) (*ReplyData, error)
	// 刪除消息
	DeleteMessage(context.Context, *ReqDeleteMessage) (*ReplyData, error)
	// GetGroups 获取群组消息
	GetGroups(context.Context, *ReqGetGroups) (*ReplyGetGroups, error)
	// GetGroups 获取使用者是管理員的群組消息
	GetAdminGroups(context.Context, *ReqGetAdminGroups) (*ReplyGetGroups, error)
	// 新增手動禁言名單
	SetManualBlockList(context.Context, *ReqSetManualBlockList) (*ManualBlockReplyData, error)
	// 刪除手動禁言名單
	DelManualBlockList(context.Context, *ReqDelManualBlockList) (*ManualBlockReplyData, error)
	// 讓使用者離開群(使用者後續還可以自動加入)
	LeaveGroup(context.Context, *ReqData) (*ReplyChannelData, error)
	//channelservice.pb.go
	//获取channel信息 不带user信息
	GetChannelInfo(context.Context, *GetChannelInfoReq) (*GetChannelInfoResp, error)
	//storage_proto.pb.go
	// 网关获取文件描述信息
	GatewayGetFileDesc(context.Context, *MsgGetFileDescReq) (*MsgGetFileDescResp, error)
	// QueryObjInfo 查询对象信息
	QueryObjInfo(context.Context, *MsgQueryObjInfoReq) (*MsgQueryObjInfoResp, error)
	// DownloadFile 下载文件或文件片
	DownloadFile(context.Context, *MsgDownloadFileReq) (*MsgDownloadFileResp, error)
	// UploadFile 上传文件或文件片
	UploadFile(context.Context, *MsgUploadFileReq) (*MsgUploadFileResp, error)
	// 网关上传文件
	GatewayUploadFile(context.Context, *MsgFilePartsReq) (*MsgFilePartsResp, error)
	// 网关上传文件描述信息
	GatewayUploadFileDesc(context.Context, *MsgFileDescReq) (*MsgFileDescResp, error)
	// 网关取上传文件的Fid, 与DC约定：1.收到此消息认为文件片已经传完；2.keyid+fileid与存储fid映射关系丢弃
	GatewayGetUploadFileFid(context.Context, *MsgGetFidReq) (*MsgGetFidResp, error)
	// ServiceLimit 服务上传下载限制
	ServiceLimit(context.Context, *MsgServiceLimitReq) (*MsgServiceLimitResp, error)
	//pbmessageserver.pb.go
	// 机器人调用接口
	BotCall(context.Context, *ReqBotCall) (*ReplyBotCall, error)
	// 根据 消息id和用户id 获取单聊消息\普通群消息
	GetMessageByUserIdMsgId(context.Context, *ReqGetMessageByUserIdMsgId) (*ReplyGetMessageByUserIdMsgId, error)
	// 根据 超级群ID和消息ID查询超级群信息
	GetChannelMessageByChannelIdMsgId(context.Context, *ReqGetChannelMessageByChannelIdMsgId) (*ReplyGetChannelMessageByChannelIdMsgId, error)
	// 根据 uuid和用户id 获取单聊消息\普通群消息
	GetMessageByUserIdUuid(context.Context, *ReqGetMessageByUserIdUuid) (*ReplyGetMessageByUserIdUuid, error)
	// 机器人发送webpage
	BotCallMessageMedia(context.Context, *ReqBotCallMessageMedia) (*ReplyBotCall, error)
	// 发送给对方所有端
	SendUserMsg(context.Context, *ReqSendUserMsg) (*ReplyBool, error)
	// 机器人内联调用
	BotInlineCall(context.Context, *ReqBotInlineCall) (*ReplyBotInlineCall, error)
	// 根据超级群用户离线时间倒序获取超级群用户
	GetChannelInactiveUsers(context.Context, *GetChannelInactiveUsersReq) (*GetChannelInactiveUsersResult, error)
	//    普通群删除成员
	DeleteChatUser(context.Context, *ReqDeleteChatUser) (*ReplyDeleteChatUser, error)
	//获取给定超级群信息
	Getchannels(context.Context, *ReqGetChannels) (*ReplyGetChannels, error)
	//踢人并进组其再次加入超级群或者频道，或者解除该禁止
	EditBanChannelUser(context.Context, *ReqBanChannelUser) (*ReplyBanChannelUser, error)
	// 设置游戏分数
	SetGameScore(context.Context, *ReqSetGameScore) (*ReplySetGameScore, error)
	//    获取对话框
	GetDialog(context.Context, *RequestDialog) (*ReplyDialog, error)
	//变更群主
	ChangeGroupAndChannelCrator(context.Context, *ReqChangeGroupAndChannelCrator) (*ReplyChangeGroupAndChannelCrator, error)
	//主动加入超级群或者频道
	JoinChannel(context.Context, *ReqJoinChannel) (*ReplyJoinChannel, error)
	//获取超级群用户信息
	GetParticipants(context.Context, *ReqParticipants) (*ReplyParticipants, error)
	//    普通群升级超级群
	MigrateChat(context.Context, *ReqMigrateChat) (*ReplyMigrateChat, error)
	//    创建普通群
	CreateChat(context.Context, *ReqCreateChat) (*ReplyCreateChat, error)
	// 获取群的完整信息
	GetFullChat(context.Context, *ReqGetFullChat) (*ReplyGetFullChat, error)
	//离开超级群或者频道
	LeaveChannel(context.Context, *ReqLeaveChannel) (*ReplyLeaveChannel, error)
	//    发送媒体消息
	SendMedia(context.Context, *ReqSendMedia) (*ReplyResult, error)
	//    编辑群名称
	EditChatTitle(context.Context, *ReqEditChatTitle) (*ReplyEditChatTitle, error)
	//avthumb.pb.go
	// Resize 重设图片大小
	Resize(context.Context, *ResizeRequest) (*ResizeReply, error)
	// Constraint 约束图片尺寸
	Constraint(context.Context, *ConstraintRequest) (*ConstraintReply, error)
	// CompressImage 压缩图片质量
	CompressImage(context.Context, *CompressImageRequest) (*CompressImageReply, error)
	// GetVideoPreview 获取视频预览
	GetVideoPreview(context.Context, *VideoPreviewRequest) (*VideoPreviewReply, error)
	// GetAudioPreview 获取音频预览
	GetAudioPreview(context.Context, *AudioPreviewRequest) (*AudioPreviewReply, error)
	mustEmbedUnimplementedBotgatewayServiceServer()
}

// UnimplementedBotgatewayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBotgatewayServiceServer struct {
}

func (UnimplementedBotgatewayServiceServer) AuthSignUp(context.Context, *SignUpReq) (*AuthSignUpResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthSignUp not implemented")
}
func (UnimplementedBotgatewayServiceServer) GetFullUser(context.Context, *GetFullUserReq) (*GetFullUserResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullUser not implemented")
}
func (UnimplementedBotgatewayServiceServer) DeleteUserInfoById(context.Context, *DeleteAccountByIdReq) (*DelAccountResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserInfoById not implemented")
}
func (UnimplementedBotgatewayServiceServer) UpdateUserName(context.Context, *UpdateuserNameReq) (*UpdateuserNameResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserName not implemented")
}
func (UnimplementedBotgatewayServiceServer) RegisterUserInfo(context.Context, *RegisterUserInfoReq) (*RegisterUserInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUserInfo not implemented")
}
func (UnimplementedBotgatewayServiceServer) UpdateBotPic(context.Context, *UpdateBotPicRequest) (*UpdateBotPicResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBotPic not implemented")
}
func (UnimplementedBotgatewayServiceServer) UpdateBotInfo(context.Context, *BotUpdateInfo) (*BotUpdateInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBotInfo not implemented")
}
func (UnimplementedBotgatewayServiceServer) UpdateBotInfoSupp(context.Context, *UpdateBotInfoSuppReq) (*UpdateBotInfoSuppResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBotInfoSupp not implemented")
}
func (UnimplementedBotgatewayServiceServer) GetUserInfoByPhone(context.Context, *GetUserByphone) (*GetUserInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoByPhone not implemented")
}
func (UnimplementedBotgatewayServiceServer) UpdateUserProfile(context.Context, *UpdateUserProfileReq) (*UpdateUserProfileResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}
func (UnimplementedBotgatewayServiceServer) GetUserInfoById(context.Context, *GetUserInfoByIdReq) (*GetUserInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoById not implemented")
}
func (UnimplementedBotgatewayServiceServer) GetUserInfoByUsername(context.Context, *GetUserByUsername) (*GetUserInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoByUsername not implemented")
}
func (UnimplementedBotgatewayServiceServer) GetStickerSetPackDcInfos(context.Context, *GetStickerSetPackDcInfosReq) (*GetStickerSetPackDcInfosResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStickerSetPackDcInfos not implemented")
}
func (UnimplementedBotgatewayServiceServer) StoreStickerSet(context.Context, *StoreShopStickerSetReq) (*StoreShopStickerSetResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreStickerSet not implemented")
}
func (UnimplementedBotgatewayServiceServer) StoreStickerPackDc(context.Context, *StoreStickerPackDcReq) (*StoreStickerPackDcResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreStickerPackDc not implemented")
}
func (UnimplementedBotgatewayServiceServer) StoreUserStickerSet(context.Context, *StoreUserStickerSetReq) (*StoreUserStickerSetResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreUserStickerSet not implemented")
}
func (UnimplementedBotgatewayServiceServer) DeleteShopStickerSet(context.Context, *DeleteStickerSetReq) (*DeleteStickerSetResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShopStickerSet not implemented")
}
func (UnimplementedBotgatewayServiceServer) GetStickerSetInfo(context.Context, *GetStickerSetInfoReq) (*StickerSetInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStickerSetInfo not implemented")
}
func (UnimplementedBotgatewayServiceServer) DeleteStickerPackDocument(context.Context, *DeleteStickerPackDocumentReq) (*DeleteStickerPackDocumentResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStickerPackDocument not implemented")
}
func (UnimplementedBotgatewayServiceServer) GetAuthorAllStickerSet(context.Context, *GetAuthorAllStickerSetReq) (*GetAuthorAllStickerSetResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorAllStickerSet not implemented")
}
func (UnimplementedBotgatewayServiceServer) StoreStickerSetDocument(context.Context, *StoreShopStickerSetDocumentsReq) (*StoreShopStickerSetDocumentsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreStickerSetDocument not implemented")
}
func (UnimplementedBotgatewayServiceServer) GetUsersChats(context.Context, *GetUsersChatsReq) (*GetUsersChatsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersChats not implemented")
}
func (UnimplementedBotgatewayServiceServer) GetChatInfo(context.Context, *GetChatInfoReq) (*GetChatInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatInfo not implemented")
}
func (UnimplementedBotgatewayServiceServer) LeaveChat(context.Context, *ReqData) (*ReplyData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveChat not implemented")
}
func (UnimplementedBotgatewayServiceServer) GetChat(context.Context, *ReqData) (*ReplyData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChat not implemented")
}
func (UnimplementedBotgatewayServiceServer) GetChatMembersCount(context.Context, *ReqGetChatMembersCount) (*ReplyGetChatMembersCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatMembersCount not implemented")
}
func (UnimplementedBotgatewayServiceServer) GetChatAdministrators(context.Context, *ReqData) (*ReplyData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatAdministrators not implemented")
}
func (UnimplementedBotgatewayServiceServer) SetChatTitle(context.Context, *ReqData) (*ReplyData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChatTitle not implemented")
}
func (UnimplementedBotgatewayServiceServer) SetChatDescription(context.Context, *ReqData) (*ReplyData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChatDescription not implemented")
}
func (UnimplementedBotgatewayServiceServer) UpdatePinnedChannelMessage(context.Context, *ReqData) (*ReplyData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePinnedChannelMessage not implemented")
}
func (UnimplementedBotgatewayServiceServer) SendChatAction(context.Context, *ReqSendChatAction) (*ReplyData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendChatAction not implemented")
}
func (UnimplementedBotgatewayServiceServer) SendContact(context.Context, *ReqData) (*ReplyData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendContact not implemented")
}
func (UnimplementedBotgatewayServiceServer) DeleteMessage(context.Context, *ReqDeleteMessage) (*ReplyData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedBotgatewayServiceServer) GetGroups(context.Context, *ReqGetGroups) (*ReplyGetGroups, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroups not implemented")
}
func (UnimplementedBotgatewayServiceServer) GetAdminGroups(context.Context, *ReqGetAdminGroups) (*ReplyGetGroups, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminGroups not implemented")
}
func (UnimplementedBotgatewayServiceServer) SetManualBlockList(context.Context, *ReqSetManualBlockList) (*ManualBlockReplyData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetManualBlockList not implemented")
}
func (UnimplementedBotgatewayServiceServer) DelManualBlockList(context.Context, *ReqDelManualBlockList) (*ManualBlockReplyData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelManualBlockList not implemented")
}
func (UnimplementedBotgatewayServiceServer) LeaveGroup(context.Context, *ReqData) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveGroup not implemented")
}
func (UnimplementedBotgatewayServiceServer) GetChannelInfo(context.Context, *GetChannelInfoReq) (*GetChannelInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelInfo not implemented")
}
func (UnimplementedBotgatewayServiceServer) GatewayGetFileDesc(context.Context, *MsgGetFileDescReq) (*MsgGetFileDescResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatewayGetFileDesc not implemented")
}
func (UnimplementedBotgatewayServiceServer) QueryObjInfo(context.Context, *MsgQueryObjInfoReq) (*MsgQueryObjInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryObjInfo not implemented")
}
func (UnimplementedBotgatewayServiceServer) DownloadFile(context.Context, *MsgDownloadFileReq) (*MsgDownloadFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedBotgatewayServiceServer) UploadFile(context.Context, *MsgUploadFileReq) (*MsgUploadFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedBotgatewayServiceServer) GatewayUploadFile(context.Context, *MsgFilePartsReq) (*MsgFilePartsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatewayUploadFile not implemented")
}
func (UnimplementedBotgatewayServiceServer) GatewayUploadFileDesc(context.Context, *MsgFileDescReq) (*MsgFileDescResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatewayUploadFileDesc not implemented")
}
func (UnimplementedBotgatewayServiceServer) GatewayGetUploadFileFid(context.Context, *MsgGetFidReq) (*MsgGetFidResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatewayGetUploadFileFid not implemented")
}
func (UnimplementedBotgatewayServiceServer) ServiceLimit(context.Context, *MsgServiceLimitReq) (*MsgServiceLimitResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceLimit not implemented")
}
func (UnimplementedBotgatewayServiceServer) BotCall(context.Context, *ReqBotCall) (*ReplyBotCall, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotCall not implemented")
}
func (UnimplementedBotgatewayServiceServer) GetMessageByUserIdMsgId(context.Context, *ReqGetMessageByUserIdMsgId) (*ReplyGetMessageByUserIdMsgId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageByUserIdMsgId not implemented")
}
func (UnimplementedBotgatewayServiceServer) GetChannelMessageByChannelIdMsgId(context.Context, *ReqGetChannelMessageByChannelIdMsgId) (*ReplyGetChannelMessageByChannelIdMsgId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelMessageByChannelIdMsgId not implemented")
}
func (UnimplementedBotgatewayServiceServer) GetMessageByUserIdUuid(context.Context, *ReqGetMessageByUserIdUuid) (*ReplyGetMessageByUserIdUuid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageByUserIdUuid not implemented")
}
func (UnimplementedBotgatewayServiceServer) BotCallMessageMedia(context.Context, *ReqBotCallMessageMedia) (*ReplyBotCall, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotCallMessageMedia not implemented")
}
func (UnimplementedBotgatewayServiceServer) SendUserMsg(context.Context, *ReqSendUserMsg) (*ReplyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendUserMsg not implemented")
}
func (UnimplementedBotgatewayServiceServer) BotInlineCall(context.Context, *ReqBotInlineCall) (*ReplyBotInlineCall, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotInlineCall not implemented")
}
func (UnimplementedBotgatewayServiceServer) GetChannelInactiveUsers(context.Context, *GetChannelInactiveUsersReq) (*GetChannelInactiveUsersResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelInactiveUsers not implemented")
}
func (UnimplementedBotgatewayServiceServer) DeleteChatUser(context.Context, *ReqDeleteChatUser) (*ReplyDeleteChatUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChatUser not implemented")
}
func (UnimplementedBotgatewayServiceServer) Getchannels(context.Context, *ReqGetChannels) (*ReplyGetChannels, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getchannels not implemented")
}
func (UnimplementedBotgatewayServiceServer) EditBanChannelUser(context.Context, *ReqBanChannelUser) (*ReplyBanChannelUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditBanChannelUser not implemented")
}
func (UnimplementedBotgatewayServiceServer) SetGameScore(context.Context, *ReqSetGameScore) (*ReplySetGameScore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGameScore not implemented")
}
func (UnimplementedBotgatewayServiceServer) GetDialog(context.Context, *RequestDialog) (*ReplyDialog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDialog not implemented")
}
func (UnimplementedBotgatewayServiceServer) ChangeGroupAndChannelCrator(context.Context, *ReqChangeGroupAndChannelCrator) (*ReplyChangeGroupAndChannelCrator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeGroupAndChannelCrator not implemented")
}
func (UnimplementedBotgatewayServiceServer) JoinChannel(context.Context, *ReqJoinChannel) (*ReplyJoinChannel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinChannel not implemented")
}
func (UnimplementedBotgatewayServiceServer) GetParticipants(context.Context, *ReqParticipants) (*ReplyParticipants, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParticipants not implemented")
}
func (UnimplementedBotgatewayServiceServer) MigrateChat(context.Context, *ReqMigrateChat) (*ReplyMigrateChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateChat not implemented")
}
func (UnimplementedBotgatewayServiceServer) CreateChat(context.Context, *ReqCreateChat) (*ReplyCreateChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChat not implemented")
}
func (UnimplementedBotgatewayServiceServer) GetFullChat(context.Context, *ReqGetFullChat) (*ReplyGetFullChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullChat not implemented")
}
func (UnimplementedBotgatewayServiceServer) LeaveChannel(context.Context, *ReqLeaveChannel) (*ReplyLeaveChannel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveChannel not implemented")
}
func (UnimplementedBotgatewayServiceServer) SendMedia(context.Context, *ReqSendMedia) (*ReplyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMedia not implemented")
}
func (UnimplementedBotgatewayServiceServer) EditChatTitle(context.Context, *ReqEditChatTitle) (*ReplyEditChatTitle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChatTitle not implemented")
}
func (UnimplementedBotgatewayServiceServer) Resize(context.Context, *ResizeRequest) (*ResizeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resize not implemented")
}
func (UnimplementedBotgatewayServiceServer) Constraint(context.Context, *ConstraintRequest) (*ConstraintReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Constraint not implemented")
}
func (UnimplementedBotgatewayServiceServer) CompressImage(context.Context, *CompressImageRequest) (*CompressImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompressImage not implemented")
}
func (UnimplementedBotgatewayServiceServer) GetVideoPreview(context.Context, *VideoPreviewRequest) (*VideoPreviewReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoPreview not implemented")
}
func (UnimplementedBotgatewayServiceServer) GetAudioPreview(context.Context, *AudioPreviewRequest) (*AudioPreviewReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAudioPreview not implemented")
}
func (UnimplementedBotgatewayServiceServer) mustEmbedUnimplementedBotgatewayServiceServer() {}

// UnsafeBotgatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BotgatewayServiceServer will
// result in compilation errors.
type UnsafeBotgatewayServiceServer interface {
	mustEmbedUnimplementedBotgatewayServiceServer()
}

func RegisterBotgatewayServiceServer(s grpc.ServiceRegistrar, srv BotgatewayServiceServer) {
	s.RegisterService(&BotgatewayService_ServiceDesc, srv)
}

func _BotgatewayService_AuthSignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).AuthSignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/AuthSignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).AuthSignUp(ctx, req.(*SignUpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetFullUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFullUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetFullUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetFullUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetFullUser(ctx, req.(*GetFullUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_DeleteUserInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).DeleteUserInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/DeleteUserInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).DeleteUserInfoById(ctx, req.(*DeleteAccountByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_UpdateUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateuserNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).UpdateUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/UpdateUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).UpdateUserName(ctx, req.(*UpdateuserNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_RegisterUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).RegisterUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/RegisterUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).RegisterUserInfo(ctx, req.(*RegisterUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_UpdateBotPic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBotPicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).UpdateBotPic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/UpdateBotPic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).UpdateBotPic(ctx, req.(*UpdateBotPicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_UpdateBotInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotUpdateInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).UpdateBotInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/UpdateBotInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).UpdateBotInfo(ctx, req.(*BotUpdateInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_UpdateBotInfoSupp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBotInfoSuppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).UpdateBotInfoSupp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/UpdateBotInfoSupp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).UpdateBotInfoSupp(ctx, req.(*UpdateBotInfoSuppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetUserInfoByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByphone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetUserInfoByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetUserInfoByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetUserInfoByPhone(ctx, req.(*GetUserByphone))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/UpdateUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).UpdateUserProfile(ctx, req.(*UpdateUserProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetUserInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetUserInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetUserInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetUserInfoById(ctx, req.(*GetUserInfoByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetUserInfoByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetUserInfoByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetUserInfoByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetUserInfoByUsername(ctx, req.(*GetUserByUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetStickerSetPackDcInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStickerSetPackDcInfosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetStickerSetPackDcInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetStickerSetPackDcInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetStickerSetPackDcInfos(ctx, req.(*GetStickerSetPackDcInfosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_StoreStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreShopStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).StoreStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/StoreStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).StoreStickerSet(ctx, req.(*StoreShopStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_StoreStickerPackDc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreStickerPackDcReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).StoreStickerPackDc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/StoreStickerPackDc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).StoreStickerPackDc(ctx, req.(*StoreStickerPackDcReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_StoreUserStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreUserStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).StoreUserStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/StoreUserStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).StoreUserStickerSet(ctx, req.(*StoreUserStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_DeleteShopStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).DeleteShopStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/DeleteShopStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).DeleteShopStickerSet(ctx, req.(*DeleteStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetStickerSetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStickerSetInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetStickerSetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetStickerSetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetStickerSetInfo(ctx, req.(*GetStickerSetInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_DeleteStickerPackDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStickerPackDocumentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).DeleteStickerPackDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/DeleteStickerPackDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).DeleteStickerPackDocument(ctx, req.(*DeleteStickerPackDocumentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetAuthorAllStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorAllStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetAuthorAllStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetAuthorAllStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetAuthorAllStickerSet(ctx, req.(*GetAuthorAllStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_StoreStickerSetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreShopStickerSetDocumentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).StoreStickerSetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/StoreStickerSetDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).StoreStickerSetDocument(ctx, req.(*StoreShopStickerSetDocumentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetUsersChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersChatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetUsersChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetUsersChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetUsersChats(ctx, req.(*GetUsersChatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetChatInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetChatInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetChatInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetChatInfo(ctx, req.(*GetChatInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_LeaveChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).LeaveChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/LeaveChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).LeaveChat(ctx, req.(*ReqData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetChat(ctx, req.(*ReqData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetChatMembersCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChatMembersCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetChatMembersCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetChatMembersCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetChatMembersCount(ctx, req.(*ReqGetChatMembersCount))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetChatAdministrators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetChatAdministrators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetChatAdministrators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetChatAdministrators(ctx, req.(*ReqData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_SetChatTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).SetChatTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/SetChatTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).SetChatTitle(ctx, req.(*ReqData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_SetChatDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).SetChatDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/SetChatDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).SetChatDescription(ctx, req.(*ReqData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_UpdatePinnedChannelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).UpdatePinnedChannelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/UpdatePinnedChannelMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).UpdatePinnedChannelMessage(ctx, req.(*ReqData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_SendChatAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendChatAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).SendChatAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/SendChatAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).SendChatAction(ctx, req.(*ReqSendChatAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_SendContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).SendContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/SendContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).SendContact(ctx, req.(*ReqData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/DeleteMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).DeleteMessage(ctx, req.(*ReqDeleteMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetGroups)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetGroups(ctx, req.(*ReqGetGroups))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetAdminGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetAdminGroups)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetAdminGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetAdminGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetAdminGroups(ctx, req.(*ReqGetAdminGroups))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_SetManualBlockList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSetManualBlockList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).SetManualBlockList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/SetManualBlockList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).SetManualBlockList(ctx, req.(*ReqSetManualBlockList))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_DelManualBlockList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDelManualBlockList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).DelManualBlockList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/DelManualBlockList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).DelManualBlockList(ctx, req.(*ReqDelManualBlockList))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_LeaveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).LeaveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/LeaveGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).LeaveGroup(ctx, req.(*ReqData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetChannelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetChannelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetChannelInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetChannelInfo(ctx, req.(*GetChannelInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GatewayGetFileDesc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGetFileDescReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GatewayGetFileDesc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GatewayGetFileDesc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GatewayGetFileDesc(ctx, req.(*MsgGetFileDescReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_QueryObjInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgQueryObjInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).QueryObjInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/QueryObjInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).QueryObjInfo(ctx, req.(*MsgQueryObjInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_DownloadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDownloadFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).DownloadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/DownloadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).DownloadFile(ctx, req.(*MsgDownloadFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUploadFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/UploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).UploadFile(ctx, req.(*MsgUploadFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GatewayUploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFilePartsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GatewayUploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GatewayUploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GatewayUploadFile(ctx, req.(*MsgFilePartsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GatewayUploadFileDesc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFileDescReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GatewayUploadFileDesc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GatewayUploadFileDesc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GatewayUploadFileDesc(ctx, req.(*MsgFileDescReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GatewayGetUploadFileFid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGetFidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GatewayGetUploadFileFid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GatewayGetUploadFileFid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GatewayGetUploadFileFid(ctx, req.(*MsgGetFidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_ServiceLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgServiceLimitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).ServiceLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/ServiceLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).ServiceLimit(ctx, req.(*MsgServiceLimitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_BotCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBotCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).BotCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/BotCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).BotCall(ctx, req.(*ReqBotCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetMessageByUserIdMsgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetMessageByUserIdMsgId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetMessageByUserIdMsgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetMessageByUserIdMsgId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetMessageByUserIdMsgId(ctx, req.(*ReqGetMessageByUserIdMsgId))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetChannelMessageByChannelIdMsgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMessageByChannelIdMsgId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetChannelMessageByChannelIdMsgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetChannelMessageByChannelIdMsgId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetChannelMessageByChannelIdMsgId(ctx, req.(*ReqGetChannelMessageByChannelIdMsgId))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetMessageByUserIdUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetMessageByUserIdUuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetMessageByUserIdUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetMessageByUserIdUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetMessageByUserIdUuid(ctx, req.(*ReqGetMessageByUserIdUuid))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_BotCallMessageMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBotCallMessageMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).BotCallMessageMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/BotCallMessageMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).BotCallMessageMedia(ctx, req.(*ReqBotCallMessageMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_SendUserMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendUserMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).SendUserMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/SendUserMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).SendUserMsg(ctx, req.(*ReqSendUserMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_BotInlineCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBotInlineCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).BotInlineCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/BotInlineCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).BotInlineCall(ctx, req.(*ReqBotInlineCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetChannelInactiveUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelInactiveUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetChannelInactiveUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetChannelInactiveUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetChannelInactiveUsers(ctx, req.(*GetChannelInactiveUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_DeleteChatUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteChatUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).DeleteChatUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/DeleteChatUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).DeleteChatUser(ctx, req.(*ReqDeleteChatUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_Getchannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannels)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).Getchannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/Getchannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).Getchannels(ctx, req.(*ReqGetChannels))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_EditBanChannelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBanChannelUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).EditBanChannelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/EditBanChannelUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).EditBanChannelUser(ctx, req.(*ReqBanChannelUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_SetGameScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSetGameScore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).SetGameScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/SetGameScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).SetGameScore(ctx, req.(*ReqSetGameScore))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDialog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetDialog(ctx, req.(*RequestDialog))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_ChangeGroupAndChannelCrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChangeGroupAndChannelCrator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).ChangeGroupAndChannelCrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/ChangeGroupAndChannelCrator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).ChangeGroupAndChannelCrator(ctx, req.(*ReqChangeGroupAndChannelCrator))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_JoinChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqJoinChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).JoinChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/JoinChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).JoinChannel(ctx, req.(*ReqJoinChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqParticipants)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetParticipants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetParticipants(ctx, req.(*ReqParticipants))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_MigrateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMigrateChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).MigrateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/MigrateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).MigrateChat(ctx, req.(*ReqMigrateChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_CreateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).CreateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/CreateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).CreateChat(ctx, req.(*ReqCreateChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetFullChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetFullChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetFullChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetFullChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetFullChat(ctx, req.(*ReqGetFullChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_LeaveChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLeaveChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).LeaveChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/LeaveChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).LeaveChannel(ctx, req.(*ReqLeaveChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_SendMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).SendMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/SendMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).SendMedia(ctx, req.(*ReqSendMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_EditChatTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditChatTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).EditChatTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/EditChatTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).EditChatTitle(ctx, req.(*ReqEditChatTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_Resize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).Resize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/Resize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).Resize(ctx, req.(*ResizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_Constraint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConstraintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).Constraint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/Constraint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).Constraint(ctx, req.(*ConstraintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_CompressImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompressImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).CompressImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/CompressImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).CompressImage(ctx, req.(*CompressImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetVideoPreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoPreviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetVideoPreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetVideoPreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetVideoPreview(ctx, req.(*VideoPreviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotgatewayService_GetAudioPreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AudioPreviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotgatewayServiceServer).GetAudioPreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imbotgateway.BotgatewayService/GetAudioPreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotgatewayServiceServer).GetAudioPreview(ctx, req.(*AudioPreviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BotgatewayService_ServiceDesc is the grpc.ServiceDesc for BotgatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BotgatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imbotgateway.BotgatewayService",
	HandlerType: (*BotgatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthSignUp",
			Handler:    _BotgatewayService_AuthSignUp_Handler,
		},
		{
			MethodName: "GetFullUser",
			Handler:    _BotgatewayService_GetFullUser_Handler,
		},
		{
			MethodName: "DeleteUserInfoById",
			Handler:    _BotgatewayService_DeleteUserInfoById_Handler,
		},
		{
			MethodName: "UpdateUserName",
			Handler:    _BotgatewayService_UpdateUserName_Handler,
		},
		{
			MethodName: "RegisterUserInfo",
			Handler:    _BotgatewayService_RegisterUserInfo_Handler,
		},
		{
			MethodName: "UpdateBotPic",
			Handler:    _BotgatewayService_UpdateBotPic_Handler,
		},
		{
			MethodName: "UpdateBotInfo",
			Handler:    _BotgatewayService_UpdateBotInfo_Handler,
		},
		{
			MethodName: "UpdateBotInfoSupp",
			Handler:    _BotgatewayService_UpdateBotInfoSupp_Handler,
		},
		{
			MethodName: "GetUserInfoByPhone",
			Handler:    _BotgatewayService_GetUserInfoByPhone_Handler,
		},
		{
			MethodName: "UpdateUserProfile",
			Handler:    _BotgatewayService_UpdateUserProfile_Handler,
		},
		{
			MethodName: "GetUserInfoById",
			Handler:    _BotgatewayService_GetUserInfoById_Handler,
		},
		{
			MethodName: "GetUserInfoByUsername",
			Handler:    _BotgatewayService_GetUserInfoByUsername_Handler,
		},
		{
			MethodName: "GetStickerSetPackDcInfos",
			Handler:    _BotgatewayService_GetStickerSetPackDcInfos_Handler,
		},
		{
			MethodName: "StoreStickerSet",
			Handler:    _BotgatewayService_StoreStickerSet_Handler,
		},
		{
			MethodName: "StoreStickerPackDc",
			Handler:    _BotgatewayService_StoreStickerPackDc_Handler,
		},
		{
			MethodName: "StoreUserStickerSet",
			Handler:    _BotgatewayService_StoreUserStickerSet_Handler,
		},
		{
			MethodName: "DeleteShopStickerSet",
			Handler:    _BotgatewayService_DeleteShopStickerSet_Handler,
		},
		{
			MethodName: "GetStickerSetInfo",
			Handler:    _BotgatewayService_GetStickerSetInfo_Handler,
		},
		{
			MethodName: "DeleteStickerPackDocument",
			Handler:    _BotgatewayService_DeleteStickerPackDocument_Handler,
		},
		{
			MethodName: "GetAuthorAllStickerSet",
			Handler:    _BotgatewayService_GetAuthorAllStickerSet_Handler,
		},
		{
			MethodName: "StoreStickerSetDocument",
			Handler:    _BotgatewayService_StoreStickerSetDocument_Handler,
		},
		{
			MethodName: "GetUsersChats",
			Handler:    _BotgatewayService_GetUsersChats_Handler,
		},
		{
			MethodName: "GetChatInfo",
			Handler:    _BotgatewayService_GetChatInfo_Handler,
		},
		{
			MethodName: "LeaveChat",
			Handler:    _BotgatewayService_LeaveChat_Handler,
		},
		{
			MethodName: "GetChat",
			Handler:    _BotgatewayService_GetChat_Handler,
		},
		{
			MethodName: "GetChatMembersCount",
			Handler:    _BotgatewayService_GetChatMembersCount_Handler,
		},
		{
			MethodName: "GetChatAdministrators",
			Handler:    _BotgatewayService_GetChatAdministrators_Handler,
		},
		{
			MethodName: "SetChatTitle",
			Handler:    _BotgatewayService_SetChatTitle_Handler,
		},
		{
			MethodName: "SetChatDescription",
			Handler:    _BotgatewayService_SetChatDescription_Handler,
		},
		{
			MethodName: "UpdatePinnedChannelMessage",
			Handler:    _BotgatewayService_UpdatePinnedChannelMessage_Handler,
		},
		{
			MethodName: "SendChatAction",
			Handler:    _BotgatewayService_SendChatAction_Handler,
		},
		{
			MethodName: "SendContact",
			Handler:    _BotgatewayService_SendContact_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _BotgatewayService_DeleteMessage_Handler,
		},
		{
			MethodName: "GetGroups",
			Handler:    _BotgatewayService_GetGroups_Handler,
		},
		{
			MethodName: "GetAdminGroups",
			Handler:    _BotgatewayService_GetAdminGroups_Handler,
		},
		{
			MethodName: "SetManualBlockList",
			Handler:    _BotgatewayService_SetManualBlockList_Handler,
		},
		{
			MethodName: "DelManualBlockList",
			Handler:    _BotgatewayService_DelManualBlockList_Handler,
		},
		{
			MethodName: "LeaveGroup",
			Handler:    _BotgatewayService_LeaveGroup_Handler,
		},
		{
			MethodName: "GetChannelInfo",
			Handler:    _BotgatewayService_GetChannelInfo_Handler,
		},
		{
			MethodName: "GatewayGetFileDesc",
			Handler:    _BotgatewayService_GatewayGetFileDesc_Handler,
		},
		{
			MethodName: "QueryObjInfo",
			Handler:    _BotgatewayService_QueryObjInfo_Handler,
		},
		{
			MethodName: "DownloadFile",
			Handler:    _BotgatewayService_DownloadFile_Handler,
		},
		{
			MethodName: "UploadFile",
			Handler:    _BotgatewayService_UploadFile_Handler,
		},
		{
			MethodName: "GatewayUploadFile",
			Handler:    _BotgatewayService_GatewayUploadFile_Handler,
		},
		{
			MethodName: "GatewayUploadFileDesc",
			Handler:    _BotgatewayService_GatewayUploadFileDesc_Handler,
		},
		{
			MethodName: "GatewayGetUploadFileFid",
			Handler:    _BotgatewayService_GatewayGetUploadFileFid_Handler,
		},
		{
			MethodName: "ServiceLimit",
			Handler:    _BotgatewayService_ServiceLimit_Handler,
		},
		{
			MethodName: "BotCall",
			Handler:    _BotgatewayService_BotCall_Handler,
		},
		{
			MethodName: "GetMessageByUserIdMsgId",
			Handler:    _BotgatewayService_GetMessageByUserIdMsgId_Handler,
		},
		{
			MethodName: "GetChannelMessageByChannelIdMsgId",
			Handler:    _BotgatewayService_GetChannelMessageByChannelIdMsgId_Handler,
		},
		{
			MethodName: "GetMessageByUserIdUuid",
			Handler:    _BotgatewayService_GetMessageByUserIdUuid_Handler,
		},
		{
			MethodName: "BotCallMessageMedia",
			Handler:    _BotgatewayService_BotCallMessageMedia_Handler,
		},
		{
			MethodName: "SendUserMsg",
			Handler:    _BotgatewayService_SendUserMsg_Handler,
		},
		{
			MethodName: "BotInlineCall",
			Handler:    _BotgatewayService_BotInlineCall_Handler,
		},
		{
			MethodName: "GetChannelInactiveUsers",
			Handler:    _BotgatewayService_GetChannelInactiveUsers_Handler,
		},
		{
			MethodName: "DeleteChatUser",
			Handler:    _BotgatewayService_DeleteChatUser_Handler,
		},
		{
			MethodName: "Getchannels",
			Handler:    _BotgatewayService_Getchannels_Handler,
		},
		{
			MethodName: "EditBanChannelUser",
			Handler:    _BotgatewayService_EditBanChannelUser_Handler,
		},
		{
			MethodName: "SetGameScore",
			Handler:    _BotgatewayService_SetGameScore_Handler,
		},
		{
			MethodName: "GetDialog",
			Handler:    _BotgatewayService_GetDialog_Handler,
		},
		{
			MethodName: "ChangeGroupAndChannelCrator",
			Handler:    _BotgatewayService_ChangeGroupAndChannelCrator_Handler,
		},
		{
			MethodName: "JoinChannel",
			Handler:    _BotgatewayService_JoinChannel_Handler,
		},
		{
			MethodName: "GetParticipants",
			Handler:    _BotgatewayService_GetParticipants_Handler,
		},
		{
			MethodName: "MigrateChat",
			Handler:    _BotgatewayService_MigrateChat_Handler,
		},
		{
			MethodName: "CreateChat",
			Handler:    _BotgatewayService_CreateChat_Handler,
		},
		{
			MethodName: "GetFullChat",
			Handler:    _BotgatewayService_GetFullChat_Handler,
		},
		{
			MethodName: "LeaveChannel",
			Handler:    _BotgatewayService_LeaveChannel_Handler,
		},
		{
			MethodName: "SendMedia",
			Handler:    _BotgatewayService_SendMedia_Handler,
		},
		{
			MethodName: "EditChatTitle",
			Handler:    _BotgatewayService_EditChatTitle_Handler,
		},
		{
			MethodName: "Resize",
			Handler:    _BotgatewayService_Resize_Handler,
		},
		{
			MethodName: "Constraint",
			Handler:    _BotgatewayService_Constraint_Handler,
		},
		{
			MethodName: "CompressImage",
			Handler:    _BotgatewayService_CompressImage_Handler,
		},
		{
			MethodName: "GetVideoPreview",
			Handler:    _BotgatewayService_GetVideoPreview_Handler,
		},
		{
			MethodName: "GetAudioPreview",
			Handler:    _BotgatewayService_GetAudioPreview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "imbotgateway.proto",
}
