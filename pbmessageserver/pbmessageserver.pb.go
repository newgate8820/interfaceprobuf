// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/pbmessageserver/pbmessageserver.proto

/*
Package pbmessageserver is a generated protocol buffer package.

It is generated from these files:

	gitlab.chatserver.im/interfaceprobuf/pbmessageserver/pbmessageserver.proto

It has these top-level messages:

	ReqSendMediaSysNotify
	FailUser
	SucceedUser
	CallBackRespSendMediaSysNotify
	RespSendMediaSysNotify
	ReqEditMessageMedia
	RespEditMessageMedia
	InlineCall
	ChannelInactiveUser
	GetChannelInactiveUsersReq
	GetChannelInactiveUsersResult
	GetSecurityRandomIdsReq
	GetSecurityRandomIdsResult
	LogoutDisCardAllSecurityReq
	LogoutDisCardAllSecurityResult
	SetEncryptedTypingReq
	SetEncryptedTypingResult
	ReadEncryptedHistoryReq
	ReadEncryptedHistoryResult
	DiscardEncryptionReq
	DiscardEncryptionResult
	SendEncryptedServiceReq
	SendEncryptedServiceResult
	SendEncryptedFileReq
	SendEncryptedFileResult
	SendEncryptedReq
	SendEncryptedResult
	AcceptEncryptionReq
	AcceptEncryptionResult
	RequestEncryptionReq
	RequestEncryptionResult
	ReqBotCall
	ReplyBotCall
	ReqBotInlineCall
	ReplyBotInlineCall
	ReqSetGameScore
	ReplySetGameScore
	ReqRemoveConn
	ReplyRemoveConn
	ReqSignUpMsg
	ReqSendCodeMsg
	ReqSignInMsg
	ReqSendSynMsg
	ReqSendUserMsg
	ReqSendUserOneClientMsg
	ReqSendMoreUserMsg
	ReqSendCallMsg
	ReqCallPush
	ReplyCallPush
	ReqGetState
	ReplyResult
	ReplyNull
	ReqGetPts
	ReplyGetPts
	RequestDialog
	ReplyDialog
	UserIdRating
	ReplyGetLastLimitDialog
	ReqPinnedDialogs
	ReqPeerDialogs
	ReqRecentLocations
	ReqPinDialog
	ReqReorderPinnedDialogs
	ReplyBool
	RequestSendMessage
	SendVoteReq
	SendVoteReply
	RequestSySSendMessage
	ReqS2SMsg
	ReplyS2SMsg
	ReqSendMedia
	ReqUploadMedia
	ReqForwardMessages
	ReplyForwardMessages
	Msg
	ReqGetMsgs
	ReplyGetMsgs
	ReqHistory
	ReplyHistory
	ReqCreateChat
	ReplyCreateChat
	ReqAddChatUser
	ReplyAddChatUser
	ReqDeleteChatUser
	ReplyDeleteChatUser
	ReqEditChatAdmin
	ReplyEditChatAdmin
	ReqEditChatTitle
	ReplyEditChatTitle
	ReqGetAllChats
	ReplyGetAllChats
	ReqGetFullChat
	ReplyGetFullChat
	ReqEditChatPhoto
	ReplyEditChatPhoto
	ReqMigrateChat
	ReplyMigrateChat
	ReqReadHistory
	ReplyReadHistory
	ReqUpdateReadOut
	ReplyUpdateReadOut
	ReqDiffByPts
	ReplyDiffByPts
	ReqDeleteHistory
	ReplyDeleteHistory
	ReqDeleteMessages
	ReplyDeleteMessages
	ReqEditMessage
	ReplyEditMessage
	ReqNotifySettings
	ReplyNotifySettings
	ReqUpdateNotifySettings
	ReplyUpdateNotifySettings
	ReqMessageEditData
	ReplyMessageEditData
	ReqSaveMsgDraft
	ReplySaveMsgDraft
	ReqGetUserUnRead
	ReplyUserUnread
	InputChannel
	InputChannelEmpty
	InputChannelinputChannel
	MessageActionEditChannelPhoto
	MessageActionEditChannelAbout
	MessageActionDeleteChannelMessages
	MessageActionDeleteChannelHistory
	MessageActionUpdatePinnedChannelMessage
	MessageActionCheckChannelUsername
	MessageActionUpdateChannelUsername
	MessageActionExportChannelInvite
	MessageActionDeleteChannel
	MessageActionChannelCreate
	MessageActionAddChannelUser
	MessageActionDeleteChannelUser
	MessageActionUserLeaveChannel
	MessageActionEditChannelTitle
	UserStatusOnline
	UserStatusOffline
	UserStatusLastMonth
	Status
	UserInfo
	Channel
	UpdateNewChannelMessage
	RequestChannel
	ReplyChannel
	RequestChannelInvite
	ReplyChannelInvite
	ReqJoinChannel
	ReplyJoinChannel
	ReqChannelKick
	ReplyChannelKick
	ReqLeaveChannel
	ReplyLeaveChannel
	ReqEditChannelTitle
	ReplyEditChannelTitle
	ReqEditChannelAdmin
	ReplyEditChannelAdmin
	ReqEditChannelPhoto
	ReplyEditChannelPhoto
	ChatInviteExported
	ReqEditChannelAbout
	ReplyEditChannelAbout
	ReqDeleteChannelMessages
	ReplyDeleteChannelMessages
	ReqDeleteChannelSelfHistory
	ReqDeleteChannelHistory
	ReplyDeleteChannelHistory
	ReqUpdatePinnedChannelMessage
	ReplyUpdatePinnedChannelMessage
	ReqDeleteChannel
	ReplyDeleteChannel
	ReqReadChannelHistory
	ReplyReadChannelHistory
	ReqUpdateChannelReadOut
	ReplyUpdateChannelReadOut
	ReqGetchannelDifference
	ReplyChannelDiffCommon
	ReplyGetChannelDifferenceEmpty
	ReplyGetChannelDifference
	ReplyGetChannelDifferenceTooLong
	ReqGetChannelMsgHistory
	ReplyChannelMsgs
	ReqParticipants
	ReplyParticipants
	ReqParticipant
	ReplyParticipant
	ReqGetChannelMsgsByMsgsId
	ReqGetChannelCommonDialogs
	ChannelDialog
	ChannelDialogAndMsg
	ChannelDialogAndMsgs
	UserMsg
	RequestWebPMessage
	ReplyRequestWebPagePreview
	Reqpushusermsg
	ReplyPush
	ReqMessageSearch
	ReplyMessageSearch
	ReqCheckChatInvite
	ReqGetChannelsLastMsgsByUserId
	ReplyGetChannelsLastMsgsByUserId
	ReqChannelAdminLog
	ChannelAdminLogEventFilter
	ReplyChannelAdminLog
	ReqImportChatInvite
	ReplyImportChatInvite
	ReqBanChannelUser
	ReplyBanChannelUser
	ChannelBannedRights
	ReqFullchannel
	ReqExportChannelLink
	ReplyExportChannelLink
	ReqChannelToggleInvite
	ReplyChannelToggleInvite
	ReqChannelUpdateUserName
	ReplyChannelUpdateUserName
	ReqChannelCheckUserName
	ReplyChannelCheckUserName
	ReqChangeGroupAndChannelCrator
	ReplyChangeGroupAndChannelCrator
	ReqGetChannels
	ReplyGetChannels
	ReplyFullChannel
	ReqGetMessageByUserIdMsgId
	ReplyGetMessageByUserIdMsgId
	ReqGetMessageByUserIdUuid
	ReplyGetMessageByUserIdUuid
	ReqGetChannelMessageByChannelIdMsgId
	ReplyGetChannelMessageByChannelIdMsgId
	ReplyStoreOtherInfoMsg
	ReplyBatchStoreOtherInfoMsg
	ReplyGetOtherInfoMsg
	ReqGetUsersChatsMt
	ReplyGetUsersChatsMt
	ReqGifQueryAndUpload
	ReplyGifQueryAndUpload
	FidData
	ReqGifSearchApi
	ReplyGifSearchApi
	SearchData
	Pagination
	ReqReceiveRedPacket
	ReplyReceiveRedPacket
	ReqGetWebPage
	ReplyGetWebPage
	WebPage
	ReqGetWebPagePreview
	ReplyGetWebPagePreview
	UserScore
	FoldersEditPeerFoldersReq
	FoldersEditPeerFoldersReply
	FoldersDeleteFolderReq
	FoldersDeleteFolderReply
	ReqSendPaymentNotifyMsg
	RspSendPaymentNotifyMsg
	ReqSendAddMutulContactNotify
	RespSendAddMutulContactNotify
	ReqSendAddSingleContactNotify
	RespSendAddSingleContactNotify
*/
package pbmessageserver

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import pbcomm "gitlab.chatserver.im/interfaceprobuf/pbcomm"
import messagedb "gitlab.chatserver.im/interfaceprobuf/pbmessagedb"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GetSecurityRandomIdsResult_ErrorCode int32

const (
	GetSecurityRandomIdsResult_Success GetSecurityRandomIdsResult_ErrorCode = 0
	GetSecurityRandomIdsResult_Failed  GetSecurityRandomIdsResult_ErrorCode = 1
)

var GetSecurityRandomIdsResult_ErrorCode_name = map[int32]string{
	0: "Success",
	1: "Failed",
}
var GetSecurityRandomIdsResult_ErrorCode_value = map[string]int32{
	"Success": 0,
	"Failed":  1,
}

func (x GetSecurityRandomIdsResult_ErrorCode) String() string {
	return proto.EnumName(GetSecurityRandomIdsResult_ErrorCode_name, int32(x))
}
func (GetSecurityRandomIdsResult_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{12, 0}
}

type LogoutDisCardAllSecurityResult_ErrorCode int32

const (
	LogoutDisCardAllSecurityResult_Success LogoutDisCardAllSecurityResult_ErrorCode = 0
	LogoutDisCardAllSecurityResult_Failed  LogoutDisCardAllSecurityResult_ErrorCode = 1
)

var LogoutDisCardAllSecurityResult_ErrorCode_name = map[int32]string{
	0: "Success",
	1: "Failed",
}
var LogoutDisCardAllSecurityResult_ErrorCode_value = map[string]int32{
	"Success": 0,
	"Failed":  1,
}

func (x LogoutDisCardAllSecurityResult_ErrorCode) String() string {
	return proto.EnumName(LogoutDisCardAllSecurityResult_ErrorCode_name, int32(x))
}
func (LogoutDisCardAllSecurityResult_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{14, 0}
}

type SetEncryptedTypingResult_Errcode int32

const (
	SetEncryptedTypingResult_Success       SetEncryptedTypingResult_Errcode = 0
	SetEncryptedTypingResult_failed        SetEncryptedTypingResult_Errcode = 1
	SetEncryptedTypingResult_AccessHashErr SetEncryptedTypingResult_Errcode = 2
)

var SetEncryptedTypingResult_Errcode_name = map[int32]string{
	0: "Success",
	1: "failed",
	2: "AccessHashErr",
}
var SetEncryptedTypingResult_Errcode_value = map[string]int32{
	"Success":       0,
	"failed":        1,
	"AccessHashErr": 2,
}

func (x SetEncryptedTypingResult_Errcode) String() string {
	return proto.EnumName(SetEncryptedTypingResult_Errcode_name, int32(x))
}
func (SetEncryptedTypingResult_Errcode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{16, 0}
}

type ReadEncryptedHistoryResult_Errcode int32

const (
	ReadEncryptedHistoryResult_Success       ReadEncryptedHistoryResult_Errcode = 0
	ReadEncryptedHistoryResult_failed        ReadEncryptedHistoryResult_Errcode = 1
	ReadEncryptedHistoryResult_AccessHashErr ReadEncryptedHistoryResult_Errcode = 2
)

var ReadEncryptedHistoryResult_Errcode_name = map[int32]string{
	0: "Success",
	1: "failed",
	2: "AccessHashErr",
}
var ReadEncryptedHistoryResult_Errcode_value = map[string]int32{
	"Success":       0,
	"failed":        1,
	"AccessHashErr": 2,
}

func (x ReadEncryptedHistoryResult_Errcode) String() string {
	return proto.EnumName(ReadEncryptedHistoryResult_Errcode_name, int32(x))
}
func (ReadEncryptedHistoryResult_Errcode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{18, 0}
}

type DiscardEncryptionResult_Errcode int32

const (
	DiscardEncryptionResult_Success       DiscardEncryptionResult_Errcode = 0
	DiscardEncryptionResult_failed        DiscardEncryptionResult_Errcode = 2
	DiscardEncryptionResult_AccessHashErr DiscardEncryptionResult_Errcode = 3
)

var DiscardEncryptionResult_Errcode_name = map[int32]string{
	0: "Success",
	2: "failed",
	3: "AccessHashErr",
}
var DiscardEncryptionResult_Errcode_value = map[string]int32{
	"Success":       0,
	"failed":        2,
	"AccessHashErr": 3,
}

func (x DiscardEncryptionResult_Errcode) String() string {
	return proto.EnumName(DiscardEncryptionResult_Errcode_name, int32(x))
}
func (DiscardEncryptionResult_Errcode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{20, 0}
}

type SendEncryptedServiceResult_Errcode int32

const (
	SendEncryptedServiceResult_Success        SendEncryptedServiceResult_Errcode = 0
	SendEncryptedServiceResult_Repeatedhandle SendEncryptedServiceResult_Errcode = 1
	SendEncryptedServiceResult_ChatNotExist   SendEncryptedServiceResult_Errcode = 2
	SendEncryptedServiceResult_DbError        SendEncryptedServiceResult_Errcode = 3
	SendEncryptedServiceResult_AccessHashErr  SendEncryptedServiceResult_Errcode = 4
)

var SendEncryptedServiceResult_Errcode_name = map[int32]string{
	0: "Success",
	1: "Repeatedhandle",
	2: "ChatNotExist",
	3: "DbError",
	4: "AccessHashErr",
}
var SendEncryptedServiceResult_Errcode_value = map[string]int32{
	"Success":        0,
	"Repeatedhandle": 1,
	"ChatNotExist":   2,
	"DbError":        3,
	"AccessHashErr":  4,
}

func (x SendEncryptedServiceResult_Errcode) String() string {
	return proto.EnumName(SendEncryptedServiceResult_Errcode_name, int32(x))
}
func (SendEncryptedServiceResult_Errcode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{22, 0}
}

type SendEncryptedFileResult_Errcode int32

const (
	SendEncryptedFileResult_Success        SendEncryptedFileResult_Errcode = 0
	SendEncryptedFileResult_Repeatedhandle SendEncryptedFileResult_Errcode = 1
	SendEncryptedFileResult_ChatNotExist   SendEncryptedFileResult_Errcode = 2
	SendEncryptedFileResult_DbError        SendEncryptedFileResult_Errcode = 3
	SendEncryptedFileResult_AccessHashErr  SendEncryptedFileResult_Errcode = 4
)

var SendEncryptedFileResult_Errcode_name = map[int32]string{
	0: "Success",
	1: "Repeatedhandle",
	2: "ChatNotExist",
	3: "DbError",
	4: "AccessHashErr",
}
var SendEncryptedFileResult_Errcode_value = map[string]int32{
	"Success":        0,
	"Repeatedhandle": 1,
	"ChatNotExist":   2,
	"DbError":        3,
	"AccessHashErr":  4,
}

func (x SendEncryptedFileResult_Errcode) String() string {
	return proto.EnumName(SendEncryptedFileResult_Errcode_name, int32(x))
}
func (SendEncryptedFileResult_Errcode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{24, 0}
}

type SendEncryptedResult_Errcode int32

const (
	SendEncryptedResult_Success        SendEncryptedResult_Errcode = 0
	SendEncryptedResult_Repeatedhandle SendEncryptedResult_Errcode = 1
	SendEncryptedResult_ChatNotExist   SendEncryptedResult_Errcode = 2
	SendEncryptedResult_DbError        SendEncryptedResult_Errcode = 3
	SendEncryptedResult_AccessHashErr  SendEncryptedResult_Errcode = 4
)

var SendEncryptedResult_Errcode_name = map[int32]string{
	0: "Success",
	1: "Repeatedhandle",
	2: "ChatNotExist",
	3: "DbError",
	4: "AccessHashErr",
}
var SendEncryptedResult_Errcode_value = map[string]int32{
	"Success":        0,
	"Repeatedhandle": 1,
	"ChatNotExist":   2,
	"DbError":        3,
	"AccessHashErr":  4,
}

func (x SendEncryptedResult_Errcode) String() string {
	return proto.EnumName(SendEncryptedResult_Errcode_name, int32(x))
}
func (SendEncryptedResult_Errcode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{26, 0}
}

type AcceptEncryptionResult_Errcode int32

const (
	AcceptEncryptionResult_Success        AcceptEncryptionResult_Errcode = 0
	AcceptEncryptionResult_AlreadyAccept  AcceptEncryptionResult_Errcode = 1
	AcceptEncryptionResult_Repeatedhandle AcceptEncryptionResult_Errcode = 2
	AcceptEncryptionResult_DbError        AcceptEncryptionResult_Errcode = 3
	AcceptEncryptionResult_AccessHashErr  AcceptEncryptionResult_Errcode = 4
)

var AcceptEncryptionResult_Errcode_name = map[int32]string{
	0: "Success",
	1: "AlreadyAccept",
	2: "Repeatedhandle",
	3: "DbError",
	4: "AccessHashErr",
}
var AcceptEncryptionResult_Errcode_value = map[string]int32{
	"Success":        0,
	"AlreadyAccept":  1,
	"Repeatedhandle": 2,
	"DbError":        3,
	"AccessHashErr":  4,
}

func (x AcceptEncryptionResult_Errcode) String() string {
	return proto.EnumName(AcceptEncryptionResult_Errcode_name, int32(x))
}
func (AcceptEncryptionResult_Errcode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{28, 0}
}

type RequestEncryptionResult_ErroCode int32

const (
	RequestEncryptionResult_SusscessFull       RequestEncryptionResult_ErroCode = 0
	RequestEncryptionResult_GenIdFailed        RequestEncryptionResult_ErroCode = 1
	RequestEncryptionResult_DbError            RequestEncryptionResult_ErroCode = 2
	RequestEncryptionResult_Restricted         RequestEncryptionResult_ErroCode = 3
	RequestEncryptionResult_ParticipantBlocked RequestEncryptionResult_ErroCode = 4
)

var RequestEncryptionResult_ErroCode_name = map[int32]string{
	0: "SusscessFull",
	1: "GenIdFailed",
	2: "DbError",
	3: "Restricted",
	4: "ParticipantBlocked",
}
var RequestEncryptionResult_ErroCode_value = map[string]int32{
	"SusscessFull":       0,
	"GenIdFailed":        1,
	"DbError":            2,
	"Restricted":         3,
	"ParticipantBlocked": 4,
}

func (x RequestEncryptionResult_ErroCode) String() string {
	return proto.EnumName(RequestEncryptionResult_ErroCode_name, int32(x))
}
func (RequestEncryptionResult_ErroCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{30, 0}
}

// 系统号推送富文本消息请求接口
type ReqSendMediaSysNotify struct {
	MsgId      string        `protobuf:"bytes,1,opt,name=msgId,proto3" json:"msgId,omitempty"`
	FromId     int32         `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	SourceCode int32         `protobuf:"varint,3,opt,name=sourceCode,proto3" json:"sourceCode,omitempty"`
	Request    []byte        `protobuf:"bytes,4,opt,name=request,proto3" json:"request,omitempty"`
	Layer      int32         `protobuf:"varint,5,opt,name=layer,proto3" json:"layer,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqSendMediaSysNotify) Reset()         { *m = ReqSendMediaSysNotify{} }
func (m *ReqSendMediaSysNotify) String() string { return proto.CompactTextString(m) }
func (*ReqSendMediaSysNotify) ProtoMessage()    {}
func (*ReqSendMediaSysNotify) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{0}
}

func (m *ReqSendMediaSysNotify) GetMsgId() string {
	if m != nil {
		return m.MsgId
	}
	return ""
}

func (m *ReqSendMediaSysNotify) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqSendMediaSysNotify) GetSourceCode() int32 {
	if m != nil {
		return m.SourceCode
	}
	return 0
}

func (m *ReqSendMediaSysNotify) GetRequest() []byte {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ReqSendMediaSysNotify) GetLayer() int32 {
	if m != nil {
		return m.Layer
	}
	return 0
}

func (m *ReqSendMediaSysNotify) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 系统号推送富文本消息返回接口
type FailUser struct {
	User int32  `protobuf:"varint,1,opt,name=user,proto3" json:"user,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *FailUser) Reset()                    { *m = FailUser{} }
func (m *FailUser) String() string            { return proto.CompactTextString(m) }
func (*FailUser) ProtoMessage()               {}
func (*FailUser) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{1} }

func (m *FailUser) GetUser() int32 {
	if m != nil {
		return m.User
	}
	return 0
}

func (m *FailUser) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type SucceedUser struct {
	User int32  `protobuf:"varint,1,opt,name=user,proto3" json:"user,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *SucceedUser) Reset()                    { *m = SucceedUser{} }
func (m *SucceedUser) String() string            { return proto.CompactTextString(m) }
func (*SucceedUser) ProtoMessage()               {}
func (*SucceedUser) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{2} }

func (m *SucceedUser) GetUser() int32 {
	if m != nil {
		return m.User
	}
	return 0
}

func (m *SucceedUser) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// 后台管理回调填充数据
type CallBackRespSendMediaSysNotify struct {
	FailUsers    []*FailUser    `protobuf:"bytes,2,rep,name=failUsers" json:"failUsers,omitempty"`
	SucceedUsers []*SucceedUser `protobuf:"bytes,3,rep,name=SucceedUsers" json:"SucceedUsers,omitempty"`
}

func (m *CallBackRespSendMediaSysNotify) Reset()         { *m = CallBackRespSendMediaSysNotify{} }
func (m *CallBackRespSendMediaSysNotify) String() string { return proto.CompactTextString(m) }
func (*CallBackRespSendMediaSysNotify) ProtoMessage()    {}
func (*CallBackRespSendMediaSysNotify) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{3}
}

func (m *CallBackRespSendMediaSysNotify) GetFailUsers() []*FailUser {
	if m != nil {
		return m.FailUsers
	}
	return nil
}

func (m *CallBackRespSendMediaSysNotify) GetSucceedUsers() []*SucceedUser {
	if m != nil {
		return m.SucceedUsers
	}
	return nil
}

type RespSendMediaSysNotify struct {
	ErrorCode int32  `protobuf:"varint,1,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	ErrorMsg  string `protobuf:"bytes,2,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
}

func (m *RespSendMediaSysNotify) Reset()         { *m = RespSendMediaSysNotify{} }
func (m *RespSendMediaSysNotify) String() string { return proto.CompactTextString(m) }
func (*RespSendMediaSysNotify) ProtoMessage()    {}
func (*RespSendMediaSysNotify) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{4}
}

func (m *RespSendMediaSysNotify) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *RespSendMediaSysNotify) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

// 编辑媒体消息
type ReqEditMessageMedia struct {
	FormId    int32         `protobuf:"varint,1,opt,name=form_id,json=formId,proto3" json:"form_id,omitempty"`
	FromKeyid uint64        `protobuf:"varint,2,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Peer      []byte        `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Id        int32         `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	Media     []byte        `protobuf:"bytes,5,opt,name=media,proto3" json:"media,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqEditMessageMedia) Reset()         { *m = ReqEditMessageMedia{} }
func (m *ReqEditMessageMedia) String() string { return proto.CompactTextString(m) }
func (*ReqEditMessageMedia) ProtoMessage()    {}
func (*ReqEditMessageMedia) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{5}
}

func (m *ReqEditMessageMedia) GetFormId() int32 {
	if m != nil {
		return m.FormId
	}
	return 0
}

func (m *ReqEditMessageMedia) GetFromKeyid() uint64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqEditMessageMedia) GetPeer() []byte {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *ReqEditMessageMedia) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ReqEditMessageMedia) GetMedia() []byte {
	if m != nil {
		return m.Media
	}
	return nil
}

func (m *ReqEditMessageMedia) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type RespEditMessageMedia struct {
	UpdateEditMessage []byte `protobuf:"bytes,1,opt,name=UpdateEditMessage,proto3" json:"UpdateEditMessage,omitempty"`
	Error             int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *RespEditMessageMedia) Reset()         { *m = RespEditMessageMedia{} }
func (m *RespEditMessageMedia) String() string { return proto.CompactTextString(m) }
func (*RespEditMessageMedia) ProtoMessage()    {}
func (*RespEditMessageMedia) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{6}
}

func (m *RespEditMessageMedia) GetUpdateEditMessage() []byte {
	if m != nil {
		return m.UpdateEditMessage
	}
	return nil
}

func (m *RespEditMessageMedia) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

type InlineCall struct {
	MsgId    int32 `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	FromId   int32 `protobuf:"varint,2,opt,name=FromId,proto3" json:"FromId,omitempty"`
	ChatId   int32 `protobuf:"varint,3,opt,name=ChatId,proto3" json:"ChatId,omitempty"`
	ChatType int32 `protobuf:"varint,4,opt,name=ChatType,proto3" json:"ChatType,omitempty"`
	BotId    int32 `protobuf:"varint,5,opt,name=BotId,proto3" json:"BotId,omitempty"`
}

func (m *InlineCall) Reset()                    { *m = InlineCall{} }
func (m *InlineCall) String() string            { return proto.CompactTextString(m) }
func (*InlineCall) ProtoMessage()               {}
func (*InlineCall) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{7} }

func (m *InlineCall) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *InlineCall) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *InlineCall) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *InlineCall) GetChatType() int32 {
	if m != nil {
		return m.ChatType
	}
	return 0
}

func (m *InlineCall) GetBotId() int32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

type ChannelInactiveUser struct {
	Id      int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Time    int32  `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	TimeStr string `protobuf:"bytes,4,opt,name=timeStr,proto3" json:"timeStr,omitempty"`
}

func (m *ChannelInactiveUser) Reset()         { *m = ChannelInactiveUser{} }
func (m *ChannelInactiveUser) String() string { return proto.CompactTextString(m) }
func (*ChannelInactiveUser) ProtoMessage()    {}
func (*ChannelInactiveUser) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{8}
}

func (m *ChannelInactiveUser) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ChannelInactiveUser) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChannelInactiveUser) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *ChannelInactiveUser) GetTimeStr() string {
	if m != nil {
		return m.TimeStr
	}
	return ""
}

type GetChannelInactiveUsersReq struct {
	ChannelId int32 `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Limit     int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Userid    int32 `protobuf:"varint,3,opt,name=userid,proto3" json:"userid,omitempty"`
}

func (m *GetChannelInactiveUsersReq) Reset()         { *m = GetChannelInactiveUsersReq{} }
func (m *GetChannelInactiveUsersReq) String() string { return proto.CompactTextString(m) }
func (*GetChannelInactiveUsersReq) ProtoMessage()    {}
func (*GetChannelInactiveUsersReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{9}
}

func (m *GetChannelInactiveUsersReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *GetChannelInactiveUsersReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetChannelInactiveUsersReq) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

type GetChannelInactiveUsersResult struct {
	Users []*ChannelInactiveUser `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
	Count int32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *GetChannelInactiveUsersResult) Reset()         { *m = GetChannelInactiveUsersResult{} }
func (m *GetChannelInactiveUsersResult) String() string { return proto.CompactTextString(m) }
func (*GetChannelInactiveUsersResult) ProtoMessage()    {}
func (*GetChannelInactiveUsersResult) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{10}
}

func (m *GetChannelInactiveUsersResult) GetUsers() []*ChannelInactiveUser {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *GetChannelInactiveUsersResult) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// 获取加密聊天的randomId的请求
type GetSecurityRandomIdsReq struct {
	KeyId  int64         `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	MaxQts int32         `protobuf:"varint,2,opt,name=max_qts,json=maxQts,proto3" json:"max_qts,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetSecurityRandomIdsReq) Reset()         { *m = GetSecurityRandomIdsReq{} }
func (m *GetSecurityRandomIdsReq) String() string { return proto.CompactTextString(m) }
func (*GetSecurityRandomIdsReq) ProtoMessage()    {}
func (*GetSecurityRandomIdsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{11}
}

func (m *GetSecurityRandomIdsReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *GetSecurityRandomIdsReq) GetMaxQts() int32 {
	if m != nil {
		return m.MaxQts
	}
	return 0
}

func (m *GetSecurityRandomIdsReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 获取加密聊天的randomId 们的返回值
type GetSecurityRandomIdsResult struct {
	Errcode   GetSecurityRandomIdsResult_ErrorCode `protobuf:"varint,1,opt,name=errcode,proto3,enum=pbmessageserver.GetSecurityRandomIdsResult_ErrorCode" json:"errcode,omitempty"`
	RandomIds []int64                              `protobuf:"varint,2,rep,packed,name=random_ids,json=randomIds" json:"random_ids,omitempty"`
}

func (m *GetSecurityRandomIdsResult) Reset()         { *m = GetSecurityRandomIdsResult{} }
func (m *GetSecurityRandomIdsResult) String() string { return proto.CompactTextString(m) }
func (*GetSecurityRandomIdsResult) ProtoMessage()    {}
func (*GetSecurityRandomIdsResult) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{12}
}

func (m *GetSecurityRandomIdsResult) GetErrcode() GetSecurityRandomIdsResult_ErrorCode {
	if m != nil {
		return m.Errcode
	}
	return GetSecurityRandomIdsResult_Success
}

func (m *GetSecurityRandomIdsResult) GetRandomIds() []int64 {
	if m != nil {
		return m.RandomIds
	}
	return nil
}

// LogOut后删除所有的加密聊天的请求
type LogoutDisCardAllSecurityReq struct {
	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	KeyId  int64         `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *LogoutDisCardAllSecurityReq) Reset()         { *m = LogoutDisCardAllSecurityReq{} }
func (m *LogoutDisCardAllSecurityReq) String() string { return proto.CompactTextString(m) }
func (*LogoutDisCardAllSecurityReq) ProtoMessage()    {}
func (*LogoutDisCardAllSecurityReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{13}
}

func (m *LogoutDisCardAllSecurityReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *LogoutDisCardAllSecurityReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *LogoutDisCardAllSecurityReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// LogOut后删除所有的加密聊天的返回
type LogoutDisCardAllSecurityResult struct {
	Errcode LogoutDisCardAllSecurityResult_ErrorCode `protobuf:"varint,1,opt,name=errcode,proto3,enum=pbmessageserver.LogoutDisCardAllSecurityResult_ErrorCode" json:"errcode,omitempty"`
}

func (m *LogoutDisCardAllSecurityResult) Reset()         { *m = LogoutDisCardAllSecurityResult{} }
func (m *LogoutDisCardAllSecurityResult) String() string { return proto.CompactTextString(m) }
func (*LogoutDisCardAllSecurityResult) ProtoMessage()    {}
func (*LogoutDisCardAllSecurityResult) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{14}
}

func (m *LogoutDisCardAllSecurityResult) GetErrcode() LogoutDisCardAllSecurityResult_ErrorCode {
	if m != nil {
		return m.Errcode
	}
	return LogoutDisCardAllSecurityResult_Success
}

// 加密聊天settyping状态
type SetEncryptedTypingReq struct {
	UserId     int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	KeyId      int64         `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	ChatId     int32         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	AccessHash int64         `protobuf:"varint,4,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *SetEncryptedTypingReq) Reset()         { *m = SetEncryptedTypingReq{} }
func (m *SetEncryptedTypingReq) String() string { return proto.CompactTextString(m) }
func (*SetEncryptedTypingReq) ProtoMessage()    {}
func (*SetEncryptedTypingReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{15}
}

func (m *SetEncryptedTypingReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SetEncryptedTypingReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *SetEncryptedTypingReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *SetEncryptedTypingReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *SetEncryptedTypingReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 加密聊天settyping返回
type SetEncryptedTypingResult struct {
	ErrorCode SetEncryptedTypingResult_Errcode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=pbmessageserver.SetEncryptedTypingResult_Errcode" json:"error_code,omitempty"`
}

func (m *SetEncryptedTypingResult) Reset()         { *m = SetEncryptedTypingResult{} }
func (m *SetEncryptedTypingResult) String() string { return proto.CompactTextString(m) }
func (*SetEncryptedTypingResult) ProtoMessage()    {}
func (*SetEncryptedTypingResult) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{16}
}

func (m *SetEncryptedTypingResult) GetErrorCode() SetEncryptedTypingResult_Errcode {
	if m != nil {
		return m.ErrorCode
	}
	return SetEncryptedTypingResult_Success
}

// 加密聊天双钩的请求
type ReadEncryptedHistoryReq struct {
	UserId     int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	KeyId      int64         `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	ChatId     int32         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	AccessHash int64         `protobuf:"varint,4,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	MaxDate    int32         `protobuf:"varint,5,opt,name=max_date,json=maxDate,proto3" json:"max_date,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReadEncryptedHistoryReq) Reset()         { *m = ReadEncryptedHistoryReq{} }
func (m *ReadEncryptedHistoryReq) String() string { return proto.CompactTextString(m) }
func (*ReadEncryptedHistoryReq) ProtoMessage()    {}
func (*ReadEncryptedHistoryReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{17}
}

func (m *ReadEncryptedHistoryReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReadEncryptedHistoryReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *ReadEncryptedHistoryReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *ReadEncryptedHistoryReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReadEncryptedHistoryReq) GetMaxDate() int32 {
	if m != nil {
		return m.MaxDate
	}
	return 0
}

func (m *ReadEncryptedHistoryReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 加密聊天双钩的返回
type ReadEncryptedHistoryResult struct {
	ErrorCode ReadEncryptedHistoryResult_Errcode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=pbmessageserver.ReadEncryptedHistoryResult_Errcode" json:"error_code,omitempty"`
}

func (m *ReadEncryptedHistoryResult) Reset()         { *m = ReadEncryptedHistoryResult{} }
func (m *ReadEncryptedHistoryResult) String() string { return proto.CompactTextString(m) }
func (*ReadEncryptedHistoryResult) ProtoMessage()    {}
func (*ReadEncryptedHistoryResult) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{18}
}

func (m *ReadEncryptedHistoryResult) GetErrorCode() ReadEncryptedHistoryResult_Errcode {
	if m != nil {
		return m.ErrorCode
	}
	return ReadEncryptedHistoryResult_Success
}

// 加密聊天取消请求
type DiscardEncryptionReq struct {
	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	KeyId  int64         `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	ChatId int32         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *DiscardEncryptionReq) Reset()         { *m = DiscardEncryptionReq{} }
func (m *DiscardEncryptionReq) String() string { return proto.CompactTextString(m) }
func (*DiscardEncryptionReq) ProtoMessage()    {}
func (*DiscardEncryptionReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{19}
}

func (m *DiscardEncryptionReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DiscardEncryptionReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *DiscardEncryptionReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *DiscardEncryptionReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 加密聊天取消返回
type DiscardEncryptionResult struct {
	ErrorCode DiscardEncryptionResult_Errcode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=pbmessageserver.DiscardEncryptionResult_Errcode" json:"error_code,omitempty"`
}

func (m *DiscardEncryptionResult) Reset()         { *m = DiscardEncryptionResult{} }
func (m *DiscardEncryptionResult) String() string { return proto.CompactTextString(m) }
func (*DiscardEncryptionResult) ProtoMessage()    {}
func (*DiscardEncryptionResult) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{20}
}

func (m *DiscardEncryptionResult) GetErrorCode() DiscardEncryptionResult_Errcode {
	if m != nil {
		return m.ErrorCode
	}
	return DiscardEncryptionResult_Success
}

// 发送加密聊天发送service请求
type SendEncryptedServiceReq struct {
	SendId     int32         `protobuf:"varint,1,opt,name=send_id,json=sendId,proto3" json:"send_id,omitempty"`
	KeyId      int64         `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	ChatId     int32         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	AccessHash int64         `protobuf:"varint,4,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	RandomId   int64         `protobuf:"varint,5,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	Data       []byte        `protobuf:"bytes,6,opt,name=Data,proto3" json:"Data,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug" json:"debug,omitempty"`
}

func (m *SendEncryptedServiceReq) Reset()         { *m = SendEncryptedServiceReq{} }
func (m *SendEncryptedServiceReq) String() string { return proto.CompactTextString(m) }
func (*SendEncryptedServiceReq) ProtoMessage()    {}
func (*SendEncryptedServiceReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{21}
}

func (m *SendEncryptedServiceReq) GetSendId() int32 {
	if m != nil {
		return m.SendId
	}
	return 0
}

func (m *SendEncryptedServiceReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *SendEncryptedServiceReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *SendEncryptedServiceReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *SendEncryptedServiceReq) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *SendEncryptedServiceReq) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SendEncryptedServiceReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 发送加密聊天发送service的返回
type SendEncryptedServiceResult struct {
	ErrorCode SendEncryptedServiceResult_Errcode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=pbmessageserver.SendEncryptedServiceResult_Errcode" json:"error_code,omitempty"`
}

func (m *SendEncryptedServiceResult) Reset()         { *m = SendEncryptedServiceResult{} }
func (m *SendEncryptedServiceResult) String() string { return proto.CompactTextString(m) }
func (*SendEncryptedServiceResult) ProtoMessage()    {}
func (*SendEncryptedServiceResult) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{22}
}

func (m *SendEncryptedServiceResult) GetErrorCode() SendEncryptedServiceResult_Errcode {
	if m != nil {
		return m.ErrorCode
	}
	return SendEncryptedServiceResult_Success
}

// 发送加密聊天发送没提 消息的请求
type SendEncryptedFileReq struct {
	SendId     int32         `protobuf:"varint,1,opt,name=send_id,json=sendId,proto3" json:"send_id,omitempty"`
	KeyId      int64         `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	ChatId     int32         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	AccessHash int64         `protobuf:"varint,4,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	RandomId   int64         `protobuf:"varint,5,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	Data       []byte        `protobuf:"bytes,6,opt,name=Data,proto3" json:"Data,omitempty"`
	File       []byte        `protobuf:"bytes,7,opt,name=file,proto3" json:"file,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,8,opt,name=debug" json:"debug,omitempty"`
}

func (m *SendEncryptedFileReq) Reset()         { *m = SendEncryptedFileReq{} }
func (m *SendEncryptedFileReq) String() string { return proto.CompactTextString(m) }
func (*SendEncryptedFileReq) ProtoMessage()    {}
func (*SendEncryptedFileReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{23}
}

func (m *SendEncryptedFileReq) GetSendId() int32 {
	if m != nil {
		return m.SendId
	}
	return 0
}

func (m *SendEncryptedFileReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *SendEncryptedFileReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *SendEncryptedFileReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *SendEncryptedFileReq) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *SendEncryptedFileReq) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SendEncryptedFileReq) GetFile() []byte {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *SendEncryptedFileReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 发送媒体消息的返回
type SendEncryptedFileResult struct {
	ErrorCode SendEncryptedFileResult_Errcode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=pbmessageserver.SendEncryptedFileResult_Errcode" json:"error_code,omitempty"`
}

func (m *SendEncryptedFileResult) Reset()         { *m = SendEncryptedFileResult{} }
func (m *SendEncryptedFileResult) String() string { return proto.CompactTextString(m) }
func (*SendEncryptedFileResult) ProtoMessage()    {}
func (*SendEncryptedFileResult) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{24}
}

func (m *SendEncryptedFileResult) GetErrorCode() SendEncryptedFileResult_Errcode {
	if m != nil {
		return m.ErrorCode
	}
	return SendEncryptedFileResult_Success
}

// 发送加密聊天发送普通文本消息的请求
type SendEncryptedReq struct {
	SendId     int32         `protobuf:"varint,1,opt,name=send_id,json=sendId,proto3" json:"send_id,omitempty"`
	KeyId      int64         `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	ChatId     int32         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	AccessHash int64         `protobuf:"varint,4,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	RandomId   int64         `protobuf:"varint,5,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	Data       []byte        `protobuf:"bytes,6,opt,name=Data,proto3" json:"Data,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug" json:"debug,omitempty"`
}

func (m *SendEncryptedReq) Reset()         { *m = SendEncryptedReq{} }
func (m *SendEncryptedReq) String() string { return proto.CompactTextString(m) }
func (*SendEncryptedReq) ProtoMessage()    {}
func (*SendEncryptedReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{25}
}

func (m *SendEncryptedReq) GetSendId() int32 {
	if m != nil {
		return m.SendId
	}
	return 0
}

func (m *SendEncryptedReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *SendEncryptedReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *SendEncryptedReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *SendEncryptedReq) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *SendEncryptedReq) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SendEncryptedReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 发送加密聊天发送普通文本消息的返回
type SendEncryptedResult struct {
	ErrorCode SendEncryptedResult_Errcode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=pbmessageserver.SendEncryptedResult_Errcode" json:"error_code,omitempty"`
}

func (m *SendEncryptedResult) Reset()         { *m = SendEncryptedResult{} }
func (m *SendEncryptedResult) String() string { return proto.CompactTextString(m) }
func (*SendEncryptedResult) ProtoMessage()    {}
func (*SendEncryptedResult) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{26}
}

func (m *SendEncryptedResult) GetErrorCode() SendEncryptedResult_Errcode {
	if m != nil {
		return m.ErrorCode
	}
	return SendEncryptedResult_Success
}

// B端接收的请求
type AcceptEncryptionReq struct {
	ParticipartId    int32         `protobuf:"varint,1,opt,name=participart_id,json=participartId,proto3" json:"participart_id,omitempty"`
	ParticipartKeyId int64         `protobuf:"varint,2,opt,name=participart_key_id,json=participartKeyId,proto3" json:"participart_key_id,omitempty"`
	ChatId           int32         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	AccessHash       int64         `protobuf:"varint,4,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	GB               []byte        `protobuf:"bytes,5,opt,name=G_b,json=GB,proto3" json:"G_b,omitempty"`
	KeyFingerprint   int64         `protobuf:"varint,6,opt,name=Key_fingerprint,json=KeyFingerprint,proto3" json:"Key_fingerprint,omitempty"`
	Debug            *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug" json:"debug,omitempty"`
}

func (m *AcceptEncryptionReq) Reset()         { *m = AcceptEncryptionReq{} }
func (m *AcceptEncryptionReq) String() string { return proto.CompactTextString(m) }
func (*AcceptEncryptionReq) ProtoMessage()    {}
func (*AcceptEncryptionReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{27}
}

func (m *AcceptEncryptionReq) GetParticipartId() int32 {
	if m != nil {
		return m.ParticipartId
	}
	return 0
}

func (m *AcceptEncryptionReq) GetParticipartKeyId() int64 {
	if m != nil {
		return m.ParticipartKeyId
	}
	return 0
}

func (m *AcceptEncryptionReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *AcceptEncryptionReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *AcceptEncryptionReq) GetGB() []byte {
	if m != nil {
		return m.GB
	}
	return nil
}

func (m *AcceptEncryptionReq) GetKeyFingerprint() int64 {
	if m != nil {
		return m.KeyFingerprint
	}
	return 0
}

func (m *AcceptEncryptionReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// B端接收的请求的返回
type AcceptEncryptionResult struct {
	AdminId         int32                          `protobuf:"varint,1,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`
	GAOrB           []byte                         `protobuf:"bytes,2,opt,name=G_a_or_b,json=GAOrB,proto3" json:"G_a_or_b,omitempty"`
	KeyFingerPrint2 int64                          `protobuf:"varint,3,opt,name=keyFingerPrint2,proto3" json:"keyFingerPrint2,omitempty"`
	ChatId          int32                          `protobuf:"varint,4,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	AccessHash      int64                          `protobuf:"varint,5,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	ErrorCode       AcceptEncryptionResult_Errcode `protobuf:"varint,6,opt,name=error_code,json=errorCode,proto3,enum=pbmessageserver.AcceptEncryptionResult_Errcode" json:"error_code,omitempty"`
}

func (m *AcceptEncryptionResult) Reset()         { *m = AcceptEncryptionResult{} }
func (m *AcceptEncryptionResult) String() string { return proto.CompactTextString(m) }
func (*AcceptEncryptionResult) ProtoMessage()    {}
func (*AcceptEncryptionResult) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{28}
}

func (m *AcceptEncryptionResult) GetAdminId() int32 {
	if m != nil {
		return m.AdminId
	}
	return 0
}

func (m *AcceptEncryptionResult) GetGAOrB() []byte {
	if m != nil {
		return m.GAOrB
	}
	return nil
}

func (m *AcceptEncryptionResult) GetKeyFingerPrint2() int64 {
	if m != nil {
		return m.KeyFingerPrint2
	}
	return 0
}

func (m *AcceptEncryptionResult) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *AcceptEncryptionResult) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *AcceptEncryptionResult) GetErrorCode() AcceptEncryptionResult_Errcode {
	if m != nil {
		return m.ErrorCode
	}
	return AcceptEncryptionResult_Success
}

// 发起加密聊天请求
type RequestEncryptionReq struct {
	AdminId       int32         `protobuf:"varint,1,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`
	AdminKeyId    int64         `protobuf:"varint,2,opt,name=admin_key_id,json=adminKeyId,proto3" json:"admin_key_id,omitempty"`
	ParticipantId int32         `protobuf:"varint,3,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	AccessHash    int64         `protobuf:"varint,4,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	GA            []byte        `protobuf:"bytes,5,opt,name=g_a,json=gA,proto3" json:"g_a,omitempty"`
	Debug         *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug" json:"debug,omitempty"`
}

func (m *RequestEncryptionReq) Reset()         { *m = RequestEncryptionReq{} }
func (m *RequestEncryptionReq) String() string { return proto.CompactTextString(m) }
func (*RequestEncryptionReq) ProtoMessage()    {}
func (*RequestEncryptionReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{29}
}

func (m *RequestEncryptionReq) GetAdminId() int32 {
	if m != nil {
		return m.AdminId
	}
	return 0
}

func (m *RequestEncryptionReq) GetAdminKeyId() int64 {
	if m != nil {
		return m.AdminKeyId
	}
	return 0
}

func (m *RequestEncryptionReq) GetParticipantId() int32 {
	if m != nil {
		return m.ParticipantId
	}
	return 0
}

func (m *RequestEncryptionReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *RequestEncryptionReq) GetGA() []byte {
	if m != nil {
		return m.GA
	}
	return nil
}

func (m *RequestEncryptionReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 发起加密聊天的返回结果
type RequestEncryptionResult struct {
	ChatId     int32                            `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	AccessHash int64                            `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	ErrorCode  RequestEncryptionResult_ErroCode `protobuf:"varint,3,opt,name=errorCode,proto3,enum=pbmessageserver.RequestEncryptionResult_ErroCode" json:"errorCode,omitempty"`
}

func (m *RequestEncryptionResult) Reset()         { *m = RequestEncryptionResult{} }
func (m *RequestEncryptionResult) String() string { return proto.CompactTextString(m) }
func (*RequestEncryptionResult) ProtoMessage()    {}
func (*RequestEncryptionResult) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{30}
}

func (m *RequestEncryptionResult) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *RequestEncryptionResult) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *RequestEncryptionResult) GetErrorCode() RequestEncryptionResult_ErroCode {
	if m != nil {
		return m.ErrorCode
	}
	return RequestEncryptionResult_SusscessFull
}

// 机器人调用接口
type ReqBotCall struct {
	FrombotId int32         `protobuf:"varint,1,opt,name=frombotId,proto3" json:"frombotId,omitempty"`
	Request   []byte        `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	Layer     int32         `protobuf:"varint,3,opt,name=layer,proto3" json:"layer,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqBotCall) Reset()                    { *m = ReqBotCall{} }
func (m *ReqBotCall) String() string            { return proto.CompactTextString(m) }
func (*ReqBotCall) ProtoMessage()               {}
func (*ReqBotCall) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{31} }

func (m *ReqBotCall) GetFrombotId() int32 {
	if m != nil {
		return m.FrombotId
	}
	return 0
}

func (m *ReqBotCall) GetRequest() []byte {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ReqBotCall) GetLayer() int32 {
	if m != nil {
		return m.Layer
	}
	return 0
}

func (m *ReqBotCall) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 机器人返回接口
type ReplyBotCall struct {
	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyBotCall) Reset()                    { *m = ReplyBotCall{} }
func (m *ReplyBotCall) String() string            { return proto.CompactTextString(m) }
func (*ReplyBotCall) ProtoMessage()               {}
func (*ReplyBotCall) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{32} }

func (m *ReplyBotCall) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyBotCall) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// 机器人调用接口-Inline
type ReqBotInlineCall struct {
	Debug     *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug" json:"debug,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BotId     int32         `protobuf:"varint,3,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	MessageId uint64        `protobuf:"varint,4,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	KeyId     uint64        `protobuf:"varint,5,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	SessionId uint64        `protobuf:"varint,6,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Data      []byte        `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	Id        string        `protobuf:"bytes,8,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *ReqBotInlineCall) Reset()         { *m = ReqBotInlineCall{} }
func (m *ReqBotInlineCall) String() string { return proto.CompactTextString(m) }
func (*ReqBotInlineCall) ProtoMessage()    {}
func (*ReqBotInlineCall) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{33}
}

func (m *ReqBotInlineCall) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *ReqBotInlineCall) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqBotInlineCall) GetBotId() int32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *ReqBotInlineCall) GetMessageId() uint64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *ReqBotInlineCall) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *ReqBotInlineCall) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *ReqBotInlineCall) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReqBotInlineCall) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// 机器人返回接口-Inline
type ReplyBotInlineCall struct {
	ErrCode    int32       `protobuf:"varint,1,opt,name=err_code,json=errCode,proto3" json:"err_code,omitempty"`
	Message    string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Inlinecall *InlineCall `protobuf:"bytes,3,opt,name=inlinecall" json:"inlinecall,omitempty"`
}

func (m *ReplyBotInlineCall) Reset()         { *m = ReplyBotInlineCall{} }
func (m *ReplyBotInlineCall) String() string { return proto.CompactTextString(m) }
func (*ReplyBotInlineCall) ProtoMessage()    {}
func (*ReplyBotInlineCall) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{34}
}

func (m *ReplyBotInlineCall) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *ReplyBotInlineCall) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ReplyBotInlineCall) GetInlinecall() *InlineCall {
	if m != nil {
		return m.Inlinecall
	}
	return nil
}

// 调用设置分数
type ReqSetGameScore struct {
	Userid             int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Scores             []*UserScore  `protobuf:"bytes,2,rep,name=scores" json:"scores,omitempty"`
	Force              bool          `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
	DisableEditMessage bool          `protobuf:"varint,4,opt,name=disable_edit_message,json=disableEditMessage,proto3" json:"disable_edit_message,omitempty"`
	ChatId             int32         `protobuf:"varint,5,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	ChatType           int32         `protobuf:"varint,6,opt,name=chat_type,json=chatType,proto3" json:"chat_type,omitempty"`
	MessageId          int32         `protobuf:"varint,7,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	InlineMessageId    string        `protobuf:"bytes,8,opt,name=inline_message_id,json=inlineMessageId,proto3" json:"inline_message_id,omitempty"`
	Botid              int32         `protobuf:"varint,9,opt,name=botid,proto3" json:"botid,omitempty"`
	Debug              *pbcomm.Debug `protobuf:"bytes,10,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqSetGameScore) Reset()                    { *m = ReqSetGameScore{} }
func (m *ReqSetGameScore) String() string            { return proto.CompactTextString(m) }
func (*ReqSetGameScore) ProtoMessage()               {}
func (*ReqSetGameScore) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{35} }

func (m *ReqSetGameScore) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *ReqSetGameScore) GetScores() []*UserScore {
	if m != nil {
		return m.Scores
	}
	return nil
}

func (m *ReqSetGameScore) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *ReqSetGameScore) GetDisableEditMessage() bool {
	if m != nil {
		return m.DisableEditMessage
	}
	return false
}

func (m *ReqSetGameScore) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *ReqSetGameScore) GetChatType() int32 {
	if m != nil {
		return m.ChatType
	}
	return 0
}

func (m *ReqSetGameScore) GetMessageId() int32 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *ReqSetGameScore) GetInlineMessageId() string {
	if m != nil {
		return m.InlineMessageId
	}
	return ""
}

func (m *ReqSetGameScore) GetBotid() int32 {
	if m != nil {
		return m.Botid
	}
	return 0
}

func (m *ReqSetGameScore) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 设置分数返回
type ReplySetGameScore struct {
	Succeed   bool   `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Error     string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Errorcode int32  `protobuf:"varint,3,opt,name=errorcode,proto3" json:"errorcode,omitempty"`
}

func (m *ReplySetGameScore) Reset()         { *m = ReplySetGameScore{} }
func (m *ReplySetGameScore) String() string { return proto.CompactTextString(m) }
func (*ReplySetGameScore) ProtoMessage()    {}
func (*ReplySetGameScore) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{36}
}

func (m *ReplySetGameScore) GetSucceed() bool {
	if m != nil {
		return m.Succeed
	}
	return false
}

func (m *ReplySetGameScore) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ReplySetGameScore) GetErrorcode() int32 {
	if m != nil {
		return m.Errorcode
	}
	return 0
}

type ReqRemoveConn struct {
	Userid     int32         `protobuf:"varint,1,opt,name=Userid,proto3" json:"Userid,omitempty"`
	RequestKey uint64        `protobuf:"varint,2,opt,name=request_key,json=requestKey,proto3" json:"request_key,omitempty"`
	RemoveType int32         `protobuf:"varint,3,opt,name=remove_type,json=removeType,proto3" json:"remove_type,omitempty"`
	RemoveKey  uint64        `protobuf:"varint,4,opt,name=remove_key,json=removeKey,proto3" json:"remove_key,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqRemoveConn) Reset()                    { *m = ReqRemoveConn{} }
func (m *ReqRemoveConn) String() string            { return proto.CompactTextString(m) }
func (*ReqRemoveConn) ProtoMessage()               {}
func (*ReqRemoveConn) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{37} }

func (m *ReqRemoveConn) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *ReqRemoveConn) GetRequestKey() uint64 {
	if m != nil {
		return m.RequestKey
	}
	return 0
}

func (m *ReqRemoveConn) GetRemoveType() int32 {
	if m != nil {
		return m.RemoveType
	}
	return 0
}

func (m *ReqRemoveConn) GetRemoveKey() uint64 {
	if m != nil {
		return m.RemoveKey
	}
	return 0
}

func (m *ReqRemoveConn) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyRemoveConn struct {
	Error int32 `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyRemoveConn) Reset()                    { *m = ReplyRemoveConn{} }
func (m *ReplyRemoveConn) String() string            { return proto.CompactTextString(m) }
func (*ReplyRemoveConn) ProtoMessage()               {}
func (*ReplyRemoveConn) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{38} }

func (m *ReplyRemoveConn) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// 注册激活系统号
type ReqSignUpMsg struct {
	Userid     int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	AccessHash int64         `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqSignUpMsg) Reset()                    { *m = ReqSignUpMsg{} }
func (m *ReqSignUpMsg) String() string            { return proto.CompactTextString(m) }
func (*ReqSignUpMsg) ProtoMessage()               {}
func (*ReqSignUpMsg) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{39} }

func (m *ReqSignUpMsg) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *ReqSignUpMsg) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqSignUpMsg) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 发送短信
type ReqSendCodeMsg struct {
	Userid     int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	AccessHash int64         `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Keyid      uint64        `protobuf:"varint,3,opt,name=keyid,proto3" json:"keyid,omitempty"`
	Code       string        `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqSendCodeMsg) Reset()                    { *m = ReqSendCodeMsg{} }
func (m *ReqSendCodeMsg) String() string            { return proto.CompactTextString(m) }
func (*ReqSendCodeMsg) ProtoMessage()               {}
func (*ReqSendCodeMsg) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{40} }

func (m *ReqSendCodeMsg) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *ReqSendCodeMsg) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqSendCodeMsg) GetKeyid() uint64 {
	if m != nil {
		return m.Keyid
	}
	return 0
}

func (m *ReqSendCodeMsg) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *ReqSendCodeMsg) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 发送ip消息
type ReqSignInMsg struct {
	Userid     int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	AccessHash int64         `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Keyid      uint64        `protobuf:"varint,3,opt,name=keyid,proto3" json:"keyid,omitempty"`
	Name       string        `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	Device     string        `protobuf:"bytes,5,opt,name=Device,proto3" json:"Device,omitempty"`
	Location   string        `protobuf:"bytes,6,opt,name=Location,proto3" json:"Location,omitempty"`
	IP         string        `protobuf:"bytes,7,opt,name=IP,proto3" json:"IP,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,8,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqSignInMsg) Reset()                    { *m = ReqSignInMsg{} }
func (m *ReqSignInMsg) String() string            { return proto.CompactTextString(m) }
func (*ReqSignInMsg) ProtoMessage()               {}
func (*ReqSignInMsg) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{41} }

func (m *ReqSignInMsg) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *ReqSignInMsg) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqSignInMsg) GetKeyid() uint64 {
	if m != nil {
		return m.Keyid
	}
	return 0
}

func (m *ReqSignInMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReqSignInMsg) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *ReqSignInMsg) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *ReqSignInMsg) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *ReqSignInMsg) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 多端同步发送
type ReqSendSynMsg struct {
	Userid int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Keyid  int64         `protobuf:"varint,2,opt,name=keyid,proto3" json:"keyid,omitempty"`
	Data   []byte        `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqSendSynMsg) Reset()                    { *m = ReqSendSynMsg{} }
func (m *ReqSendSynMsg) String() string            { return proto.CompactTextString(m) }
func (*ReqSendSynMsg) ProtoMessage()               {}
func (*ReqSendSynMsg) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{42} }

func (m *ReqSendSynMsg) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *ReqSendSynMsg) GetKeyid() int64 {
	if m != nil {
		return m.Keyid
	}
	return 0
}

func (m *ReqSendSynMsg) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReqSendSynMsg) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 发送给对方所有端
type ReqSendUserMsg struct {
	Fromid    int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	FromKeyId int64         `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	Toid      int32         `protobuf:"varint,3,opt,name=toid,proto3" json:"toid,omitempty"`
	Data      []byte        `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqSendUserMsg) Reset()                    { *m = ReqSendUserMsg{} }
func (m *ReqSendUserMsg) String() string            { return proto.CompactTextString(m) }
func (*ReqSendUserMsg) ProtoMessage()               {}
func (*ReqSendUserMsg) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{43} }

func (m *ReqSendUserMsg) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqSendUserMsg) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *ReqSendUserMsg) GetToid() int32 {
	if m != nil {
		return m.Toid
	}
	return 0
}

func (m *ReqSendUserMsg) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReqSendUserMsg) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 发送消息给单个端
type ReqSendUserOneClientMsg struct {
	Fromid    int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	FromKeyId int64         `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	Toid      int32         `protobuf:"varint,3,opt,name=toid,proto3" json:"toid,omitempty"`
	Tokeyid   int64         `protobuf:"varint,4,opt,name=tokeyid,proto3" json:"tokeyid,omitempty"`
	Data      []byte        `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqSendUserOneClientMsg) Reset()         { *m = ReqSendUserOneClientMsg{} }
func (m *ReqSendUserOneClientMsg) String() string { return proto.CompactTextString(m) }
func (*ReqSendUserOneClientMsg) ProtoMessage()    {}
func (*ReqSendUserOneClientMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{44}
}

func (m *ReqSendUserOneClientMsg) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqSendUserOneClientMsg) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *ReqSendUserOneClientMsg) GetToid() int32 {
	if m != nil {
		return m.Toid
	}
	return 0
}

func (m *ReqSendUserOneClientMsg) GetTokeyid() int64 {
	if m != nil {
		return m.Tokeyid
	}
	return 0
}

func (m *ReqSendUserOneClientMsg) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReqSendUserOneClientMsg) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 群发多人 (其他服务)
type ReqSendMoreUserMsg struct {
	Fromid    int32         `protobuf:"varint,1,opt,name=Fromid,proto3" json:"Fromid,omitempty"`
	FromKeyid int64         `protobuf:"varint,2,opt,name=FromKeyid,proto3" json:"FromKeyid,omitempty"`
	Toid      []int32       `protobuf:"varint,3,rep,packed,name=toid" json:"toid,omitempty"`
	Data      []byte        `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqSendMoreUserMsg) Reset()         { *m = ReqSendMoreUserMsg{} }
func (m *ReqSendMoreUserMsg) String() string { return proto.CompactTextString(m) }
func (*ReqSendMoreUserMsg) ProtoMessage()    {}
func (*ReqSendMoreUserMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{45}
}

func (m *ReqSendMoreUserMsg) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqSendMoreUserMsg) GetFromKeyid() int64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqSendMoreUserMsg) GetToid() []int32 {
	if m != nil {
		return m.Toid
	}
	return nil
}

func (m *ReqSendMoreUserMsg) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReqSendMoreUserMsg) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// ######################### 打电话 #############################
// 发送打电话消息 (其他服务)
type ReqSendCallMsg struct {
	Fromid     int32         `protobuf:"varint,1,opt,name=Fromid,proto3" json:"Fromid,omitempty"`
	FromKeyid  int64         `protobuf:"varint,2,opt,name=FromKeyid,proto3" json:"FromKeyid,omitempty"`
	Toid       int32         `protobuf:"varint,3,opt,name=toid,proto3" json:"toid,omitempty"`
	CallAction []byte        `protobuf:"bytes,5,opt,name=callAction,proto3" json:"callAction,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqSendCallMsg) Reset()                    { *m = ReqSendCallMsg{} }
func (m *ReqSendCallMsg) String() string            { return proto.CompactTextString(m) }
func (*ReqSendCallMsg) ProtoMessage()               {}
func (*ReqSendCallMsg) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{46} }

func (m *ReqSendCallMsg) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqSendCallMsg) GetFromKeyid() int64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqSendCallMsg) GetToid() int32 {
	if m != nil {
		return m.Toid
	}
	return 0
}

func (m *ReqSendCallMsg) GetCallAction() []byte {
	if m != nil {
		return m.CallAction
	}
	return nil
}

func (m *ReqSendCallMsg) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqCallPush struct {
	Fromid         int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	Toid           int32         `protobuf:"varint,2,opt,name=toid,proto3" json:"toid,omitempty"`
	Callid         int64         `protobuf:"varint,3,opt,name=callid,proto3" json:"callid,omitempty"`
	CallAccessHash int64         `protobuf:"varint,4,opt,name=callAccessHash,proto3" json:"callAccessHash,omitempty"`
	Debug          *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
	Data           []byte        `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ReqCallPush) Reset()                    { *m = ReqCallPush{} }
func (m *ReqCallPush) String() string            { return proto.CompactTextString(m) }
func (*ReqCallPush) ProtoMessage()               {}
func (*ReqCallPush) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{47} }

func (m *ReqCallPush) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqCallPush) GetToid() int32 {
	if m != nil {
		return m.Toid
	}
	return 0
}

func (m *ReqCallPush) GetCallid() int64 {
	if m != nil {
		return m.Callid
	}
	return 0
}

func (m *ReqCallPush) GetCallAccessHash() int64 {
	if m != nil {
		return m.CallAccessHash
	}
	return 0
}

func (m *ReqCallPush) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *ReqCallPush) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type ReplyCallPush struct {
	Reply bool  `protobuf:"varint,1,opt,name=reply,proto3" json:"reply,omitempty"`
	Error int32 `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyCallPush) Reset()                    { *m = ReplyCallPush{} }
func (m *ReplyCallPush) String() string            { return proto.CompactTextString(m) }
func (*ReplyCallPush) ProtoMessage()               {}
func (*ReplyCallPush) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{48} }

func (m *ReplyCallPush) GetReply() bool {
	if m != nil {
		return m.Reply
	}
	return false
}

func (m *ReplyCallPush) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// #################################################################
// 获取用户状态数据
type ReqGetState struct {
	Userid int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Keyid  uint64        `protobuf:"varint,2,opt,name=keyid,proto3" json:"keyid,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqGetState) Reset()                    { *m = ReqGetState{} }
func (m *ReqGetState) String() string            { return proto.CompactTextString(m) }
func (*ReqGetState) ProtoMessage()               {}
func (*ReqGetState) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{49} }

func (m *ReqGetState) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *ReqGetState) GetKeyid() uint64 {
	if m != nil {
		return m.Keyid
	}
	return 0
}

func (m *ReqGetState) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 状态返回
type ReplyResult struct {
	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyResult) Reset()                    { *m = ReplyResult{} }
func (m *ReplyResult) String() string            { return proto.CompactTextString(m) }
func (*ReplyResult) ProtoMessage()               {}
func (*ReplyResult) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{50} }

func (m *ReplyResult) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyResult) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

type ReplyNull struct {
}

func (m *ReplyNull) Reset()                    { *m = ReplyNull{} }
func (m *ReplyNull) String() string            { return proto.CompactTextString(m) }
func (*ReplyNull) ProtoMessage()               {}
func (*ReplyNull) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{51} }

// ############################### pts ##########################
type ReqGetPts struct {
	Userid int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqGetPts) Reset()                    { *m = ReqGetPts{} }
func (m *ReqGetPts) String() string            { return proto.CompactTextString(m) }
func (*ReqGetPts) ProtoMessage()               {}
func (*ReqGetPts) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{52} }

func (m *ReqGetPts) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *ReqGetPts) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetPts struct {
	Pts   int32 `protobuf:"varint,1,opt,name=pts,proto3" json:"pts,omitempty"`
	Error int32 `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyGetPts) Reset()                    { *m = ReplyGetPts{} }
func (m *ReplyGetPts) String() string            { return proto.CompactTextString(m) }
func (*ReplyGetPts) ProtoMessage()               {}
func (*ReplyGetPts) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{53} }

func (m *ReplyGetPts) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *ReplyGetPts) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// ################################ dialohg ######################
// 获取dialog接口
type RequestDialog struct {
	Userid     int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Flags      int32         `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	FolderId   int32         `protobuf:"varint,3,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	OffsetDate int32         `protobuf:"varint,4,opt,name=offset_date,json=offsetDate,proto3" json:"offset_date,omitempty"`
	OffsetId   int32         `protobuf:"varint,5,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
	OffsetPeer []byte        `protobuf:"bytes,6,opt,name=offset_peer,json=offsetPeer,proto3" json:"offset_peer,omitempty"`
	Limit      int32         `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,8,opt,name=debug" json:"debug,omitempty"`
}

func (m *RequestDialog) Reset()                    { *m = RequestDialog{} }
func (m *RequestDialog) String() string            { return proto.CompactTextString(m) }
func (*RequestDialog) ProtoMessage()               {}
func (*RequestDialog) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{54} }

func (m *RequestDialog) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *RequestDialog) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *RequestDialog) GetFolderId() int32 {
	if m != nil {
		return m.FolderId
	}
	return 0
}

func (m *RequestDialog) GetOffsetDate() int32 {
	if m != nil {
		return m.OffsetDate
	}
	return 0
}

func (m *RequestDialog) GetOffsetId() int32 {
	if m != nil {
		return m.OffsetId
	}
	return 0
}

func (m *RequestDialog) GetOffsetPeer() []byte {
	if m != nil {
		return m.OffsetPeer
	}
	return nil
}

func (m *RequestDialog) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *RequestDialog) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 返回dialog
type ReplyDialog struct {
	//    repeated DialogSlice dialog = 1;
	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyDialog) Reset()                    { *m = ReplyDialog{} }
func (m *ReplyDialog) String() string            { return proto.CompactTextString(m) }
func (*ReplyDialog) ProtoMessage()               {}
func (*ReplyDialog) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{55} }

func (m *ReplyDialog) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyDialog) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

type UserIdRating struct {
	UserId int32   `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Rating float64 `protobuf:"fixed64,2,opt,name=Rating,proto3" json:"Rating,omitempty"`
}

func (m *UserIdRating) Reset()                    { *m = UserIdRating{} }
func (m *UserIdRating) String() string            { return proto.CompactTextString(m) }
func (*UserIdRating) ProtoMessage()               {}
func (*UserIdRating) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{56} }

func (m *UserIdRating) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserIdRating) GetRating() float64 {
	if m != nil {
		return m.Rating
	}
	return 0
}

type ReplyGetLastLimitDialog struct {
	UserRatingList []*UserIdRating `protobuf:"bytes,1,rep,name=UserRatingList" json:"UserRatingList,omitempty"`
	ChannelIdlist  []int32         `protobuf:"varint,2,rep,packed,name=channelIdlist" json:"channelIdlist,omitempty"`
	ChatIdlist     []int32         `protobuf:"varint,3,rep,packed,name=chatIdlist" json:"chatIdlist,omitempty"`
	Error          int32           `protobuf:"varint,4,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (m *ReplyGetLastLimitDialog) Reset()         { *m = ReplyGetLastLimitDialog{} }
func (m *ReplyGetLastLimitDialog) String() string { return proto.CompactTextString(m) }
func (*ReplyGetLastLimitDialog) ProtoMessage()    {}
func (*ReplyGetLastLimitDialog) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{57}
}

func (m *ReplyGetLastLimitDialog) GetUserRatingList() []*UserIdRating {
	if m != nil {
		return m.UserRatingList
	}
	return nil
}

func (m *ReplyGetLastLimitDialog) GetChannelIdlist() []int32 {
	if m != nil {
		return m.ChannelIdlist
	}
	return nil
}

func (m *ReplyGetLastLimitDialog) GetChatIdlist() []int32 {
	if m != nil {
		return m.ChatIdlist
	}
	return nil
}

func (m *ReplyGetLastLimitDialog) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// 获去pinned dialog
type ReqPinnedDialogs struct {
	Userid   int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	FolderId int32         `protobuf:"varint,2,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	Debug    *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqPinnedDialogs) Reset()         { *m = ReqPinnedDialogs{} }
func (m *ReqPinnedDialogs) String() string { return proto.CompactTextString(m) }
func (*ReqPinnedDialogs) ProtoMessage()    {}
func (*ReqPinnedDialogs) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{58}
}

func (m *ReqPinnedDialogs) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *ReqPinnedDialogs) GetFolderId() int32 {
	if m != nil {
		return m.FolderId
	}
	return 0
}

func (m *ReqPinnedDialogs) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 获取单独对话框
type ReqPeerDialogs struct {
	Userid int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Peers  [][]byte      `protobuf:"bytes,2,rep,name=peers" json:"peers,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqPeerDialogs) Reset()                    { *m = ReqPeerDialogs{} }
func (m *ReqPeerDialogs) String() string            { return proto.CompactTextString(m) }
func (*ReqPeerDialogs) ProtoMessage()               {}
func (*ReqPeerDialogs) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{59} }

func (m *ReqPeerDialogs) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *ReqPeerDialogs) GetPeers() [][]byte {
	if m != nil {
		return m.Peers
	}
	return nil
}

func (m *ReqPeerDialogs) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 获取最近位置
type ReqRecentLocations struct {
	Userid int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Peers  []byte        `protobuf:"bytes,2,opt,name=peers,proto3" json:"peers,omitempty"`
	Limit  int32         `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqRecentLocations) Reset()         { *m = ReqRecentLocations{} }
func (m *ReqRecentLocations) String() string { return proto.CompactTextString(m) }
func (*ReqRecentLocations) ProtoMessage()    {}
func (*ReqRecentLocations) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{60}
}

func (m *ReqRecentLocations) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *ReqRecentLocations) GetPeers() []byte {
	if m != nil {
		return m.Peers
	}
	return nil
}

func (m *ReqRecentLocations) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqRecentLocations) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 置顶对话框请求
type ReqPinDialog struct {
	Userid int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Pinned bool          `protobuf:"varint,2,opt,name=pinned,proto3" json:"pinned,omitempty"`
	Peer   []byte        `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqPinDialog) Reset()                    { *m = ReqPinDialog{} }
func (m *ReqPinDialog) String() string            { return proto.CompactTextString(m) }
func (*ReqPinDialog) ProtoMessage()               {}
func (*ReqPinDialog) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{61} }

func (m *ReqPinDialog) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *ReqPinDialog) GetPinned() bool {
	if m != nil {
		return m.Pinned
	}
	return false
}

func (m *ReqPinDialog) GetPeer() []byte {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *ReqPinDialog) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// ios 置顶对话框
type ReqReorderPinnedDialogs struct {
	Userid int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Peer   [][]byte      `protobuf:"bytes,3,rep,name=peer" json:"peer,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqReorderPinnedDialogs) Reset()         { *m = ReqReorderPinnedDialogs{} }
func (m *ReqReorderPinnedDialogs) String() string { return proto.CompactTextString(m) }
func (*ReqReorderPinnedDialogs) ProtoMessage()    {}
func (*ReqReorderPinnedDialogs) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{62}
}

func (m *ReqReorderPinnedDialogs) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *ReqReorderPinnedDialogs) GetPeer() [][]byte {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *ReqReorderPinnedDialogs) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 置顶对话框返回
type ReplyBool struct {
	Result bool  `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32 `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyBool) Reset()                    { *m = ReplyBool{} }
func (m *ReplyBool) String() string            { return proto.CompactTextString(m) }
func (*ReplyBool) ProtoMessage()               {}
func (*ReplyBool) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{63} }

func (m *ReplyBool) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *ReplyBool) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// ########################## 发消息 ###############################
// 发送消息请求
type RequestSendMessage struct {
	Fromid       int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	NoWebpage    bool          `protobuf:"varint,2,opt,name=no_webpage,json=noWebpage,proto3" json:"no_webpage,omitempty"`
	Silent       bool          `protobuf:"varint,3,opt,name=silent,proto3" json:"silent,omitempty"`
	Background   bool          `protobuf:"varint,4,opt,name=background,proto3" json:"background,omitempty"`
	ClearDraft   bool          `protobuf:"varint,5,opt,name=clear_draft,json=clearDraft,proto3" json:"clear_draft,omitempty"`
	Peer         []byte        `protobuf:"bytes,6,opt,name=peer,proto3" json:"peer,omitempty"`
	ReplyToMsgId int32         `protobuf:"varint,7,opt,name=reply_to_msg_id,json=replyToMsgId,proto3" json:"reply_to_msg_id,omitempty"`
	Message      string        `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
	RandomId     int64         `protobuf:"varint,9,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	ReplyMarkup  []byte        `protobuf:"bytes,10,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`
	Entities     [][]byte      `protobuf:"bytes,11,rep,name=entities" json:"entities,omitempty"`
	FromkeyId    uint64        `protobuf:"varint,13,opt,name=fromkey_id,json=fromkeyId,proto3" json:"fromkey_id,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,15,opt,name=debug" json:"debug,omitempty"`
	IncludeChat  bool          `protobuf:"varint,16,opt,name=include_chat,json=includeChat,proto3" json:"include_chat,omitempty"`
	ViaBotId     int32         `protobuf:"varint,17,opt,name=via_bot_id,json=viaBotId,proto3" json:"via_bot_id,omitempty"`
}

func (m *RequestSendMessage) Reset()         { *m = RequestSendMessage{} }
func (m *RequestSendMessage) String() string { return proto.CompactTextString(m) }
func (*RequestSendMessage) ProtoMessage()    {}
func (*RequestSendMessage) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{64}
}

func (m *RequestSendMessage) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *RequestSendMessage) GetNoWebpage() bool {
	if m != nil {
		return m.NoWebpage
	}
	return false
}

func (m *RequestSendMessage) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *RequestSendMessage) GetBackground() bool {
	if m != nil {
		return m.Background
	}
	return false
}

func (m *RequestSendMessage) GetClearDraft() bool {
	if m != nil {
		return m.ClearDraft
	}
	return false
}

func (m *RequestSendMessage) GetPeer() []byte {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *RequestSendMessage) GetReplyToMsgId() int32 {
	if m != nil {
		return m.ReplyToMsgId
	}
	return 0
}

func (m *RequestSendMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *RequestSendMessage) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *RequestSendMessage) GetReplyMarkup() []byte {
	if m != nil {
		return m.ReplyMarkup
	}
	return nil
}

func (m *RequestSendMessage) GetEntities() [][]byte {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *RequestSendMessage) GetFromkeyId() uint64 {
	if m != nil {
		return m.FromkeyId
	}
	return 0
}

func (m *RequestSendMessage) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *RequestSendMessage) GetIncludeChat() bool {
	if m != nil {
		return m.IncludeChat
	}
	return false
}

func (m *RequestSendMessage) GetViaBotId() int32 {
	if m != nil {
		return m.ViaBotId
	}
	return 0
}

// 发送投票
type SendVoteReq struct {
	Fromid  int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	Peer    []byte        `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`
	MsgId   int32         `protobuf:"varint,3,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	Options []string      `protobuf:"bytes,4,rep,name=options" json:"options,omitempty"`
	FromKey int64         `protobuf:"varint,5,opt,name=fromKey,proto3" json:"fromKey,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug" json:"debug,omitempty"`
}

func (m *SendVoteReq) Reset()                    { *m = SendVoteReq{} }
func (m *SendVoteReq) String() string            { return proto.CompactTextString(m) }
func (*SendVoteReq) ProtoMessage()               {}
func (*SendVoteReq) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{65} }

func (m *SendVoteReq) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *SendVoteReq) GetPeer() []byte {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *SendVoteReq) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *SendVoteReq) GetOptions() []string {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *SendVoteReq) GetFromKey() int64 {
	if m != nil {
		return m.FromKey
	}
	return 0
}

func (m *SendVoteReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type SendVoteReply struct {
	Reply []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	Error int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *SendVoteReply) Reset()                    { *m = SendVoteReply{} }
func (m *SendVoteReply) String() string            { return proto.CompactTextString(m) }
func (*SendVoteReply) ProtoMessage()               {}
func (*SendVoteReply) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{66} }

func (m *SendVoteReply) GetReply() []byte {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *SendVoteReply) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// 系统号发消息
type RequestSySSendMessage struct {
	Fromid       int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	NoWebpage    bool          `protobuf:"varint,2,opt,name=no_webpage,json=noWebpage,proto3" json:"no_webpage,omitempty"`
	Silent       bool          `protobuf:"varint,3,opt,name=silent,proto3" json:"silent,omitempty"`
	Background   bool          `protobuf:"varint,4,opt,name=background,proto3" json:"background,omitempty"`
	ClearDraft   bool          `protobuf:"varint,5,opt,name=clear_draft,json=clearDraft,proto3" json:"clear_draft,omitempty"`
	Peer         []byte        `protobuf:"bytes,6,opt,name=peer,proto3" json:"peer,omitempty"`
	ReplyToMsgId int32         `protobuf:"varint,7,opt,name=reply_to_msg_id,json=replyToMsgId,proto3" json:"reply_to_msg_id,omitempty"`
	Message      string        `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
	RandomId     int64         `protobuf:"varint,9,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	ReplyMarkup  []byte        `protobuf:"bytes,10,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`
	Entities     [][]byte      `protobuf:"bytes,11,rep,name=entities" json:"entities,omitempty"`
	ChatMember   []int32       `protobuf:"varint,12,rep,packed,name=chat_member,json=chatMember" json:"chat_member,omitempty"`
	FromkeyId    uint64        `protobuf:"varint,13,opt,name=fromkey_id,json=fromkeyId,proto3" json:"fromkey_id,omitempty"`
	Phone        string        `protobuf:"bytes,14,opt,name=Phone,proto3" json:"Phone,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,15,opt,name=debug" json:"debug,omitempty"`
}

func (m *RequestSySSendMessage) Reset()         { *m = RequestSySSendMessage{} }
func (m *RequestSySSendMessage) String() string { return proto.CompactTextString(m) }
func (*RequestSySSendMessage) ProtoMessage()    {}
func (*RequestSySSendMessage) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{67}
}

func (m *RequestSySSendMessage) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *RequestSySSendMessage) GetNoWebpage() bool {
	if m != nil {
		return m.NoWebpage
	}
	return false
}

func (m *RequestSySSendMessage) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *RequestSySSendMessage) GetBackground() bool {
	if m != nil {
		return m.Background
	}
	return false
}

func (m *RequestSySSendMessage) GetClearDraft() bool {
	if m != nil {
		return m.ClearDraft
	}
	return false
}

func (m *RequestSySSendMessage) GetPeer() []byte {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *RequestSySSendMessage) GetReplyToMsgId() int32 {
	if m != nil {
		return m.ReplyToMsgId
	}
	return 0
}

func (m *RequestSySSendMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *RequestSySSendMessage) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *RequestSySSendMessage) GetReplyMarkup() []byte {
	if m != nil {
		return m.ReplyMarkup
	}
	return nil
}

func (m *RequestSySSendMessage) GetEntities() [][]byte {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *RequestSySSendMessage) GetChatMember() []int32 {
	if m != nil {
		return m.ChatMember
	}
	return nil
}

func (m *RequestSySSendMessage) GetFromkeyId() uint64 {
	if m != nil {
		return m.FromkeyId
	}
	return 0
}

func (m *RequestSySSendMessage) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *RequestSySSendMessage) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqS2SMsg struct {
	Userid       int32         `protobuf:"varint,1,opt,name=Userid,proto3" json:"Userid,omitempty"`
	WithidType   int32         `protobuf:"varint,4,opt,name=WithidType,proto3" json:"WithidType,omitempty"`
	MessageType  int32         `protobuf:"varint,5,opt,name=MessageType,proto3" json:"MessageType,omitempty"`
	Flags        int32         `protobuf:"varint,6,opt,name=Flags,proto3" json:"Flags,omitempty"`
	Out          bool          `protobuf:"varint,7,opt,name=Out,proto3" json:"Out,omitempty"`
	Mentioned    bool          `protobuf:"varint,8,opt,name=Mentioned,proto3" json:"Mentioned,omitempty"`
	MediaUnread  bool          `protobuf:"varint,9,opt,name=MediaUnread,proto3" json:"MediaUnread,omitempty"`
	Silent       bool          `protobuf:"varint,10,opt,name=Silent,proto3" json:"Silent,omitempty"`
	Post         bool          `protobuf:"varint,11,opt,name=Post,proto3" json:"Post,omitempty"`
	MsgId        int32         `protobuf:"varint,12,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	FromId       int32         `protobuf:"varint,13,opt,name=From_id,json=FromId,proto3" json:"From_id,omitempty"`
	ToId         int32         `protobuf:"varint,14,opt,name=To_id,json=ToId,proto3" json:"To_id,omitempty"`
	Pts          int32         `protobuf:"varint,15,opt,name=Pts,proto3" json:"Pts,omitempty"`
	FwdFrom      []byte        `protobuf:"bytes,16,opt,name=Fwd_from,json=FwdFrom,proto3" json:"Fwd_from,omitempty"`
	ViaBotId     int32         `protobuf:"varint,17,opt,name=ViaBotId,proto3" json:"ViaBotId,omitempty"`
	ReplyToMsgId int32         `protobuf:"varint,18,opt,name=ReplyToMsgId,proto3" json:"ReplyToMsgId,omitempty"`
	Date         int32         `protobuf:"varint,19,opt,name=Date,proto3" json:"Date,omitempty"`
	Message      string        `protobuf:"bytes,20,opt,name=Message,proto3" json:"Message,omitempty"`
	Media        int64         `protobuf:"varint,21,opt,name=Media,proto3" json:"Media,omitempty"`
	Meidadata    []byte        `protobuf:"bytes,22,opt,name=Meidadata,proto3" json:"Meidadata,omitempty"`
	ReplyMarkup  []byte        `protobuf:"bytes,23,opt,name=Reply_markup,json=ReplyMarkup,proto3" json:"Reply_markup,omitempty"`
	Entities     [][]byte      `protobuf:"bytes,24,rep,name=Entities" json:"Entities,omitempty"`
	Views        int32         `protobuf:"varint,25,opt,name=Views,proto3" json:"Views,omitempty"`
	EditDate     int32         `protobuf:"varint,26,opt,name=Edit_date,json=EditDate,proto3" json:"Edit_date,omitempty"`
	Action       []byte        `protobuf:"bytes,27,opt,name=Action,proto3" json:"Action,omitempty"`
	Uuid         int64         `protobuf:"varint,28,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	Encry        int32         `protobuf:"varint,29,opt,name=encry,proto3" json:"encry,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,30,opt,name=debug" json:"debug,omitempty"`
	Groupid      int64         `protobuf:"varint,32,opt,name=Groupid,proto3" json:"Groupid,omitempty"`
	ReplyUuid    int64         `protobuf:"varint,33,opt,name=ReplyUuid,proto3" json:"ReplyUuid,omitempty"`
}

func (m *ReqS2SMsg) Reset()                    { *m = ReqS2SMsg{} }
func (m *ReqS2SMsg) String() string            { return proto.CompactTextString(m) }
func (*ReqS2SMsg) ProtoMessage()               {}
func (*ReqS2SMsg) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{68} }

func (m *ReqS2SMsg) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *ReqS2SMsg) GetWithidType() int32 {
	if m != nil {
		return m.WithidType
	}
	return 0
}

func (m *ReqS2SMsg) GetMessageType() int32 {
	if m != nil {
		return m.MessageType
	}
	return 0
}

func (m *ReqS2SMsg) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ReqS2SMsg) GetOut() bool {
	if m != nil {
		return m.Out
	}
	return false
}

func (m *ReqS2SMsg) GetMentioned() bool {
	if m != nil {
		return m.Mentioned
	}
	return false
}

func (m *ReqS2SMsg) GetMediaUnread() bool {
	if m != nil {
		return m.MediaUnread
	}
	return false
}

func (m *ReqS2SMsg) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *ReqS2SMsg) GetPost() bool {
	if m != nil {
		return m.Post
	}
	return false
}

func (m *ReqS2SMsg) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ReqS2SMsg) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqS2SMsg) GetToId() int32 {
	if m != nil {
		return m.ToId
	}
	return 0
}

func (m *ReqS2SMsg) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *ReqS2SMsg) GetFwdFrom() []byte {
	if m != nil {
		return m.FwdFrom
	}
	return nil
}

func (m *ReqS2SMsg) GetViaBotId() int32 {
	if m != nil {
		return m.ViaBotId
	}
	return 0
}

func (m *ReqS2SMsg) GetReplyToMsgId() int32 {
	if m != nil {
		return m.ReplyToMsgId
	}
	return 0
}

func (m *ReqS2SMsg) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *ReqS2SMsg) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ReqS2SMsg) GetMedia() int64 {
	if m != nil {
		return m.Media
	}
	return 0
}

func (m *ReqS2SMsg) GetMeidadata() []byte {
	if m != nil {
		return m.Meidadata
	}
	return nil
}

func (m *ReqS2SMsg) GetReplyMarkup() []byte {
	if m != nil {
		return m.ReplyMarkup
	}
	return nil
}

func (m *ReqS2SMsg) GetEntities() [][]byte {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *ReqS2SMsg) GetViews() int32 {
	if m != nil {
		return m.Views
	}
	return 0
}

func (m *ReqS2SMsg) GetEditDate() int32 {
	if m != nil {
		return m.EditDate
	}
	return 0
}

func (m *ReqS2SMsg) GetAction() []byte {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *ReqS2SMsg) GetUuid() int64 {
	if m != nil {
		return m.Uuid
	}
	return 0
}

func (m *ReqS2SMsg) GetEncry() int32 {
	if m != nil {
		return m.Encry
	}
	return 0
}

func (m *ReqS2SMsg) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *ReqS2SMsg) GetGroupid() int64 {
	if m != nil {
		return m.Groupid
	}
	return 0
}

func (m *ReqS2SMsg) GetReplyUuid() int64 {
	if m != nil {
		return m.ReplyUuid
	}
	return 0
}

type ReplyS2SMsg struct {
	Reply int32 `protobuf:"varint,1,opt,name=reply,proto3" json:"reply,omitempty"`
	Error int32 `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyS2SMsg) Reset()                    { *m = ReplyS2SMsg{} }
func (m *ReplyS2SMsg) String() string            { return proto.CompactTextString(m) }
func (*ReplyS2SMsg) ProtoMessage()               {}
func (*ReplyS2SMsg) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{69} }

func (m *ReplyS2SMsg) GetReply() int32 {
	if m != nil {
		return m.Reply
	}
	return 0
}

func (m *ReplyS2SMsg) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// ############################# 发送媒体 ##############################
type ReqSendMedia struct {
	Fromid       int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	Flags        int32         `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	Silent       bool          `protobuf:"varint,3,opt,name=silent,proto3" json:"silent,omitempty"`
	Background   bool          `protobuf:"varint,4,opt,name=background,proto3" json:"background,omitempty"`
	ClearDraft   bool          `protobuf:"varint,5,opt,name=clear_draft,json=clearDraft,proto3" json:"clear_draft,omitempty"`
	Peer         []byte        `protobuf:"bytes,6,opt,name=peer,proto3" json:"peer,omitempty"`
	ReplyToMsgId int32         `protobuf:"varint,7,opt,name=reply_to_msg_id,json=replyToMsgId,proto3" json:"reply_to_msg_id,omitempty"`
	Media        []byte        `protobuf:"bytes,8,opt,name=media,proto3" json:"media,omitempty"`
	Message      string        `protobuf:"bytes,9,opt,name=message,proto3" json:"message,omitempty"`
	MultiMedia   [][]byte      `protobuf:"bytes,10,rep,name=multi_media,json=multiMedia" json:"multi_media,omitempty"`
	RandomId     int64         `protobuf:"varint,11,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	ReplyMarkup  []byte        `protobuf:"bytes,12,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`
	Newfileid    int64         `protobuf:"varint,13,opt,name=newfileid,proto3" json:"newfileid,omitempty"`
	Entities     [][]byte      `protobuf:"bytes,14,rep,name=entities" json:"entities,omitempty"`
	FromkeyId    uint64        `protobuf:"varint,15,opt,name=fromkey_id,json=fromkeyId,proto3" json:"fromkey_id,omitempty"`
	Chatmeber    []int32       `protobuf:"varint,16,rep,packed,name=chatmeber" json:"chatmeber,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,17,opt,name=debug" json:"debug,omitempty"`
	ViaBotId     int32         `protobuf:"varint,18,opt,name=via_bot_id,json=viaBotId,proto3" json:"via_bot_id,omitempty"`
}

func (m *ReqSendMedia) Reset()                    { *m = ReqSendMedia{} }
func (m *ReqSendMedia) String() string            { return proto.CompactTextString(m) }
func (*ReqSendMedia) ProtoMessage()               {}
func (*ReqSendMedia) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{70} }

func (m *ReqSendMedia) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqSendMedia) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ReqSendMedia) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *ReqSendMedia) GetBackground() bool {
	if m != nil {
		return m.Background
	}
	return false
}

func (m *ReqSendMedia) GetClearDraft() bool {
	if m != nil {
		return m.ClearDraft
	}
	return false
}

func (m *ReqSendMedia) GetPeer() []byte {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *ReqSendMedia) GetReplyToMsgId() int32 {
	if m != nil {
		return m.ReplyToMsgId
	}
	return 0
}

func (m *ReqSendMedia) GetMedia() []byte {
	if m != nil {
		return m.Media
	}
	return nil
}

func (m *ReqSendMedia) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ReqSendMedia) GetMultiMedia() [][]byte {
	if m != nil {
		return m.MultiMedia
	}
	return nil
}

func (m *ReqSendMedia) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *ReqSendMedia) GetReplyMarkup() []byte {
	if m != nil {
		return m.ReplyMarkup
	}
	return nil
}

func (m *ReqSendMedia) GetNewfileid() int64 {
	if m != nil {
		return m.Newfileid
	}
	return 0
}

func (m *ReqSendMedia) GetEntities() [][]byte {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *ReqSendMedia) GetFromkeyId() uint64 {
	if m != nil {
		return m.FromkeyId
	}
	return 0
}

func (m *ReqSendMedia) GetChatmeber() []int32 {
	if m != nil {
		return m.Chatmeber
	}
	return nil
}

func (m *ReqSendMedia) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *ReqSendMedia) GetViaBotId() int32 {
	if m != nil {
		return m.ViaBotId
	}
	return 0
}

// ############################# 上传媒体文件 ##########################
type ReqUploadMedia struct {
	Fromid int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	Peer   []byte        `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`
	Media  []byte        `protobuf:"bytes,3,opt,name=media,proto3" json:"media,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,15,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqUploadMedia) Reset()                    { *m = ReqUploadMedia{} }
func (m *ReqUploadMedia) String() string            { return proto.CompactTextString(m) }
func (*ReqUploadMedia) ProtoMessage()               {}
func (*ReqUploadMedia) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{71} }

func (m *ReqUploadMedia) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqUploadMedia) GetPeer() []byte {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *ReqUploadMedia) GetMedia() []byte {
	if m != nil {
		return m.Media
	}
	return nil
}

func (m *ReqUploadMedia) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// ############################# 转发消息 ##############################
type ReqForwardMessages struct {
	Fromid      int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	Flags       int32         `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	Silent      bool          `protobuf:"varint,3,opt,name=silent,proto3" json:"silent,omitempty"`
	Background  bool          `protobuf:"varint,4,opt,name=background,proto3" json:"background,omitempty"`
	WithMyScore bool          `protobuf:"varint,5,opt,name=with_my_score,json=withMyScore,proto3" json:"with_my_score,omitempty"`
	FromPeer    []byte        `protobuf:"bytes,6,opt,name=from_peer,json=fromPeer,proto3" json:"from_peer,omitempty"`
	Id          []int32       `protobuf:"varint,7,rep,packed,name=id" json:"id,omitempty"`
	RandomId    []int64       `protobuf:"varint,8,rep,packed,name=random_id,json=randomId" json:"random_id,omitempty"`
	ToPeer      []byte        `protobuf:"bytes,9,opt,name=to_peer,json=toPeer,proto3" json:"to_peer,omitempty"`
	FromKeyid   uint64        `protobuf:"varint,10,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,11,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqForwardMessages) Reset()         { *m = ReqForwardMessages{} }
func (m *ReqForwardMessages) String() string { return proto.CompactTextString(m) }
func (*ReqForwardMessages) ProtoMessage()    {}
func (*ReqForwardMessages) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{72}
}

func (m *ReqForwardMessages) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqForwardMessages) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ReqForwardMessages) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *ReqForwardMessages) GetBackground() bool {
	if m != nil {
		return m.Background
	}
	return false
}

func (m *ReqForwardMessages) GetWithMyScore() bool {
	if m != nil {
		return m.WithMyScore
	}
	return false
}

func (m *ReqForwardMessages) GetFromPeer() []byte {
	if m != nil {
		return m.FromPeer
	}
	return nil
}

func (m *ReqForwardMessages) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ReqForwardMessages) GetRandomId() []int64 {
	if m != nil {
		return m.RandomId
	}
	return nil
}

func (m *ReqForwardMessages) GetToPeer() []byte {
	if m != nil {
		return m.ToPeer
	}
	return nil
}

func (m *ReqForwardMessages) GetFromKeyid() uint64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqForwardMessages) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyForwardMessages struct {
	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyForwardMessages) Reset()         { *m = ReplyForwardMessages{} }
func (m *ReplyForwardMessages) String() string { return proto.CompactTextString(m) }
func (*ReplyForwardMessages) ProtoMessage()    {}
func (*ReplyForwardMessages) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{73}
}

func (m *ReplyForwardMessages) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyForwardMessages) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

type Msg struct {
	Type         int32    `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Flags        int32    `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	Id           int32    `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	FromId       int32    `protobuf:"varint,4,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	ToId         []byte   `protobuf:"bytes,5,opt,name=to_id,json=toId,proto3" json:"to_id,omitempty"`
	FwdFrom      []byte   `protobuf:"bytes,6,opt,name=fwd_from,json=fwdFrom,proto3" json:"fwd_from,omitempty"`
	ViaBotId     int32    `protobuf:"varint,7,opt,name=via_bot_id,json=viaBotId,proto3" json:"via_bot_id,omitempty"`
	ReplyToMsgId int32    `protobuf:"varint,8,opt,name=reply_to_msg_id,json=replyToMsgId,proto3" json:"reply_to_msg_id,omitempty"`
	Date         int32    `protobuf:"varint,9,opt,name=date,proto3" json:"date,omitempty"`
	Message      string   `protobuf:"bytes,10,opt,name=message,proto3" json:"message,omitempty"`
	Media        []byte   `protobuf:"bytes,11,opt,name=media,proto3" json:"media,omitempty"`
	MediaType    int32    `protobuf:"varint,12,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`
	ReplyMarkup  []byte   `protobuf:"bytes,13,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`
	Entities     [][]byte `protobuf:"bytes,14,rep,name=entities" json:"entities,omitempty"`
	Views        int32    `protobuf:"varint,15,opt,name=views,proto3" json:"views,omitempty"`
	EditDate     int32    `protobuf:"varint,16,opt,name=edit_date,json=editDate,proto3" json:"edit_date,omitempty"`
	Action       []byte   `protobuf:"bytes,17,opt,name=action,proto3" json:"action,omitempty"`
	Randomid     int64    `protobuf:"varint,18,opt,name=Randomid,proto3" json:"Randomid,omitempty"`
	Pts          int32    `protobuf:"varint,19,opt,name=Pts,proto3" json:"Pts,omitempty"`
}

func (m *Msg) Reset()                    { *m = Msg{} }
func (m *Msg) String() string            { return proto.CompactTextString(m) }
func (*Msg) ProtoMessage()               {}
func (*Msg) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{74} }

func (m *Msg) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Msg) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *Msg) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Msg) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *Msg) GetToId() []byte {
	if m != nil {
		return m.ToId
	}
	return nil
}

func (m *Msg) GetFwdFrom() []byte {
	if m != nil {
		return m.FwdFrom
	}
	return nil
}

func (m *Msg) GetViaBotId() int32 {
	if m != nil {
		return m.ViaBotId
	}
	return 0
}

func (m *Msg) GetReplyToMsgId() int32 {
	if m != nil {
		return m.ReplyToMsgId
	}
	return 0
}

func (m *Msg) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *Msg) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Msg) GetMedia() []byte {
	if m != nil {
		return m.Media
	}
	return nil
}

func (m *Msg) GetMediaType() int32 {
	if m != nil {
		return m.MediaType
	}
	return 0
}

func (m *Msg) GetReplyMarkup() []byte {
	if m != nil {
		return m.ReplyMarkup
	}
	return nil
}

func (m *Msg) GetEntities() [][]byte {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *Msg) GetViews() int32 {
	if m != nil {
		return m.Views
	}
	return 0
}

func (m *Msg) GetEditDate() int32 {
	if m != nil {
		return m.EditDate
	}
	return 0
}

func (m *Msg) GetAction() []byte {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *Msg) GetRandomid() int64 {
	if m != nil {
		return m.Randomid
	}
	return 0
}

func (m *Msg) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

// ################################ 获取部分消息 #####################
type ReqGetMsgs struct {
	SelfId int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	KeyId  uint64        `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Ids    []int32       `protobuf:"varint,3,rep,packed,name=ids" json:"ids,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqGetMsgs) Reset()                    { *m = ReqGetMsgs{} }
func (m *ReqGetMsgs) String() string            { return proto.CompactTextString(m) }
func (*ReqGetMsgs) ProtoMessage()               {}
func (*ReqGetMsgs) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{75} }

func (m *ReqGetMsgs) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *ReqGetMsgs) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *ReqGetMsgs) GetIds() []int32 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *ReqGetMsgs) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetMsgs struct {
	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyGetMsgs) Reset()                    { *m = ReplyGetMsgs{} }
func (m *ReplyGetMsgs) String() string            { return proto.CompactTextString(m) }
func (*ReplyGetMsgs) ProtoMessage()               {}
func (*ReplyGetMsgs) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{76} }

func (m *ReplyGetMsgs) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyGetMsgs) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// ################################ 历史获取 ########################
type ReqHistory struct {
	Selfid     int32         `protobuf:"varint,1,opt,name=Selfid,proto3" json:"Selfid,omitempty"`
	Peer       []byte        `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`
	OffsetId   int32         `protobuf:"varint,3,opt,name=Offset_id,json=OffsetId,proto3" json:"Offset_id,omitempty"`
	OffsetDate int32         `protobuf:"varint,4,opt,name=Offset_date,json=OffsetDate,proto3" json:"Offset_date,omitempty"`
	AddOffset  int32         `protobuf:"varint,5,opt,name=Add_offset,json=AddOffset,proto3" json:"Add_offset,omitempty"`
	Limit      int32         `protobuf:"varint,6,opt,name=Limit,proto3" json:"Limit,omitempty"`
	MaxId      int32         `protobuf:"varint,7,opt,name=Max_id,json=MaxId,proto3" json:"Max_id,omitempty"`
	MinId      int32         `protobuf:"varint,8,opt,name=Min_id,json=MinId,proto3" json:"Min_id,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,9,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqHistory) Reset()                    { *m = ReqHistory{} }
func (m *ReqHistory) String() string            { return proto.CompactTextString(m) }
func (*ReqHistory) ProtoMessage()               {}
func (*ReqHistory) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{77} }

func (m *ReqHistory) GetSelfid() int32 {
	if m != nil {
		return m.Selfid
	}
	return 0
}

func (m *ReqHistory) GetPeer() []byte {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *ReqHistory) GetOffsetId() int32 {
	if m != nil {
		return m.OffsetId
	}
	return 0
}

func (m *ReqHistory) GetOffsetDate() int32 {
	if m != nil {
		return m.OffsetDate
	}
	return 0
}

func (m *ReqHistory) GetAddOffset() int32 {
	if m != nil {
		return m.AddOffset
	}
	return 0
}

func (m *ReqHistory) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqHistory) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *ReqHistory) GetMinId() int32 {
	if m != nil {
		return m.MinId
	}
	return 0
}

func (m *ReqHistory) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyHistory struct {
	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyHistory) Reset()                    { *m = ReplyHistory{} }
func (m *ReplyHistory) String() string            { return proto.CompactTextString(m) }
func (*ReplyHistory) ProtoMessage()               {}
func (*ReplyHistory) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{78} }

func (m *ReplyHistory) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyHistory) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// ################################# 创建群 #########################
type ReqCreateChat struct {
	Chatid    int32         `protobuf:"varint,1,opt,name=chatid,proto3" json:"chatid,omitempty"`
	Title     string        `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Creator   int32         `protobuf:"varint,3,opt,name=creator,proto3" json:"creator,omitempty"`
	Users     []int32       `protobuf:"varint,4,rep,packed,name=users" json:"users,omitempty"`
	FromKeyid uint64        `protobuf:"varint,5,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqCreateChat) Reset()                    { *m = ReqCreateChat{} }
func (m *ReqCreateChat) String() string            { return proto.CompactTextString(m) }
func (*ReqCreateChat) ProtoMessage()               {}
func (*ReqCreateChat) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{79} }

func (m *ReqCreateChat) GetChatid() int32 {
	if m != nil {
		return m.Chatid
	}
	return 0
}

func (m *ReqCreateChat) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ReqCreateChat) GetCreator() int32 {
	if m != nil {
		return m.Creator
	}
	return 0
}

func (m *ReqCreateChat) GetUsers() []int32 {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ReqCreateChat) GetFromKeyid() uint64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqCreateChat) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyCreateChat struct {
	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	ChatId int32  `protobuf:"varint,2,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Error  int32  `protobuf:"varint,5,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyCreateChat) Reset()                    { *m = ReplyCreateChat{} }
func (m *ReplyCreateChat) String() string            { return proto.CompactTextString(m) }
func (*ReplyCreateChat) ProtoMessage()               {}
func (*ReplyCreateChat) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{80} }

func (m *ReplyCreateChat) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyCreateChat) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *ReplyCreateChat) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// ################################ 添加群成员 ######################
type ReqAddChatUser struct {
	Fromid     int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	Chatid     int32         `protobuf:"varint,2,opt,name=chatid,proto3" json:"chatid,omitempty"`
	Userid     int32         `protobuf:"varint,3,opt,name=userid,proto3" json:"userid,omitempty"`
	Fwdlimit   int32         `protobuf:"varint,4,opt,name=fwdlimit,proto3" json:"fwdlimit,omitempty"`
	FromKeyid  uint64        `protobuf:"varint,5,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	InviteType int32         `protobuf:"varint,6,opt,name=invite_type,json=inviteType,proto3" json:"invite_type,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqAddChatUser) Reset()                    { *m = ReqAddChatUser{} }
func (m *ReqAddChatUser) String() string            { return proto.CompactTextString(m) }
func (*ReqAddChatUser) ProtoMessage()               {}
func (*ReqAddChatUser) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{81} }

func (m *ReqAddChatUser) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqAddChatUser) GetChatid() int32 {
	if m != nil {
		return m.Chatid
	}
	return 0
}

func (m *ReqAddChatUser) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *ReqAddChatUser) GetFwdlimit() int32 {
	if m != nil {
		return m.Fwdlimit
	}
	return 0
}

func (m *ReqAddChatUser) GetFromKeyid() uint64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqAddChatUser) GetInviteType() int32 {
	if m != nil {
		return m.InviteType
	}
	return 0
}

func (m *ReqAddChatUser) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyAddChatUser struct {
	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyAddChatUser) Reset()         { *m = ReplyAddChatUser{} }
func (m *ReplyAddChatUser) String() string { return proto.CompactTextString(m) }
func (*ReplyAddChatUser) ProtoMessage()    {}
func (*ReplyAddChatUser) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{82}
}

func (m *ReplyAddChatUser) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyAddChatUser) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// messages.deleteChatUser#e0611f16 chat_id:int user_id:InputUser = Updates;
// ################################ 删除群成员 ######################
type ReqDeleteChatUser struct {
	Fromid    int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	Chatid    int32         `protobuf:"varint,2,opt,name=chatid,proto3" json:"chatid,omitempty"`
	Userid    int32         `protobuf:"varint,3,opt,name=userid,proto3" json:"userid,omitempty"`
	FromKeyid uint64        `protobuf:"varint,4,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqDeleteChatUser) Reset()         { *m = ReqDeleteChatUser{} }
func (m *ReqDeleteChatUser) String() string { return proto.CompactTextString(m) }
func (*ReqDeleteChatUser) ProtoMessage()    {}
func (*ReqDeleteChatUser) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{83}
}

func (m *ReqDeleteChatUser) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqDeleteChatUser) GetChatid() int32 {
	if m != nil {
		return m.Chatid
	}
	return 0
}

func (m *ReqDeleteChatUser) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *ReqDeleteChatUser) GetFromKeyid() uint64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqDeleteChatUser) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyDeleteChatUser struct {
	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyDeleteChatUser) Reset()         { *m = ReplyDeleteChatUser{} }
func (m *ReplyDeleteChatUser) String() string { return proto.CompactTextString(m) }
func (*ReplyDeleteChatUser) ProtoMessage()    {}
func (*ReplyDeleteChatUser) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{84}
}

func (m *ReplyDeleteChatUser) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyDeleteChatUser) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// ################################ 编辑群的管理员 ##################
type ReqEditChatAdmin struct {
	Fromid    int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	Chatid    int32         `protobuf:"varint,2,opt,name=chatid,proto3" json:"chatid,omitempty"`
	Userid    int32         `protobuf:"varint,3,opt,name=userid,proto3" json:"userid,omitempty"`
	FromKeyid uint64        `protobuf:"varint,4,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	IsAdmin   bool          `protobuf:"varint,5,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqEditChatAdmin) Reset()         { *m = ReqEditChatAdmin{} }
func (m *ReqEditChatAdmin) String() string { return proto.CompactTextString(m) }
func (*ReqEditChatAdmin) ProtoMessage()    {}
func (*ReqEditChatAdmin) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{85}
}

func (m *ReqEditChatAdmin) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqEditChatAdmin) GetChatid() int32 {
	if m != nil {
		return m.Chatid
	}
	return 0
}

func (m *ReqEditChatAdmin) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *ReqEditChatAdmin) GetFromKeyid() uint64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqEditChatAdmin) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

func (m *ReqEditChatAdmin) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyEditChatAdmin struct {
	Result bool  `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32 `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyEditChatAdmin) Reset()         { *m = ReplyEditChatAdmin{} }
func (m *ReplyEditChatAdmin) String() string { return proto.CompactTextString(m) }
func (*ReplyEditChatAdmin) ProtoMessage()    {}
func (*ReplyEditChatAdmin) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{86}
}

func (m *ReplyEditChatAdmin) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *ReplyEditChatAdmin) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// ################################ 编辑群名字 ######################
type ReqEditChatTitle struct {
	Fromid    int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	Chatid    int32         `protobuf:"varint,2,opt,name=chatid,proto3" json:"chatid,omitempty"`
	Title     string        `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	FromKeyid uint64        `protobuf:"varint,4,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqEditChatTitle) Reset()         { *m = ReqEditChatTitle{} }
func (m *ReqEditChatTitle) String() string { return proto.CompactTextString(m) }
func (*ReqEditChatTitle) ProtoMessage()    {}
func (*ReqEditChatTitle) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{87}
}

func (m *ReqEditChatTitle) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqEditChatTitle) GetChatid() int32 {
	if m != nil {
		return m.Chatid
	}
	return 0
}

func (m *ReqEditChatTitle) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ReqEditChatTitle) GetFromKeyid() uint64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqEditChatTitle) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyEditChatTitle struct {
	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,5,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyEditChatTitle) Reset()         { *m = ReplyEditChatTitle{} }
func (m *ReplyEditChatTitle) String() string { return proto.CompactTextString(m) }
func (*ReplyEditChatTitle) ProtoMessage()    {}
func (*ReplyEditChatTitle) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{88}
}

func (m *ReplyEditChatTitle) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyEditChatTitle) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// ############################### 获取所有群id ###################
// 获取所有群 (除去部分)
type ReqGetAllChats struct {
	Fromid int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqGetAllChats) Reset()                    { *m = ReqGetAllChats{} }
func (m *ReqGetAllChats) String() string            { return proto.CompactTextString(m) }
func (*ReqGetAllChats) ProtoMessage()               {}
func (*ReqGetAllChats) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{89} }

func (m *ReqGetAllChats) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqGetAllChats) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetAllChats struct {
	Chats []int32 `protobuf:"varint,1,rep,packed,name=chats" json:"chats,omitempty"`
	Error int32   `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyGetAllChats) Reset()         { *m = ReplyGetAllChats{} }
func (m *ReplyGetAllChats) String() string { return proto.CompactTextString(m) }
func (*ReplyGetAllChats) ProtoMessage()    {}
func (*ReplyGetAllChats) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{90}
}

func (m *ReplyGetAllChats) GetChats() []int32 {
	if m != nil {
		return m.Chats
	}
	return nil
}

func (m *ReplyGetAllChats) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// ############################### 获取群的完整信息 ################
type ReqGetFullChat struct {
	Fromid int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	Chatid int32         `protobuf:"varint,2,opt,name=chatid,proto3" json:"chatid,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqGetFullChat) Reset()                    { *m = ReqGetFullChat{} }
func (m *ReqGetFullChat) String() string            { return proto.CompactTextString(m) }
func (*ReqGetFullChat) ProtoMessage()               {}
func (*ReqGetFullChat) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{91} }

func (m *ReqGetFullChat) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqGetFullChat) GetChatid() int32 {
	if m != nil {
		return m.Chatid
	}
	return 0
}

func (m *ReqGetFullChat) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetFullChat struct {
	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyGetFullChat) Reset()         { *m = ReplyGetFullChat{} }
func (m *ReplyGetFullChat) String() string { return proto.CompactTextString(m) }
func (*ReplyGetFullChat) ProtoMessage()    {}
func (*ReplyGetFullChat) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{92}
}

func (m *ReplyGetFullChat) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyGetFullChat) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// ############################### 编辑群头像 #######################
type ReqEditChatPhoto struct {
	Fromid    int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	FromKeyid uint64        `protobuf:"varint,2,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Chatid    int32         `protobuf:"varint,3,opt,name=chatid,proto3" json:"chatid,omitempty"`
	Photo     []byte        `protobuf:"bytes,4,opt,name=photo,proto3" json:"photo,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,8,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqEditChatPhoto) Reset()         { *m = ReqEditChatPhoto{} }
func (m *ReqEditChatPhoto) String() string { return proto.CompactTextString(m) }
func (*ReqEditChatPhoto) ProtoMessage()    {}
func (*ReqEditChatPhoto) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{93}
}

func (m *ReqEditChatPhoto) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqEditChatPhoto) GetFromKeyid() uint64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqEditChatPhoto) GetChatid() int32 {
	if m != nil {
		return m.Chatid
	}
	return 0
}

func (m *ReqEditChatPhoto) GetPhoto() []byte {
	if m != nil {
		return m.Photo
	}
	return nil
}

func (m *ReqEditChatPhoto) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyEditChatPhoto struct {
	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,6,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyEditChatPhoto) Reset()         { *m = ReplyEditChatPhoto{} }
func (m *ReplyEditChatPhoto) String() string { return proto.CompactTextString(m) }
func (*ReplyEditChatPhoto) ProtoMessage()    {}
func (*ReplyEditChatPhoto) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{94}
}

func (m *ReplyEditChatPhoto) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyEditChatPhoto) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// ################################ 升级超级群 #######################
type ReqMigrateChat struct {
	Fromid int32 `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	Chatid int32 `protobuf:"varint,2,opt,name=chatid,proto3" json:"chatid,omitempty"`
	//    int32 channelid = 3; //升级后的超级群ID
	//    string title = 4; // 群标题
	//    repeated int32 members = 5; //现有用户
	//    string Phone = 6; //电话
	Fromkeyid uint64 `protobuf:"varint,3,opt,name=fromkeyid,proto3" json:"fromkeyid,omitempty"`
	//    bool isBroadCast = 8; //超级群还是频道
	Debug *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqMigrateChat) Reset()                    { *m = ReqMigrateChat{} }
func (m *ReqMigrateChat) String() string            { return proto.CompactTextString(m) }
func (*ReqMigrateChat) ProtoMessage()               {}
func (*ReqMigrateChat) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{95} }

func (m *ReqMigrateChat) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqMigrateChat) GetChatid() int32 {
	if m != nil {
		return m.Chatid
	}
	return 0
}

func (m *ReqMigrateChat) GetFromkeyid() uint64 {
	if m != nil {
		return m.Fromkeyid
	}
	return 0
}

func (m *ReqMigrateChat) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyMigrateChat struct {
	//    int32 msgid = 1; // 消息id
	//    int64 randomid = 2; // 消息随机id
	//    int32 date = 3; // 消息时间
	//    int32 pts = 4; // 消息pts
	//    int32 channelmsgid = 5; //频道的消息ID
	//    int32 channelpts = 6; //频道的PTS
	Result []byte `protobuf:"bytes,7,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,8,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyMigrateChat) Reset()         { *m = ReplyMigrateChat{} }
func (m *ReplyMigrateChat) String() string { return proto.CompactTextString(m) }
func (*ReplyMigrateChat) ProtoMessage()    {}
func (*ReplyMigrateChat) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{96}
}

func (m *ReplyMigrateChat) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyMigrateChat) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// ############################### 读取历史 #########################
type ReqReadHistory struct {
	Selfid    int32         `protobuf:"varint,1,opt,name=selfid,proto3" json:"selfid,omitempty"`
	Peer      []byte        `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`
	MaxId     int32         `protobuf:"varint,3,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	FromKeyid uint64        `protobuf:"varint,4,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,8,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqReadHistory) Reset()                    { *m = ReqReadHistory{} }
func (m *ReqReadHistory) String() string            { return proto.CompactTextString(m) }
func (*ReqReadHistory) ProtoMessage()               {}
func (*ReqReadHistory) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{97} }

func (m *ReqReadHistory) GetSelfid() int32 {
	if m != nil {
		return m.Selfid
	}
	return 0
}

func (m *ReqReadHistory) GetPeer() []byte {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *ReqReadHistory) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *ReqReadHistory) GetFromKeyid() uint64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqReadHistory) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyReadHistory struct {
	Pts   int32 `protobuf:"varint,1,opt,name=pts,proto3" json:"pts,omitempty"`
	MaxId int32 `protobuf:"varint,2,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	Error int32 `protobuf:"varint,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyReadHistory) Reset()         { *m = ReplyReadHistory{} }
func (m *ReplyReadHistory) String() string { return proto.CompactTextString(m) }
func (*ReplyReadHistory) ProtoMessage()    {}
func (*ReplyReadHistory) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{98}
}

func (m *ReplyReadHistory) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *ReplyReadHistory) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *ReplyReadHistory) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// ############################## 更新双勾 #########################
type ReqUpdateReadOut struct {
	SelfId   int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	FromId   int32         `protobuf:"varint,2,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	PeerType int32         `protobuf:"varint,3,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	Debug    *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqUpdateReadOut) Reset()         { *m = ReqUpdateReadOut{} }
func (m *ReqUpdateReadOut) String() string { return proto.CompactTextString(m) }
func (*ReqUpdateReadOut) ProtoMessage()    {}
func (*ReqUpdateReadOut) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{99}
}

func (m *ReqUpdateReadOut) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *ReqUpdateReadOut) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqUpdateReadOut) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *ReqUpdateReadOut) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyUpdateReadOut struct {
	Maxid int32 `protobuf:"varint,1,opt,name=maxid,proto3" json:"maxid,omitempty"`
	Pts   int32 `protobuf:"varint,2,opt,name=pts,proto3" json:"pts,omitempty"`
	Error int32 `protobuf:"varint,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyUpdateReadOut) Reset()         { *m = ReplyUpdateReadOut{} }
func (m *ReplyUpdateReadOut) String() string { return proto.CompactTextString(m) }
func (*ReplyUpdateReadOut) ProtoMessage()    {}
func (*ReplyUpdateReadOut) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{100}
}

func (m *ReplyUpdateReadOut) GetMaxid() int32 {
	if m != nil {
		return m.Maxid
	}
	return 0
}

func (m *ReplyUpdateReadOut) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *ReplyUpdateReadOut) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// ############################# pts 矫正 ##########################
type ReqDiffByPts struct {
	Fromid        int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	FromKeyid     uint64        `protobuf:"varint,2,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Pts           int32         `protobuf:"varint,3,opt,name=pts,proto3" json:"pts,omitempty"`
	Flags         int32         `protobuf:"varint,4,opt,name=flags,proto3" json:"flags,omitempty"`
	PtsTotalLimit int32         `protobuf:"varint,5,opt,name=Pts_total_limit,json=PtsTotalLimit,proto3" json:"Pts_total_limit,omitempty"`
	Date          int32         `protobuf:"varint,6,opt,name=Date,proto3" json:"Date,omitempty"`
	Qts           int32         `protobuf:"varint,7,opt,name=Qts,proto3" json:"Qts,omitempty"`
	Debug         *pbcomm.Debug `protobuf:"bytes,8,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqDiffByPts) Reset()                    { *m = ReqDiffByPts{} }
func (m *ReqDiffByPts) String() string            { return proto.CompactTextString(m) }
func (*ReqDiffByPts) ProtoMessage()               {}
func (*ReqDiffByPts) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{101} }

func (m *ReqDiffByPts) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqDiffByPts) GetFromKeyid() uint64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqDiffByPts) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *ReqDiffByPts) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ReqDiffByPts) GetPtsTotalLimit() int32 {
	if m != nil {
		return m.PtsTotalLimit
	}
	return 0
}

func (m *ReqDiffByPts) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *ReqDiffByPts) GetQts() int32 {
	if m != nil {
		return m.Qts
	}
	return 0
}

func (m *ReqDiffByPts) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyDiffByPts struct {
	Result  []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error   int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
	Usetime int32  `protobuf:"varint,3,opt,name=usetime,proto3" json:"usetime,omitempty"`
}

func (m *ReplyDiffByPts) Reset()                    { *m = ReplyDiffByPts{} }
func (m *ReplyDiffByPts) String() string            { return proto.CompactTextString(m) }
func (*ReplyDiffByPts) ProtoMessage()               {}
func (*ReplyDiffByPts) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{102} }

func (m *ReplyDiffByPts) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyDiffByPts) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

func (m *ReplyDiffByPts) GetUsetime() int32 {
	if m != nil {
		return m.Usetime
	}
	return 0
}

// ############################## 删除历史 ##########################
type ReqDeleteHistory struct {
	Fromid    int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	FromKeyid uint64        `protobuf:"varint,2,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Flags     int32         `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"`
	JustClear bool          `protobuf:"varint,4,opt,name=just_clear,json=justClear,proto3" json:"just_clear,omitempty"`
	Peer      []byte        `protobuf:"bytes,5,opt,name=peer,proto3" json:"peer,omitempty"`
	MaxId     int32         `protobuf:"varint,6,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqDeleteHistory) Reset()         { *m = ReqDeleteHistory{} }
func (m *ReqDeleteHistory) String() string { return proto.CompactTextString(m) }
func (*ReqDeleteHistory) ProtoMessage()    {}
func (*ReqDeleteHistory) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{103}
}

func (m *ReqDeleteHistory) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqDeleteHistory) GetFromKeyid() uint64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqDeleteHistory) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ReqDeleteHistory) GetJustClear() bool {
	if m != nil {
		return m.JustClear
	}
	return false
}

func (m *ReqDeleteHistory) GetPeer() []byte {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *ReqDeleteHistory) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *ReqDeleteHistory) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyDeleteHistory struct {
	Pts      int32 `protobuf:"varint,1,opt,name=pts,proto3" json:"pts,omitempty"`
	PtsCount int32 `protobuf:"varint,2,opt,name=pts_count,json=ptsCount,proto3" json:"pts_count,omitempty"`
	Offset   int32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Error    int32 `protobuf:"varint,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyDeleteHistory) Reset()         { *m = ReplyDeleteHistory{} }
func (m *ReplyDeleteHistory) String() string { return proto.CompactTextString(m) }
func (*ReplyDeleteHistory) ProtoMessage()    {}
func (*ReplyDeleteHistory) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{104}
}

func (m *ReplyDeleteHistory) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *ReplyDeleteHistory) GetPtsCount() int32 {
	if m != nil {
		return m.PtsCount
	}
	return 0
}

func (m *ReplyDeleteHistory) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ReplyDeleteHistory) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// ############################# 删除消息 ####################
type ReqDeleteMessages struct {
	Fromid    int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	FromKeyid uint64        `protobuf:"varint,2,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Flags     int32         `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"`
	Revoke    bool          `protobuf:"varint,4,opt,name=revoke,proto3" json:"revoke,omitempty"`
	Id        []int32       `protobuf:"varint,5,rep,packed,name=id" json:"id,omitempty"`
	Channelid int32         `protobuf:"varint,6,opt,name=channelid,proto3" json:"channelid,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,8,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqDeleteMessages) Reset()         { *m = ReqDeleteMessages{} }
func (m *ReqDeleteMessages) String() string { return proto.CompactTextString(m) }
func (*ReqDeleteMessages) ProtoMessage()    {}
func (*ReqDeleteMessages) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{105}
}

func (m *ReqDeleteMessages) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqDeleteMessages) GetFromKeyid() uint64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqDeleteMessages) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ReqDeleteMessages) GetRevoke() bool {
	if m != nil {
		return m.Revoke
	}
	return false
}

func (m *ReqDeleteMessages) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ReqDeleteMessages) GetChannelid() int32 {
	if m != nil {
		return m.Channelid
	}
	return 0
}

func (m *ReqDeleteMessages) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyDeleteMessages struct {
	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyDeleteMessages) Reset()         { *m = ReplyDeleteMessages{} }
func (m *ReplyDeleteMessages) String() string { return proto.CompactTextString(m) }
func (*ReplyDeleteMessages) ProtoMessage()    {}
func (*ReplyDeleteMessages) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{106}
}

func (m *ReplyDeleteMessages) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyDeleteMessages) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// ############################ 编辑消息 ######################
type ReqEditMessage struct {
	FormId      int32         `protobuf:"varint,1,opt,name=form_id,json=formId,proto3" json:"form_id,omitempty"`
	FromKeyid   uint64        `protobuf:"varint,2,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Flags       int32         `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"`
	NoWebpage   bool          `protobuf:"varint,4,opt,name=no_webpage,json=noWebpage,proto3" json:"no_webpage,omitempty"`
	StopGeoLive bool          `protobuf:"varint,5,opt,name=Stop_geo_live,json=StopGeoLive,proto3" json:"Stop_geo_live,omitempty"`
	Peer        []byte        `protobuf:"bytes,6,opt,name=peer,proto3" json:"peer,omitempty"`
	Id          int32         `protobuf:"varint,7,opt,name=id,proto3" json:"id,omitempty"`
	Message     string        `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
	ReplyMarkup []byte        `protobuf:"bytes,9,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`
	Entities    [][]byte      `protobuf:"bytes,10,rep,name=entities" json:"entities,omitempty"`
	GeoPoint    []byte        `protobuf:"bytes,11,opt,name=Geo_point,json=GeoPoint,proto3" json:"Geo_point,omitempty"`
	ViaBotId    int32         `protobuf:"varint,12,opt,name=ViaBotId,proto3" json:"ViaBotId,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,13,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqEditMessage) Reset()                    { *m = ReqEditMessage{} }
func (m *ReqEditMessage) String() string            { return proto.CompactTextString(m) }
func (*ReqEditMessage) ProtoMessage()               {}
func (*ReqEditMessage) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{107} }

func (m *ReqEditMessage) GetFormId() int32 {
	if m != nil {
		return m.FormId
	}
	return 0
}

func (m *ReqEditMessage) GetFromKeyid() uint64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqEditMessage) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ReqEditMessage) GetNoWebpage() bool {
	if m != nil {
		return m.NoWebpage
	}
	return false
}

func (m *ReqEditMessage) GetStopGeoLive() bool {
	if m != nil {
		return m.StopGeoLive
	}
	return false
}

func (m *ReqEditMessage) GetPeer() []byte {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *ReqEditMessage) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ReqEditMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ReqEditMessage) GetReplyMarkup() []byte {
	if m != nil {
		return m.ReplyMarkup
	}
	return nil
}

func (m *ReqEditMessage) GetEntities() [][]byte {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *ReqEditMessage) GetGeoPoint() []byte {
	if m != nil {
		return m.GeoPoint
	}
	return nil
}

func (m *ReqEditMessage) GetViaBotId() int32 {
	if m != nil {
		return m.ViaBotId
	}
	return 0
}

func (m *ReqEditMessage) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyEditMessage struct {
	UpdateEditMessage []byte `protobuf:"bytes,1,opt,name=UpdateEditMessage,proto3" json:"UpdateEditMessage,omitempty"`
	Error             int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyEditMessage) Reset()         { *m = ReplyEditMessage{} }
func (m *ReplyEditMessage) String() string { return proto.CompactTextString(m) }
func (*ReplyEditMessage) ProtoMessage()    {}
func (*ReplyEditMessage) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{108}
}

func (m *ReplyEditMessage) GetUpdateEditMessage() []byte {
	if m != nil {
		return m.UpdateEditMessage
	}
	return nil
}

func (m *ReplyEditMessage) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// ############################ 获取对话框特殊信息 ###################
type ReqNotifySettings struct {
	Fromid int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	Peer   []byte        `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqNotifySettings) Reset()         { *m = ReqNotifySettings{} }
func (m *ReqNotifySettings) String() string { return proto.CompactTextString(m) }
func (*ReqNotifySettings) ProtoMessage()    {}
func (*ReqNotifySettings) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{109}
}

func (m *ReqNotifySettings) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqNotifySettings) GetPeer() []byte {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *ReqNotifySettings) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyNotifySettings struct {
	Flags        int32  `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	ShowPreviews bool   `protobuf:"varint,2,opt,name=show_previews,json=showPreviews,proto3" json:"show_previews,omitempty"`
	Silent       bool   `protobuf:"varint,3,opt,name=silent,proto3" json:"silent,omitempty"`
	MuteUntil    int32  `protobuf:"varint,4,opt,name=mute_until,json=muteUntil,proto3" json:"mute_until,omitempty"`
	Sound        string `protobuf:"bytes,5,opt,name=sound,proto3" json:"sound,omitempty"`
	Error        int32  `protobuf:"varint,6,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyNotifySettings) Reset()         { *m = ReplyNotifySettings{} }
func (m *ReplyNotifySettings) String() string { return proto.CompactTextString(m) }
func (*ReplyNotifySettings) ProtoMessage()    {}
func (*ReplyNotifySettings) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{110}
}

func (m *ReplyNotifySettings) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ReplyNotifySettings) GetShowPreviews() bool {
	if m != nil {
		return m.ShowPreviews
	}
	return false
}

func (m *ReplyNotifySettings) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *ReplyNotifySettings) GetMuteUntil() int32 {
	if m != nil {
		return m.MuteUntil
	}
	return 0
}

func (m *ReplyNotifySettings) GetSound() string {
	if m != nil {
		return m.Sound
	}
	return ""
}

func (m *ReplyNotifySettings) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// ########################### 更新特殊对话框设置信息 #################
type ReqUpdateNotifySettings struct {
	Fromid   int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	Peer     []byte        `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`
	Settings []byte        `protobuf:"bytes,3,opt,name=settings,proto3" json:"settings,omitempty"`
	Debug    *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqUpdateNotifySettings) Reset()         { *m = ReqUpdateNotifySettings{} }
func (m *ReqUpdateNotifySettings) String() string { return proto.CompactTextString(m) }
func (*ReqUpdateNotifySettings) ProtoMessage()    {}
func (*ReqUpdateNotifySettings) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{111}
}

func (m *ReqUpdateNotifySettings) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqUpdateNotifySettings) GetPeer() []byte {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *ReqUpdateNotifySettings) GetSettings() []byte {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *ReqUpdateNotifySettings) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyUpdateNotifySettings struct {
	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyUpdateNotifySettings) Reset()         { *m = ReplyUpdateNotifySettings{} }
func (m *ReplyUpdateNotifySettings) String() string { return proto.CompactTextString(m) }
func (*ReplyUpdateNotifySettings) ProtoMessage()    {}
func (*ReplyUpdateNotifySettings) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{112}
}

func (m *ReplyUpdateNotifySettings) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyUpdateNotifySettings) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// ############################ 获取消息编辑的数据 ###################
type ReqMessageEditData struct {
	Layer  int32         `protobuf:"varint,1,opt,name=layer,proto3" json:"layer,omitempty"`
	Fromid int32         `protobuf:"varint,2,opt,name=fromid,proto3" json:"fromid,omitempty"`
	Peer   []byte        `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Id     int32         `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqMessageEditData) Reset()         { *m = ReqMessageEditData{} }
func (m *ReqMessageEditData) String() string { return proto.CompactTextString(m) }
func (*ReqMessageEditData) ProtoMessage()    {}
func (*ReqMessageEditData) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{113}
}

func (m *ReqMessageEditData) GetLayer() int32 {
	if m != nil {
		return m.Layer
	}
	return 0
}

func (m *ReqMessageEditData) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqMessageEditData) GetPeer() []byte {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *ReqMessageEditData) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ReqMessageEditData) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyMessageEditData struct {
	Flags   int32 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Caption bool  `protobuf:"varint,2,opt,name=caption,proto3" json:"caption,omitempty"`
	Error   int32 `protobuf:"varint,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyMessageEditData) Reset()         { *m = ReplyMessageEditData{} }
func (m *ReplyMessageEditData) String() string { return proto.CompactTextString(m) }
func (*ReplyMessageEditData) ProtoMessage()    {}
func (*ReplyMessageEditData) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{114}
}

func (m *ReplyMessageEditData) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ReplyMessageEditData) GetCaption() bool {
	if m != nil {
		return m.Caption
	}
	return false
}

func (m *ReplyMessageEditData) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// ############################ 存储草稿 ###################
type ReqSaveMsgDraft struct {
	Selfid       int32         `protobuf:"varint,1,opt,name=selfid,proto3" json:"selfid,omitempty"`
	FromKeyid    int64         `protobuf:"varint,2,opt,name=fromKeyid,proto3" json:"fromKeyid,omitempty"`
	Layer        int32         `protobuf:"varint,3,opt,name=layer,proto3" json:"layer,omitempty"`
	Flags        int32         `protobuf:"varint,4,opt,name=flags,proto3" json:"flags,omitempty"`
	NoWebpage    bool          `protobuf:"varint,5,opt,name=no_webpage,json=noWebpage,proto3" json:"no_webpage,omitempty"`
	ReplyToMsgId int32         `protobuf:"varint,6,opt,name=reply_to_msg_id,json=replyToMsgId,proto3" json:"reply_to_msg_id,omitempty"`
	Peer         []byte        `protobuf:"bytes,7,opt,name=peer,proto3" json:"peer,omitempty"`
	Message      string        `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
	Entities     [][]byte      `protobuf:"bytes,9,rep,name=entities" json:"entities,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,10,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqSaveMsgDraft) Reset()         { *m = ReqSaveMsgDraft{} }
func (m *ReqSaveMsgDraft) String() string { return proto.CompactTextString(m) }
func (*ReqSaveMsgDraft) ProtoMessage()    {}
func (*ReqSaveMsgDraft) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{115}
}

func (m *ReqSaveMsgDraft) GetSelfid() int32 {
	if m != nil {
		return m.Selfid
	}
	return 0
}

func (m *ReqSaveMsgDraft) GetFromKeyid() int64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqSaveMsgDraft) GetLayer() int32 {
	if m != nil {
		return m.Layer
	}
	return 0
}

func (m *ReqSaveMsgDraft) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ReqSaveMsgDraft) GetNoWebpage() bool {
	if m != nil {
		return m.NoWebpage
	}
	return false
}

func (m *ReqSaveMsgDraft) GetReplyToMsgId() int32 {
	if m != nil {
		return m.ReplyToMsgId
	}
	return 0
}

func (m *ReqSaveMsgDraft) GetPeer() []byte {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *ReqSaveMsgDraft) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ReqSaveMsgDraft) GetEntities() [][]byte {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *ReqSaveMsgDraft) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplySaveMsgDraft struct {
	Reply bool  `protobuf:"varint,1,opt,name=reply,proto3" json:"reply,omitempty"`
	Error int32 `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplySaveMsgDraft) Reset()         { *m = ReplySaveMsgDraft{} }
func (m *ReplySaveMsgDraft) String() string { return proto.CompactTextString(m) }
func (*ReplySaveMsgDraft) ProtoMessage()    {}
func (*ReplySaveMsgDraft) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{116}
}

func (m *ReplySaveMsgDraft) GetReply() bool {
	if m != nil {
		return m.Reply
	}
	return false
}

func (m *ReplySaveMsgDraft) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

type ReqGetUserUnRead struct {
	Userid int32         `protobuf:"varint,1,opt,name=Userid,proto3" json:"Userid,omitempty"`
	Keyid  int64         `protobuf:"varint,2,opt,name=keyid,proto3" json:"keyid,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqGetUserUnRead) Reset()         { *m = ReqGetUserUnRead{} }
func (m *ReqGetUserUnRead) String() string { return proto.CompactTextString(m) }
func (*ReqGetUserUnRead) ProtoMessage()    {}
func (*ReqGetUserUnRead) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{117}
}

func (m *ReqGetUserUnRead) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *ReqGetUserUnRead) GetKeyid() int64 {
	if m != nil {
		return m.Keyid
	}
	return 0
}

func (m *ReqGetUserUnRead) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyUserUnread struct {
	Unread int32 `protobuf:"varint,1,opt,name=unread,proto3" json:"unread,omitempty"`
	Error  int32 `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyUserUnread) Reset()         { *m = ReplyUserUnread{} }
func (m *ReplyUserUnread) String() string { return proto.CompactTextString(m) }
func (*ReplyUserUnread) ProtoMessage()    {}
func (*ReplyUserUnread) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{118}
}

func (m *ReplyUserUnread) GetUnread() int32 {
	if m != nil {
		return m.Unread
	}
	return 0
}

func (m *ReplyUserUnread) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// ###################################################### channel ####################################################################
type InputChannel struct {
	Type                     int32                     `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	InputChannelEmpty        *InputChannelEmpty        `protobuf:"bytes,2,opt,name=inputChannelEmpty" json:"inputChannelEmpty,omitempty"`
	InputChannelinputChannel *InputChannelinputChannel `protobuf:"bytes,3,opt,name=inputChannelinputChannel" json:"inputChannelinputChannel,omitempty"`
}

func (m *InputChannel) Reset()                    { *m = InputChannel{} }
func (m *InputChannel) String() string            { return proto.CompactTextString(m) }
func (*InputChannel) ProtoMessage()               {}
func (*InputChannel) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{119} }

func (m *InputChannel) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *InputChannel) GetInputChannelEmpty() *InputChannelEmpty {
	if m != nil {
		return m.InputChannelEmpty
	}
	return nil
}

func (m *InputChannel) GetInputChannelinputChannel() *InputChannelinputChannel {
	if m != nil {
		return m.InputChannelinputChannel
	}
	return nil
}

type InputChannelEmpty struct {
}

func (m *InputChannelEmpty) Reset()         { *m = InputChannelEmpty{} }
func (m *InputChannelEmpty) String() string { return proto.CompactTextString(m) }
func (*InputChannelEmpty) ProtoMessage()    {}
func (*InputChannelEmpty) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{120}
}

type InputChannelinputChannel struct {
	ChannelId  int32 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	AccessHash int64 `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
}

func (m *InputChannelinputChannel) Reset()         { *m = InputChannelinputChannel{} }
func (m *InputChannelinputChannel) String() string { return proto.CompactTextString(m) }
func (*InputChannelinputChannel) ProtoMessage()    {}
func (*InputChannelinputChannel) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{121}
}

func (m *InputChannelinputChannel) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *InputChannelinputChannel) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

type MessageActionEditChannelPhoto struct {
	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AccessHash int64  `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Date       int32  `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
	Pothosize  []byte `protobuf:"bytes,4,opt,name=pothosize,proto3" json:"pothosize,omitempty"`
}

func (m *MessageActionEditChannelPhoto) Reset()         { *m = MessageActionEditChannelPhoto{} }
func (m *MessageActionEditChannelPhoto) String() string { return proto.CompactTextString(m) }
func (*MessageActionEditChannelPhoto) ProtoMessage()    {}
func (*MessageActionEditChannelPhoto) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{122}
}

func (m *MessageActionEditChannelPhoto) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MessageActionEditChannelPhoto) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *MessageActionEditChannelPhoto) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *MessageActionEditChannelPhoto) GetPothosize() []byte {
	if m != nil {
		return m.Pothosize
	}
	return nil
}

type MessageActionEditChannelAbout struct {
	About string `protobuf:"bytes,1,opt,name=about,proto3" json:"about,omitempty"`
}

func (m *MessageActionEditChannelAbout) Reset()         { *m = MessageActionEditChannelAbout{} }
func (m *MessageActionEditChannelAbout) String() string { return proto.CompactTextString(m) }
func (*MessageActionEditChannelAbout) ProtoMessage()    {}
func (*MessageActionEditChannelAbout) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{123}
}

func (m *MessageActionEditChannelAbout) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

type MessageActionDeleteChannelMessages struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MessageActionDeleteChannelMessages) Reset()         { *m = MessageActionDeleteChannelMessages{} }
func (m *MessageActionDeleteChannelMessages) String() string { return proto.CompactTextString(m) }
func (*MessageActionDeleteChannelMessages) ProtoMessage()    {}
func (*MessageActionDeleteChannelMessages) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{124}
}

func (m *MessageActionDeleteChannelMessages) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MessageActionDeleteChannelHistory struct {
	UserId []byte `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *MessageActionDeleteChannelHistory) Reset()         { *m = MessageActionDeleteChannelHistory{} }
func (m *MessageActionDeleteChannelHistory) String() string { return proto.CompactTextString(m) }
func (*MessageActionDeleteChannelHistory) ProtoMessage()    {}
func (*MessageActionDeleteChannelHistory) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{125}
}

func (m *MessageActionDeleteChannelHistory) GetUserId() []byte {
	if m != nil {
		return m.UserId
	}
	return nil
}

type MessageActionUpdatePinnedChannelMessage struct {
}

func (m *MessageActionUpdatePinnedChannelMessage) Reset() {
	*m = MessageActionUpdatePinnedChannelMessage{}
}
func (m *MessageActionUpdatePinnedChannelMessage) String() string { return proto.CompactTextString(m) }
func (*MessageActionUpdatePinnedChannelMessage) ProtoMessage()    {}
func (*MessageActionUpdatePinnedChannelMessage) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{126}
}

type MessageActionCheckChannelUsername struct {
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (m *MessageActionCheckChannelUsername) Reset()         { *m = MessageActionCheckChannelUsername{} }
func (m *MessageActionCheckChannelUsername) String() string { return proto.CompactTextString(m) }
func (*MessageActionCheckChannelUsername) ProtoMessage()    {}
func (*MessageActionCheckChannelUsername) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{127}
}

func (m *MessageActionCheckChannelUsername) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

type MessageActionUpdateChannelUsername struct {
	UserName string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (m *MessageActionUpdateChannelUsername) Reset()         { *m = MessageActionUpdateChannelUsername{} }
func (m *MessageActionUpdateChannelUsername) String() string { return proto.CompactTextString(m) }
func (*MessageActionUpdateChannelUsername) ProtoMessage()    {}
func (*MessageActionUpdateChannelUsername) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{128}
}

func (m *MessageActionUpdateChannelUsername) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

type MessageActionExportChannelInvite struct {
}

func (m *MessageActionExportChannelInvite) Reset()         { *m = MessageActionExportChannelInvite{} }
func (m *MessageActionExportChannelInvite) String() string { return proto.CompactTextString(m) }
func (*MessageActionExportChannelInvite) ProtoMessage()    {}
func (*MessageActionExportChannelInvite) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{129}
}

type MessageActionDeleteChannel struct {
}

func (m *MessageActionDeleteChannel) Reset()         { *m = MessageActionDeleteChannel{} }
func (m *MessageActionDeleteChannel) String() string { return proto.CompactTextString(m) }
func (*MessageActionDeleteChannel) ProtoMessage()    {}
func (*MessageActionDeleteChannel) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{130}
}

type MessageActionChannelCreate struct {
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
}

func (m *MessageActionChannelCreate) Reset()         { *m = MessageActionChannelCreate{} }
func (m *MessageActionChannelCreate) String() string { return proto.CompactTextString(m) }
func (*MessageActionChannelCreate) ProtoMessage()    {}
func (*MessageActionChannelCreate) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{131}
}

func (m *MessageActionChannelCreate) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type MessageActionAddChannelUser struct {
	UserId []int32 `protobuf:"varint,1,rep,packed,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *MessageActionAddChannelUser) Reset()         { *m = MessageActionAddChannelUser{} }
func (m *MessageActionAddChannelUser) String() string { return proto.CompactTextString(m) }
func (*MessageActionAddChannelUser) ProtoMessage()    {}
func (*MessageActionAddChannelUser) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{132}
}

func (m *MessageActionAddChannelUser) GetUserId() []int32 {
	if m != nil {
		return m.UserId
	}
	return nil
}

type MessageActionDeleteChannelUser struct {
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *MessageActionDeleteChannelUser) Reset()         { *m = MessageActionDeleteChannelUser{} }
func (m *MessageActionDeleteChannelUser) String() string { return proto.CompactTextString(m) }
func (*MessageActionDeleteChannelUser) ProtoMessage()    {}
func (*MessageActionDeleteChannelUser) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{133}
}

func (m *MessageActionDeleteChannelUser) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type MessageActionUserLeaveChannel struct {
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *MessageActionUserLeaveChannel) Reset()         { *m = MessageActionUserLeaveChannel{} }
func (m *MessageActionUserLeaveChannel) String() string { return proto.CompactTextString(m) }
func (*MessageActionUserLeaveChannel) ProtoMessage()    {}
func (*MessageActionUserLeaveChannel) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{134}
}

func (m *MessageActionUserLeaveChannel) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type MessageActionEditChannelTitle struct {
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
}

func (m *MessageActionEditChannelTitle) Reset()         { *m = MessageActionEditChannelTitle{} }
func (m *MessageActionEditChannelTitle) String() string { return proto.CompactTextString(m) }
func (*MessageActionEditChannelTitle) ProtoMessage()    {}
func (*MessageActionEditChannelTitle) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{135}
}

func (m *MessageActionEditChannelTitle) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type UserStatusOnline struct {
	Expires int32 `protobuf:"varint,1,opt,name=expires,proto3" json:"expires,omitempty"`
}

func (m *UserStatusOnline) Reset()         { *m = UserStatusOnline{} }
func (m *UserStatusOnline) String() string { return proto.CompactTextString(m) }
func (*UserStatusOnline) ProtoMessage()    {}
func (*UserStatusOnline) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{136}
}

func (m *UserStatusOnline) GetExpires() int32 {
	if m != nil {
		return m.Expires
	}
	return 0
}

type UserStatusOffline struct {
	WasOnline int32 `protobuf:"varint,1,opt,name=was_online,json=wasOnline,proto3" json:"was_online,omitempty"`
}

func (m *UserStatusOffline) Reset()         { *m = UserStatusOffline{} }
func (m *UserStatusOffline) String() string { return proto.CompactTextString(m) }
func (*UserStatusOffline) ProtoMessage()    {}
func (*UserStatusOffline) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{137}
}

func (m *UserStatusOffline) GetWasOnline() int32 {
	if m != nil {
		return m.WasOnline
	}
	return 0
}

type UserStatusLastMonth struct {
	LastMonth int32 `protobuf:"varint,1,opt,name=lastMonth,proto3" json:"lastMonth,omitempty"`
}

func (m *UserStatusLastMonth) Reset()         { *m = UserStatusLastMonth{} }
func (m *UserStatusLastMonth) String() string { return proto.CompactTextString(m) }
func (*UserStatusLastMonth) ProtoMessage()    {}
func (*UserStatusLastMonth) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{138}
}

func (m *UserStatusLastMonth) GetLastMonth() int32 {
	if m != nil {
		return m.LastMonth
	}
	return 0
}

type Status struct {
	Type      int32                `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Online    *UserStatusOnline    `protobuf:"bytes,2,opt,name=online" json:"online,omitempty"`
	Offline   *UserStatusOffline   `protobuf:"bytes,3,opt,name=offline" json:"offline,omitempty"`
	LastMonth *UserStatusLastMonth `protobuf:"bytes,4,opt,name=lastMonth" json:"lastMonth,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{139} }

func (m *Status) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Status) GetOnline() *UserStatusOnline {
	if m != nil {
		return m.Online
	}
	return nil
}

func (m *Status) GetOffline() *UserStatusOffline {
	if m != nil {
		return m.Offline
	}
	return nil
}

func (m *Status) GetLastMonth() *UserStatusLastMonth {
	if m != nil {
		return m.LastMonth
	}
	return nil
}

type UserInfo struct {
	Flags                int32   `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Self                 bool    `protobuf:"varint,2,opt,name=self,proto3" json:"self,omitempty"`
	Contact              bool    `protobuf:"varint,3,opt,name=contact,proto3" json:"contact,omitempty"`
	MutualContact        bool    `protobuf:"varint,4,opt,name=mutual_contact,json=mutualContact,proto3" json:"mutual_contact,omitempty"`
	Deleted              bool    `protobuf:"varint,5,opt,name=deleted,proto3" json:"deleted,omitempty"`
	Bot                  bool    `protobuf:"varint,6,opt,name=bot,proto3" json:"bot,omitempty"`
	BotChatHistory       bool    `protobuf:"varint,7,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNoChats           bool    `protobuf:"varint,8,opt,name=bot_no_chats,json=botNoChats,proto3" json:"bot_no_chats,omitempty"`
	Verified             bool    `protobuf:"varint,9,opt,name=verified,proto3" json:"verified,omitempty"`
	Restricted           bool    `protobuf:"varint,10,opt,name=restricted,proto3" json:"restricted,omitempty"`
	Min                  bool    `protobuf:"varint,11,opt,name=min,proto3" json:"min,omitempty"`
	BotInlineGeo         bool    `protobuf:"varint,12,opt,name=bot_inline_geo,json=botInlineGeo,proto3" json:"bot_inline_geo,omitempty"`
	Id                   int32   `protobuf:"varint,13,opt,name=id,proto3" json:"id,omitempty"`
	AccessHash           int64   `protobuf:"varint,14,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Firstname            string  `protobuf:"bytes,15,opt,name=firstname,proto3" json:"firstname,omitempty"`
	Lastname             string  `protobuf:"bytes,16,opt,name=lastname,proto3" json:"lastname,omitempty"`
	Username             string  `protobuf:"bytes,17,opt,name=username,proto3" json:"username,omitempty"`
	Phone                string  `protobuf:"bytes,18,opt,name=phone,proto3" json:"phone,omitempty"`
	Photo                []byte  `protobuf:"bytes,19,opt,name=photo,proto3" json:"photo,omitempty"`
	Status               *Status `protobuf:"bytes,20,opt,name=status" json:"status,omitempty"`
	BotInfoVersion       bool    `protobuf:"varint,21,opt,name=bot_info_version,json=botInfoVersion,proto3" json:"bot_info_version,omitempty"`
	RestrictionReason    bool    `protobuf:"varint,22,opt,name=restriction_reason,json=restrictionReason,proto3" json:"restriction_reason,omitempty"`
	BotInlinePlaceholder bool    `protobuf:"varint,23,opt,name=bot_inline_placeholder,json=botInlinePlaceholder,proto3" json:"bot_inline_placeholder,omitempty"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{140} }

func (m *UserInfo) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *UserInfo) GetSelf() bool {
	if m != nil {
		return m.Self
	}
	return false
}

func (m *UserInfo) GetContact() bool {
	if m != nil {
		return m.Contact
	}
	return false
}

func (m *UserInfo) GetMutualContact() bool {
	if m != nil {
		return m.MutualContact
	}
	return false
}

func (m *UserInfo) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

func (m *UserInfo) GetBot() bool {
	if m != nil {
		return m.Bot
	}
	return false
}

func (m *UserInfo) GetBotChatHistory() bool {
	if m != nil {
		return m.BotChatHistory
	}
	return false
}

func (m *UserInfo) GetBotNoChats() bool {
	if m != nil {
		return m.BotNoChats
	}
	return false
}

func (m *UserInfo) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

func (m *UserInfo) GetRestricted() bool {
	if m != nil {
		return m.Restricted
	}
	return false
}

func (m *UserInfo) GetMin() bool {
	if m != nil {
		return m.Min
	}
	return false
}

func (m *UserInfo) GetBotInlineGeo() bool {
	if m != nil {
		return m.BotInlineGeo
	}
	return false
}

func (m *UserInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserInfo) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *UserInfo) GetFirstname() string {
	if m != nil {
		return m.Firstname
	}
	return ""
}

func (m *UserInfo) GetLastname() string {
	if m != nil {
		return m.Lastname
	}
	return ""
}

func (m *UserInfo) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UserInfo) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *UserInfo) GetPhoto() []byte {
	if m != nil {
		return m.Photo
	}
	return nil
}

func (m *UserInfo) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *UserInfo) GetBotInfoVersion() bool {
	if m != nil {
		return m.BotInfoVersion
	}
	return false
}

func (m *UserInfo) GetRestrictionReason() bool {
	if m != nil {
		return m.RestrictionReason
	}
	return false
}

func (m *UserInfo) GetBotInlinePlaceholder() bool {
	if m != nil {
		return m.BotInlinePlaceholder
	}
	return false
}

type Channel struct {
	Flags             int32  `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Creator           bool   `protobuf:"varint,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Kicked            bool   `protobuf:"varint,3,opt,name=kicked,proto3" json:"kicked,omitempty"`
	Left              bool   `protobuf:"varint,4,opt,name=left,proto3" json:"left,omitempty"`
	Editor            bool   `protobuf:"varint,5,opt,name=editor,proto3" json:"editor,omitempty"`
	Moderator         bool   `protobuf:"varint,6,opt,name=moderator,proto3" json:"moderator,omitempty"`
	Broadcast         bool   `protobuf:"varint,7,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
	Verified          bool   `protobuf:"varint,8,opt,name=verified,proto3" json:"verified,omitempty"`
	Megagroup         bool   `protobuf:"varint,9,opt,name=megagroup,proto3" json:"megagroup,omitempty"`
	Restricted        bool   `protobuf:"varint,10,opt,name=restricted,proto3" json:"restricted,omitempty"`
	Democracy         bool   `protobuf:"varint,11,opt,name=democracy,proto3" json:"democracy,omitempty"`
	Signatures        bool   `protobuf:"varint,12,opt,name=signatures,proto3" json:"signatures,omitempty"`
	Min               bool   `protobuf:"varint,13,opt,name=min,proto3" json:"min,omitempty"`
	Id                int32  `protobuf:"varint,14,opt,name=id,proto3" json:"id,omitempty"`
	AccessHash        int64  `protobuf:"varint,15,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Title             string `protobuf:"bytes,16,opt,name=title,proto3" json:"title,omitempty"`
	Username          string `protobuf:"bytes,17,opt,name=username,proto3" json:"username,omitempty"`
	Photo             int32  `protobuf:"varint,18,opt,name=photo,proto3" json:"photo,omitempty"`
	Date              int32  `protobuf:"varint,19,opt,name=date,proto3" json:"date,omitempty"`
	Version           int32  `protobuf:"varint,20,opt,name=version,proto3" json:"version,omitempty"`
	RestrictionReason bool   `protobuf:"varint,21,opt,name=restriction_reason,json=restrictionReason,proto3" json:"restriction_reason,omitempty"`
}

func (m *Channel) Reset()                    { *m = Channel{} }
func (m *Channel) String() string            { return proto.CompactTextString(m) }
func (*Channel) ProtoMessage()               {}
func (*Channel) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{141} }

func (m *Channel) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *Channel) GetCreator() bool {
	if m != nil {
		return m.Creator
	}
	return false
}

func (m *Channel) GetKicked() bool {
	if m != nil {
		return m.Kicked
	}
	return false
}

func (m *Channel) GetLeft() bool {
	if m != nil {
		return m.Left
	}
	return false
}

func (m *Channel) GetEditor() bool {
	if m != nil {
		return m.Editor
	}
	return false
}

func (m *Channel) GetModerator() bool {
	if m != nil {
		return m.Moderator
	}
	return false
}

func (m *Channel) GetBroadcast() bool {
	if m != nil {
		return m.Broadcast
	}
	return false
}

func (m *Channel) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

func (m *Channel) GetMegagroup() bool {
	if m != nil {
		return m.Megagroup
	}
	return false
}

func (m *Channel) GetRestricted() bool {
	if m != nil {
		return m.Restricted
	}
	return false
}

func (m *Channel) GetDemocracy() bool {
	if m != nil {
		return m.Democracy
	}
	return false
}

func (m *Channel) GetSignatures() bool {
	if m != nil {
		return m.Signatures
	}
	return false
}

func (m *Channel) GetMin() bool {
	if m != nil {
		return m.Min
	}
	return false
}

func (m *Channel) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Channel) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *Channel) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Channel) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Channel) GetPhoto() int32 {
	if m != nil {
		return m.Photo
	}
	return 0
}

func (m *Channel) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *Channel) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Channel) GetRestrictionReason() bool {
	if m != nil {
		return m.RestrictionReason
	}
	return false
}

type UpdateNewChannelMessage struct {
	Flags        int32  `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Out          bool   `protobuf:"varint,2,opt,name=out,proto3" json:"out,omitempty"`
	Mentioned    bool   `protobuf:"varint,3,opt,name=mentioned,proto3" json:"mentioned,omitempty"`
	MediaUnread  bool   `protobuf:"varint,4,opt,name=media_unread,json=mediaUnread,proto3" json:"media_unread,omitempty"`
	Silent       bool   `protobuf:"varint,5,opt,name=silent,proto3" json:"silent,omitempty"`
	Post         bool   `protobuf:"varint,6,opt,name=post,proto3" json:"post,omitempty"`
	Id           int32  `protobuf:"varint,7,opt,name=id,proto3" json:"id,omitempty"`
	FromId       int32  `protobuf:"varint,8,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	ToId         int32  `protobuf:"varint,9,opt,name=to_id,json=toId,proto3" json:"to_id,omitempty"`
	ReplyToMsgId bool   `protobuf:"varint,10,opt,name=reply_to_msg_id,json=replyToMsgId,proto3" json:"reply_to_msg_id,omitempty"`
	Date         int32  `protobuf:"varint,11,opt,name=date,proto3" json:"date,omitempty"`
	Action       []byte `protobuf:"bytes,12,opt,name=action,proto3" json:"action,omitempty"`
	Pts          int32  `protobuf:"varint,13,opt,name=pts,proto3" json:"pts,omitempty"`
	PtsCount     int32  `protobuf:"varint,14,opt,name=pts_count,json=ptsCount,proto3" json:"pts_count,omitempty"`
}

func (m *UpdateNewChannelMessage) Reset()         { *m = UpdateNewChannelMessage{} }
func (m *UpdateNewChannelMessage) String() string { return proto.CompactTextString(m) }
func (*UpdateNewChannelMessage) ProtoMessage()    {}
func (*UpdateNewChannelMessage) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{142}
}

func (m *UpdateNewChannelMessage) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *UpdateNewChannelMessage) GetOut() bool {
	if m != nil {
		return m.Out
	}
	return false
}

func (m *UpdateNewChannelMessage) GetMentioned() bool {
	if m != nil {
		return m.Mentioned
	}
	return false
}

func (m *UpdateNewChannelMessage) GetMediaUnread() bool {
	if m != nil {
		return m.MediaUnread
	}
	return false
}

func (m *UpdateNewChannelMessage) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *UpdateNewChannelMessage) GetPost() bool {
	if m != nil {
		return m.Post
	}
	return false
}

func (m *UpdateNewChannelMessage) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateNewChannelMessage) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *UpdateNewChannelMessage) GetToId() int32 {
	if m != nil {
		return m.ToId
	}
	return 0
}

func (m *UpdateNewChannelMessage) GetReplyToMsgId() bool {
	if m != nil {
		return m.ReplyToMsgId
	}
	return false
}

func (m *UpdateNewChannelMessage) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *UpdateNewChannelMessage) GetAction() []byte {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *UpdateNewChannelMessage) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *UpdateNewChannelMessage) GetPtsCount() int32 {
	if m != nil {
		return m.PtsCount
	}
	return 0
}

// 创建channel
// channels.createChannel#f4893d7f flags:# broadcast:flags.0?true megagroup:flags.1?true title:string about:string = Updates;
type RequestChannel struct {
	ChannelId     int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	UserId        int32         `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Title         string        `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	About         string        `protobuf:"bytes,4,opt,name=about,proto3" json:"about,omitempty"`
	FromKeyid     int64         `protobuf:"varint,5,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	BroadCast     bool          `protobuf:"varint,6,opt,name=broadCast,proto3" json:"broadCast,omitempty"`
	Megagroup     bool          `protobuf:"varint,7,opt,name=megagroup,proto3" json:"megagroup,omitempty"`
	ReplyMsgId    uint64        `protobuf:"varint,8,opt,name=replyMsgId,proto3" json:"replyMsgId,omitempty"`
	BanAddContact bool          `protobuf:"varint,9,opt,name=ban_add_contact,json=banAddContact,proto3" json:"ban_add_contact,omitempty"`
	Debug         *pbcomm.Debug `protobuf:"bytes,10,opt,name=debug" json:"debug,omitempty"`
}

func (m *RequestChannel) Reset()                    { *m = RequestChannel{} }
func (m *RequestChannel) String() string            { return proto.CompactTextString(m) }
func (*RequestChannel) ProtoMessage()               {}
func (*RequestChannel) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{143} }

func (m *RequestChannel) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *RequestChannel) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *RequestChannel) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RequestChannel) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *RequestChannel) GetFromKeyid() int64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *RequestChannel) GetBroadCast() bool {
	if m != nil {
		return m.BroadCast
	}
	return false
}

func (m *RequestChannel) GetMegagroup() bool {
	if m != nil {
		return m.Megagroup
	}
	return false
}

func (m *RequestChannel) GetReplyMsgId() uint64 {
	if m != nil {
		return m.ReplyMsgId
	}
	return 0
}

func (m *RequestChannel) GetBanAddContact() bool {
	if m != nil {
		return m.BanAddContact
	}
	return false
}

func (m *RequestChannel) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 返回create channel
type ReplyChannel struct {
	Reply     []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyChannel) Reset()                    { *m = ReplyChannel{} }
func (m *ReplyChannel) String() string            { return proto.CompactTextString(m) }
func (*ReplyChannel) ProtoMessage()               {}
func (*ReplyChannel) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{144} }

func (m *ReplyChannel) GetReply() []byte {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *ReplyChannel) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// 邀请用户进入超级群
type RequestChannelInvite struct {
	ChannelId  int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Title      string        `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	UserId     int32         `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	PeerId     []int32       `protobuf:"varint,4,rep,packed,name=peerId" json:"peerId,omitempty"`
	FromKeyid  int64         `protobuf:"varint,5,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	AccessHash int64         `protobuf:"varint,6,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug" json:"debug,omitempty"`
}

func (m *RequestChannelInvite) Reset()         { *m = RequestChannelInvite{} }
func (m *RequestChannelInvite) String() string { return proto.CompactTextString(m) }
func (*RequestChannelInvite) ProtoMessage()    {}
func (*RequestChannelInvite) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{145}
}

func (m *RequestChannelInvite) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *RequestChannelInvite) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RequestChannelInvite) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *RequestChannelInvite) GetPeerId() []int32 {
	if m != nil {
		return m.PeerId
	}
	return nil
}

func (m *RequestChannelInvite) GetFromKeyid() int64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *RequestChannelInvite) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *RequestChannelInvite) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 邀请操作的ACK
type ReplyChannelInvite struct {
	Reply     []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyChannelInvite) Reset()         { *m = ReplyChannelInvite{} }
func (m *ReplyChannelInvite) String() string { return proto.CompactTextString(m) }
func (*ReplyChannelInvite) ProtoMessage()    {}
func (*ReplyChannelInvite) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{146}
}

func (m *ReplyChannelInvite) GetReply() []byte {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *ReplyChannelInvite) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// 邀请用户进入超级群
type ReqJoinChannel struct {
	ChannelId  int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	UserId     int32         `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	FromKeyid  int64         `protobuf:"varint,5,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	AccessHash int64         `protobuf:"varint,6,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	ByLink     bool          `protobuf:"varint,7,opt,name=byLink,proto3" json:"byLink,omitempty"`
	Invitor    int32         `protobuf:"varint,8,opt,name=invitor,proto3" json:"invitor,omitempty"`
	InviteType int32         `protobuf:"varint,9,opt,name=invite_type,json=inviteType,proto3" json:"invite_type,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,10,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqJoinChannel) Reset()                    { *m = ReqJoinChannel{} }
func (m *ReqJoinChannel) String() string            { return proto.CompactTextString(m) }
func (*ReqJoinChannel) ProtoMessage()               {}
func (*ReqJoinChannel) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{147} }

func (m *ReqJoinChannel) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqJoinChannel) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqJoinChannel) GetFromKeyid() int64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqJoinChannel) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqJoinChannel) GetByLink() bool {
	if m != nil {
		return m.ByLink
	}
	return false
}

func (m *ReqJoinChannel) GetInvitor() int32 {
	if m != nil {
		return m.Invitor
	}
	return 0
}

func (m *ReqJoinChannel) GetInviteType() int32 {
	if m != nil {
		return m.InviteType
	}
	return 0
}

func (m *ReqJoinChannel) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 邀请操作的ACK
type ReplyJoinChannel struct {
	Reply     []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyJoinChannel) Reset()         { *m = ReplyJoinChannel{} }
func (m *ReplyJoinChannel) String() string { return proto.CompactTextString(m) }
func (*ReplyJoinChannel) ProtoMessage()    {}
func (*ReplyJoinChannel) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{148}
}

func (m *ReplyJoinChannel) GetReply() []byte {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *ReplyJoinChannel) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// 踢人
type ReqChannelKick struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Kicker    int32         `protobuf:"varint,2,opt,name=kicker,proto3" json:"kicker,omitempty"`
	Kickee    int32         `protobuf:"varint,3,opt,name=kickee,proto3" json:"kickee,omitempty"`
	IsBotUser bool          `protobuf:"varint,4,opt,name=is_bot_user,json=isBotUser,proto3" json:"is_bot_user,omitempty"`
	IsKicked  bool          `protobuf:"varint,5,opt,name=is_kicked,json=isKicked,proto3" json:"is_kicked,omitempty"`
	KickedId  int32         `protobuf:"varint,6,opt,name=Kicked_id,json=KickedId,proto3" json:"Kicked_id,omitempty"`
	FromKeyid int64         `protobuf:"varint,7,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,8,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqChannelKick) Reset()                    { *m = ReqChannelKick{} }
func (m *ReqChannelKick) String() string            { return proto.CompactTextString(m) }
func (*ReqChannelKick) ProtoMessage()               {}
func (*ReqChannelKick) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{149} }

func (m *ReqChannelKick) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqChannelKick) GetKicker() int32 {
	if m != nil {
		return m.Kicker
	}
	return 0
}

func (m *ReqChannelKick) GetKickee() int32 {
	if m != nil {
		return m.Kickee
	}
	return 0
}

func (m *ReqChannelKick) GetIsBotUser() bool {
	if m != nil {
		return m.IsBotUser
	}
	return false
}

func (m *ReqChannelKick) GetIsKicked() bool {
	if m != nil {
		return m.IsKicked
	}
	return false
}

func (m *ReqChannelKick) GetKickedId() int32 {
	if m != nil {
		return m.KickedId
	}
	return 0
}

func (m *ReqChannelKick) GetFromKeyid() int64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqChannelKick) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyChannelKick struct {
	Reply     []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyChannelKick) Reset()         { *m = ReplyChannelKick{} }
func (m *ReplyChannelKick) String() string { return proto.CompactTextString(m) }
func (*ReplyChannelKick) ProtoMessage()    {}
func (*ReplyChannelKick) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{150}
}

func (m *ReplyChannelKick) GetReply() []byte {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *ReplyChannelKick) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// 退出超级群
type ReqLeaveChannel struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	FromKeyid int64         `protobuf:"varint,3,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqLeaveChannel) Reset()         { *m = ReqLeaveChannel{} }
func (m *ReqLeaveChannel) String() string { return proto.CompactTextString(m) }
func (*ReqLeaveChannel) ProtoMessage()    {}
func (*ReqLeaveChannel) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{151}
}

func (m *ReqLeaveChannel) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqLeaveChannel) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqLeaveChannel) GetFromKeyid() int64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqLeaveChannel) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 推出超级群返回
type ReplyLeaveChannel struct {
	Reply     []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyLeaveChannel) Reset()         { *m = ReplyLeaveChannel{} }
func (m *ReplyLeaveChannel) String() string { return proto.CompactTextString(m) }
func (*ReplyLeaveChannel) ProtoMessage()    {}
func (*ReplyLeaveChannel) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{152}
}

func (m *ReplyLeaveChannel) GetReply() []byte {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *ReplyLeaveChannel) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// edit title
type ReqEditChannelTitle struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Title     string        `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	UserId    int32         `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	FromKeyid int64         `protobuf:"varint,4,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqEditChannelTitle) Reset()         { *m = ReqEditChannelTitle{} }
func (m *ReqEditChannelTitle) String() string { return proto.CompactTextString(m) }
func (*ReqEditChannelTitle) ProtoMessage()    {}
func (*ReqEditChannelTitle) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{153}
}

func (m *ReqEditChannelTitle) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqEditChannelTitle) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ReqEditChannelTitle) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqEditChannelTitle) GetFromKeyid() int64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqEditChannelTitle) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// ack to the title editing
type ReplyEditChannelTitle struct {
	Reply     []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyEditChannelTitle) Reset()         { *m = ReplyEditChannelTitle{} }
func (m *ReplyEditChannelTitle) String() string { return proto.CompactTextString(m) }
func (*ReplyEditChannelTitle) ProtoMessage()    {}
func (*ReplyEditChannelTitle) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{154}
}

func (m *ReplyEditChannelTitle) GetReply() []byte {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *ReplyEditChannelTitle) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// 请求参数
type ReqEditChannelAdmin struct {
	FromId     int32         `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	ChannelId  int32         `protobuf:"varint,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	UserId     int32         `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	FromKeyId  int64         `protobuf:"varint,4,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	Role       []byte        `protobuf:"bytes,5,opt,name=role,proto3" json:"role,omitempty"`
	KeyId      uint64        `protobuf:"varint,6,opt,name=keyId,proto3" json:"keyId,omitempty"`
	AccessHash int64         `protobuf:"varint,7,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Rank       string        `protobuf:"bytes,8,opt,name=rank,proto3" json:"rank,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,9,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqEditChannelAdmin) Reset()         { *m = ReqEditChannelAdmin{} }
func (m *ReqEditChannelAdmin) String() string { return proto.CompactTextString(m) }
func (*ReqEditChannelAdmin) ProtoMessage()    {}
func (*ReqEditChannelAdmin) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{155}
}

func (m *ReqEditChannelAdmin) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqEditChannelAdmin) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqEditChannelAdmin) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqEditChannelAdmin) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *ReqEditChannelAdmin) GetRole() []byte {
	if m != nil {
		return m.Role
	}
	return nil
}

func (m *ReqEditChannelAdmin) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *ReqEditChannelAdmin) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqEditChannelAdmin) GetRank() string {
	if m != nil {
		return m.Rank
	}
	return ""
}

func (m *ReqEditChannelAdmin) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 返回参数
type ReplyEditChannelAdmin struct {
	Reply     []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyEditChannelAdmin) Reset()         { *m = ReplyEditChannelAdmin{} }
func (m *ReplyEditChannelAdmin) String() string { return proto.CompactTextString(m) }
func (*ReplyEditChannelAdmin) ProtoMessage()    {}
func (*ReplyEditChannelAdmin) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{156}
}

func (m *ReplyEditChannelAdmin) GetReply() []byte {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *ReplyEditChannelAdmin) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// edit photo
type ReqEditChannelPhoto struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Photo     []byte        `protobuf:"bytes,3,opt,name=photo,proto3" json:"photo,omitempty"`
	FromKeyid int64         `protobuf:"varint,4,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqEditChannelPhoto) Reset()         { *m = ReqEditChannelPhoto{} }
func (m *ReqEditChannelPhoto) String() string { return proto.CompactTextString(m) }
func (*ReqEditChannelPhoto) ProtoMessage()    {}
func (*ReqEditChannelPhoto) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{157}
}

func (m *ReqEditChannelPhoto) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqEditChannelPhoto) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqEditChannelPhoto) GetPhoto() []byte {
	if m != nil {
		return m.Photo
	}
	return nil
}

func (m *ReqEditChannelPhoto) GetFromKeyid() int64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqEditChannelPhoto) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// ack to edit photo
type ReplyEditChannelPhoto struct {
	Reply     []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyEditChannelPhoto) Reset()         { *m = ReplyEditChannelPhoto{} }
func (m *ReplyEditChannelPhoto) String() string { return proto.CompactTextString(m) }
func (*ReplyEditChannelPhoto) ProtoMessage()    {}
func (*ReplyEditChannelPhoto) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{158}
}

func (m *ReplyEditChannelPhoto) GetReply() []byte {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *ReplyEditChannelPhoto) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type ChatInviteExported struct {
	Link  string        `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
	Debug *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
}

func (m *ChatInviteExported) Reset()         { *m = ChatInviteExported{} }
func (m *ChatInviteExported) String() string { return proto.CompactTextString(m) }
func (*ChatInviteExported) ProtoMessage()    {}
func (*ChatInviteExported) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{159}
}

func (m *ChatInviteExported) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *ChatInviteExported) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// ################################ 编辑超级群群说明信息 editAbout ######################
// 请求参数
type ReqEditChannelAbout struct {
	FromId     int32         `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	FromKeyId  int64         `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	ChannelId  int32         `protobuf:"varint,3,opt,name=channelId,proto3" json:"channelId,omitempty"`
	About      string        `protobuf:"bytes,4,opt,name=about,proto3" json:"about,omitempty"`
	AccessHash int64         `protobuf:"varint,5,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqEditChannelAbout) Reset()         { *m = ReqEditChannelAbout{} }
func (m *ReqEditChannelAbout) String() string { return proto.CompactTextString(m) }
func (*ReqEditChannelAbout) ProtoMessage()    {}
func (*ReqEditChannelAbout) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{160}
}

func (m *ReqEditChannelAbout) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqEditChannelAbout) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *ReqEditChannelAbout) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqEditChannelAbout) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *ReqEditChannelAbout) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqEditChannelAbout) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 返回参数
type ReplyEditChannelAbout struct {
	Succeed   bool  `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	ErrorCode int32 `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyEditChannelAbout) Reset()         { *m = ReplyEditChannelAbout{} }
func (m *ReplyEditChannelAbout) String() string { return proto.CompactTextString(m) }
func (*ReplyEditChannelAbout) ProtoMessage()    {}
func (*ReplyEditChannelAbout) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{161}
}

func (m *ReplyEditChannelAbout) GetSucceed() bool {
	if m != nil {
		return m.Succeed
	}
	return false
}

func (m *ReplyEditChannelAbout) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// ################################ 超级群删除指定人发送的消息 deleteUserHistory ######################
// 请求参数
type ReqDeleteChannelMessages struct {
	FromId     int32         `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	ChannelId  int32         `protobuf:"varint,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Id         []int32       `protobuf:"varint,3,rep,packed,name=id" json:"id,omitempty"`
	FromKeyid  int64         `protobuf:"varint,4,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	AccessHash int64         `protobuf:"varint,5,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqDeleteChannelMessages) Reset()         { *m = ReqDeleteChannelMessages{} }
func (m *ReqDeleteChannelMessages) String() string { return proto.CompactTextString(m) }
func (*ReqDeleteChannelMessages) ProtoMessage()    {}
func (*ReqDeleteChannelMessages) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{162}
}

func (m *ReqDeleteChannelMessages) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqDeleteChannelMessages) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqDeleteChannelMessages) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ReqDeleteChannelMessages) GetFromKeyid() int64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqDeleteChannelMessages) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqDeleteChannelMessages) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 返回参数
type ReplyDeleteChannelMessages struct {
	Msgid     int32 `protobuf:"varint,1,opt,name=msgid,proto3" json:"msgid,omitempty"`
	Date      int32 `protobuf:"varint,2,opt,name=date,proto3" json:"date,omitempty"`
	Pts       int32 `protobuf:"varint,3,opt,name=pts,proto3" json:"pts,omitempty"`
	MaxId     int32 `protobuf:"varint,4,opt,name=maxId,proto3" json:"maxId,omitempty"`
	PtsCount  int32 `protobuf:"varint,5,opt,name=ptsCount,proto3" json:"ptsCount,omitempty"`
	ErrorCode int32 `protobuf:"varint,6,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyDeleteChannelMessages) Reset()         { *m = ReplyDeleteChannelMessages{} }
func (m *ReplyDeleteChannelMessages) String() string { return proto.CompactTextString(m) }
func (*ReplyDeleteChannelMessages) ProtoMessage()    {}
func (*ReplyDeleteChannelMessages) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{163}
}

func (m *ReplyDeleteChannelMessages) GetMsgid() int32 {
	if m != nil {
		return m.Msgid
	}
	return 0
}

func (m *ReplyDeleteChannelMessages) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *ReplyDeleteChannelMessages) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *ReplyDeleteChannelMessages) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *ReplyDeleteChannelMessages) GetPtsCount() int32 {
	if m != nil {
		return m.PtsCount
	}
	return 0
}

func (m *ReplyDeleteChannelMessages) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// ################################ 超级群删除自己端的历史 ###################################
type ReqDeleteChannelSelfHistory struct {
	FromId     int32         `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	ChannelId  int32         `protobuf:"varint,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	AccessHash int64         `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	FromKeyid  int64         `protobuf:"varint,5,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqDeleteChannelSelfHistory) Reset()         { *m = ReqDeleteChannelSelfHistory{} }
func (m *ReqDeleteChannelSelfHistory) String() string { return proto.CompactTextString(m) }
func (*ReqDeleteChannelSelfHistory) ProtoMessage()    {}
func (*ReqDeleteChannelSelfHistory) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{164}
}

func (m *ReqDeleteChannelSelfHistory) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqDeleteChannelSelfHistory) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqDeleteChannelSelfHistory) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqDeleteChannelSelfHistory) GetFromKeyid() int64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqDeleteChannelSelfHistory) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// ################################ 超级群删除指定条消息 deleteMessages ######################
// 请求参数
type ReqDeleteChannelHistory struct {
	FromId     int32         `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	ChannelId  int32         `protobuf:"varint,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	UsreId     int32         `protobuf:"varint,3,opt,name=usreId,proto3" json:"usreId,omitempty"`
	AccessHash int64         `protobuf:"varint,4,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	FromKeyid  int64         `protobuf:"varint,5,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqDeleteChannelHistory) Reset()         { *m = ReqDeleteChannelHistory{} }
func (m *ReqDeleteChannelHistory) String() string { return proto.CompactTextString(m) }
func (*ReqDeleteChannelHistory) ProtoMessage()    {}
func (*ReqDeleteChannelHistory) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{165}
}

func (m *ReqDeleteChannelHistory) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqDeleteChannelHistory) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqDeleteChannelHistory) GetUsreId() int32 {
	if m != nil {
		return m.UsreId
	}
	return 0
}

func (m *ReqDeleteChannelHistory) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqDeleteChannelHistory) GetFromKeyid() int64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqDeleteChannelHistory) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 返回参数
type ReplyDeleteChannelHistory struct {
	Result    []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	ErrorCode int32  `protobuf:"varint,6,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyDeleteChannelHistory) Reset()         { *m = ReplyDeleteChannelHistory{} }
func (m *ReplyDeleteChannelHistory) String() string { return proto.CompactTextString(m) }
func (*ReplyDeleteChannelHistory) ProtoMessage()    {}
func (*ReplyDeleteChannelHistory) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{166}
}

func (m *ReplyDeleteChannelHistory) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyDeleteChannelHistory) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// ################################ 超级群中置顶一条消息 updatePinnedMessage ######################
// 请求参数
type ReqUpdatePinnedChannelMessage struct {
	FromId int32 `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	Flags  int32 `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	Silent bool  `protobuf:"varint,3,opt,name=silent,proto3" json:"silent,omitempty"`
	//    InputChannel channel = 4;
	ChannelId int32         `protobuf:"varint,4,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Id        int32         `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	FromKeyid int64         `protobuf:"varint,6,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqUpdatePinnedChannelMessage) Reset()         { *m = ReqUpdatePinnedChannelMessage{} }
func (m *ReqUpdatePinnedChannelMessage) String() string { return proto.CompactTextString(m) }
func (*ReqUpdatePinnedChannelMessage) ProtoMessage()    {}
func (*ReqUpdatePinnedChannelMessage) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{167}
}

func (m *ReqUpdatePinnedChannelMessage) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqUpdatePinnedChannelMessage) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ReqUpdatePinnedChannelMessage) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *ReqUpdatePinnedChannelMessage) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqUpdatePinnedChannelMessage) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ReqUpdatePinnedChannelMessage) GetFromKeyid() int64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqUpdatePinnedChannelMessage) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 返回参数
type ReplyUpdatePinnedChannelMessage struct {
	Reply     []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyUpdatePinnedChannelMessage) Reset()         { *m = ReplyUpdatePinnedChannelMessage{} }
func (m *ReplyUpdatePinnedChannelMessage) String() string { return proto.CompactTextString(m) }
func (*ReplyUpdatePinnedChannelMessage) ProtoMessage()    {}
func (*ReplyUpdatePinnedChannelMessage) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{168}
}

func (m *ReplyUpdatePinnedChannelMessage) GetReply() []byte {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *ReplyUpdatePinnedChannelMessage) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// ################################ 频道设置username checkUsername updateUsername ######################
// // 请求参数
//
//	message ReqCheckChannelUsername {
//	   int32 from_id = 1;
//	   InputChannel channel = 2;
//	   string username = 3;
//	   pbcomm.Debug debug = 4;
//	}
//
// // 返回参数
//
//	message ReplyCheckChannelUsername {
//	   int32 msgid = 1;
//	   int32 date = 2;
//	   int32 pts = 3;
//	   bool check_user_name = 4;
//	}
//
// // 请求参数
//
//	message ReqUpdateChannelUsername {
//	   int32 from_id = 1;
//	   InputChannel channel = 2;
//	   string username = 3;
//	   pbcomm.Debug debug = 4;
//	}
//
// // 返回参数
//
//	message ReplyUpdateChannelUsername {
//	   int32 msgid = 1;
//	   int32 date = 2;
//	   int32 pts = 3;
//	   bool update_user_name = 4;
//	}
//
// //################################ 频道生成邀请链接 exportInvite ######################
// // 请求参数
//
//	message ReqExportChannelInvite {
//	   int32 from_id = 1;
//	   InputChannel channel = 2;
//	   string link = 3;
//	   pbcomm.Debug debug = 4;
//	}
//
// // 返回参数
//
//	message ReplyExportChannelInvite {
//	   int32 msgid = 1;
//	   int32 date = 2;
//	   int32 pts = 3;
//	}
//
// ################################ 删除超级群 deletechannel ######################
// deletechannel 请求参数
type ReqDeleteChannel struct {
	FromId     int32         `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	FromKeyId  int64         `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	ChannelId  int32         `protobuf:"varint,3,opt,name=channelId,proto3" json:"channelId,omitempty"`
	AccessHash int64         `protobuf:"varint,4,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqDeleteChannel) Reset()         { *m = ReqDeleteChannel{} }
func (m *ReqDeleteChannel) String() string { return proto.CompactTextString(m) }
func (*ReqDeleteChannel) ProtoMessage()    {}
func (*ReqDeleteChannel) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{169}
}

func (m *ReqDeleteChannel) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqDeleteChannel) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *ReqDeleteChannel) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqDeleteChannel) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqDeleteChannel) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// deletechannel 返回参数
type ReplyDeleteChannel struct {
	Send      bool   `protobuf:"varint,1,opt,name=send,proto3" json:"send,omitempty"`
	Reply     []byte `protobuf:"bytes,2,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode int32  `protobuf:"varint,3,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyDeleteChannel) Reset()         { *m = ReplyDeleteChannel{} }
func (m *ReplyDeleteChannel) String() string { return proto.CompactTextString(m) }
func (*ReplyDeleteChannel) ProtoMessage()    {}
func (*ReplyDeleteChannel) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{170}
}

func (m *ReplyDeleteChannel) GetSend() bool {
	if m != nil {
		return m.Send
	}
	return false
}

func (m *ReplyDeleteChannel) GetReply() []byte {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *ReplyDeleteChannel) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// ############################### 读取channel历史 #########################
type ReqReadChannelHistory struct {
	Fromid    int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	FromKeyid int64         `protobuf:"varint,2,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	ChannelId int32         `protobuf:"varint,3,opt,name=channelId,proto3" json:"channelId,omitempty"`
	TopMsgId  int32         `protobuf:"varint,4,opt,name=topMsgId,proto3" json:"topMsgId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqReadChannelHistory) Reset()         { *m = ReqReadChannelHistory{} }
func (m *ReqReadChannelHistory) String() string { return proto.CompactTextString(m) }
func (*ReqReadChannelHistory) ProtoMessage()    {}
func (*ReqReadChannelHistory) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{171}
}

func (m *ReqReadChannelHistory) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqReadChannelHistory) GetFromKeyid() int64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqReadChannelHistory) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqReadChannelHistory) GetTopMsgId() int32 {
	if m != nil {
		return m.TopMsgId
	}
	return 0
}

func (m *ReqReadChannelHistory) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyReadChannelHistory struct {
	IsOk      bool  `protobuf:"varint,1,opt,name=isOk,proto3" json:"isOk,omitempty"`
	ErrorCode int32 `protobuf:"varint,2,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (m *ReplyReadChannelHistory) Reset()         { *m = ReplyReadChannelHistory{} }
func (m *ReplyReadChannelHistory) String() string { return proto.CompactTextString(m) }
func (*ReplyReadChannelHistory) ProtoMessage()    {}
func (*ReplyReadChannelHistory) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{172}
}

func (m *ReplyReadChannelHistory) GetIsOk() bool {
	if m != nil {
		return m.IsOk
	}
	return false
}

func (m *ReplyReadChannelHistory) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type ReqUpdateChannelReadOut struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	MaxId     int32         `protobuf:"varint,2,opt,name=maxId,proto3" json:"maxId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqUpdateChannelReadOut) Reset()         { *m = ReqUpdateChannelReadOut{} }
func (m *ReqUpdateChannelReadOut) String() string { return proto.CompactTextString(m) }
func (*ReqUpdateChannelReadOut) ProtoMessage()    {}
func (*ReqUpdateChannelReadOut) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{173}
}

func (m *ReqUpdateChannelReadOut) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqUpdateChannelReadOut) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *ReqUpdateChannelReadOut) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyUpdateChannelReadOut struct {
	Maxid int32 `protobuf:"varint,1,opt,name=maxid,proto3" json:"maxid,omitempty"`
	Pts   int32 `protobuf:"varint,2,opt,name=pts,proto3" json:"pts,omitempty"`
}

func (m *ReplyUpdateChannelReadOut) Reset()         { *m = ReplyUpdateChannelReadOut{} }
func (m *ReplyUpdateChannelReadOut) String() string { return proto.CompactTextString(m) }
func (*ReplyUpdateChannelReadOut) ProtoMessage()    {}
func (*ReplyUpdateChannelReadOut) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{174}
}

func (m *ReplyUpdateChannelReadOut) GetMaxid() int32 {
	if m != nil {
		return m.Maxid
	}
	return 0
}

func (m *ReplyUpdateChannelReadOut) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

// #####################超级群get diff###################
type ReqGetchannelDifference struct {
	FromId      int32         `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	FromKeyId   int64         `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	Flags       int32         `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"`
	Force       bool          `protobuf:"varint,4,opt,name=force,proto3" json:"force,omitempty"`
	ChannelId   int32         `protobuf:"varint,5,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Pts         int32         `protobuf:"varint,6,opt,name=pts,proto3" json:"pts,omitempty"`
	Limit       int32         `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	Range_MinId int32         `protobuf:"varint,8,opt,name=range_MinId,json=rangeMinId,proto3" json:"range_MinId,omitempty"`
	Range_MaxId int32         `protobuf:"varint,9,opt,name=range_MaxId,json=rangeMaxId,proto3" json:"range_MaxId,omitempty"`
	Device      int32         `protobuf:"varint,10,opt,name=device,proto3" json:"device,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,11,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqGetchannelDifference) Reset()         { *m = ReqGetchannelDifference{} }
func (m *ReqGetchannelDifference) String() string { return proto.CompactTextString(m) }
func (*ReqGetchannelDifference) ProtoMessage()    {}
func (*ReqGetchannelDifference) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{175}
}

func (m *ReqGetchannelDifference) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqGetchannelDifference) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *ReqGetchannelDifference) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ReqGetchannelDifference) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *ReqGetchannelDifference) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetchannelDifference) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *ReqGetchannelDifference) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqGetchannelDifference) GetRange_MinId() int32 {
	if m != nil {
		return m.Range_MinId
	}
	return 0
}

func (m *ReqGetchannelDifference) GetRange_MaxId() int32 {
	if m != nil {
		return m.Range_MaxId
	}
	return 0
}

func (m *ReqGetchannelDifference) GetDevice() int32 {
	if m != nil {
		return m.Device
	}
	return 0
}

func (m *ReqGetchannelDifference) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyChannelDiffCommon struct {
	Difference []byte `protobuf:"bytes,1,opt,name=difference,proto3" json:"difference,omitempty"`
	ErrorCode  int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyChannelDiffCommon) Reset()         { *m = ReplyChannelDiffCommon{} }
func (m *ReplyChannelDiffCommon) String() string { return proto.CompactTextString(m) }
func (*ReplyChannelDiffCommon) ProtoMessage()    {}
func (*ReplyChannelDiffCommon) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{176}
}

func (m *ReplyChannelDiffCommon) GetDifference() []byte {
	if m != nil {
		return m.Difference
	}
	return nil
}

func (m *ReplyChannelDiffCommon) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type ReplyGetChannelDifferenceEmpty struct {
	Flags   int32 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Final   bool  `protobuf:"varint,2,opt,name=final,proto3" json:"final,omitempty"`
	Pts     int32 `protobuf:"varint,3,opt,name=pts,proto3" json:"pts,omitempty"`
	Timeout int32 `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (m *ReplyGetChannelDifferenceEmpty) Reset()         { *m = ReplyGetChannelDifferenceEmpty{} }
func (m *ReplyGetChannelDifferenceEmpty) String() string { return proto.CompactTextString(m) }
func (*ReplyGetChannelDifferenceEmpty) ProtoMessage()    {}
func (*ReplyGetChannelDifferenceEmpty) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{177}
}

func (m *ReplyGetChannelDifferenceEmpty) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ReplyGetChannelDifferenceEmpty) GetFinal() bool {
	if m != nil {
		return m.Final
	}
	return false
}

func (m *ReplyGetChannelDifferenceEmpty) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *ReplyGetChannelDifferenceEmpty) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

type ReplyGetChannelDifference struct {
	Flags     int32    `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Final     bool     `protobuf:"varint,2,opt,name=final,proto3" json:"final,omitempty"`
	Pts       int32    `protobuf:"varint,3,opt,name=pts,proto3" json:"pts,omitempty"`
	Timeout   int32    `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Msgs      [][]byte `protobuf:"bytes,5,rep,name=msgs" json:"msgs,omitempty"`
	ErrorCode int32    `protobuf:"varint,6,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyGetChannelDifference) Reset()         { *m = ReplyGetChannelDifference{} }
func (m *ReplyGetChannelDifference) String() string { return proto.CompactTextString(m) }
func (*ReplyGetChannelDifference) ProtoMessage()    {}
func (*ReplyGetChannelDifference) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{178}
}

func (m *ReplyGetChannelDifference) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ReplyGetChannelDifference) GetFinal() bool {
	if m != nil {
		return m.Final
	}
	return false
}

func (m *ReplyGetChannelDifference) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *ReplyGetChannelDifference) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *ReplyGetChannelDifference) GetMsgs() [][]byte {
	if m != nil {
		return m.Msgs
	}
	return nil
}

func (m *ReplyGetChannelDifference) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type ReplyGetChannelDifferenceTooLong struct {
	Flags           int32    `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Final           bool     `protobuf:"varint,2,opt,name=final,proto3" json:"final,omitempty"`
	Pts             int32    `protobuf:"varint,3,opt,name=pts,proto3" json:"pts,omitempty"`
	Timeout         int32    `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	TopMessage      int32    `protobuf:"varint,5,opt,name=top_message,json=topMessage,proto3" json:"top_message,omitempty"`
	ReadInboxMaxId  int32    `protobuf:"varint,6,opt,name=read_inbox_max_id,json=readInboxMaxId,proto3" json:"read_inbox_max_id,omitempty"`
	ReadOutboxMaxId int32    `protobuf:"varint,7,opt,name=read_outbox_max_id,json=readOutboxMaxId,proto3" json:"read_outbox_max_id,omitempty"`
	UnreadCount     int32    `protobuf:"varint,8,opt,name=unread_count,json=unreadCount,proto3" json:"unread_count,omitempty"`
	Msgs            [][]byte `protobuf:"bytes,9,rep,name=msgs" json:"msgs,omitempty"`
	ErrorCode       int32    `protobuf:"varint,10,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyGetChannelDifferenceTooLong) Reset()         { *m = ReplyGetChannelDifferenceTooLong{} }
func (m *ReplyGetChannelDifferenceTooLong) String() string { return proto.CompactTextString(m) }
func (*ReplyGetChannelDifferenceTooLong) ProtoMessage()    {}
func (*ReplyGetChannelDifferenceTooLong) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{179}
}

func (m *ReplyGetChannelDifferenceTooLong) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ReplyGetChannelDifferenceTooLong) GetFinal() bool {
	if m != nil {
		return m.Final
	}
	return false
}

func (m *ReplyGetChannelDifferenceTooLong) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *ReplyGetChannelDifferenceTooLong) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *ReplyGetChannelDifferenceTooLong) GetTopMessage() int32 {
	if m != nil {
		return m.TopMessage
	}
	return 0
}

func (m *ReplyGetChannelDifferenceTooLong) GetReadInboxMaxId() int32 {
	if m != nil {
		return m.ReadInboxMaxId
	}
	return 0
}

func (m *ReplyGetChannelDifferenceTooLong) GetReadOutboxMaxId() int32 {
	if m != nil {
		return m.ReadOutboxMaxId
	}
	return 0
}

func (m *ReplyGetChannelDifferenceTooLong) GetUnreadCount() int32 {
	if m != nil {
		return m.UnreadCount
	}
	return 0
}

func (m *ReplyGetChannelDifferenceTooLong) GetMsgs() [][]byte {
	if m != nil {
		return m.Msgs
	}
	return nil
}

func (m *ReplyGetChannelDifferenceTooLong) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// ######超级群get history##########
type ReqGetChannelMsgHistory struct {
	ChannelId  int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	OffsetId   int32         `protobuf:"varint,2,opt,name=OffsetId,proto3" json:"OffsetId,omitempty"`
	OffsetDate int32         `protobuf:"varint,3,opt,name=OffsetDate,proto3" json:"OffsetDate,omitempty"`
	AddOffset  int32         `protobuf:"varint,4,opt,name=AddOffset,proto3" json:"AddOffset,omitempty"`
	MinId      int32         `protobuf:"varint,5,opt,name=MinId,proto3" json:"MinId,omitempty"`
	MaxId      int32         `protobuf:"varint,6,opt,name=MaxId,proto3" json:"MaxId,omitempty"`
	Limit      int32         `protobuf:"varint,7,opt,name=Limit,proto3" json:"Limit,omitempty"`
	FromId     int32         `protobuf:"varint,8,opt,name=fromId,proto3" json:"fromId,omitempty"`
	KeyId      uint64        `protobuf:"varint,9,opt,name=keyId,proto3" json:"keyId,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,10,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqGetChannelMsgHistory) Reset()         { *m = ReqGetChannelMsgHistory{} }
func (m *ReqGetChannelMsgHistory) String() string { return proto.CompactTextString(m) }
func (*ReqGetChannelMsgHistory) ProtoMessage()    {}
func (*ReqGetChannelMsgHistory) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{180}
}

func (m *ReqGetChannelMsgHistory) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetChannelMsgHistory) GetOffsetId() int32 {
	if m != nil {
		return m.OffsetId
	}
	return 0
}

func (m *ReqGetChannelMsgHistory) GetOffsetDate() int32 {
	if m != nil {
		return m.OffsetDate
	}
	return 0
}

func (m *ReqGetChannelMsgHistory) GetAddOffset() int32 {
	if m != nil {
		return m.AddOffset
	}
	return 0
}

func (m *ReqGetChannelMsgHistory) GetMinId() int32 {
	if m != nil {
		return m.MinId
	}
	return 0
}

func (m *ReqGetChannelMsgHistory) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *ReqGetChannelMsgHistory) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqGetChannelMsgHistory) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqGetChannelMsgHistory) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *ReqGetChannelMsgHistory) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyChannelMsgs struct {
	//    int32 historyType = 1; // 1:slice 2: all
	//    int32 count = 2; // 总消息数
	//    repeated UserMsg userMsgs = 3; // 消息
	//    int32 pts = 4;
	//    int32 flags = 5;
	//    bytes messages = 6;
	Result    []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	ErrorCode int32  `protobuf:"varint,7,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (m *ReplyChannelMsgs) Reset()         { *m = ReplyChannelMsgs{} }
func (m *ReplyChannelMsgs) String() string { return proto.CompactTextString(m) }
func (*ReplyChannelMsgs) ProtoMessage()    {}
func (*ReplyChannelMsgs) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{181}
}

func (m *ReplyChannelMsgs) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyChannelMsgs) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// 获取participants
type ReqParticipants struct {
	OffSet    int32         `protobuf:"varint,1,opt,name=offSet,proto3" json:"offSet,omitempty"`
	Limit     int32         `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	PartiType int32         `protobuf:"varint,3,opt,name=partiType,proto3" json:"partiType,omitempty"`
	ChannelId int32         `protobuf:"varint,4,opt,name=channelId,proto3" json:"channelId,omitempty"`
	FromId    int32         `protobuf:"varint,5,opt,name=fromId,proto3" json:"fromId,omitempty"`
	Q         string        `protobuf:"bytes,6,opt,name=q,proto3" json:"q,omitempty"`
	Hash      int32         `protobuf:"varint,7,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,8,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqParticipants) Reset()         { *m = ReqParticipants{} }
func (m *ReqParticipants) String() string { return proto.CompactTextString(m) }
func (*ReqParticipants) ProtoMessage()    {}
func (*ReqParticipants) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{182}
}

func (m *ReqParticipants) GetOffSet() int32 {
	if m != nil {
		return m.OffSet
	}
	return 0
}

func (m *ReqParticipants) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqParticipants) GetPartiType() int32 {
	if m != nil {
		return m.PartiType
	}
	return 0
}

func (m *ReqParticipants) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqParticipants) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqParticipants) GetQ() string {
	if m != nil {
		return m.Q
	}
	return ""
}

func (m *ReqParticipants) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *ReqParticipants) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 返回participants
type ReplyParticipants struct {
	Updates   []byte `protobuf:"bytes,1,opt,name=Updates,proto3" json:"Updates,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyParticipants) Reset()         { *m = ReplyParticipants{} }
func (m *ReplyParticipants) String() string { return proto.CompactTextString(m) }
func (*ReplyParticipants) ProtoMessage()    {}
func (*ReplyParticipants) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{183}
}

func (m *ReplyParticipants) GetUpdates() []byte {
	if m != nil {
		return m.Updates
	}
	return nil
}

func (m *ReplyParticipants) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// 获取participant
type ReqParticipant struct {
	Channelid  int32         `protobuf:"varint,1,opt,name=channelid,proto3" json:"channelid,omitempty"`
	FromId     int32         `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	UserId     int32         `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	AccessHash int64         `protobuf:"varint,4,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqParticipant) Reset()                    { *m = ReqParticipant{} }
func (m *ReqParticipant) String() string            { return proto.CompactTextString(m) }
func (*ReqParticipant) ProtoMessage()               {}
func (*ReqParticipant) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{184} }

func (m *ReqParticipant) GetChannelid() int32 {
	if m != nil {
		return m.Channelid
	}
	return 0
}

func (m *ReqParticipant) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqParticipant) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqParticipant) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqParticipant) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 返回participant
type ReplyParticipant struct {
	Updates   []byte `protobuf:"bytes,1,opt,name=Updates,proto3" json:"Updates,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyParticipant) Reset()         { *m = ReplyParticipant{} }
func (m *ReplyParticipant) String() string { return proto.CompactTextString(m) }
func (*ReplyParticipant) ProtoMessage()    {}
func (*ReplyParticipant) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{185}
}

func (m *ReplyParticipant) GetUpdates() []byte {
	if m != nil {
		return m.Updates
	}
	return nil
}

func (m *ReplyParticipant) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// #####超级群get messages by messages id#####
type ReqGetChannelMsgsByMsgsId struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	MsgsId    []int32       `protobuf:"varint,2,rep,packed,name=msgsId" json:"msgsId,omitempty"`
	FromId    int32         `protobuf:"varint,3,opt,name=fromId,proto3" json:"fromId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqGetChannelMsgsByMsgsId) Reset()         { *m = ReqGetChannelMsgsByMsgsId{} }
func (m *ReqGetChannelMsgsByMsgsId) String() string { return proto.CompactTextString(m) }
func (*ReqGetChannelMsgsByMsgsId) ProtoMessage()    {}
func (*ReqGetChannelMsgsByMsgsId) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{186}
}

func (m *ReqGetChannelMsgsByMsgsId) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetChannelMsgsByMsgsId) GetMsgsId() []int32 {
	if m != nil {
		return m.MsgsId
	}
	return nil
}

func (m *ReqGetChannelMsgsByMsgsId) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqGetChannelMsgsByMsgsId) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqGetChannelCommonDialogs struct {
	FromId   int32         `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	ChannIds []int32       `protobuf:"varint,2,rep,packed,name=channIds" json:"channIds,omitempty"`
	Debug    *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqGetChannelCommonDialogs) Reset()         { *m = ReqGetChannelCommonDialogs{} }
func (m *ReqGetChannelCommonDialogs) String() string { return proto.CompactTextString(m) }
func (*ReqGetChannelCommonDialogs) ProtoMessage()    {}
func (*ReqGetChannelCommonDialogs) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{187}
}

func (m *ReqGetChannelCommonDialogs) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqGetChannelCommonDialogs) GetChannIds() []int32 {
	if m != nil {
		return m.ChannIds
	}
	return nil
}

func (m *ReqGetChannelCommonDialogs) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ChannelDialog struct {
	ChannelId   int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	TopMessage  int32 `protobuf:"varint,2,opt,name=TopMessage,proto3" json:"TopMessage,omitempty"`
	MaxReadInId int32 `protobuf:"varint,3,opt,name=MaxReadInId,proto3" json:"MaxReadInId,omitempty"`
	Encry       int32 `protobuf:"varint,4,opt,name=Encry,proto3" json:"Encry,omitempty"`
}

func (m *ChannelDialog) Reset()                    { *m = ChannelDialog{} }
func (m *ChannelDialog) String() string            { return proto.CompactTextString(m) }
func (*ChannelDialog) ProtoMessage()               {}
func (*ChannelDialog) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{188} }

func (m *ChannelDialog) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannelDialog) GetTopMessage() int32 {
	if m != nil {
		return m.TopMessage
	}
	return 0
}

func (m *ChannelDialog) GetMaxReadInId() int32 {
	if m != nil {
		return m.MaxReadInId
	}
	return 0
}

func (m *ChannelDialog) GetEncry() int32 {
	if m != nil {
		return m.Encry
	}
	return 0
}

type ChannelDialogAndMsg struct {
	ChannelDialog *ChannelDialog `protobuf:"bytes,1,opt,name=ChannelDialog" json:"ChannelDialog,omitempty"`
	ChannelMsg    *UserMsg       `protobuf:"bytes,2,opt,name=ChannelMsg" json:"ChannelMsg,omitempty"`
}

func (m *ChannelDialogAndMsg) Reset()         { *m = ChannelDialogAndMsg{} }
func (m *ChannelDialogAndMsg) String() string { return proto.CompactTextString(m) }
func (*ChannelDialogAndMsg) ProtoMessage()    {}
func (*ChannelDialogAndMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{189}
}

func (m *ChannelDialogAndMsg) GetChannelDialog() *ChannelDialog {
	if m != nil {
		return m.ChannelDialog
	}
	return nil
}

func (m *ChannelDialogAndMsg) GetChannelMsg() *UserMsg {
	if m != nil {
		return m.ChannelMsg
	}
	return nil
}

type ChannelDialogAndMsgs struct {
	ChannelDialogAndMsg []*ChannelDialogAndMsg `protobuf:"bytes,1,rep,name=channelDialogAndMsg" json:"channelDialogAndMsg,omitempty"`
}

func (m *ChannelDialogAndMsgs) Reset()         { *m = ChannelDialogAndMsgs{} }
func (m *ChannelDialogAndMsgs) String() string { return proto.CompactTextString(m) }
func (*ChannelDialogAndMsgs) ProtoMessage()    {}
func (*ChannelDialogAndMsgs) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{190}
}

func (m *ChannelDialogAndMsgs) GetChannelDialogAndMsg() []*ChannelDialogAndMsg {
	if m != nil {
		return m.ChannelDialogAndMsg
	}
	return nil
}

type UserMsg struct {
	Id           int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	UserId       int32    `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId       int32    `protobuf:"varint,3,opt,name=WithId,proto3" json:"WithId,omitempty"`
	WithIdType   int32    `protobuf:"varint,4,opt,name=WithIdType,proto3" json:"WithIdType,omitempty"`
	MessageType  int32    `protobuf:"varint,5,opt,name=MessageType,proto3" json:"MessageType,omitempty"`
	Flags        int32    `protobuf:"varint,6,opt,name=Flags,proto3" json:"Flags,omitempty"`
	Out          bool     `protobuf:"varint,7,opt,name=Out,proto3" json:"Out,omitempty"`
	Mentioned    bool     `protobuf:"varint,8,opt,name=Mentioned,proto3" json:"Mentioned,omitempty"`
	MediaUnread  bool     `protobuf:"varint,9,opt,name=MediaUnread,proto3" json:"MediaUnread,omitempty"`
	Silent       bool     `protobuf:"varint,10,opt,name=Silent,proto3" json:"Silent,omitempty"`
	Post         bool     `protobuf:"varint,11,opt,name=Post,proto3" json:"Post,omitempty"`
	MsgId        int32    `protobuf:"varint,12,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	ToId         int32    `protobuf:"varint,13,opt,name=ToId,proto3" json:"ToId,omitempty"`
	Pts          int32    `protobuf:"varint,14,opt,name=Pts,proto3" json:"Pts,omitempty"`
	FwdFrom      []byte   `protobuf:"bytes,15,opt,name=FwdFrom,proto3" json:"FwdFrom,omitempty"`
	ViaBotId     int32    `protobuf:"varint,16,opt,name=ViaBotId,proto3" json:"ViaBotId,omitempty"`
	ReplyToMsgId int32    `protobuf:"varint,17,opt,name=ReplyToMsgId,proto3" json:"ReplyToMsgId,omitempty"`
	Date         int32    `protobuf:"varint,18,opt,name=Date,proto3" json:"Date,omitempty"`
	Message      string   `protobuf:"bytes,19,opt,name=Message,proto3" json:"Message,omitempty"`
	Media        int64    `protobuf:"varint,20,opt,name=Media,proto3" json:"Media,omitempty"`
	MediaData    []byte   `protobuf:"bytes,21,opt,name=MediaData,proto3" json:"MediaData,omitempty"`
	ReplyMarkup  []byte   `protobuf:"bytes,22,opt,name=ReplyMarkup,proto3" json:"ReplyMarkup,omitempty"`
	Entities     [][]byte `protobuf:"bytes,23,rep,name=Entities" json:"Entities,omitempty"`
	FromId       int32    `protobuf:"varint,24,opt,name=FromId,proto3" json:"FromId,omitempty"`
	Views        int32    `protobuf:"varint,25,opt,name=Views,proto3" json:"Views,omitempty"`
	EditDate     int32    `protobuf:"varint,26,opt,name=EditDate,proto3" json:"EditDate,omitempty"`
	Action       []byte   `protobuf:"bytes,27,opt,name=Action,proto3" json:"Action,omitempty"`
	RandomId     int64    `protobuf:"varint,28,opt,name=RandomId,proto3" json:"RandomId,omitempty"`
	Uuid         int64    `protobuf:"varint,29,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	InsertDate   int32    `protobuf:"varint,30,opt,name=InsertDate,proto3" json:"InsertDate,omitempty"`
	UpdateDate   int32    `protobuf:"varint,31,opt,name=UpdateDate,proto3" json:"UpdateDate,omitempty"`
	Encry        int32    `protobuf:"varint,32,opt,name=Encry,proto3" json:"Encry,omitempty"`
}

func (m *UserMsg) Reset()                    { *m = UserMsg{} }
func (m *UserMsg) String() string            { return proto.CompactTextString(m) }
func (*UserMsg) ProtoMessage()               {}
func (*UserMsg) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{191} }

func (m *UserMsg) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserMsg) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserMsg) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *UserMsg) GetWithIdType() int32 {
	if m != nil {
		return m.WithIdType
	}
	return 0
}

func (m *UserMsg) GetMessageType() int32 {
	if m != nil {
		return m.MessageType
	}
	return 0
}

func (m *UserMsg) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *UserMsg) GetOut() bool {
	if m != nil {
		return m.Out
	}
	return false
}

func (m *UserMsg) GetMentioned() bool {
	if m != nil {
		return m.Mentioned
	}
	return false
}

func (m *UserMsg) GetMediaUnread() bool {
	if m != nil {
		return m.MediaUnread
	}
	return false
}

func (m *UserMsg) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *UserMsg) GetPost() bool {
	if m != nil {
		return m.Post
	}
	return false
}

func (m *UserMsg) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *UserMsg) GetToId() int32 {
	if m != nil {
		return m.ToId
	}
	return 0
}

func (m *UserMsg) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *UserMsg) GetFwdFrom() []byte {
	if m != nil {
		return m.FwdFrom
	}
	return nil
}

func (m *UserMsg) GetViaBotId() int32 {
	if m != nil {
		return m.ViaBotId
	}
	return 0
}

func (m *UserMsg) GetReplyToMsgId() int32 {
	if m != nil {
		return m.ReplyToMsgId
	}
	return 0
}

func (m *UserMsg) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *UserMsg) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *UserMsg) GetMedia() int64 {
	if m != nil {
		return m.Media
	}
	return 0
}

func (m *UserMsg) GetMediaData() []byte {
	if m != nil {
		return m.MediaData
	}
	return nil
}

func (m *UserMsg) GetReplyMarkup() []byte {
	if m != nil {
		return m.ReplyMarkup
	}
	return nil
}

func (m *UserMsg) GetEntities() [][]byte {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *UserMsg) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *UserMsg) GetViews() int32 {
	if m != nil {
		return m.Views
	}
	return 0
}

func (m *UserMsg) GetEditDate() int32 {
	if m != nil {
		return m.EditDate
	}
	return 0
}

func (m *UserMsg) GetAction() []byte {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *UserMsg) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *UserMsg) GetUuid() int64 {
	if m != nil {
		return m.Uuid
	}
	return 0
}

func (m *UserMsg) GetInsertDate() int32 {
	if m != nil {
		return m.InsertDate
	}
	return 0
}

func (m *UserMsg) GetUpdateDate() int32 {
	if m != nil {
		return m.UpdateDate
	}
	return 0
}

func (m *UserMsg) GetEncry() int32 {
	if m != nil {
		return m.Encry
	}
	return 0
}

type RequestWebPMessage struct {
	Message  string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	KeyIdNum uint64 `protobuf:"varint,2,opt,name=keyIdNum,proto3" json:"keyIdNum,omitempty"`
	DcId     int32  `protobuf:"varint,3,opt,name=dcId,proto3" json:"dcId,omitempty"`
}

func (m *RequestWebPMessage) Reset()         { *m = RequestWebPMessage{} }
func (m *RequestWebPMessage) String() string { return proto.CompactTextString(m) }
func (*RequestWebPMessage) ProtoMessage()    {}
func (*RequestWebPMessage) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{192}
}

func (m *RequestWebPMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *RequestWebPMessage) GetKeyIdNum() uint64 {
	if m != nil {
		return m.KeyIdNum
	}
	return 0
}

func (m *RequestWebPMessage) GetDcId() int32 {
	if m != nil {
		return m.DcId
	}
	return 0
}

type ReplyRequestWebPagePreview struct {
	WebPage []byte `protobuf:"bytes,1,opt,name=webPage,proto3" json:"webPage,omitempty"`
}

func (m *ReplyRequestWebPagePreview) Reset()         { *m = ReplyRequestWebPagePreview{} }
func (m *ReplyRequestWebPagePreview) String() string { return proto.CompactTextString(m) }
func (*ReplyRequestWebPagePreview) ProtoMessage()    {}
func (*ReplyRequestWebPagePreview) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{193}
}

func (m *ReplyRequestWebPagePreview) GetWebPage() []byte {
	if m != nil {
		return m.WebPage
	}
	return nil
}

// #########################  推送服务 #################################
type Reqpushusermsg struct {
	PushUserId int32  `protobuf:"varint,1,opt,name=PushUserId,proto3" json:"PushUserId,omitempty"`
	Fromid     int32  `protobuf:"varint,2,opt,name=Fromid,proto3" json:"Fromid,omitempty"`
	PushType   string `protobuf:"bytes,3,opt,name=PushType,proto3" json:"PushType,omitempty"`
	Toid       int32  `protobuf:"varint,4,opt,name=Toid,proto3" json:"Toid,omitempty"`
	Msg        string `protobuf:"bytes,5,opt,name=Msg,proto3" json:"Msg,omitempty"`
	MediaType  string `protobuf:"bytes,6,opt,name=MediaType,proto3" json:"MediaType,omitempty"`
	Msgid      int32  `protobuf:"varint,7,opt,name=Msgid,proto3" json:"Msgid,omitempty"`
}

func (m *Reqpushusermsg) Reset()                    { *m = Reqpushusermsg{} }
func (m *Reqpushusermsg) String() string            { return proto.CompactTextString(m) }
func (*Reqpushusermsg) ProtoMessage()               {}
func (*Reqpushusermsg) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{194} }

func (m *Reqpushusermsg) GetPushUserId() int32 {
	if m != nil {
		return m.PushUserId
	}
	return 0
}

func (m *Reqpushusermsg) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *Reqpushusermsg) GetPushType() string {
	if m != nil {
		return m.PushType
	}
	return ""
}

func (m *Reqpushusermsg) GetToid() int32 {
	if m != nil {
		return m.Toid
	}
	return 0
}

func (m *Reqpushusermsg) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *Reqpushusermsg) GetMediaType() string {
	if m != nil {
		return m.MediaType
	}
	return ""
}

func (m *Reqpushusermsg) GetMsgid() int32 {
	if m != nil {
		return m.Msgid
	}
	return 0
}

type ReplyPush struct {
	Reply bool `protobuf:"varint,1,opt,name=reply,proto3" json:"reply,omitempty"`
}

func (m *ReplyPush) Reset()                    { *m = ReplyPush{} }
func (m *ReplyPush) String() string            { return proto.CompactTextString(m) }
func (*ReplyPush) ProtoMessage()               {}
func (*ReplyPush) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{195} }

func (m *ReplyPush) GetReply() bool {
	if m != nil {
		return m.Reply
	}
	return false
}

type ReqMessageSearch struct {
	SelfId  int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	Peer    []byte        `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`
	Q       string        `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	FromId  int32         `protobuf:"varint,4,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	Filter  []byte        `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
	MinDate int32         `protobuf:"varint,6,opt,name=min_date,json=minDate,proto3" json:"min_date,omitempty"`
	MaxDate int32         `protobuf:"varint,7,opt,name=max_date,json=maxDate,proto3" json:"max_date,omitempty"`
	Offset  int32         `protobuf:"varint,8,opt,name=offset,proto3" json:"offset,omitempty"`
	MaxId   int32         `protobuf:"varint,9,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	Limit   int32         `protobuf:"varint,10,opt,name=limit,proto3" json:"limit,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,11,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqMessageSearch) Reset()         { *m = ReqMessageSearch{} }
func (m *ReqMessageSearch) String() string { return proto.CompactTextString(m) }
func (*ReqMessageSearch) ProtoMessage()    {}
func (*ReqMessageSearch) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{196}
}

func (m *ReqMessageSearch) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *ReqMessageSearch) GetPeer() []byte {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *ReqMessageSearch) GetQ() string {
	if m != nil {
		return m.Q
	}
	return ""
}

func (m *ReqMessageSearch) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqMessageSearch) GetFilter() []byte {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ReqMessageSearch) GetMinDate() int32 {
	if m != nil {
		return m.MinDate
	}
	return 0
}

func (m *ReqMessageSearch) GetMaxDate() int32 {
	if m != nil {
		return m.MaxDate
	}
	return 0
}

func (m *ReqMessageSearch) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ReqMessageSearch) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *ReqMessageSearch) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqMessageSearch) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyMessageSearch struct {
	Retype  int32      `protobuf:"varint,1,opt,name=retype,proto3" json:"retype,omitempty"`
	Count   int32      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Message []*UserMsg `protobuf:"bytes,3,rep,name=message" json:"message,omitempty"`
}

func (m *ReplyMessageSearch) Reset()         { *m = ReplyMessageSearch{} }
func (m *ReplyMessageSearch) String() string { return proto.CompactTextString(m) }
func (*ReplyMessageSearch) ProtoMessage()    {}
func (*ReplyMessageSearch) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{197}
}

func (m *ReplyMessageSearch) GetRetype() int32 {
	if m != nil {
		return m.Retype
	}
	return 0
}

func (m *ReplyMessageSearch) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ReplyMessageSearch) GetMessage() []*UserMsg {
	if m != nil {
		return m.Message
	}
	return nil
}

type ReqCheckChatInvite struct {
	FromId    int32         `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	FromKeyId int64         `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	Hash      string        `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqCheckChatInvite) Reset()         { *m = ReqCheckChatInvite{} }
func (m *ReqCheckChatInvite) String() string { return proto.CompactTextString(m) }
func (*ReqCheckChatInvite) ProtoMessage()    {}
func (*ReqCheckChatInvite) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{198}
}

func (m *ReqCheckChatInvite) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqCheckChatInvite) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *ReqCheckChatInvite) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *ReqCheckChatInvite) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqGetChannelsLastMsgsByUserId struct {
	UserId int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Date   int32         `protobuf:"varint,2,opt,name=date,proto3" json:"date,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqGetChannelsLastMsgsByUserId) Reset()         { *m = ReqGetChannelsLastMsgsByUserId{} }
func (m *ReqGetChannelsLastMsgsByUserId) String() string { return proto.CompactTextString(m) }
func (*ReqGetChannelsLastMsgsByUserId) ProtoMessage()    {}
func (*ReqGetChannelsLastMsgsByUserId) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{199}
}

func (m *ReqGetChannelsLastMsgsByUserId) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetChannelsLastMsgsByUserId) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *ReqGetChannelsLastMsgsByUserId) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetChannelsLastMsgsByUserId struct {
	UserMsgs  []*UserMsg `protobuf:"bytes,1,rep,name=userMsgs" json:"userMsgs,omitempty"`
	ErrorCode int32      `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyGetChannelsLastMsgsByUserId) Reset()         { *m = ReplyGetChannelsLastMsgsByUserId{} }
func (m *ReplyGetChannelsLastMsgsByUserId) String() string { return proto.CompactTextString(m) }
func (*ReplyGetChannelsLastMsgsByUserId) ProtoMessage()    {}
func (*ReplyGetChannelsLastMsgsByUserId) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{200}
}

func (m *ReplyGetChannelsLastMsgsByUserId) GetUserMsgs() []*UserMsg {
	if m != nil {
		return m.UserMsgs
	}
	return nil
}

func (m *ReplyGetChannelsLastMsgsByUserId) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// #############Admin Logs#############
type ReqChannelAdminLog struct {
	ChannelId   int32                       `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	FromId      int32                       `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	FromKeyId   int64                       `protobuf:"varint,3,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	AccessHash  int64                       `protobuf:"varint,4,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Q           string                      `protobuf:"bytes,5,opt,name=q,proto3" json:"q,omitempty"`
	EventFilter *ChannelAdminLogEventFilter `protobuf:"bytes,6,opt,name=eventFilter" json:"eventFilter,omitempty"`
	Admins      []int32                     `protobuf:"varint,7,rep,packed,name=admins" json:"admins,omitempty"`
	MaxId       int32                       `protobuf:"varint,8,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	MinId       int32                       `protobuf:"varint,9,opt,name=min_id,json=minId,proto3" json:"min_id,omitempty"`
	Limit       int32                       `protobuf:"varint,10,opt,name=limit,proto3" json:"limit,omitempty"`
	Debug       *pbcomm.Debug               `protobuf:"bytes,11,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqChannelAdminLog) Reset()         { *m = ReqChannelAdminLog{} }
func (m *ReqChannelAdminLog) String() string { return proto.CompactTextString(m) }
func (*ReqChannelAdminLog) ProtoMessage()    {}
func (*ReqChannelAdminLog) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{201}
}

func (m *ReqChannelAdminLog) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqChannelAdminLog) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqChannelAdminLog) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *ReqChannelAdminLog) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqChannelAdminLog) GetQ() string {
	if m != nil {
		return m.Q
	}
	return ""
}

func (m *ReqChannelAdminLog) GetEventFilter() *ChannelAdminLogEventFilter {
	if m != nil {
		return m.EventFilter
	}
	return nil
}

func (m *ReqChannelAdminLog) GetAdmins() []int32 {
	if m != nil {
		return m.Admins
	}
	return nil
}

func (m *ReqChannelAdminLog) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *ReqChannelAdminLog) GetMinId() int32 {
	if m != nil {
		return m.MinId
	}
	return 0
}

func (m *ReqChannelAdminLog) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqChannelAdminLog) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ChannelAdminLogEventFilter struct {
	Flags   int32 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Join    bool  `protobuf:"varint,2,opt,name=join,proto3" json:"join,omitempty"`
	Leave   bool  `protobuf:"varint,3,opt,name=leave,proto3" json:"leave,omitempty"`
	Invite  bool  `protobuf:"varint,4,opt,name=invite,proto3" json:"invite,omitempty"`
	Ban     bool  `protobuf:"varint,5,opt,name=ban,proto3" json:"ban,omitempty"`
	Unban   bool  `protobuf:"varint,6,opt,name=unban,proto3" json:"unban,omitempty"`
	Kick    bool  `protobuf:"varint,7,opt,name=kick,proto3" json:"kick,omitempty"`
	Unkick  bool  `protobuf:"varint,8,opt,name=unkick,proto3" json:"unkick,omitempty"`
	Promote bool  `protobuf:"varint,9,opt,name=promote,proto3" json:"promote,omitempty"`
	Demote  bool  `protobuf:"varint,10,opt,name=demote,proto3" json:"demote,omitempty"`
	Info    bool  `protobuf:"varint,11,opt,name=info,proto3" json:"info,omitempty"`
	Setting bool  `protobuf:"varint,12,opt,name=setting,proto3" json:"setting,omitempty"`
	Pinned  bool  `protobuf:"varint,13,opt,name=pinned,proto3" json:"pinned,omitempty"`
	Edit    bool  `protobuf:"varint,14,opt,name=edit,proto3" json:"edit,omitempty"`
	Delete  bool  `protobuf:"varint,15,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (m *ChannelAdminLogEventFilter) Reset()         { *m = ChannelAdminLogEventFilter{} }
func (m *ChannelAdminLogEventFilter) String() string { return proto.CompactTextString(m) }
func (*ChannelAdminLogEventFilter) ProtoMessage()    {}
func (*ChannelAdminLogEventFilter) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{202}
}

func (m *ChannelAdminLogEventFilter) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ChannelAdminLogEventFilter) GetJoin() bool {
	if m != nil {
		return m.Join
	}
	return false
}

func (m *ChannelAdminLogEventFilter) GetLeave() bool {
	if m != nil {
		return m.Leave
	}
	return false
}

func (m *ChannelAdminLogEventFilter) GetInvite() bool {
	if m != nil {
		return m.Invite
	}
	return false
}

func (m *ChannelAdminLogEventFilter) GetBan() bool {
	if m != nil {
		return m.Ban
	}
	return false
}

func (m *ChannelAdminLogEventFilter) GetUnban() bool {
	if m != nil {
		return m.Unban
	}
	return false
}

func (m *ChannelAdminLogEventFilter) GetKick() bool {
	if m != nil {
		return m.Kick
	}
	return false
}

func (m *ChannelAdminLogEventFilter) GetUnkick() bool {
	if m != nil {
		return m.Unkick
	}
	return false
}

func (m *ChannelAdminLogEventFilter) GetPromote() bool {
	if m != nil {
		return m.Promote
	}
	return false
}

func (m *ChannelAdminLogEventFilter) GetDemote() bool {
	if m != nil {
		return m.Demote
	}
	return false
}

func (m *ChannelAdminLogEventFilter) GetInfo() bool {
	if m != nil {
		return m.Info
	}
	return false
}

func (m *ChannelAdminLogEventFilter) GetSetting() bool {
	if m != nil {
		return m.Setting
	}
	return false
}

func (m *ChannelAdminLogEventFilter) GetPinned() bool {
	if m != nil {
		return m.Pinned
	}
	return false
}

func (m *ChannelAdminLogEventFilter) GetEdit() bool {
	if m != nil {
		return m.Edit
	}
	return false
}

func (m *ChannelAdminLogEventFilter) GetDelete() bool {
	if m != nil {
		return m.Delete
	}
	return false
}

type ReplyChannelAdminLog struct {
	AdminLogResults []byte `protobuf:"bytes,1,opt,name=adminLogResults,proto3" json:"adminLogResults,omitempty"`
	ErrorCode       int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyChannelAdminLog) Reset()         { *m = ReplyChannelAdminLog{} }
func (m *ReplyChannelAdminLog) String() string { return proto.CompactTextString(m) }
func (*ReplyChannelAdminLog) ProtoMessage()    {}
func (*ReplyChannelAdminLog) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{203}
}

func (m *ReplyChannelAdminLog) GetAdminLogResults() []byte {
	if m != nil {
		return m.AdminLogResults
	}
	return nil
}

func (m *ReplyChannelAdminLog) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// ################Import Chat Invite##################
type ReqImportChatInvite struct {
	FromId    int32         `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	FromKeyId int64         `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	Hash      string        `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqImportChatInvite) Reset()         { *m = ReqImportChatInvite{} }
func (m *ReqImportChatInvite) String() string { return proto.CompactTextString(m) }
func (*ReqImportChatInvite) ProtoMessage()    {}
func (*ReqImportChatInvite) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{204}
}

func (m *ReqImportChatInvite) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqImportChatInvite) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *ReqImportChatInvite) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *ReqImportChatInvite) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyImportChatInvite struct {
	Updates   []byte `protobuf:"bytes,1,opt,name=updates,proto3" json:"updates,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyImportChatInvite) Reset()         { *m = ReplyImportChatInvite{} }
func (m *ReplyImportChatInvite) String() string { return proto.CompactTextString(m) }
func (*ReplyImportChatInvite) ProtoMessage()    {}
func (*ReplyImportChatInvite) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{205}
}

func (m *ReplyImportChatInvite) GetUpdates() []byte {
	if m != nil {
		return m.Updates
	}
	return nil
}

func (m *ReplyImportChatInvite) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type ReqBanChannelUser struct {
	FromId              int32                `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	FromKeyId           int64                `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	ChannelId           int32                `protobuf:"varint,3,opt,name=channelId,proto3" json:"channelId,omitempty"`
	BannedUserId        int32                `protobuf:"varint,4,opt,name=bannedUserId,proto3" json:"bannedUserId,omitempty"`
	AccessHash          int64                `protobuf:"varint,5,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	UtilDate            int32                `protobuf:"varint,6,opt,name=util_date,json=utilDate,proto3" json:"util_date,omitempty"`
	ChannelBannedRights *ChannelBannedRights `protobuf:"bytes,7,opt,name=channelBannedRights" json:"channelBannedRights,omitempty"`
	Debug               *pbcomm.Debug        `protobuf:"bytes,8,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqBanChannelUser) Reset()         { *m = ReqBanChannelUser{} }
func (m *ReqBanChannelUser) String() string { return proto.CompactTextString(m) }
func (*ReqBanChannelUser) ProtoMessage()    {}
func (*ReqBanChannelUser) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{206}
}

func (m *ReqBanChannelUser) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqBanChannelUser) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *ReqBanChannelUser) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqBanChannelUser) GetBannedUserId() int32 {
	if m != nil {
		return m.BannedUserId
	}
	return 0
}

func (m *ReqBanChannelUser) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqBanChannelUser) GetUtilDate() int32 {
	if m != nil {
		return m.UtilDate
	}
	return 0
}

func (m *ReqBanChannelUser) GetChannelBannedRights() *ChannelBannedRights {
	if m != nil {
		return m.ChannelBannedRights
	}
	return nil
}

func (m *ReqBanChannelUser) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyBanChannelUser struct {
	Updates   []byte `protobuf:"bytes,1,opt,name=Updates,proto3" json:"Updates,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyBanChannelUser) Reset()         { *m = ReplyBanChannelUser{} }
func (m *ReplyBanChannelUser) String() string { return proto.CompactTextString(m) }
func (*ReplyBanChannelUser) ProtoMessage()    {}
func (*ReplyBanChannelUser) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{207}
}

func (m *ReplyBanChannelUser) GetUpdates() []byte {
	if m != nil {
		return m.Updates
	}
	return nil
}

func (m *ReplyBanChannelUser) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type ChannelBannedRights struct {
	Flags        int32 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	ViewMessages bool  `protobuf:"varint,2,opt,name=view_messages,json=viewMessages,proto3" json:"view_messages,omitempty"`
	SendMessages bool  `protobuf:"varint,3,opt,name=send_messages,json=sendMessages,proto3" json:"send_messages,omitempty"`
	SendMedia    bool  `protobuf:"varint,4,opt,name=send_media,json=sendMedia,proto3" json:"send_media,omitempty"`
	SendStickers bool  `protobuf:"varint,5,opt,name=send_stickers,json=sendStickers,proto3" json:"send_stickers,omitempty"`
	SendGifs     bool  `protobuf:"varint,6,opt,name=send_gifs,json=sendGifs,proto3" json:"send_gifs,omitempty"`
	SendGames    bool  `protobuf:"varint,7,opt,name=send_games,json=sendGames,proto3" json:"send_games,omitempty"`
	SendInline   bool  `protobuf:"varint,8,opt,name=send_inline,json=sendInline,proto3" json:"send_inline,omitempty"`
	EmbedLinks   bool  `protobuf:"varint,9,opt,name=embed_links,json=embedLinks,proto3" json:"embed_links,omitempty"`
	UntilDate    int32 `protobuf:"varint,10,opt,name=until_date,json=untilDate,proto3" json:"until_date,omitempty"`
	// @ add by Qingsong at 2019-11-14 for ban member rights.
	InviteUser      bool `protobuf:"varint,11,opt,name=invite_user,json=inviteUser,proto3" json:"invite_user,omitempty"`
	PinMessage      bool `protobuf:"varint,12,opt,name=pin_message,json=pinMessage,proto3" json:"pin_message,omitempty"`
	ChangeGroupInfo bool `protobuf:"varint,13,opt,name=change_group_info,json=changeGroupInfo,proto3" json:"change_group_info,omitempty"`
	SendPolls       bool `protobuf:"varint,14,opt,name=send_polls,json=sendPolls,proto3" json:"send_polls,omitempty"`
}

func (m *ChannelBannedRights) Reset()         { *m = ChannelBannedRights{} }
func (m *ChannelBannedRights) String() string { return proto.CompactTextString(m) }
func (*ChannelBannedRights) ProtoMessage()    {}
func (*ChannelBannedRights) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{208}
}

func (m *ChannelBannedRights) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ChannelBannedRights) GetViewMessages() bool {
	if m != nil {
		return m.ViewMessages
	}
	return false
}

func (m *ChannelBannedRights) GetSendMessages() bool {
	if m != nil {
		return m.SendMessages
	}
	return false
}

func (m *ChannelBannedRights) GetSendMedia() bool {
	if m != nil {
		return m.SendMedia
	}
	return false
}

func (m *ChannelBannedRights) GetSendStickers() bool {
	if m != nil {
		return m.SendStickers
	}
	return false
}

func (m *ChannelBannedRights) GetSendGifs() bool {
	if m != nil {
		return m.SendGifs
	}
	return false
}

func (m *ChannelBannedRights) GetSendGames() bool {
	if m != nil {
		return m.SendGames
	}
	return false
}

func (m *ChannelBannedRights) GetSendInline() bool {
	if m != nil {
		return m.SendInline
	}
	return false
}

func (m *ChannelBannedRights) GetEmbedLinks() bool {
	if m != nil {
		return m.EmbedLinks
	}
	return false
}

func (m *ChannelBannedRights) GetUntilDate() int32 {
	if m != nil {
		return m.UntilDate
	}
	return 0
}

func (m *ChannelBannedRights) GetInviteUser() bool {
	if m != nil {
		return m.InviteUser
	}
	return false
}

func (m *ChannelBannedRights) GetPinMessage() bool {
	if m != nil {
		return m.PinMessage
	}
	return false
}

func (m *ChannelBannedRights) GetChangeGroupInfo() bool {
	if m != nil {
		return m.ChangeGroupInfo
	}
	return false
}

func (m *ChannelBannedRights) GetSendPolls() bool {
	if m != nil {
		return m.SendPolls
	}
	return false
}

// 获取fullchannel
type ReqFullchannel struct {
	FromId     int32         `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	ChannelId  int32         `protobuf:"varint,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	AccessHash int64         `protobuf:"varint,3,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqFullchannel) Reset()                    { *m = ReqFullchannel{} }
func (m *ReqFullchannel) String() string            { return proto.CompactTextString(m) }
func (*ReqFullchannel) ProtoMessage()               {}
func (*ReqFullchannel) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{209} }

func (m *ReqFullchannel) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqFullchannel) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqFullchannel) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqFullchannel) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 创建超级群的邀请链接
type ReqExportChannelLink struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	FromId    int32         `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqExportChannelLink) Reset()         { *m = ReqExportChannelLink{} }
func (m *ReqExportChannelLink) String() string { return proto.CompactTextString(m) }
func (*ReqExportChannelLink) ProtoMessage()    {}
func (*ReqExportChannelLink) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{210}
}

func (m *ReqExportChannelLink) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqExportChannelLink) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqExportChannelLink) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 返回超级群的邀请链接
type ReplyExportChannelLink struct {
	Exported  []byte `protobuf:"bytes,1,opt,name=exported,proto3" json:"exported,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyExportChannelLink) Reset()         { *m = ReplyExportChannelLink{} }
func (m *ReplyExportChannelLink) String() string { return proto.CompactTextString(m) }
func (*ReplyExportChannelLink) ProtoMessage()    {}
func (*ReplyExportChannelLink) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{211}
}

func (m *ReplyExportChannelLink) GetExported() []byte {
	if m != nil {
		return m.Exported
	}
	return nil
}

func (m *ReplyExportChannelLink) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// 是否允许普通成员邀请人
type ReqChannelToggleInvite struct {
	ChannelId  int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	UserId     int32         `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Enabled    bool          `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	AccessHash int64         `protobuf:"varint,4,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqChannelToggleInvite) Reset()         { *m = ReqChannelToggleInvite{} }
func (m *ReqChannelToggleInvite) String() string { return proto.CompactTextString(m) }
func (*ReqChannelToggleInvite) ProtoMessage()    {}
func (*ReqChannelToggleInvite) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{212}
}

func (m *ReqChannelToggleInvite) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqChannelToggleInvite) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqChannelToggleInvite) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *ReqChannelToggleInvite) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqChannelToggleInvite) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 回复toggle invite
type ReplyChannelToggleInvite struct {
	Reply     []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyChannelToggleInvite) Reset()         { *m = ReplyChannelToggleInvite{} }
func (m *ReplyChannelToggleInvite) String() string { return proto.CompactTextString(m) }
func (*ReplyChannelToggleInvite) ProtoMessage()    {}
func (*ReplyChannelToggleInvite) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{213}
}

func (m *ReplyChannelToggleInvite) GetReply() []byte {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *ReplyChannelToggleInvite) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// 修改channel user name
type ReqChannelUpdateUserName struct {
	ChannelId  int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	AccessHash int64         `protobuf:"varint,2,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	FromId     int32         `protobuf:"varint,3,opt,name=fromId,proto3" json:"fromId,omitempty"`
	UserName   string        `protobuf:"bytes,4,opt,name=userName,proto3" json:"userName,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqChannelUpdateUserName) Reset()         { *m = ReqChannelUpdateUserName{} }
func (m *ReqChannelUpdateUserName) String() string { return proto.CompactTextString(m) }
func (*ReqChannelUpdateUserName) ProtoMessage()    {}
func (*ReqChannelUpdateUserName) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{214}
}

func (m *ReqChannelUpdateUserName) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqChannelUpdateUserName) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqChannelUpdateUserName) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqChannelUpdateUserName) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *ReqChannelUpdateUserName) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 回复channel user name
type ReplyChannelUpdateUserName struct {
	Updated   bool  `protobuf:"varint,1,opt,name=updated,proto3" json:"updated,omitempty"`
	ErrorCode int32 `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyChannelUpdateUserName) Reset()         { *m = ReplyChannelUpdateUserName{} }
func (m *ReplyChannelUpdateUserName) String() string { return proto.CompactTextString(m) }
func (*ReplyChannelUpdateUserName) ProtoMessage()    {}
func (*ReplyChannelUpdateUserName) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{215}
}

func (m *ReplyChannelUpdateUserName) GetUpdated() bool {
	if m != nil {
		return m.Updated
	}
	return false
}

func (m *ReplyChannelUpdateUserName) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// 修改channel user name
type ReqChannelCheckUserName struct {
	ChannelId  int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	AccessHash int64         `protobuf:"varint,2,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	FromId     int32         `protobuf:"varint,3,opt,name=fromId,proto3" json:"fromId,omitempty"`
	UserName   string        `protobuf:"bytes,4,opt,name=userName,proto3" json:"userName,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqChannelCheckUserName) Reset()         { *m = ReqChannelCheckUserName{} }
func (m *ReqChannelCheckUserName) String() string { return proto.CompactTextString(m) }
func (*ReqChannelCheckUserName) ProtoMessage()    {}
func (*ReqChannelCheckUserName) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{216}
}

func (m *ReqChannelCheckUserName) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqChannelCheckUserName) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqChannelCheckUserName) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqChannelCheckUserName) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *ReqChannelCheckUserName) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 回复channel user name
type ReplyChannelCheckUserName struct {
	Valid     bool  `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	ErrorCode int32 `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyChannelCheckUserName) Reset()         { *m = ReplyChannelCheckUserName{} }
func (m *ReplyChannelCheckUserName) String() string { return proto.CompactTextString(m) }
func (*ReplyChannelCheckUserName) ProtoMessage()    {}
func (*ReplyChannelCheckUserName) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{217}
}

func (m *ReplyChannelCheckUserName) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *ReplyChannelCheckUserName) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// 转移群主
type ReqChangeGroupAndChannelCrator struct {
	GroupId    int32 `protobuf:"varint,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	FromId     int32 `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	OperatorId int32 `protobuf:"varint,3,opt,name=OperatorId,proto3" json:"OperatorId,omitempty"`
	IsChat     bool  `protobuf:"varint,4,opt,name=IsChat,proto3" json:"IsChat,omitempty"`
}

func (m *ReqChangeGroupAndChannelCrator) Reset()         { *m = ReqChangeGroupAndChannelCrator{} }
func (m *ReqChangeGroupAndChannelCrator) String() string { return proto.CompactTextString(m) }
func (*ReqChangeGroupAndChannelCrator) ProtoMessage()    {}
func (*ReqChangeGroupAndChannelCrator) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{218}
}

func (m *ReqChangeGroupAndChannelCrator) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *ReqChangeGroupAndChannelCrator) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqChangeGroupAndChannelCrator) GetOperatorId() int32 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

func (m *ReqChangeGroupAndChannelCrator) GetIsChat() bool {
	if m != nil {
		return m.IsChat
	}
	return false
}

// 回复转移群主
type ReplyChangeGroupAndChannelCrator struct {
	Valid     bool  `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	ErrorCode int32 `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyChangeGroupAndChannelCrator) Reset()         { *m = ReplyChangeGroupAndChannelCrator{} }
func (m *ReplyChangeGroupAndChannelCrator) String() string { return proto.CompactTextString(m) }
func (*ReplyChangeGroupAndChannelCrator) ProtoMessage()    {}
func (*ReplyChangeGroupAndChannelCrator) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{219}
}

func (m *ReplyChangeGroupAndChannelCrator) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *ReplyChangeGroupAndChannelCrator) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// 请求给定channel
type ReqGetChannels struct {
	ChannelIds []int32       `protobuf:"varint,1,rep,packed,name=channelIds" json:"channelIds,omitempty"`
	FromId     int32         `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqGetChannels) Reset()                    { *m = ReqGetChannels{} }
func (m *ReqGetChannels) String() string            { return proto.CompactTextString(m) }
func (*ReqGetChannels) ProtoMessage()               {}
func (*ReqGetChannels) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{220} }

func (m *ReqGetChannels) GetChannelIds() []int32 {
	if m != nil {
		return m.ChannelIds
	}
	return nil
}

func (m *ReqGetChannels) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqGetChannels) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 返回get channles
type ReplyGetChannels struct {
	Reply     []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyGetChannels) Reset()         { *m = ReplyGetChannels{} }
func (m *ReplyGetChannels) String() string { return proto.CompactTextString(m) }
func (*ReplyGetChannels) ProtoMessage()    {}
func (*ReplyGetChannels) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{221}
}

func (m *ReplyGetChannels) GetReply() []byte {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *ReplyGetChannels) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// 返回fullchannel
type ReplyFullChannel struct {
	Updates   []byte `protobuf:"bytes,1,opt,name=Updates,proto3" json:"Updates,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyFullChannel) Reset()         { *m = ReplyFullChannel{} }
func (m *ReplyFullChannel) String() string { return proto.CompactTextString(m) }
func (*ReplyFullChannel) ProtoMessage()    {}
func (*ReplyFullChannel) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{222}
}

func (m *ReplyFullChannel) GetUpdates() []byte {
	if m != nil {
		return m.Updates
	}
	return nil
}

func (m *ReplyFullChannel) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type ReqGetMessageByUserIdMsgId struct {
	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	MsgId  int32         `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqGetMessageByUserIdMsgId) Reset()         { *m = ReqGetMessageByUserIdMsgId{} }
func (m *ReqGetMessageByUserIdMsgId) String() string { return proto.CompactTextString(m) }
func (*ReqGetMessageByUserIdMsgId) ProtoMessage()    {}
func (*ReqGetMessageByUserIdMsgId) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{223}
}

func (m *ReqGetMessageByUserIdMsgId) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetMessageByUserIdMsgId) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ReqGetMessageByUserIdMsgId) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetMessageByUserIdMsgId struct {
	UserMessage *messagedb.UserMsg `protobuf:"bytes,1,opt,name=UserMessage" json:"UserMessage,omitempty"`
	ErrorCode   int32              `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyGetMessageByUserIdMsgId) Reset()         { *m = ReplyGetMessageByUserIdMsgId{} }
func (m *ReplyGetMessageByUserIdMsgId) String() string { return proto.CompactTextString(m) }
func (*ReplyGetMessageByUserIdMsgId) ProtoMessage()    {}
func (*ReplyGetMessageByUserIdMsgId) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{224}
}

func (m *ReplyGetMessageByUserIdMsgId) GetUserMessage() *messagedb.UserMsg {
	if m != nil {
		return m.UserMessage
	}
	return nil
}

func (m *ReplyGetMessageByUserIdMsgId) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type ReqGetMessageByUserIdUuid struct {
	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Uuid   int64         `protobuf:"varint,2,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqGetMessageByUserIdUuid) Reset()         { *m = ReqGetMessageByUserIdUuid{} }
func (m *ReqGetMessageByUserIdUuid) String() string { return proto.CompactTextString(m) }
func (*ReqGetMessageByUserIdUuid) ProtoMessage()    {}
func (*ReqGetMessageByUserIdUuid) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{225}
}

func (m *ReqGetMessageByUserIdUuid) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetMessageByUserIdUuid) GetUuid() int64 {
	if m != nil {
		return m.Uuid
	}
	return 0
}

func (m *ReqGetMessageByUserIdUuid) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetMessageByUserIdUuid struct {
	UserMessage *messagedb.UserMsg `protobuf:"bytes,1,opt,name=UserMessage" json:"UserMessage,omitempty"`
	ErrorCode   int32              `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyGetMessageByUserIdUuid) Reset()         { *m = ReplyGetMessageByUserIdUuid{} }
func (m *ReplyGetMessageByUserIdUuid) String() string { return proto.CompactTextString(m) }
func (*ReplyGetMessageByUserIdUuid) ProtoMessage()    {}
func (*ReplyGetMessageByUserIdUuid) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{226}
}

func (m *ReplyGetMessageByUserIdUuid) GetUserMessage() *messagedb.UserMsg {
	if m != nil {
		return m.UserMessage
	}
	return nil
}

func (m *ReplyGetMessageByUserIdUuid) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type ReqGetChannelMessageByChannelIdMsgId struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	MsgId     int32         `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqGetChannelMessageByChannelIdMsgId) Reset()         { *m = ReqGetChannelMessageByChannelIdMsgId{} }
func (m *ReqGetChannelMessageByChannelIdMsgId) String() string { return proto.CompactTextString(m) }
func (*ReqGetChannelMessageByChannelIdMsgId) ProtoMessage()    {}
func (*ReqGetChannelMessageByChannelIdMsgId) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{227}
}

func (m *ReqGetChannelMessageByChannelIdMsgId) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetChannelMessageByChannelIdMsgId) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ReqGetChannelMessageByChannelIdMsgId) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetChannelMessageByChannelIdMsgId struct {
	UserMessage *messagedb.UserMsg `protobuf:"bytes,1,opt,name=UserMessage" json:"UserMessage,omitempty"`
	ErrorCode   int32              `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyGetChannelMessageByChannelIdMsgId) Reset() {
	*m = ReplyGetChannelMessageByChannelIdMsgId{}
}
func (m *ReplyGetChannelMessageByChannelIdMsgId) String() string { return proto.CompactTextString(m) }
func (*ReplyGetChannelMessageByChannelIdMsgId) ProtoMessage()    {}
func (*ReplyGetChannelMessageByChannelIdMsgId) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{228}
}

func (m *ReplyGetChannelMessageByChannelIdMsgId) GetUserMessage() *messagedb.UserMsg {
	if m != nil {
		return m.UserMessage
	}
	return nil
}

func (m *ReplyGetChannelMessageByChannelIdMsgId) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type ReplyStoreOtherInfoMsg struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyStoreOtherInfoMsg) Reset()         { *m = ReplyStoreOtherInfoMsg{} }
func (m *ReplyStoreOtherInfoMsg) String() string { return proto.CompactTextString(m) }
func (*ReplyStoreOtherInfoMsg) ProtoMessage()    {}
func (*ReplyStoreOtherInfoMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{229}
}

func (m *ReplyStoreOtherInfoMsg) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type ReplyBatchStoreOtherInfoMsg struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyBatchStoreOtherInfoMsg) Reset()         { *m = ReplyBatchStoreOtherInfoMsg{} }
func (m *ReplyBatchStoreOtherInfoMsg) String() string { return proto.CompactTextString(m) }
func (*ReplyBatchStoreOtherInfoMsg) ProtoMessage()    {}
func (*ReplyBatchStoreOtherInfoMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{230}
}

func (m *ReplyBatchStoreOtherInfoMsg) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type ReplyGetOtherInfoMsg struct {
	OtherInfoMsgs []*messagedb.OtherInfoMsg `protobuf:"bytes,1,rep,name=OtherInfoMsgs" json:"OtherInfoMsgs,omitempty"`
	ErrorCode     int32                     `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyGetOtherInfoMsg) Reset()         { *m = ReplyGetOtherInfoMsg{} }
func (m *ReplyGetOtherInfoMsg) String() string { return proto.CompactTextString(m) }
func (*ReplyGetOtherInfoMsg) ProtoMessage()    {}
func (*ReplyGetOtherInfoMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{231}
}

func (m *ReplyGetOtherInfoMsg) GetOtherInfoMsgs() []*messagedb.OtherInfoMsg {
	if m != nil {
		return m.OtherInfoMsgs
	}
	return nil
}

func (m *ReplyGetOtherInfoMsg) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type ReqGetUsersChatsMt struct {
	SelfUserid int32         `protobuf:"varint,1,opt,name=self_userid,json=selfUserid,proto3" json:"self_userid,omitempty"`
	UseridArr  []int32       `protobuf:"varint,2,rep,packed,name=userid_arr,json=useridArr" json:"userid_arr,omitempty"`
	ChatidArr  []int32       `protobuf:"varint,3,rep,packed,name=chatid_arr,json=chatidArr" json:"chatid_arr,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqGetUsersChatsMt) Reset()         { *m = ReqGetUsersChatsMt{} }
func (m *ReqGetUsersChatsMt) String() string { return proto.CompactTextString(m) }
func (*ReqGetUsersChatsMt) ProtoMessage()    {}
func (*ReqGetUsersChatsMt) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{232}
}

func (m *ReqGetUsersChatsMt) GetSelfUserid() int32 {
	if m != nil {
		return m.SelfUserid
	}
	return 0
}

func (m *ReqGetUsersChatsMt) GetUseridArr() []int32 {
	if m != nil {
		return m.UseridArr
	}
	return nil
}

func (m *ReqGetUsersChatsMt) GetChatidArr() []int32 {
	if m != nil {
		return m.ChatidArr
	}
	return nil
}

func (m *ReqGetUsersChatsMt) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetUsersChatsMt struct {
	Users     []byte `protobuf:"bytes,1,opt,name=users,proto3" json:"users,omitempty"`
	Chats     []byte `protobuf:"bytes,2,opt,name=chats,proto3" json:"chats,omitempty"`
	ReplyCode int32  `protobuf:"varint,3,opt,name=ReplyCode,proto3" json:"ReplyCode,omitempty"`
}

func (m *ReplyGetUsersChatsMt) Reset()         { *m = ReplyGetUsersChatsMt{} }
func (m *ReplyGetUsersChatsMt) String() string { return proto.CompactTextString(m) }
func (*ReplyGetUsersChatsMt) ProtoMessage()    {}
func (*ReplyGetUsersChatsMt) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{233}
}

func (m *ReplyGetUsersChatsMt) GetUsers() []byte {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ReplyGetUsersChatsMt) GetChats() []byte {
	if m != nil {
		return m.Chats
	}
	return nil
}

func (m *ReplyGetUsersChatsMt) GetReplyCode() int32 {
	if m != nil {
		return m.ReplyCode
	}
	return 0
}

// gif查询上传请求
type ReqGifQueryAndUpload struct {
	GifId string `protobuf:"bytes,1,opt,name=gif_id,json=gifId,proto3" json:"gif_id,omitempty"`
}

func (m *ReqGifQueryAndUpload) Reset()         { *m = ReqGifQueryAndUpload{} }
func (m *ReqGifQueryAndUpload) String() string { return proto.CompactTextString(m) }
func (*ReqGifQueryAndUpload) ProtoMessage()    {}
func (*ReqGifQueryAndUpload) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{234}
}

func (m *ReqGifQueryAndUpload) GetGifId() string {
	if m != nil {
		return m.GifId
	}
	return ""
}

// gif查询上传返回
type ReplyGifQueryAndUpload struct {
	Error   bool     `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *FidData `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *ReplyGifQueryAndUpload) Reset()         { *m = ReplyGifQueryAndUpload{} }
func (m *ReplyGifQueryAndUpload) String() string { return proto.CompactTextString(m) }
func (*ReplyGifQueryAndUpload) ProtoMessage()    {}
func (*ReplyGifQueryAndUpload) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{235}
}

func (m *ReplyGifQueryAndUpload) GetError() bool {
	if m != nil {
		return m.Error
	}
	return false
}

func (m *ReplyGifQueryAndUpload) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ReplyGifQueryAndUpload) GetData() *FidData {
	if m != nil {
		return m.Data
	}
	return nil
}

// gif查询上传数据
type FidData struct {
	Fid        uint64 `protobuf:"varint,2,opt,name=fid,proto3" json:"fid,omitempty"`
	AccessHash uint64 `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	FileSize   uint64 `protobuf:"varint,4,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	Result     int32  `protobuf:"varint,5,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *FidData) Reset()                    { *m = FidData{} }
func (m *FidData) String() string            { return proto.CompactTextString(m) }
func (*FidData) ProtoMessage()               {}
func (*FidData) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{236} }

func (m *FidData) GetFid() uint64 {
	if m != nil {
		return m.Fid
	}
	return 0
}

func (m *FidData) GetAccessHash() uint64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *FidData) GetFileSize() uint64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *FidData) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

// gif搜索请求
type ReqGifSearchApi struct {
	Q      string `protobuf:"bytes,1,opt,name=q,proto3" json:"q,omitempty"`
	Limit  int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset int32  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *ReqGifSearchApi) Reset()         { *m = ReqGifSearchApi{} }
func (m *ReqGifSearchApi) String() string { return proto.CompactTextString(m) }
func (*ReqGifSearchApi) ProtoMessage()    {}
func (*ReqGifSearchApi) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{237}
}

func (m *ReqGifSearchApi) GetQ() string {
	if m != nil {
		return m.Q
	}
	return ""
}

func (m *ReqGifSearchApi) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqGifSearchApi) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// gif搜索返回
type ReplyGifSearchApi struct {
	Error   bool          `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Message string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*SearchData `protobuf:"bytes,3,rep,name=data" json:"data,omitempty"`
	Page    *Pagination   `protobuf:"bytes,4,opt,name=page" json:"page,omitempty"`
}

func (m *ReplyGifSearchApi) Reset()         { *m = ReplyGifSearchApi{} }
func (m *ReplyGifSearchApi) String() string { return proto.CompactTextString(m) }
func (*ReplyGifSearchApi) ProtoMessage()    {}
func (*ReplyGifSearchApi) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{238}
}

func (m *ReplyGifSearchApi) GetError() bool {
	if m != nil {
		return m.Error
	}
	return false
}

func (m *ReplyGifSearchApi) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ReplyGifSearchApi) GetData() []*SearchData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReplyGifSearchApi) GetPage() *Pagination {
	if m != nil {
		return m.Page
	}
	return nil
}

// gif搜索数据
type SearchData struct {
	Type        string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id          string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Title       string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Url         string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	ThumbUrl    string `protobuf:"bytes,5,opt,name=thumb_url,json=thumbUrl,proto3" json:"thumb_url,omitempty"`
	ContentUrl  string `protobuf:"bytes,6,opt,name=content_url,json=contentUrl,proto3" json:"content_url,omitempty"`
	ContentType string `protobuf:"bytes,7,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	Width       int32  `protobuf:"varint,8,opt,name=width,proto3" json:"width,omitempty"`
	Height      int32  `protobuf:"varint,9,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *SearchData) Reset()                    { *m = SearchData{} }
func (m *SearchData) String() string            { return proto.CompactTextString(m) }
func (*SearchData) ProtoMessage()               {}
func (*SearchData) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{239} }

func (m *SearchData) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SearchData) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SearchData) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SearchData) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *SearchData) GetThumbUrl() string {
	if m != nil {
		return m.ThumbUrl
	}
	return ""
}

func (m *SearchData) GetContentUrl() string {
	if m != nil {
		return m.ContentUrl
	}
	return ""
}

func (m *SearchData) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *SearchData) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *SearchData) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

// 分页数据
type Pagination struct {
	TotalCount int32 `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Count      int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Offset     int32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *Pagination) Reset()                    { *m = Pagination{} }
func (m *Pagination) String() string            { return proto.CompactTextString(m) }
func (*Pagination) ProtoMessage()               {}
func (*Pagination) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{240} }

func (m *Pagination) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *Pagination) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Pagination) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// 领取红包请求
type ReqReceiveRedPacket struct {
	FromKeyid      int64         `protobuf:"varint,1,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	UserId         int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerId         int32         `protobuf:"varint,3,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	PeerType       int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerAccessHash int64         `protobuf:"varint,5,opt,name=peer_access_hash,json=peerAccessHash,proto3" json:"peer_access_hash,omitempty"`
	RedPacketId    int64         `protobuf:"varint,6,opt,name=red_packet_id,json=redPacketId,proto3" json:"red_packet_id,omitempty"`
	Debug          *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqReceiveRedPacket) Reset()         { *m = ReqReceiveRedPacket{} }
func (m *ReqReceiveRedPacket) String() string { return proto.CompactTextString(m) }
func (*ReqReceiveRedPacket) ProtoMessage()    {}
func (*ReqReceiveRedPacket) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{241}
}

func (m *ReqReceiveRedPacket) GetFromKeyid() int64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqReceiveRedPacket) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqReceiveRedPacket) GetPeerId() int32 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

func (m *ReqReceiveRedPacket) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *ReqReceiveRedPacket) GetPeerAccessHash() int64 {
	if m != nil {
		return m.PeerAccessHash
	}
	return 0
}

func (m *ReqReceiveRedPacket) GetRedPacketId() int64 {
	if m != nil {
		return m.RedPacketId
	}
	return 0
}

func (m *ReqReceiveRedPacket) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 领取红包请求结果
type ReplyReceiveRedPacket struct {
	Result    []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyReceiveRedPacket) Reset()         { *m = ReplyReceiveRedPacket{} }
func (m *ReplyReceiveRedPacket) String() string { return proto.CompactTextString(m) }
func (*ReplyReceiveRedPacket) ProtoMessage()    {}
func (*ReplyReceiveRedPacket) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{242}
}

func (m *ReplyReceiveRedPacket) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyReceiveRedPacket) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// webpage req
type ReqGetWebPage struct {
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *ReqGetWebPage) Reset()                    { *m = ReqGetWebPage{} }
func (m *ReqGetWebPage) String() string            { return proto.CompactTextString(m) }
func (*ReqGetWebPage) ProtoMessage()               {}
func (*ReqGetWebPage) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{243} }

func (m *ReqGetWebPage) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

// webpage reply
type ReplyGetWebPage struct {
	Error   bool     `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	WebPage *WebPage `protobuf:"bytes,3,opt,name=webPage" json:"webPage,omitempty"`
}

func (m *ReplyGetWebPage) Reset()         { *m = ReplyGetWebPage{} }
func (m *ReplyGetWebPage) String() string { return proto.CompactTextString(m) }
func (*ReplyGetWebPage) ProtoMessage()    {}
func (*ReplyGetWebPage) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{244}
}

func (m *ReplyGetWebPage) GetError() bool {
	if m != nil {
		return m.Error
	}
	return false
}

func (m *ReplyGetWebPage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ReplyGetWebPage) GetWebPage() *WebPage {
	if m != nil {
		return m.WebPage
	}
	return nil
}

// webpage data
type WebPage struct {
	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Url         string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	DisplayUrl  string `protobuf:"bytes,3,opt,name=display_url,json=displayUrl,proto3" json:"display_url,omitempty"`
	Type        string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	SiteName    string `protobuf:"bytes,5,opt,name=site_name,json=siteName,proto3" json:"site_name,omitempty"`
	Title       string `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Photo       string `protobuf:"bytes,8,opt,name=photo,proto3" json:"photo,omitempty"`
	EmbedUrl    string `protobuf:"bytes,9,opt,name=embed_url,json=embedUrl,proto3" json:"embed_url,omitempty"`
	EmbedType   string `protobuf:"bytes,10,opt,name=embed_type,json=embedType,proto3" json:"embed_type,omitempty"`
	EmbedWidth  int32  `protobuf:"varint,11,opt,name=embed_width,json=embedWidth,proto3" json:"embed_width,omitempty"`
	EmbedHeight int32  `protobuf:"varint,12,opt,name=embed_height,json=embedHeight,proto3" json:"embed_height,omitempty"`
	Author      string `protobuf:"bytes,13,opt,name=author,proto3" json:"author,omitempty"`
}

func (m *WebPage) Reset()                    { *m = WebPage{} }
func (m *WebPage) String() string            { return proto.CompactTextString(m) }
func (*WebPage) ProtoMessage()               {}
func (*WebPage) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{245} }

func (m *WebPage) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *WebPage) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *WebPage) GetDisplayUrl() string {
	if m != nil {
		return m.DisplayUrl
	}
	return ""
}

func (m *WebPage) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *WebPage) GetSiteName() string {
	if m != nil {
		return m.SiteName
	}
	return ""
}

func (m *WebPage) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *WebPage) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *WebPage) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *WebPage) GetEmbedUrl() string {
	if m != nil {
		return m.EmbedUrl
	}
	return ""
}

func (m *WebPage) GetEmbedType() string {
	if m != nil {
		return m.EmbedType
	}
	return ""
}

func (m *WebPage) GetEmbedWidth() int32 {
	if m != nil {
		return m.EmbedWidth
	}
	return 0
}

func (m *WebPage) GetEmbedHeight() int32 {
	if m != nil {
		return m.EmbedHeight
	}
	return 0
}

func (m *WebPage) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

type ReqGetWebPagePreview struct {
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *ReqGetWebPagePreview) Reset()         { *m = ReqGetWebPagePreview{} }
func (m *ReqGetWebPagePreview) String() string { return proto.CompactTextString(m) }
func (*ReqGetWebPagePreview) ProtoMessage()    {}
func (*ReqGetWebPagePreview) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{246}
}

func (m *ReqGetWebPagePreview) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type ReplyGetWebPagePreview struct {
	Error   bool     `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	WebPage *WebPage `protobuf:"bytes,3,opt,name=webPage" json:"webPage,omitempty"`
}

func (m *ReplyGetWebPagePreview) Reset()         { *m = ReplyGetWebPagePreview{} }
func (m *ReplyGetWebPagePreview) String() string { return proto.CompactTextString(m) }
func (*ReplyGetWebPagePreview) ProtoMessage()    {}
func (*ReplyGetWebPagePreview) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{247}
}

func (m *ReplyGetWebPagePreview) GetError() bool {
	if m != nil {
		return m.Error
	}
	return false
}

func (m *ReplyGetWebPagePreview) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ReplyGetWebPagePreview) GetWebPage() *WebPage {
	if m != nil {
		return m.WebPage
	}
	return nil
}

// 用户分数
type UserScore struct {
	Userid int32 `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Score  int32 `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
}

func (m *UserScore) Reset()                    { *m = UserScore{} }
func (m *UserScore) String() string            { return proto.CompactTextString(m) }
func (*UserScore) ProtoMessage()               {}
func (*UserScore) Descriptor() ([]byte, []int) { return fileDescriptorPbmessageserver, []int{248} }

func (m *UserScore) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *UserScore) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

type FoldersEditPeerFoldersReq struct {
	Userid      int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	FolderPeers [][]byte      `protobuf:"bytes,2,rep,name=folder_peers,json=folderPeers" json:"folder_peers,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *FoldersEditPeerFoldersReq) Reset()         { *m = FoldersEditPeerFoldersReq{} }
func (m *FoldersEditPeerFoldersReq) String() string { return proto.CompactTextString(m) }
func (*FoldersEditPeerFoldersReq) ProtoMessage()    {}
func (*FoldersEditPeerFoldersReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{249}
}

func (m *FoldersEditPeerFoldersReq) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *FoldersEditPeerFoldersReq) GetFolderPeers() [][]byte {
	if m != nil {
		return m.FolderPeers
	}
	return nil
}

func (m *FoldersEditPeerFoldersReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type FoldersEditPeerFoldersReply struct {
	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *FoldersEditPeerFoldersReply) Reset()         { *m = FoldersEditPeerFoldersReply{} }
func (m *FoldersEditPeerFoldersReply) String() string { return proto.CompactTextString(m) }
func (*FoldersEditPeerFoldersReply) ProtoMessage()    {}
func (*FoldersEditPeerFoldersReply) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{250}
}

func (m *FoldersEditPeerFoldersReply) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *FoldersEditPeerFoldersReply) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

type FoldersDeleteFolderReq struct {
	Userid   int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	FolderId int32         `protobuf:"varint,2,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	Debug    *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *FoldersDeleteFolderReq) Reset()         { *m = FoldersDeleteFolderReq{} }
func (m *FoldersDeleteFolderReq) String() string { return proto.CompactTextString(m) }
func (*FoldersDeleteFolderReq) ProtoMessage()    {}
func (*FoldersDeleteFolderReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{251}
}

func (m *FoldersDeleteFolderReq) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *FoldersDeleteFolderReq) GetFolderId() int32 {
	if m != nil {
		return m.FolderId
	}
	return 0
}

func (m *FoldersDeleteFolderReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type FoldersDeleteFolderReply struct {
	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *FoldersDeleteFolderReply) Reset()         { *m = FoldersDeleteFolderReply{} }
func (m *FoldersDeleteFolderReply) String() string { return proto.CompactTextString(m) }
func (*FoldersDeleteFolderReply) ProtoMessage()    {}
func (*FoldersDeleteFolderReply) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{252}
}

func (m *FoldersDeleteFolderReply) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *FoldersDeleteFolderReply) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// 为红包通知定制系统号发送消息的请求
type ReqSendPaymentNotifyMsg struct {
	UserId     int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccessHash int64         `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	FromId     int32         `protobuf:"varint,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	Message    string        `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Media      []byte        `protobuf:"bytes,5,opt,name=media,proto3" json:"media,omitempty"`
	MediaType  int32         `protobuf:"varint,6,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqSendPaymentNotifyMsg) Reset()         { *m = ReqSendPaymentNotifyMsg{} }
func (m *ReqSendPaymentNotifyMsg) String() string { return proto.CompactTextString(m) }
func (*ReqSendPaymentNotifyMsg) ProtoMessage()    {}
func (*ReqSendPaymentNotifyMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{253}
}

func (m *ReqSendPaymentNotifyMsg) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqSendPaymentNotifyMsg) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqSendPaymentNotifyMsg) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqSendPaymentNotifyMsg) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ReqSendPaymentNotifyMsg) GetMedia() []byte {
	if m != nil {
		return m.Media
	}
	return nil
}

func (m *ReqSendPaymentNotifyMsg) GetMediaType() int32 {
	if m != nil {
		return m.MediaType
	}
	return 0
}

func (m *ReqSendPaymentNotifyMsg) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 为红包通知定制系统号发送消息的请求返回
type RspSendPaymentNotifyMsg struct {
	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (m *RspSendPaymentNotifyMsg) Reset()         { *m = RspSendPaymentNotifyMsg{} }
func (m *RspSendPaymentNotifyMsg) String() string { return proto.CompactTextString(m) }
func (*RspSendPaymentNotifyMsg) ProtoMessage()    {}
func (*RspSendPaymentNotifyMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{254}
}

func (m *RspSendPaymentNotifyMsg) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

// 定制加好友成功后的相互通知消息  （你们已经是好友了，可以进行聊天了）
type ReqSendAddMutulContactNotify struct {
	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FromId int32         `protobuf:"varint,2,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqSendAddMutulContactNotify) Reset()         { *m = ReqSendAddMutulContactNotify{} }
func (m *ReqSendAddMutulContactNotify) String() string { return proto.CompactTextString(m) }
func (*ReqSendAddMutulContactNotify) ProtoMessage()    {}
func (*ReqSendAddMutulContactNotify) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{255}
}

func (m *ReqSendAddMutulContactNotify) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqSendAddMutulContactNotify) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqSendAddMutulContactNotify) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type RespSendAddMutulContactNotify struct {
	Sucessful bool `protobuf:"varint,1,opt,name=sucessful,proto3" json:"sucessful,omitempty"`
}

func (m *RespSendAddMutulContactNotify) Reset()         { *m = RespSendAddMutulContactNotify{} }
func (m *RespSendAddMutulContactNotify) String() string { return proto.CompactTextString(m) }
func (*RespSendAddMutulContactNotify) ProtoMessage()    {}
func (*RespSendAddMutulContactNotify) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{256}
}

func (m *RespSendAddMutulContactNotify) GetSucessful() bool {
	if m != nil {
		return m.Sucessful
	}
	return false
}

type ReqSendAddSingleContactNotify struct {
	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ToId   int32         `protobuf:"varint,2,opt,name=to_id,json=toId,proto3" json:"to_id,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqSendAddSingleContactNotify) Reset()         { *m = ReqSendAddSingleContactNotify{} }
func (m *ReqSendAddSingleContactNotify) String() string { return proto.CompactTextString(m) }
func (*ReqSendAddSingleContactNotify) ProtoMessage()    {}
func (*ReqSendAddSingleContactNotify) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{257}
}

func (m *ReqSendAddSingleContactNotify) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqSendAddSingleContactNotify) GetToId() int32 {
	if m != nil {
		return m.ToId
	}
	return 0
}

func (m *ReqSendAddSingleContactNotify) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type RespSendAddSingleContactNotify struct {
	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (m *RespSendAddSingleContactNotify) Reset()         { *m = RespSendAddSingleContactNotify{} }
func (m *RespSendAddSingleContactNotify) String() string { return proto.CompactTextString(m) }
func (*RespSendAddSingleContactNotify) ProtoMessage()    {}
func (*RespSendAddSingleContactNotify) Descriptor() ([]byte, []int) {
	return fileDescriptorPbmessageserver, []int{258}
}

func (m *RespSendAddSingleContactNotify) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

func init() {
	proto.RegisterType((*ReqSendMediaSysNotify)(nil), "pbmessageserver.ReqSendMediaSysNotify")
	proto.RegisterType((*FailUser)(nil), "pbmessageserver.FailUser")
	proto.RegisterType((*SucceedUser)(nil), "pbmessageserver.SucceedUser")
	proto.RegisterType((*CallBackRespSendMediaSysNotify)(nil), "pbmessageserver.CallBackRespSendMediaSysNotify")
	proto.RegisterType((*RespSendMediaSysNotify)(nil), "pbmessageserver.RespSendMediaSysNotify")
	proto.RegisterType((*ReqEditMessageMedia)(nil), "pbmessageserver.ReqEditMessageMedia")
	proto.RegisterType((*RespEditMessageMedia)(nil), "pbmessageserver.RespEditMessageMedia")
	proto.RegisterType((*InlineCall)(nil), "pbmessageserver.InlineCall")
	proto.RegisterType((*ChannelInactiveUser)(nil), "pbmessageserver.ChannelInactiveUser")
	proto.RegisterType((*GetChannelInactiveUsersReq)(nil), "pbmessageserver.GetChannelInactiveUsersReq")
	proto.RegisterType((*GetChannelInactiveUsersResult)(nil), "pbmessageserver.GetChannelInactiveUsersResult")
	proto.RegisterType((*GetSecurityRandomIdsReq)(nil), "pbmessageserver.GetSecurityRandomIdsReq")
	proto.RegisterType((*GetSecurityRandomIdsResult)(nil), "pbmessageserver.GetSecurityRandomIdsResult")
	proto.RegisterType((*LogoutDisCardAllSecurityReq)(nil), "pbmessageserver.LogoutDisCardAllSecurityReq")
	proto.RegisterType((*LogoutDisCardAllSecurityResult)(nil), "pbmessageserver.LogoutDisCardAllSecurityResult")
	proto.RegisterType((*SetEncryptedTypingReq)(nil), "pbmessageserver.SetEncryptedTypingReq")
	proto.RegisterType((*SetEncryptedTypingResult)(nil), "pbmessageserver.SetEncryptedTypingResult")
	proto.RegisterType((*ReadEncryptedHistoryReq)(nil), "pbmessageserver.ReadEncryptedHistoryReq")
	proto.RegisterType((*ReadEncryptedHistoryResult)(nil), "pbmessageserver.ReadEncryptedHistoryResult")
	proto.RegisterType((*DiscardEncryptionReq)(nil), "pbmessageserver.DiscardEncryptionReq")
	proto.RegisterType((*DiscardEncryptionResult)(nil), "pbmessageserver.DiscardEncryptionResult")
	proto.RegisterType((*SendEncryptedServiceReq)(nil), "pbmessageserver.SendEncryptedServiceReq")
	proto.RegisterType((*SendEncryptedServiceResult)(nil), "pbmessageserver.SendEncryptedServiceResult")
	proto.RegisterType((*SendEncryptedFileReq)(nil), "pbmessageserver.SendEncryptedFileReq")
	proto.RegisterType((*SendEncryptedFileResult)(nil), "pbmessageserver.SendEncryptedFileResult")
	proto.RegisterType((*SendEncryptedReq)(nil), "pbmessageserver.SendEncryptedReq")
	proto.RegisterType((*SendEncryptedResult)(nil), "pbmessageserver.SendEncryptedResult")
	proto.RegisterType((*AcceptEncryptionReq)(nil), "pbmessageserver.AcceptEncryptionReq")
	proto.RegisterType((*AcceptEncryptionResult)(nil), "pbmessageserver.AcceptEncryptionResult")
	proto.RegisterType((*RequestEncryptionReq)(nil), "pbmessageserver.RequestEncryptionReq")
	proto.RegisterType((*RequestEncryptionResult)(nil), "pbmessageserver.RequestEncryptionResult")
	proto.RegisterType((*ReqBotCall)(nil), "pbmessageserver.ReqBotCall")
	proto.RegisterType((*ReplyBotCall)(nil), "pbmessageserver.ReplyBotCall")
	proto.RegisterType((*ReqBotInlineCall)(nil), "pbmessageserver.ReqBotInlineCall")
	proto.RegisterType((*ReplyBotInlineCall)(nil), "pbmessageserver.ReplyBotInlineCall")
	proto.RegisterType((*ReqSetGameScore)(nil), "pbmessageserver.ReqSetGameScore")
	proto.RegisterType((*ReplySetGameScore)(nil), "pbmessageserver.ReplySetGameScore")
	proto.RegisterType((*ReqRemoveConn)(nil), "pbmessageserver.ReqRemoveConn")
	proto.RegisterType((*ReplyRemoveConn)(nil), "pbmessageserver.ReplyRemoveConn")
	proto.RegisterType((*ReqSignUpMsg)(nil), "pbmessageserver.ReqSignUpMsg")
	proto.RegisterType((*ReqSendCodeMsg)(nil), "pbmessageserver.ReqSendCodeMsg")
	proto.RegisterType((*ReqSignInMsg)(nil), "pbmessageserver.ReqSignInMsg")
	proto.RegisterType((*ReqSendSynMsg)(nil), "pbmessageserver.ReqSendSynMsg")
	proto.RegisterType((*ReqSendUserMsg)(nil), "pbmessageserver.ReqSendUserMsg")
	proto.RegisterType((*ReqSendUserOneClientMsg)(nil), "pbmessageserver.ReqSendUserOneClientMsg")
	proto.RegisterType((*ReqSendMoreUserMsg)(nil), "pbmessageserver.ReqSendMoreUserMsg")
	proto.RegisterType((*ReqSendCallMsg)(nil), "pbmessageserver.ReqSendCallMsg")
	proto.RegisterType((*ReqCallPush)(nil), "pbmessageserver.ReqCallPush")
	proto.RegisterType((*ReplyCallPush)(nil), "pbmessageserver.ReplyCallPush")
	proto.RegisterType((*ReqGetState)(nil), "pbmessageserver.ReqGetState")
	proto.RegisterType((*ReplyResult)(nil), "pbmessageserver.ReplyResult")
	proto.RegisterType((*ReplyNull)(nil), "pbmessageserver.ReplyNull")
	proto.RegisterType((*ReqGetPts)(nil), "pbmessageserver.ReqGetPts")
	proto.RegisterType((*ReplyGetPts)(nil), "pbmessageserver.ReplyGetPts")
	proto.RegisterType((*RequestDialog)(nil), "pbmessageserver.RequestDialog")
	proto.RegisterType((*ReplyDialog)(nil), "pbmessageserver.ReplyDialog")
	proto.RegisterType((*UserIdRating)(nil), "pbmessageserver.UserIdRating")
	proto.RegisterType((*ReplyGetLastLimitDialog)(nil), "pbmessageserver.ReplyGetLastLimitDialog")
	proto.RegisterType((*ReqPinnedDialogs)(nil), "pbmessageserver.ReqPinnedDialogs")
	proto.RegisterType((*ReqPeerDialogs)(nil), "pbmessageserver.ReqPeerDialogs")
	proto.RegisterType((*ReqRecentLocations)(nil), "pbmessageserver.ReqRecentLocations")
	proto.RegisterType((*ReqPinDialog)(nil), "pbmessageserver.ReqPinDialog")
	proto.RegisterType((*ReqReorderPinnedDialogs)(nil), "pbmessageserver.ReqReorderPinnedDialogs")
	proto.RegisterType((*ReplyBool)(nil), "pbmessageserver.ReplyBool")
	proto.RegisterType((*RequestSendMessage)(nil), "pbmessageserver.RequestSendMessage")
	proto.RegisterType((*SendVoteReq)(nil), "pbmessageserver.SendVoteReq")
	proto.RegisterType((*SendVoteReply)(nil), "pbmessageserver.SendVoteReply")
	proto.RegisterType((*RequestSySSendMessage)(nil), "pbmessageserver.RequestSySSendMessage")
	proto.RegisterType((*ReqS2SMsg)(nil), "pbmessageserver.ReqS2SMsg")
	proto.RegisterType((*ReplyS2SMsg)(nil), "pbmessageserver.ReplyS2SMsg")
	proto.RegisterType((*ReqSendMedia)(nil), "pbmessageserver.ReqSendMedia")
	proto.RegisterType((*ReqUploadMedia)(nil), "pbmessageserver.ReqUploadMedia")
	proto.RegisterType((*ReqForwardMessages)(nil), "pbmessageserver.ReqForwardMessages")
	proto.RegisterType((*ReplyForwardMessages)(nil), "pbmessageserver.ReplyForwardMessages")
	proto.RegisterType((*Msg)(nil), "pbmessageserver.Msg")
	proto.RegisterType((*ReqGetMsgs)(nil), "pbmessageserver.ReqGetMsgs")
	proto.RegisterType((*ReplyGetMsgs)(nil), "pbmessageserver.ReplyGetMsgs")
	proto.RegisterType((*ReqHistory)(nil), "pbmessageserver.ReqHistory")
	proto.RegisterType((*ReplyHistory)(nil), "pbmessageserver.ReplyHistory")
	proto.RegisterType((*ReqCreateChat)(nil), "pbmessageserver.ReqCreateChat")
	proto.RegisterType((*ReplyCreateChat)(nil), "pbmessageserver.ReplyCreateChat")
	proto.RegisterType((*ReqAddChatUser)(nil), "pbmessageserver.ReqAddChatUser")
	proto.RegisterType((*ReplyAddChatUser)(nil), "pbmessageserver.ReplyAddChatUser")
	proto.RegisterType((*ReqDeleteChatUser)(nil), "pbmessageserver.ReqDeleteChatUser")
	proto.RegisterType((*ReplyDeleteChatUser)(nil), "pbmessageserver.ReplyDeleteChatUser")
	proto.RegisterType((*ReqEditChatAdmin)(nil), "pbmessageserver.ReqEditChatAdmin")
	proto.RegisterType((*ReplyEditChatAdmin)(nil), "pbmessageserver.ReplyEditChatAdmin")
	proto.RegisterType((*ReqEditChatTitle)(nil), "pbmessageserver.ReqEditChatTitle")
	proto.RegisterType((*ReplyEditChatTitle)(nil), "pbmessageserver.ReplyEditChatTitle")
	proto.RegisterType((*ReqGetAllChats)(nil), "pbmessageserver.ReqGetAllChats")
	proto.RegisterType((*ReplyGetAllChats)(nil), "pbmessageserver.ReplyGetAllChats")
	proto.RegisterType((*ReqGetFullChat)(nil), "pbmessageserver.ReqGetFullChat")
	proto.RegisterType((*ReplyGetFullChat)(nil), "pbmessageserver.ReplyGetFullChat")
	proto.RegisterType((*ReqEditChatPhoto)(nil), "pbmessageserver.ReqEditChatPhoto")
	proto.RegisterType((*ReplyEditChatPhoto)(nil), "pbmessageserver.ReplyEditChatPhoto")
	proto.RegisterType((*ReqMigrateChat)(nil), "pbmessageserver.ReqMigrateChat")
	proto.RegisterType((*ReplyMigrateChat)(nil), "pbmessageserver.ReplyMigrateChat")
	proto.RegisterType((*ReqReadHistory)(nil), "pbmessageserver.ReqReadHistory")
	proto.RegisterType((*ReplyReadHistory)(nil), "pbmessageserver.ReplyReadHistory")
	proto.RegisterType((*ReqUpdateReadOut)(nil), "pbmessageserver.ReqUpdateReadOut")
	proto.RegisterType((*ReplyUpdateReadOut)(nil), "pbmessageserver.ReplyUpdateReadOut")
	proto.RegisterType((*ReqDiffByPts)(nil), "pbmessageserver.ReqDiffByPts")
	proto.RegisterType((*ReplyDiffByPts)(nil), "pbmessageserver.ReplyDiffByPts")
	proto.RegisterType((*ReqDeleteHistory)(nil), "pbmessageserver.ReqDeleteHistory")
	proto.RegisterType((*ReplyDeleteHistory)(nil), "pbmessageserver.ReplyDeleteHistory")
	proto.RegisterType((*ReqDeleteMessages)(nil), "pbmessageserver.ReqDeleteMessages")
	proto.RegisterType((*ReplyDeleteMessages)(nil), "pbmessageserver.ReplyDeleteMessages")
	proto.RegisterType((*ReqEditMessage)(nil), "pbmessageserver.ReqEditMessage")
	proto.RegisterType((*ReplyEditMessage)(nil), "pbmessageserver.ReplyEditMessage")
	proto.RegisterType((*ReqNotifySettings)(nil), "pbmessageserver.ReqNotifySettings")
	proto.RegisterType((*ReplyNotifySettings)(nil), "pbmessageserver.ReplyNotifySettings")
	proto.RegisterType((*ReqUpdateNotifySettings)(nil), "pbmessageserver.ReqUpdateNotifySettings")
	proto.RegisterType((*ReplyUpdateNotifySettings)(nil), "pbmessageserver.ReplyUpdateNotifySettings")
	proto.RegisterType((*ReqMessageEditData)(nil), "pbmessageserver.ReqMessageEditData")
	proto.RegisterType((*ReplyMessageEditData)(nil), "pbmessageserver.ReplyMessageEditData")
	proto.RegisterType((*ReqSaveMsgDraft)(nil), "pbmessageserver.ReqSaveMsgDraft")
	proto.RegisterType((*ReplySaveMsgDraft)(nil), "pbmessageserver.ReplySaveMsgDraft")
	proto.RegisterType((*ReqGetUserUnRead)(nil), "pbmessageserver.ReqGetUserUnRead")
	proto.RegisterType((*ReplyUserUnread)(nil), "pbmessageserver.ReplyUserUnread")
	proto.RegisterType((*InputChannel)(nil), "pbmessageserver.InputChannel")
	proto.RegisterType((*InputChannelEmpty)(nil), "pbmessageserver.InputChannelEmpty")
	proto.RegisterType((*InputChannelinputChannel)(nil), "pbmessageserver.InputChannelinputChannel")
	proto.RegisterType((*MessageActionEditChannelPhoto)(nil), "pbmessageserver.MessageActionEditChannelPhoto")
	proto.RegisterType((*MessageActionEditChannelAbout)(nil), "pbmessageserver.MessageActionEditChannelAbout")
	proto.RegisterType((*MessageActionDeleteChannelMessages)(nil), "pbmessageserver.MessageActionDeleteChannelMessages")
	proto.RegisterType((*MessageActionDeleteChannelHistory)(nil), "pbmessageserver.MessageActionDeleteChannelHistory")
	proto.RegisterType((*MessageActionUpdatePinnedChannelMessage)(nil), "pbmessageserver.MessageActionUpdatePinnedChannelMessage")
	proto.RegisterType((*MessageActionCheckChannelUsername)(nil), "pbmessageserver.MessageActionCheckChannelUsername")
	proto.RegisterType((*MessageActionUpdateChannelUsername)(nil), "pbmessageserver.MessageActionUpdateChannelUsername")
	proto.RegisterType((*MessageActionExportChannelInvite)(nil), "pbmessageserver.MessageActionExportChannelInvite")
	proto.RegisterType((*MessageActionDeleteChannel)(nil), "pbmessageserver.MessageActionDeleteChannel")
	proto.RegisterType((*MessageActionChannelCreate)(nil), "pbmessageserver.MessageActionChannelCreate")
	proto.RegisterType((*MessageActionAddChannelUser)(nil), "pbmessageserver.MessageActionAddChannelUser")
	proto.RegisterType((*MessageActionDeleteChannelUser)(nil), "pbmessageserver.MessageActionDeleteChannelUser")
	proto.RegisterType((*MessageActionUserLeaveChannel)(nil), "pbmessageserver.MessageActionUserLeaveChannel")
	proto.RegisterType((*MessageActionEditChannelTitle)(nil), "pbmessageserver.messageActionEditChannelTitle")
	proto.RegisterType((*UserStatusOnline)(nil), "pbmessageserver.UserStatusOnline")
	proto.RegisterType((*UserStatusOffline)(nil), "pbmessageserver.UserStatusOffline")
	proto.RegisterType((*UserStatusLastMonth)(nil), "pbmessageserver.UserStatusLastMonth")
	proto.RegisterType((*Status)(nil), "pbmessageserver.Status")
	proto.RegisterType((*UserInfo)(nil), "pbmessageserver.User_info")
	proto.RegisterType((*Channel)(nil), "pbmessageserver.Channel")
	proto.RegisterType((*UpdateNewChannelMessage)(nil), "pbmessageserver.UpdateNewChannelMessage")
	proto.RegisterType((*RequestChannel)(nil), "pbmessageserver.RequestChannel")
	proto.RegisterType((*ReplyChannel)(nil), "pbmessageserver.ReplyChannel")
	proto.RegisterType((*RequestChannelInvite)(nil), "pbmessageserver.RequestChannelInvite")
	proto.RegisterType((*ReplyChannelInvite)(nil), "pbmessageserver.ReplyChannelInvite")
	proto.RegisterType((*ReqJoinChannel)(nil), "pbmessageserver.ReqJoinChannel")
	proto.RegisterType((*ReplyJoinChannel)(nil), "pbmessageserver.ReplyJoinChannel")
	proto.RegisterType((*ReqChannelKick)(nil), "pbmessageserver.ReqChannelKick")
	proto.RegisterType((*ReplyChannelKick)(nil), "pbmessageserver.ReplyChannelKick")
	proto.RegisterType((*ReqLeaveChannel)(nil), "pbmessageserver.ReqLeaveChannel")
	proto.RegisterType((*ReplyLeaveChannel)(nil), "pbmessageserver.ReplyLeaveChannel")
	proto.RegisterType((*ReqEditChannelTitle)(nil), "pbmessageserver.ReqEditChannelTitle")
	proto.RegisterType((*ReplyEditChannelTitle)(nil), "pbmessageserver.ReplyEditChannelTitle")
	proto.RegisterType((*ReqEditChannelAdmin)(nil), "pbmessageserver.ReqEditChannelAdmin")
	proto.RegisterType((*ReplyEditChannelAdmin)(nil), "pbmessageserver.ReplyEditChannelAdmin")
	proto.RegisterType((*ReqEditChannelPhoto)(nil), "pbmessageserver.ReqEditChannelPhoto")
	proto.RegisterType((*ReplyEditChannelPhoto)(nil), "pbmessageserver.ReplyEditChannelPhoto")
	proto.RegisterType((*ChatInviteExported)(nil), "pbmessageserver.chatInviteExported")
	proto.RegisterType((*ReqEditChannelAbout)(nil), "pbmessageserver.ReqEditChannelAbout")
	proto.RegisterType((*ReplyEditChannelAbout)(nil), "pbmessageserver.ReplyEditChannelAbout")
	proto.RegisterType((*ReqDeleteChannelMessages)(nil), "pbmessageserver.ReqDeleteChannelMessages")
	proto.RegisterType((*ReplyDeleteChannelMessages)(nil), "pbmessageserver.ReplyDeleteChannelMessages")
	proto.RegisterType((*ReqDeleteChannelSelfHistory)(nil), "pbmessageserver.ReqDeleteChannelSelfHistory")
	proto.RegisterType((*ReqDeleteChannelHistory)(nil), "pbmessageserver.ReqDeleteChannelHistory")
	proto.RegisterType((*ReplyDeleteChannelHistory)(nil), "pbmessageserver.ReplyDeleteChannelHistory")
	proto.RegisterType((*ReqUpdatePinnedChannelMessage)(nil), "pbmessageserver.ReqUpdatePinnedChannelMessage")
	proto.RegisterType((*ReplyUpdatePinnedChannelMessage)(nil), "pbmessageserver.ReplyUpdatePinnedChannelMessage")
	proto.RegisterType((*ReqDeleteChannel)(nil), "pbmessageserver.ReqDeleteChannel")
	proto.RegisterType((*ReplyDeleteChannel)(nil), "pbmessageserver.ReplyDeleteChannel")
	proto.RegisterType((*ReqReadChannelHistory)(nil), "pbmessageserver.ReqReadChannelHistory")
	proto.RegisterType((*ReplyReadChannelHistory)(nil), "pbmessageserver.ReplyReadChannelHistory")
	proto.RegisterType((*ReqUpdateChannelReadOut)(nil), "pbmessageserver.ReqUpdateChannelReadOut")
	proto.RegisterType((*ReplyUpdateChannelReadOut)(nil), "pbmessageserver.ReplyUpdateChannelReadOut")
	proto.RegisterType((*ReqGetchannelDifference)(nil), "pbmessageserver.ReqGetchannelDifference")
	proto.RegisterType((*ReplyChannelDiffCommon)(nil), "pbmessageserver.ReplyChannelDiffCommon")
	proto.RegisterType((*ReplyGetChannelDifferenceEmpty)(nil), "pbmessageserver.ReplyGetChannelDifferenceEmpty")
	proto.RegisterType((*ReplyGetChannelDifference)(nil), "pbmessageserver.ReplyGetChannelDifference")
	proto.RegisterType((*ReplyGetChannelDifferenceTooLong)(nil), "pbmessageserver.ReplyGetChannelDifferenceTooLong")
	proto.RegisterType((*ReqGetChannelMsgHistory)(nil), "pbmessageserver.ReqGetChannelMsgHistory")
	proto.RegisterType((*ReplyChannelMsgs)(nil), "pbmessageserver.ReplyChannelMsgs")
	proto.RegisterType((*ReqParticipants)(nil), "pbmessageserver.ReqParticipants")
	proto.RegisterType((*ReplyParticipants)(nil), "pbmessageserver.ReplyParticipants")
	proto.RegisterType((*ReqParticipant)(nil), "pbmessageserver.ReqParticipant")
	proto.RegisterType((*ReplyParticipant)(nil), "pbmessageserver.ReplyParticipant")
	proto.RegisterType((*ReqGetChannelMsgsByMsgsId)(nil), "pbmessageserver.ReqGetChannelMsgsByMsgsId")
	proto.RegisterType((*ReqGetChannelCommonDialogs)(nil), "pbmessageserver.ReqGetChannelCommonDialogs")
	proto.RegisterType((*ChannelDialog)(nil), "pbmessageserver.ChannelDialog")
	proto.RegisterType((*ChannelDialogAndMsg)(nil), "pbmessageserver.ChannelDialogAndMsg")
	proto.RegisterType((*ChannelDialogAndMsgs)(nil), "pbmessageserver.ChannelDialogAndMsgs")
	proto.RegisterType((*UserMsg)(nil), "pbmessageserver.UserMsg")
	proto.RegisterType((*RequestWebPMessage)(nil), "pbmessageserver.RequestWebPMessage")
	proto.RegisterType((*ReplyRequestWebPagePreview)(nil), "pbmessageserver.ReplyRequestWebPagePreview")
	proto.RegisterType((*Reqpushusermsg)(nil), "pbmessageserver.Reqpushusermsg")
	proto.RegisterType((*ReplyPush)(nil), "pbmessageserver.ReplyPush")
	proto.RegisterType((*ReqMessageSearch)(nil), "pbmessageserver.ReqMessageSearch")
	proto.RegisterType((*ReplyMessageSearch)(nil), "pbmessageserver.ReplyMessageSearch")
	proto.RegisterType((*ReqCheckChatInvite)(nil), "pbmessageserver.ReqCheckChatInvite")
	proto.RegisterType((*ReqGetChannelsLastMsgsByUserId)(nil), "pbmessageserver.ReqGetChannelsLastMsgsByUserId")
	proto.RegisterType((*ReplyGetChannelsLastMsgsByUserId)(nil), "pbmessageserver.ReplyGetChannelsLastMsgsByUserId")
	proto.RegisterType((*ReqChannelAdminLog)(nil), "pbmessageserver.ReqChannelAdminLog")
	proto.RegisterType((*ChannelAdminLogEventFilter)(nil), "pbmessageserver.ChannelAdminLogEventFilter")
	proto.RegisterType((*ReplyChannelAdminLog)(nil), "pbmessageserver.ReplyChannelAdminLog")
	proto.RegisterType((*ReqImportChatInvite)(nil), "pbmessageserver.ReqImportChatInvite")
	proto.RegisterType((*ReplyImportChatInvite)(nil), "pbmessageserver.ReplyImportChatInvite")
	proto.RegisterType((*ReqBanChannelUser)(nil), "pbmessageserver.ReqBanChannelUser")
	proto.RegisterType((*ReplyBanChannelUser)(nil), "pbmessageserver.ReplyBanChannelUser")
	proto.RegisterType((*ChannelBannedRights)(nil), "pbmessageserver.ChannelBannedRights")
	proto.RegisterType((*ReqFullchannel)(nil), "pbmessageserver.ReqFullchannel")
	proto.RegisterType((*ReqExportChannelLink)(nil), "pbmessageserver.ReqExportChannelLink")
	proto.RegisterType((*ReplyExportChannelLink)(nil), "pbmessageserver.ReplyExportChannelLink")
	proto.RegisterType((*ReqChannelToggleInvite)(nil), "pbmessageserver.ReqChannelToggleInvite")
	proto.RegisterType((*ReplyChannelToggleInvite)(nil), "pbmessageserver.ReplyChannelToggleInvite")
	proto.RegisterType((*ReqChannelUpdateUserName)(nil), "pbmessageserver.ReqChannelUpdateUserName")
	proto.RegisterType((*ReplyChannelUpdateUserName)(nil), "pbmessageserver.ReplyChannelUpdateUserName")
	proto.RegisterType((*ReqChannelCheckUserName)(nil), "pbmessageserver.ReqChannelCheckUserName")
	proto.RegisterType((*ReplyChannelCheckUserName)(nil), "pbmessageserver.ReplyChannelCheckUserName")
	proto.RegisterType((*ReqChangeGroupAndChannelCrator)(nil), "pbmessageserver.ReqChangeGroupAndChannelCrator")
	proto.RegisterType((*ReplyChangeGroupAndChannelCrator)(nil), "pbmessageserver.ReplyChangeGroupAndChannelCrator")
	proto.RegisterType((*ReqGetChannels)(nil), "pbmessageserver.ReqGetChannels")
	proto.RegisterType((*ReplyGetChannels)(nil), "pbmessageserver.ReplyGetChannels")
	proto.RegisterType((*ReplyFullChannel)(nil), "pbmessageserver.ReplyFullChannel")
	proto.RegisterType((*ReqGetMessageByUserIdMsgId)(nil), "pbmessageserver.ReqGetMessageByUserIdMsgId")
	proto.RegisterType((*ReplyGetMessageByUserIdMsgId)(nil), "pbmessageserver.ReplyGetMessageByUserIdMsgId")
	proto.RegisterType((*ReqGetMessageByUserIdUuid)(nil), "pbmessageserver.ReqGetMessageByUserIdUuid")
	proto.RegisterType((*ReplyGetMessageByUserIdUuid)(nil), "pbmessageserver.ReplyGetMessageByUserIdUuid")
	proto.RegisterType((*ReqGetChannelMessageByChannelIdMsgId)(nil), "pbmessageserver.ReqGetChannelMessageByChannelIdMsgId")
	proto.RegisterType((*ReplyGetChannelMessageByChannelIdMsgId)(nil), "pbmessageserver.ReplyGetChannelMessageByChannelIdMsgId")
	proto.RegisterType((*ReplyStoreOtherInfoMsg)(nil), "pbmessageserver.ReplyStoreOtherInfoMsg")
	proto.RegisterType((*ReplyBatchStoreOtherInfoMsg)(nil), "pbmessageserver.ReplyBatchStoreOtherInfoMsg")
	proto.RegisterType((*ReplyGetOtherInfoMsg)(nil), "pbmessageserver.ReplyGetOtherInfoMsg")
	proto.RegisterType((*ReqGetUsersChatsMt)(nil), "pbmessageserver.ReqGetUsersChatsMt")
	proto.RegisterType((*ReplyGetUsersChatsMt)(nil), "pbmessageserver.ReplyGetUsersChatsMt")
	proto.RegisterType((*ReqGifQueryAndUpload)(nil), "pbmessageserver.ReqGifQueryAndUpload")
	proto.RegisterType((*ReplyGifQueryAndUpload)(nil), "pbmessageserver.ReplyGifQueryAndUpload")
	proto.RegisterType((*FidData)(nil), "pbmessageserver.FidData")
	proto.RegisterType((*ReqGifSearchApi)(nil), "pbmessageserver.ReqGifSearchApi")
	proto.RegisterType((*ReplyGifSearchApi)(nil), "pbmessageserver.ReplyGifSearchApi")
	proto.RegisterType((*SearchData)(nil), "pbmessageserver.SearchData")
	proto.RegisterType((*Pagination)(nil), "pbmessageserver.Pagination")
	proto.RegisterType((*ReqReceiveRedPacket)(nil), "pbmessageserver.ReqReceiveRedPacket")
	proto.RegisterType((*ReplyReceiveRedPacket)(nil), "pbmessageserver.ReplyReceiveRedPacket")
	proto.RegisterType((*ReqGetWebPage)(nil), "pbmessageserver.ReqGetWebPage")
	proto.RegisterType((*ReplyGetWebPage)(nil), "pbmessageserver.ReplyGetWebPage")
	proto.RegisterType((*WebPage)(nil), "pbmessageserver.WebPage")
	proto.RegisterType((*ReqGetWebPagePreview)(nil), "pbmessageserver.ReqGetWebPagePreview")
	proto.RegisterType((*ReplyGetWebPagePreview)(nil), "pbmessageserver.ReplyGetWebPagePreview")
	proto.RegisterType((*UserScore)(nil), "pbmessageserver.UserScore")
	proto.RegisterType((*FoldersEditPeerFoldersReq)(nil), "pbmessageserver.FoldersEditPeerFoldersReq")
	proto.RegisterType((*FoldersEditPeerFoldersReply)(nil), "pbmessageserver.FoldersEditPeerFoldersReply")
	proto.RegisterType((*FoldersDeleteFolderReq)(nil), "pbmessageserver.FoldersDeleteFolderReq")
	proto.RegisterType((*FoldersDeleteFolderReply)(nil), "pbmessageserver.FoldersDeleteFolderReply")
	proto.RegisterType((*ReqSendPaymentNotifyMsg)(nil), "pbmessageserver.ReqSendPaymentNotifyMsg")
	proto.RegisterType((*RspSendPaymentNotifyMsg)(nil), "pbmessageserver.RspSendPaymentNotifyMsg")
	proto.RegisterType((*ReqSendAddMutulContactNotify)(nil), "pbmessageserver.ReqSendAddMutulContactNotify")
	proto.RegisterType((*RespSendAddMutulContactNotify)(nil), "pbmessageserver.RespSendAddMutulContactNotify")
	proto.RegisterType((*ReqSendAddSingleContactNotify)(nil), "pbmessageserver.ReqSendAddSingleContactNotify")
	proto.RegisterType((*RespSendAddSingleContactNotify)(nil), "pbmessageserver.RespSendAddSingleContactNotify")
	proto.RegisterEnum("pbmessageserver.GetSecurityRandomIdsResult_ErrorCode", GetSecurityRandomIdsResult_ErrorCode_name, GetSecurityRandomIdsResult_ErrorCode_value)
	proto.RegisterEnum("pbmessageserver.LogoutDisCardAllSecurityResult_ErrorCode", LogoutDisCardAllSecurityResult_ErrorCode_name, LogoutDisCardAllSecurityResult_ErrorCode_value)
	proto.RegisterEnum("pbmessageserver.SetEncryptedTypingResult_Errcode", SetEncryptedTypingResult_Errcode_name, SetEncryptedTypingResult_Errcode_value)
	proto.RegisterEnum("pbmessageserver.ReadEncryptedHistoryResult_Errcode", ReadEncryptedHistoryResult_Errcode_name, ReadEncryptedHistoryResult_Errcode_value)
	proto.RegisterEnum("pbmessageserver.DiscardEncryptionResult_Errcode", DiscardEncryptionResult_Errcode_name, DiscardEncryptionResult_Errcode_value)
	proto.RegisterEnum("pbmessageserver.SendEncryptedServiceResult_Errcode", SendEncryptedServiceResult_Errcode_name, SendEncryptedServiceResult_Errcode_value)
	proto.RegisterEnum("pbmessageserver.SendEncryptedFileResult_Errcode", SendEncryptedFileResult_Errcode_name, SendEncryptedFileResult_Errcode_value)
	proto.RegisterEnum("pbmessageserver.SendEncryptedResult_Errcode", SendEncryptedResult_Errcode_name, SendEncryptedResult_Errcode_value)
	proto.RegisterEnum("pbmessageserver.AcceptEncryptionResult_Errcode", AcceptEncryptionResult_Errcode_name, AcceptEncryptionResult_Errcode_value)
	proto.RegisterEnum("pbmessageserver.RequestEncryptionResult_ErroCode", RequestEncryptionResult_ErroCode_name, RequestEncryptionResult_ErroCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MessageServer service

type MessageServerClient interface {
	// 机器人调用接口
	BotCall(ctx context.Context, in *ReqBotCall, opts ...grpc.CallOption) (*ReplyBotCall, error)
	BotInlineCall(ctx context.Context, in *ReqBotInlineCall, opts ...grpc.CallOption) (*ReplyBotInlineCall, error)
	SetGameScore(ctx context.Context, in *ReqSetGameScore, opts ...grpc.CallOption) (*ReplySetGameScore, error)
	// 踢人
	RemoveConn(ctx context.Context, in *ReqRemoveConn, opts ...grpc.CallOption) (*ReplyRemoveConn, error)
	// 注册激活系统号
	SignUpMsg(ctx context.Context, in *ReqSignUpMsg, opts ...grpc.CallOption) (*ReplyBool, error)
	// 发送短信消息接口
	SendCodeMsg(ctx context.Context, in *ReqSendCodeMsg, opts ...grpc.CallOption) (*ReplyBool, error)
	// 登录成功其他端发送登录ip消息
	SignInMsg(ctx context.Context, in *ReqSignInMsg, opts ...grpc.CallOption) (*ReplyBool, error)
	// 多端同步发送
	SendSynMsg(ctx context.Context, in *ReqSendSynMsg, opts ...grpc.CallOption) (*ReplyBool, error)
	// 发送给对方所有端
	SendUserMsg(ctx context.Context, in *ReqSendUserMsg, opts ...grpc.CallOption) (*ReplyBool, error)
	// 给单端发消息
	SendUserOneClientMsg(ctx context.Context, in *ReqSendUserOneClientMsg, opts ...grpc.CallOption) (*ReplyBool, error)
	// 群发多人 (其他服务)
	SendMoreUserMsg(ctx context.Context, in *ReqSendMoreUserMsg, opts ...grpc.CallOption) (*ReplyBool, error)
	// 发送打电话消息 (其他服务)
	SendCallMsg(ctx context.Context, in *ReqSendCallMsg, opts ...grpc.CallOption) (*ReplyBool, error)
	// 打电话推送调用
	CallPush(ctx context.Context, in *ReqCallPush, opts ...grpc.CallOption) (*ReplyCallPush, error)
	//    获取对话框
	GetDialog(ctx context.Context, in *RequestDialog, opts ...grpc.CallOption) (*ReplyDialog, error)
	// 获取最近操作的对话框 limit 个
	GetLastLimitDialog(ctx context.Context, in *messagedb.ReqGetLastLimitDialog, opts ...grpc.CallOption) (*ReplyGetLastLimitDialog, error)
	// 获取pinned对话框
	GetPinnedDialogs(ctx context.Context, in *ReqPinnedDialogs, opts ...grpc.CallOption) (*ReplyDialog, error)
	// 获取单独对话框
	GetPeerDialogs(ctx context.Context, in *ReqPeerDialogs, opts ...grpc.CallOption) (*ReplyDialog, error)
	// 获取最近位置
	GetRecentLocations(ctx context.Context, in *ReqRecentLocations, opts ...grpc.CallOption) (*ReplyResult, error)
	// 置顶对话框
	PinDialog(ctx context.Context, in *ReqPinDialog, opts ...grpc.CallOption) (*ReplyBool, error)
	// ios 置顶对话框
	ReorderPinnedDialogs(ctx context.Context, in *ReqReorderPinnedDialogs, opts ...grpc.CallOption) (*ReplyBool, error)
	// get status 获取状态信息
	GetState(ctx context.Context, in *ReqGetState, opts ...grpc.CallOption) (*ReplyResult, error)
	//    发送消息
	SendMessage(ctx context.Context, in *RequestSendMessage, opts ...grpc.CallOption) (*ReplyResult, error)
	// 系统号发消息
	SYSSendMessage(ctx context.Context, in *RequestSySSendMessage, opts ...grpc.CallOption) (*ReplyResult, error)
	//    发送媒体消息
	SendMedia(ctx context.Context, in *ReqSendMedia, opts ...grpc.CallOption) (*ReplyResult, error)
	// 上传媒体
	UploadMedia(ctx context.Context, in *ReqUploadMedia, opts ...grpc.CallOption) (*ReplyResult, error)
	// 获取部分消息
	GetMsg(ctx context.Context, in *ReqGetMsgs, opts ...grpc.CallOption) (*ReplyGetMsgs, error)
	//    获取历史
	GetHistory(ctx context.Context, in *ReqHistory, opts ...grpc.CallOption) (*ReplyHistory, error)
	//    创建普通群
	CreateChat(ctx context.Context, in *ReqCreateChat, opts ...grpc.CallOption) (*ReplyCreateChat, error)
	//    普通群添加成员
	AddChatUser(ctx context.Context, in *ReqAddChatUser, opts ...grpc.CallOption) (*ReplyAddChatUser, error)
	//    普通群删除成员
	DeleteChatUser(ctx context.Context, in *ReqDeleteChatUser, opts ...grpc.CallOption) (*ReplyDeleteChatUser, error)
	// 编辑群管理员
	EditChatAdmin(ctx context.Context, in *ReqEditChatAdmin, opts ...grpc.CallOption) (*ReplyEditChatAdmin, error)
	// 编辑群头像
	EditChatPhoto(ctx context.Context, in *ReqEditChatPhoto, opts ...grpc.CallOption) (*ReplyEditChatPhoto, error)
	//    编辑群名称
	EditChatTitle(ctx context.Context, in *ReqEditChatTitle, opts ...grpc.CallOption) (*ReplyEditChatTitle, error)
	// 获取所有群 (除去部分)
	GetAllChats(ctx context.Context, in *ReqGetAllChats, opts ...grpc.CallOption) (*ReplyGetAllChats, error)
	// 获取群的完整信息
	GetFullChat(ctx context.Context, in *ReqGetFullChat, opts ...grpc.CallOption) (*ReplyGetFullChat, error)
	//    普通群升级超级群
	MigrateChat(ctx context.Context, in *ReqMigrateChat, opts ...grpc.CallOption) (*ReplyMigrateChat, error)
	//    转发消息
	ForwardMessages(ctx context.Context, in *ReqForwardMessages, opts ...grpc.CallOption) (*ReplyForwardMessages, error)
	// 消息服务内部发消息
	S2SSendMsg(ctx context.Context, in *ReqS2SMsg, opts ...grpc.CallOption) (*ReplyS2SMsg, error)
	// 获取pts
	GetPts(ctx context.Context, in *ReqGetPts, opts ...grpc.CallOption) (*ReplyGetPts, error)
	// 读取历史
	ReadHistory(ctx context.Context, in *ReqReadHistory, opts ...grpc.CallOption) (*ReplyReadHistory, error)
	// 更新双勾
	UpdateReadOutBox(ctx context.Context, in *ReqUpdateReadOut, opts ...grpc.CallOption) (*ReplyUpdateReadOut, error)
	// pts矫正
	GetDiffByPts(ctx context.Context, in *ReqDiffByPts, opts ...grpc.CallOption) (*ReplyDiffByPts, error)
	// 删除历史
	DeleteHistory(ctx context.Context, in *ReqDeleteHistory, opts ...grpc.CallOption) (*ReplyDeleteHistory, error)
	// 删除消息
	DeleteMessages(ctx context.Context, in *ReqDeleteMessages, opts ...grpc.CallOption) (*ReplyDeleteMessages, error)
	// 编辑消息
	EditMessage(ctx context.Context, in *ReqEditMessage, opts ...grpc.CallOption) (*ReplyEditMessage, error)
	// 获取对话框特殊信息
	GetNotifySettings(ctx context.Context, in *ReqNotifySettings, opts ...grpc.CallOption) (*ReplyNotifySettings, error)
	// 更新特殊对话框信息
	UpdateNotifySettings(ctx context.Context, in *ReqUpdateNotifySettings, opts ...grpc.CallOption) (*ReplyUpdateNotifySettings, error)
	// 获取消息编辑的数据
	GetMessageEditData(ctx context.Context, in *ReqMessageEditData, opts ...grpc.CallOption) (*ReplyMessageEditData, error)
	// 存储草稿
	SaveMsgDraft(ctx context.Context, in *ReqSaveMsgDraft, opts ...grpc.CallOption) (*ReplySaveMsgDraft, error)
	// 获取未读数
	GetUserUnRead(ctx context.Context, in *ReqGetUserUnRead, opts ...grpc.CallOption) (*ReplyUserUnread, error)
	// 搜索媒体
	SearchMedia(ctx context.Context, in *ReqMessageSearch, opts ...grpc.CallOption) (*ReplyResult, error)
	CheckChatInvite(ctx context.Context, in *ReqCheckChatInvite, opts ...grpc.CallOption) (*ReplyResult, error)
	// ###############################channel#####################################
	//    rpc SendChannelMessage (RequestSendMessage) returns (ReplySendMessage) {
	//    }
	//    rpc SendChannelMedia (ReqSendMedia) returns (ReplySendMedia) {
	//    }
	// 创建频道
	CreateChannel(ctx context.Context, in *RequestChannel, opts ...grpc.CallOption) (*ReplyChannel, error)
	// 邀请用户进入超级群或者频道
	InviteChannelMember(ctx context.Context, in *RequestChannelInvite, opts ...grpc.CallOption) (*ReplyChannelInvite, error)
	// 踢人出超级群或者频道
	KickFromChannel(ctx context.Context, in *ReqChannelKick, opts ...grpc.CallOption) (*ReplyChannelKick, error)
	// 离开超级群或者频道
	LeaveChannel(ctx context.Context, in *ReqLeaveChannel, opts ...grpc.CallOption) (*ReplyLeaveChannel, error)
	// 编辑超级群或者频道的标题
	EditChannelTitle(ctx context.Context, in *ReqEditChannelTitle, opts ...grpc.CallOption) (*ReplyEditChannelTitle, error)
	// 升级或降级超级群或者频道的用户权限
	EditChannelAdmin(ctx context.Context, in *ReqEditChannelAdmin, opts ...grpc.CallOption) (*ReplyEditChannelAdmin, error)
	// 修改超级群或者频道的头像
	EditChannelPhoto(ctx context.Context, in *ReqEditChannelPhoto, opts ...grpc.CallOption) (*ReplyEditChannelPhoto, error)
	// 修改超级群或者频道的描述信息
	EditChannelAbout(ctx context.Context, in *ReqEditChannelAbout, opts ...grpc.CallOption) (*ReplyEditChannelAbout, error)
	// 删除超级群或者频道的消息
	DeleteChannelMessages(ctx context.Context, in *ReqDeleteChannelMessages, opts ...grpc.CallOption) (*ReplyDeleteChannelMessages, error)
	DeleteChannelSelfHistory(ctx context.Context, in *ReqDeleteChannelSelfHistory, opts ...grpc.CallOption) (*ReplyBool, error)
	// 清除超级群或者频道某用户的历史
	DeleteChannelHistory(ctx context.Context, in *ReqDeleteChannelHistory, opts ...grpc.CallOption) (*ReplyDeleteChannelHistory, error)
	// 置顶超级群或者频道的消息
	UpdatePinnedChannelMessage(ctx context.Context, in *ReqUpdatePinnedChannelMessage, opts ...grpc.CallOption) (*ReplyUpdatePinnedChannelMessage, error)
	//    rpc MigrateChatEvent (ReqMigrateChat) returns (ReplyMigrateChat) {
	//    }
	// 修改超级群或者频道的消息读取状态
	UpdateChannelReadHistory(ctx context.Context, in *ReqReadChannelHistory, opts ...grpc.CallOption) (*ReplyReadChannelHistory, error)
	// 获取超级群或者频道的修正信息
	GetChannelDifference(ctx context.Context, in *ReqGetchannelDifference, opts ...grpc.CallOption) (*ReplyChannelDiffCommon, error)
	// 获取超级群或者频道的历史
	//    rpc GetChannelHistory (ReqGetChannelMsgHistory) returns (ReplyChannelMsgs) {
	//    }
	// 通过消息ID获取超级群或者频道的消息
	GetChannelMessagesByMsgsId(ctx context.Context, in *ReqGetChannelMsgsByMsgsId, opts ...grpc.CallOption) (*ReplyChannelMsgs, error)
	// 主动加入超级群或者频道
	JoinChannel(ctx context.Context, in *ReqJoinChannel, opts ...grpc.CallOption) (*ReplyJoinChannel, error)
	// 解散超级群或者频道
	DeleteChannel(ctx context.Context, in *ReqDeleteChannel, opts ...grpc.CallOption) (*ReplyDeleteChannel, error)
	// 通过用户ID获取超级群或者频道的最后一条消息
	GetChannelsLastMsgsByUserId(ctx context.Context, in *ReqGetChannelsLastMsgsByUserId, opts ...grpc.CallOption) (*ReplyGetChannelsLastMsgsByUserId, error)
	// 获取超级群或者频道的管理记录
	GetChannelAdminLog(ctx context.Context, in *ReqChannelAdminLog, opts ...grpc.CallOption) (*ReplyChannelAdminLog, error)
	// 通过link加入超级群或者频道
	ImportChatInvite(ctx context.Context, in *ReqImportChatInvite, opts ...grpc.CallOption) (*ReplyImportChatInvite, error)
	// 踢人并进组其再次加入超级群或者频道，或者解除该禁止
	EditBanChannelUser(ctx context.Context, in *ReqBanChannelUser, opts ...grpc.CallOption) (*ReplyBanChannelUser, error)
	// 获取full channel
	GetFullChannel(ctx context.Context, in *ReqFullchannel, opts ...grpc.CallOption) (*ReplyFullChannel, error)
	GetParticipant(ctx context.Context, in *ReqParticipant, opts ...grpc.CallOption) (*ReplyParticipant, error)
	GetParticipants(ctx context.Context, in *ReqParticipants, opts ...grpc.CallOption) (*ReplyParticipants, error)
	ExportChannelLink(ctx context.Context, in *ReqExportChannelLink, opts ...grpc.CallOption) (*ReplyExportChannelLink, error)
	ChannelToggleInvite(ctx context.Context, in *ReqChannelToggleInvite, opts ...grpc.CallOption) (*ReplyChannelToggleInvite, error)
	Getchannels(ctx context.Context, in *ReqGetChannels, opts ...grpc.CallOption) (*ReplyGetChannels, error)
	UpdateChannelUserName(ctx context.Context, in *ReqChannelUpdateUserName, opts ...grpc.CallOption) (*ReplyChannelUpdateUserName, error)
	CheckChannelUserName(ctx context.Context, in *ReqChannelCheckUserName, opts ...grpc.CallOption) (*ReplyChannelCheckUserName, error)
	// 变更群主
	ChangeGroupAndChannelCrator(ctx context.Context, in *ReqChangeGroupAndChannelCrator, opts ...grpc.CallOption) (*ReplyChangeGroupAndChannelCrator, error)
	// ====================================================== 为机器人服务提供数据 ======================================================
	// 根据 消息id和用户id 获取单聊消息\普通群消息
	GetMessageByUserIdMsgId(ctx context.Context, in *ReqGetMessageByUserIdMsgId, opts ...grpc.CallOption) (*ReplyGetMessageByUserIdMsgId, error)
	// 根据 uuid和用户id 获取单聊消息\普通群消息
	GetMessageByUserIdUuid(ctx context.Context, in *ReqGetMessageByUserIdUuid, opts ...grpc.CallOption) (*ReplyGetMessageByUserIdUuid, error)
	GetChannelMessageByChannelIdMsgId(ctx context.Context, in *ReqGetChannelMessageByChannelIdMsgId, opts ...grpc.CallOption) (*ReplyGetChannelMessageByChannelIdMsgId, error)
	// ================== 存储 电话信息 联系人 加密聊天请求 二进制信息 ==================
	// infoService 调用存储信息
	StoreOtherInfoMsg(ctx context.Context, in *messagedb.ReqStoreOtherInfoMsg, opts ...grpc.CallOption) (*ReplyStoreOtherInfoMsg, error)
	// 批量 存储 otherInfoMsg
	BatchStoreOtherInfoMsg(ctx context.Context, in *messagedb.ReqBatchStoreOtherInfoMsg, opts ...grpc.CallOption) (*ReplyBatchStoreOtherInfoMsg, error)
	// 发送加密聊天请求
	RequestEncryption(ctx context.Context, in *RequestEncryptionReq, opts ...grpc.CallOption) (*RequestEncryptionResult, error)
	// 接收加密聊天
	AcceptEncryption(ctx context.Context, in *AcceptEncryptionReq, opts ...grpc.CallOption) (*AcceptEncryptionResult, error)
	// 发送加密聊天普通消息
	SendEncrypted(ctx context.Context, in *SendEncryptedReq, opts ...grpc.CallOption) (*SendEncryptedResult, error)
	// 发送加密聊天媒体消息
	SendEncryptedFile(ctx context.Context, in *SendEncryptedFileReq, opts ...grpc.CallOption) (*SendEncryptedFileResult, error)
	// 发送加密聊天action消息
	SendEncryptedService(ctx context.Context, in *SendEncryptedServiceReq, opts ...grpc.CallOption) (*SendEncryptedServiceResult, error)
	// 发送加密聊天取消
	DiscardEncryption(ctx context.Context, in *DiscardEncryptionReq, opts ...grpc.CallOption) (*DiscardEncryptionResult, error)
	// 加密聊天双钩
	ReadEncryptedHistory(ctx context.Context, in *ReadEncryptedHistoryReq, opts ...grpc.CallOption) (*ReadEncryptedHistoryResult, error)
	// 加密聊天settyping
	SetEncryptedTing(ctx context.Context, in *SetEncryptedTypingReq, opts ...grpc.CallOption) (*SetEncryptedTypingResult, error)
	// LogOut后删除所有的加密聊天
	LogoutDisCardAllSecurity(ctx context.Context, in *LogoutDisCardAllSecurityReq, opts ...grpc.CallOption) (*LogoutDisCardAllSecurityResult, error)
	// 获取加密聊天的randomId 们
	GetSecurityRandomIds(ctx context.Context, in *GetSecurityRandomIdsReq, opts ...grpc.CallOption) (*GetSecurityRandomIdsResult, error)
	ReceiveRedPacket(ctx context.Context, in *ReqReceiveRedPacket, opts ...grpc.CallOption) (*ReplyReceiveRedPacket, error)
	GetChannelInactiveUsers(ctx context.Context, in *GetChannelInactiveUsersReq, opts ...grpc.CallOption) (*GetChannelInactiveUsersResult, error)
	// 105 add 归档对话框
	FoldersEditPeerFolders(ctx context.Context, in *FoldersEditPeerFoldersReq, opts ...grpc.CallOption) (*FoldersEditPeerFoldersReply, error)
	// 105 删除归档对话框
	FoldersDeleteFolder(ctx context.Context, in *FoldersDeleteFolderReq, opts ...grpc.CallOption) (*FoldersDeleteFolderReply, error)
	// 105 发送投票
	SendVote(ctx context.Context, in *SendVoteReq, opts ...grpc.CallOption) (*SendVoteReply, error)
	// 发送支付结果通知 接口，为支付定制
	SendPaymentNotifyMsg(ctx context.Context, in *ReqSendPaymentNotifyMsg, opts ...grpc.CallOption) (*RspSendPaymentNotifyMsg, error)
	SendBatchUsersMsg(ctx context.Context, in *ReqSendMoreUserMsg, opts ...grpc.CallOption) (*ReplyBool, error)
	// 加好友成功后的相互通知消息
	SendAddMutulContactNotify(ctx context.Context, in *ReqSendAddMutulContactNotify, opts ...grpc.CallOption) (*RespSendAddMutulContactNotify, error)
	// 单方面加好友通知消息
	SendAddSingleContactNotify(ctx context.Context, in *ReqSendAddSingleContactNotify, opts ...grpc.CallOption) (*RespSendAddSingleContactNotify, error)
	// 朋友圈通知消息
	SendMediaSysNotify(ctx context.Context, in *ReqSendMediaSysNotify, opts ...grpc.CallOption) (*RespSendMediaSysNotify, error)
	// 编辑媒体消息 by ty 2020.09.27
	EditMessageMedia(ctx context.Context, in *ReqEditMessageMedia, opts ...grpc.CallOption) (*RespEditMessageMedia, error)
}

type messageServerClient struct {
	cc *grpc.ClientConn
}

func NewMessageServerClient(cc *grpc.ClientConn) MessageServerClient {
	return &messageServerClient{cc}
}

func (c *messageServerClient) BotCall(ctx context.Context, in *ReqBotCall, opts ...grpc.CallOption) (*ReplyBotCall, error) {
	out := new(ReplyBotCall)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/BotCall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) BotInlineCall(ctx context.Context, in *ReqBotInlineCall, opts ...grpc.CallOption) (*ReplyBotInlineCall, error) {
	out := new(ReplyBotInlineCall)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/BotInlineCall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SetGameScore(ctx context.Context, in *ReqSetGameScore, opts ...grpc.CallOption) (*ReplySetGameScore, error) {
	out := new(ReplySetGameScore)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/SetGameScore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) RemoveConn(ctx context.Context, in *ReqRemoveConn, opts ...grpc.CallOption) (*ReplyRemoveConn, error) {
	out := new(ReplyRemoveConn)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/RemoveConn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SignUpMsg(ctx context.Context, in *ReqSignUpMsg, opts ...grpc.CallOption) (*ReplyBool, error) {
	out := new(ReplyBool)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/SignUpMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SendCodeMsg(ctx context.Context, in *ReqSendCodeMsg, opts ...grpc.CallOption) (*ReplyBool, error) {
	out := new(ReplyBool)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/SendCodeMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SignInMsg(ctx context.Context, in *ReqSignInMsg, opts ...grpc.CallOption) (*ReplyBool, error) {
	out := new(ReplyBool)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/SignInMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SendSynMsg(ctx context.Context, in *ReqSendSynMsg, opts ...grpc.CallOption) (*ReplyBool, error) {
	out := new(ReplyBool)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/SendSynMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SendUserMsg(ctx context.Context, in *ReqSendUserMsg, opts ...grpc.CallOption) (*ReplyBool, error) {
	out := new(ReplyBool)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/SendUserMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SendUserOneClientMsg(ctx context.Context, in *ReqSendUserOneClientMsg, opts ...grpc.CallOption) (*ReplyBool, error) {
	out := new(ReplyBool)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/SendUserOneClientMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SendMoreUserMsg(ctx context.Context, in *ReqSendMoreUserMsg, opts ...grpc.CallOption) (*ReplyBool, error) {
	out := new(ReplyBool)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/SendMoreUserMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SendCallMsg(ctx context.Context, in *ReqSendCallMsg, opts ...grpc.CallOption) (*ReplyBool, error) {
	out := new(ReplyBool)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/SendCallMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) CallPush(ctx context.Context, in *ReqCallPush, opts ...grpc.CallOption) (*ReplyCallPush, error) {
	out := new(ReplyCallPush)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/CallPush", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetDialog(ctx context.Context, in *RequestDialog, opts ...grpc.CallOption) (*ReplyDialog, error) {
	out := new(ReplyDialog)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/GetDialog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetLastLimitDialog(ctx context.Context, in *messagedb.ReqGetLastLimitDialog, opts ...grpc.CallOption) (*ReplyGetLastLimitDialog, error) {
	out := new(ReplyGetLastLimitDialog)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/GetLastLimitDialog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetPinnedDialogs(ctx context.Context, in *ReqPinnedDialogs, opts ...grpc.CallOption) (*ReplyDialog, error) {
	out := new(ReplyDialog)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/GetPinnedDialogs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetPeerDialogs(ctx context.Context, in *ReqPeerDialogs, opts ...grpc.CallOption) (*ReplyDialog, error) {
	out := new(ReplyDialog)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/GetPeerDialogs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetRecentLocations(ctx context.Context, in *ReqRecentLocations, opts ...grpc.CallOption) (*ReplyResult, error) {
	out := new(ReplyResult)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/GetRecentLocations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) PinDialog(ctx context.Context, in *ReqPinDialog, opts ...grpc.CallOption) (*ReplyBool, error) {
	out := new(ReplyBool)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/PinDialog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) ReorderPinnedDialogs(ctx context.Context, in *ReqReorderPinnedDialogs, opts ...grpc.CallOption) (*ReplyBool, error) {
	out := new(ReplyBool)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/ReorderPinnedDialogs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetState(ctx context.Context, in *ReqGetState, opts ...grpc.CallOption) (*ReplyResult, error) {
	out := new(ReplyResult)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/GetState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SendMessage(ctx context.Context, in *RequestSendMessage, opts ...grpc.CallOption) (*ReplyResult, error) {
	out := new(ReplyResult)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/SendMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SYSSendMessage(ctx context.Context, in *RequestSySSendMessage, opts ...grpc.CallOption) (*ReplyResult, error) {
	out := new(ReplyResult)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/SYSSendMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SendMedia(ctx context.Context, in *ReqSendMedia, opts ...grpc.CallOption) (*ReplyResult, error) {
	out := new(ReplyResult)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/SendMedia", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) UploadMedia(ctx context.Context, in *ReqUploadMedia, opts ...grpc.CallOption) (*ReplyResult, error) {
	out := new(ReplyResult)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/UploadMedia", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetMsg(ctx context.Context, in *ReqGetMsgs, opts ...grpc.CallOption) (*ReplyGetMsgs, error) {
	out := new(ReplyGetMsgs)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/GetMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetHistory(ctx context.Context, in *ReqHistory, opts ...grpc.CallOption) (*ReplyHistory, error) {
	out := new(ReplyHistory)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/GetHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) CreateChat(ctx context.Context, in *ReqCreateChat, opts ...grpc.CallOption) (*ReplyCreateChat, error) {
	out := new(ReplyCreateChat)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/CreateChat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) AddChatUser(ctx context.Context, in *ReqAddChatUser, opts ...grpc.CallOption) (*ReplyAddChatUser, error) {
	out := new(ReplyAddChatUser)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/AddChatUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) DeleteChatUser(ctx context.Context, in *ReqDeleteChatUser, opts ...grpc.CallOption) (*ReplyDeleteChatUser, error) {
	out := new(ReplyDeleteChatUser)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/DeleteChatUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) EditChatAdmin(ctx context.Context, in *ReqEditChatAdmin, opts ...grpc.CallOption) (*ReplyEditChatAdmin, error) {
	out := new(ReplyEditChatAdmin)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/EditChatAdmin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) EditChatPhoto(ctx context.Context, in *ReqEditChatPhoto, opts ...grpc.CallOption) (*ReplyEditChatPhoto, error) {
	out := new(ReplyEditChatPhoto)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/EditChatPhoto", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) EditChatTitle(ctx context.Context, in *ReqEditChatTitle, opts ...grpc.CallOption) (*ReplyEditChatTitle, error) {
	out := new(ReplyEditChatTitle)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/EditChatTitle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetAllChats(ctx context.Context, in *ReqGetAllChats, opts ...grpc.CallOption) (*ReplyGetAllChats, error) {
	out := new(ReplyGetAllChats)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/GetAllChats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetFullChat(ctx context.Context, in *ReqGetFullChat, opts ...grpc.CallOption) (*ReplyGetFullChat, error) {
	out := new(ReplyGetFullChat)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/GetFullChat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) MigrateChat(ctx context.Context, in *ReqMigrateChat, opts ...grpc.CallOption) (*ReplyMigrateChat, error) {
	out := new(ReplyMigrateChat)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/MigrateChat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) ForwardMessages(ctx context.Context, in *ReqForwardMessages, opts ...grpc.CallOption) (*ReplyForwardMessages, error) {
	out := new(ReplyForwardMessages)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/ForwardMessages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) S2SSendMsg(ctx context.Context, in *ReqS2SMsg, opts ...grpc.CallOption) (*ReplyS2SMsg, error) {
	out := new(ReplyS2SMsg)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/S2SSendMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetPts(ctx context.Context, in *ReqGetPts, opts ...grpc.CallOption) (*ReplyGetPts, error) {
	out := new(ReplyGetPts)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/GetPts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) ReadHistory(ctx context.Context, in *ReqReadHistory, opts ...grpc.CallOption) (*ReplyReadHistory, error) {
	out := new(ReplyReadHistory)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/ReadHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) UpdateReadOutBox(ctx context.Context, in *ReqUpdateReadOut, opts ...grpc.CallOption) (*ReplyUpdateReadOut, error) {
	out := new(ReplyUpdateReadOut)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/UpdateReadOutBox", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetDiffByPts(ctx context.Context, in *ReqDiffByPts, opts ...grpc.CallOption) (*ReplyDiffByPts, error) {
	out := new(ReplyDiffByPts)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/GetDiffByPts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) DeleteHistory(ctx context.Context, in *ReqDeleteHistory, opts ...grpc.CallOption) (*ReplyDeleteHistory, error) {
	out := new(ReplyDeleteHistory)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/DeleteHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) DeleteMessages(ctx context.Context, in *ReqDeleteMessages, opts ...grpc.CallOption) (*ReplyDeleteMessages, error) {
	out := new(ReplyDeleteMessages)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/DeleteMessages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) EditMessage(ctx context.Context, in *ReqEditMessage, opts ...grpc.CallOption) (*ReplyEditMessage, error) {
	out := new(ReplyEditMessage)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/EditMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetNotifySettings(ctx context.Context, in *ReqNotifySettings, opts ...grpc.CallOption) (*ReplyNotifySettings, error) {
	out := new(ReplyNotifySettings)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/GetNotifySettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) UpdateNotifySettings(ctx context.Context, in *ReqUpdateNotifySettings, opts ...grpc.CallOption) (*ReplyUpdateNotifySettings, error) {
	out := new(ReplyUpdateNotifySettings)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/UpdateNotifySettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetMessageEditData(ctx context.Context, in *ReqMessageEditData, opts ...grpc.CallOption) (*ReplyMessageEditData, error) {
	out := new(ReplyMessageEditData)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/GetMessageEditData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SaveMsgDraft(ctx context.Context, in *ReqSaveMsgDraft, opts ...grpc.CallOption) (*ReplySaveMsgDraft, error) {
	out := new(ReplySaveMsgDraft)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/SaveMsgDraft", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetUserUnRead(ctx context.Context, in *ReqGetUserUnRead, opts ...grpc.CallOption) (*ReplyUserUnread, error) {
	out := new(ReplyUserUnread)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/GetUserUnRead", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SearchMedia(ctx context.Context, in *ReqMessageSearch, opts ...grpc.CallOption) (*ReplyResult, error) {
	out := new(ReplyResult)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/SearchMedia", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) CheckChatInvite(ctx context.Context, in *ReqCheckChatInvite, opts ...grpc.CallOption) (*ReplyResult, error) {
	out := new(ReplyResult)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/CheckChatInvite", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) CreateChannel(ctx context.Context, in *RequestChannel, opts ...grpc.CallOption) (*ReplyChannel, error) {
	out := new(ReplyChannel)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/CreateChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) InviteChannelMember(ctx context.Context, in *RequestChannelInvite, opts ...grpc.CallOption) (*ReplyChannelInvite, error) {
	out := new(ReplyChannelInvite)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/InviteChannelMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) KickFromChannel(ctx context.Context, in *ReqChannelKick, opts ...grpc.CallOption) (*ReplyChannelKick, error) {
	out := new(ReplyChannelKick)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/KickFromChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) LeaveChannel(ctx context.Context, in *ReqLeaveChannel, opts ...grpc.CallOption) (*ReplyLeaveChannel, error) {
	out := new(ReplyLeaveChannel)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/LeaveChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) EditChannelTitle(ctx context.Context, in *ReqEditChannelTitle, opts ...grpc.CallOption) (*ReplyEditChannelTitle, error) {
	out := new(ReplyEditChannelTitle)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/EditChannelTitle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) EditChannelAdmin(ctx context.Context, in *ReqEditChannelAdmin, opts ...grpc.CallOption) (*ReplyEditChannelAdmin, error) {
	out := new(ReplyEditChannelAdmin)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/EditChannelAdmin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) EditChannelPhoto(ctx context.Context, in *ReqEditChannelPhoto, opts ...grpc.CallOption) (*ReplyEditChannelPhoto, error) {
	out := new(ReplyEditChannelPhoto)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/EditChannelPhoto", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) EditChannelAbout(ctx context.Context, in *ReqEditChannelAbout, opts ...grpc.CallOption) (*ReplyEditChannelAbout, error) {
	out := new(ReplyEditChannelAbout)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/EditChannelAbout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) DeleteChannelMessages(ctx context.Context, in *ReqDeleteChannelMessages, opts ...grpc.CallOption) (*ReplyDeleteChannelMessages, error) {
	out := new(ReplyDeleteChannelMessages)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/DeleteChannelMessages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) DeleteChannelSelfHistory(ctx context.Context, in *ReqDeleteChannelSelfHistory, opts ...grpc.CallOption) (*ReplyBool, error) {
	out := new(ReplyBool)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/DeleteChannelSelfHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) DeleteChannelHistory(ctx context.Context, in *ReqDeleteChannelHistory, opts ...grpc.CallOption) (*ReplyDeleteChannelHistory, error) {
	out := new(ReplyDeleteChannelHistory)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/DeleteChannelHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) UpdatePinnedChannelMessage(ctx context.Context, in *ReqUpdatePinnedChannelMessage, opts ...grpc.CallOption) (*ReplyUpdatePinnedChannelMessage, error) {
	out := new(ReplyUpdatePinnedChannelMessage)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/UpdatePinnedChannelMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) UpdateChannelReadHistory(ctx context.Context, in *ReqReadChannelHistory, opts ...grpc.CallOption) (*ReplyReadChannelHistory, error) {
	out := new(ReplyReadChannelHistory)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/UpdateChannelReadHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetChannelDifference(ctx context.Context, in *ReqGetchannelDifference, opts ...grpc.CallOption) (*ReplyChannelDiffCommon, error) {
	out := new(ReplyChannelDiffCommon)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/GetChannelDifference", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetChannelMessagesByMsgsId(ctx context.Context, in *ReqGetChannelMsgsByMsgsId, opts ...grpc.CallOption) (*ReplyChannelMsgs, error) {
	out := new(ReplyChannelMsgs)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/GetChannelMessagesByMsgsId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) JoinChannel(ctx context.Context, in *ReqJoinChannel, opts ...grpc.CallOption) (*ReplyJoinChannel, error) {
	out := new(ReplyJoinChannel)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/JoinChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) DeleteChannel(ctx context.Context, in *ReqDeleteChannel, opts ...grpc.CallOption) (*ReplyDeleteChannel, error) {
	out := new(ReplyDeleteChannel)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/DeleteChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetChannelsLastMsgsByUserId(ctx context.Context, in *ReqGetChannelsLastMsgsByUserId, opts ...grpc.CallOption) (*ReplyGetChannelsLastMsgsByUserId, error) {
	out := new(ReplyGetChannelsLastMsgsByUserId)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/GetChannelsLastMsgsByUserId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetChannelAdminLog(ctx context.Context, in *ReqChannelAdminLog, opts ...grpc.CallOption) (*ReplyChannelAdminLog, error) {
	out := new(ReplyChannelAdminLog)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/GetChannelAdminLog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) ImportChatInvite(ctx context.Context, in *ReqImportChatInvite, opts ...grpc.CallOption) (*ReplyImportChatInvite, error) {
	out := new(ReplyImportChatInvite)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/ImportChatInvite", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) EditBanChannelUser(ctx context.Context, in *ReqBanChannelUser, opts ...grpc.CallOption) (*ReplyBanChannelUser, error) {
	out := new(ReplyBanChannelUser)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/EditBanChannelUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetFullChannel(ctx context.Context, in *ReqFullchannel, opts ...grpc.CallOption) (*ReplyFullChannel, error) {
	out := new(ReplyFullChannel)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/GetFullChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetParticipant(ctx context.Context, in *ReqParticipant, opts ...grpc.CallOption) (*ReplyParticipant, error) {
	out := new(ReplyParticipant)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/GetParticipant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetParticipants(ctx context.Context, in *ReqParticipants, opts ...grpc.CallOption) (*ReplyParticipants, error) {
	out := new(ReplyParticipants)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/GetParticipants", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) ExportChannelLink(ctx context.Context, in *ReqExportChannelLink, opts ...grpc.CallOption) (*ReplyExportChannelLink, error) {
	out := new(ReplyExportChannelLink)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/ExportChannelLink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) ChannelToggleInvite(ctx context.Context, in *ReqChannelToggleInvite, opts ...grpc.CallOption) (*ReplyChannelToggleInvite, error) {
	out := new(ReplyChannelToggleInvite)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/ChannelToggleInvite", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) Getchannels(ctx context.Context, in *ReqGetChannels, opts ...grpc.CallOption) (*ReplyGetChannels, error) {
	out := new(ReplyGetChannels)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/Getchannels", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) UpdateChannelUserName(ctx context.Context, in *ReqChannelUpdateUserName, opts ...grpc.CallOption) (*ReplyChannelUpdateUserName, error) {
	out := new(ReplyChannelUpdateUserName)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/UpdateChannelUserName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) CheckChannelUserName(ctx context.Context, in *ReqChannelCheckUserName, opts ...grpc.CallOption) (*ReplyChannelCheckUserName, error) {
	out := new(ReplyChannelCheckUserName)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/CheckChannelUserName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) ChangeGroupAndChannelCrator(ctx context.Context, in *ReqChangeGroupAndChannelCrator, opts ...grpc.CallOption) (*ReplyChangeGroupAndChannelCrator, error) {
	out := new(ReplyChangeGroupAndChannelCrator)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/ChangeGroupAndChannelCrator", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetMessageByUserIdMsgId(ctx context.Context, in *ReqGetMessageByUserIdMsgId, opts ...grpc.CallOption) (*ReplyGetMessageByUserIdMsgId, error) {
	out := new(ReplyGetMessageByUserIdMsgId)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/GetMessageByUserIdMsgId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetMessageByUserIdUuid(ctx context.Context, in *ReqGetMessageByUserIdUuid, opts ...grpc.CallOption) (*ReplyGetMessageByUserIdUuid, error) {
	out := new(ReplyGetMessageByUserIdUuid)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/GetMessageByUserIdUuid", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetChannelMessageByChannelIdMsgId(ctx context.Context, in *ReqGetChannelMessageByChannelIdMsgId, opts ...grpc.CallOption) (*ReplyGetChannelMessageByChannelIdMsgId, error) {
	out := new(ReplyGetChannelMessageByChannelIdMsgId)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/GetChannelMessageByChannelIdMsgId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) StoreOtherInfoMsg(ctx context.Context, in *messagedb.ReqStoreOtherInfoMsg, opts ...grpc.CallOption) (*ReplyStoreOtherInfoMsg, error) {
	out := new(ReplyStoreOtherInfoMsg)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/StoreOtherInfoMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) BatchStoreOtherInfoMsg(ctx context.Context, in *messagedb.ReqBatchStoreOtherInfoMsg, opts ...grpc.CallOption) (*ReplyBatchStoreOtherInfoMsg, error) {
	out := new(ReplyBatchStoreOtherInfoMsg)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/BatchStoreOtherInfoMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) RequestEncryption(ctx context.Context, in *RequestEncryptionReq, opts ...grpc.CallOption) (*RequestEncryptionResult, error) {
	out := new(RequestEncryptionResult)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/RequestEncryption", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) AcceptEncryption(ctx context.Context, in *AcceptEncryptionReq, opts ...grpc.CallOption) (*AcceptEncryptionResult, error) {
	out := new(AcceptEncryptionResult)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/AcceptEncryption", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SendEncrypted(ctx context.Context, in *SendEncryptedReq, opts ...grpc.CallOption) (*SendEncryptedResult, error) {
	out := new(SendEncryptedResult)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/SendEncrypted", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SendEncryptedFile(ctx context.Context, in *SendEncryptedFileReq, opts ...grpc.CallOption) (*SendEncryptedFileResult, error) {
	out := new(SendEncryptedFileResult)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/SendEncryptedFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SendEncryptedService(ctx context.Context, in *SendEncryptedServiceReq, opts ...grpc.CallOption) (*SendEncryptedServiceResult, error) {
	out := new(SendEncryptedServiceResult)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/SendEncryptedService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) DiscardEncryption(ctx context.Context, in *DiscardEncryptionReq, opts ...grpc.CallOption) (*DiscardEncryptionResult, error) {
	out := new(DiscardEncryptionResult)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/DiscardEncryption", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) ReadEncryptedHistory(ctx context.Context, in *ReadEncryptedHistoryReq, opts ...grpc.CallOption) (*ReadEncryptedHistoryResult, error) {
	out := new(ReadEncryptedHistoryResult)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/ReadEncryptedHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SetEncryptedTing(ctx context.Context, in *SetEncryptedTypingReq, opts ...grpc.CallOption) (*SetEncryptedTypingResult, error) {
	out := new(SetEncryptedTypingResult)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/SetEncryptedTing", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) LogoutDisCardAllSecurity(ctx context.Context, in *LogoutDisCardAllSecurityReq, opts ...grpc.CallOption) (*LogoutDisCardAllSecurityResult, error) {
	out := new(LogoutDisCardAllSecurityResult)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/LogoutDisCardAllSecurity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetSecurityRandomIds(ctx context.Context, in *GetSecurityRandomIdsReq, opts ...grpc.CallOption) (*GetSecurityRandomIdsResult, error) {
	out := new(GetSecurityRandomIdsResult)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/GetSecurityRandomIds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) ReceiveRedPacket(ctx context.Context, in *ReqReceiveRedPacket, opts ...grpc.CallOption) (*ReplyReceiveRedPacket, error) {
	out := new(ReplyReceiveRedPacket)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/ReceiveRedPacket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetChannelInactiveUsers(ctx context.Context, in *GetChannelInactiveUsersReq, opts ...grpc.CallOption) (*GetChannelInactiveUsersResult, error) {
	out := new(GetChannelInactiveUsersResult)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/GetChannelInactiveUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) FoldersEditPeerFolders(ctx context.Context, in *FoldersEditPeerFoldersReq, opts ...grpc.CallOption) (*FoldersEditPeerFoldersReply, error) {
	out := new(FoldersEditPeerFoldersReply)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/FoldersEditPeerFolders", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) FoldersDeleteFolder(ctx context.Context, in *FoldersDeleteFolderReq, opts ...grpc.CallOption) (*FoldersDeleteFolderReply, error) {
	out := new(FoldersDeleteFolderReply)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/FoldersDeleteFolder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SendVote(ctx context.Context, in *SendVoteReq, opts ...grpc.CallOption) (*SendVoteReply, error) {
	out := new(SendVoteReply)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/SendVote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SendPaymentNotifyMsg(ctx context.Context, in *ReqSendPaymentNotifyMsg, opts ...grpc.CallOption) (*RspSendPaymentNotifyMsg, error) {
	out := new(RspSendPaymentNotifyMsg)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/SendPaymentNotifyMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SendBatchUsersMsg(ctx context.Context, in *ReqSendMoreUserMsg, opts ...grpc.CallOption) (*ReplyBool, error) {
	out := new(ReplyBool)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/SendBatchUsersMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SendAddMutulContactNotify(ctx context.Context, in *ReqSendAddMutulContactNotify, opts ...grpc.CallOption) (*RespSendAddMutulContactNotify, error) {
	out := new(RespSendAddMutulContactNotify)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/SendAddMutulContactNotify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SendAddSingleContactNotify(ctx context.Context, in *ReqSendAddSingleContactNotify, opts ...grpc.CallOption) (*RespSendAddSingleContactNotify, error) {
	out := new(RespSendAddSingleContactNotify)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/SendAddSingleContactNotify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SendMediaSysNotify(ctx context.Context, in *ReqSendMediaSysNotify, opts ...grpc.CallOption) (*RespSendMediaSysNotify, error) {
	out := new(RespSendMediaSysNotify)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/SendMediaSysNotify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) EditMessageMedia(ctx context.Context, in *ReqEditMessageMedia, opts ...grpc.CallOption) (*RespEditMessageMedia, error) {
	out := new(RespEditMessageMedia)
	err := grpc.Invoke(ctx, "/pbmessageserver.MessageServer/EditMessageMedia", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MessageServer service

type MessageServerServer interface {
	// 机器人调用接口
	BotCall(context.Context, *ReqBotCall) (*ReplyBotCall, error)
	BotInlineCall(context.Context, *ReqBotInlineCall) (*ReplyBotInlineCall, error)
	SetGameScore(context.Context, *ReqSetGameScore) (*ReplySetGameScore, error)
	// 踢人
	RemoveConn(context.Context, *ReqRemoveConn) (*ReplyRemoveConn, error)
	// 注册激活系统号
	SignUpMsg(context.Context, *ReqSignUpMsg) (*ReplyBool, error)
	// 发送短信消息接口
	SendCodeMsg(context.Context, *ReqSendCodeMsg) (*ReplyBool, error)
	// 登录成功其他端发送登录ip消息
	SignInMsg(context.Context, *ReqSignInMsg) (*ReplyBool, error)
	// 多端同步发送
	SendSynMsg(context.Context, *ReqSendSynMsg) (*ReplyBool, error)
	// 发送给对方所有端
	SendUserMsg(context.Context, *ReqSendUserMsg) (*ReplyBool, error)
	// 给单端发消息
	SendUserOneClientMsg(context.Context, *ReqSendUserOneClientMsg) (*ReplyBool, error)
	// 群发多人 (其他服务)
	SendMoreUserMsg(context.Context, *ReqSendMoreUserMsg) (*ReplyBool, error)
	// 发送打电话消息 (其他服务)
	SendCallMsg(context.Context, *ReqSendCallMsg) (*ReplyBool, error)
	// 打电话推送调用
	CallPush(context.Context, *ReqCallPush) (*ReplyCallPush, error)
	//    获取对话框
	GetDialog(context.Context, *RequestDialog) (*ReplyDialog, error)
	// 获取最近操作的对话框 limit 个
	GetLastLimitDialog(context.Context, *messagedb.ReqGetLastLimitDialog) (*ReplyGetLastLimitDialog, error)
	// 获取pinned对话框
	GetPinnedDialogs(context.Context, *ReqPinnedDialogs) (*ReplyDialog, error)
	// 获取单独对话框
	GetPeerDialogs(context.Context, *ReqPeerDialogs) (*ReplyDialog, error)
	// 获取最近位置
	GetRecentLocations(context.Context, *ReqRecentLocations) (*ReplyResult, error)
	// 置顶对话框
	PinDialog(context.Context, *ReqPinDialog) (*ReplyBool, error)
	// ios 置顶对话框
	ReorderPinnedDialogs(context.Context, *ReqReorderPinnedDialogs) (*ReplyBool, error)
	// get status 获取状态信息
	GetState(context.Context, *ReqGetState) (*ReplyResult, error)
	//    发送消息
	SendMessage(context.Context, *RequestSendMessage) (*ReplyResult, error)
	// 系统号发消息
	SYSSendMessage(context.Context, *RequestSySSendMessage) (*ReplyResult, error)
	//    发送媒体消息
	SendMedia(context.Context, *ReqSendMedia) (*ReplyResult, error)
	// 上传媒体
	UploadMedia(context.Context, *ReqUploadMedia) (*ReplyResult, error)
	// 获取部分消息
	GetMsg(context.Context, *ReqGetMsgs) (*ReplyGetMsgs, error)
	//    获取历史
	GetHistory(context.Context, *ReqHistory) (*ReplyHistory, error)
	//    创建普通群
	CreateChat(context.Context, *ReqCreateChat) (*ReplyCreateChat, error)
	//    普通群添加成员
	AddChatUser(context.Context, *ReqAddChatUser) (*ReplyAddChatUser, error)
	//    普通群删除成员
	DeleteChatUser(context.Context, *ReqDeleteChatUser) (*ReplyDeleteChatUser, error)
	// 编辑群管理员
	EditChatAdmin(context.Context, *ReqEditChatAdmin) (*ReplyEditChatAdmin, error)
	// 编辑群头像
	EditChatPhoto(context.Context, *ReqEditChatPhoto) (*ReplyEditChatPhoto, error)
	//    编辑群名称
	EditChatTitle(context.Context, *ReqEditChatTitle) (*ReplyEditChatTitle, error)
	// 获取所有群 (除去部分)
	GetAllChats(context.Context, *ReqGetAllChats) (*ReplyGetAllChats, error)
	// 获取群的完整信息
	GetFullChat(context.Context, *ReqGetFullChat) (*ReplyGetFullChat, error)
	//    普通群升级超级群
	MigrateChat(context.Context, *ReqMigrateChat) (*ReplyMigrateChat, error)
	//    转发消息
	ForwardMessages(context.Context, *ReqForwardMessages) (*ReplyForwardMessages, error)
	// 消息服务内部发消息
	S2SSendMsg(context.Context, *ReqS2SMsg) (*ReplyS2SMsg, error)
	// 获取pts
	GetPts(context.Context, *ReqGetPts) (*ReplyGetPts, error)
	// 读取历史
	ReadHistory(context.Context, *ReqReadHistory) (*ReplyReadHistory, error)
	// 更新双勾
	UpdateReadOutBox(context.Context, *ReqUpdateReadOut) (*ReplyUpdateReadOut, error)
	// pts矫正
	GetDiffByPts(context.Context, *ReqDiffByPts) (*ReplyDiffByPts, error)
	// 删除历史
	DeleteHistory(context.Context, *ReqDeleteHistory) (*ReplyDeleteHistory, error)
	// 删除消息
	DeleteMessages(context.Context, *ReqDeleteMessages) (*ReplyDeleteMessages, error)
	// 编辑消息
	EditMessage(context.Context, *ReqEditMessage) (*ReplyEditMessage, error)
	// 获取对话框特殊信息
	GetNotifySettings(context.Context, *ReqNotifySettings) (*ReplyNotifySettings, error)
	// 更新特殊对话框信息
	UpdateNotifySettings(context.Context, *ReqUpdateNotifySettings) (*ReplyUpdateNotifySettings, error)
	// 获取消息编辑的数据
	GetMessageEditData(context.Context, *ReqMessageEditData) (*ReplyMessageEditData, error)
	// 存储草稿
	SaveMsgDraft(context.Context, *ReqSaveMsgDraft) (*ReplySaveMsgDraft, error)
	// 获取未读数
	GetUserUnRead(context.Context, *ReqGetUserUnRead) (*ReplyUserUnread, error)
	// 搜索媒体
	SearchMedia(context.Context, *ReqMessageSearch) (*ReplyResult, error)
	CheckChatInvite(context.Context, *ReqCheckChatInvite) (*ReplyResult, error)
	// ###############################channel#####################################
	//    rpc SendChannelMessage (RequestSendMessage) returns (ReplySendMessage) {
	//    }
	//    rpc SendChannelMedia (ReqSendMedia) returns (ReplySendMedia) {
	//    }
	// 创建频道
	CreateChannel(context.Context, *RequestChannel) (*ReplyChannel, error)
	// 邀请用户进入超级群或者频道
	InviteChannelMember(context.Context, *RequestChannelInvite) (*ReplyChannelInvite, error)
	// 踢人出超级群或者频道
	KickFromChannel(context.Context, *ReqChannelKick) (*ReplyChannelKick, error)
	// 离开超级群或者频道
	LeaveChannel(context.Context, *ReqLeaveChannel) (*ReplyLeaveChannel, error)
	// 编辑超级群或者频道的标题
	EditChannelTitle(context.Context, *ReqEditChannelTitle) (*ReplyEditChannelTitle, error)
	// 升级或降级超级群或者频道的用户权限
	EditChannelAdmin(context.Context, *ReqEditChannelAdmin) (*ReplyEditChannelAdmin, error)
	// 修改超级群或者频道的头像
	EditChannelPhoto(context.Context, *ReqEditChannelPhoto) (*ReplyEditChannelPhoto, error)
	// 修改超级群或者频道的描述信息
	EditChannelAbout(context.Context, *ReqEditChannelAbout) (*ReplyEditChannelAbout, error)
	// 删除超级群或者频道的消息
	DeleteChannelMessages(context.Context, *ReqDeleteChannelMessages) (*ReplyDeleteChannelMessages, error)
	DeleteChannelSelfHistory(context.Context, *ReqDeleteChannelSelfHistory) (*ReplyBool, error)
	// 清除超级群或者频道某用户的历史
	DeleteChannelHistory(context.Context, *ReqDeleteChannelHistory) (*ReplyDeleteChannelHistory, error)
	// 置顶超级群或者频道的消息
	UpdatePinnedChannelMessage(context.Context, *ReqUpdatePinnedChannelMessage) (*ReplyUpdatePinnedChannelMessage, error)
	//    rpc MigrateChatEvent (ReqMigrateChat) returns (ReplyMigrateChat) {
	//    }
	// 修改超级群或者频道的消息读取状态
	UpdateChannelReadHistory(context.Context, *ReqReadChannelHistory) (*ReplyReadChannelHistory, error)
	// 获取超级群或者频道的修正信息
	GetChannelDifference(context.Context, *ReqGetchannelDifference) (*ReplyChannelDiffCommon, error)
	// 获取超级群或者频道的历史
	//    rpc GetChannelHistory (ReqGetChannelMsgHistory) returns (ReplyChannelMsgs) {
	//    }
	// 通过消息ID获取超级群或者频道的消息
	GetChannelMessagesByMsgsId(context.Context, *ReqGetChannelMsgsByMsgsId) (*ReplyChannelMsgs, error)
	// 主动加入超级群或者频道
	JoinChannel(context.Context, *ReqJoinChannel) (*ReplyJoinChannel, error)
	// 解散超级群或者频道
	DeleteChannel(context.Context, *ReqDeleteChannel) (*ReplyDeleteChannel, error)
	// 通过用户ID获取超级群或者频道的最后一条消息
	GetChannelsLastMsgsByUserId(context.Context, *ReqGetChannelsLastMsgsByUserId) (*ReplyGetChannelsLastMsgsByUserId, error)
	// 获取超级群或者频道的管理记录
	GetChannelAdminLog(context.Context, *ReqChannelAdminLog) (*ReplyChannelAdminLog, error)
	// 通过link加入超级群或者频道
	ImportChatInvite(context.Context, *ReqImportChatInvite) (*ReplyImportChatInvite, error)
	// 踢人并进组其再次加入超级群或者频道，或者解除该禁止
	EditBanChannelUser(context.Context, *ReqBanChannelUser) (*ReplyBanChannelUser, error)
	// 获取full channel
	GetFullChannel(context.Context, *ReqFullchannel) (*ReplyFullChannel, error)
	GetParticipant(context.Context, *ReqParticipant) (*ReplyParticipant, error)
	GetParticipants(context.Context, *ReqParticipants) (*ReplyParticipants, error)
	ExportChannelLink(context.Context, *ReqExportChannelLink) (*ReplyExportChannelLink, error)
	ChannelToggleInvite(context.Context, *ReqChannelToggleInvite) (*ReplyChannelToggleInvite, error)
	Getchannels(context.Context, *ReqGetChannels) (*ReplyGetChannels, error)
	UpdateChannelUserName(context.Context, *ReqChannelUpdateUserName) (*ReplyChannelUpdateUserName, error)
	CheckChannelUserName(context.Context, *ReqChannelCheckUserName) (*ReplyChannelCheckUserName, error)
	// 变更群主
	ChangeGroupAndChannelCrator(context.Context, *ReqChangeGroupAndChannelCrator) (*ReplyChangeGroupAndChannelCrator, error)
	// ====================================================== 为机器人服务提供数据 ======================================================
	// 根据 消息id和用户id 获取单聊消息\普通群消息
	GetMessageByUserIdMsgId(context.Context, *ReqGetMessageByUserIdMsgId) (*ReplyGetMessageByUserIdMsgId, error)
	// 根据 uuid和用户id 获取单聊消息\普通群消息
	GetMessageByUserIdUuid(context.Context, *ReqGetMessageByUserIdUuid) (*ReplyGetMessageByUserIdUuid, error)
	GetChannelMessageByChannelIdMsgId(context.Context, *ReqGetChannelMessageByChannelIdMsgId) (*ReplyGetChannelMessageByChannelIdMsgId, error)
	// ================== 存储 电话信息 联系人 加密聊天请求 二进制信息 ==================
	// infoService 调用存储信息
	StoreOtherInfoMsg(context.Context, *messagedb.ReqStoreOtherInfoMsg) (*ReplyStoreOtherInfoMsg, error)
	// 批量 存储 otherInfoMsg
	BatchStoreOtherInfoMsg(context.Context, *messagedb.ReqBatchStoreOtherInfoMsg) (*ReplyBatchStoreOtherInfoMsg, error)
	// 发送加密聊天请求
	RequestEncryption(context.Context, *RequestEncryptionReq) (*RequestEncryptionResult, error)
	// 接收加密聊天
	AcceptEncryption(context.Context, *AcceptEncryptionReq) (*AcceptEncryptionResult, error)
	// 发送加密聊天普通消息
	SendEncrypted(context.Context, *SendEncryptedReq) (*SendEncryptedResult, error)
	// 发送加密聊天媒体消息
	SendEncryptedFile(context.Context, *SendEncryptedFileReq) (*SendEncryptedFileResult, error)
	// 发送加密聊天action消息
	SendEncryptedService(context.Context, *SendEncryptedServiceReq) (*SendEncryptedServiceResult, error)
	// 发送加密聊天取消
	DiscardEncryption(context.Context, *DiscardEncryptionReq) (*DiscardEncryptionResult, error)
	// 加密聊天双钩
	ReadEncryptedHistory(context.Context, *ReadEncryptedHistoryReq) (*ReadEncryptedHistoryResult, error)
	// 加密聊天settyping
	SetEncryptedTing(context.Context, *SetEncryptedTypingReq) (*SetEncryptedTypingResult, error)
	// LogOut后删除所有的加密聊天
	LogoutDisCardAllSecurity(context.Context, *LogoutDisCardAllSecurityReq) (*LogoutDisCardAllSecurityResult, error)
	// 获取加密聊天的randomId 们
	GetSecurityRandomIds(context.Context, *GetSecurityRandomIdsReq) (*GetSecurityRandomIdsResult, error)
	ReceiveRedPacket(context.Context, *ReqReceiveRedPacket) (*ReplyReceiveRedPacket, error)
	GetChannelInactiveUsers(context.Context, *GetChannelInactiveUsersReq) (*GetChannelInactiveUsersResult, error)
	// 105 add 归档对话框
	FoldersEditPeerFolders(context.Context, *FoldersEditPeerFoldersReq) (*FoldersEditPeerFoldersReply, error)
	// 105 删除归档对话框
	FoldersDeleteFolder(context.Context, *FoldersDeleteFolderReq) (*FoldersDeleteFolderReply, error)
	// 105 发送投票
	SendVote(context.Context, *SendVoteReq) (*SendVoteReply, error)
	// 发送支付结果通知 接口，为支付定制
	SendPaymentNotifyMsg(context.Context, *ReqSendPaymentNotifyMsg) (*RspSendPaymentNotifyMsg, error)
	SendBatchUsersMsg(context.Context, *ReqSendMoreUserMsg) (*ReplyBool, error)
	// 加好友成功后的相互通知消息
	SendAddMutulContactNotify(context.Context, *ReqSendAddMutulContactNotify) (*RespSendAddMutulContactNotify, error)
	// 单方面加好友通知消息
	SendAddSingleContactNotify(context.Context, *ReqSendAddSingleContactNotify) (*RespSendAddSingleContactNotify, error)
	// 朋友圈通知消息
	SendMediaSysNotify(context.Context, *ReqSendMediaSysNotify) (*RespSendMediaSysNotify, error)
	// 编辑媒体消息 by ty 2020.09.27
	EditMessageMedia(context.Context, *ReqEditMessageMedia) (*RespEditMessageMedia, error)
}

func RegisterMessageServerServer(s *grpc.Server, srv MessageServerServer) {
	s.RegisterService(&_MessageServer_serviceDesc, srv)
}

func _MessageServer_BotCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBotCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).BotCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/BotCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).BotCall(ctx, req.(*ReqBotCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_BotInlineCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBotInlineCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).BotInlineCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/BotInlineCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).BotInlineCall(ctx, req.(*ReqBotInlineCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SetGameScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSetGameScore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SetGameScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SetGameScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SetGameScore(ctx, req.(*ReqSetGameScore))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_RemoveConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRemoveConn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).RemoveConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/RemoveConn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).RemoveConn(ctx, req.(*ReqRemoveConn))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SignUpMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSignUpMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SignUpMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SignUpMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SignUpMsg(ctx, req.(*ReqSignUpMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SendCodeMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendCodeMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SendCodeMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SendCodeMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SendCodeMsg(ctx, req.(*ReqSendCodeMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SignInMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSignInMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SignInMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SignInMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SignInMsg(ctx, req.(*ReqSignInMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SendSynMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendSynMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SendSynMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SendSynMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SendSynMsg(ctx, req.(*ReqSendSynMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SendUserMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendUserMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SendUserMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SendUserMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SendUserMsg(ctx, req.(*ReqSendUserMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SendUserOneClientMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendUserOneClientMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SendUserOneClientMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SendUserOneClientMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SendUserOneClientMsg(ctx, req.(*ReqSendUserOneClientMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SendMoreUserMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendMoreUserMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SendMoreUserMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SendMoreUserMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SendMoreUserMsg(ctx, req.(*ReqSendMoreUserMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SendCallMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendCallMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SendCallMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SendCallMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SendCallMsg(ctx, req.(*ReqSendCallMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_CallPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCallPush)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).CallPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/CallPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).CallPush(ctx, req.(*ReqCallPush))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDialog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetDialog(ctx, req.(*RequestDialog))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetLastLimitDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messagedb.ReqGetLastLimitDialog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetLastLimitDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetLastLimitDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetLastLimitDialog(ctx, req.(*messagedb.ReqGetLastLimitDialog))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetPinnedDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPinnedDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetPinnedDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetPinnedDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetPinnedDialogs(ctx, req.(*ReqPinnedDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetPeerDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPeerDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetPeerDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetPeerDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetPeerDialogs(ctx, req.(*ReqPeerDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetRecentLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRecentLocations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetRecentLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetRecentLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetRecentLocations(ctx, req.(*ReqRecentLocations))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_PinDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPinDialog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).PinDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/PinDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).PinDialog(ctx, req.(*ReqPinDialog))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_ReorderPinnedDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReorderPinnedDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).ReorderPinnedDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/ReorderPinnedDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).ReorderPinnedDialogs(ctx, req.(*ReqReorderPinnedDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetState(ctx, req.(*ReqGetState))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSendMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SendMessage(ctx, req.(*RequestSendMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SYSSendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSySSendMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SYSSendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SYSSendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SYSSendMessage(ctx, req.(*RequestSySSendMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SendMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SendMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SendMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SendMedia(ctx, req.(*ReqSendMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_UploadMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUploadMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).UploadMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/UploadMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).UploadMedia(ctx, req.(*ReqUploadMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetMsgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetMsg(ctx, req.(*ReqGetMsgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetHistory(ctx, req.(*ReqHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_CreateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).CreateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/CreateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).CreateChat(ctx, req.(*ReqCreateChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_AddChatUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAddChatUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).AddChatUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/AddChatUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).AddChatUser(ctx, req.(*ReqAddChatUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_DeleteChatUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteChatUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).DeleteChatUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/DeleteChatUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).DeleteChatUser(ctx, req.(*ReqDeleteChatUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_EditChatAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditChatAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).EditChatAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/EditChatAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).EditChatAdmin(ctx, req.(*ReqEditChatAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_EditChatPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditChatPhoto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).EditChatPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/EditChatPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).EditChatPhoto(ctx, req.(*ReqEditChatPhoto))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_EditChatTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditChatTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).EditChatTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/EditChatTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).EditChatTitle(ctx, req.(*ReqEditChatTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetAllChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetAllChats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetAllChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetAllChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetAllChats(ctx, req.(*ReqGetAllChats))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetFullChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetFullChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetFullChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetFullChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetFullChat(ctx, req.(*ReqGetFullChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_MigrateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMigrateChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).MigrateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/MigrateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).MigrateChat(ctx, req.(*ReqMigrateChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_ForwardMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqForwardMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).ForwardMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/ForwardMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).ForwardMessages(ctx, req.(*ReqForwardMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_S2SSendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqS2SMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).S2SSendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/S2SSendMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).S2SSendMsg(ctx, req.(*ReqS2SMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetPts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetPts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetPts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetPts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetPts(ctx, req.(*ReqGetPts))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_ReadHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReadHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).ReadHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/ReadHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).ReadHistory(ctx, req.(*ReqReadHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_UpdateReadOutBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateReadOut)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).UpdateReadOutBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/UpdateReadOutBox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).UpdateReadOutBox(ctx, req.(*ReqUpdateReadOut))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetDiffByPts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDiffByPts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetDiffByPts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetDiffByPts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetDiffByPts(ctx, req.(*ReqDiffByPts))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_DeleteHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).DeleteHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/DeleteHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).DeleteHistory(ctx, req.(*ReqDeleteHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_DeleteMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).DeleteMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/DeleteMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).DeleteMessages(ctx, req.(*ReqDeleteMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_EditMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).EditMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/EditMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).EditMessage(ctx, req.(*ReqEditMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetNotifySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNotifySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetNotifySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetNotifySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetNotifySettings(ctx, req.(*ReqNotifySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_UpdateNotifySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateNotifySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).UpdateNotifySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/UpdateNotifySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).UpdateNotifySettings(ctx, req.(*ReqUpdateNotifySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetMessageEditData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMessageEditData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetMessageEditData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetMessageEditData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetMessageEditData(ctx, req.(*ReqMessageEditData))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SaveMsgDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSaveMsgDraft)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SaveMsgDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SaveMsgDraft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SaveMsgDraft(ctx, req.(*ReqSaveMsgDraft))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetUserUnRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetUserUnRead)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetUserUnRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetUserUnRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetUserUnRead(ctx, req.(*ReqGetUserUnRead))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SearchMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMessageSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SearchMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SearchMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SearchMedia(ctx, req.(*ReqMessageSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_CheckChatInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCheckChatInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).CheckChatInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/CheckChatInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).CheckChatInvite(ctx, req.(*ReqCheckChatInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/CreateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).CreateChannel(ctx, req.(*RequestChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_InviteChannelMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestChannelInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).InviteChannelMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/InviteChannelMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).InviteChannelMember(ctx, req.(*RequestChannelInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_KickFromChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChannelKick)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).KickFromChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/KickFromChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).KickFromChannel(ctx, req.(*ReqChannelKick))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_LeaveChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLeaveChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).LeaveChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/LeaveChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).LeaveChannel(ctx, req.(*ReqLeaveChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_EditChannelTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditChannelTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).EditChannelTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/EditChannelTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).EditChannelTitle(ctx, req.(*ReqEditChannelTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_EditChannelAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditChannelAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).EditChannelAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/EditChannelAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).EditChannelAdmin(ctx, req.(*ReqEditChannelAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_EditChannelPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditChannelPhoto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).EditChannelPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/EditChannelPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).EditChannelPhoto(ctx, req.(*ReqEditChannelPhoto))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_EditChannelAbout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditChannelAbout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).EditChannelAbout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/EditChannelAbout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).EditChannelAbout(ctx, req.(*ReqEditChannelAbout))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_DeleteChannelMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteChannelMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).DeleteChannelMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/DeleteChannelMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).DeleteChannelMessages(ctx, req.(*ReqDeleteChannelMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_DeleteChannelSelfHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteChannelSelfHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).DeleteChannelSelfHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/DeleteChannelSelfHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).DeleteChannelSelfHistory(ctx, req.(*ReqDeleteChannelSelfHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_DeleteChannelHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteChannelHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).DeleteChannelHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/DeleteChannelHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).DeleteChannelHistory(ctx, req.(*ReqDeleteChannelHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_UpdatePinnedChannelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdatePinnedChannelMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).UpdatePinnedChannelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/UpdatePinnedChannelMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).UpdatePinnedChannelMessage(ctx, req.(*ReqUpdatePinnedChannelMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_UpdateChannelReadHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReadChannelHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).UpdateChannelReadHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/UpdateChannelReadHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).UpdateChannelReadHistory(ctx, req.(*ReqReadChannelHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetChannelDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetchannelDifference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetChannelDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetChannelDifference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetChannelDifference(ctx, req.(*ReqGetchannelDifference))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetChannelMessagesByMsgsId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMsgsByMsgsId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetChannelMessagesByMsgsId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetChannelMessagesByMsgsId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetChannelMessagesByMsgsId(ctx, req.(*ReqGetChannelMsgsByMsgsId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_JoinChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqJoinChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).JoinChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/JoinChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).JoinChannel(ctx, req.(*ReqJoinChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_DeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).DeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/DeleteChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).DeleteChannel(ctx, req.(*ReqDeleteChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetChannelsLastMsgsByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelsLastMsgsByUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetChannelsLastMsgsByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetChannelsLastMsgsByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetChannelsLastMsgsByUserId(ctx, req.(*ReqGetChannelsLastMsgsByUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetChannelAdminLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChannelAdminLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetChannelAdminLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetChannelAdminLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetChannelAdminLog(ctx, req.(*ReqChannelAdminLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_ImportChatInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqImportChatInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).ImportChatInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/ImportChatInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).ImportChatInvite(ctx, req.(*ReqImportChatInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_EditBanChannelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBanChannelUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).EditBanChannelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/EditBanChannelUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).EditBanChannelUser(ctx, req.(*ReqBanChannelUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetFullChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFullchannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetFullChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetFullChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetFullChannel(ctx, req.(*ReqFullchannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqParticipant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetParticipant(ctx, req.(*ReqParticipant))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqParticipants)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetParticipants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetParticipants(ctx, req.(*ReqParticipants))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_ExportChannelLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqExportChannelLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).ExportChannelLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/ExportChannelLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).ExportChannelLink(ctx, req.(*ReqExportChannelLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_ChannelToggleInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChannelToggleInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).ChannelToggleInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/ChannelToggleInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).ChannelToggleInvite(ctx, req.(*ReqChannelToggleInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_Getchannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannels)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).Getchannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/Getchannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).Getchannels(ctx, req.(*ReqGetChannels))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_UpdateChannelUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChannelUpdateUserName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).UpdateChannelUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/UpdateChannelUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).UpdateChannelUserName(ctx, req.(*ReqChannelUpdateUserName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_CheckChannelUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChannelCheckUserName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).CheckChannelUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/CheckChannelUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).CheckChannelUserName(ctx, req.(*ReqChannelCheckUserName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_ChangeGroupAndChannelCrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChangeGroupAndChannelCrator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).ChangeGroupAndChannelCrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/ChangeGroupAndChannelCrator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).ChangeGroupAndChannelCrator(ctx, req.(*ReqChangeGroupAndChannelCrator))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetMessageByUserIdMsgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetMessageByUserIdMsgId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetMessageByUserIdMsgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetMessageByUserIdMsgId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetMessageByUserIdMsgId(ctx, req.(*ReqGetMessageByUserIdMsgId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetMessageByUserIdUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetMessageByUserIdUuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetMessageByUserIdUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetMessageByUserIdUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetMessageByUserIdUuid(ctx, req.(*ReqGetMessageByUserIdUuid))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetChannelMessageByChannelIdMsgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMessageByChannelIdMsgId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetChannelMessageByChannelIdMsgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetChannelMessageByChannelIdMsgId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetChannelMessageByChannelIdMsgId(ctx, req.(*ReqGetChannelMessageByChannelIdMsgId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_StoreOtherInfoMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messagedb.ReqStoreOtherInfoMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).StoreOtherInfoMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/StoreOtherInfoMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).StoreOtherInfoMsg(ctx, req.(*messagedb.ReqStoreOtherInfoMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_BatchStoreOtherInfoMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messagedb.ReqBatchStoreOtherInfoMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).BatchStoreOtherInfoMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/BatchStoreOtherInfoMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).BatchStoreOtherInfoMsg(ctx, req.(*messagedb.ReqBatchStoreOtherInfoMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_RequestEncryption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEncryptionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).RequestEncryption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/RequestEncryption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).RequestEncryption(ctx, req.(*RequestEncryptionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_AcceptEncryption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptEncryptionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).AcceptEncryption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/AcceptEncryption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).AcceptEncryption(ctx, req.(*AcceptEncryptionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SendEncrypted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEncryptedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SendEncrypted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SendEncrypted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SendEncrypted(ctx, req.(*SendEncryptedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SendEncryptedFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEncryptedFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SendEncryptedFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SendEncryptedFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SendEncryptedFile(ctx, req.(*SendEncryptedFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SendEncryptedService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEncryptedServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SendEncryptedService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SendEncryptedService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SendEncryptedService(ctx, req.(*SendEncryptedServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_DiscardEncryption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscardEncryptionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).DiscardEncryption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/DiscardEncryption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).DiscardEncryption(ctx, req.(*DiscardEncryptionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_ReadEncryptedHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadEncryptedHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).ReadEncryptedHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/ReadEncryptedHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).ReadEncryptedHistory(ctx, req.(*ReadEncryptedHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SetEncryptedTing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEncryptedTypingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SetEncryptedTing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SetEncryptedTing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SetEncryptedTing(ctx, req.(*SetEncryptedTypingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_LogoutDisCardAllSecurity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutDisCardAllSecurityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).LogoutDisCardAllSecurity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/LogoutDisCardAllSecurity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).LogoutDisCardAllSecurity(ctx, req.(*LogoutDisCardAllSecurityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetSecurityRandomIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecurityRandomIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetSecurityRandomIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetSecurityRandomIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetSecurityRandomIds(ctx, req.(*GetSecurityRandomIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_ReceiveRedPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReceiveRedPacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).ReceiveRedPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/ReceiveRedPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).ReceiveRedPacket(ctx, req.(*ReqReceiveRedPacket))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetChannelInactiveUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelInactiveUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetChannelInactiveUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetChannelInactiveUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetChannelInactiveUsers(ctx, req.(*GetChannelInactiveUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_FoldersEditPeerFolders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FoldersEditPeerFoldersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).FoldersEditPeerFolders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/FoldersEditPeerFolders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).FoldersEditPeerFolders(ctx, req.(*FoldersEditPeerFoldersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_FoldersDeleteFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FoldersDeleteFolderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).FoldersDeleteFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/FoldersDeleteFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).FoldersDeleteFolder(ctx, req.(*FoldersDeleteFolderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SendVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendVoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SendVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SendVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SendVote(ctx, req.(*SendVoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SendPaymentNotifyMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendPaymentNotifyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SendPaymentNotifyMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SendPaymentNotifyMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SendPaymentNotifyMsg(ctx, req.(*ReqSendPaymentNotifyMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SendBatchUsersMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendMoreUserMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SendBatchUsersMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SendBatchUsersMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SendBatchUsersMsg(ctx, req.(*ReqSendMoreUserMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SendAddMutulContactNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendAddMutulContactNotify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SendAddMutulContactNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SendAddMutulContactNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SendAddMutulContactNotify(ctx, req.(*ReqSendAddMutulContactNotify))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SendAddSingleContactNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendAddSingleContactNotify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SendAddSingleContactNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SendAddSingleContactNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SendAddSingleContactNotify(ctx, req.(*ReqSendAddSingleContactNotify))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SendMediaSysNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendMediaSysNotify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SendMediaSysNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SendMediaSysNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SendMediaSysNotify(ctx, req.(*ReqSendMediaSysNotify))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_EditMessageMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditMessageMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).EditMessageMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/EditMessageMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).EditMessageMedia(ctx, req.(*ReqEditMessageMedia))
	}
	return interceptor(ctx, in, info, handler)
}

var _MessageServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pbmessageserver.MessageServer",
	HandlerType: (*MessageServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BotCall",
			Handler:    _MessageServer_BotCall_Handler,
		},
		{
			MethodName: "BotInlineCall",
			Handler:    _MessageServer_BotInlineCall_Handler,
		},
		{
			MethodName: "SetGameScore",
			Handler:    _MessageServer_SetGameScore_Handler,
		},
		{
			MethodName: "RemoveConn",
			Handler:    _MessageServer_RemoveConn_Handler,
		},
		{
			MethodName: "SignUpMsg",
			Handler:    _MessageServer_SignUpMsg_Handler,
		},
		{
			MethodName: "SendCodeMsg",
			Handler:    _MessageServer_SendCodeMsg_Handler,
		},
		{
			MethodName: "SignInMsg",
			Handler:    _MessageServer_SignInMsg_Handler,
		},
		{
			MethodName: "SendSynMsg",
			Handler:    _MessageServer_SendSynMsg_Handler,
		},
		{
			MethodName: "SendUserMsg",
			Handler:    _MessageServer_SendUserMsg_Handler,
		},
		{
			MethodName: "SendUserOneClientMsg",
			Handler:    _MessageServer_SendUserOneClientMsg_Handler,
		},
		{
			MethodName: "SendMoreUserMsg",
			Handler:    _MessageServer_SendMoreUserMsg_Handler,
		},
		{
			MethodName: "SendCallMsg",
			Handler:    _MessageServer_SendCallMsg_Handler,
		},
		{
			MethodName: "CallPush",
			Handler:    _MessageServer_CallPush_Handler,
		},
		{
			MethodName: "GetDialog",
			Handler:    _MessageServer_GetDialog_Handler,
		},
		{
			MethodName: "GetLastLimitDialog",
			Handler:    _MessageServer_GetLastLimitDialog_Handler,
		},
		{
			MethodName: "GetPinnedDialogs",
			Handler:    _MessageServer_GetPinnedDialogs_Handler,
		},
		{
			MethodName: "GetPeerDialogs",
			Handler:    _MessageServer_GetPeerDialogs_Handler,
		},
		{
			MethodName: "GetRecentLocations",
			Handler:    _MessageServer_GetRecentLocations_Handler,
		},
		{
			MethodName: "PinDialog",
			Handler:    _MessageServer_PinDialog_Handler,
		},
		{
			MethodName: "ReorderPinnedDialogs",
			Handler:    _MessageServer_ReorderPinnedDialogs_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _MessageServer_GetState_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _MessageServer_SendMessage_Handler,
		},
		{
			MethodName: "SYSSendMessage",
			Handler:    _MessageServer_SYSSendMessage_Handler,
		},
		{
			MethodName: "SendMedia",
			Handler:    _MessageServer_SendMedia_Handler,
		},
		{
			MethodName: "UploadMedia",
			Handler:    _MessageServer_UploadMedia_Handler,
		},
		{
			MethodName: "GetMsg",
			Handler:    _MessageServer_GetMsg_Handler,
		},
		{
			MethodName: "GetHistory",
			Handler:    _MessageServer_GetHistory_Handler,
		},
		{
			MethodName: "CreateChat",
			Handler:    _MessageServer_CreateChat_Handler,
		},
		{
			MethodName: "AddChatUser",
			Handler:    _MessageServer_AddChatUser_Handler,
		},
		{
			MethodName: "DeleteChatUser",
			Handler:    _MessageServer_DeleteChatUser_Handler,
		},
		{
			MethodName: "EditChatAdmin",
			Handler:    _MessageServer_EditChatAdmin_Handler,
		},
		{
			MethodName: "EditChatPhoto",
			Handler:    _MessageServer_EditChatPhoto_Handler,
		},
		{
			MethodName: "EditChatTitle",
			Handler:    _MessageServer_EditChatTitle_Handler,
		},
		{
			MethodName: "GetAllChats",
			Handler:    _MessageServer_GetAllChats_Handler,
		},
		{
			MethodName: "GetFullChat",
			Handler:    _MessageServer_GetFullChat_Handler,
		},
		{
			MethodName: "MigrateChat",
			Handler:    _MessageServer_MigrateChat_Handler,
		},
		{
			MethodName: "ForwardMessages",
			Handler:    _MessageServer_ForwardMessages_Handler,
		},
		{
			MethodName: "S2SSendMsg",
			Handler:    _MessageServer_S2SSendMsg_Handler,
		},
		{
			MethodName: "GetPts",
			Handler:    _MessageServer_GetPts_Handler,
		},
		{
			MethodName: "ReadHistory",
			Handler:    _MessageServer_ReadHistory_Handler,
		},
		{
			MethodName: "UpdateReadOutBox",
			Handler:    _MessageServer_UpdateReadOutBox_Handler,
		},
		{
			MethodName: "GetDiffByPts",
			Handler:    _MessageServer_GetDiffByPts_Handler,
		},
		{
			MethodName: "DeleteHistory",
			Handler:    _MessageServer_DeleteHistory_Handler,
		},
		{
			MethodName: "DeleteMessages",
			Handler:    _MessageServer_DeleteMessages_Handler,
		},
		{
			MethodName: "EditMessage",
			Handler:    _MessageServer_EditMessage_Handler,
		},
		{
			MethodName: "GetNotifySettings",
			Handler:    _MessageServer_GetNotifySettings_Handler,
		},
		{
			MethodName: "UpdateNotifySettings",
			Handler:    _MessageServer_UpdateNotifySettings_Handler,
		},
		{
			MethodName: "GetMessageEditData",
			Handler:    _MessageServer_GetMessageEditData_Handler,
		},
		{
			MethodName: "SaveMsgDraft",
			Handler:    _MessageServer_SaveMsgDraft_Handler,
		},
		{
			MethodName: "GetUserUnRead",
			Handler:    _MessageServer_GetUserUnRead_Handler,
		},
		{
			MethodName: "SearchMedia",
			Handler:    _MessageServer_SearchMedia_Handler,
		},
		{
			MethodName: "CheckChatInvite",
			Handler:    _MessageServer_CheckChatInvite_Handler,
		},
		{
			MethodName: "CreateChannel",
			Handler:    _MessageServer_CreateChannel_Handler,
		},
		{
			MethodName: "InviteChannelMember",
			Handler:    _MessageServer_InviteChannelMember_Handler,
		},
		{
			MethodName: "KickFromChannel",
			Handler:    _MessageServer_KickFromChannel_Handler,
		},
		{
			MethodName: "LeaveChannel",
			Handler:    _MessageServer_LeaveChannel_Handler,
		},
		{
			MethodName: "EditChannelTitle",
			Handler:    _MessageServer_EditChannelTitle_Handler,
		},
		{
			MethodName: "EditChannelAdmin",
			Handler:    _MessageServer_EditChannelAdmin_Handler,
		},
		{
			MethodName: "EditChannelPhoto",
			Handler:    _MessageServer_EditChannelPhoto_Handler,
		},
		{
			MethodName: "EditChannelAbout",
			Handler:    _MessageServer_EditChannelAbout_Handler,
		},
		{
			MethodName: "DeleteChannelMessages",
			Handler:    _MessageServer_DeleteChannelMessages_Handler,
		},
		{
			MethodName: "DeleteChannelSelfHistory",
			Handler:    _MessageServer_DeleteChannelSelfHistory_Handler,
		},
		{
			MethodName: "DeleteChannelHistory",
			Handler:    _MessageServer_DeleteChannelHistory_Handler,
		},
		{
			MethodName: "UpdatePinnedChannelMessage",
			Handler:    _MessageServer_UpdatePinnedChannelMessage_Handler,
		},
		{
			MethodName: "UpdateChannelReadHistory",
			Handler:    _MessageServer_UpdateChannelReadHistory_Handler,
		},
		{
			MethodName: "GetChannelDifference",
			Handler:    _MessageServer_GetChannelDifference_Handler,
		},
		{
			MethodName: "GetChannelMessagesByMsgsId",
			Handler:    _MessageServer_GetChannelMessagesByMsgsId_Handler,
		},
		{
			MethodName: "JoinChannel",
			Handler:    _MessageServer_JoinChannel_Handler,
		},
		{
			MethodName: "DeleteChannel",
			Handler:    _MessageServer_DeleteChannel_Handler,
		},
		{
			MethodName: "GetChannelsLastMsgsByUserId",
			Handler:    _MessageServer_GetChannelsLastMsgsByUserId_Handler,
		},
		{
			MethodName: "GetChannelAdminLog",
			Handler:    _MessageServer_GetChannelAdminLog_Handler,
		},
		{
			MethodName: "ImportChatInvite",
			Handler:    _MessageServer_ImportChatInvite_Handler,
		},
		{
			MethodName: "EditBanChannelUser",
			Handler:    _MessageServer_EditBanChannelUser_Handler,
		},
		{
			MethodName: "GetFullChannel",
			Handler:    _MessageServer_GetFullChannel_Handler,
		},
		{
			MethodName: "GetParticipant",
			Handler:    _MessageServer_GetParticipant_Handler,
		},
		{
			MethodName: "GetParticipants",
			Handler:    _MessageServer_GetParticipants_Handler,
		},
		{
			MethodName: "ExportChannelLink",
			Handler:    _MessageServer_ExportChannelLink_Handler,
		},
		{
			MethodName: "ChannelToggleInvite",
			Handler:    _MessageServer_ChannelToggleInvite_Handler,
		},
		{
			MethodName: "Getchannels",
			Handler:    _MessageServer_Getchannels_Handler,
		},
		{
			MethodName: "UpdateChannelUserName",
			Handler:    _MessageServer_UpdateChannelUserName_Handler,
		},
		{
			MethodName: "CheckChannelUserName",
			Handler:    _MessageServer_CheckChannelUserName_Handler,
		},
		{
			MethodName: "ChangeGroupAndChannelCrator",
			Handler:    _MessageServer_ChangeGroupAndChannelCrator_Handler,
		},
		{
			MethodName: "GetMessageByUserIdMsgId",
			Handler:    _MessageServer_GetMessageByUserIdMsgId_Handler,
		},
		{
			MethodName: "GetMessageByUserIdUuid",
			Handler:    _MessageServer_GetMessageByUserIdUuid_Handler,
		},
		{
			MethodName: "GetChannelMessageByChannelIdMsgId",
			Handler:    _MessageServer_GetChannelMessageByChannelIdMsgId_Handler,
		},
		{
			MethodName: "StoreOtherInfoMsg",
			Handler:    _MessageServer_StoreOtherInfoMsg_Handler,
		},
		{
			MethodName: "BatchStoreOtherInfoMsg",
			Handler:    _MessageServer_BatchStoreOtherInfoMsg_Handler,
		},
		{
			MethodName: "RequestEncryption",
			Handler:    _MessageServer_RequestEncryption_Handler,
		},
		{
			MethodName: "AcceptEncryption",
			Handler:    _MessageServer_AcceptEncryption_Handler,
		},
		{
			MethodName: "SendEncrypted",
			Handler:    _MessageServer_SendEncrypted_Handler,
		},
		{
			MethodName: "SendEncryptedFile",
			Handler:    _MessageServer_SendEncryptedFile_Handler,
		},
		{
			MethodName: "SendEncryptedService",
			Handler:    _MessageServer_SendEncryptedService_Handler,
		},
		{
			MethodName: "DiscardEncryption",
			Handler:    _MessageServer_DiscardEncryption_Handler,
		},
		{
			MethodName: "ReadEncryptedHistory",
			Handler:    _MessageServer_ReadEncryptedHistory_Handler,
		},
		{
			MethodName: "SetEncryptedTing",
			Handler:    _MessageServer_SetEncryptedTing_Handler,
		},
		{
			MethodName: "LogoutDisCardAllSecurity",
			Handler:    _MessageServer_LogoutDisCardAllSecurity_Handler,
		},
		{
			MethodName: "GetSecurityRandomIds",
			Handler:    _MessageServer_GetSecurityRandomIds_Handler,
		},
		{
			MethodName: "ReceiveRedPacket",
			Handler:    _MessageServer_ReceiveRedPacket_Handler,
		},
		{
			MethodName: "GetChannelInactiveUsers",
			Handler:    _MessageServer_GetChannelInactiveUsers_Handler,
		},
		{
			MethodName: "FoldersEditPeerFolders",
			Handler:    _MessageServer_FoldersEditPeerFolders_Handler,
		},
		{
			MethodName: "FoldersDeleteFolder",
			Handler:    _MessageServer_FoldersDeleteFolder_Handler,
		},
		{
			MethodName: "SendVote",
			Handler:    _MessageServer_SendVote_Handler,
		},
		{
			MethodName: "SendPaymentNotifyMsg",
			Handler:    _MessageServer_SendPaymentNotifyMsg_Handler,
		},
		{
			MethodName: "SendBatchUsersMsg",
			Handler:    _MessageServer_SendBatchUsersMsg_Handler,
		},
		{
			MethodName: "SendAddMutulContactNotify",
			Handler:    _MessageServer_SendAddMutulContactNotify_Handler,
		},
		{
			MethodName: "SendAddSingleContactNotify",
			Handler:    _MessageServer_SendAddSingleContactNotify_Handler,
		},
		{
			MethodName: "SendMediaSysNotify",
			Handler:    _MessageServer_SendMediaSysNotify_Handler,
		},
		{
			MethodName: "EditMessageMedia",
			Handler:    _MessageServer_EditMessageMedia_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/pbmessageserver/pbmessageserver.proto",
}

// Client API for GetWebPagePreview service

type GetWebPagePreviewClient interface {
	// 获取网页预览信息
	GetWebPagePreview(ctx context.Context, in *RequestWebPMessage, opts ...grpc.CallOption) (*ReplyRequestWebPagePreview, error)
}

type getWebPagePreviewClient struct {
	cc *grpc.ClientConn
}

func NewGetWebPagePreviewClient(cc *grpc.ClientConn) GetWebPagePreviewClient {
	return &getWebPagePreviewClient{cc}
}

func (c *getWebPagePreviewClient) GetWebPagePreview(ctx context.Context, in *RequestWebPMessage, opts ...grpc.CallOption) (*ReplyRequestWebPagePreview, error) {
	out := new(ReplyRequestWebPagePreview)
	err := grpc.Invoke(ctx, "/pbmessageserver.GetWebPagePreview/GetWebPagePreview", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GetWebPagePreview service

type GetWebPagePreviewServer interface {
	// 获取网页预览信息
	GetWebPagePreview(context.Context, *RequestWebPMessage) (*ReplyRequestWebPagePreview, error)
}

func RegisterGetWebPagePreviewServer(s *grpc.Server, srv GetWebPagePreviewServer) {
	s.RegisterService(&_GetWebPagePreview_serviceDesc, srv)
}

func _GetWebPagePreview_GetWebPagePreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWebPMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetWebPagePreviewServer).GetWebPagePreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.GetWebPagePreview/GetWebPagePreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetWebPagePreviewServer).GetWebPagePreview(ctx, req.(*RequestWebPMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _GetWebPagePreview_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pbmessageserver.GetWebPagePreview",
	HandlerType: (*GetWebPagePreviewServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWebPagePreview",
			Handler:    _GetWebPagePreview_GetWebPagePreview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/pbmessageserver/pbmessageserver.proto",
}

// Client API for PushServer service

type PushServerClient interface {
	// 调用推送
	CallPush(ctx context.Context, in *Reqpushusermsg, opts ...grpc.CallOption) (*ReplyPush, error)
}

type pushServerClient struct {
	cc *grpc.ClientConn
}

func NewPushServerClient(cc *grpc.ClientConn) PushServerClient {
	return &pushServerClient{cc}
}

func (c *pushServerClient) CallPush(ctx context.Context, in *Reqpushusermsg, opts ...grpc.CallOption) (*ReplyPush, error) {
	out := new(ReplyPush)
	err := grpc.Invoke(ctx, "/pbmessageserver.PushServer/CallPush", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PushServer service

type PushServerServer interface {
	// 调用推送
	CallPush(context.Context, *Reqpushusermsg) (*ReplyPush, error)
}

func RegisterPushServerServer(s *grpc.Server, srv PushServerServer) {
	s.RegisterService(&_PushServer_serviceDesc, srv)
}

func _PushServer_CallPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Reqpushusermsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServerServer).CallPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.PushServer/CallPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServerServer).CallPush(ctx, req.(*Reqpushusermsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _PushServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pbmessageserver.PushServer",
	HandlerType: (*PushServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallPush",
			Handler:    _PushServer_CallPush_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/pbmessageserver/pbmessageserver.proto",
}

// Client API for SearchServer service

type SearchServerClient interface {
	// 消息搜索
	MessageSearch(ctx context.Context, in *ReqMessageSearch, opts ...grpc.CallOption) (*ReplyMessageSearch, error)
	// gifs查询上传
	GifQueryAndUpload(ctx context.Context, in *ReqGifQueryAndUpload, opts ...grpc.CallOption) (*ReplyGifQueryAndUpload, error)
	// gifs搜索Api
	GifSearchApi(ctx context.Context, in *ReqGifSearchApi, opts ...grpc.CallOption) (*ReplyGifSearchApi, error)
	// webpage
	GetWebPage(ctx context.Context, in *ReqGetWebPage, opts ...grpc.CallOption) (*ReplyGetWebPage, error)
	// getWebPagePreview
	GetWebPagePreview(ctx context.Context, in *ReqGetWebPagePreview, opts ...grpc.CallOption) (*ReplyGetWebPagePreview, error)
}

type searchServerClient struct {
	cc *grpc.ClientConn
}

func NewSearchServerClient(cc *grpc.ClientConn) SearchServerClient {
	return &searchServerClient{cc}
}

func (c *searchServerClient) MessageSearch(ctx context.Context, in *ReqMessageSearch, opts ...grpc.CallOption) (*ReplyMessageSearch, error) {
	out := new(ReplyMessageSearch)
	err := grpc.Invoke(ctx, "/pbmessageserver.SearchServer/MessageSearch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServerClient) GifQueryAndUpload(ctx context.Context, in *ReqGifQueryAndUpload, opts ...grpc.CallOption) (*ReplyGifQueryAndUpload, error) {
	out := new(ReplyGifQueryAndUpload)
	err := grpc.Invoke(ctx, "/pbmessageserver.SearchServer/GifQueryAndUpload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServerClient) GifSearchApi(ctx context.Context, in *ReqGifSearchApi, opts ...grpc.CallOption) (*ReplyGifSearchApi, error) {
	out := new(ReplyGifSearchApi)
	err := grpc.Invoke(ctx, "/pbmessageserver.SearchServer/GifSearchApi", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServerClient) GetWebPage(ctx context.Context, in *ReqGetWebPage, opts ...grpc.CallOption) (*ReplyGetWebPage, error) {
	out := new(ReplyGetWebPage)
	err := grpc.Invoke(ctx, "/pbmessageserver.SearchServer/GetWebPage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServerClient) GetWebPagePreview(ctx context.Context, in *ReqGetWebPagePreview, opts ...grpc.CallOption) (*ReplyGetWebPagePreview, error) {
	out := new(ReplyGetWebPagePreview)
	err := grpc.Invoke(ctx, "/pbmessageserver.SearchServer/GetWebPagePreview", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SearchServer service

type SearchServerServer interface {
	// 消息搜索
	MessageSearch(context.Context, *ReqMessageSearch) (*ReplyMessageSearch, error)
	// gifs查询上传
	GifQueryAndUpload(context.Context, *ReqGifQueryAndUpload) (*ReplyGifQueryAndUpload, error)
	// gifs搜索Api
	GifSearchApi(context.Context, *ReqGifSearchApi) (*ReplyGifSearchApi, error)
	// webpage
	GetWebPage(context.Context, *ReqGetWebPage) (*ReplyGetWebPage, error)
	// getWebPagePreview
	GetWebPagePreview(context.Context, *ReqGetWebPagePreview) (*ReplyGetWebPagePreview, error)
}

func RegisterSearchServerServer(s *grpc.Server, srv SearchServerServer) {
	s.RegisterService(&_SearchServer_serviceDesc, srv)
}

func _SearchServer_MessageSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMessageSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServerServer).MessageSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.SearchServer/MessageSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServerServer).MessageSearch(ctx, req.(*ReqMessageSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchServer_GifQueryAndUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGifQueryAndUpload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServerServer).GifQueryAndUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.SearchServer/GifQueryAndUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServerServer).GifQueryAndUpload(ctx, req.(*ReqGifQueryAndUpload))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchServer_GifSearchApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGifSearchApi)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServerServer).GifSearchApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.SearchServer/GifSearchApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServerServer).GifSearchApi(ctx, req.(*ReqGifSearchApi))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchServer_GetWebPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetWebPage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServerServer).GetWebPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.SearchServer/GetWebPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServerServer).GetWebPage(ctx, req.(*ReqGetWebPage))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchServer_GetWebPagePreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetWebPagePreview)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServerServer).GetWebPagePreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.SearchServer/GetWebPagePreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServerServer).GetWebPagePreview(ctx, req.(*ReqGetWebPagePreview))
	}
	return interceptor(ctx, in, info, handler)
}

var _SearchServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pbmessageserver.SearchServer",
	HandlerType: (*SearchServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MessageSearch",
			Handler:    _SearchServer_MessageSearch_Handler,
		},
		{
			MethodName: "GifQueryAndUpload",
			Handler:    _SearchServer_GifQueryAndUpload_Handler,
		},
		{
			MethodName: "GifSearchApi",
			Handler:    _SearchServer_GifSearchApi_Handler,
		},
		{
			MethodName: "GetWebPage",
			Handler:    _SearchServer_GetWebPage_Handler,
		},
		{
			MethodName: "GetWebPagePreview",
			Handler:    _SearchServer_GetWebPagePreview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/pbmessageserver/pbmessageserver.proto",
}

func (m *ReqSendMediaSysNotify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSendMediaSysNotify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MsgId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.MsgId)))
		i += copy(dAtA[i:], m.MsgId)
	}
	if m.FromId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromId))
	}
	if m.SourceCode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.SourceCode))
	}
	if len(m.Request) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Request)))
		i += copy(dAtA[i:], m.Request)
	}
	if m.Layer != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Layer))
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n1, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *FailUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FailUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.User != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.User))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *SucceedUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SucceedUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.User != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.User))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *CallBackRespSendMediaSysNotify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CallBackRespSendMediaSysNotify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FailUsers) > 0 {
		for _, msg := range m.FailUsers {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPbmessageserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.SucceedUsers) > 0 {
		for _, msg := range m.SucceedUsers {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintPbmessageserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RespSendMediaSysNotify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespSendMediaSysNotify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.ErrorMsg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.ErrorMsg)))
		i += copy(dAtA[i:], m.ErrorMsg)
	}
	return i, nil
}

func (m *ReqEditMessageMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqEditMessageMedia) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FormId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FormId))
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromKeyid))
	}
	if len(m.Peer) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Peer)))
		i += copy(dAtA[i:], m.Peer)
	}
	if m.Id != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Id))
	}
	if len(m.Media) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Media)))
		i += copy(dAtA[i:], m.Media)
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n2, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *RespEditMessageMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespEditMessageMedia) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UpdateEditMessage) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.UpdateEditMessage)))
		i += copy(dAtA[i:], m.UpdateEditMessage)
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *InlineCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InlineCall) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.MsgId))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromId))
	}
	if m.ChatId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChatId))
	}
	if m.ChatType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChatType))
	}
	if m.BotId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.BotId))
	}
	return i, nil
}

func (m *ChannelInactiveUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelInactiveUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Time != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Time))
	}
	if len(m.TimeStr) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.TimeStr)))
		i += copy(dAtA[i:], m.TimeStr)
	}
	return i, nil
}

func (m *GetChannelInactiveUsersReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelInactiveUsersReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Limit))
	}
	if m.Userid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Userid))
	}
	return i, nil
}

func (m *GetChannelInactiveUsersResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelInactiveUsersResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPbmessageserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *GetSecurityRandomIdsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSecurityRandomIdsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.KeyId))
	}
	if m.MaxQts != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.MaxQts))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n3, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *GetSecurityRandomIdsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSecurityRandomIdsResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Errcode))
	}
	if len(m.RandomIds) > 0 {
		dAtA5 := make([]byte, len(m.RandomIds)*10)
		var j4 int
		for _, num1 := range m.RandomIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(j4))
		i += copy(dAtA[i:], dAtA5[:j4])
	}
	return i, nil
}

func (m *LogoutDisCardAllSecurityReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogoutDisCardAllSecurityReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.UserId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.KeyId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n6, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *LogoutDisCardAllSecurityResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogoutDisCardAllSecurityResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Errcode))
	}
	return i, nil
}

func (m *SetEncryptedTypingReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetEncryptedTypingReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.UserId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.KeyId))
	}
	if m.ChatId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChatId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n7, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *SetEncryptedTypingResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetEncryptedTypingResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReadEncryptedHistoryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadEncryptedHistoryReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.UserId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.KeyId))
	}
	if m.ChatId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChatId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.MaxDate != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.MaxDate))
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n8, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *ReadEncryptedHistoryResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadEncryptedHistoryResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *DiscardEncryptionReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiscardEncryptionReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.UserId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.KeyId))
	}
	if m.ChatId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChatId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n9, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *DiscardEncryptionResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiscardEncryptionResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *SendEncryptedServiceReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendEncryptedServiceReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SendId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.SendId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.KeyId))
	}
	if m.ChatId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChatId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.RandomId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.RandomId))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.Debug != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n10, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *SendEncryptedServiceResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendEncryptedServiceResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *SendEncryptedFileReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendEncryptedFileReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SendId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.SendId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.KeyId))
	}
	if m.ChatId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChatId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.RandomId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.RandomId))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if len(m.File) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.File)))
		i += copy(dAtA[i:], m.File)
	}
	if m.Debug != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n11, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *SendEncryptedFileResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendEncryptedFileResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *SendEncryptedReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendEncryptedReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SendId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.SendId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.KeyId))
	}
	if m.ChatId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChatId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.RandomId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.RandomId))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.Debug != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n12, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *SendEncryptedResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendEncryptedResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *AcceptEncryptionReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcceptEncryptionReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ParticipartId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ParticipartId))
	}
	if m.ParticipartKeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ParticipartKeyId))
	}
	if m.ChatId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChatId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.AccessHash))
	}
	if len(m.GB) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.GB)))
		i += copy(dAtA[i:], m.GB)
	}
	if m.KeyFingerprint != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.KeyFingerprint))
	}
	if m.Debug != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n13, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *AcceptEncryptionResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcceptEncryptionResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AdminId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.AdminId))
	}
	if len(m.GAOrB) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.GAOrB)))
		i += copy(dAtA[i:], m.GAOrB)
	}
	if m.KeyFingerPrint2 != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.KeyFingerPrint2))
	}
	if m.ChatId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChatId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *RequestEncryptionReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestEncryptionReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AdminId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.AdminId))
	}
	if m.AdminKeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.AdminKeyId))
	}
	if m.ParticipantId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ParticipantId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.AccessHash))
	}
	if len(m.GA) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.GA)))
		i += copy(dAtA[i:], m.GA)
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n14, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *RequestEncryptionResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestEncryptionResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChatId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqBotCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqBotCall) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FrombotId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FrombotId))
	}
	if len(m.Request) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Request)))
		i += copy(dAtA[i:], m.Request)
	}
	if m.Layer != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Layer))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n15, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}

func (m *ReplyBotCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyBotCall) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *ReqBotInlineCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqBotInlineCall) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n16, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.UserId))
	}
	if m.BotId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.BotId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.KeyId))
	}
	if m.SessionId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.SessionId))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *ReplyBotInlineCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyBotInlineCall) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrCode))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Inlinecall != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Inlinecall.Size()))
		n17, err := m.Inlinecall.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}

func (m *ReqSetGameScore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSetGameScore) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Userid))
	}
	if len(m.Scores) > 0 {
		for _, msg := range m.Scores {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPbmessageserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Force {
		dAtA[i] = 0x18
		i++
		if m.Force {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DisableEditMessage {
		dAtA[i] = 0x20
		i++
		if m.DisableEditMessage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ChatId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChatId))
	}
	if m.ChatType != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChatType))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.MessageId))
	}
	if len(m.InlineMessageId) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.InlineMessageId)))
		i += copy(dAtA[i:], m.InlineMessageId)
	}
	if m.Botid != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Botid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n18, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}

func (m *ReplySetGameScore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplySetGameScore) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Succeed {
		dAtA[i] = 0x8
		i++
		if m.Succeed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *ReqRemoveConn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqRemoveConn) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Userid))
	}
	if m.RequestKey != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.RequestKey))
	}
	if m.RemoveType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.RemoveType))
	}
	if m.RemoveKey != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.RemoveKey))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n19, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}

func (m *ReplyRemoveConn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyRemoveConn) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *ReqSignUpMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSignUpMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Userid))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n20, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}

func (m *ReqSendCodeMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSendCodeMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Userid))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.Keyid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Keyid))
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n21, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}

func (m *ReqSignInMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSignInMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Userid))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.Keyid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Keyid))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Device) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Device)))
		i += copy(dAtA[i:], m.Device)
	}
	if len(m.Location) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Location)))
		i += copy(dAtA[i:], m.Location)
	}
	if len(m.IP) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.IP)))
		i += copy(dAtA[i:], m.IP)
	}
	if m.Debug != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n22, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}

func (m *ReqSendSynMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSendSynMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Userid))
	}
	if m.Keyid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Keyid))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n23, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}

func (m *ReqSendUserMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSendUserMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fromid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Fromid))
	}
	if m.FromKeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromKeyId))
	}
	if m.Toid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Toid))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n24, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}

func (m *ReqSendUserOneClientMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSendUserOneClientMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fromid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Fromid))
	}
	if m.FromKeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromKeyId))
	}
	if m.Toid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Toid))
	}
	if m.Tokeyid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Tokeyid))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n25, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}

func (m *ReqSendMoreUserMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSendMoreUserMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fromid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Fromid))
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromKeyid))
	}
	if len(m.Toid) > 0 {
		dAtA27 := make([]byte, len(m.Toid)*10)
		var j26 int
		for _, num1 := range m.Toid {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA27[j26] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j26++
			}
			dAtA27[j26] = uint8(num)
			j26++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(j26))
		i += copy(dAtA[i:], dAtA27[:j26])
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n28, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}

func (m *ReqSendCallMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSendCallMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fromid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Fromid))
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromKeyid))
	}
	if m.Toid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Toid))
	}
	if len(m.CallAction) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.CallAction)))
		i += copy(dAtA[i:], m.CallAction)
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n29, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}

func (m *ReqCallPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCallPush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fromid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Fromid))
	}
	if m.Toid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Toid))
	}
	if m.Callid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Callid))
	}
	if m.CallAccessHash != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.CallAccessHash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n30, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *ReplyCallPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyCallPush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Reply {
		dAtA[i] = 0x8
		i++
		if m.Reply {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *ReqGetState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Userid))
	}
	if m.Keyid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Keyid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n31, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}

func (m *ReplyResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *ReplyNull) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyNull) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ReqGetPts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetPts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Userid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n32, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}

func (m *ReplyGetPts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetPts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pts != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Pts))
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *RequestDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestDialog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Userid))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Flags))
	}
	if m.FolderId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FolderId))
	}
	if m.OffsetDate != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.OffsetDate))
	}
	if m.OffsetId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.OffsetId))
	}
	if len(m.OffsetPeer) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.OffsetPeer)))
		i += copy(dAtA[i:], m.OffsetPeer)
	}
	if m.Limit != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Limit))
	}
	if m.Debug != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n33, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}

func (m *ReplyDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyDialog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *UserIdRating) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserIdRating) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.UserId))
	}
	if m.Rating != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Rating))))
		i += 8
	}
	return i, nil
}

func (m *ReplyGetLastLimitDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetLastLimitDialog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserRatingList) > 0 {
		for _, msg := range m.UserRatingList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPbmessageserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ChannelIdlist) > 0 {
		dAtA35 := make([]byte, len(m.ChannelIdlist)*10)
		var j34 int
		for _, num1 := range m.ChannelIdlist {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA35[j34] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j34++
			}
			dAtA35[j34] = uint8(num)
			j34++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(j34))
		i += copy(dAtA[i:], dAtA35[:j34])
	}
	if len(m.ChatIdlist) > 0 {
		dAtA37 := make([]byte, len(m.ChatIdlist)*10)
		var j36 int
		for _, num1 := range m.ChatIdlist {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA37[j36] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j36++
			}
			dAtA37[j36] = uint8(num)
			j36++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(j36))
		i += copy(dAtA[i:], dAtA37[:j36])
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *ReqPinnedDialogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqPinnedDialogs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Userid))
	}
	if m.FolderId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FolderId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n38, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	return i, nil
}

func (m *ReqPeerDialogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqPeerDialogs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Userid))
	}
	if len(m.Peers) > 0 {
		for _, b := range m.Peers {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPbmessageserver(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n39, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	return i, nil
}

func (m *ReqRecentLocations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqRecentLocations) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Userid))
	}
	if len(m.Peers) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Peers)))
		i += copy(dAtA[i:], m.Peers)
	}
	if m.Limit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Limit))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n40, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	return i, nil
}

func (m *ReqPinDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqPinDialog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Userid))
	}
	if m.Pinned {
		dAtA[i] = 0x10
		i++
		if m.Pinned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Peer) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Peer)))
		i += copy(dAtA[i:], m.Peer)
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n41, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	return i, nil
}

func (m *ReqReorderPinnedDialogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqReorderPinnedDialogs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Userid))
	}
	if len(m.Peer) > 0 {
		for _, b := range m.Peer {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintPbmessageserver(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n42, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	return i, nil
}

func (m *ReplyBool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyBool) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *RequestSendMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSendMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fromid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Fromid))
	}
	if m.NoWebpage {
		dAtA[i] = 0x10
		i++
		if m.NoWebpage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Silent {
		dAtA[i] = 0x18
		i++
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Background {
		dAtA[i] = 0x20
		i++
		if m.Background {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ClearDraft {
		dAtA[i] = 0x28
		i++
		if m.ClearDraft {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Peer) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Peer)))
		i += copy(dAtA[i:], m.Peer)
	}
	if m.ReplyToMsgId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ReplyToMsgId))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.RandomId != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.RandomId))
	}
	if len(m.ReplyMarkup) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.ReplyMarkup)))
		i += copy(dAtA[i:], m.ReplyMarkup)
	}
	if len(m.Entities) > 0 {
		for _, b := range m.Entities {
			dAtA[i] = 0x5a
			i++
			i = encodeVarintPbmessageserver(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.FromkeyId != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromkeyId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n43, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	if m.IncludeChat {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		if m.IncludeChat {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ViaBotId != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ViaBotId))
	}
	return i, nil
}

func (m *SendVoteReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendVoteReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fromid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Fromid))
	}
	if len(m.Peer) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Peer)))
		i += copy(dAtA[i:], m.Peer)
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.MsgId))
	}
	if len(m.Options) > 0 {
		for _, s := range m.Options {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.FromKey != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromKey))
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n44, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	return i, nil
}

func (m *SendVoteReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendVoteReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Reply) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Reply)))
		i += copy(dAtA[i:], m.Reply)
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *RequestSySSendMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSySSendMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fromid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Fromid))
	}
	if m.NoWebpage {
		dAtA[i] = 0x10
		i++
		if m.NoWebpage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Silent {
		dAtA[i] = 0x18
		i++
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Background {
		dAtA[i] = 0x20
		i++
		if m.Background {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ClearDraft {
		dAtA[i] = 0x28
		i++
		if m.ClearDraft {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Peer) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Peer)))
		i += copy(dAtA[i:], m.Peer)
	}
	if m.ReplyToMsgId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ReplyToMsgId))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.RandomId != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.RandomId))
	}
	if len(m.ReplyMarkup) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.ReplyMarkup)))
		i += copy(dAtA[i:], m.ReplyMarkup)
	}
	if len(m.Entities) > 0 {
		for _, b := range m.Entities {
			dAtA[i] = 0x5a
			i++
			i = encodeVarintPbmessageserver(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.ChatMember) > 0 {
		dAtA46 := make([]byte, len(m.ChatMember)*10)
		var j45 int
		for _, num1 := range m.ChatMember {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA46[j45] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j45++
			}
			dAtA46[j45] = uint8(num)
			j45++
		}
		dAtA[i] = 0x62
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(j45))
		i += copy(dAtA[i:], dAtA46[:j45])
	}
	if m.FromkeyId != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromkeyId))
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if m.Debug != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n47, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	return i, nil
}

func (m *ReqS2SMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqS2SMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Userid))
	}
	if m.WithidType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.WithidType))
	}
	if m.MessageType != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.MessageType))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Flags))
	}
	if m.Out {
		dAtA[i] = 0x38
		i++
		if m.Out {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Mentioned {
		dAtA[i] = 0x40
		i++
		if m.Mentioned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MediaUnread {
		dAtA[i] = 0x48
		i++
		if m.MediaUnread {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Silent {
		dAtA[i] = 0x50
		i++
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Post {
		dAtA[i] = 0x58
		i++
		if m.Post {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.MsgId))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromId))
	}
	if m.ToId != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ToId))
	}
	if m.Pts != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Pts))
	}
	if len(m.FwdFrom) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.FwdFrom)))
		i += copy(dAtA[i:], m.FwdFrom)
	}
	if m.ViaBotId != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ViaBotId))
	}
	if m.ReplyToMsgId != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ReplyToMsgId))
	}
	if m.Date != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Date))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Media != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Media))
	}
	if len(m.Meidadata) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Meidadata)))
		i += copy(dAtA[i:], m.Meidadata)
	}
	if len(m.ReplyMarkup) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.ReplyMarkup)))
		i += copy(dAtA[i:], m.ReplyMarkup)
	}
	if len(m.Entities) > 0 {
		for _, b := range m.Entities {
			dAtA[i] = 0xc2
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintPbmessageserver(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.Views != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Views))
	}
	if m.EditDate != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.EditDate))
	}
	if len(m.Action) > 0 {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Action)))
		i += copy(dAtA[i:], m.Action)
	}
	if m.Uuid != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Uuid))
	}
	if m.Encry != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Encry))
	}
	if m.Debug != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n48, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	if m.Groupid != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Groupid))
	}
	if m.ReplyUuid != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ReplyUuid))
	}
	return i, nil
}

func (m *ReplyS2SMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyS2SMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Reply != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Reply))
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *ReqSendMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSendMedia) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fromid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Fromid))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Flags))
	}
	if m.Silent {
		dAtA[i] = 0x18
		i++
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Background {
		dAtA[i] = 0x20
		i++
		if m.Background {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ClearDraft {
		dAtA[i] = 0x28
		i++
		if m.ClearDraft {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Peer) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Peer)))
		i += copy(dAtA[i:], m.Peer)
	}
	if m.ReplyToMsgId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ReplyToMsgId))
	}
	if len(m.Media) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Media)))
		i += copy(dAtA[i:], m.Media)
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.MultiMedia) > 0 {
		for _, b := range m.MultiMedia {
			dAtA[i] = 0x52
			i++
			i = encodeVarintPbmessageserver(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.RandomId != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.RandomId))
	}
	if len(m.ReplyMarkup) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.ReplyMarkup)))
		i += copy(dAtA[i:], m.ReplyMarkup)
	}
	if m.Newfileid != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Newfileid))
	}
	if len(m.Entities) > 0 {
		for _, b := range m.Entities {
			dAtA[i] = 0x72
			i++
			i = encodeVarintPbmessageserver(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.FromkeyId != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromkeyId))
	}
	if len(m.Chatmeber) > 0 {
		dAtA50 := make([]byte, len(m.Chatmeber)*10)
		var j49 int
		for _, num1 := range m.Chatmeber {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA50[j49] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j49++
			}
			dAtA50[j49] = uint8(num)
			j49++
		}
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(j49))
		i += copy(dAtA[i:], dAtA50[:j49])
	}
	if m.Debug != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n51, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n51
	}
	if m.ViaBotId != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ViaBotId))
	}
	return i, nil
}

func (m *ReqUploadMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUploadMedia) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fromid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Fromid))
	}
	if len(m.Peer) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Peer)))
		i += copy(dAtA[i:], m.Peer)
	}
	if len(m.Media) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Media)))
		i += copy(dAtA[i:], m.Media)
	}
	if m.Debug != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n52, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n52
	}
	return i, nil
}

func (m *ReqForwardMessages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqForwardMessages) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fromid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Fromid))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Flags))
	}
	if m.Silent {
		dAtA[i] = 0x18
		i++
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Background {
		dAtA[i] = 0x20
		i++
		if m.Background {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.WithMyScore {
		dAtA[i] = 0x28
		i++
		if m.WithMyScore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.FromPeer) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.FromPeer)))
		i += copy(dAtA[i:], m.FromPeer)
	}
	if len(m.Id) > 0 {
		dAtA54 := make([]byte, len(m.Id)*10)
		var j53 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA54[j53] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j53++
			}
			dAtA54[j53] = uint8(num)
			j53++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(j53))
		i += copy(dAtA[i:], dAtA54[:j53])
	}
	if len(m.RandomId) > 0 {
		dAtA56 := make([]byte, len(m.RandomId)*10)
		var j55 int
		for _, num1 := range m.RandomId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA56[j55] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j55++
			}
			dAtA56[j55] = uint8(num)
			j55++
		}
		dAtA[i] = 0x42
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(j55))
		i += copy(dAtA[i:], dAtA56[:j55])
	}
	if len(m.ToPeer) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.ToPeer)))
		i += copy(dAtA[i:], m.ToPeer)
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n57, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n57
	}
	return i, nil
}

func (m *ReplyForwardMessages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyForwardMessages) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *Msg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Msg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Type))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Flags))
	}
	if m.Id != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Id))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromId))
	}
	if len(m.ToId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.ToId)))
		i += copy(dAtA[i:], m.ToId)
	}
	if len(m.FwdFrom) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.FwdFrom)))
		i += copy(dAtA[i:], m.FwdFrom)
	}
	if m.ViaBotId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ViaBotId))
	}
	if m.ReplyToMsgId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ReplyToMsgId))
	}
	if m.Date != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Date))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Media) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Media)))
		i += copy(dAtA[i:], m.Media)
	}
	if m.MediaType != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.MediaType))
	}
	if len(m.ReplyMarkup) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.ReplyMarkup)))
		i += copy(dAtA[i:], m.ReplyMarkup)
	}
	if len(m.Entities) > 0 {
		for _, b := range m.Entities {
			dAtA[i] = 0x72
			i++
			i = encodeVarintPbmessageserver(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.Views != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Views))
	}
	if m.EditDate != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.EditDate))
	}
	if len(m.Action) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Action)))
		i += copy(dAtA[i:], m.Action)
	}
	if m.Randomid != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Randomid))
	}
	if m.Pts != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Pts))
	}
	return i, nil
}

func (m *ReqGetMsgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetMsgs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.SelfId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.KeyId))
	}
	if len(m.Ids) > 0 {
		dAtA59 := make([]byte, len(m.Ids)*10)
		var j58 int
		for _, num1 := range m.Ids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA59[j58] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j58++
			}
			dAtA59[j58] = uint8(num)
			j58++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(j58))
		i += copy(dAtA[i:], dAtA59[:j58])
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n60, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n60
	}
	return i, nil
}

func (m *ReplyGetMsgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetMsgs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *ReqHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqHistory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Selfid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Selfid))
	}
	if len(m.Peer) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Peer)))
		i += copy(dAtA[i:], m.Peer)
	}
	if m.OffsetId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.OffsetId))
	}
	if m.OffsetDate != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.OffsetDate))
	}
	if m.AddOffset != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.AddOffset))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Limit))
	}
	if m.MaxId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.MaxId))
	}
	if m.MinId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.MinId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n61, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n61
	}
	return i, nil
}

func (m *ReplyHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyHistory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *ReqCreateChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCreateChat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Chatid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Chatid))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.Creator != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Creator))
	}
	if len(m.Users) > 0 {
		dAtA63 := make([]byte, len(m.Users)*10)
		var j62 int
		for _, num1 := range m.Users {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA63[j62] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j62++
			}
			dAtA63[j62] = uint8(num)
			j62++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(j62))
		i += copy(dAtA[i:], dAtA63[:j62])
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n64, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n64
	}
	return i, nil
}

func (m *ReplyCreateChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyCreateChat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.ChatId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChatId))
	}
	if m.Error != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *ReqAddChatUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqAddChatUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fromid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Fromid))
	}
	if m.Chatid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Chatid))
	}
	if m.Userid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Userid))
	}
	if m.Fwdlimit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Fwdlimit))
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromKeyid))
	}
	if m.InviteType != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.InviteType))
	}
	if m.Debug != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n65, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n65
	}
	return i, nil
}

func (m *ReplyAddChatUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyAddChatUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *ReqDeleteChatUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDeleteChatUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fromid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Fromid))
	}
	if m.Chatid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Chatid))
	}
	if m.Userid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Userid))
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n66, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n66
	}
	return i, nil
}

func (m *ReplyDeleteChatUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyDeleteChatUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *ReqEditChatAdmin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqEditChatAdmin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fromid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Fromid))
	}
	if m.Chatid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Chatid))
	}
	if m.Userid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Userid))
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromKeyid))
	}
	if m.IsAdmin {
		dAtA[i] = 0x28
		i++
		if m.IsAdmin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n67, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n67
	}
	return i, nil
}

func (m *ReplyEditChatAdmin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyEditChatAdmin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *ReqEditChatTitle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqEditChatTitle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fromid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Fromid))
	}
	if m.Chatid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Chatid))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n68, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n68
	}
	return i, nil
}

func (m *ReplyEditChatTitle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyEditChatTitle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.Error != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *ReqGetAllChats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetAllChats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fromid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Fromid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n69, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n69
	}
	return i, nil
}

func (m *ReplyGetAllChats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetAllChats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Chats) > 0 {
		dAtA71 := make([]byte, len(m.Chats)*10)
		var j70 int
		for _, num1 := range m.Chats {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA71[j70] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j70++
			}
			dAtA71[j70] = uint8(num)
			j70++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(j70))
		i += copy(dAtA[i:], dAtA71[:j70])
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *ReqGetFullChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetFullChat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fromid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Fromid))
	}
	if m.Chatid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Chatid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n72, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n72
	}
	return i, nil
}

func (m *ReplyGetFullChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetFullChat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *ReqEditChatPhoto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqEditChatPhoto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fromid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Fromid))
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromKeyid))
	}
	if m.Chatid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Chatid))
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.Debug != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n73, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n73
	}
	return i, nil
}

func (m *ReplyEditChatPhoto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyEditChatPhoto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.Error != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *ReqMigrateChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqMigrateChat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fromid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Fromid))
	}
	if m.Chatid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Chatid))
	}
	if m.Fromkeyid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Fromkeyid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n74, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n74
	}
	return i, nil
}

func (m *ReplyMigrateChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyMigrateChat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.Error != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *ReqReadHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqReadHistory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Selfid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Selfid))
	}
	if len(m.Peer) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Peer)))
		i += copy(dAtA[i:], m.Peer)
	}
	if m.MaxId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.MaxId))
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n75, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n75
	}
	return i, nil
}

func (m *ReplyReadHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyReadHistory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pts != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Pts))
	}
	if m.MaxId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.MaxId))
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *ReqUpdateReadOut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateReadOut) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.SelfId))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromId))
	}
	if m.PeerType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.PeerType))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n76, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n76
	}
	return i, nil
}

func (m *ReplyUpdateReadOut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyUpdateReadOut) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Maxid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Maxid))
	}
	if m.Pts != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Pts))
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *ReqDiffByPts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDiffByPts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fromid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Fromid))
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromKeyid))
	}
	if m.Pts != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Pts))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Flags))
	}
	if m.PtsTotalLimit != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.PtsTotalLimit))
	}
	if m.Date != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Date))
	}
	if m.Qts != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Qts))
	}
	if m.Debug != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n77, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n77
	}
	return i, nil
}

func (m *ReplyDiffByPts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyDiffByPts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Error))
	}
	if m.Usetime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Usetime))
	}
	return i, nil
}

func (m *ReqDeleteHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDeleteHistory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fromid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Fromid))
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromKeyid))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Flags))
	}
	if m.JustClear {
		dAtA[i] = 0x20
		i++
		if m.JustClear {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Peer) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Peer)))
		i += copy(dAtA[i:], m.Peer)
	}
	if m.MaxId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.MaxId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n78, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n78
	}
	return i, nil
}

func (m *ReplyDeleteHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyDeleteHistory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pts != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Pts))
	}
	if m.PtsCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.PtsCount))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Offset))
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *ReqDeleteMessages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDeleteMessages) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fromid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Fromid))
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromKeyid))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Flags))
	}
	if m.Revoke {
		dAtA[i] = 0x20
		i++
		if m.Revoke {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Id) > 0 {
		dAtA80 := make([]byte, len(m.Id)*10)
		var j79 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA80[j79] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j79++
			}
			dAtA80[j79] = uint8(num)
			j79++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(j79))
		i += copy(dAtA[i:], dAtA80[:j79])
	}
	if m.Channelid != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Channelid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n81, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n81
	}
	return i, nil
}

func (m *ReplyDeleteMessages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyDeleteMessages) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *ReqEditMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqEditMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FormId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FormId))
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromKeyid))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Flags))
	}
	if m.NoWebpage {
		dAtA[i] = 0x20
		i++
		if m.NoWebpage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.StopGeoLive {
		dAtA[i] = 0x28
		i++
		if m.StopGeoLive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Peer) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Peer)))
		i += copy(dAtA[i:], m.Peer)
	}
	if m.Id != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Id))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.ReplyMarkup) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.ReplyMarkup)))
		i += copy(dAtA[i:], m.ReplyMarkup)
	}
	if len(m.Entities) > 0 {
		for _, b := range m.Entities {
			dAtA[i] = 0x52
			i++
			i = encodeVarintPbmessageserver(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.GeoPoint) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.GeoPoint)))
		i += copy(dAtA[i:], m.GeoPoint)
	}
	if m.ViaBotId != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ViaBotId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n82, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n82
	}
	return i, nil
}

func (m *ReplyEditMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyEditMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UpdateEditMessage) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.UpdateEditMessage)))
		i += copy(dAtA[i:], m.UpdateEditMessage)
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *ReqNotifySettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqNotifySettings) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fromid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Fromid))
	}
	if len(m.Peer) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Peer)))
		i += copy(dAtA[i:], m.Peer)
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n83, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n83
	}
	return i, nil
}

func (m *ReplyNotifySettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyNotifySettings) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Flags != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Flags))
	}
	if m.ShowPreviews {
		dAtA[i] = 0x10
		i++
		if m.ShowPreviews {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Silent {
		dAtA[i] = 0x18
		i++
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MuteUntil != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.MuteUntil))
	}
	if len(m.Sound) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Sound)))
		i += copy(dAtA[i:], m.Sound)
	}
	if m.Error != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *ReqUpdateNotifySettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateNotifySettings) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fromid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Fromid))
	}
	if len(m.Peer) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Peer)))
		i += copy(dAtA[i:], m.Peer)
	}
	if len(m.Settings) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Settings)))
		i += copy(dAtA[i:], m.Settings)
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n84, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n84
	}
	return i, nil
}

func (m *ReplyUpdateNotifySettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyUpdateNotifySettings) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *ReqMessageEditData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqMessageEditData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Layer != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Layer))
	}
	if m.Fromid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Fromid))
	}
	if len(m.Peer) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Peer)))
		i += copy(dAtA[i:], m.Peer)
	}
	if m.Id != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Id))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n85, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n85
	}
	return i, nil
}

func (m *ReplyMessageEditData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyMessageEditData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Flags != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Flags))
	}
	if m.Caption {
		dAtA[i] = 0x10
		i++
		if m.Caption {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *ReqSaveMsgDraft) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSaveMsgDraft) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Selfid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Selfid))
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromKeyid))
	}
	if m.Layer != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Layer))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Flags))
	}
	if m.NoWebpage {
		dAtA[i] = 0x28
		i++
		if m.NoWebpage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ReplyToMsgId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ReplyToMsgId))
	}
	if len(m.Peer) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Peer)))
		i += copy(dAtA[i:], m.Peer)
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Entities) > 0 {
		for _, b := range m.Entities {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintPbmessageserver(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.Debug != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n86, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n86
	}
	return i, nil
}

func (m *ReplySaveMsgDraft) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplySaveMsgDraft) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Reply {
		dAtA[i] = 0x8
		i++
		if m.Reply {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *ReqGetUserUnRead) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetUserUnRead) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Userid))
	}
	if m.Keyid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Keyid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n87, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n87
	}
	return i, nil
}

func (m *ReplyUserUnread) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyUserUnread) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Unread != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Unread))
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *InputChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InputChannel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Type))
	}
	if m.InputChannelEmpty != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.InputChannelEmpty.Size()))
		n88, err := m.InputChannelEmpty.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n88
	}
	if m.InputChannelinputChannel != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.InputChannelinputChannel.Size()))
		n89, err := m.InputChannelinputChannel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n89
	}
	return i, nil
}

func (m *InputChannelEmpty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InputChannelEmpty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *InputChannelinputChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InputChannelinputChannel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.AccessHash))
	}
	return i, nil
}

func (m *MessageActionEditChannelPhoto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageActionEditChannelPhoto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Id))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.Date != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Date))
	}
	if len(m.Pothosize) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Pothosize)))
		i += copy(dAtA[i:], m.Pothosize)
	}
	return i, nil
}

func (m *MessageActionEditChannelAbout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageActionEditChannelAbout) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.About) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.About)))
		i += copy(dAtA[i:], m.About)
	}
	return i, nil
}

func (m *MessageActionDeleteChannelMessages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageActionDeleteChannelMessages) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *MessageActionDeleteChannelHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageActionDeleteChannelHistory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	return i, nil
}

func (m *MessageActionUpdatePinnedChannelMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageActionUpdatePinnedChannelMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *MessageActionCheckChannelUsername) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageActionCheckChannelUsername) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.UserName)))
		i += copy(dAtA[i:], m.UserName)
	}
	return i, nil
}

func (m *MessageActionUpdateChannelUsername) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageActionUpdateChannelUsername) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.UserName)))
		i += copy(dAtA[i:], m.UserName)
	}
	return i, nil
}

func (m *MessageActionExportChannelInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageActionExportChannelInvite) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *MessageActionDeleteChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageActionDeleteChannel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *MessageActionChannelCreate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageActionChannelCreate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	return i, nil
}

func (m *MessageActionAddChannelUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageActionAddChannelUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserId) > 0 {
		dAtA91 := make([]byte, len(m.UserId)*10)
		var j90 int
		for _, num1 := range m.UserId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA91[j90] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j90++
			}
			dAtA91[j90] = uint8(num)
			j90++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(j90))
		i += copy(dAtA[i:], dAtA91[:j90])
	}
	return i, nil
}

func (m *MessageActionDeleteChannelUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageActionDeleteChannelUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *MessageActionUserLeaveChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageActionUserLeaveChannel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *MessageActionEditChannelTitle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageActionEditChannelTitle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	return i, nil
}

func (m *UserStatusOnline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserStatusOnline) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Expires != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Expires))
	}
	return i, nil
}

func (m *UserStatusOffline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserStatusOffline) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WasOnline != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.WasOnline))
	}
	return i, nil
}

func (m *UserStatusLastMonth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserStatusLastMonth) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LastMonth != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.LastMonth))
	}
	return i, nil
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Type))
	}
	if m.Online != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Online.Size()))
		n92, err := m.Online.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n92
	}
	if m.Offline != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Offline.Size()))
		n93, err := m.Offline.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n93
	}
	if m.LastMonth != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.LastMonth.Size()))
		n94, err := m.LastMonth.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n94
	}
	return i, nil
}

func (m *UserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Flags != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Flags))
	}
	if m.Self {
		dAtA[i] = 0x10
		i++
		if m.Self {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Contact {
		dAtA[i] = 0x18
		i++
		if m.Contact {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MutualContact {
		dAtA[i] = 0x20
		i++
		if m.MutualContact {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Deleted {
		dAtA[i] = 0x28
		i++
		if m.Deleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Bot {
		dAtA[i] = 0x30
		i++
		if m.Bot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BotChatHistory {
		dAtA[i] = 0x38
		i++
		if m.BotChatHistory {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BotNoChats {
		dAtA[i] = 0x40
		i++
		if m.BotNoChats {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Verified {
		dAtA[i] = 0x48
		i++
		if m.Verified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Restricted {
		dAtA[i] = 0x50
		i++
		if m.Restricted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Min {
		dAtA[i] = 0x58
		i++
		if m.Min {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BotInlineGeo {
		dAtA[i] = 0x60
		i++
		if m.BotInlineGeo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Id != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Id))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.AccessHash))
	}
	if len(m.Firstname) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Firstname)))
		i += copy(dAtA[i:], m.Firstname)
	}
	if len(m.Lastname) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Lastname)))
		i += copy(dAtA[i:], m.Lastname)
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.Status != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Status.Size()))
		n95, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n95
	}
	if m.BotInfoVersion {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		if m.BotInfoVersion {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RestrictionReason {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		if m.RestrictionReason {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BotInlinePlaceholder {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		if m.BotInlinePlaceholder {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Channel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Channel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Flags != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Flags))
	}
	if m.Creator {
		dAtA[i] = 0x10
		i++
		if m.Creator {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Kicked {
		dAtA[i] = 0x18
		i++
		if m.Kicked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Left {
		dAtA[i] = 0x20
		i++
		if m.Left {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Editor {
		dAtA[i] = 0x28
		i++
		if m.Editor {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Moderator {
		dAtA[i] = 0x30
		i++
		if m.Moderator {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Broadcast {
		dAtA[i] = 0x38
		i++
		if m.Broadcast {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Verified {
		dAtA[i] = 0x40
		i++
		if m.Verified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Megagroup {
		dAtA[i] = 0x48
		i++
		if m.Megagroup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Restricted {
		dAtA[i] = 0x50
		i++
		if m.Restricted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Democracy {
		dAtA[i] = 0x58
		i++
		if m.Democracy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Signatures {
		dAtA[i] = 0x60
		i++
		if m.Signatures {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Min {
		dAtA[i] = 0x68
		i++
		if m.Min {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Id != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Id))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.AccessHash))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if m.Photo != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Photo))
	}
	if m.Date != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Date))
	}
	if m.Version != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Version))
	}
	if m.RestrictionReason {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		if m.RestrictionReason {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *UpdateNewChannelMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateNewChannelMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Flags != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Flags))
	}
	if m.Out {
		dAtA[i] = 0x10
		i++
		if m.Out {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Mentioned {
		dAtA[i] = 0x18
		i++
		if m.Mentioned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MediaUnread {
		dAtA[i] = 0x20
		i++
		if m.MediaUnread {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Silent {
		dAtA[i] = 0x28
		i++
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Post {
		dAtA[i] = 0x30
		i++
		if m.Post {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Id != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Id))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromId))
	}
	if m.ToId != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ToId))
	}
	if m.ReplyToMsgId {
		dAtA[i] = 0x50
		i++
		if m.ReplyToMsgId {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Date != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Date))
	}
	if len(m.Action) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Action)))
		i += copy(dAtA[i:], m.Action)
	}
	if m.Pts != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Pts))
	}
	if m.PtsCount != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.PtsCount))
	}
	return i, nil
}

func (m *RequestChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestChannel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.About) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.About)))
		i += copy(dAtA[i:], m.About)
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromKeyid))
	}
	if m.BroadCast {
		dAtA[i] = 0x30
		i++
		if m.BroadCast {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Megagroup {
		dAtA[i] = 0x38
		i++
		if m.Megagroup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ReplyMsgId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ReplyMsgId))
	}
	if m.BanAddContact {
		dAtA[i] = 0x48
		i++
		if m.BanAddContact {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Debug != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n96, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n96
	}
	return i, nil
}

func (m *ReplyChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyChannel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Reply) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Reply)))
		i += copy(dAtA[i:], m.Reply)
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *RequestChannelInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestChannelInvite) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.PeerId) > 0 {
		dAtA98 := make([]byte, len(m.PeerId)*10)
		var j97 int
		for _, num1 := range m.PeerId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA98[j97] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j97++
			}
			dAtA98[j97] = uint8(num)
			j97++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(j97))
		i += copy(dAtA[i:], dAtA98[:j97])
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromKeyid))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n99, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n99
	}
	return i, nil
}

func (m *ReplyChannelInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyChannelInvite) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Reply) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Reply)))
		i += copy(dAtA[i:], m.Reply)
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqJoinChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqJoinChannel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.UserId))
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromKeyid))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.ByLink {
		dAtA[i] = 0x38
		i++
		if m.ByLink {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Invitor != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Invitor))
	}
	if m.InviteType != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.InviteType))
	}
	if m.Debug != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n100, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n100
	}
	return i, nil
}

func (m *ReplyJoinChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyJoinChannel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Reply) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Reply)))
		i += copy(dAtA[i:], m.Reply)
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqChannelKick) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChannelKick) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.Kicker != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Kicker))
	}
	if m.Kickee != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Kickee))
	}
	if m.IsBotUser {
		dAtA[i] = 0x20
		i++
		if m.IsBotUser {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsKicked {
		dAtA[i] = 0x28
		i++
		if m.IsKicked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.KickedId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.KickedId))
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n101, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n101
	}
	return i, nil
}

func (m *ReplyChannelKick) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyChannelKick) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Reply) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Reply)))
		i += copy(dAtA[i:], m.Reply)
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqLeaveChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqLeaveChannel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.UserId))
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n102, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n102
	}
	return i, nil
}

func (m *ReplyLeaveChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyLeaveChannel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Reply) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Reply)))
		i += copy(dAtA[i:], m.Reply)
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqEditChannelTitle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqEditChannelTitle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.UserId))
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n103, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n103
	}
	return i, nil
}

func (m *ReplyEditChannelTitle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyEditChannelTitle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Reply) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Reply)))
		i += copy(dAtA[i:], m.Reply)
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqEditChannelAdmin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqEditChannelAdmin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.UserId))
	}
	if m.FromKeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromKeyId))
	}
	if len(m.Role) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Role)))
		i += copy(dAtA[i:], m.Role)
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.KeyId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.AccessHash))
	}
	if len(m.Rank) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Rank)))
		i += copy(dAtA[i:], m.Rank)
	}
	if m.Debug != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n104, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n104
	}
	return i, nil
}

func (m *ReplyEditChannelAdmin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyEditChannelAdmin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Reply) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Reply)))
		i += copy(dAtA[i:], m.Reply)
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqEditChannelPhoto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqEditChannelPhoto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n105, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n105
	}
	return i, nil
}

func (m *ReplyEditChannelPhoto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyEditChannelPhoto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Reply) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Reply)))
		i += copy(dAtA[i:], m.Reply)
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ChatInviteExported) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatInviteExported) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Link) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n106, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n106
	}
	return i, nil
}

func (m *ReqEditChannelAbout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqEditChannelAbout) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromKeyId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.About) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.About)))
		i += copy(dAtA[i:], m.About)
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n107, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n107
	}
	return i, nil
}

func (m *ReplyEditChannelAbout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyEditChannelAbout) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Succeed {
		dAtA[i] = 0x8
		i++
		if m.Succeed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqDeleteChannelMessages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDeleteChannelMessages) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.Id) > 0 {
		dAtA109 := make([]byte, len(m.Id)*10)
		var j108 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA109[j108] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j108++
			}
			dAtA109[j108] = uint8(num)
			j108++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(j108))
		i += copy(dAtA[i:], dAtA109[:j108])
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromKeyid))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n110, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n110
	}
	return i, nil
}

func (m *ReplyDeleteChannelMessages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyDeleteChannelMessages) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Msgid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Msgid))
	}
	if m.Date != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Date))
	}
	if m.Pts != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Pts))
	}
	if m.MaxId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.MaxId))
	}
	if m.PtsCount != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.PtsCount))
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqDeleteChannelSelfHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDeleteChannelSelfHistory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n111, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n111
	}
	return i, nil
}

func (m *ReqDeleteChannelHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDeleteChannelHistory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.UsreId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.UsreId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n112, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n112
	}
	return i, nil
}

func (m *ReplyDeleteChannelHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyDeleteChannelHistory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqUpdatePinnedChannelMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdatePinnedChannelMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromId))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Flags))
	}
	if m.Silent {
		dAtA[i] = 0x18
		i++
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.Id != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Id))
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n113, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n113
	}
	return i, nil
}

func (m *ReplyUpdatePinnedChannelMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyUpdatePinnedChannelMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Reply) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Reply)))
		i += copy(dAtA[i:], m.Reply)
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqDeleteChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDeleteChannel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromKeyId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n114, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n114
	}
	return i, nil
}

func (m *ReplyDeleteChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyDeleteChannel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Send {
		dAtA[i] = 0x8
		i++
		if m.Send {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Reply) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Reply)))
		i += copy(dAtA[i:], m.Reply)
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqReadChannelHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqReadChannelHistory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fromid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Fromid))
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromKeyid))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.TopMsgId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.TopMsgId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n115, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n115
	}
	return i, nil
}

func (m *ReplyReadChannelHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyReadChannelHistory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsOk {
		dAtA[i] = 0x8
		i++
		if m.IsOk {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqUpdateChannelReadOut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateChannelReadOut) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.MaxId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.MaxId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n116, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n116
	}
	return i, nil
}

func (m *ReplyUpdateChannelReadOut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyUpdateChannelReadOut) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Maxid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Maxid))
	}
	if m.Pts != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Pts))
	}
	return i, nil
}

func (m *ReqGetchannelDifference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetchannelDifference) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromKeyId))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Flags))
	}
	if m.Force {
		dAtA[i] = 0x20
		i++
		if m.Force {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.Pts != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Pts))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Limit))
	}
	if m.Range_MinId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Range_MinId))
	}
	if m.Range_MaxId != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Range_MaxId))
	}
	if m.Device != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Device))
	}
	if m.Debug != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n117, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n117
	}
	return i, nil
}

func (m *ReplyChannelDiffCommon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyChannelDiffCommon) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Difference) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Difference)))
		i += copy(dAtA[i:], m.Difference)
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReplyGetChannelDifferenceEmpty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetChannelDifferenceEmpty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Flags != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Flags))
	}
	if m.Final {
		dAtA[i] = 0x10
		i++
		if m.Final {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Pts != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Pts))
	}
	if m.Timeout != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Timeout))
	}
	return i, nil
}

func (m *ReplyGetChannelDifference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetChannelDifference) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Flags != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Flags))
	}
	if m.Final {
		dAtA[i] = 0x10
		i++
		if m.Final {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Pts != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Pts))
	}
	if m.Timeout != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Timeout))
	}
	if len(m.Msgs) > 0 {
		for _, b := range m.Msgs {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintPbmessageserver(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReplyGetChannelDifferenceTooLong) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetChannelDifferenceTooLong) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Flags != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Flags))
	}
	if m.Final {
		dAtA[i] = 0x10
		i++
		if m.Final {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Pts != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Pts))
	}
	if m.Timeout != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Timeout))
	}
	if m.TopMessage != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.TopMessage))
	}
	if m.ReadInboxMaxId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ReadInboxMaxId))
	}
	if m.ReadOutboxMaxId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ReadOutboxMaxId))
	}
	if m.UnreadCount != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.UnreadCount))
	}
	if len(m.Msgs) > 0 {
		for _, b := range m.Msgs {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintPbmessageserver(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqGetChannelMsgHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelMsgHistory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.OffsetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.OffsetId))
	}
	if m.OffsetDate != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.OffsetDate))
	}
	if m.AddOffset != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.AddOffset))
	}
	if m.MinId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.MinId))
	}
	if m.MaxId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.MaxId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Limit))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.KeyId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n118, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n118
	}
	return i, nil
}

func (m *ReplyChannelMsgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyChannelMsgs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqParticipants) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqParticipants) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OffSet != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.OffSet))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Limit))
	}
	if m.PartiType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.PartiType))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromId))
	}
	if len(m.Q) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Q)))
		i += copy(dAtA[i:], m.Q)
	}
	if m.Hash != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Hash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n119, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n119
	}
	return i, nil
}

func (m *ReplyParticipants) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyParticipants) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Updates) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Updates)))
		i += copy(dAtA[i:], m.Updates)
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqParticipant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqParticipant) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Channelid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Channelid))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n120, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n120
	}
	return i, nil
}

func (m *ReplyParticipant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyParticipant) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Updates) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Updates)))
		i += copy(dAtA[i:], m.Updates)
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqGetChannelMsgsByMsgsId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelMsgsByMsgsId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.MsgsId) > 0 {
		dAtA122 := make([]byte, len(m.MsgsId)*10)
		var j121 int
		for _, num1 := range m.MsgsId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA122[j121] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j121++
			}
			dAtA122[j121] = uint8(num)
			j121++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(j121))
		i += copy(dAtA[i:], dAtA122[:j121])
	}
	if m.FromId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n123, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n123
	}
	return i, nil
}

func (m *ReqGetChannelCommonDialogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelCommonDialogs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromId))
	}
	if len(m.ChannIds) > 0 {
		dAtA125 := make([]byte, len(m.ChannIds)*10)
		var j124 int
		for _, num1 := range m.ChannIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA125[j124] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j124++
			}
			dAtA125[j124] = uint8(num)
			j124++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(j124))
		i += copy(dAtA[i:], dAtA125[:j124])
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n126, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n126
	}
	return i, nil
}

func (m *ChannelDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelDialog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.TopMessage != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.TopMessage))
	}
	if m.MaxReadInId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.MaxReadInId))
	}
	if m.Encry != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Encry))
	}
	return i, nil
}

func (m *ChannelDialogAndMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelDialogAndMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelDialog != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChannelDialog.Size()))
		n127, err := m.ChannelDialog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n127
	}
	if m.ChannelMsg != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChannelMsg.Size()))
		n128, err := m.ChannelMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n128
	}
	return i, nil
}

func (m *ChannelDialogAndMsgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelDialogAndMsgs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChannelDialogAndMsg) > 0 {
		for _, msg := range m.ChannelDialogAndMsg {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPbmessageserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UserMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Id))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.WithId))
	}
	if m.WithIdType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.WithIdType))
	}
	if m.MessageType != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.MessageType))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Flags))
	}
	if m.Out {
		dAtA[i] = 0x38
		i++
		if m.Out {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Mentioned {
		dAtA[i] = 0x40
		i++
		if m.Mentioned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MediaUnread {
		dAtA[i] = 0x48
		i++
		if m.MediaUnread {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Silent {
		dAtA[i] = 0x50
		i++
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Post {
		dAtA[i] = 0x58
		i++
		if m.Post {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.MsgId))
	}
	if m.ToId != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ToId))
	}
	if m.Pts != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Pts))
	}
	if len(m.FwdFrom) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.FwdFrom)))
		i += copy(dAtA[i:], m.FwdFrom)
	}
	if m.ViaBotId != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ViaBotId))
	}
	if m.ReplyToMsgId != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ReplyToMsgId))
	}
	if m.Date != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Date))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Media != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Media))
	}
	if len(m.MediaData) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.MediaData)))
		i += copy(dAtA[i:], m.MediaData)
	}
	if len(m.ReplyMarkup) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.ReplyMarkup)))
		i += copy(dAtA[i:], m.ReplyMarkup)
	}
	if len(m.Entities) > 0 {
		for _, b := range m.Entities {
			dAtA[i] = 0xba
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintPbmessageserver(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.FromId != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromId))
	}
	if m.Views != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Views))
	}
	if m.EditDate != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.EditDate))
	}
	if len(m.Action) > 0 {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Action)))
		i += copy(dAtA[i:], m.Action)
	}
	if m.RandomId != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.RandomId))
	}
	if m.Uuid != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Uuid))
	}
	if m.InsertDate != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.InsertDate))
	}
	if m.UpdateDate != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.UpdateDate))
	}
	if m.Encry != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Encry))
	}
	return i, nil
}

func (m *RequestWebPMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestWebPMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.KeyIdNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.KeyIdNum))
	}
	if m.DcId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.DcId))
	}
	return i, nil
}

func (m *ReplyRequestWebPagePreview) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyRequestWebPagePreview) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.WebPage) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.WebPage)))
		i += copy(dAtA[i:], m.WebPage)
	}
	return i, nil
}

func (m *Reqpushusermsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Reqpushusermsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PushUserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.PushUserId))
	}
	if m.Fromid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Fromid))
	}
	if len(m.PushType) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.PushType)))
		i += copy(dAtA[i:], m.PushType)
	}
	if m.Toid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Toid))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.MediaType) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.MediaType)))
		i += copy(dAtA[i:], m.MediaType)
	}
	if m.Msgid != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Msgid))
	}
	return i, nil
}

func (m *ReplyPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyPush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Reply {
		dAtA[i] = 0x8
		i++
		if m.Reply {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ReqMessageSearch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqMessageSearch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.SelfId))
	}
	if len(m.Peer) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Peer)))
		i += copy(dAtA[i:], m.Peer)
	}
	if len(m.Q) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Q)))
		i += copy(dAtA[i:], m.Q)
	}
	if m.FromId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromId))
	}
	if len(m.Filter) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Filter)))
		i += copy(dAtA[i:], m.Filter)
	}
	if m.MinDate != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.MinDate))
	}
	if m.MaxDate != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.MaxDate))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Offset))
	}
	if m.MaxId != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.MaxId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Limit))
	}
	if m.Debug != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n129, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n129
	}
	return i, nil
}

func (m *ReplyMessageSearch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyMessageSearch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Retype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Retype))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Count))
	}
	if len(m.Message) > 0 {
		for _, msg := range m.Message {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintPbmessageserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ReqCheckChatInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCheckChatInvite) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromKeyId))
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n130, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n130
	}
	return i, nil
}

func (m *ReqGetChannelsLastMsgsByUserId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelsLastMsgsByUserId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.UserId))
	}
	if m.Date != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Date))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n131, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n131
	}
	return i, nil
}

func (m *ReplyGetChannelsLastMsgsByUserId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetChannelsLastMsgsByUserId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserMsgs) > 0 {
		for _, msg := range m.UserMsgs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPbmessageserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqChannelAdminLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChannelAdminLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromKeyId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.AccessHash))
	}
	if len(m.Q) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Q)))
		i += copy(dAtA[i:], m.Q)
	}
	if m.EventFilter != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.EventFilter.Size()))
		n132, err := m.EventFilter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n132
	}
	if len(m.Admins) > 0 {
		dAtA134 := make([]byte, len(m.Admins)*10)
		var j133 int
		for _, num1 := range m.Admins {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA134[j133] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j133++
			}
			dAtA134[j133] = uint8(num)
			j133++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(j133))
		i += copy(dAtA[i:], dAtA134[:j133])
	}
	if m.MaxId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.MaxId))
	}
	if m.MinId != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.MinId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Limit))
	}
	if m.Debug != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n135, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n135
	}
	return i, nil
}

func (m *ChannelAdminLogEventFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelAdminLogEventFilter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Flags != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Flags))
	}
	if m.Join {
		dAtA[i] = 0x10
		i++
		if m.Join {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Leave {
		dAtA[i] = 0x18
		i++
		if m.Leave {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Invite {
		dAtA[i] = 0x20
		i++
		if m.Invite {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Ban {
		dAtA[i] = 0x28
		i++
		if m.Ban {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Unban {
		dAtA[i] = 0x30
		i++
		if m.Unban {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Kick {
		dAtA[i] = 0x38
		i++
		if m.Kick {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Unkick {
		dAtA[i] = 0x40
		i++
		if m.Unkick {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Promote {
		dAtA[i] = 0x48
		i++
		if m.Promote {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Demote {
		dAtA[i] = 0x50
		i++
		if m.Demote {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Info {
		dAtA[i] = 0x58
		i++
		if m.Info {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Setting {
		dAtA[i] = 0x60
		i++
		if m.Setting {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Pinned {
		dAtA[i] = 0x68
		i++
		if m.Pinned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Edit {
		dAtA[i] = 0x70
		i++
		if m.Edit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Delete {
		dAtA[i] = 0x78
		i++
		if m.Delete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ReplyChannelAdminLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyChannelAdminLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AdminLogResults) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.AdminLogResults)))
		i += copy(dAtA[i:], m.AdminLogResults)
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqImportChatInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqImportChatInvite) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromKeyId))
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n136, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n136
	}
	return i, nil
}

func (m *ReplyImportChatInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyImportChatInvite) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Updates) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Updates)))
		i += copy(dAtA[i:], m.Updates)
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqBanChannelUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqBanChannelUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromKeyId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.BannedUserId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.BannedUserId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.UtilDate != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.UtilDate))
	}
	if m.ChannelBannedRights != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChannelBannedRights.Size()))
		n137, err := m.ChannelBannedRights.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n137
	}
	if m.Debug != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n138, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n138
	}
	return i, nil
}

func (m *ReplyBanChannelUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyBanChannelUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Updates) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Updates)))
		i += copy(dAtA[i:], m.Updates)
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ChannelBannedRights) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelBannedRights) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Flags != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Flags))
	}
	if m.ViewMessages {
		dAtA[i] = 0x10
		i++
		if m.ViewMessages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SendMessages {
		dAtA[i] = 0x18
		i++
		if m.SendMessages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SendMedia {
		dAtA[i] = 0x20
		i++
		if m.SendMedia {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SendStickers {
		dAtA[i] = 0x28
		i++
		if m.SendStickers {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SendGifs {
		dAtA[i] = 0x30
		i++
		if m.SendGifs {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SendGames {
		dAtA[i] = 0x38
		i++
		if m.SendGames {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SendInline {
		dAtA[i] = 0x40
		i++
		if m.SendInline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.EmbedLinks {
		dAtA[i] = 0x48
		i++
		if m.EmbedLinks {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.UntilDate != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.UntilDate))
	}
	if m.InviteUser {
		dAtA[i] = 0x58
		i++
		if m.InviteUser {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PinMessage {
		dAtA[i] = 0x60
		i++
		if m.PinMessage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ChangeGroupInfo {
		dAtA[i] = 0x68
		i++
		if m.ChangeGroupInfo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SendPolls {
		dAtA[i] = 0x70
		i++
		if m.SendPolls {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ReqFullchannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqFullchannel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n139, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n139
	}
	return i, nil
}

func (m *ReqExportChannelLink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqExportChannelLink) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n140, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n140
	}
	return i, nil
}

func (m *ReplyExportChannelLink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyExportChannelLink) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Exported) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Exported)))
		i += copy(dAtA[i:], m.Exported)
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqChannelToggleInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChannelToggleInvite) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.UserId))
	}
	if m.Enabled {
		dAtA[i] = 0x18
		i++
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n141, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n141
	}
	return i, nil
}

func (m *ReplyChannelToggleInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyChannelToggleInvite) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Reply) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Reply)))
		i += copy(dAtA[i:], m.Reply)
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqChannelUpdateUserName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChannelUpdateUserName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromId))
	}
	if len(m.UserName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.UserName)))
		i += copy(dAtA[i:], m.UserName)
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n142, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n142
	}
	return i, nil
}

func (m *ReplyChannelUpdateUserName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyChannelUpdateUserName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Updated {
		dAtA[i] = 0x8
		i++
		if m.Updated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqChannelCheckUserName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChannelCheckUserName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromId))
	}
	if len(m.UserName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.UserName)))
		i += copy(dAtA[i:], m.UserName)
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n143, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n143
	}
	return i, nil
}

func (m *ReplyChannelCheckUserName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyChannelCheckUserName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Valid {
		dAtA[i] = 0x8
		i++
		if m.Valid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqChangeGroupAndChannelCrator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChangeGroupAndChannelCrator) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.GroupId))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromId))
	}
	if m.OperatorId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.OperatorId))
	}
	if m.IsChat {
		dAtA[i] = 0x20
		i++
		if m.IsChat {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ReplyChangeGroupAndChannelCrator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyChangeGroupAndChannelCrator) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Valid {
		dAtA[i] = 0x8
		i++
		if m.Valid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqGetChannels) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannels) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChannelIds) > 0 {
		dAtA145 := make([]byte, len(m.ChannelIds)*10)
		var j144 int
		for _, num1 := range m.ChannelIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA145[j144] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j144++
			}
			dAtA145[j144] = uint8(num)
			j144++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(j144))
		i += copy(dAtA[i:], dAtA145[:j144])
	}
	if m.FromId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n146, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n146
	}
	return i, nil
}

func (m *ReplyGetChannels) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetChannels) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Reply) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Reply)))
		i += copy(dAtA[i:], m.Reply)
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReplyFullChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyFullChannel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Updates) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Updates)))
		i += copy(dAtA[i:], m.Updates)
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqGetMessageByUserIdMsgId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetMessageByUserIdMsgId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.UserId))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.MsgId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n147, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n147
	}
	return i, nil
}

func (m *ReplyGetMessageByUserIdMsgId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetMessageByUserIdMsgId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserMessage != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.UserMessage.Size()))
		n148, err := m.UserMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n148
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqGetMessageByUserIdUuid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetMessageByUserIdUuid) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.UserId))
	}
	if m.Uuid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Uuid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n149, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n149
	}
	return i, nil
}

func (m *ReplyGetMessageByUserIdUuid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetMessageByUserIdUuid) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserMessage != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.UserMessage.Size()))
		n150, err := m.UserMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n150
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqGetChannelMessageByChannelIdMsgId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelMessageByChannelIdMsgId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.MsgId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n151, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n151
	}
	return i, nil
}

func (m *ReplyGetChannelMessageByChannelIdMsgId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetChannelMessageByChannelIdMsgId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserMessage != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.UserMessage.Size()))
		n152, err := m.UserMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n152
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReplyStoreOtherInfoMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyStoreOtherInfoMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReplyBatchStoreOtherInfoMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyBatchStoreOtherInfoMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReplyGetOtherInfoMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetOtherInfoMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OtherInfoMsgs) > 0 {
		for _, msg := range m.OtherInfoMsgs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPbmessageserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqGetUsersChatsMt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetUsersChatsMt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfUserid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.SelfUserid))
	}
	if len(m.UseridArr) > 0 {
		dAtA154 := make([]byte, len(m.UseridArr)*10)
		var j153 int
		for _, num1 := range m.UseridArr {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA154[j153] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j153++
			}
			dAtA154[j153] = uint8(num)
			j153++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(j153))
		i += copy(dAtA[i:], dAtA154[:j153])
	}
	if len(m.ChatidArr) > 0 {
		dAtA156 := make([]byte, len(m.ChatidArr)*10)
		var j155 int
		for _, num1 := range m.ChatidArr {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA156[j155] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j155++
			}
			dAtA156[j155] = uint8(num)
			j155++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(j155))
		i += copy(dAtA[i:], dAtA156[:j155])
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n157, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n157
	}
	return i, nil
}

func (m *ReplyGetUsersChatsMt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetUsersChatsMt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Users)))
		i += copy(dAtA[i:], m.Users)
	}
	if len(m.Chats) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Chats)))
		i += copy(dAtA[i:], m.Chats)
	}
	if m.ReplyCode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ReplyCode))
	}
	return i, nil
}

func (m *ReqGifQueryAndUpload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGifQueryAndUpload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GifId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.GifId)))
		i += copy(dAtA[i:], m.GifId)
	}
	return i, nil
}

func (m *ReplyGifQueryAndUpload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGifQueryAndUpload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error {
		dAtA[i] = 0x8
		i++
		if m.Error {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Data.Size()))
		n158, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n158
	}
	return i, nil
}

func (m *FidData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FidData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Fid))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.FileSize != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FileSize))
	}
	if m.Result != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func (m *ReqGifSearchApi) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGifSearchApi) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Q) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Q)))
		i += copy(dAtA[i:], m.Q)
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Limit))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Offset))
	}
	return i, nil
}

func (m *ReplyGifSearchApi) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGifSearchApi) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error {
		dAtA[i] = 0x8
		i++
		if m.Error {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintPbmessageserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Page != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Page.Size()))
		n159, err := m.Page.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n159
	}
	return i, nil
}

func (m *SearchData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if len(m.ThumbUrl) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.ThumbUrl)))
		i += copy(dAtA[i:], m.ThumbUrl)
	}
	if len(m.ContentUrl) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.ContentUrl)))
		i += copy(dAtA[i:], m.ContentUrl)
	}
	if len(m.ContentType) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.ContentType)))
		i += copy(dAtA[i:], m.ContentType)
	}
	if m.Width != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Width))
	}
	if m.Height != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Height))
	}
	return i, nil
}

func (m *Pagination) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pagination) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TotalCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.TotalCount))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Count))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Offset))
	}
	return i, nil
}

func (m *ReqReceiveRedPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqReceiveRedPacket) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromKeyid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromKeyid))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.UserId))
	}
	if m.PeerId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.PeerId))
	}
	if m.PeerType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.PeerType))
	}
	if m.PeerAccessHash != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.PeerAccessHash))
	}
	if m.RedPacketId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.RedPacketId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n160, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n160
	}
	return i, nil
}

func (m *ReplyReceiveRedPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyReceiveRedPacket) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqGetWebPage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetWebPage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	return i, nil
}

func (m *ReplyGetWebPage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetWebPage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error {
		dAtA[i] = 0x8
		i++
		if m.Error {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.WebPage != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.WebPage.Size()))
		n161, err := m.WebPage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n161
	}
	return i, nil
}

func (m *WebPage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebPage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Id))
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if len(m.DisplayUrl) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.DisplayUrl)))
		i += copy(dAtA[i:], m.DisplayUrl)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.SiteName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.SiteName)))
		i += copy(dAtA[i:], m.SiteName)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if len(m.EmbedUrl) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.EmbedUrl)))
		i += copy(dAtA[i:], m.EmbedUrl)
	}
	if len(m.EmbedType) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.EmbedType)))
		i += copy(dAtA[i:], m.EmbedType)
	}
	if m.EmbedWidth != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.EmbedWidth))
	}
	if m.EmbedHeight != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.EmbedHeight))
	}
	if len(m.Author) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Author)))
		i += copy(dAtA[i:], m.Author)
	}
	return i, nil
}

func (m *ReqGetWebPagePreview) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetWebPagePreview) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	return i, nil
}

func (m *ReplyGetWebPagePreview) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetWebPagePreview) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error {
		dAtA[i] = 0x8
		i++
		if m.Error {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.WebPage != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.WebPage.Size()))
		n162, err := m.WebPage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n162
	}
	return i, nil
}

func (m *UserScore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserScore) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Userid))
	}
	if m.Score != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Score))
	}
	return i, nil
}

func (m *FoldersEditPeerFoldersReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FoldersEditPeerFoldersReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Userid))
	}
	if len(m.FolderPeers) > 0 {
		for _, b := range m.FolderPeers {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPbmessageserver(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n163, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n163
	}
	return i, nil
}

func (m *FoldersEditPeerFoldersReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FoldersEditPeerFoldersReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *FoldersDeleteFolderReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FoldersDeleteFolderReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Userid))
	}
	if m.FolderId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FolderId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n164, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n164
	}
	return i, nil
}

func (m *FoldersDeleteFolderReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FoldersDeleteFolderReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *ReqSendPaymentNotifyMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSendPaymentNotifyMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromId))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Media) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(len(m.Media)))
		i += copy(dAtA[i:], m.Media)
	}
	if m.MediaType != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.MediaType))
	}
	if m.Debug != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n165, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n165
	}
	return i, nil
}

func (m *RspSendPaymentNotifyMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RspSendPaymentNotifyMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Successful {
		dAtA[i] = 0x8
		i++
		if m.Successful {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ReqSendAddMutulContactNotify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSendAddMutulContactNotify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.UserId))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.FromId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n166, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n166
	}
	return i, nil
}

func (m *RespSendAddMutulContactNotify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespSendAddMutulContactNotify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sucessful {
		dAtA[i] = 0x8
		i++
		if m.Sucessful {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ReqSendAddSingleContactNotify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSendAddSingleContactNotify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.UserId))
	}
	if m.ToId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.ToId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbmessageserver(dAtA, i, uint64(m.Debug.Size()))
		n167, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n167
	}
	return i, nil
}

func (m *RespSendAddSingleContactNotify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespSendAddSingleContactNotify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Successful {
		dAtA[i] = 0x8
		i++
		if m.Successful {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintPbmessageserver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ReqSendMediaSysNotify) Size() (n int) {
	var l int
	_ = l
	l = len(m.MsgId)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.FromId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromId))
	}
	if m.SourceCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.SourceCode))
	}
	l = len(m.Request)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Layer != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Layer))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *FailUser) Size() (n int) {
	var l int
	_ = l
	if m.User != 0 {
		n += 1 + sovPbmessageserver(uint64(m.User))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *SucceedUser) Size() (n int) {
	var l int
	_ = l
	if m.User != 0 {
		n += 1 + sovPbmessageserver(uint64(m.User))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *CallBackRespSendMediaSysNotify) Size() (n int) {
	var l int
	_ = l
	if len(m.FailUsers) > 0 {
		for _, e := range m.FailUsers {
			l = e.Size()
			n += 1 + l + sovPbmessageserver(uint64(l))
		}
	}
	if len(m.SucceedUsers) > 0 {
		for _, e := range m.SucceedUsers {
			l = e.Size()
			n += 1 + l + sovPbmessageserver(uint64(l))
		}
	}
	return n
}

func (m *RespSendMediaSysNotify) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReqEditMessageMedia) Size() (n int) {
	var l int
	_ = l
	if m.FormId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FormId))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromKeyid))
	}
	l = len(m.Peer)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Id))
	}
	l = len(m.Media)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *RespEditMessageMedia) Size() (n int) {
	var l int
	_ = l
	l = len(m.UpdateEditMessage)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Error))
	}
	return n
}

func (m *InlineCall) Size() (n int) {
	var l int
	_ = l
	if m.MsgId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.MsgId))
	}
	if m.FromId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromId))
	}
	if m.ChatId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChatId))
	}
	if m.ChatType != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChatType))
	}
	if m.BotId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.BotId))
	}
	return n
}

func (m *ChannelInactiveUser) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Time))
	}
	l = len(m.TimeStr)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *GetChannelInactiveUsersReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChannelId))
	}
	if m.Limit != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Limit))
	}
	if m.Userid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Userid))
	}
	return n
}

func (m *GetChannelInactiveUsersResult) Size() (n int) {
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovPbmessageserver(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Count))
	}
	return n
}

func (m *GetSecurityRandomIdsReq) Size() (n int) {
	var l int
	_ = l
	if m.KeyId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.KeyId))
	}
	if m.MaxQts != 0 {
		n += 1 + sovPbmessageserver(uint64(m.MaxQts))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *GetSecurityRandomIdsResult) Size() (n int) {
	var l int
	_ = l
	if m.Errcode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Errcode))
	}
	if len(m.RandomIds) > 0 {
		l = 0
		for _, e := range m.RandomIds {
			l += sovPbmessageserver(uint64(e))
		}
		n += 1 + sovPbmessageserver(uint64(l)) + l
	}
	return n
}

func (m *LogoutDisCardAllSecurityReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.UserId))
	}
	if m.KeyId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.KeyId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *LogoutDisCardAllSecurityResult) Size() (n int) {
	var l int
	_ = l
	if m.Errcode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Errcode))
	}
	return n
}

func (m *SetEncryptedTypingReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.UserId))
	}
	if m.KeyId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.KeyId))
	}
	if m.ChatId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChatId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbmessageserver(uint64(m.AccessHash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *SetEncryptedTypingResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReadEncryptedHistoryReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.UserId))
	}
	if m.KeyId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.KeyId))
	}
	if m.ChatId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChatId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbmessageserver(uint64(m.AccessHash))
	}
	if m.MaxDate != 0 {
		n += 1 + sovPbmessageserver(uint64(m.MaxDate))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReadEncryptedHistoryResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *DiscardEncryptionReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.UserId))
	}
	if m.KeyId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.KeyId))
	}
	if m.ChatId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChatId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *DiscardEncryptionResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *SendEncryptedServiceReq) Size() (n int) {
	var l int
	_ = l
	if m.SendId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.SendId))
	}
	if m.KeyId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.KeyId))
	}
	if m.ChatId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChatId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbmessageserver(uint64(m.AccessHash))
	}
	if m.RandomId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.RandomId))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *SendEncryptedServiceResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *SendEncryptedFileReq) Size() (n int) {
	var l int
	_ = l
	if m.SendId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.SendId))
	}
	if m.KeyId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.KeyId))
	}
	if m.ChatId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChatId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbmessageserver(uint64(m.AccessHash))
	}
	if m.RandomId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.RandomId))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	l = len(m.File)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *SendEncryptedFileResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *SendEncryptedReq) Size() (n int) {
	var l int
	_ = l
	if m.SendId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.SendId))
	}
	if m.KeyId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.KeyId))
	}
	if m.ChatId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChatId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbmessageserver(uint64(m.AccessHash))
	}
	if m.RandomId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.RandomId))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *SendEncryptedResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *AcceptEncryptionReq) Size() (n int) {
	var l int
	_ = l
	if m.ParticipartId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ParticipartId))
	}
	if m.ParticipartKeyId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ParticipartKeyId))
	}
	if m.ChatId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChatId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbmessageserver(uint64(m.AccessHash))
	}
	l = len(m.GB)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.KeyFingerprint != 0 {
		n += 1 + sovPbmessageserver(uint64(m.KeyFingerprint))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *AcceptEncryptionResult) Size() (n int) {
	var l int
	_ = l
	if m.AdminId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.AdminId))
	}
	l = len(m.GAOrB)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.KeyFingerPrint2 != 0 {
		n += 1 + sovPbmessageserver(uint64(m.KeyFingerPrint2))
	}
	if m.ChatId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChatId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbmessageserver(uint64(m.AccessHash))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *RequestEncryptionReq) Size() (n int) {
	var l int
	_ = l
	if m.AdminId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.AdminId))
	}
	if m.AdminKeyId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.AdminKeyId))
	}
	if m.ParticipantId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ParticipantId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbmessageserver(uint64(m.AccessHash))
	}
	l = len(m.GA)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *RequestEncryptionResult) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChatId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbmessageserver(uint64(m.AccessHash))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqBotCall) Size() (n int) {
	var l int
	_ = l
	if m.FrombotId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FrombotId))
	}
	l = len(m.Request)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Layer != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Layer))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyBotCall) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Error))
	}
	return n
}

func (m *ReqBotInlineCall) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.UserId))
	}
	if m.BotId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.BotId))
	}
	if m.MessageId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.KeyId))
	}
	if m.SessionId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.SessionId))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyBotInlineCall) Size() (n int) {
	var l int
	_ = l
	if m.ErrCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrCode))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Inlinecall != nil {
		l = m.Inlinecall.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReqSetGameScore) Size() (n int) {
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Userid))
	}
	if len(m.Scores) > 0 {
		for _, e := range m.Scores {
			l = e.Size()
			n += 1 + l + sovPbmessageserver(uint64(l))
		}
	}
	if m.Force {
		n += 2
	}
	if m.DisableEditMessage {
		n += 2
	}
	if m.ChatId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChatId))
	}
	if m.ChatType != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChatType))
	}
	if m.MessageId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.MessageId))
	}
	l = len(m.InlineMessageId)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Botid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Botid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplySetGameScore) Size() (n int) {
	var l int
	_ = l
	if m.Succeed {
		n += 2
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Errorcode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Errorcode))
	}
	return n
}

func (m *ReqRemoveConn) Size() (n int) {
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Userid))
	}
	if m.RequestKey != 0 {
		n += 1 + sovPbmessageserver(uint64(m.RequestKey))
	}
	if m.RemoveType != 0 {
		n += 1 + sovPbmessageserver(uint64(m.RemoveType))
	}
	if m.RemoveKey != 0 {
		n += 1 + sovPbmessageserver(uint64(m.RemoveKey))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyRemoveConn) Size() (n int) {
	var l int
	_ = l
	if m.Error != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Error))
	}
	return n
}

func (m *ReqSignUpMsg) Size() (n int) {
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Userid))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbmessageserver(uint64(m.AccessHash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReqSendCodeMsg) Size() (n int) {
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Userid))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbmessageserver(uint64(m.AccessHash))
	}
	if m.Keyid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Keyid))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReqSignInMsg) Size() (n int) {
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Userid))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbmessageserver(uint64(m.AccessHash))
	}
	if m.Keyid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Keyid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	l = len(m.IP)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReqSendSynMsg) Size() (n int) {
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Userid))
	}
	if m.Keyid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Keyid))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReqSendUserMsg) Size() (n int) {
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Fromid))
	}
	if m.FromKeyId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromKeyId))
	}
	if m.Toid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Toid))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReqSendUserOneClientMsg) Size() (n int) {
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Fromid))
	}
	if m.FromKeyId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromKeyId))
	}
	if m.Toid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Toid))
	}
	if m.Tokeyid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Tokeyid))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReqSendMoreUserMsg) Size() (n int) {
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Fromid))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromKeyid))
	}
	if len(m.Toid) > 0 {
		l = 0
		for _, e := range m.Toid {
			l += sovPbmessageserver(uint64(e))
		}
		n += 1 + sovPbmessageserver(uint64(l)) + l
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReqSendCallMsg) Size() (n int) {
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Fromid))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromKeyid))
	}
	if m.Toid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Toid))
	}
	l = len(m.CallAction)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReqCallPush) Size() (n int) {
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Fromid))
	}
	if m.Toid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Toid))
	}
	if m.Callid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Callid))
	}
	if m.CallAccessHash != 0 {
		n += 1 + sovPbmessageserver(uint64(m.CallAccessHash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyCallPush) Size() (n int) {
	var l int
	_ = l
	if m.Reply {
		n += 2
	}
	if m.Error != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Error))
	}
	return n
}

func (m *ReqGetState) Size() (n int) {
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Userid))
	}
	if m.Keyid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Keyid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyResult) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Error))
	}
	return n
}

func (m *ReplyNull) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ReqGetPts) Size() (n int) {
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Userid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyGetPts) Size() (n int) {
	var l int
	_ = l
	if m.Pts != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Pts))
	}
	if m.Error != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Error))
	}
	return n
}

func (m *RequestDialog) Size() (n int) {
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Userid))
	}
	if m.Flags != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Flags))
	}
	if m.FolderId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FolderId))
	}
	if m.OffsetDate != 0 {
		n += 1 + sovPbmessageserver(uint64(m.OffsetDate))
	}
	if m.OffsetId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.OffsetId))
	}
	l = len(m.OffsetPeer)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Limit))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyDialog) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Error))
	}
	return n
}

func (m *UserIdRating) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.UserId))
	}
	if m.Rating != 0 {
		n += 9
	}
	return n
}

func (m *ReplyGetLastLimitDialog) Size() (n int) {
	var l int
	_ = l
	if len(m.UserRatingList) > 0 {
		for _, e := range m.UserRatingList {
			l = e.Size()
			n += 1 + l + sovPbmessageserver(uint64(l))
		}
	}
	if len(m.ChannelIdlist) > 0 {
		l = 0
		for _, e := range m.ChannelIdlist {
			l += sovPbmessageserver(uint64(e))
		}
		n += 1 + sovPbmessageserver(uint64(l)) + l
	}
	if len(m.ChatIdlist) > 0 {
		l = 0
		for _, e := range m.ChatIdlist {
			l += sovPbmessageserver(uint64(e))
		}
		n += 1 + sovPbmessageserver(uint64(l)) + l
	}
	if m.Error != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Error))
	}
	return n
}

func (m *ReqPinnedDialogs) Size() (n int) {
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Userid))
	}
	if m.FolderId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FolderId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReqPeerDialogs) Size() (n int) {
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Userid))
	}
	if len(m.Peers) > 0 {
		for _, b := range m.Peers {
			l = len(b)
			n += 1 + l + sovPbmessageserver(uint64(l))
		}
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReqRecentLocations) Size() (n int) {
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Userid))
	}
	l = len(m.Peers)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Limit))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReqPinDialog) Size() (n int) {
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Userid))
	}
	if m.Pinned {
		n += 2
	}
	l = len(m.Peer)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReqReorderPinnedDialogs) Size() (n int) {
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Userid))
	}
	if len(m.Peer) > 0 {
		for _, b := range m.Peer {
			l = len(b)
			n += 1 + l + sovPbmessageserver(uint64(l))
		}
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyBool) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	if m.Error != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Error))
	}
	return n
}

func (m *RequestSendMessage) Size() (n int) {
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Fromid))
	}
	if m.NoWebpage {
		n += 2
	}
	if m.Silent {
		n += 2
	}
	if m.Background {
		n += 2
	}
	if m.ClearDraft {
		n += 2
	}
	l = len(m.Peer)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.ReplyToMsgId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ReplyToMsgId))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.RandomId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.RandomId))
	}
	l = len(m.ReplyMarkup)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if len(m.Entities) > 0 {
		for _, b := range m.Entities {
			l = len(b)
			n += 1 + l + sovPbmessageserver(uint64(l))
		}
	}
	if m.FromkeyId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromkeyId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.IncludeChat {
		n += 3
	}
	if m.ViaBotId != 0 {
		n += 2 + sovPbmessageserver(uint64(m.ViaBotId))
	}
	return n
}

func (m *SendVoteReq) Size() (n int) {
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Fromid))
	}
	l = len(m.Peer)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.MsgId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.MsgId))
	}
	if len(m.Options) > 0 {
		for _, s := range m.Options {
			l = len(s)
			n += 1 + l + sovPbmessageserver(uint64(l))
		}
	}
	if m.FromKey != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromKey))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *SendVoteReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.Reply)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Error))
	}
	return n
}

func (m *RequestSySSendMessage) Size() (n int) {
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Fromid))
	}
	if m.NoWebpage {
		n += 2
	}
	if m.Silent {
		n += 2
	}
	if m.Background {
		n += 2
	}
	if m.ClearDraft {
		n += 2
	}
	l = len(m.Peer)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.ReplyToMsgId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ReplyToMsgId))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.RandomId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.RandomId))
	}
	l = len(m.ReplyMarkup)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if len(m.Entities) > 0 {
		for _, b := range m.Entities {
			l = len(b)
			n += 1 + l + sovPbmessageserver(uint64(l))
		}
	}
	if len(m.ChatMember) > 0 {
		l = 0
		for _, e := range m.ChatMember {
			l += sovPbmessageserver(uint64(e))
		}
		n += 1 + sovPbmessageserver(uint64(l)) + l
	}
	if m.FromkeyId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromkeyId))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReqS2SMsg) Size() (n int) {
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Userid))
	}
	if m.WithidType != 0 {
		n += 1 + sovPbmessageserver(uint64(m.WithidType))
	}
	if m.MessageType != 0 {
		n += 1 + sovPbmessageserver(uint64(m.MessageType))
	}
	if m.Flags != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Flags))
	}
	if m.Out {
		n += 2
	}
	if m.Mentioned {
		n += 2
	}
	if m.MediaUnread {
		n += 2
	}
	if m.Silent {
		n += 2
	}
	if m.Post {
		n += 2
	}
	if m.MsgId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.MsgId))
	}
	if m.FromId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromId))
	}
	if m.ToId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ToId))
	}
	if m.Pts != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Pts))
	}
	l = len(m.FwdFrom)
	if l > 0 {
		n += 2 + l + sovPbmessageserver(uint64(l))
	}
	if m.ViaBotId != 0 {
		n += 2 + sovPbmessageserver(uint64(m.ViaBotId))
	}
	if m.ReplyToMsgId != 0 {
		n += 2 + sovPbmessageserver(uint64(m.ReplyToMsgId))
	}
	if m.Date != 0 {
		n += 2 + sovPbmessageserver(uint64(m.Date))
	}
	l = len(m.Message)
	if l > 0 {
		n += 2 + l + sovPbmessageserver(uint64(l))
	}
	if m.Media != 0 {
		n += 2 + sovPbmessageserver(uint64(m.Media))
	}
	l = len(m.Meidadata)
	if l > 0 {
		n += 2 + l + sovPbmessageserver(uint64(l))
	}
	l = len(m.ReplyMarkup)
	if l > 0 {
		n += 2 + l + sovPbmessageserver(uint64(l))
	}
	if len(m.Entities) > 0 {
		for _, b := range m.Entities {
			l = len(b)
			n += 2 + l + sovPbmessageserver(uint64(l))
		}
	}
	if m.Views != 0 {
		n += 2 + sovPbmessageserver(uint64(m.Views))
	}
	if m.EditDate != 0 {
		n += 2 + sovPbmessageserver(uint64(m.EditDate))
	}
	l = len(m.Action)
	if l > 0 {
		n += 2 + l + sovPbmessageserver(uint64(l))
	}
	if m.Uuid != 0 {
		n += 2 + sovPbmessageserver(uint64(m.Uuid))
	}
	if m.Encry != 0 {
		n += 2 + sovPbmessageserver(uint64(m.Encry))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 2 + l + sovPbmessageserver(uint64(l))
	}
	if m.Groupid != 0 {
		n += 2 + sovPbmessageserver(uint64(m.Groupid))
	}
	if m.ReplyUuid != 0 {
		n += 2 + sovPbmessageserver(uint64(m.ReplyUuid))
	}
	return n
}

func (m *ReplyS2SMsg) Size() (n int) {
	var l int
	_ = l
	if m.Reply != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Reply))
	}
	if m.Error != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Error))
	}
	return n
}

func (m *ReqSendMedia) Size() (n int) {
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Fromid))
	}
	if m.Flags != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Flags))
	}
	if m.Silent {
		n += 2
	}
	if m.Background {
		n += 2
	}
	if m.ClearDraft {
		n += 2
	}
	l = len(m.Peer)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.ReplyToMsgId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ReplyToMsgId))
	}
	l = len(m.Media)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if len(m.MultiMedia) > 0 {
		for _, b := range m.MultiMedia {
			l = len(b)
			n += 1 + l + sovPbmessageserver(uint64(l))
		}
	}
	if m.RandomId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.RandomId))
	}
	l = len(m.ReplyMarkup)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Newfileid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Newfileid))
	}
	if len(m.Entities) > 0 {
		for _, b := range m.Entities {
			l = len(b)
			n += 1 + l + sovPbmessageserver(uint64(l))
		}
	}
	if m.FromkeyId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromkeyId))
	}
	if len(m.Chatmeber) > 0 {
		l = 0
		for _, e := range m.Chatmeber {
			l += sovPbmessageserver(uint64(e))
		}
		n += 2 + sovPbmessageserver(uint64(l)) + l
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 2 + l + sovPbmessageserver(uint64(l))
	}
	if m.ViaBotId != 0 {
		n += 2 + sovPbmessageserver(uint64(m.ViaBotId))
	}
	return n
}

func (m *ReqUploadMedia) Size() (n int) {
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Fromid))
	}
	l = len(m.Peer)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	l = len(m.Media)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReqForwardMessages) Size() (n int) {
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Fromid))
	}
	if m.Flags != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Flags))
	}
	if m.Silent {
		n += 2
	}
	if m.Background {
		n += 2
	}
	if m.WithMyScore {
		n += 2
	}
	l = len(m.FromPeer)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovPbmessageserver(uint64(e))
		}
		n += 1 + sovPbmessageserver(uint64(l)) + l
	}
	if len(m.RandomId) > 0 {
		l = 0
		for _, e := range m.RandomId {
			l += sovPbmessageserver(uint64(e))
		}
		n += 1 + sovPbmessageserver(uint64(l)) + l
	}
	l = len(m.ToPeer)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyForwardMessages) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Error))
	}
	return n
}

func (m *Msg) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Type))
	}
	if m.Flags != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Flags))
	}
	if m.Id != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Id))
	}
	if m.FromId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromId))
	}
	l = len(m.ToId)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	l = len(m.FwdFrom)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.ViaBotId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ViaBotId))
	}
	if m.ReplyToMsgId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ReplyToMsgId))
	}
	if m.Date != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Date))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	l = len(m.Media)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.MediaType != 0 {
		n += 1 + sovPbmessageserver(uint64(m.MediaType))
	}
	l = len(m.ReplyMarkup)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if len(m.Entities) > 0 {
		for _, b := range m.Entities {
			l = len(b)
			n += 1 + l + sovPbmessageserver(uint64(l))
		}
	}
	if m.Views != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Views))
	}
	if m.EditDate != 0 {
		n += 2 + sovPbmessageserver(uint64(m.EditDate))
	}
	l = len(m.Action)
	if l > 0 {
		n += 2 + l + sovPbmessageserver(uint64(l))
	}
	if m.Randomid != 0 {
		n += 2 + sovPbmessageserver(uint64(m.Randomid))
	}
	if m.Pts != 0 {
		n += 2 + sovPbmessageserver(uint64(m.Pts))
	}
	return n
}

func (m *ReqGetMsgs) Size() (n int) {
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.SelfId))
	}
	if m.KeyId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.KeyId))
	}
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovPbmessageserver(uint64(e))
		}
		n += 1 + sovPbmessageserver(uint64(l)) + l
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyGetMsgs) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Error))
	}
	return n
}

func (m *ReqHistory) Size() (n int) {
	var l int
	_ = l
	if m.Selfid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Selfid))
	}
	l = len(m.Peer)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.OffsetId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.OffsetId))
	}
	if m.OffsetDate != 0 {
		n += 1 + sovPbmessageserver(uint64(m.OffsetDate))
	}
	if m.AddOffset != 0 {
		n += 1 + sovPbmessageserver(uint64(m.AddOffset))
	}
	if m.Limit != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Limit))
	}
	if m.MaxId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.MaxId))
	}
	if m.MinId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.MinId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyHistory) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Error))
	}
	return n
}

func (m *ReqCreateChat) Size() (n int) {
	var l int
	_ = l
	if m.Chatid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Chatid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Creator != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Creator))
	}
	if len(m.Users) > 0 {
		l = 0
		for _, e := range m.Users {
			l += sovPbmessageserver(uint64(e))
		}
		n += 1 + sovPbmessageserver(uint64(l)) + l
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyCreateChat) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.ChatId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChatId))
	}
	if m.Error != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Error))
	}
	return n
}

func (m *ReqAddChatUser) Size() (n int) {
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Fromid))
	}
	if m.Chatid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Chatid))
	}
	if m.Userid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Userid))
	}
	if m.Fwdlimit != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Fwdlimit))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromKeyid))
	}
	if m.InviteType != 0 {
		n += 1 + sovPbmessageserver(uint64(m.InviteType))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyAddChatUser) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Error))
	}
	return n
}

func (m *ReqDeleteChatUser) Size() (n int) {
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Fromid))
	}
	if m.Chatid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Chatid))
	}
	if m.Userid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Userid))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyDeleteChatUser) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Error))
	}
	return n
}

func (m *ReqEditChatAdmin) Size() (n int) {
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Fromid))
	}
	if m.Chatid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Chatid))
	}
	if m.Userid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Userid))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromKeyid))
	}
	if m.IsAdmin {
		n += 2
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyEditChatAdmin) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	if m.Error != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Error))
	}
	return n
}

func (m *ReqEditChatTitle) Size() (n int) {
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Fromid))
	}
	if m.Chatid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Chatid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyEditChatTitle) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Error))
	}
	return n
}

func (m *ReqGetAllChats) Size() (n int) {
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Fromid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyGetAllChats) Size() (n int) {
	var l int
	_ = l
	if len(m.Chats) > 0 {
		l = 0
		for _, e := range m.Chats {
			l += sovPbmessageserver(uint64(e))
		}
		n += 1 + sovPbmessageserver(uint64(l)) + l
	}
	if m.Error != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Error))
	}
	return n
}

func (m *ReqGetFullChat) Size() (n int) {
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Fromid))
	}
	if m.Chatid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Chatid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyGetFullChat) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Error))
	}
	return n
}

func (m *ReqEditChatPhoto) Size() (n int) {
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Fromid))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromKeyid))
	}
	if m.Chatid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Chatid))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyEditChatPhoto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Error))
	}
	return n
}

func (m *ReqMigrateChat) Size() (n int) {
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Fromid))
	}
	if m.Chatid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Chatid))
	}
	if m.Fromkeyid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Fromkeyid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyMigrateChat) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Error))
	}
	return n
}

func (m *ReqReadHistory) Size() (n int) {
	var l int
	_ = l
	if m.Selfid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Selfid))
	}
	l = len(m.Peer)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.MaxId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.MaxId))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyReadHistory) Size() (n int) {
	var l int
	_ = l
	if m.Pts != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Pts))
	}
	if m.MaxId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.MaxId))
	}
	if m.Error != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Error))
	}
	return n
}

func (m *ReqUpdateReadOut) Size() (n int) {
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.SelfId))
	}
	if m.FromId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromId))
	}
	if m.PeerType != 0 {
		n += 1 + sovPbmessageserver(uint64(m.PeerType))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyUpdateReadOut) Size() (n int) {
	var l int
	_ = l
	if m.Maxid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Maxid))
	}
	if m.Pts != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Pts))
	}
	if m.Error != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Error))
	}
	return n
}

func (m *ReqDiffByPts) Size() (n int) {
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Fromid))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromKeyid))
	}
	if m.Pts != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Pts))
	}
	if m.Flags != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Flags))
	}
	if m.PtsTotalLimit != 0 {
		n += 1 + sovPbmessageserver(uint64(m.PtsTotalLimit))
	}
	if m.Date != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Date))
	}
	if m.Qts != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Qts))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyDiffByPts) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Error))
	}
	if m.Usetime != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Usetime))
	}
	return n
}

func (m *ReqDeleteHistory) Size() (n int) {
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Fromid))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromKeyid))
	}
	if m.Flags != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Flags))
	}
	if m.JustClear {
		n += 2
	}
	l = len(m.Peer)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.MaxId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.MaxId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyDeleteHistory) Size() (n int) {
	var l int
	_ = l
	if m.Pts != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Pts))
	}
	if m.PtsCount != 0 {
		n += 1 + sovPbmessageserver(uint64(m.PtsCount))
	}
	if m.Offset != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Offset))
	}
	if m.Error != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Error))
	}
	return n
}

func (m *ReqDeleteMessages) Size() (n int) {
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Fromid))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromKeyid))
	}
	if m.Flags != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Flags))
	}
	if m.Revoke {
		n += 2
	}
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovPbmessageserver(uint64(e))
		}
		n += 1 + sovPbmessageserver(uint64(l)) + l
	}
	if m.Channelid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Channelid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyDeleteMessages) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Error))
	}
	return n
}

func (m *ReqEditMessage) Size() (n int) {
	var l int
	_ = l
	if m.FormId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FormId))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromKeyid))
	}
	if m.Flags != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Flags))
	}
	if m.NoWebpage {
		n += 2
	}
	if m.StopGeoLive {
		n += 2
	}
	l = len(m.Peer)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Id))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	l = len(m.ReplyMarkup)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if len(m.Entities) > 0 {
		for _, b := range m.Entities {
			l = len(b)
			n += 1 + l + sovPbmessageserver(uint64(l))
		}
	}
	l = len(m.GeoPoint)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.ViaBotId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ViaBotId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyEditMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.UpdateEditMessage)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Error))
	}
	return n
}

func (m *ReqNotifySettings) Size() (n int) {
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Fromid))
	}
	l = len(m.Peer)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyNotifySettings) Size() (n int) {
	var l int
	_ = l
	if m.Flags != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Flags))
	}
	if m.ShowPreviews {
		n += 2
	}
	if m.Silent {
		n += 2
	}
	if m.MuteUntil != 0 {
		n += 1 + sovPbmessageserver(uint64(m.MuteUntil))
	}
	l = len(m.Sound)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Error))
	}
	return n
}

func (m *ReqUpdateNotifySettings) Size() (n int) {
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Fromid))
	}
	l = len(m.Peer)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	l = len(m.Settings)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyUpdateNotifySettings) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Error))
	}
	return n
}

func (m *ReqMessageEditData) Size() (n int) {
	var l int
	_ = l
	if m.Layer != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Layer))
	}
	if m.Fromid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Fromid))
	}
	l = len(m.Peer)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Id))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyMessageEditData) Size() (n int) {
	var l int
	_ = l
	if m.Flags != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Flags))
	}
	if m.Caption {
		n += 2
	}
	if m.Error != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Error))
	}
	return n
}

func (m *ReqSaveMsgDraft) Size() (n int) {
	var l int
	_ = l
	if m.Selfid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Selfid))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromKeyid))
	}
	if m.Layer != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Layer))
	}
	if m.Flags != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Flags))
	}
	if m.NoWebpage {
		n += 2
	}
	if m.ReplyToMsgId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ReplyToMsgId))
	}
	l = len(m.Peer)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if len(m.Entities) > 0 {
		for _, b := range m.Entities {
			l = len(b)
			n += 1 + l + sovPbmessageserver(uint64(l))
		}
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplySaveMsgDraft) Size() (n int) {
	var l int
	_ = l
	if m.Reply {
		n += 2
	}
	if m.Error != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Error))
	}
	return n
}

func (m *ReqGetUserUnRead) Size() (n int) {
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Userid))
	}
	if m.Keyid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Keyid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyUserUnread) Size() (n int) {
	var l int
	_ = l
	if m.Unread != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Unread))
	}
	if m.Error != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Error))
	}
	return n
}

func (m *InputChannel) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Type))
	}
	if m.InputChannelEmpty != nil {
		l = m.InputChannelEmpty.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.InputChannelinputChannel != nil {
		l = m.InputChannelinputChannel.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *InputChannelEmpty) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *InputChannelinputChannel) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbmessageserver(uint64(m.AccessHash))
	}
	return n
}

func (m *MessageActionEditChannelPhoto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Id))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbmessageserver(uint64(m.AccessHash))
	}
	if m.Date != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Date))
	}
	l = len(m.Pothosize)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *MessageActionEditChannelAbout) Size() (n int) {
	var l int
	_ = l
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *MessageActionDeleteChannelMessages) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Id))
	}
	return n
}

func (m *MessageActionDeleteChannelHistory) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *MessageActionUpdatePinnedChannelMessage) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *MessageActionCheckChannelUsername) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *MessageActionUpdateChannelUsername) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *MessageActionExportChannelInvite) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *MessageActionDeleteChannel) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *MessageActionChannelCreate) Size() (n int) {
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *MessageActionAddChannelUser) Size() (n int) {
	var l int
	_ = l
	if len(m.UserId) > 0 {
		l = 0
		for _, e := range m.UserId {
			l += sovPbmessageserver(uint64(e))
		}
		n += 1 + sovPbmessageserver(uint64(l)) + l
	}
	return n
}

func (m *MessageActionDeleteChannelUser) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.UserId))
	}
	return n
}

func (m *MessageActionUserLeaveChannel) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.UserId))
	}
	return n
}

func (m *MessageActionEditChannelTitle) Size() (n int) {
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *UserStatusOnline) Size() (n int) {
	var l int
	_ = l
	if m.Expires != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Expires))
	}
	return n
}

func (m *UserStatusOffline) Size() (n int) {
	var l int
	_ = l
	if m.WasOnline != 0 {
		n += 1 + sovPbmessageserver(uint64(m.WasOnline))
	}
	return n
}

func (m *UserStatusLastMonth) Size() (n int) {
	var l int
	_ = l
	if m.LastMonth != 0 {
		n += 1 + sovPbmessageserver(uint64(m.LastMonth))
	}
	return n
}

func (m *Status) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Type))
	}
	if m.Online != nil {
		l = m.Online.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Offline != nil {
		l = m.Offline.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.LastMonth != nil {
		l = m.LastMonth.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *UserInfo) Size() (n int) {
	var l int
	_ = l
	if m.Flags != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Flags))
	}
	if m.Self {
		n += 2
	}
	if m.Contact {
		n += 2
	}
	if m.MutualContact {
		n += 2
	}
	if m.Deleted {
		n += 2
	}
	if m.Bot {
		n += 2
	}
	if m.BotChatHistory {
		n += 2
	}
	if m.BotNoChats {
		n += 2
	}
	if m.Verified {
		n += 2
	}
	if m.Restricted {
		n += 2
	}
	if m.Min {
		n += 2
	}
	if m.BotInlineGeo {
		n += 2
	}
	if m.Id != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Id))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbmessageserver(uint64(m.AccessHash))
	}
	l = len(m.Firstname)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	l = len(m.Lastname)
	if l > 0 {
		n += 2 + l + sovPbmessageserver(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 2 + l + sovPbmessageserver(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 2 + l + sovPbmessageserver(uint64(l))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 2 + l + sovPbmessageserver(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 2 + l + sovPbmessageserver(uint64(l))
	}
	if m.BotInfoVersion {
		n += 3
	}
	if m.RestrictionReason {
		n += 3
	}
	if m.BotInlinePlaceholder {
		n += 3
	}
	return n
}

func (m *Channel) Size() (n int) {
	var l int
	_ = l
	if m.Flags != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Flags))
	}
	if m.Creator {
		n += 2
	}
	if m.Kicked {
		n += 2
	}
	if m.Left {
		n += 2
	}
	if m.Editor {
		n += 2
	}
	if m.Moderator {
		n += 2
	}
	if m.Broadcast {
		n += 2
	}
	if m.Verified {
		n += 2
	}
	if m.Megagroup {
		n += 2
	}
	if m.Restricted {
		n += 2
	}
	if m.Democracy {
		n += 2
	}
	if m.Signatures {
		n += 2
	}
	if m.Min {
		n += 2
	}
	if m.Id != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Id))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbmessageserver(uint64(m.AccessHash))
	}
	l = len(m.Title)
	if l > 0 {
		n += 2 + l + sovPbmessageserver(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 2 + l + sovPbmessageserver(uint64(l))
	}
	if m.Photo != 0 {
		n += 2 + sovPbmessageserver(uint64(m.Photo))
	}
	if m.Date != 0 {
		n += 2 + sovPbmessageserver(uint64(m.Date))
	}
	if m.Version != 0 {
		n += 2 + sovPbmessageserver(uint64(m.Version))
	}
	if m.RestrictionReason {
		n += 3
	}
	return n
}

func (m *UpdateNewChannelMessage) Size() (n int) {
	var l int
	_ = l
	if m.Flags != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Flags))
	}
	if m.Out {
		n += 2
	}
	if m.Mentioned {
		n += 2
	}
	if m.MediaUnread {
		n += 2
	}
	if m.Silent {
		n += 2
	}
	if m.Post {
		n += 2
	}
	if m.Id != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Id))
	}
	if m.FromId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromId))
	}
	if m.ToId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ToId))
	}
	if m.ReplyToMsgId {
		n += 2
	}
	if m.Date != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Date))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Pts != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Pts))
	}
	if m.PtsCount != 0 {
		n += 1 + sovPbmessageserver(uint64(m.PtsCount))
	}
	return n
}

func (m *RequestChannel) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.UserId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromKeyid))
	}
	if m.BroadCast {
		n += 2
	}
	if m.Megagroup {
		n += 2
	}
	if m.ReplyMsgId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ReplyMsgId))
	}
	if m.BanAddContact {
		n += 2
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyChannel) Size() (n int) {
	var l int
	_ = l
	l = len(m.Reply)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *RequestChannelInvite) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChannelId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.UserId))
	}
	if len(m.PeerId) > 0 {
		l = 0
		for _, e := range m.PeerId {
			l += sovPbmessageserver(uint64(e))
		}
		n += 1 + sovPbmessageserver(uint64(l)) + l
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromKeyid))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbmessageserver(uint64(m.AccessHash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyChannelInvite) Size() (n int) {
	var l int
	_ = l
	l = len(m.Reply)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqJoinChannel) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.UserId))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromKeyid))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbmessageserver(uint64(m.AccessHash))
	}
	if m.ByLink {
		n += 2
	}
	if m.Invitor != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Invitor))
	}
	if m.InviteType != 0 {
		n += 1 + sovPbmessageserver(uint64(m.InviteType))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyJoinChannel) Size() (n int) {
	var l int
	_ = l
	l = len(m.Reply)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqChannelKick) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChannelId))
	}
	if m.Kicker != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Kicker))
	}
	if m.Kickee != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Kickee))
	}
	if m.IsBotUser {
		n += 2
	}
	if m.IsKicked {
		n += 2
	}
	if m.KickedId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.KickedId))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyChannelKick) Size() (n int) {
	var l int
	_ = l
	l = len(m.Reply)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqLeaveChannel) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.UserId))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyLeaveChannel) Size() (n int) {
	var l int
	_ = l
	l = len(m.Reply)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqEditChannelTitle) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChannelId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.UserId))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyEditChannelTitle) Size() (n int) {
	var l int
	_ = l
	l = len(m.Reply)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqEditChannelAdmin) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.UserId))
	}
	if m.FromKeyId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromKeyId))
	}
	l = len(m.Role)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.KeyId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.KeyId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbmessageserver(uint64(m.AccessHash))
	}
	l = len(m.Rank)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyEditChannelAdmin) Size() (n int) {
	var l int
	_ = l
	l = len(m.Reply)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqEditChannelPhoto) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.UserId))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyEditChannelPhoto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Reply)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ChatInviteExported) Size() (n int) {
	var l int
	_ = l
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReqEditChannelAbout) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromKeyId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChannelId))
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbmessageserver(uint64(m.AccessHash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyEditChannelAbout) Size() (n int) {
	var l int
	_ = l
	if m.Succeed {
		n += 2
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqDeleteChannelMessages) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChannelId))
	}
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovPbmessageserver(uint64(e))
		}
		n += 1 + sovPbmessageserver(uint64(l)) + l
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromKeyid))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbmessageserver(uint64(m.AccessHash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyDeleteChannelMessages) Size() (n int) {
	var l int
	_ = l
	if m.Msgid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Msgid))
	}
	if m.Date != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Date))
	}
	if m.Pts != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Pts))
	}
	if m.MaxId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.MaxId))
	}
	if m.PtsCount != 0 {
		n += 1 + sovPbmessageserver(uint64(m.PtsCount))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqDeleteChannelSelfHistory) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbmessageserver(uint64(m.AccessHash))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReqDeleteChannelHistory) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChannelId))
	}
	if m.UsreId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.UsreId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbmessageserver(uint64(m.AccessHash))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyDeleteChannelHistory) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqUpdatePinnedChannelMessage) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromId))
	}
	if m.Flags != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Flags))
	}
	if m.Silent {
		n += 2
	}
	if m.ChannelId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChannelId))
	}
	if m.Id != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Id))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyUpdatePinnedChannelMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Reply)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqDeleteChannel) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromKeyId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbmessageserver(uint64(m.AccessHash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyDeleteChannel) Size() (n int) {
	var l int
	_ = l
	if m.Send {
		n += 2
	}
	l = len(m.Reply)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqReadChannelHistory) Size() (n int) {
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Fromid))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromKeyid))
	}
	if m.ChannelId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChannelId))
	}
	if m.TopMsgId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.TopMsgId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyReadChannelHistory) Size() (n int) {
	var l int
	_ = l
	if m.IsOk {
		n += 2
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqUpdateChannelReadOut) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChannelId))
	}
	if m.MaxId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.MaxId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyUpdateChannelReadOut) Size() (n int) {
	var l int
	_ = l
	if m.Maxid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Maxid))
	}
	if m.Pts != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Pts))
	}
	return n
}

func (m *ReqGetchannelDifference) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromKeyId))
	}
	if m.Flags != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Flags))
	}
	if m.Force {
		n += 2
	}
	if m.ChannelId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChannelId))
	}
	if m.Pts != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Pts))
	}
	if m.Limit != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Limit))
	}
	if m.Range_MinId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Range_MinId))
	}
	if m.Range_MaxId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Range_MaxId))
	}
	if m.Device != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Device))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyChannelDiffCommon) Size() (n int) {
	var l int
	_ = l
	l = len(m.Difference)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReplyGetChannelDifferenceEmpty) Size() (n int) {
	var l int
	_ = l
	if m.Flags != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Flags))
	}
	if m.Final {
		n += 2
	}
	if m.Pts != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Pts))
	}
	if m.Timeout != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Timeout))
	}
	return n
}

func (m *ReplyGetChannelDifference) Size() (n int) {
	var l int
	_ = l
	if m.Flags != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Flags))
	}
	if m.Final {
		n += 2
	}
	if m.Pts != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Pts))
	}
	if m.Timeout != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Timeout))
	}
	if len(m.Msgs) > 0 {
		for _, b := range m.Msgs {
			l = len(b)
			n += 1 + l + sovPbmessageserver(uint64(l))
		}
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReplyGetChannelDifferenceTooLong) Size() (n int) {
	var l int
	_ = l
	if m.Flags != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Flags))
	}
	if m.Final {
		n += 2
	}
	if m.Pts != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Pts))
	}
	if m.Timeout != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Timeout))
	}
	if m.TopMessage != 0 {
		n += 1 + sovPbmessageserver(uint64(m.TopMessage))
	}
	if m.ReadInboxMaxId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ReadInboxMaxId))
	}
	if m.ReadOutboxMaxId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ReadOutboxMaxId))
	}
	if m.UnreadCount != 0 {
		n += 1 + sovPbmessageserver(uint64(m.UnreadCount))
	}
	if len(m.Msgs) > 0 {
		for _, b := range m.Msgs {
			l = len(b)
			n += 1 + l + sovPbmessageserver(uint64(l))
		}
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqGetChannelMsgHistory) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChannelId))
	}
	if m.OffsetId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.OffsetId))
	}
	if m.OffsetDate != 0 {
		n += 1 + sovPbmessageserver(uint64(m.OffsetDate))
	}
	if m.AddOffset != 0 {
		n += 1 + sovPbmessageserver(uint64(m.AddOffset))
	}
	if m.MinId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.MinId))
	}
	if m.MaxId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.MaxId))
	}
	if m.Limit != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Limit))
	}
	if m.FromId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromId))
	}
	if m.KeyId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.KeyId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyChannelMsgs) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqParticipants) Size() (n int) {
	var l int
	_ = l
	if m.OffSet != 0 {
		n += 1 + sovPbmessageserver(uint64(m.OffSet))
	}
	if m.Limit != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Limit))
	}
	if m.PartiType != 0 {
		n += 1 + sovPbmessageserver(uint64(m.PartiType))
	}
	if m.ChannelId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChannelId))
	}
	if m.FromId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromId))
	}
	l = len(m.Q)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Hash != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Hash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyParticipants) Size() (n int) {
	var l int
	_ = l
	l = len(m.Updates)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqParticipant) Size() (n int) {
	var l int
	_ = l
	if m.Channelid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Channelid))
	}
	if m.FromId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromId))
	}
	if m.UserId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbmessageserver(uint64(m.AccessHash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyParticipant) Size() (n int) {
	var l int
	_ = l
	l = len(m.Updates)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqGetChannelMsgsByMsgsId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChannelId))
	}
	if len(m.MsgsId) > 0 {
		l = 0
		for _, e := range m.MsgsId {
			l += sovPbmessageserver(uint64(e))
		}
		n += 1 + sovPbmessageserver(uint64(l)) + l
	}
	if m.FromId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReqGetChannelCommonDialogs) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromId))
	}
	if len(m.ChannIds) > 0 {
		l = 0
		for _, e := range m.ChannIds {
			l += sovPbmessageserver(uint64(e))
		}
		n += 1 + sovPbmessageserver(uint64(l)) + l
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ChannelDialog) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChannelId))
	}
	if m.TopMessage != 0 {
		n += 1 + sovPbmessageserver(uint64(m.TopMessage))
	}
	if m.MaxReadInId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.MaxReadInId))
	}
	if m.Encry != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Encry))
	}
	return n
}

func (m *ChannelDialogAndMsg) Size() (n int) {
	var l int
	_ = l
	if m.ChannelDialog != nil {
		l = m.ChannelDialog.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.ChannelMsg != nil {
		l = m.ChannelMsg.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ChannelDialogAndMsgs) Size() (n int) {
	var l int
	_ = l
	if len(m.ChannelDialogAndMsg) > 0 {
		for _, e := range m.ChannelDialogAndMsg {
			l = e.Size()
			n += 1 + l + sovPbmessageserver(uint64(l))
		}
	}
	return n
}

func (m *UserMsg) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Id))
	}
	if m.UserId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.WithId))
	}
	if m.WithIdType != 0 {
		n += 1 + sovPbmessageserver(uint64(m.WithIdType))
	}
	if m.MessageType != 0 {
		n += 1 + sovPbmessageserver(uint64(m.MessageType))
	}
	if m.Flags != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Flags))
	}
	if m.Out {
		n += 2
	}
	if m.Mentioned {
		n += 2
	}
	if m.MediaUnread {
		n += 2
	}
	if m.Silent {
		n += 2
	}
	if m.Post {
		n += 2
	}
	if m.MsgId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.MsgId))
	}
	if m.ToId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ToId))
	}
	if m.Pts != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Pts))
	}
	l = len(m.FwdFrom)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.ViaBotId != 0 {
		n += 2 + sovPbmessageserver(uint64(m.ViaBotId))
	}
	if m.ReplyToMsgId != 0 {
		n += 2 + sovPbmessageserver(uint64(m.ReplyToMsgId))
	}
	if m.Date != 0 {
		n += 2 + sovPbmessageserver(uint64(m.Date))
	}
	l = len(m.Message)
	if l > 0 {
		n += 2 + l + sovPbmessageserver(uint64(l))
	}
	if m.Media != 0 {
		n += 2 + sovPbmessageserver(uint64(m.Media))
	}
	l = len(m.MediaData)
	if l > 0 {
		n += 2 + l + sovPbmessageserver(uint64(l))
	}
	l = len(m.ReplyMarkup)
	if l > 0 {
		n += 2 + l + sovPbmessageserver(uint64(l))
	}
	if len(m.Entities) > 0 {
		for _, b := range m.Entities {
			l = len(b)
			n += 2 + l + sovPbmessageserver(uint64(l))
		}
	}
	if m.FromId != 0 {
		n += 2 + sovPbmessageserver(uint64(m.FromId))
	}
	if m.Views != 0 {
		n += 2 + sovPbmessageserver(uint64(m.Views))
	}
	if m.EditDate != 0 {
		n += 2 + sovPbmessageserver(uint64(m.EditDate))
	}
	l = len(m.Action)
	if l > 0 {
		n += 2 + l + sovPbmessageserver(uint64(l))
	}
	if m.RandomId != 0 {
		n += 2 + sovPbmessageserver(uint64(m.RandomId))
	}
	if m.Uuid != 0 {
		n += 2 + sovPbmessageserver(uint64(m.Uuid))
	}
	if m.InsertDate != 0 {
		n += 2 + sovPbmessageserver(uint64(m.InsertDate))
	}
	if m.UpdateDate != 0 {
		n += 2 + sovPbmessageserver(uint64(m.UpdateDate))
	}
	if m.Encry != 0 {
		n += 2 + sovPbmessageserver(uint64(m.Encry))
	}
	return n
}

func (m *RequestWebPMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.KeyIdNum != 0 {
		n += 1 + sovPbmessageserver(uint64(m.KeyIdNum))
	}
	if m.DcId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.DcId))
	}
	return n
}

func (m *ReplyRequestWebPagePreview) Size() (n int) {
	var l int
	_ = l
	l = len(m.WebPage)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *Reqpushusermsg) Size() (n int) {
	var l int
	_ = l
	if m.PushUserId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.PushUserId))
	}
	if m.Fromid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Fromid))
	}
	l = len(m.PushType)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Toid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Toid))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	l = len(m.MediaType)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Msgid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Msgid))
	}
	return n
}

func (m *ReplyPush) Size() (n int) {
	var l int
	_ = l
	if m.Reply {
		n += 2
	}
	return n
}

func (m *ReqMessageSearch) Size() (n int) {
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.SelfId))
	}
	l = len(m.Peer)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	l = len(m.Q)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.FromId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromId))
	}
	l = len(m.Filter)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.MinDate != 0 {
		n += 1 + sovPbmessageserver(uint64(m.MinDate))
	}
	if m.MaxDate != 0 {
		n += 1 + sovPbmessageserver(uint64(m.MaxDate))
	}
	if m.Offset != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Offset))
	}
	if m.MaxId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.MaxId))
	}
	if m.Limit != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Limit))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyMessageSearch) Size() (n int) {
	var l int
	_ = l
	if m.Retype != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Retype))
	}
	if m.Count != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Count))
	}
	if len(m.Message) > 0 {
		for _, e := range m.Message {
			l = e.Size()
			n += 1 + l + sovPbmessageserver(uint64(l))
		}
	}
	return n
}

func (m *ReqCheckChatInvite) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromKeyId))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReqGetChannelsLastMsgsByUserId) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.UserId))
	}
	if m.Date != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Date))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyGetChannelsLastMsgsByUserId) Size() (n int) {
	var l int
	_ = l
	if len(m.UserMsgs) > 0 {
		for _, e := range m.UserMsgs {
			l = e.Size()
			n += 1 + l + sovPbmessageserver(uint64(l))
		}
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqChannelAdminLog) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChannelId))
	}
	if m.FromId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromKeyId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbmessageserver(uint64(m.AccessHash))
	}
	l = len(m.Q)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.EventFilter != nil {
		l = m.EventFilter.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if len(m.Admins) > 0 {
		l = 0
		for _, e := range m.Admins {
			l += sovPbmessageserver(uint64(e))
		}
		n += 1 + sovPbmessageserver(uint64(l)) + l
	}
	if m.MaxId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.MaxId))
	}
	if m.MinId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.MinId))
	}
	if m.Limit != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Limit))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ChannelAdminLogEventFilter) Size() (n int) {
	var l int
	_ = l
	if m.Flags != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Flags))
	}
	if m.Join {
		n += 2
	}
	if m.Leave {
		n += 2
	}
	if m.Invite {
		n += 2
	}
	if m.Ban {
		n += 2
	}
	if m.Unban {
		n += 2
	}
	if m.Kick {
		n += 2
	}
	if m.Unkick {
		n += 2
	}
	if m.Promote {
		n += 2
	}
	if m.Demote {
		n += 2
	}
	if m.Info {
		n += 2
	}
	if m.Setting {
		n += 2
	}
	if m.Pinned {
		n += 2
	}
	if m.Edit {
		n += 2
	}
	if m.Delete {
		n += 2
	}
	return n
}

func (m *ReplyChannelAdminLog) Size() (n int) {
	var l int
	_ = l
	l = len(m.AdminLogResults)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqImportChatInvite) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromKeyId))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyImportChatInvite) Size() (n int) {
	var l int
	_ = l
	l = len(m.Updates)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqBanChannelUser) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromKeyId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChannelId))
	}
	if m.BannedUserId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.BannedUserId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbmessageserver(uint64(m.AccessHash))
	}
	if m.UtilDate != 0 {
		n += 1 + sovPbmessageserver(uint64(m.UtilDate))
	}
	if m.ChannelBannedRights != nil {
		l = m.ChannelBannedRights.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyBanChannelUser) Size() (n int) {
	var l int
	_ = l
	l = len(m.Updates)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ChannelBannedRights) Size() (n int) {
	var l int
	_ = l
	if m.Flags != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Flags))
	}
	if m.ViewMessages {
		n += 2
	}
	if m.SendMessages {
		n += 2
	}
	if m.SendMedia {
		n += 2
	}
	if m.SendStickers {
		n += 2
	}
	if m.SendGifs {
		n += 2
	}
	if m.SendGames {
		n += 2
	}
	if m.SendInline {
		n += 2
	}
	if m.EmbedLinks {
		n += 2
	}
	if m.UntilDate != 0 {
		n += 1 + sovPbmessageserver(uint64(m.UntilDate))
	}
	if m.InviteUser {
		n += 2
	}
	if m.PinMessage {
		n += 2
	}
	if m.ChangeGroupInfo {
		n += 2
	}
	if m.SendPolls {
		n += 2
	}
	return n
}

func (m *ReqFullchannel) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbmessageserver(uint64(m.AccessHash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReqExportChannelLink) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChannelId))
	}
	if m.FromId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyExportChannelLink) Size() (n int) {
	var l int
	_ = l
	l = len(m.Exported)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqChannelToggleInvite) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.UserId))
	}
	if m.Enabled {
		n += 2
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbmessageserver(uint64(m.AccessHash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyChannelToggleInvite) Size() (n int) {
	var l int
	_ = l
	l = len(m.Reply)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqChannelUpdateUserName) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbmessageserver(uint64(m.AccessHash))
	}
	if m.FromId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromId))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyChannelUpdateUserName) Size() (n int) {
	var l int
	_ = l
	if m.Updated {
		n += 2
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqChannelCheckUserName) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbmessageserver(uint64(m.AccessHash))
	}
	if m.FromId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromId))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyChannelCheckUserName) Size() (n int) {
	var l int
	_ = l
	if m.Valid {
		n += 2
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqChangeGroupAndChannelCrator) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.GroupId))
	}
	if m.FromId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromId))
	}
	if m.OperatorId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.OperatorId))
	}
	if m.IsChat {
		n += 2
	}
	return n
}

func (m *ReplyChangeGroupAndChannelCrator) Size() (n int) {
	var l int
	_ = l
	if m.Valid {
		n += 2
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqGetChannels) Size() (n int) {
	var l int
	_ = l
	if len(m.ChannelIds) > 0 {
		l = 0
		for _, e := range m.ChannelIds {
			l += sovPbmessageserver(uint64(e))
		}
		n += 1 + sovPbmessageserver(uint64(l)) + l
	}
	if m.FromId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyGetChannels) Size() (n int) {
	var l int
	_ = l
	l = len(m.Reply)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReplyFullChannel) Size() (n int) {
	var l int
	_ = l
	l = len(m.Updates)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqGetMessageByUserIdMsgId) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.UserId))
	}
	if m.MsgId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.MsgId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyGetMessageByUserIdMsgId) Size() (n int) {
	var l int
	_ = l
	if m.UserMessage != nil {
		l = m.UserMessage.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqGetMessageByUserIdUuid) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.UserId))
	}
	if m.Uuid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Uuid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyGetMessageByUserIdUuid) Size() (n int) {
	var l int
	_ = l
	if m.UserMessage != nil {
		l = m.UserMessage.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqGetChannelMessageByChannelIdMsgId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ChannelId))
	}
	if m.MsgId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.MsgId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyGetChannelMessageByChannelIdMsgId) Size() (n int) {
	var l int
	_ = l
	if m.UserMessage != nil {
		l = m.UserMessage.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReplyStoreOtherInfoMsg) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReplyBatchStoreOtherInfoMsg) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReplyGetOtherInfoMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.OtherInfoMsgs) > 0 {
		for _, e := range m.OtherInfoMsgs {
			l = e.Size()
			n += 1 + l + sovPbmessageserver(uint64(l))
		}
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqGetUsersChatsMt) Size() (n int) {
	var l int
	_ = l
	if m.SelfUserid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.SelfUserid))
	}
	if len(m.UseridArr) > 0 {
		l = 0
		for _, e := range m.UseridArr {
			l += sovPbmessageserver(uint64(e))
		}
		n += 1 + sovPbmessageserver(uint64(l)) + l
	}
	if len(m.ChatidArr) > 0 {
		l = 0
		for _, e := range m.ChatidArr {
			l += sovPbmessageserver(uint64(e))
		}
		n += 1 + sovPbmessageserver(uint64(l)) + l
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyGetUsersChatsMt) Size() (n int) {
	var l int
	_ = l
	l = len(m.Users)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	l = len(m.Chats)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.ReplyCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ReplyCode))
	}
	return n
}

func (m *ReqGifQueryAndUpload) Size() (n int) {
	var l int
	_ = l
	l = len(m.GifId)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyGifQueryAndUpload) Size() (n int) {
	var l int
	_ = l
	if m.Error {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *FidData) Size() (n int) {
	var l int
	_ = l
	if m.Fid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Fid))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbmessageserver(uint64(m.AccessHash))
	}
	if m.FileSize != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FileSize))
	}
	if m.Result != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Result))
	}
	return n
}

func (m *ReqGifSearchApi) Size() (n int) {
	var l int
	_ = l
	l = len(m.Q)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Offset))
	}
	return n
}

func (m *ReplyGifSearchApi) Size() (n int) {
	var l int
	_ = l
	if m.Error {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovPbmessageserver(uint64(l))
		}
	}
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *SearchData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	l = len(m.ThumbUrl)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	l = len(m.ContentUrl)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	l = len(m.ContentType)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Width != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Height))
	}
	return n
}

func (m *Pagination) Size() (n int) {
	var l int
	_ = l
	if m.TotalCount != 0 {
		n += 1 + sovPbmessageserver(uint64(m.TotalCount))
	}
	if m.Count != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Count))
	}
	if m.Offset != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Offset))
	}
	return n
}

func (m *ReqReceiveRedPacket) Size() (n int) {
	var l int
	_ = l
	if m.FromKeyid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromKeyid))
	}
	if m.UserId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.UserId))
	}
	if m.PeerId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.PeerId))
	}
	if m.PeerType != 0 {
		n += 1 + sovPbmessageserver(uint64(m.PeerType))
	}
	if m.PeerAccessHash != 0 {
		n += 1 + sovPbmessageserver(uint64(m.PeerAccessHash))
	}
	if m.RedPacketId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.RedPacketId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyReceiveRedPacket) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqGetWebPage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyGetWebPage) Size() (n int) {
	var l int
	_ = l
	if m.Error {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.WebPage != nil {
		l = m.WebPage.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *WebPage) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Id))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	l = len(m.DisplayUrl)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	l = len(m.SiteName)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	l = len(m.EmbedUrl)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	l = len(m.EmbedType)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.EmbedWidth != 0 {
		n += 1 + sovPbmessageserver(uint64(m.EmbedWidth))
	}
	if m.EmbedHeight != 0 {
		n += 1 + sovPbmessageserver(uint64(m.EmbedHeight))
	}
	l = len(m.Author)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReqGetWebPagePreview) Size() (n int) {
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *ReplyGetWebPagePreview) Size() (n int) {
	var l int
	_ = l
	if m.Error {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.WebPage != nil {
		l = m.WebPage.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *UserScore) Size() (n int) {
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Userid))
	}
	if m.Score != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Score))
	}
	return n
}

func (m *FoldersEditPeerFoldersReq) Size() (n int) {
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Userid))
	}
	if len(m.FolderPeers) > 0 {
		for _, b := range m.FolderPeers {
			l = len(b)
			n += 1 + l + sovPbmessageserver(uint64(l))
		}
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *FoldersEditPeerFoldersReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Error))
	}
	return n
}

func (m *FoldersDeleteFolderReq) Size() (n int) {
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Userid))
	}
	if m.FolderId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FolderId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *FoldersDeleteFolderReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovPbmessageserver(uint64(m.Error))
	}
	return n
}

func (m *ReqSendPaymentNotifyMsg) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbmessageserver(uint64(m.AccessHash))
	}
	if m.FromId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromId))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	l = len(m.Media)
	if l > 0 {
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	if m.MediaType != 0 {
		n += 1 + sovPbmessageserver(uint64(m.MediaType))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *RspSendPaymentNotifyMsg) Size() (n int) {
	var l int
	_ = l
	if m.Successful {
		n += 2
	}
	return n
}

func (m *ReqSendAddMutulContactNotify) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.UserId))
	}
	if m.FromId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.FromId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *RespSendAddMutulContactNotify) Size() (n int) {
	var l int
	_ = l
	if m.Sucessful {
		n += 2
	}
	return n
}

func (m *ReqSendAddSingleContactNotify) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.UserId))
	}
	if m.ToId != 0 {
		n += 1 + sovPbmessageserver(uint64(m.ToId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbmessageserver(uint64(l))
	}
	return n
}

func (m *RespSendAddSingleContactNotify) Size() (n int) {
	var l int
	_ = l
	if m.Successful {
		n += 2
	}
	return n
}

func sovPbmessageserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPbmessageserver(x uint64) (n int) {
	return sovPbmessageserver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReqSendMediaSysNotify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSendMediaSysNotify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSendMediaSysNotify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceCode", wireType)
			}
			m.SourceCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request[:0], dAtA[iNdEx:postIndex]...)
			if m.Request == nil {
				m.Request = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Layer", wireType)
			}
			m.Layer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Layer |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FailUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FailUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FailUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			m.User = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.User |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SucceedUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SucceedUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SucceedUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			m.User = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.User |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CallBackRespSendMediaSysNotify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallBackRespSendMediaSysNotify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallBackRespSendMediaSysNotify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailUsers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailUsers = append(m.FailUsers, &FailUser{})
			if err := m.FailUsers[len(m.FailUsers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SucceedUsers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SucceedUsers = append(m.SucceedUsers, &SucceedUser{})
			if err := m.SucceedUsers[len(m.SucceedUsers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespSendMediaSysNotify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespSendMediaSysNotify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespSendMediaSysNotify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqEditMessageMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqEditMessageMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqEditMessageMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FormId", wireType)
			}
			m.FormId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FormId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peer = append(m.Peer[:0], dAtA[iNdEx:postIndex]...)
			if m.Peer == nil {
				m.Peer = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Media = append(m.Media[:0], dAtA[iNdEx:postIndex]...)
			if m.Media == nil {
				m.Media = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespEditMessageMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespEditMessageMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespEditMessageMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateEditMessage", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateEditMessage = append(m.UpdateEditMessage[:0], dAtA[iNdEx:postIndex]...)
			if m.UpdateEditMessage == nil {
				m.UpdateEditMessage = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InlineCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InlineCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InlineCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatType", wireType)
			}
			m.ChatType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotId", wireType)
			}
			m.BotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelInactiveUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelInactiveUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelInactiveUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelInactiveUsersReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelInactiveUsersReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelInactiveUsersReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelInactiveUsersResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelInactiveUsersResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelInactiveUsersResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &ChannelInactiveUser{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSecurityRandomIdsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSecurityRandomIdsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSecurityRandomIdsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxQts", wireType)
			}
			m.MaxQts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxQts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSecurityRandomIdsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSecurityRandomIdsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSecurityRandomIdsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errcode", wireType)
			}
			m.Errcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errcode |= (GetSecurityRandomIdsResult_ErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RandomIds = append(m.RandomIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPbmessageserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPbmessageserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RandomIds = append(m.RandomIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogoutDisCardAllSecurityReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogoutDisCardAllSecurityReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogoutDisCardAllSecurityReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogoutDisCardAllSecurityResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogoutDisCardAllSecurityResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogoutDisCardAllSecurityResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errcode", wireType)
			}
			m.Errcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errcode |= (LogoutDisCardAllSecurityResult_ErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetEncryptedTypingReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetEncryptedTypingReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetEncryptedTypingReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetEncryptedTypingResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetEncryptedTypingResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetEncryptedTypingResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (SetEncryptedTypingResult_Errcode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadEncryptedHistoryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadEncryptedHistoryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadEncryptedHistoryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDate", wireType)
			}
			m.MaxDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadEncryptedHistoryResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadEncryptedHistoryResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadEncryptedHistoryResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ReadEncryptedHistoryResult_Errcode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiscardEncryptionReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiscardEncryptionReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiscardEncryptionReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiscardEncryptionResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiscardEncryptionResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiscardEncryptionResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (DiscardEncryptionResult_Errcode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendEncryptedServiceReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendEncryptedServiceReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendEncryptedServiceReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendId", wireType)
			}
			m.SendId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
			m.RandomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendEncryptedServiceResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendEncryptedServiceResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendEncryptedServiceResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (SendEncryptedServiceResult_Errcode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendEncryptedFileReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendEncryptedFileReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendEncryptedFileReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendId", wireType)
			}
			m.SendId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
			m.RandomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.File = append(m.File[:0], dAtA[iNdEx:postIndex]...)
			if m.File == nil {
				m.File = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendEncryptedFileResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendEncryptedFileResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendEncryptedFileResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (SendEncryptedFileResult_Errcode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendEncryptedReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendEncryptedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendEncryptedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendId", wireType)
			}
			m.SendId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
			m.RandomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendEncryptedResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendEncryptedResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendEncryptedResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (SendEncryptedResult_Errcode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcceptEncryptionReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcceptEncryptionReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcceptEncryptionReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipartId", wireType)
			}
			m.ParticipartId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipartId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipartKeyId", wireType)
			}
			m.ParticipartKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipartKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GB", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GB = append(m.GB[:0], dAtA[iNdEx:postIndex]...)
			if m.GB == nil {
				m.GB = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyFingerprint", wireType)
			}
			m.KeyFingerprint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyFingerprint |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcceptEncryptionResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcceptEncryptionResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcceptEncryptionResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminId", wireType)
			}
			m.AdminId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GAOrB", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GAOrB = append(m.GAOrB[:0], dAtA[iNdEx:postIndex]...)
			if m.GAOrB == nil {
				m.GAOrB = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyFingerPrint2", wireType)
			}
			m.KeyFingerPrint2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyFingerPrint2 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (AcceptEncryptionResult_Errcode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestEncryptionReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestEncryptionReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestEncryptionReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminId", wireType)
			}
			m.AdminId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminKeyId", wireType)
			}
			m.AdminKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantId", wireType)
			}
			m.ParticipantId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipantId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GA", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GA = append(m.GA[:0], dAtA[iNdEx:postIndex]...)
			if m.GA == nil {
				m.GA = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestEncryptionResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestEncryptionResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestEncryptionResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (RequestEncryptionResult_ErroCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqBotCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqBotCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqBotCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrombotId", wireType)
			}
			m.FrombotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrombotId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request[:0], dAtA[iNdEx:postIndex]...)
			if m.Request == nil {
				m.Request = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Layer", wireType)
			}
			m.Layer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Layer |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyBotCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyBotCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyBotCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqBotInlineCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqBotInlineCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqBotInlineCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotId", wireType)
			}
			m.BotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyBotInlineCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyBotInlineCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyBotInlineCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inlinecall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Inlinecall == nil {
				m.Inlinecall = &InlineCall{}
			}
			if err := m.Inlinecall.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSetGameScore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSetGameScore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSetGameScore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scores = append(m.Scores, &UserScore{})
			if err := m.Scores[len(m.Scores)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Force = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableEditMessage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableEditMessage = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatType", wireType)
			}
			m.ChatType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InlineMessageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InlineMessageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Botid", wireType)
			}
			m.Botid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Botid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplySetGameScore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplySetGameScore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplySetGameScore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Succeed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Succeed = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqRemoveConn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqRemoveConn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqRemoveConn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestKey", wireType)
			}
			m.RequestKey = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestKey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveType", wireType)
			}
			m.RemoveType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemoveType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveKey", wireType)
			}
			m.RemoveKey = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemoveKey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyRemoveConn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyRemoveConn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyRemoveConn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSignUpMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSignUpMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSignUpMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSendCodeMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSendCodeMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSendCodeMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyid", wireType)
			}
			m.Keyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Keyid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSignInMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSignInMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSignInMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyid", wireType)
			}
			m.Keyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Keyid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSendSynMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSendSynMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSendSynMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyid", wireType)
			}
			m.Keyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Keyid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSendUserMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSendUserMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSendUserMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Toid", wireType)
			}
			m.Toid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Toid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSendUserOneClientMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSendUserOneClientMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSendUserOneClientMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Toid", wireType)
			}
			m.Toid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Toid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokeyid", wireType)
			}
			m.Tokeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tokeyid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSendMoreUserMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSendMoreUserMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSendMoreUserMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Toid = append(m.Toid, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPbmessageserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPbmessageserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Toid = append(m.Toid, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Toid", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSendCallMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSendCallMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSendCallMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Toid", wireType)
			}
			m.Toid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Toid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallAction", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallAction = append(m.CallAction[:0], dAtA[iNdEx:postIndex]...)
			if m.CallAction == nil {
				m.CallAction = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCallPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCallPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCallPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Toid", wireType)
			}
			m.Toid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Toid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Callid", wireType)
			}
			m.Callid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Callid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallAccessHash", wireType)
			}
			m.CallAccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallAccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyCallPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyCallPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyCallPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Reply = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyid", wireType)
			}
			m.Keyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Keyid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyNull) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyNull: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyNull: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetPts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetPts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetPts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetPts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetPts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetPts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestDialog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FolderId", wireType)
			}
			m.FolderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FolderId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetDate", wireType)
			}
			m.OffsetDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetId", wireType)
			}
			m.OffsetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetPeer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OffsetPeer = append(m.OffsetPeer[:0], dAtA[iNdEx:postIndex]...)
			if m.OffsetPeer == nil {
				m.OffsetPeer = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyDialog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserIdRating) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserIdRating: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserIdRating: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rating", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Rating = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetLastLimitDialog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetLastLimitDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetLastLimitDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserRatingList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserRatingList = append(m.UserRatingList, &UserIdRating{})
			if err := m.UserRatingList[len(m.UserRatingList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChannelIdlist = append(m.ChannelIdlist, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPbmessageserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPbmessageserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChannelIdlist = append(m.ChannelIdlist, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelIdlist", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChatIdlist = append(m.ChatIdlist, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPbmessageserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPbmessageserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChatIdlist = append(m.ChatIdlist, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatIdlist", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqPinnedDialogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqPinnedDialogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqPinnedDialogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FolderId", wireType)
			}
			m.FolderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FolderId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqPeerDialogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqPeerDialogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqPeerDialogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peers", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peers = append(m.Peers, make([]byte, postIndex-iNdEx))
			copy(m.Peers[len(m.Peers)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqRecentLocations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqRecentLocations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqRecentLocations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peers", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peers = append(m.Peers[:0], dAtA[iNdEx:postIndex]...)
			if m.Peers == nil {
				m.Peers = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqPinDialog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqPinDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqPinDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pinned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pinned = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peer = append(m.Peer[:0], dAtA[iNdEx:postIndex]...)
			if m.Peer == nil {
				m.Peer = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqReorderPinnedDialogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqReorderPinnedDialogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqReorderPinnedDialogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peer = append(m.Peer, make([]byte, postIndex-iNdEx))
			copy(m.Peer[len(m.Peer)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyBool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyBool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyBool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSendMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSendMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSendMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoWebpage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoWebpage = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Background", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Background = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearDraft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClearDraft = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peer = append(m.Peer[:0], dAtA[iNdEx:postIndex]...)
			if m.Peer == nil {
				m.Peer = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyToMsgId", wireType)
			}
			m.ReplyToMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyToMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
			m.RandomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyMarkup", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyMarkup = append(m.ReplyMarkup[:0], dAtA[iNdEx:postIndex]...)
			if m.ReplyMarkup == nil {
				m.ReplyMarkup = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, make([]byte, postIndex-iNdEx))
			copy(m.Entities[len(m.Entities)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromkeyId", wireType)
			}
			m.FromkeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromkeyId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeChat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeChat = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViaBotId", wireType)
			}
			m.ViaBotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ViaBotId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendVoteReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendVoteReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendVoteReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peer = append(m.Peer[:0], dAtA[iNdEx:postIndex]...)
			if m.Peer == nil {
				m.Peer = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Options = append(m.Options, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKey", wireType)
			}
			m.FromKey = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKey |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendVoteReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendVoteReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendVoteReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = append(m.Reply[:0], dAtA[iNdEx:postIndex]...)
			if m.Reply == nil {
				m.Reply = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSySSendMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSySSendMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSySSendMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoWebpage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoWebpage = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Background", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Background = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearDraft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClearDraft = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peer = append(m.Peer[:0], dAtA[iNdEx:postIndex]...)
			if m.Peer == nil {
				m.Peer = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyToMsgId", wireType)
			}
			m.ReplyToMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyToMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
			m.RandomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyMarkup", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyMarkup = append(m.ReplyMarkup[:0], dAtA[iNdEx:postIndex]...)
			if m.ReplyMarkup == nil {
				m.ReplyMarkup = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, make([]byte, postIndex-iNdEx))
			copy(m.Entities[len(m.Entities)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChatMember = append(m.ChatMember, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPbmessageserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPbmessageserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChatMember = append(m.ChatMember, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatMember", wireType)
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromkeyId", wireType)
			}
			m.FromkeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromkeyId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqS2SMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqS2SMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqS2SMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithidType", wireType)
			}
			m.WithidType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithidType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageType", wireType)
			}
			m.MessageType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Out", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Out = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mentioned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mentioned = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaUnread", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MediaUnread = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Post", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Post = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToId", wireType)
			}
			m.ToId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FwdFrom", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FwdFrom = append(m.FwdFrom[:0], dAtA[iNdEx:postIndex]...)
			if m.FwdFrom == nil {
				m.FwdFrom = []byte{}
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViaBotId", wireType)
			}
			m.ViaBotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ViaBotId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyToMsgId", wireType)
			}
			m.ReplyToMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyToMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			m.Media = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Media |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meidadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meidadata = append(m.Meidadata[:0], dAtA[iNdEx:postIndex]...)
			if m.Meidadata == nil {
				m.Meidadata = []byte{}
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyMarkup", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyMarkup = append(m.ReplyMarkup[:0], dAtA[iNdEx:postIndex]...)
			if m.ReplyMarkup == nil {
				m.ReplyMarkup = []byte{}
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, make([]byte, postIndex-iNdEx))
			copy(m.Entities[len(m.Entities)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Views", wireType)
			}
			m.Views = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Views |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditDate", wireType)
			}
			m.EditDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EditDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = append(m.Action[:0], dAtA[iNdEx:postIndex]...)
			if m.Action == nil {
				m.Action = []byte{}
			}
			iNdEx = postIndex
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			m.Uuid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uuid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			m.Encry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groupid", wireType)
			}
			m.Groupid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Groupid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyUuid", wireType)
			}
			m.ReplyUuid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyUuid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyS2SMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyS2SMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyS2SMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			m.Reply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reply |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSendMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSendMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSendMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Background", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Background = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearDraft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClearDraft = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peer = append(m.Peer[:0], dAtA[iNdEx:postIndex]...)
			if m.Peer == nil {
				m.Peer = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyToMsgId", wireType)
			}
			m.ReplyToMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyToMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Media = append(m.Media[:0], dAtA[iNdEx:postIndex]...)
			if m.Media == nil {
				m.Media = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiMedia", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MultiMedia = append(m.MultiMedia, make([]byte, postIndex-iNdEx))
			copy(m.MultiMedia[len(m.MultiMedia)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
			m.RandomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyMarkup", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyMarkup = append(m.ReplyMarkup[:0], dAtA[iNdEx:postIndex]...)
			if m.ReplyMarkup == nil {
				m.ReplyMarkup = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Newfileid", wireType)
			}
			m.Newfileid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Newfileid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, make([]byte, postIndex-iNdEx))
			copy(m.Entities[len(m.Entities)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromkeyId", wireType)
			}
			m.FromkeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromkeyId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Chatmeber = append(m.Chatmeber, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPbmessageserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPbmessageserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Chatmeber = append(m.Chatmeber, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Chatmeber", wireType)
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViaBotId", wireType)
			}
			m.ViaBotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ViaBotId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUploadMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUploadMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUploadMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peer = append(m.Peer[:0], dAtA[iNdEx:postIndex]...)
			if m.Peer == nil {
				m.Peer = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Media = append(m.Media[:0], dAtA[iNdEx:postIndex]...)
			if m.Media == nil {
				m.Media = []byte{}
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqForwardMessages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqForwardMessages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqForwardMessages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Background", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Background = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithMyScore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithMyScore = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromPeer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromPeer = append(m.FromPeer[:0], dAtA[iNdEx:postIndex]...)
			if m.FromPeer == nil {
				m.FromPeer = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPbmessageserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPbmessageserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		case 8:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RandomId = append(m.RandomId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPbmessageserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPbmessageserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RandomId = append(m.RandomId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToPeer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToPeer = append(m.ToPeer[:0], dAtA[iNdEx:postIndex]...)
			if m.ToPeer == nil {
				m.ToPeer = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyForwardMessages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyForwardMessages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyForwardMessages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Msg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Msg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Msg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToId = append(m.ToId[:0], dAtA[iNdEx:postIndex]...)
			if m.ToId == nil {
				m.ToId = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FwdFrom", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FwdFrom = append(m.FwdFrom[:0], dAtA[iNdEx:postIndex]...)
			if m.FwdFrom == nil {
				m.FwdFrom = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViaBotId", wireType)
			}
			m.ViaBotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ViaBotId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyToMsgId", wireType)
			}
			m.ReplyToMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyToMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Media = append(m.Media[:0], dAtA[iNdEx:postIndex]...)
			if m.Media == nil {
				m.Media = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaType", wireType)
			}
			m.MediaType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MediaType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyMarkup", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyMarkup = append(m.ReplyMarkup[:0], dAtA[iNdEx:postIndex]...)
			if m.ReplyMarkup == nil {
				m.ReplyMarkup = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, make([]byte, postIndex-iNdEx))
			copy(m.Entities[len(m.Entities)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Views", wireType)
			}
			m.Views = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Views |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditDate", wireType)
			}
			m.EditDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EditDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = append(m.Action[:0], dAtA[iNdEx:postIndex]...)
			if m.Action == nil {
				m.Action = []byte{}
			}
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Randomid", wireType)
			}
			m.Randomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Randomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetMsgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetMsgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetMsgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPbmessageserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPbmessageserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetMsgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetMsgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetMsgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selfid", wireType)
			}
			m.Selfid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Selfid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peer = append(m.Peer[:0], dAtA[iNdEx:postIndex]...)
			if m.Peer == nil {
				m.Peer = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetId", wireType)
			}
			m.OffsetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetDate", wireType)
			}
			m.OffsetDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddOffset", wireType)
			}
			m.AddOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddOffset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinId", wireType)
			}
			m.MinId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCreateChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCreateChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCreateChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chatid", wireType)
			}
			m.Chatid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chatid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			m.Creator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Creator |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Users = append(m.Users, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPbmessageserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPbmessageserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Users = append(m.Users, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyCreateChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyCreateChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyCreateChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqAddChatUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqAddChatUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqAddChatUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chatid", wireType)
			}
			m.Chatid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chatid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fwdlimit", wireType)
			}
			m.Fwdlimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fwdlimit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteType", wireType)
			}
			m.InviteType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InviteType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyAddChatUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyAddChatUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyAddChatUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDeleteChatUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDeleteChatUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDeleteChatUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chatid", wireType)
			}
			m.Chatid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chatid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyDeleteChatUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyDeleteChatUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyDeleteChatUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqEditChatAdmin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqEditChatAdmin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqEditChatAdmin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chatid", wireType)
			}
			m.Chatid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chatid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdmin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAdmin = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyEditChatAdmin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyEditChatAdmin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyEditChatAdmin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqEditChatTitle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqEditChatTitle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqEditChatTitle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chatid", wireType)
			}
			m.Chatid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chatid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyEditChatTitle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyEditChatTitle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyEditChatTitle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetAllChats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetAllChats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetAllChats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetAllChats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetAllChats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetAllChats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Chats = append(m.Chats, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPbmessageserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPbmessageserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Chats = append(m.Chats, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Chats", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetFullChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetFullChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetFullChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chatid", wireType)
			}
			m.Chatid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chatid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetFullChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetFullChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetFullChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqEditChatPhoto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqEditChatPhoto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqEditChatPhoto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chatid", wireType)
			}
			m.Chatid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chatid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = append(m.Photo[:0], dAtA[iNdEx:postIndex]...)
			if m.Photo == nil {
				m.Photo = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyEditChatPhoto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyEditChatPhoto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyEditChatPhoto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqMigrateChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqMigrateChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqMigrateChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chatid", wireType)
			}
			m.Chatid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chatid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromkeyid", wireType)
			}
			m.Fromkeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromkeyid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyMigrateChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyMigrateChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyMigrateChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqReadHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqReadHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqReadHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selfid", wireType)
			}
			m.Selfid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Selfid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peer = append(m.Peer[:0], dAtA[iNdEx:postIndex]...)
			if m.Peer == nil {
				m.Peer = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyReadHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyReadHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyReadHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateReadOut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateReadOut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateReadOut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyUpdateReadOut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyUpdateReadOut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyUpdateReadOut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maxid", wireType)
			}
			m.Maxid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Maxid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDiffByPts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDiffByPts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDiffByPts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PtsTotalLimit", wireType)
			}
			m.PtsTotalLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PtsTotalLimit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qts", wireType)
			}
			m.Qts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyDiffByPts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyDiffByPts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyDiffByPts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usetime", wireType)
			}
			m.Usetime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Usetime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDeleteHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDeleteHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDeleteHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JustClear", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.JustClear = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peer = append(m.Peer[:0], dAtA[iNdEx:postIndex]...)
			if m.Peer == nil {
				m.Peer = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyDeleteHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyDeleteHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyDeleteHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PtsCount", wireType)
			}
			m.PtsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PtsCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDeleteMessages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDeleteMessages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDeleteMessages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revoke", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Revoke = bool(v != 0)
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPbmessageserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPbmessageserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channelid", wireType)
			}
			m.Channelid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channelid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyDeleteMessages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyDeleteMessages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyDeleteMessages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqEditMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqEditMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqEditMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FormId", wireType)
			}
			m.FormId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FormId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoWebpage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoWebpage = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopGeoLive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StopGeoLive = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peer = append(m.Peer[:0], dAtA[iNdEx:postIndex]...)
			if m.Peer == nil {
				m.Peer = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyMarkup", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyMarkup = append(m.ReplyMarkup[:0], dAtA[iNdEx:postIndex]...)
			if m.ReplyMarkup == nil {
				m.ReplyMarkup = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, make([]byte, postIndex-iNdEx))
			copy(m.Entities[len(m.Entities)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeoPoint", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GeoPoint = append(m.GeoPoint[:0], dAtA[iNdEx:postIndex]...)
			if m.GeoPoint == nil {
				m.GeoPoint = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViaBotId", wireType)
			}
			m.ViaBotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ViaBotId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyEditMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyEditMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyEditMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateEditMessage", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateEditMessage = append(m.UpdateEditMessage[:0], dAtA[iNdEx:postIndex]...)
			if m.UpdateEditMessage == nil {
				m.UpdateEditMessage = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqNotifySettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqNotifySettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqNotifySettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peer = append(m.Peer[:0], dAtA[iNdEx:postIndex]...)
			if m.Peer == nil {
				m.Peer = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyNotifySettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyNotifySettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyNotifySettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowPreviews", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowPreviews = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MuteUntil", wireType)
			}
			m.MuteUntil = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MuteUntil |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sound", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sound = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateNotifySettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateNotifySettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateNotifySettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peer = append(m.Peer[:0], dAtA[iNdEx:postIndex]...)
			if m.Peer == nil {
				m.Peer = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Settings = append(m.Settings[:0], dAtA[iNdEx:postIndex]...)
			if m.Settings == nil {
				m.Settings = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyUpdateNotifySettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyUpdateNotifySettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyUpdateNotifySettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqMessageEditData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqMessageEditData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqMessageEditData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Layer", wireType)
			}
			m.Layer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Layer |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peer = append(m.Peer[:0], dAtA[iNdEx:postIndex]...)
			if m.Peer == nil {
				m.Peer = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyMessageEditData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyMessageEditData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyMessageEditData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caption", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Caption = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSaveMsgDraft) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSaveMsgDraft: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSaveMsgDraft: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selfid", wireType)
			}
			m.Selfid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Selfid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Layer", wireType)
			}
			m.Layer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Layer |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoWebpage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoWebpage = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyToMsgId", wireType)
			}
			m.ReplyToMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyToMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peer = append(m.Peer[:0], dAtA[iNdEx:postIndex]...)
			if m.Peer == nil {
				m.Peer = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, make([]byte, postIndex-iNdEx))
			copy(m.Entities[len(m.Entities)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplySaveMsgDraft) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplySaveMsgDraft: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplySaveMsgDraft: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Reply = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetUserUnRead) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetUserUnRead: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetUserUnRead: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyid", wireType)
			}
			m.Keyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Keyid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyUserUnread) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyUserUnread: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyUserUnread: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unread", wireType)
			}
			m.Unread = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Unread |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InputChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InputChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InputChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputChannelEmpty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InputChannelEmpty == nil {
				m.InputChannelEmpty = &InputChannelEmpty{}
			}
			if err := m.InputChannelEmpty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputChannelinputChannel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InputChannelinputChannel == nil {
				m.InputChannelinputChannel = &InputChannelinputChannel{}
			}
			if err := m.InputChannelinputChannel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InputChannelEmpty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InputChannelEmpty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InputChannelEmpty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InputChannelinputChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InputChannelinputChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InputChannelinputChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageActionEditChannelPhoto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageActionEditChannelPhoto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageActionEditChannelPhoto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pothosize", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pothosize = append(m.Pothosize[:0], dAtA[iNdEx:postIndex]...)
			if m.Pothosize == nil {
				m.Pothosize = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageActionEditChannelAbout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageActionEditChannelAbout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageActionEditChannelAbout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageActionDeleteChannelMessages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageActionDeleteChannelMessages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageActionDeleteChannelMessages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageActionDeleteChannelHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageActionDeleteChannelHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageActionDeleteChannelHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = append(m.UserId[:0], dAtA[iNdEx:postIndex]...)
			if m.UserId == nil {
				m.UserId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageActionUpdatePinnedChannelMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageActionUpdatePinnedChannelMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageActionUpdatePinnedChannelMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageActionCheckChannelUsername) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageActionCheckChannelUsername: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageActionCheckChannelUsername: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageActionUpdateChannelUsername) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageActionUpdateChannelUsername: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageActionUpdateChannelUsername: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageActionExportChannelInvite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageActionExportChannelInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageActionExportChannelInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageActionDeleteChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageActionDeleteChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageActionDeleteChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageActionChannelCreate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageActionChannelCreate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageActionChannelCreate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageActionAddChannelUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageActionAddChannelUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageActionAddChannelUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserId = append(m.UserId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPbmessageserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPbmessageserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserId = append(m.UserId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageActionDeleteChannelUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageActionDeleteChannelUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageActionDeleteChannelUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageActionUserLeaveChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageActionUserLeaveChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageActionUserLeaveChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageActionEditChannelTitle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: messageActionEditChannelTitle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: messageActionEditChannelTitle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserStatusOnline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserStatusOnline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserStatusOnline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expires", wireType)
			}
			m.Expires = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expires |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserStatusOffline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserStatusOffline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserStatusOffline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WasOnline", wireType)
			}
			m.WasOnline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WasOnline |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserStatusLastMonth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserStatusLastMonth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserStatusLastMonth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastMonth", wireType)
			}
			m.LastMonth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastMonth |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Online == nil {
				m.Online = &UserStatusOnline{}
			}
			if err := m.Online.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Offline == nil {
				m.Offline = &UserStatusOffline{}
			}
			if err := m.Offline.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastMonth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastMonth == nil {
				m.LastMonth = &UserStatusLastMonth{}
			}
			if err := m.LastMonth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User_info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User_info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Self", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Self = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contact", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Contact = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MutualContact", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MutualContact = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bot = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotChatHistory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotChatHistory = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotNoChats", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotNoChats = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verified = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Restricted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Restricted = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Min = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotInlineGeo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotInlineGeo = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Firstname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Firstname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lastname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lastname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = append(m.Photo[:0], dAtA[iNdEx:postIndex]...)
			if m.Photo == nil {
				m.Photo = []byte{}
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotInfoVersion", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotInfoVersion = bool(v != 0)
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestrictionReason", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RestrictionReason = bool(v != 0)
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotInlinePlaceholder", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotInlinePlaceholder = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Channel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Channel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Channel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Creator = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kicked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Kicked = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Left", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Left = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Editor", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Editor = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moderator", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Moderator = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Broadcast", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Broadcast = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verified = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Megagroup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Megagroup = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Restricted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Restricted = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Democracy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Democracy = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Signatures = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Min = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			m.Photo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Photo |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestrictionReason", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RestrictionReason = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateNewChannelMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateNewChannelMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateNewChannelMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Out", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Out = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mentioned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mentioned = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaUnread", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MediaUnread = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Post", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Post = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToId", wireType)
			}
			m.ToId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyToMsgId", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReplyToMsgId = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = append(m.Action[:0], dAtA[iNdEx:postIndex]...)
			if m.Action == nil {
				m.Action = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PtsCount", wireType)
			}
			m.PtsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PtsCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadCast", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BroadCast = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Megagroup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Megagroup = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyMsgId", wireType)
			}
			m.ReplyMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyMsgId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BanAddContact", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BanAddContact = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = append(m.Reply[:0], dAtA[iNdEx:postIndex]...)
			if m.Reply == nil {
				m.Reply = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestChannelInvite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestChannelInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestChannelInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PeerId = append(m.PeerId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPbmessageserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPbmessageserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PeerId = append(m.PeerId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyChannelInvite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyChannelInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyChannelInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = append(m.Reply[:0], dAtA[iNdEx:postIndex]...)
			if m.Reply == nil {
				m.Reply = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqJoinChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqJoinChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqJoinChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByLink", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ByLink = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invitor", wireType)
			}
			m.Invitor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Invitor |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteType", wireType)
			}
			m.InviteType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InviteType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyJoinChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyJoinChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyJoinChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = append(m.Reply[:0], dAtA[iNdEx:postIndex]...)
			if m.Reply == nil {
				m.Reply = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChannelKick) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChannelKick: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChannelKick: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kicker", wireType)
			}
			m.Kicker = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kicker |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kickee", wireType)
			}
			m.Kickee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kickee |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBotUser", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBotUser = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsKicked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsKicked = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KickedId", wireType)
			}
			m.KickedId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KickedId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyChannelKick) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyChannelKick: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyChannelKick: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = append(m.Reply[:0], dAtA[iNdEx:postIndex]...)
			if m.Reply == nil {
				m.Reply = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqLeaveChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqLeaveChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqLeaveChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyLeaveChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyLeaveChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyLeaveChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = append(m.Reply[:0], dAtA[iNdEx:postIndex]...)
			if m.Reply == nil {
				m.Reply = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqEditChannelTitle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqEditChannelTitle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqEditChannelTitle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyEditChannelTitle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyEditChannelTitle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyEditChannelTitle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = append(m.Reply[:0], dAtA[iNdEx:postIndex]...)
			if m.Reply == nil {
				m.Reply = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqEditChannelAdmin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqEditChannelAdmin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqEditChannelAdmin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = append(m.Role[:0], dAtA[iNdEx:postIndex]...)
			if m.Role == nil {
				m.Role = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rank = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyEditChannelAdmin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyEditChannelAdmin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyEditChannelAdmin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = append(m.Reply[:0], dAtA[iNdEx:postIndex]...)
			if m.Reply == nil {
				m.Reply = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqEditChannelPhoto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqEditChannelPhoto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqEditChannelPhoto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = append(m.Photo[:0], dAtA[iNdEx:postIndex]...)
			if m.Photo == nil {
				m.Photo = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyEditChannelPhoto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyEditChannelPhoto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyEditChannelPhoto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = append(m.Reply[:0], dAtA[iNdEx:postIndex]...)
			if m.Reply == nil {
				m.Reply = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatInviteExported) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: chatInviteExported: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: chatInviteExported: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqEditChannelAbout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqEditChannelAbout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqEditChannelAbout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyEditChannelAbout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyEditChannelAbout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyEditChannelAbout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Succeed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Succeed = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDeleteChannelMessages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDeleteChannelMessages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDeleteChannelMessages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPbmessageserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPbmessageserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyDeleteChannelMessages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyDeleteChannelMessages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyDeleteChannelMessages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgid", wireType)
			}
			m.Msgid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Msgid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PtsCount", wireType)
			}
			m.PtsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PtsCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDeleteChannelSelfHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDeleteChannelSelfHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDeleteChannelSelfHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDeleteChannelHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDeleteChannelHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDeleteChannelHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsreId", wireType)
			}
			m.UsreId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsreId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyDeleteChannelHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyDeleteChannelHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyDeleteChannelHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdatePinnedChannelMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdatePinnedChannelMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdatePinnedChannelMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyUpdatePinnedChannelMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyUpdatePinnedChannelMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyUpdatePinnedChannelMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = append(m.Reply[:0], dAtA[iNdEx:postIndex]...)
			if m.Reply == nil {
				m.Reply = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDeleteChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDeleteChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDeleteChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyDeleteChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyDeleteChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyDeleteChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Send", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Send = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = append(m.Reply[:0], dAtA[iNdEx:postIndex]...)
			if m.Reply == nil {
				m.Reply = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqReadChannelHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqReadChannelHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqReadChannelHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopMsgId", wireType)
			}
			m.TopMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyReadChannelHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyReadChannelHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyReadChannelHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOk", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOk = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateChannelReadOut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateChannelReadOut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateChannelReadOut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyUpdateChannelReadOut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyUpdateChannelReadOut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyUpdateChannelReadOut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maxid", wireType)
			}
			m.Maxid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Maxid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetchannelDifference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetchannelDifference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetchannelDifference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Force = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range_MinId", wireType)
			}
			m.Range_MinId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Range_MinId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range_MaxId", wireType)
			}
			m.Range_MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Range_MaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			m.Device = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Device |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyChannelDiffCommon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyChannelDiffCommon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyChannelDiffCommon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Difference", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Difference = append(m.Difference[:0], dAtA[iNdEx:postIndex]...)
			if m.Difference == nil {
				m.Difference = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetChannelDifferenceEmpty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetChannelDifferenceEmpty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetChannelDifferenceEmpty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Final", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Final = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetChannelDifference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetChannelDifference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetChannelDifference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Final", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Final = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msgs = append(m.Msgs, make([]byte, postIndex-iNdEx))
			copy(m.Msgs[len(m.Msgs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetChannelDifferenceTooLong) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetChannelDifferenceTooLong: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetChannelDifferenceTooLong: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Final", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Final = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopMessage", wireType)
			}
			m.TopMessage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopMessage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadInboxMaxId", wireType)
			}
			m.ReadInboxMaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadInboxMaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOutboxMaxId", wireType)
			}
			m.ReadOutboxMaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadOutboxMaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadCount", wireType)
			}
			m.UnreadCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msgs = append(m.Msgs, make([]byte, postIndex-iNdEx))
			copy(m.Msgs[len(m.Msgs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelMsgHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelMsgHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelMsgHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetId", wireType)
			}
			m.OffsetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetDate", wireType)
			}
			m.OffsetDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddOffset", wireType)
			}
			m.AddOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddOffset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinId", wireType)
			}
			m.MinId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyChannelMsgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyChannelMsgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyChannelMsgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqParticipants) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqParticipants: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqParticipants: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffSet", wireType)
			}
			m.OffSet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffSet |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartiType", wireType)
			}
			m.PartiType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartiType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Q = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyParticipants) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyParticipants: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyParticipants: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updates = append(m.Updates[:0], dAtA[iNdEx:postIndex]...)
			if m.Updates == nil {
				m.Updates = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqParticipant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqParticipant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqParticipant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channelid", wireType)
			}
			m.Channelid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channelid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyParticipant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyParticipant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyParticipant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updates = append(m.Updates[:0], dAtA[iNdEx:postIndex]...)
			if m.Updates == nil {
				m.Updates = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelMsgsByMsgsId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelMsgsByMsgsId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelMsgsByMsgsId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MsgsId = append(m.MsgsId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPbmessageserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPbmessageserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MsgsId = append(m.MsgsId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgsId", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelCommonDialogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelCommonDialogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelCommonDialogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChannIds = append(m.ChannIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPbmessageserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPbmessageserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChannIds = append(m.ChannIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannIds", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelDialog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopMessage", wireType)
			}
			m.TopMessage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopMessage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxReadInId", wireType)
			}
			m.MaxReadInId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxReadInId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			m.Encry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelDialogAndMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelDialogAndMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelDialogAndMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelDialog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelDialog == nil {
				m.ChannelDialog = &ChannelDialog{}
			}
			if err := m.ChannelDialog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelMsg == nil {
				m.ChannelMsg = &UserMsg{}
			}
			if err := m.ChannelMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelDialogAndMsgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelDialogAndMsgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelDialogAndMsgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelDialogAndMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelDialogAndMsg = append(m.ChannelDialogAndMsg, &ChannelDialogAndMsg{})
			if err := m.ChannelDialogAndMsg[len(m.ChannelDialogAndMsg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithIdType", wireType)
			}
			m.WithIdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithIdType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageType", wireType)
			}
			m.MessageType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Out", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Out = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mentioned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mentioned = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaUnread", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MediaUnread = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Post", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Post = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToId", wireType)
			}
			m.ToId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FwdFrom", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FwdFrom = append(m.FwdFrom[:0], dAtA[iNdEx:postIndex]...)
			if m.FwdFrom == nil {
				m.FwdFrom = []byte{}
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViaBotId", wireType)
			}
			m.ViaBotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ViaBotId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyToMsgId", wireType)
			}
			m.ReplyToMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyToMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			m.Media = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Media |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaData = append(m.MediaData[:0], dAtA[iNdEx:postIndex]...)
			if m.MediaData == nil {
				m.MediaData = []byte{}
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyMarkup", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyMarkup = append(m.ReplyMarkup[:0], dAtA[iNdEx:postIndex]...)
			if m.ReplyMarkup == nil {
				m.ReplyMarkup = []byte{}
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, make([]byte, postIndex-iNdEx))
			copy(m.Entities[len(m.Entities)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Views", wireType)
			}
			m.Views = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Views |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditDate", wireType)
			}
			m.EditDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EditDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = append(m.Action[:0], dAtA[iNdEx:postIndex]...)
			if m.Action == nil {
				m.Action = []byte{}
			}
			iNdEx = postIndex
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
			m.RandomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			m.Uuid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uuid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsertDate", wireType)
			}
			m.InsertDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InsertDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateDate", wireType)
			}
			m.UpdateDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			m.Encry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestWebPMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestWebPMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestWebPMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyIdNum", wireType)
			}
			m.KeyIdNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyIdNum |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcId", wireType)
			}
			m.DcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DcId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyRequestWebPagePreview) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyRequestWebPagePreview: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyRequestWebPagePreview: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebPage", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebPage = append(m.WebPage[:0], dAtA[iNdEx:postIndex]...)
			if m.WebPage == nil {
				m.WebPage = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Reqpushusermsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reqpushusermsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reqpushusermsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushUserId", wireType)
			}
			m.PushUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PushUserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PushType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Toid", wireType)
			}
			m.Toid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Toid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgid", wireType)
			}
			m.Msgid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Msgid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Reply = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqMessageSearch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqMessageSearch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqMessageSearch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peer = append(m.Peer[:0], dAtA[iNdEx:postIndex]...)
			if m.Peer == nil {
				m.Peer = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Q = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = append(m.Filter[:0], dAtA[iNdEx:postIndex]...)
			if m.Filter == nil {
				m.Filter = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDate", wireType)
			}
			m.MinDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDate", wireType)
			}
			m.MaxDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyMessageSearch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyMessageSearch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyMessageSearch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retype", wireType)
			}
			m.Retype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Retype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message, &UserMsg{})
			if err := m.Message[len(m.Message)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCheckChatInvite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCheckChatInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCheckChatInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelsLastMsgsByUserId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelsLastMsgsByUserId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelsLastMsgsByUserId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetChannelsLastMsgsByUserId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetChannelsLastMsgsByUserId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetChannelsLastMsgsByUserId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMsgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserMsgs = append(m.UserMsgs, &UserMsg{})
			if err := m.UserMsgs[len(m.UserMsgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChannelAdminLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChannelAdminLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChannelAdminLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Q = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EventFilter == nil {
				m.EventFilter = &ChannelAdminLogEventFilter{}
			}
			if err := m.EventFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Admins = append(m.Admins, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPbmessageserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPbmessageserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Admins = append(m.Admins, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Admins", wireType)
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinId", wireType)
			}
			m.MinId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelAdminLogEventFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelAdminLogEventFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelAdminLogEventFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Join", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Join = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leave", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Leave = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invite", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Invite = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ban", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ban = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unban", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Unban = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kick", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Kick = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unkick", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Unkick = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Promote", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Promote = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Demote", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Demote = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Info = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Setting", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Setting = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pinned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pinned = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Edit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Edit = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Delete = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyChannelAdminLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyChannelAdminLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyChannelAdminLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminLogResults", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminLogResults = append(m.AdminLogResults[:0], dAtA[iNdEx:postIndex]...)
			if m.AdminLogResults == nil {
				m.AdminLogResults = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqImportChatInvite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqImportChatInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqImportChatInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyImportChatInvite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyImportChatInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyImportChatInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updates = append(m.Updates[:0], dAtA[iNdEx:postIndex]...)
			if m.Updates == nil {
				m.Updates = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqBanChannelUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqBanChannelUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqBanChannelUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BannedUserId", wireType)
			}
			m.BannedUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BannedUserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UtilDate", wireType)
			}
			m.UtilDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UtilDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelBannedRights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelBannedRights == nil {
				m.ChannelBannedRights = &ChannelBannedRights{}
			}
			if err := m.ChannelBannedRights.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyBanChannelUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyBanChannelUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyBanChannelUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updates = append(m.Updates[:0], dAtA[iNdEx:postIndex]...)
			if m.Updates == nil {
				m.Updates = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelBannedRights) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelBannedRights: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelBannedRights: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewMessages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ViewMessages = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendMessages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendMessages = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendMedia", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendMedia = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendStickers", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendStickers = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendGifs", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendGifs = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendGames", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendGames = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendInline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendInline = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmbedLinks", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EmbedLinks = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UntilDate", wireType)
			}
			m.UntilDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UntilDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteUser", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InviteUser = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PinMessage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PinMessage = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeGroupInfo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChangeGroupInfo = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendPolls", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendPolls = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqFullchannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqFullchannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqFullchannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqExportChannelLink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqExportChannelLink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqExportChannelLink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyExportChannelLink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyExportChannelLink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyExportChannelLink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exported", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exported = append(m.Exported[:0], dAtA[iNdEx:postIndex]...)
			if m.Exported == nil {
				m.Exported = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChannelToggleInvite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChannelToggleInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChannelToggleInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyChannelToggleInvite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyChannelToggleInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyChannelToggleInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = append(m.Reply[:0], dAtA[iNdEx:postIndex]...)
			if m.Reply == nil {
				m.Reply = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChannelUpdateUserName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChannelUpdateUserName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChannelUpdateUserName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyChannelUpdateUserName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyChannelUpdateUserName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyChannelUpdateUserName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Updated = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChannelCheckUserName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChannelCheckUserName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChannelCheckUserName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyChannelCheckUserName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyChannelCheckUserName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyChannelCheckUserName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChangeGroupAndChannelCrator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChangeGroupAndChannelCrator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChangeGroupAndChannelCrator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			m.OperatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsChat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsChat = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyChangeGroupAndChannelCrator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyChangeGroupAndChannelCrator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyChangeGroupAndChannelCrator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannels) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannels: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannels: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChannelIds = append(m.ChannelIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPbmessageserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPbmessageserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChannelIds = append(m.ChannelIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelIds", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetChannels) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetChannels: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetChannels: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = append(m.Reply[:0], dAtA[iNdEx:postIndex]...)
			if m.Reply == nil {
				m.Reply = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyFullChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyFullChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyFullChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updates = append(m.Updates[:0], dAtA[iNdEx:postIndex]...)
			if m.Updates == nil {
				m.Updates = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetMessageByUserIdMsgId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetMessageByUserIdMsgId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetMessageByUserIdMsgId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetMessageByUserIdMsgId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetMessageByUserIdMsgId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetMessageByUserIdMsgId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserMessage == nil {
				m.UserMessage = &messagedb.UserMsg{}
			}
			if err := m.UserMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetMessageByUserIdUuid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetMessageByUserIdUuid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetMessageByUserIdUuid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			m.Uuid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uuid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetMessageByUserIdUuid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetMessageByUserIdUuid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetMessageByUserIdUuid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserMessage == nil {
				m.UserMessage = &messagedb.UserMsg{}
			}
			if err := m.UserMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelMessageByChannelIdMsgId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelMessageByChannelIdMsgId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelMessageByChannelIdMsgId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetChannelMessageByChannelIdMsgId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetChannelMessageByChannelIdMsgId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetChannelMessageByChannelIdMsgId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserMessage == nil {
				m.UserMessage = &messagedb.UserMsg{}
			}
			if err := m.UserMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyStoreOtherInfoMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyStoreOtherInfoMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyStoreOtherInfoMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyBatchStoreOtherInfoMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyBatchStoreOtherInfoMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyBatchStoreOtherInfoMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetOtherInfoMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetOtherInfoMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetOtherInfoMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherInfoMsgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OtherInfoMsgs = append(m.OtherInfoMsgs, &messagedb.OtherInfoMsg{})
			if err := m.OtherInfoMsgs[len(m.OtherInfoMsgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetUsersChatsMt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetUsersChatsMt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetUsersChatsMt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfUserid", wireType)
			}
			m.SelfUserid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfUserid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UseridArr = append(m.UseridArr, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPbmessageserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPbmessageserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UseridArr = append(m.UseridArr, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UseridArr", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChatidArr = append(m.ChatidArr, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPbmessageserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPbmessageserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChatidArr = append(m.ChatidArr, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatidArr", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetUsersChatsMt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetUsersChatsMt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetUsersChatsMt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users[:0], dAtA[iNdEx:postIndex]...)
			if m.Users == nil {
				m.Users = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chats", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chats = append(m.Chats[:0], dAtA[iNdEx:postIndex]...)
			if m.Chats == nil {
				m.Chats = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyCode", wireType)
			}
			m.ReplyCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGifQueryAndUpload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGifQueryAndUpload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGifQueryAndUpload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GifId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GifId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGifQueryAndUpload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGifQueryAndUpload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGifQueryAndUpload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Error = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &FidData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FidData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FidData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FidData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			m.FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSize |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGifSearchApi) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGifSearchApi: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGifSearchApi: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Q = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGifSearchApi) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGifSearchApi: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGifSearchApi: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Error = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &SearchData{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &Pagination{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThumbUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pagination) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pagination: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pagination: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqReceiveRedPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqReceiveRedPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqReceiveRedPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			m.PeerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerAccessHash", wireType)
			}
			m.PeerAccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerAccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedPacketId", wireType)
			}
			m.RedPacketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedPacketId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyReceiveRedPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyReceiveRedPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyReceiveRedPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetWebPage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetWebPage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetWebPage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetWebPage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetWebPage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetWebPage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Error = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebPage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WebPage == nil {
				m.WebPage = &WebPage{}
			}
			if err := m.WebPage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebPage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebPage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebPage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SiteName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmbedUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmbedUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmbedType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmbedType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmbedWidth", wireType)
			}
			m.EmbedWidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EmbedWidth |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmbedHeight", wireType)
			}
			m.EmbedHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EmbedHeight |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetWebPagePreview) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetWebPagePreview: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetWebPagePreview: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetWebPagePreview) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetWebPagePreview: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetWebPagePreview: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Error = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebPage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WebPage == nil {
				m.WebPage = &WebPage{}
			}
			if err := m.WebPage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserScore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserScore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserScore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FoldersEditPeerFoldersReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FoldersEditPeerFoldersReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FoldersEditPeerFoldersReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FolderPeers", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FolderPeers = append(m.FolderPeers, make([]byte, postIndex-iNdEx))
			copy(m.FolderPeers[len(m.FolderPeers)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FoldersEditPeerFoldersReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FoldersEditPeerFoldersReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FoldersEditPeerFoldersReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FoldersDeleteFolderReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FoldersDeleteFolderReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FoldersDeleteFolderReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FolderId", wireType)
			}
			m.FolderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FolderId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FoldersDeleteFolderReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FoldersDeleteFolderReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FoldersDeleteFolderReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSendPaymentNotifyMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSendPaymentNotifyMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSendPaymentNotifyMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Media = append(m.Media[:0], dAtA[iNdEx:postIndex]...)
			if m.Media == nil {
				m.Media = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaType", wireType)
			}
			m.MediaType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MediaType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RspSendPaymentNotifyMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RspSendPaymentNotifyMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RspSendPaymentNotifyMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Successful", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Successful = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSendAddMutulContactNotify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSendAddMutulContactNotify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSendAddMutulContactNotify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespSendAddMutulContactNotify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespSendAddMutulContactNotify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespSendAddMutulContactNotify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sucessful", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sucessful = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSendAddSingleContactNotify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSendAddSingleContactNotify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSendAddSingleContactNotify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToId", wireType)
			}
			m.ToId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespSendAddSingleContactNotify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespSendAddSingleContactNotify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespSendAddSingleContactNotify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Successful", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Successful = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPbmessageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbmessageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPbmessageserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPbmessageserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPbmessageserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPbmessageserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPbmessageserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPbmessageserver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPbmessageserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPbmessageserver   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/pbmessageserver/pbmessageserver.proto", fileDescriptorPbmessageserver)
}

var fileDescriptorPbmessageserver = []byte{
	// 11738 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7d, 0x6d, 0x8c, 0x1c, 0xc9,
	0x75, 0xd8, 0xce, 0xcc, 0xce, 0xee, 0xcc, 0xdb, 0x0f, 0x2e, 0x9b, 0x4b, 0x72, 0x6e, 0x48, 0x2e,
	0xc9, 0x3e, 0xde, 0x1d, 0xef, 0x74, 0xba, 0x93, 0x29, 0x9d, 0xed, 0x8b, 0x64, 0x5b, 0xe4, 0xf2,
	0xb8, 0xb7, 0x22, 0x97, 0xdc, 0xeb, 0x25, 0xef, 0x2c, 0x47, 0xf6, 0xa8, 0x77, 0xba, 0x66, 0xb6,
	0xc5, 0x99, 0xee, 0x61, 0x77, 0xcf, 0x92, 0x6b, 0xcb, 0x50, 0x10, 0xc9, 0x42, 0x10, 0x01, 0x01,
	0x82, 0xc0, 0xb0, 0x01, 0x27, 0x31, 0x02, 0xc3, 0x4a, 0x8c, 0x44, 0x40, 0xec, 0x00, 0x01, 0x64,
	0x24, 0x81, 0x81, 0x40, 0x80, 0x83, 0x20, 0x46, 0x3e, 0x10, 0x20, 0x52, 0x80, 0x44, 0x96, 0x81,
	0x24, 0x08, 0x82, 0xfc, 0x0a, 0xf2, 0xcb, 0x09, 0x82, 0x7a, 0xaf, 0xaa, 0xbb, 0xba, 0xa7, 0xaa,
	0x67, 0x76, 0x8f, 0x27, 0x0b, 0x46, 0xfe, 0xec, 0x4e, 0xbd, 0x7e, 0xf5, 0xf5, 0xea, 0xd5, 0xab,
	0x57, 0xaf, 0x5e, 0xbd, 0x82, 0xcf, 0xf5, 0xfd, 0x64, 0xe0, 0xee, 0xbf, 0xd1, 0x3d, 0x70, 0x93,
	0x98, 0x45, 0x87, 0x2c, 0x7a, 0xc3, 0x1f, 0xbe, 0xe9, 0x07, 0x09, 0x8b, 0x7a, 0x6e, 0x97, 0x8d,
	0xa2, 0x70, 0x7f, 0xdc, 0x7b, 0x73, 0xb4, 0x3f, 0x64, 0x71, 0xec, 0xf6, 0x19, 0xa1, 0x14, 0xd3,
	0x6f, 0x8c, 0xa2, 0x30, 0x09, 0xad, 0x53, 0x05, 0x70, 0xfb, 0x27, 0x67, 0x2c, 0xbc, 0x1b, 0x0e,
	0x87, 0xe2, 0x1f, 0x15, 0xd5, 0xfe, 0xec, 0xf1, 0x9a, 0xe5, 0xed, 0xbf, 0x99, 0xfe, 0xa2, 0x12,
	0xec, 0xdf, 0xaf, 0xc0, 0x59, 0x87, 0x3d, 0xd9, 0x63, 0x81, 0xb7, 0xc3, 0x3c, 0xdf, 0xdd, 0x3b,
	0x8a, 0xef, 0x87, 0x89, 0xdf, 0x3b, 0xb2, 0xd6, 0xa1, 0x3e, 0x8c, 0xfb, 0xdb, 0x5e, 0xab, 0x72,
	0xa5, 0x72, 0xbd, 0xe9, 0x50, 0xc2, 0x3a, 0x07, 0x0b, 0xbd, 0x28, 0x1c, 0x6e, 0x7b, 0xad, 0xea,
	0x95, 0xca, 0xf5, 0xba, 0x23, 0x52, 0xd6, 0x06, 0x40, 0x1c, 0x8e, 0xa3, 0x2e, 0xdb, 0x0c, 0x3d,
	0xd6, 0xaa, 0xe1, 0x37, 0x05, 0x62, 0xb5, 0x60, 0x31, 0x62, 0x4f, 0xc6, 0x2c, 0x4e, 0x5a, 0xf3,
	0x57, 0x2a, 0xd7, 0x97, 0x1d, 0x99, 0xe4, 0xf5, 0x0c, 0xdc, 0x23, 0x16, 0xb5, 0xea, 0x98, 0x89,
	0x12, 0xd6, 0x8b, 0x50, 0xf7, 0xd8, 0xfe, 0xb8, 0xdf, 0x5a, 0xb8, 0x52, 0xb9, 0xbe, 0x74, 0x63,
	0xe5, 0x0d, 0xd1, 0xef, 0xdb, 0x1c, 0xe8, 0xd0, 0x37, 0xfb, 0x13, 0xd0, 0xb8, 0xe3, 0xfa, 0x83,
	0x47, 0x31, 0x8b, 0x2c, 0x0b, 0xe6, 0xc7, 0x31, 0x8b, 0xb0, 0xb5, 0x75, 0x07, 0x7f, 0x5b, 0x6b,
	0x50, 0x1b, 0xc6, 0x7d, 0x6c, 0x69, 0xd3, 0xe1, 0x3f, 0xed, 0x4f, 0xc2, 0xd2, 0xde, 0xb8, 0xdb,
	0x65, 0xcc, 0x3b, 0x46, 0xa6, 0xdf, 0xa8, 0xc0, 0xc6, 0xa6, 0x3b, 0x18, 0xdc, 0x72, 0xbb, 0x8f,
	0x1d, 0x16, 0x8f, 0x34, 0xc4, 0xfa, 0x09, 0x68, 0xf6, 0x44, 0x4b, 0xe2, 0x56, 0xf5, 0x4a, 0xed,
	0xfa, 0xd2, 0x8d, 0x17, 0xde, 0x28, 0x0e, 0xbf, 0x6c, 0xab, 0x93, 0xe1, 0x5a, 0x9f, 0x85, 0x65,
	0xa5, 0x41, 0x71, 0xab, 0x86, 0x79, 0x2f, 0x4e, 0xe4, 0x55, 0x90, 0x9c, 0x5c, 0x0e, 0xdb, 0x81,
	0x73, 0x86, 0x46, 0x5d, 0x84, 0x26, 0x8b, 0xa2, 0x30, 0xc2, 0x21, 0xa1, 0x2e, 0x66, 0x00, 0xab,
	0x0d, 0x0d, 0x4c, 0xec, 0xa4, 0x9d, 0x4d, 0xd3, 0xf6, 0x3f, 0xa8, 0xc0, 0x19, 0x87, 0x3d, 0x79,
	0xc7, 0xf3, 0x93, 0x1d, 0x6a, 0x06, 0x16, 0x6d, 0x9d, 0x87, 0xc5, 0x5e, 0x18, 0x0d, 0x3b, 0xbe,
	0x27, 0xca, 0x5b, 0xe0, 0xc9, 0x6d, 0xcf, 0xba, 0x04, 0xc0, 0x19, 0xa1, 0xf3, 0x98, 0x1d, 0xf9,
	0xc4, 0x1a, 0xf3, 0x4e, 0x93, 0x43, 0xee, 0x72, 0x00, 0xa7, 0xf3, 0x88, 0xb1, 0x08, 0xf9, 0x62,
	0xd9, 0xc1, 0xdf, 0xd6, 0x2a, 0x54, 0x7d, 0x0f, 0x99, 0xa1, 0xee, 0x54, 0x7d, 0x0f, 0xf9, 0x8d,
	0x57, 0x82, 0x7c, 0xb0, 0xec, 0x50, 0x62, 0x36, 0x3e, 0xf8, 0x39, 0x58, 0xe7, 0x24, 0x98, 0x68,
	0xee, 0xeb, 0x70, 0xfa, 0xd1, 0xc8, 0x73, 0x13, 0xa6, 0x7c, 0xc1, 0x86, 0x2f, 0x3b, 0x93, 0x1f,
	0x78, 0x03, 0x90, 0x00, 0x82, 0xb3, 0x29, 0x61, 0x7f, 0xad, 0x02, 0xb0, 0x1d, 0x0c, 0xfc, 0x80,
	0x71, 0x16, 0xe0, 0x48, 0x3b, 0xe9, 0xac, 0xa8, 0x3b, 0x94, 0xe0, 0xb3, 0xe2, 0x4e, 0x6e, 0x56,
	0x50, 0x8a, 0xc3, 0x37, 0x0f, 0xdc, 0x64, 0xdb, 0x13, 0x33, 0x42, 0xa4, 0x38, 0xed, 0xf9, 0xaf,
	0x87, 0x47, 0x23, 0x26, 0x28, 0x90, 0xa6, 0x79, 0x0d, 0xb7, 0x42, 0x9e, 0x45, 0xcc, 0x07, 0x4c,
	0xd8, 0x7d, 0x38, 0xb3, 0x79, 0xe0, 0x06, 0x01, 0x1b, 0x6c, 0x07, 0x6e, 0x37, 0xf1, 0x0f, 0x19,
	0x32, 0x30, 0x11, 0xb1, 0x92, 0x12, 0xd1, 0x82, 0xf9, 0xc0, 0x1d, 0x32, 0x31, 0xa0, 0xf8, 0x9b,
	0xc3, 0x12, 0x7f, 0x28, 0x27, 0x25, 0xfe, 0xe6, 0xd3, 0x91, 0xff, 0xdf, 0x4b, 0x22, 0xac, 0xbf,
	0xe9, 0xc8, 0xa4, 0x7d, 0x00, 0xed, 0x2d, 0x96, 0x68, 0xea, 0x8a, 0x1d, 0xf6, 0x84, 0xb3, 0x54,
	0x57, 0x7c, 0x92, 0xd5, 0x66, 0x00, 0x9c, 0xca, 0xfe, 0xd0, 0x4f, 0x24, 0x05, 0x31, 0xc1, 0x89,
	0xc0, 0x27, 0x96, 0x9f, 0x12, 0x81, 0x52, 0xf6, 0x13, 0xb8, 0x64, 0xac, 0x29, 0x1e, 0x0f, 0x12,
	0xeb, 0x2f, 0x40, 0x7d, 0x8c, 0x93, 0xa2, 0x82, 0x93, 0xe2, 0xda, 0xc4, 0xa4, 0xd0, 0xe4, 0x75,
	0x28, 0x0b, 0x6f, 0x4a, 0x37, 0x1c, 0x07, 0x69, 0x53, 0x30, 0x61, 0x07, 0x70, 0x7e, 0x8b, 0x25,
	0x7b, 0xac, 0x3b, 0x8e, 0xfc, 0xe4, 0xc8, 0x71, 0x03, 0x8f, 0x0f, 0x13, 0xf6, 0xec, 0x2c, 0x2c,
	0x3c, 0x66, 0x47, 0x92, 0xb3, 0x6b, 0x4e, 0xfd, 0x31, 0x3b, 0xda, 0xf6, 0x38, 0xc7, 0x0f, 0xdd,
	0x67, 0x9d, 0x27, 0x49, 0x2c, 0x87, 0x76, 0xe8, 0x3e, 0x7b, 0x2f, 0x89, 0x33, 0xc6, 0xac, 0x95,
	0x30, 0xe6, 0xef, 0x55, 0x90, 0x9a, 0x9a, 0x0a, 0xb1, 0x83, 0x0f, 0x60, 0x91, 0x45, 0x51, 0x57,
	0x4e, 0xcf, 0xd5, 0x1b, 0x6f, 0x4d, 0x74, 0xd1, 0x9c, 0xfb, 0x8d, 0x77, 0xe4, 0x54, 0x76, 0x64,
	0x29, 0x7c, 0x1a, 0x46, 0x88, 0xd5, 0xf1, 0x3d, 0x92, 0x43, 0x35, 0xa7, 0x19, 0xc9, 0x7c, 0xf6,
	0x35, 0x68, 0xa6, 0x99, 0xac, 0x25, 0x58, 0x44, 0x39, 0x12, 0xc7, 0x6b, 0x73, 0x16, 0xc0, 0x02,
	0x97, 0x4e, 0xcc, 0x5b, 0xab, 0xd8, 0x11, 0x5c, 0xb8, 0x17, 0xf6, 0xc3, 0x71, 0x72, 0xdb, 0x8f,
	0x37, 0xdd, 0xc8, 0xbb, 0x39, 0x18, 0xa4, 0x4d, 0x60, 0x4f, 0x38, 0x45, 0x38, 0x89, 0x15, 0x19,
	0xc0, 0x93, 0xdb, 0x9e, 0x42, 0xc1, 0xaa, 0x4a, 0xc1, 0x99, 0x08, 0xc5, 0x45, 0xac, 0xb9, 0x52,
	0x24, 0xd6, 0x5e, 0x91, 0x58, 0x6f, 0x4f, 0x10, 0xab, 0xbc, 0x04, 0x0d, 0xc1, 0x66, 0xa4, 0xc8,
	0x37, 0x2b, 0x70, 0x76, 0x8f, 0x25, 0xef, 0x04, 0xdd, 0xe8, 0x68, 0x94, 0x30, 0xef, 0xe1, 0xd1,
	0xc8, 0x0f, 0xfa, 0x27, 0x21, 0xc6, 0x79, 0x58, 0xe4, 0x6b, 0x75, 0x27, 0x9b, 0x0c, 0x5d, 0x92,
	0x08, 0x97, 0x61, 0xc9, 0xc5, 0xaa, 0x3b, 0x07, 0x6e, 0x7c, 0x80, 0x93, 0xb2, 0xe6, 0x00, 0x81,
	0xde, 0x75, 0xe3, 0x83, 0x8c, 0x8c, 0xf5, 0x12, 0x32, 0xfe, 0x56, 0x05, 0x5a, 0xba, 0x86, 0x22,
	0x01, 0x77, 0x01, 0x50, 0xa4, 0x75, 0x14, 0x1a, 0xfe, 0xd8, 0xe4, 0x42, 0x63, 0xc8, 0xce, 0xa9,
	0xc7, 0x33, 0x2a, 0x4b, 0x88, 0xfd, 0x16, 0x2c, 0x0a, 0xe8, 0x04, 0xed, 0x7a, 0x82, 0x76, 0xd6,
	0x69, 0x58, 0xb9, 0x99, 0xf6, 0xe2, 0x9d, 0x28, 0x5a, 0xab, 0xda, 0xff, 0xbc, 0x02, 0xe7, 0x1d,
	0xe6, 0x7a, 0x69, 0x3d, 0xef, 0xfa, 0x71, 0x12, 0x46, 0x47, 0x3f, 0x5c, 0x82, 0xbe, 0x00, 0x0d,
	0x3e, 0xb3, 0xf9, 0x2a, 0x20, 0x44, 0x2d, 0x9f, 0xe9, 0xb7, 0xdd, 0x84, 0xcd, 0xb6, 0xe8, 0xfc,
	0xdd, 0x0a, 0xb4, 0xf5, 0xbd, 0x40, 0x6a, 0x3b, 0x1a, 0x6a, 0x7f, 0x72, 0x82, 0xda, 0xe6, 0x02,
	0x9e, 0x23, 0xbd, 0xbf, 0x56, 0x81, 0xf5, 0xdb, 0x7e, 0xdc, 0x75, 0x23, 0x59, 0x97, 0x1f, 0x06,
	0xcf, 0x95, 0xd8, 0x29, 0xc1, 0xe6, 0x4b, 0x08, 0xf6, 0x77, 0x2a, 0x70, 0x5e, 0xd3, 0x0c, 0x21,
	0x09, 0x27, 0xa9, 0xf5, 0x89, 0x09, 0x6a, 0x19, 0x72, 0x9f, 0x8c, 0x54, 0xd5, 0x49, 0x52, 0xd5,
	0xec, 0xef, 0x56, 0xe0, 0x3c, 0xd7, 0xa4, 0xd2, 0x31, 0xd9, 0x63, 0xd1, 0xa1, 0xdf, 0x65, 0x82,
	0x5a, 0x31, 0x0b, 0x3c, 0x85, 0x5a, 0x3c, 0xf9, 0x51, 0xb0, 0xe6, 0x05, 0x68, 0xa6, 0x62, 0x1c,
	0x79, 0xb3, 0xe6, 0x34, 0xa4, 0x14, 0xe7, 0xcb, 0xf9, 0x6d, 0x37, 0x71, 0x91, 0x37, 0x97, 0x1d,
	0xfc, 0x9d, 0xd1, 0x7f, 0xb1, 0x84, 0xfe, 0x7f, 0x54, 0x81, 0xb6, 0xbe, 0x6f, 0xc7, 0x60, 0x58,
	0x73, 0x01, 0xba, 0x51, 0xf8, 0x82, 0x61, 0x14, 0x2c, 0x58, 0x75, 0xd8, 0x88, 0xb9, 0x09, 0xf3,
	0x0e, 0xdc, 0xc0, 0x1b, 0xb0, 0xb5, 0x8a, 0xb5, 0x06, 0xcb, 0x5c, 0x07, 0xba, 0x1f, 0x26, 0xef,
	0x3c, 0xf3, 0xe3, 0x64, 0xad, 0xca, 0xb3, 0xdc, 0xde, 0x47, 0xf1, 0xbc, 0x56, 0x9b, 0x1c, 0xac,
	0x79, 0xfb, 0xbf, 0x57, 0x60, 0x3d, 0xd7, 0x9e, 0x3b, 0xfe, 0xe0, 0x47, 0x7d, 0xa4, 0x2c, 0x98,
	0xef, 0xf9, 0x03, 0x86, 0x03, 0xb5, 0xec, 0xe0, 0xef, 0x6c, 0xf4, 0x1a, 0x25, 0xa3, 0xf7, 0x87,
	0x45, 0xce, 0xa4, 0xce, 0x1e, 0x63, 0xf6, 0x18, 0x72, 0xff, 0xf0, 0xc7, 0xed, 0xdf, 0x56, 0x60,
	0x2d, 0xd7, 0x98, 0x3f, 0x0f, 0xb3, 0xeb, 0x0f, 0x2a, 0x70, 0xa6, 0xd0, 0x29, 0x1c, 0x9b, 0xbb,
	0x9a, 0xb1, 0x79, 0xbd, 0x7c, 0x6c, 0xfe, 0xac, 0xc6, 0xe5, 0xab, 0x55, 0x38, 0xc3, 0x61, 0xa3,
	0x24, 0xbf, 0x4c, 0xbc, 0x04, 0xab, 0x23, 0x37, 0x4a, 0xfc, 0xae, 0xcf, 0xff, 0x65, 0x23, 0xb4,
	0xa2, 0x40, 0xb7, 0x3d, 0xeb, 0x75, 0xb0, 0x54, 0xb4, 0xdc, 0xa0, 0xad, 0x29, 0x5f, 0xee, 0x7e,
	0xc8, 0xf1, 0x3b, 0x05, 0xb5, 0xad, 0xce, 0xbe, 0xd8, 0x26, 0x56, 0xb7, 0x6e, 0x59, 0xaf, 0xc0,
	0xa9, 0xbb, 0xec, 0xa8, 0xd3, 0xf3, 0x83, 0x3e, 0x8b, 0x46, 0x91, 0x1f, 0x24, 0x38, 0x7c, 0x35,
	0x67, 0xf5, 0x2e, 0x3b, 0xba, 0x93, 0x41, 0x67, 0x1b, 0xc8, 0xff, 0x5c, 0x85, 0x73, 0x93, 0x54,
	0xc0, 0xb1, 0x7c, 0x01, 0x1a, 0xae, 0x37, 0xf4, 0x83, 0x8c, 0x04, 0x8b, 0x98, 0xc6, 0xee, 0x34,
	0xb6, 0x3a, 0x6e, 0x27, 0x8c, 0x3a, 0xfb, 0xd8, 0xe5, 0x65, 0xa7, 0xbe, 0x75, 0xf3, 0x41, 0x74,
	0xcb, 0xba, 0x0e, 0xa7, 0x1e, 0xcb, 0x56, 0xec, 0xf2, 0x56, 0xdc, 0xc0, 0xfe, 0xd6, 0x9c, 0x22,
	0x58, 0xa5, 0xc8, 0x7c, 0x19, 0x45, 0xea, 0x13, 0x14, 0xb9, 0x9f, 0xe3, 0xb1, 0x05, 0xe4, 0xb1,
	0x37, 0x27, 0x78, 0x4c, 0xdf, 0x29, 0x1d, 0x9b, 0xfd, 0xbc, 0x81, 0xcd, 0x38, 0xcf, 0x0c, 0x22,
	0xe6, 0x7a, 0x47, 0x54, 0xd6, 0x5a, 0x45, 0xc3, 0x79, 0xd3, 0xf9, 0xec, 0xdf, 0x54, 0xf8, 0x7e,
	0x1d, 0xad, 0x3f, 0x79, 0x46, 0x2b, 0xa1, 0xef, 0x15, 0x58, 0xa6, 0x4f, 0x39, 0xb6, 0x02, 0x84,
	0x11, 0x43, 0xa9, 0x5c, 0x1a, 0x28, 0x7c, 0xb5, 0xa2, 0x40, 0x67, 0x64, 0xaf, 0x7e, 0x47, 0x5a,
	0x21, 0xaa, 0xfd, 0x9b, 0xb3, 0x69, 0x83, 0x7f, 0xa5, 0xca, 0x75, 0xda, 0x89, 0x3e, 0x21, 0xdb,
	0x28, 0x03, 0x5b, 0x29, 0x1b, 0xd8, 0xea, 0x44, 0x5b, 0x1e, 0xa8, 0x16, 0x9c, 0x9a, 0x41, 0x63,
	0x37, 0x54, 0x8b, 0xdb, 0x9d, 0xcd, 0xc2, 0xc8, 0xee, 0x43, 0x43, 0x82, 0xb9, 0x80, 0xd8, 0x1b,
	0xc7, 0x31, 0xaf, 0xec, 0xce, 0x78, 0x30, 0x58, 0x9b, 0xb3, 0x4e, 0xc1, 0xd2, 0x16, 0x0b, 0xb6,
	0x3d, 0xb9, 0xf1, 0x51, 0x47, 0xb2, 0x6a, 0xad, 0x02, 0x38, 0x2c, 0x4e, 0x22, 0xbf, 0x9b, 0x30,
	0x6f, 0xad, 0x66, 0x9d, 0x03, 0x6b, 0x37, 0x23, 0xed, 0xad, 0x41, 0xd8, 0x7d, 0xcc, 0xbc, 0xb5,
	0x79, 0xfb, 0x2b, 0x1c, 0xef, 0xc9, 0xad, 0x30, 0x41, 0x83, 0xc9, 0x45, 0x40, 0x3b, 0xd0, 0x3e,
	0x9a, 0x34, 0x84, 0xc5, 0x20, 0x05, 0xa8, 0x66, 0xc1, 0xaa, 0xc1, 0x2c, 0x58, 0xd3, 0x9a, 0x05,
	0xcb, 0x14, 0xcd, 0xcf, 0xc0, 0xb2, 0xc3, 0x46, 0x83, 0x23, 0xd9, 0x84, 0x73, 0xb0, 0x10, 0x21,
	0x49, 0x84, 0xed, 0x47, 0xa4, 0x0c, 0x06, 0x9f, 0xef, 0x57, 0x60, 0x8d, 0xda, 0xaf, 0x98, 0x7d,
	0xd2, 0x7a, 0x2b, 0xe6, 0x7a, 0x55, 0x75, 0xba, 0x5a, 0x54, 0xa7, 0xf7, 0x43, 0x85, 0x25, 0xeb,
	0xd4, 0xf9, 0x4b, 0x00, 0x62, 0x24, 0xe5, 0x9c, 0x9f, 0x77, 0x9a, 0x02, 0x92, 0x5b, 0xf8, 0xea,
	0xf8, 0x49, 0x2c, 0x7c, 0x97, 0x00, 0x62, 0x16, 0xc7, 0x7e, 0x88, 0xd3, 0x64, 0x81, 0x72, 0x09,
	0x08, 0x2d, 0x60, 0x1e, 0x5f, 0xc0, 0x84, 0x82, 0xc1, 0x7f, 0x0b, 0x2b, 0x51, 0x03, 0x0d, 0x3d,
	0x55, 0xdf, 0xb3, 0xbf, 0x5e, 0x01, 0x4b, 0x52, 0x48, 0xe9, 0xe4, 0x0b, 0x68, 0x11, 0xcc, 0x16,
	0xaa, 0x3a, 0xee, 0x93, 0xa5, 0xf9, 0x56, 0x34, 0x4c, 0x98, 0x96, 0x64, 0xd2, 0xfa, 0x34, 0x80,
	0x8f, 0x45, 0x74, 0xdd, 0xc1, 0x40, 0xec, 0xf1, 0x2f, 0x4c, 0xf0, 0x68, 0x56, 0x8b, 0xa3, 0xa0,
	0xdb, 0x7f, 0x5c, 0x85, 0x53, 0x68, 0x7d, 0x4e, 0xb6, 0xdc, 0x21, 0xdb, 0xeb, 0x86, 0x11, 0x53,
	0xcc, 0x45, 0x15, 0xd5, 0x5c, 0x64, 0xdd, 0x80, 0x85, 0x98, 0x23, 0x48, 0xfb, 0x6a, 0x7b, 0xa2,
	0x92, 0x47, 0x31, 0x8b, 0xb0, 0x0c, 0x47, 0x60, 0xf2, 0x11, 0xee, 0x85, 0x51, 0x97, 0xe6, 0x4e,
	0xc3, 0xa1, 0x84, 0xf5, 0x09, 0x58, 0xf7, 0xfc, 0xd8, 0xdd, 0x1f, 0xb0, 0x0e, 0xf3, 0xfc, 0xa4,
	0x23, 0x7b, 0x36, 0x8f, 0x48, 0x96, 0xf8, 0xa6, 0x9a, 0x06, 0x95, 0x19, 0x5c, 0xcf, 0xcd, 0xe0,
	0x0b, 0x68, 0x0f, 0x4b, 0x3a, 0xc9, 0xd1, 0x88, 0x04, 0x6f, 0xdd, 0x69, 0x74, 0xa5, 0x25, 0x2f,
	0x3f, 0xbe, 0x8b, 0xc4, 0xfb, 0xd9, 0xf8, 0xbe, 0x06, 0xa7, 0x89, 0x14, 0x1d, 0x05, 0x8b, 0x06,
	0xe9, 0x14, 0x7d, 0xd8, 0x49, 0x71, 0xd7, 0x81, 0xf3, 0x8c, 0xef, 0xb5, 0x9a, 0x29, 0x03, 0xf9,
	0xca, 0xb6, 0x0b, 0x4a, 0x66, 0x83, 0x0b, 0xa7, 0x71, 0xac, 0x73, 0x44, 0x6e, 0xc1, 0x62, 0x4c,
	0x46, 0x64, 0xa4, 0x72, 0xc3, 0x91, 0xc9, 0xfc, 0xa4, 0x68, 0x8a, 0x49, 0x91, 0x9a, 0x92, 0xbb,
	0x99, 0x75, 0x3f, 0x03, 0xd8, 0xdf, 0xaa, 0xc0, 0x8a, 0xc3, 0x9e, 0x38, 0x6c, 0x18, 0x1e, 0xb2,
	0xcd, 0x30, 0x08, 0xf8, 0x20, 0x3e, 0xca, 0x0d, 0x22, 0xa5, 0xb8, 0xc4, 0x13, 0x13, 0x9c, 0x0b,
	0x72, 0x61, 0x28, 0x06, 0x01, 0xba, 0xcb, 0x8e, 0x08, 0x81, 0x17, 0x43, 0x24, 0x15, 0x07, 0x09,
	0x04, 0x92, 0x44, 0x15, 0x08, 0xbc, 0x00, 0x31, 0x69, 0x08, 0xc2, 0xf3, 0xcf, 0x64, 0x26, 0x79,
	0x85, 0x73, 0xdd, 0x68, 0x70, 0xa4, 0x34, 0x38, 0xed, 0x76, 0x45, 0x95, 0x05, 0x03, 0x2e, 0x49,
	0x9e, 0xec, 0xf9, 0xfd, 0xe0, 0xd1, 0x68, 0x27, 0xee, 0x1b, 0x79, 0x73, 0xaa, 0x20, 0x9f, 0xc9,
	0x08, 0xf6, 0xeb, 0x15, 0xbe, 0x98, 0xe2, 0x59, 0x0c, 0x9f, 0x74, 0x1f, 0xaa, 0xc2, 0x75, 0xa8,
	0x93, 0x2d, 0xbe, 0x96, 0xca, 0x0e, 0x32, 0x0f, 0xe3, 0x08, 0x92, 0xcd, 0x17, 0x7f, 0xcf, 0x46,
	0xb1, 0xef, 0x55, 0x52, 0x4a, 0x6c, 0x07, 0x1f, 0x4d, 0xc3, 0xee, 0xbb, 0xc3, 0xb4, 0x61, 0xfc,
	0x37, 0xaf, 0xe2, 0x36, 0xe3, 0xfb, 0x4b, 0x6c, 0x59, 0xd3, 0x11, 0x29, 0xab, 0x0d, 0x8d, 0x7b,
	0x61, 0xd7, 0xe5, 0x2b, 0x1d, 0x4e, 0xb9, 0xa6, 0x93, 0xa6, 0xb9, 0xa4, 0xdb, 0xde, 0xc5, 0xa9,
	0xd6, 0x74, 0xaa, 0xdb, 0xbb, 0xb3, 0x6d, 0xad, 0x0e, 0x91, 0x7b, 0x39, 0xd9, 0xf7, 0x8e, 0x4a,
	0x3b, 0x97, 0xb6, 0x3d, 0xdb, 0x89, 0xf8, 0x99, 0xc4, 0xad, 0x29, 0x12, 0x77, 0xa6, 0x75, 0xea,
	0x6f, 0x64, 0xe3, 0xcd, 0xa7, 0x87, 0xa8, 0x99, 0x2f, 0x8e, 0xca, 0xf9, 0x0a, 0xa6, 0xe4, 0x2a,
	0x8a, 0x9a, 0x8e, 0xa8, 0x3d, 0x03, 0xa0, 0x85, 0x3f, 0x4c, 0x57, 0x17, 0xfc, 0x9d, 0xb6, 0x6a,
	0x5e, 0xd7, 0xaa, 0xb2, 0xa1, 0xfe, 0xc7, 0x68, 0x9d, 0x4b, 0x5b, 0xf5, 0x20, 0x60, 0x9b, 0x03,
	0x9f, 0x05, 0xc9, 0xf3, 0x6d, 0x5e, 0x0b, 0x16, 0x93, 0x90, 0x88, 0x49, 0x2a, 0x98, 0x4c, 0xa6,
	0x0d, 0xaf, 0xeb, 0x1a, 0x5e, 0xa6, 0x82, 0xfd, 0x1a, 0xae, 0x6a, 0x74, 0x94, 0x19, 0x46, 0x4c,
	0x21, 0xe9, 0x9d, 0x5c, 0x9b, 0xef, 0xa4, 0x6d, 0xbe, 0x23, 0x0f, 0xa8, 0x64, 0x9b, 0xef, 0xa8,
	0x27, 0x56, 0xa2, 0xcd, 0xb5, 0x09, 0x92, 0x1e, 0xbb, 0x65, 0xbf, 0xa9, 0x4c, 0x6c, 0x77, 0x30,
	0x78, 0x1e, 0xad, 0xca, 0x28, 0xb9, 0x01, 0xc0, 0xd7, 0xd2, 0x9b, 0x5d, 0x9c, 0x10, 0xd4, 0x36,
	0x05, 0x32, 0x5b, 0x0b, 0x7f, 0xaf, 0x02, 0x4b, 0x0e, 0x7b, 0xc2, 0x5b, 0xb7, 0x3b, 0x8e, 0x0f,
	0x8c, 0x03, 0x2d, 0x1b, 0x50, 0x55, 0x1a, 0x70, 0x0e, 0x16, 0x78, 0x75, 0xa2, 0x59, 0x35, 0x47,
	0xa4, 0xac, 0x97, 0x61, 0x95, 0x9a, 0x21, 0xe7, 0xbe, 0x18, 0xe9, 0x02, 0x74, 0x26, 0xae, 0x4c,
	0x69, 0xbf, 0x90, 0xd1, 0xde, 0xfe, 0x34, 0x9f, 0xb7, 0xa3, 0xc1, 0x51, 0xda, 0xea, 0x75, 0xa8,
	0x47, 0x1c, 0x20, 0xd6, 0x34, 0x4a, 0x18, 0xd4, 0xbc, 0x2f, 0x62, 0x87, 0xb7, 0x58, 0xb2, 0x97,
	0xb8, 0x09, 0x9b, 0x6d, 0xca, 0xa7, 0xe2, 0x6a, 0x26, 0x71, 0xfe, 0x69, 0x5e, 0x03, 0xae, 0x32,
	0xa8, 0x6d, 0x1e, 0x4f, 0x0b, 0x5d, 0x82, 0x26, 0x66, 0xbe, 0x3f, 0x1e, 0x0c, 0xec, 0x77, 0x79,
	0x82, 0xb7, 0x75, 0x37, 0x89, 0x8d, 0x2d, 0x4d, 0xdb, 0x54, 0x2d, 0x69, 0xd3, 0x5b, 0xa2, 0x4d,
	0xa2, 0xac, 0x35, 0xa8, 0x8d, 0x92, 0x58, 0x14, 0xc4, 0x7f, 0x1a, 0x5a, 0xf3, 0xbf, 0x68, 0x81,
	0xe7, 0x8b, 0xf4, 0x6d, 0xdf, 0x1d, 0x84, 0xa5, 0x22, 0xb2, 0x37, 0x70, 0xfb, 0xf2, 0xb4, 0x8c,
	0x12, 0x5c, 0x4d, 0xea, 0x85, 0x03, 0x8f, 0x74, 0x63, 0x62, 0xde, 0x06, 0x01, 0x68, 0x17, 0x14,
	0xf6, 0x7a, 0x31, 0x4b, 0xc8, 0x16, 0x4f, 0x7b, 0x5f, 0x20, 0x10, 0x9a, 0xe3, 0x2f, 0x40, 0x53,
	0x20, 0xa4, 0xfa, 0x57, 0x83, 0x00, 0xb9, 0xdc, 0x78, 0xc2, 0x4c, 0xfc, 0x21, 0x72, 0xef, 0x32,
	0x16, 0x65, 0x87, 0x92, 0x8b, 0xea, 0xa1, 0xe4, 0x4c, 0x0b, 0x83, 0x1c, 0xc1, 0xac, 0xcf, 0xc7,
	0x18, 0xc1, 0x9f, 0x86, 0xe5, 0x47, 0xa8, 0xfe, 0x3b, 0x6e, 0xe2, 0x07, 0x7d, 0xa9, 0x12, 0x6d,
	0xe7, 0x54, 0x22, 0x3a, 0x23, 0x26, 0x0c, 0xcc, 0x5e, 0x71, 0x44, 0xca, 0xfe, 0x27, 0x28, 0x87,
	0x69, 0xac, 0xee, 0xb9, 0x71, 0x72, 0x8f, 0xb7, 0x5b, 0xb4, 0xe4, 0x1d, 0x58, 0xc5, 0xc3, 0x4e,
	0xc4, 0xbc, 0xe7, 0xc7, 0x89, 0x38, 0x22, 0xbd, 0xa4, 0xd5, 0x89, 0x65, 0x13, 0x9c, 0x42, 0x26,
	0xeb, 0x1a, 0xac, 0xa4, 0x87, 0xb7, 0x03, 0x1f, 0xf7, 0x60, 0x5c, 0xda, 0xe5, 0x81, 0x28, 0x60,
	0x50, 0xdb, 0x45, 0x14, 0x12, 0x88, 0x0a, 0x84, 0x77, 0x1f, 0xb7, 0x88, 0x62, 0xe4, 0x28, 0x61,
	0x0f, 0x70, 0x17, 0xb5, 0xeb, 0x07, 0x01, 0xf3, 0xa8, 0xd5, 0x66, 0xd6, 0xcd, 0xb1, 0x47, 0xb5,
	0xc0, 0x1e, 0x33, 0xcd, 0xb5, 0x2e, 0x0a, 0x58, 0x3e, 0xde, 0xd3, 0xea, 0x5a, 0x87, 0x3a, 0x67,
	0x14, 0xda, 0x45, 0x2c, 0x3b, 0x94, 0x98, 0xad, 0x92, 0x5f, 0xc6, 0xf5, 0xc5, 0x61, 0x5d, 0x16,
	0x24, 0x52, 0xe3, 0x98, 0xa9, 0xa2, 0x4a, 0x56, 0x51, 0xca, 0x8d, 0x35, 0x2d, 0x37, 0x96, 0xa9,
	0x0b, 0x4f, 0x51, 0x05, 0xdb, 0xf5, 0x83, 0x29, 0x53, 0xf0, 0x1c, 0x2c, 0x8c, 0x90, 0xec, 0x58,
	0x73, 0xc3, 0x11, 0x29, 0xad, 0x13, 0xc6, 0x4c, 0x15, 0x7f, 0x09, 0x15, 0x02, 0x87, 0x85, 0x91,
	0xc7, 0xa2, 0xd9, 0x46, 0x34, 0xab, 0xab, 0x76, 0xbc, 0xba, 0xde, 0x16, 0x72, 0xef, 0x56, 0x18,
	0x16, 0x37, 0xee, 0x8d, 0x29, 0x13, 0xee, 0x7b, 0x35, 0x1c, 0x1f, 0x2e, 0xa4, 0xc8, 0x19, 0x86,
	0xf6, 0x6e, 0xa6, 0xa5, 0xec, 0x12, 0x40, 0x10, 0x76, 0x9e, 0xb2, 0xfd, 0x91, 0xdc, 0xd5, 0x36,
	0x9c, 0x66, 0x10, 0x7e, 0x40, 0x00, 0x9e, 0x2d, 0xf6, 0x07, 0x2c, 0x48, 0xc4, 0xde, 0x51, 0xa4,
	0xf8, 0x6c, 0xd8, 0x77, 0xbb, 0x8f, 0xfb, 0x51, 0x38, 0x0e, 0x3c, 0xb1, 0x65, 0x54, 0x20, 0x5c,
	0x1e, 0x75, 0x07, 0xcc, 0x8d, 0x3a, 0x5e, 0xe4, 0xf6, 0x12, 0x14, 0x57, 0x0d, 0x07, 0x10, 0x74,
	0x9b, 0x43, 0x52, 0xd2, 0x2c, 0x28, 0xc3, 0xf0, 0x12, 0x9c, 0xc2, 0xb5, 0xaa, 0x93, 0x84, 0x9d,
	0x61, 0xdc, 0xcf, 0xb6, 0x8b, 0xcb, 0x08, 0x7e, 0x18, 0x92, 0x9b, 0x89, 0xb2, 0x0b, 0x6f, 0xe4,
	0x77, 0xe1, 0x39, 0x9b, 0x76, 0xb3, 0x60, 0xd3, 0xbe, 0x0a, 0x54, 0x4c, 0x67, 0xe8, 0x46, 0x8f,
	0xc7, 0x23, 0xdc, 0x2d, 0x2e, 0x3b, 0x4b, 0x08, 0xdb, 0x41, 0x10, 0x3a, 0x03, 0x05, 0x89, 0x9f,
	0xf8, 0x2c, 0x6e, 0x2d, 0xe1, 0x98, 0xa5, 0x69, 0xe9, 0xdb, 0x23, 0x6c, 0x11, 0x2b, 0x99, 0x6f,
	0x4f, 0xe1, 0x7c, 0xff, 0x54, 0xc9, 0xf2, 0x7d, 0x15, 0x96, 0xfd, 0xa0, 0x3b, 0x18, 0x7b, 0xac,
	0xc3, 0x25, 0x47, 0x6b, 0x0d, 0xc9, 0xb2, 0x24, 0x60, 0x9b, 0x07, 0x6e, 0x62, 0x5d, 0x04, 0x38,
	0xf4, 0xdd, 0x8e, 0x30, 0x94, 0x9c, 0x26, 0x29, 0x70, 0xe8, 0xbb, 0xe4, 0xff, 0xf2, 0x3b, 0x15,
	0x58, 0xe2, 0xa3, 0xfa, 0x7e, 0x98, 0xe0, 0x11, 0x4f, 0x89, 0x82, 0x82, 0xd4, 0xad, 0x2a, 0xd4,
	0x3d, 0x0b, 0x0b, 0x82, 0xa8, 0x62, 0xd2, 0x0d, 0x25, 0x35, 0x43, 0xb4, 0x97, 0xc5, 0xad, 0xf9,
	0x2b, 0x35, 0x4e, 0x4d, 0x91, 0xe4, 0x5f, 0x84, 0xf6, 0x2a, 0x8c, 0xad, 0x32, 0x39, 0x9b, 0x32,
	0xf5, 0x69, 0x58, 0xc9, 0x9a, 0x2a, 0x34, 0x90, 0x4c, 0x2f, 0x59, 0x2e, 0xd7, 0x4b, 0xfe, 0x5d,
	0x0d, 0x1d, 0xf2, 0x90, 0x8b, 0x8f, 0xf6, 0xfe, 0x3f, 0x23, 0x3f, 0x47, 0x46, 0xe6, 0x3d, 0x3a,
	0x70, 0x93, 0xce, 0x90, 0x0d, 0xf7, 0x59, 0xd4, 0x5a, 0xce, 0x56, 0xb2, 0x1d, 0x84, 0x4c, 0xe3,
	0xf4, 0x75, 0xa8, 0xef, 0x1e, 0x84, 0x01, 0x6b, 0xad, 0x92, 0x69, 0x04, 0x13, 0x33, 0xf1, 0xbf,
	0xfd, 0xb7, 0x16, 0x50, 0x85, 0xdb, 0xbb, 0xb1, 0x27, 0x94, 0x7f, 0xad, 0x75, 0x64, 0x03, 0xe0,
	0x03, 0x3f, 0x39, 0xf0, 0x3d, 0xc5, 0x31, 0x4c, 0x81, 0x58, 0x57, 0x60, 0x49, 0x30, 0x03, 0x22,
	0x90, 0x2a, 0xa4, 0x82, 0x78, 0x13, 0xef, 0xa0, 0xfa, 0x45, 0xb6, 0x28, 0x4a, 0x70, 0x35, 0xef,
	0xc1, 0x98, 0x14, 0xa0, 0x86, 0xc3, 0x7f, 0xf2, 0x6d, 0xc6, 0x0e, 0xa7, 0x4b, 0xc8, 0x97, 0x89,
	0x06, 0xb1, 0x4c, 0x0a, 0xa0, 0x7a, 0x3c, 0xdf, 0x7d, 0x14, 0x44, 0xcc, 0xa5, 0x61, 0x68, 0x38,
	0x2a, 0x88, 0xf7, 0x60, 0x8f, 0x98, 0x0a, 0x88, 0xa9, 0x28, 0xc5, 0x79, 0x62, 0x37, 0x8c, 0x93,
	0xd6, 0x12, 0x42, 0xf1, 0x77, 0xe6, 0x32, 0xb7, 0xac, 0xba, 0xcc, 0x9d, 0x87, 0x45, 0xbe, 0xaf,
	0x91, 0x84, 0xce, 0x7c, 0xe6, 0xce, 0x40, 0xfd, 0x61, 0xc8, 0xc1, 0xab, 0xb4, 0xc7, 0x78, 0x18,
	0x6e, 0x7b, 0xbc, 0x07, 0xbb, 0x49, 0x8c, 0x24, 0xae, 0x3b, 0xfc, 0xa7, 0xf5, 0x02, 0x34, 0xee,
	0x3c, 0xf5, 0x3a, 0x7c, 0x74, 0x50, 0x9a, 0x2c, 0x3b, 0x8b, 0x77, 0x9e, 0x7a, 0xbc, 0x0c, 0xce,
	0x03, 0xef, 0x0b, 0xb9, 0x21, 0xe5, 0x88, 0x4c, 0x5b, 0xb6, 0xb0, 0x0d, 0x0b, 0x4e, 0x6c, 0x59,
	0xc4, 0x9d, 0x2a, 0x4c, 0x9c, 0x01, 0xb2, 0xd6, 0x19, 0x6a, 0x00, 0xea, 0xa0, 0x2d, 0x58, 0x94,
	0x0e, 0x84, 0xeb, 0xc4, 0xb1, 0x8a, 0xdb, 0x20, 0x52, 0xa6, 0x75, 0x96, 0x8c, 0x02, 0xe4, 0x7a,
	0x88, 0x04, 0xf6, 0x3d, 0x17, 0x37, 0x2d, 0xe7, 0xb0, 0x7d, 0x19, 0x80, 0x33, 0xb2, 0xa3, 0x32,
	0xf2, 0x79, 0x62, 0x64, 0x27, 0xcf, 0xc8, 0xef, 0x48, 0x46, 0x6e, 0x11, 0x23, 0xcb, 0x34, 0xaf,
	0xf2, 0x7d, 0x9f, 0x3d, 0x8d, 0x5b, 0x2f, 0x10, 0x45, 0x31, 0xc1, 0xa7, 0xce, 0x3b, 0x9e, 0x2f,
	0xb4, 0xe8, 0x36, 0xf5, 0x9b, 0x03, 0x6e, 0x8b, 0xfd, 0x8d, 0xd8, 0x21, 0x5e, 0x20, 0xdd, 0x55,
	0xec, 0x0e, 0x2d, 0x98, 0x7f, 0x34, 0xf6, 0xbd, 0xd6, 0x45, 0x6c, 0x3c, 0xfe, 0x46, 0xc1, 0x14,
	0x74, 0xa3, 0xa3, 0xd6, 0x25, 0x21, 0x98, 0x78, 0x22, 0xe3, 0xf3, 0x8d, 0x12, 0x39, 0xdf, 0x82,
	0xc5, 0xad, 0x28, 0x1c, 0x8f, 0x7c, 0xaf, 0x75, 0x85, 0x24, 0xa7, 0x48, 0x72, 0x82, 0x60, 0xf7,
	0xb0, 0xb6, 0xab, 0xb4, 0xb1, 0x4d, 0x01, 0xf6, 0xdb, 0x42, 0xd3, 0x16, 0x13, 0x24, 0x27, 0x30,
	0xeb, 0xe5, 0x02, 0xf3, 0x37, 0xe6, 0xc9, 0x34, 0x25, 0xfd, 0x5f, 0x8d, 0x72, 0x52, 0xbf, 0x35,
	0xf9, 0x51, 0x14, 0x8f, 0xa9, 0x2b, 0x6c, 0x43, 0x75, 0x85, 0x55, 0x84, 0x66, 0x33, 0x2f, 0x34,
	0x2f, 0xc3, 0xd2, 0x70, 0x3c, 0x48, 0xfc, 0x0e, 0xe5, 0x02, 0x64, 0x17, 0x40, 0x10, 0x91, 0x24,
	0x27, 0x55, 0x97, 0xa6, 0x48, 0xd5, 0xe5, 0x49, 0xa9, 0x7a, 0x11, 0x9a, 0x01, 0x7b, 0xda, 0xf3,
	0x07, 0x4c, 0x4c, 0xd7, 0x9a, 0x93, 0x01, 0x72, 0x32, 0x77, 0xb5, 0x54, 0x79, 0x38, 0x55, 0x14,
	0xa9, 0xe4, 0x4f, 0x9a, 0x0c, 0x19, 0x17, 0xc8, 0x6b, 0x28, 0x90, 0x33, 0x40, 0xc6, 0x72, 0xa7,
	0x4b, 0x58, 0x2e, 0xaf, 0x37, 0x58, 0x05, 0xbd, 0xe1, 0x29, 0x6e, 0x0c, 0x1e, 0x8d, 0x06, 0xa1,
	0x3b, 0x85, 0x3d, 0x74, 0x9a, 0x43, 0x3a, 0x10, 0x35, 0xad, 0x4f, 0x72, 0x99, 0xc4, 0xff, 0x4e,
	0x15, 0xb5, 0xd1, 0x3b, 0x61, 0xf4, 0xd4, 0x8d, 0xe4, 0x1a, 0x1e, 0xff, 0x90, 0x98, 0xd3, 0x86,
	0x95, 0xa7, 0x7e, 0x72, 0xd0, 0x19, 0x1e, 0x75, 0xf0, 0x24, 0x44, 0xb0, 0xe7, 0x12, 0x07, 0xee,
	0x1c, 0xd1, 0x11, 0xc0, 0x05, 0xb2, 0xd9, 0xa9, 0xdb, 0xe6, 0x06, 0x07, 0xec, 0x66, 0xce, 0xd9,
	0x8b, 0x38, 0x20, 0x55, 0xda, 0xa1, 0x65, 0x0c, 0xd4, 0x40, 0xbf, 0xd2, 0x8c, 0x81, 0xce, 0xc3,
	0x62, 0x12, 0x52, 0x39, 0x4d, 0x12, 0x2e, 0x49, 0x88, 0xa5, 0xe4, 0xbd, 0xc2, 0xa1, 0xe8, 0x15,
	0x9e, 0xd2, 0x71, 0xa9, 0x84, 0x8e, 0xb7, 0x61, 0x1d, 0x25, 0x83, 0x86, 0x90, 0xc7, 0xd8, 0x8c,
	0xff, 0xb7, 0x1a, 0xd4, 0xb8, 0x60, 0xb1, 0x60, 0x1e, 0xcf, 0x15, 0x84, 0xc3, 0x7f, 0x22, 0xd6,
	0x4c, 0x0d, 0xe9, 0x89, 0x02, 0xb5, 0xd4, 0xb3, 0xfa, 0x3c, 0xe9, 0x84, 0xca, 0xe9, 0x7c, 0x2f,
	0x5d, 0xaf, 0x92, 0x50, 0x5a, 0x26, 0x96, 0x9d, 0xf9, 0x84, 0xaf, 0x57, 0x2f, 0x40, 0xa3, 0x27,
	0x57, 0x27, 0xa2, 0xed, 0x62, 0x4f, 0xac, 0x4e, 0x79, 0x7e, 0x5d, 0xcc, 0xf3, 0xab, 0x4e, 0x42,
	0x34, 0x34, 0x12, 0x82, 0xcc, 0x61, 0x4c, 0x1c, 0x07, 0xe1, 0x6f, 0x55, 0x3e, 0x40, 0x5e, 0x3e,
	0xa4, 0x6c, 0xbc, 0xa4, 0xb2, 0x31, 0x1e, 0x4f, 0x79, 0xbe, 0x4b, 0x27, 0x2d, 0xcb, 0xf2, 0x78,
	0xca, 0xf3, 0x5d, 0x54, 0x25, 0x8a, 0x62, 0x61, 0xa5, 0x5c, 0xd9, 0x2a, 0x4e, 0xfc, 0x75, 0xa8,
	0x1f, 0xe2, 0x1a, 0x45, 0x6b, 0x36, 0x25, 0x38, 0x1f, 0xb1, 0x74, 0x8d, 0x5a, 0xa3, 0xbe, 0x33,
	0x65, 0x8d, 0x72, 0x69, 0x8d, 0x3a, 0x4d, 0x43, 0x4a, 0x29, 0x5e, 0x0d, 0xf9, 0x3e, 0x8b, 0xf9,
	0x5d, 0x73, 0xd2, 0xb4, 0x54, 0x0c, 0xce, 0xa4, 0x8a, 0x81, 0x1d, 0xe3, 0xf1, 0xf3, 0x16, 0x4b,
	0x76, 0xe2, 0x7e, 0x4c, 0x6e, 0x45, 0x83, 0x5e, 0xce, 0xad, 0x68, 0xd0, 0x9b, 0x70, 0x2b, 0x4a,
	0x4f, 0x57, 0xd7, 0xa0, 0xe6, 0x7b, 0xb1, 0xb0, 0x72, 0xf0, 0x9f, 0xc7, 0x3b, 0x72, 0x96, 0xd5,
	0x1e, 0x8f, 0x3b, 0xff, 0x6f, 0x05, 0xdb, 0x2c, 0xfc, 0x3f, 0x51, 0xb9, 0x62, 0x83, 0x5e, 0xd6,
	0x64, 0x4a, 0x69, 0x25, 0xd4, 0x05, 0x68, 0x3e, 0x48, 0x6d, 0x63, 0xc2, 0xb2, 0xf6, 0x40, 0xb1,
	0x8d, 0x3d, 0x98, 0xb4, 0xac, 0x3d, 0xc8, 0x2c, 0x6b, 0x97, 0x00, 0x6e, 0x7a, 0x5e, 0x87, 0xac,
	0x65, 0x42, 0x9f, 0x6c, 0xde, 0xf4, 0x3c, 0x42, 0xe1, 0xad, 0x45, 0xab, 0x93, 0xd4, 0x26, 0x31,
	0xc1, 0x29, 0xb7, 0xe3, 0x3e, 0xcb, 0x98, 0xb7, 0xbe, 0xe3, 0x3e, 0x23, 0x82, 0xee, 0x90, 0xeb,
	0x46, 0x43, 0x80, 0xd1, 0x71, 0x23, 0x25, 0x5f, 0x73, 0x06, 0xf2, 0x29, 0x14, 0x38, 0x06, 0xf9,
	0x7e, 0x97, 0xac, 0x93, 0x9b, 0x11, 0x73, 0x13, 0xda, 0x4b, 0x9e, 0x03, 0x3c, 0xa0, 0xcd, 0x3b,
	0x5c, 0x90, 0x94, 0x4d, 0xfc, 0x64, 0x20, 0x0f, 0xb1, 0x29, 0xc1, 0x27, 0x4e, 0x97, 0xe7, 0x0d,
	0xa5, 0xb3, 0x81, 0x4c, 0x72, 0x7c, 0xba, 0x81, 0x30, 0x8f, 0xfc, 0x20, 0xee, 0x16, 0xe4, 0xc5,
	0x5a, 0xdd, 0x28, 0xd6, 0xca, 0xf6, 0x88, 0x3f, 0x2b, 0x8e, 0x20, 0xf3, 0x8d, 0xd6, 0x76, 0x5a,
	0x39, 0x7c, 0xae, 0xe6, 0x0e, 0x9f, 0x53, 0x6a, 0xd4, 0x55, 0x6a, 0x7c, 0x97, 0x0e, 0x1b, 0x6e,
	0x7a, 0x1e, 0x2f, 0x15, 0x6f, 0x89, 0x98, 0x16, 0x9d, 0x8c, 0x4c, 0xd5, 0x1c, 0x99, 0x0c, 0x37,
	0x36, 0xf8, 0x44, 0xec, 0x3d, 0xf5, 0xc8, 0x7e, 0x25, 0xae, 0xad, 0xc8, 0xf4, 0x34, 0xa2, 0x5c,
	0x86, 0x25, 0x3f, 0x38, 0xf4, 0x13, 0xa6, 0x1e, 0x95, 0x03, 0x81, 0x50, 0xdc, 0xcc, 0xe4, 0x9b,
	0xf5, 0x59, 0x58, 0x43, 0xaa, 0x15, 0x3a, 0x77, 0x0c, 0x5e, 0xf9, 0xcd, 0x0a, 0x9c, 0x76, 0xd8,
	0x93, 0xdb, 0x6c, 0xc0, 0x88, 0xec, 0xcf, 0x95, 0x40, 0x79, 0x22, 0xcc, 0x9f, 0x88, 0x33, 0x36,
	0xe1, 0x0c, 0x19, 0x9d, 0x27, 0x9a, 0x78, 0x8c, 0x6e, 0x7e, 0x9b, 0x9c, 0x58, 0xb8, 0xfa, 0xcf,
	0x4b, 0xb8, 0xe9, 0x0d, 0xfd, 0xe0, 0x87, 0xd5, 0xcb, 0x17, 0xa0, 0xe1, 0xc7, 0x1d, 0xf4, 0xcc,
	0x12, 0x7a, 0xc7, 0xa2, 0x1f, 0x53, 0x0b, 0x66, 0x22, 0xc0, 0x2d, 0xe1, 0x9c, 0x32, 0xd1, 0xf8,
	0x63, 0xd8, 0x02, 0xff, 0x66, 0xbe, 0xff, 0x0f, 0x71, 0x9e, 0x1f, 0xb7, 0xff, 0xa9, 0xb4, 0xa8,
	0xa9, 0xd2, 0x62, 0xd6, 0x31, 0xae, 0x1f, 0xa3, 0x8b, 0x69, 0xfb, 0xca, 0x87, 0x38, 0x37, 0xcf,
	0x77, 0x70, 0x9a, 0x6f, 0xb1, 0xe4, 0xe6, 0x60, 0xc0, 0xcb, 0x30, 0xeb, 0x96, 0x33, 0x9d, 0x0c,
	0xfd, 0xb4, 0x98, 0x5a, 0x6a, 0x81, 0xeb, 0x50, 0xc7, 0x9b, 0xa5, 0x78, 0xba, 0x50, 0x77, 0x28,
	0x61, 0xa0, 0x38, 0x93, 0xcd, 0xb9, 0x33, 0xa6, 0xec, 0xc7, 0x26, 0xf7, 0x4c, 0x36, 0xf8, 0xcf,
	0x66, 0xcd, 0x54, 0x2b, 0x3a, 0xc6, 0xd4, 0x28, 0xb0, 0xc6, 0xee, 0x41, 0x98, 0x84, 0x65, 0xb6,
	0xb5, 0xb2, 0x7b, 0x8d, 0x59, 0x57, 0x6a, 0x45, 0xce, 0x19, 0xf1, 0x72, 0xc5, 0xe9, 0x3b, 0x25,
	0x66, 0x3b, 0x73, 0x2a, 0xb2, 0x46, 0xda, 0xbe, 0xf2, 0x2e, 0x2e, 0xa8, 0x5d, 0xfc, 0x2a, 0x2d,
	0x01, 0x3b, 0x7e, 0x3f, 0x52, 0x16, 0x97, 0x63, 0x0d, 0x86, 0x38, 0xd1, 0x57, 0x5d, 0x35, 0x32,
	0xc0, 0x6c, 0x3a, 0x91, 0x1c, 0xaa, 0x42, 0x33, 0x44, 0x3f, 0x16, 0xf5, 0xfd, 0x68, 0xa8, 0xfd,
	0xf8, 0x35, 0xea, 0x87, 0xc3, 0x5c, 0x4f, 0xd1, 0x0c, 0xe2, 0x9c, 0x6e, 0x14, 0x9b, 0x75, 0xa3,
	0xb3, 0xb0, 0x30, 0x24, 0x45, 0x45, 0xda, 0x7d, 0x51, 0x51, 0x99, 0x75, 0x02, 0x97, 0x8d, 0xd2,
	0x7b, 0xa2, 0x6f, 0x6a, 0xd3, 0x26, 0x0f, 0x53, 0xb3, 0x06, 0x54, 0xd5, 0x06, 0xa4, 0x9d, 0xad,
	0xa9, 0x9d, 0xfd, 0x3a, 0xf1, 0x25, 0xdd, 0x4b, 0xe5, 0xe5, 0x3e, 0x18, 0x27, 0x66, 0xf5, 0x55,
	0xd9, 0x8e, 0xe4, 0x2f, 0x62, 0x5f, 0x80, 0x26, 0xef, 0xbc, 0xea, 0x3e, 0xd5, 0xe0, 0x80, 0xfc,
	0x22, 0x5b, 0x36, 0x6e, 0x8e, 0xe0, 0xc0, 0x7c, 0x4b, 0xf8, 0x1e, 0xc2, 0x7d, 0x96, 0xb6, 0x83,
	0x12, 0xb2, 0xcf, 0x55, 0xcd, 0x01, 0x72, 0xad, 0xe0, 0x54, 0xb9, 0xcc, 0x97, 0x5d, 0xbf, 0xd7,
	0xbb, 0x75, 0xb4, 0x5b, 0x22, 0xab, 0xa6, 0x4c, 0x38, 0x51, 0x5f, 0x2d, 0x57, 0x1f, 0xed, 0xde,
	0xe6, 0xd5, 0xdd, 0xdb, 0xcb, 0x70, 0x6a, 0x37, 0x89, 0x3b, 0x49, 0x98, 0xb8, 0x83, 0x0e, 0x29,
	0x2c, 0x24, 0x3c, 0x57, 0x76, 0x93, 0xf8, 0x21, 0x87, 0x92, 0x2e, 0x2b, 0x4d, 0x7d, 0x0b, 0x8a,
	0xa9, 0x6f, 0x0d, 0x6a, 0xef, 0x25, 0xb1, 0x50, 0x6e, 0x6b, 0xb9, 0xbb, 0x9e, 0x8d, 0x52, 0x8d,
	0x6e, 0x55, 0x1c, 0x16, 0x2b, 0x7d, 0x9c, 0x5d, 0x2e, 0x71, 0x2d, 0x74, 0x1c, 0x33, 0xe5, 0xa6,
	0xae, 0x4c, 0xda, 0x7f, 0x44, 0x9c, 0x41, 0x0a, 0x81, 0x32, 0x11, 0x4e, 0x42, 0xc0, 0x94, 0x5c,
	0x35, 0x95, 0x5c, 0x97, 0x00, 0xbe, 0x34, 0x8e, 0x93, 0x0e, 0x9a, 0xaf, 0x84, 0x3d, 0xa1, 0xc9,
	0x21, 0x9b, 0x1c, 0x90, 0x4e, 0xae, 0xba, 0x76, 0x72, 0x2d, 0xa8, 0xbc, 0x3d, 0x93, 0x1a, 0xf7,
	0x44, 0x70, 0x58, 0xbe, 0x47, 0x93, 0xf3, 0x87, 0xf3, 0x72, 0x12, 0x77, 0xd4, 0x8b, 0xbc, 0x8d,
	0x51, 0x12, 0x6f, 0xf2, 0x34, 0x27, 0x80, 0xd8, 0xb7, 0x08, 0xd9, 0x1b, 0xa6, 0x9b, 0x16, 0xa6,
	0x1e, 0x47, 0x13, 0x03, 0xfe, 0x4b, 0x55, 0xef, 0x9b, 0x6a, 0x8d, 0x39, 0x11, 0x11, 0x71, 0xb8,
	0x0f, 0xc3, 0xc7, 0xd2, 0x91, 0x54, 0xa4, 0x84, 0x25, 0xa1, 0x9e, 0xda, 0x52, 0xb2, 0x3b, 0xd4,
	0x29, 0xf1, 0x32, 0xc0, 0x6c, 0xbc, 0x96, 0xd7, 0x11, 0x4f, 0x68, 0x13, 0xf9, 0xd3, 0x2a, 0x4a,
	0xd7, 0x82, 0x9f, 0xeb, 0x89, 0xee, 0xf7, 0x1b, 0xb9, 0x4a, 0x39, 0x98, 0x9a, 0x2f, 0x1e, 0x4c,
	0xd9, 0xb0, 0xb2, 0x97, 0x84, 0xa3, 0x4e, 0x9f, 0x85, 0x9d, 0x81, 0x7f, 0x98, 0x1a, 0xa9, 0x38,
	0x70, 0x8b, 0x85, 0xf7, 0xfc, 0x43, 0xa6, 0x35, 0xa2, 0x4a, 0xdb, 0x94, 0xb4, 0xcc, 0x98, 0x0f,
	0x93, 0x8a, 0x26, 0x8c, 0x66, 0xb9, 0x09, 0x03, 0x0a, 0x26, 0x8c, 0x0b, 0xd0, 0xdc, 0x62, 0x61,
	0x67, 0x14, 0xfa, 0x41, 0x22, 0x4c, 0x27, 0x8d, 0x2d, 0x16, 0xee, 0xf2, 0x74, 0xee, 0x90, 0x61,
	0xb9, 0x70, 0xc8, 0x90, 0x8e, 0xe1, 0x4a, 0xc9, 0x18, 0xbe, 0x2f, 0x96, 0x10, 0x95, 0xfe, 0xcf,
	0x23, 0x60, 0x81, 0x87, 0x8c, 0x4e, 0x21, 0x20, 0xf6, 0x58, 0x92, 0xf8, 0x41, 0x3f, 0x3e, 0x96,
	0xd1, 0x73, 0x26, 0x3d, 0xec, 0x1f, 0x55, 0x04, 0x0b, 0x16, 0x2a, 0x4a, 0x39, 0xa1, 0xa2, 0x72,
	0xc2, 0x8b, 0xb0, 0x12, 0x1f, 0x84, 0x4f, 0x3b, 0xa3, 0x88, 0x91, 0x51, 0x88, 0x4e, 0x29, 0x97,
	0x39, 0x70, 0x57, 0xc0, 0x8c, 0xc6, 0xce, 0x4b, 0x00, 0xc3, 0x71, 0xc2, 0x3a, 0xe3, 0x20, 0xf1,
	0x07, 0x62, 0x56, 0x37, 0x39, 0xe4, 0x11, 0x07, 0xf0, 0x1a, 0x63, 0x34, 0x83, 0x92, 0x97, 0x28,
	0x25, 0x0c, 0x8a, 0xd1, 0xd7, 0xc9, 0xb7, 0x91, 0x48, 0xf9, 0x21, 0x48, 0xd4, 0x86, 0x46, 0x2c,
	0xf2, 0x09, 0xd3, 0x70, 0x9a, 0x9e, 0x6d, 0x8d, 0xdd, 0x86, 0x17, 0x94, 0x35, 0x76, 0xb2, 0x25,
	0xc7, 0x98, 0xc6, 0xdf, 0x20, 0xb7, 0x47, 0xc1, 0x14, 0xe2, 0xc0, 0xc7, 0xcd, 0xee, 0x4f, 0x54,
	0xd4, 0xfb, 0x13, 0x59, 0x27, 0xab, 0xda, 0x4e, 0x96, 0x05, 0xe8, 0x98, 0x69, 0x67, 0xf3, 0x05,
	0x61, 0xae, 0xd5, 0x34, 0x47, 0xc3, 0x17, 0x2d, 0x58, 0xec, 0xba, 0x78, 0xe8, 0x2e, 0x38, 0x42,
	0x26, 0x0d, 0x6a, 0xc4, 0xdf, 0x13, 0xf7, 0x05, 0xdc, 0x43, 0xb6, 0x13, 0xf7, 0xe9, 0x9c, 0xc5,
	0xa4, 0x11, 0x66, 0x3e, 0xa9, 0x7e, 0xd1, 0x27, 0x95, 0x24, 0x96, 0xe6, 0x7a, 0x89, 0x5e, 0x99,
	0xc8, 0xcb, 0xb1, 0x7a, 0x51, 0x8e, 0x69, 0x4c, 0xb6, 0x0b, 0x7a, 0x93, 0x2d, 0x92, 0x78, 0x51,
	0x21, 0xb1, 0x59, 0x74, 0xa9, 0x72, 0xa9, 0x59, 0x90, 0x4b, 0x33, 0xb9, 0xfd, 0xff, 0x8c, 0x74,
	0xfb, 0x57, 0x69, 0x75, 0x1c, 0x07, 0x49, 0x86, 0x4a, 0xc7, 0x16, 0x43, 0xf3, 0xc3, 0xa3, 0xc0,
	0x11, 0xc7, 0xbe, 0xda, 0x83, 0x6b, 0xbd, 0x63, 0xf4, 0x4c, 0x82, 0xe4, 0x67, 0x84, 0x21, 0x8c,
	0x6a, 0x91, 0x87, 0xcb, 0x63, 0x3a, 0x79, 0x96, 0x4e, 0x45, 0x04, 0xd7, 0xb7, 0xf3, 0x3f, 0x56,
	0x60, 0x79, 0x3b, 0x18, 0x8d, 0x65, 0x24, 0x11, 0xad, 0x8d, 0x7f, 0x17, 0x4e, 0xfb, 0x0a, 0xce,
	0x3b, 0xc3, 0x51, 0x72, 0x24, 0xb6, 0xc3, 0xb6, 0xe6, 0xb2, 0x4a, 0x01, 0xd3, 0x99, 0xcc, 0x6c,
	0x31, 0x68, 0xa9, 0x40, 0xf5, 0xb7, 0xe8, 0xef, 0xab, 0xa5, 0x05, 0xab, 0x19, 0x1c, 0x63, 0x51,
	0xf6, 0x19, 0x38, 0x3d, 0xd1, 0x1c, 0xfb, 0xe7, 0xa0, 0x65, 0x2a, 0x8a, 0x33, 0xab, 0x50, 0x26,
	0xb2, 0x55, 0x5c, 0x09, 0xd1, 0x32, 0xcd, 0x3f, 0xdf, 0xfe, 0xcb, 0x15, 0xb8, 0x24, 0x26, 0x2f,
	0x1d, 0x11, 0x8b, 0x8d, 0x28, 0xcf, 0x4f, 0x7b, 0xd1, 0x2c, 0xe6, 0x4c, 0x0d, 0xe5, 0xc2, 0x54,
	0x97, 0x7f, 0x79, 0x58, 0x51, 0x53, 0x0e, 0x2b, 0x2e, 0x42, 0x73, 0x14, 0x26, 0x07, 0x61, 0xec,
	0xff, 0x22, 0x13, 0xbb, 0xe4, 0x0c, 0x60, 0xbf, 0x65, 0x6e, 0xc3, 0xcd, 0xfd, 0x90, 0x76, 0x23,
	0x2e, 0xff, 0x21, 0x83, 0x53, 0x61, 0xc2, 0xfe, 0x14, 0xd8, 0xb9, 0x6c, 0xa9, 0x09, 0x8d, 0x67,
	0x4c, 0xb5, 0xa4, 0x42, 0xcc, 0x1c, 0xfb, 0x33, 0x70, 0xd5, 0x9c, 0x4b, 0x2a, 0xa7, 0x85, 0x50,
	0x09, 0xcb, 0xf2, 0x6e, 0x97, 0xfd, 0x2a, 0xbc, 0x92, 0xcb, 0x4d, 0x12, 0x9d, 0xbc, 0xe4, 0xf2,
	0x35, 0xdb, 0x9f, 0x2d, 0x54, 0xb4, 0x79, 0xc0, 0xba, 0x8f, 0x05, 0x0e, 0x67, 0x7f, 0x8c, 0xd6,
	0x73, 0x01, 0x9a, 0x58, 0x11, 0x86, 0xf1, 0xa1, 0xde, 0x35, 0x38, 0xe0, 0xbe, 0x3b, 0x64, 0xf6,
	0xcd, 0x42, 0x07, 0xa9, 0xb2, 0xd2, 0x22, 0xaa, 0x85, 0x22, 0x6c, 0xb8, 0x92, 0x27, 0xed, 0xb3,
	0x51, 0x18, 0x65, 0x51, 0x78, 0x0e, 0xfd, 0x84, 0xd9, 0x17, 0xa1, 0x6d, 0xa6, 0x88, 0x7d, 0xa3,
	0xf0, 0x55, 0xc0, 0xc9, 0x92, 0x9d, 0x19, 0xcd, 0x2a, 0x8a, 0xd1, 0xcc, 0xfe, 0x71, 0xb8, 0x90,
	0xcb, 0x43, 0x06, 0x5c, 0xd9, 0xea, 0x3c, 0x75, 0x6b, 0xd9, 0xcd, 0x39, 0xfb, 0x6d, 0xd8, 0x30,
	0xb7, 0x64, 0x32, 0xab, 0x72, 0xe9, 0xce, 0xfe, 0xc9, 0x02, 0x0f, 0x71, 0xec, 0x7b, 0xcc, 0x3d,
	0x94, 0xb9, 0xcd, 0x39, 0xdf, 0x82, 0x4b, 0x43, 0x03, 0xf7, 0x91, 0xa1, 0x4e, 0xdf, 0xc7, 0xd7,
	0x61, 0x0d, 0x6f, 0xa0, 0x25, 0x6e, 0x32, 0x8e, 0x1f, 0xe0, 0x05, 0x2e, 0x2e, 0xe0, 0xd9, 0xb3,
	0x91, 0x1f, 0xb1, 0x38, 0xbd, 0x51, 0x47, 0x49, 0xfb, 0x06, 0x9c, 0x56, 0xb0, 0x7b, 0x3d, 0x44,
	0xbf, 0x04, 0xf0, 0xd4, 0x8d, 0x3b, 0x21, 0x66, 0x96, 0x93, 0xf7, 0xa9, 0x2b, 0x4a, 0xb3, 0x3f,
	0x09, 0x67, 0xb2, 0x3c, 0xf7, 0xdc, 0x38, 0xd9, 0x09, 0x83, 0xe4, 0x80, 0xcf, 0xa5, 0x81, 0x4c,
	0xc8, 0x4c, 0x29, 0xc0, 0xfe, 0x6e, 0x05, 0x16, 0x28, 0x87, 0x56, 0x32, 0xbe, 0x0d, 0x0b, 0xa2,
	0x3a, 0x12, 0x87, 0x57, 0xf5, 0xd7, 0xea, 0x94, 0x4e, 0x39, 0x22, 0x83, 0xf5, 0x19, 0x58, 0x0c,
	0xa9, 0xe1, 0x42, 0xe2, 0xd9, 0x65, 0x79, 0x09, 0xd3, 0x91, 0x59, 0xac, 0x5b, 0x6a, 0xab, 0x49,
	0x57, 0xba, 0x56, 0x92, 0x3f, 0xed, 0xae, 0xda, 0xb7, 0x7f, 0x5f, 0x87, 0xe6, 0x23, 0x1c, 0xc3,
	0xa0, 0x17, 0x1a, 0x74, 0x0c, 0x0b, 0xe6, 0xb9, 0x46, 0x20, 0x14, 0x0c, 0xfc, 0x8d, 0x7a, 0x47,
	0x18, 0x24, 0x6e, 0x57, 0xea, 0x9a, 0x32, 0x69, 0xbd, 0x04, 0xab, 0xc3, 0x71, 0x32, 0x76, 0x07,
	0x1d, 0x89, 0x40, 0xfb, 0x96, 0x15, 0x82, 0x6e, 0x0a, 0xb4, 0x16, 0x2c, 0x7a, 0xc8, 0x8a, 0x9e,
	0x34, 0x71, 0x8b, 0x24, 0xdf, 0xc5, 0xee, 0x87, 0x74, 0x62, 0xd6, 0x70, 0xf8, 0x4f, 0xeb, 0x3a,
	0xac, 0xed, 0x87, 0x09, 0xfa, 0x3d, 0x76, 0x0e, 0x48, 0x9c, 0x08, 0x57, 0xac, 0xd5, 0xfd, 0x10,
	0x6d, 0x7c, 0x52, 0xc8, 0x5c, 0x81, 0x65, 0x8e, 0x19, 0x84, 0x1d, 0x32, 0xbb, 0x36, 0xc4, 0xc1,
	0x7e, 0x98, 0xdc, 0x0f, 0xc9, 0x22, 0xdb, 0x86, 0xc6, 0x21, 0x8b, 0xfc, 0x9e, 0xcf, 0xa4, 0x5b,
	0x56, 0x9a, 0xb6, 0x36, 0x00, 0xa2, 0xf4, 0x7e, 0xae, 0xf0, 0xcb, 0x52, 0x20, 0x18, 0xd8, 0xce,
	0x0f, 0x84, 0x6b, 0x16, 0xff, 0x69, 0x5d, 0x83, 0x55, 0x3c, 0x86, 0xa6, 0x5b, 0x88, 0x7d, 0x16,
	0xe2, 0x4e, 0xa6, 0xe1, 0xf0, 0x56, 0xd0, 0x8d, 0xcd, 0x2d, 0x26, 0xe5, 0xfd, 0x4a, 0xaa, 0x07,
	0x16, 0xe4, 0xfd, 0xea, 0x84, 0xbc, 0xe7, 0x9a, 0x97, 0x1f, 0xc5, 0x09, 0xca, 0x9f, 0x53, 0x38,
	0x45, 0x32, 0x00, 0xef, 0x02, 0x1f, 0x40, 0xfc, 0xb8, 0x46, 0xc2, 0x49, 0xa6, 0xf9, 0xb7, 0xb1,
	0x90, 0x62, 0x78, 0x06, 0x2c, 0x04, 0x17, 0x7e, 0x23, 0x9b, 0x6a, 0xc0, 0xf0, 0x08, 0xb8, 0xe9,
	0x50, 0x22, 0xb3, 0xb4, 0x9e, 0x51, 0x2d, 0xad, 0x6f, 0xc2, 0x42, 0x8c, 0x5c, 0x83, 0xce, 0x5a,
	0x4b, 0x37, 0xce, 0x4f, 0x06, 0x5c, 0xc0, 0xcf, 0x8e, 0x40, 0x93, 0x63, 0xc4, 0xd9, 0xa8, 0x73,
	0xc8, 0xa2, 0x98, 0x6b, 0xa4, 0x67, 0xd3, 0x31, 0xda, 0x0e, 0x7a, 0xe1, 0xfb, 0x04, 0xb5, 0x3e,
	0x0e, 0x96, 0xa4, 0xa9, 0x1f, 0x06, 0x9d, 0x88, 0xb9, 0x71, 0x18, 0xa0, 0x87, 0x57, 0xc3, 0x39,
	0xad, 0x7c, 0x71, 0xf0, 0x83, 0xf5, 0x29, 0x38, 0xa7, 0x90, 0x78, 0x34, 0x70, 0xbb, 0xec, 0x00,
	0x3d, 0xdb, 0xd1, 0xe7, 0xab, 0xe1, 0xac, 0xa7, 0xa4, 0xde, 0xcd, 0xbe, 0xd9, 0xdf, 0x9e, 0x87,
	0x45, 0x29, 0xa6, 0xcc, 0x9a, 0xb3, 0x38, 0xb3, 0x94, 0x9a, 0xb3, 0x38, 0xb3, 0x3c, 0x07, 0x0b,
	0x8f, 0xfd, 0xee, 0x63, 0xe6, 0xc9, 0x6d, 0x14, 0xa5, 0xf8, 0x3c, 0x18, 0xb0, 0x9e, 0xe4, 0x67,
	0xfc, 0xcd, 0x71, 0x99, 0xe7, 0x27, 0xe2, 0x68, 0xa1, 0xe1, 0x88, 0x14, 0x1f, 0xc1, 0x61, 0xe8,
	0xb1, 0x08, 0xcb, 0x27, 0x56, 0xce, 0x00, 0xfc, 0xeb, 0x7e, 0x14, 0xba, 0x5e, 0xd7, 0x8d, 0xa5,
	0x53, 0x61, 0x06, 0xc8, 0xb1, 0x68, 0xa3, 0xc0, 0xa2, 0xbc, 0x5c, 0xd6, 0x77, 0xfb, 0x51, 0x28,
	0x76, 0xe3, 0xbc, 0x5c, 0x09, 0x98, 0xca, 0xc0, 0x17, 0xa1, 0xe9, 0xb1, 0x61, 0xd8, 0x8d, 0xdc,
	0xee, 0x91, 0x60, 0xe3, 0x0c, 0x80, 0x11, 0x28, 0xfd, 0x7e, 0xe0, 0x26, 0x63, 0x2e, 0x6d, 0x89,
	0x91, 0x15, 0x88, 0x64, 0xff, 0x95, 0x8c, 0xfd, 0x89, 0xb1, 0x57, 0x4d, 0x8c, 0x7d, 0x4a, 0x77,
	0x77, 0x91, 0xe4, 0xfe, 0x9a, 0x7a, 0x20, 0x34, 0x9d, 0x69, 0x93, 0x50, 0xf8, 0x25, 0x09, 0xf6,
	0x94, 0x0a, 0xd1, 0x99, 0xbc, 0xf7, 0x86, 0x64, 0xbc, 0x75, 0x5a, 0x29, 0x0e, 0x4b, 0x39, 0xee,
	0xac, 0x81, 0xe3, 0xec, 0xff, 0x59, 0x85, 0xf3, 0x62, 0x5b, 0xc9, 0x9e, 0xe6, 0x35, 0x10, 0x03,
	0x2f, 0xad, 0x41, 0x8d, 0xab, 0x52, 0xc4, 0x47, 0xfc, 0x27, 0x8d, 0x93, 0x74, 0x0f, 0xad, 0xc9,
	0x71, 0x92, 0xee, 0xa1, 0x57, 0x61, 0x99, 0x1c, 0x47, 0x84, 0x96, 0x4e, 0x1c, 0xb5, 0x34, 0xcc,
	0xfb, 0x87, 0x8a, 0xbd, 0x7c, 0x3d, 0xb7, 0x97, 0xe7, 0x9b, 0xa0, 0x30, 0x96, 0xe2, 0x11, 0x7f,
	0x4f, 0xd8, 0x73, 0x14, 0xd3, 0x76, 0x43, 0xef, 0x69, 0xd3, 0x94, 0xb7, 0xcf, 0xf4, 0x0e, 0x33,
	0xc4, 0x39, 0x7a, 0x87, 0x99, 0x25, 0x85, 0xe4, 0x99, 0xbf, 0xc9, 0x72, 0xce, 0xdf, 0x44, 0x18,
	0x22, 0x57, 0x0c, 0x86, 0xc8, 0xd5, 0xbc, 0x21, 0xd2, 0xfe, 0x7d, 0xb2, 0xa3, 0x8d, 0x59, 0x9c,
	0x2a, 0xe1, 0xe5, 0x61, 0x12, 0xc5, 0xb9, 0xea, 0x76, 0x31, 0x4c, 0x80, 0xfe, 0xbc, 0x31, 0x55,
	0x75, 0xe7, 0x15, 0x55, 0x57, 0x73, 0xdc, 0x9e, 0xdb, 0xde, 0xca, 0x29, 0xba, 0xe9, 0xa6, 0xc4,
	0xce, 0x00, 0xf9, 0x69, 0xb8, 0xa8, 0x9d, 0x86, 0x7c, 0x0b, 0x8f, 0x0e, 0xb2, 0x0d, 0x79, 0x45,
	0x5b, 0x42, 0xac, 0x97, 0xe1, 0xd4, 0xbe, 0x1b, 0x74, 0x5c, 0xcf, 0x4b, 0xd7, 0x48, 0x9a, 0xca,
	0x2b, 0xfb, 0x2e, 0x2a, 0x76, 0x62, 0x8d, 0x9c, 0x69, 0x9b, 0xba, 0x29, 0x3c, 0x3f, 0x14, 0x69,
	0xa7, 0x71, 0x95, 0xbf, 0x94, 0x0b, 0x70, 0x52, 0x2d, 0x84, 0x32, 0xb5, 0xff, 0x53, 0x16, 0x50,
	0x24, 0xa7, 0xc8, 0x4e, 0x0f, 0x57, 0xa9, 0xf1, 0x06, 0xc9, 0x46, 0xa7, 0x96, 0x1b, 0x9d, 0x73,
	0xb0, 0xc0, 0xf7, 0xec, 0xdb, 0x9e, 0x70, 0x06, 0x11, 0xa9, 0x69, 0x23, 0xb1, 0x01, 0x8a, 0x04,
	0x11, 0x71, 0x69, 0xb4, 0x37, 0xc3, 0x17, 0x4b, 0xcd, 0x45, 0x96, 0x4a, 0x25, 0xd1, 0xbb, 0x13,
	0xd1, 0xea, 0xff, 0xd0, 0x99, 0xda, 0xe7, 0x42, 0x3f, 0x38, 0x2e, 0xb7, 0xe6, 0xe9, 0xf1, 0x21,
	0xfb, 0x7d, 0x0e, 0x16, 0xf6, 0x8f, 0xee, 0xf9, 0xc1, 0x63, 0xc1, 0x80, 0x22, 0xc5, 0xe5, 0x20,
	0x7a, 0x85, 0xa4, 0x67, 0x81, 0x32, 0x59, 0x74, 0x21, 0x69, 0x9a, 0x5d, 0x48, 0xca, 0x18, 0x6e,
	0x4b, 0x98, 0x5d, 0x55, 0x02, 0x9c, 0x88, 0x90, 0x7f, 0x4a, 0x84, 0x14, 0x65, 0xdc, 0xf5, 0xbb,
	0x8f, 0xa7, 0x13, 0x12, 0x97, 0x62, 0x69, 0xbf, 0x10, 0xa9, 0x14, 0x2e, 0x37, 0xc8, 0x22, 0x65,
	0x6d, 0xc0, 0x92, 0x1f, 0xa3, 0x9f, 0x20, 0xc6, 0x28, 0x16, 0xf6, 0x73, 0x3f, 0xbe, 0x15, 0x92,
	0x47, 0xc8, 0x05, 0x68, 0xfa, 0x71, 0x47, 0xac, 0xf5, 0x24, 0x66, 0x1b, 0x7e, 0x7c, 0x97, 0x56,
	0xfb, 0x0b, 0xd0, 0xa4, 0x5f, 0x99, 0x39, 0xaa, 0x41, 0x80, 0x89, 0xa1, 0x5b, 0x2c, 0x0e, 0xdd,
	0x4c, 0x47, 0x10, 0x92, 0x8e, 0x6a, 0xff, 0x4f, 0x44, 0xc7, 0x6f, 0x54, 0xd0, 0xa6, 0x97, 0xdb,
	0x9a, 0x9d, 0x4c, 0x7e, 0xe6, 0xbb, 0x55, 0x33, 0x76, 0xab, 0xcc, 0x30, 0xfb, 0xae, 0x30, 0x9b,
	0xe5, 0x9a, 0x73, 0xa2, 0x7e, 0xfd, 0x76, 0x16, 0x43, 0x39, 0xb7, 0x79, 0x7c, 0x9e, 0x32, 0x69,
	0xf2, 0x28, 0xbb, 0x76, 0x6c, 0x5f, 0x94, 0x7b, 0x70, 0x56, 0x75, 0x38, 0xc8, 0xed, 0x72, 0x8f,
	0xdf, 0xeb, 0x5f, 0xa9, 0x16, 0x7b, 0x4d, 0xee, 0x3b, 0xca, 0xa2, 0x5e, 0xc9, 0x2d, 0xea, 0x39,
	0x72, 0x54, 0x67, 0x15, 0x3e, 0xb9, 0x80, 0x03, 0xf3, 0x9a, 0x80, 0x03, 0x51, 0x38, 0x60, 0xf2,
	0xbc, 0x92, 0xff, 0x16, 0x26, 0xca, 0x6d, 0x19, 0x31, 0x47, 0xb8, 0x7b, 0xe6, 0xa5, 0xd4, 0xa2,
	0xce, 0x74, 0x15, 0xb9, 0xc1, 0x63, 0x61, 0x9d, 0xc5, 0xdf, 0xb3, 0x79, 0x34, 0x6a, 0xa8, 0x4a,
	0x84, 0x78, 0x4e, 0xbc, 0x44, 0xa6, 0xb8, 0x13, 0xeb, 0x19, 0xa4, 0x94, 0xd6, 0xd4, 0x3d, 0xd3,
	0x47, 0xc4, 0x4b, 0xd4, 0xd0, 0x13, 0xf5, 0x7a, 0x07, 0x2c, 0xf4, 0x74, 0x44, 0x09, 0x4f, 0x76,
	0x2a, 0xb1, 0x8f, 0xe1, 0xcb, 0x06, 0xd9, 0x5e, 0xf0, 0xf7, 0x6c, 0x1e, 0x4e, 0xdf, 0x99, 0x20,
	0x22, 0xd9, 0x12, 0xcb, 0x58, 0xb3, 0x24, 0xaa, 0x45, 0x8e, 0xf6, 0x35, 0xcd, 0x3c, 0xd6, 0x68,
	0x6d, 0x79, 0x76, 0xab, 0x9b, 0x95, 0x81, 0x32, 0xff, 0xb8, 0x5d, 0x0d, 0x6b, 0x61, 0xe9, 0xe6,
	0xa0, 0x3e, 0x53, 0x08, 0xfd, 0x9d, 0x0a, 0xb4, 0x54, 0xa7, 0xc8, 0x9c, 0xb9, 0xf4, 0x84, 0x33,
	0x57, 0xfa, 0xcf, 0xcb, 0x53, 0xef, 0x29, 0xec, 0xf5, 0x5c, 0x28, 0xf3, 0x3b, 0x18, 0x92, 0x57,
	0xf5, 0x9d, 0xcc, 0xf5, 0x84, 0x5e, 0x34, 0x50, 0x5c, 0x58, 0x78, 0x22, 0xdd, 0x19, 0x54, 0x95,
	0x9d, 0x81, 0xd6, 0xcd, 0x04, 0x1d, 0x1c, 0xe4, 0xc9, 0x10, 0x79, 0x3b, 0xb4, 0x21, 0xdd, 0x06,
	0xc8, 0xc0, 0x04, 0xa9, 0x7f, 0xc2, 0xa5, 0x89, 0xa0, 0x7c, 0x39, 0x9a, 0x7f, 0xbb, 0x02, 0x17,
	0x8a, 0x34, 0xdf, 0x63, 0x83, 0x9e, 0x62, 0x70, 0x3e, 0x09, 0xd9, 0x0b, 0x7b, 0xd8, 0xda, 0x04,
	0x21, 0xa7, 0xa8, 0x6d, 0x33, 0xd1, 0xf9, 0x5f, 0xd1, 0x31, 0xaa, 0xc9, 0x50, 0x7e, 0x62, 0x41,
	0x1f, 0x31, 0x55, 0xd0, 0xf3, 0xd4, 0xf4, 0x70, 0x7d, 0xcf, 0xa3, 0x3f, 0x8e, 0x38, 0x8d, 0xd5,
	0x76, 0xc8, 0x74, 0x1a, 0x3b, 0x65, 0x7c, 0xff, 0x43, 0x05, 0x2e, 0xa5, 0x47, 0xcd, 0xba, 0xe3,
	0x00, 0x33, 0xa5, 0x8e, 0x77, 0x17, 0x28, 0x47, 0xd7, 0x79, 0xfd, 0x34, 0xac, 0xa7, 0x9b, 0xeb,
	0x3c, 0xb9, 0x16, 0x8c, 0xe4, 0x5a, 0x2c, 0xf5, 0x5c, 0xb8, 0xac, 0x1c, 0x5e, 0x6b, 0xfb, 0x76,
	0x22, 0x79, 0xff, 0xf7, 0x55, 0x3f, 0x27, 0xa9, 0x7b, 0x65, 0x0f, 0x8e, 0x3c, 0x3f, 0xe1, 0x9c,
	0x17, 0x36, 0x27, 0x8c, 0xb5, 0xfe, 0xf3, 0x39, 0x27, 0x26, 0xe5, 0xf0, 0x31, 0x66, 0x81, 0x14,
	0xc0, 0xf8, 0x3b, 0x23, 0x46, 0xd5, 0x4c, 0x8c, 0x5a, 0x91, 0x18, 0xdf, 0xa2, 0x87, 0x59, 0x1c,
	0xe6, 0x7a, 0x93, 0x0c, 0x39, 0xa3, 0xd3, 0x52, 0xd1, 0x24, 0x50, 0x42, 0x92, 0x36, 0x34, 0x92,
	0x70, 0x44, 0x5b, 0x7e, 0xe1, 0xda, 0x2f, 0xd3, 0xb3, 0x91, 0xe3, 0xae, 0x88, 0x56, 0xa2, 0x69,
	0xb0, 0x05, 0xf3, 0x7e, 0xfc, 0xe0, 0xb1, 0xa4, 0x09, 0xff, 0x9d, 0x7f, 0x9b, 0x64, 0x82, 0x13,
	0x22, 0xc5, 0x4d, 0x43, 0x9e, 0x91, 0x0a, 0x3f, 0xc4, 0xa9, 0xea, 0x33, 0x89, 0xe9, 0xaa, 0xd6,
	0x29, 0xad, 0x56, 0x6a, 0x89, 0x50, 0x5d, 0x32, 0x0a, 0xb5, 0xce, 0xe8, 0xfd, 0x68, 0xff, 0x01,
	0x85, 0x01, 0xdd, 0x62, 0x89, 0x68, 0xd3, 0x6d, 0xbf, 0xd7, 0x63, 0x11, 0x0b, 0xba, 0xec, 0x84,
	0x9c, 0xac, 0x77, 0xad, 0x4a, 0x03, 0x1b, 0xce, 0xab, 0x81, 0x0d, 0x73, 0xb4, 0xa9, 0x17, 0x69,
	0x23, 0x5a, 0xbb, 0x90, 0x5b, 0xd4, 0x34, 0xa1, 0x71, 0x2e, 0xc3, 0x52, 0xe4, 0x06, 0x7d, 0xd6,
	0xc1, 0x0b, 0x3c, 0x62, 0x17, 0x0e, 0x08, 0xa2, 0x2b, 0x3d, 0x19, 0x02, 0x92, 0xba, 0xa9, 0x22,
	0x20, 0xbd, 0xcf, 0xc1, 0x82, 0x47, 0x91, 0xdb, 0x80, 0x7a, 0x4a, 0xa9, 0xd9, 0x2e, 0xfc, 0x7d,
	0x00, 0xe7, 0xd4, 0x8d, 0x25, 0x27, 0xe0, 0x66, 0x38, 0x1c, 0x86, 0x01, 0x9f, 0xb6, 0x5e, 0x4a,
	0x4e, 0x21, 0x59, 0x14, 0xc8, 0x34, 0xf1, 0xf2, 0x0c, 0x36, 0xa4, 0xeb, 0xf8, 0x66, 0x71, 0x70,
	0xe8, 0x4c, 0x5f, 0x6f, 0x1e, 0xe5, 0x50, 0x3f, 0x70, 0x07, 0xc2, 0x40, 0x4a, 0x09, 0x8d, 0x8a,
	0x20, 0xde, 0x54, 0x91, 0x4a, 0x5f, 0xdd, 0x91, 0x49, 0xfb, 0x9b, 0x15, 0xc1, 0x5b, 0xba, 0xaa,
	0x3f, 0xaa, 0x5a, 0xf9, 0xb4, 0x1b, 0xc6, 0xfd, 0x18, 0x3d, 0x0f, 0x97, 0x1d, 0xfc, 0x3d, 0x6d,
	0xd1, 0xfa, 0x17, 0x55, 0xb8, 0x62, 0x6c, 0xe8, 0xc3, 0x30, 0xbc, 0x17, 0x06, 0xfd, 0x8f, 0xac,
	0xbd, 0x97, 0x61, 0x29, 0x09, 0x47, 0x69, 0x34, 0x4e, 0xe2, 0x5f, 0xe0, 0x52, 0x48, 0x2c, 0x2a,
	0xaf, 0xc2, 0xe9, 0x88, 0xb9, 0x5e, 0xc7, 0x0f, 0xf6, 0xc3, 0x67, 0x9d, 0x9c, 0xf7, 0xe9, 0x2a,
	0xff, 0xb0, 0xcd, 0xe1, 0xc4, 0x81, 0x1f, 0x03, 0x0b, 0x51, 0xc3, 0x71, 0xa2, 0xe0, 0x12, 0x9b,
	0x9f, 0x8a, 0x68, 0x52, 0xa7, 0xc8, 0x57, 0x61, 0x99, 0x2c, 0xd9, 0xc2, 0xc0, 0x4b, 0x1c, 0xbf,
	0x44, 0x30, 0x52, 0xe6, 0x24, 0x2d, 0x9b, 0x46, 0x5a, 0x42, 0x91, 0x96, 0xdf, 0x4c, 0x45, 0x81,
	0x5c, 0x1b, 0xe3, 0xbe, 0x94, 0x88, 0x17, 0xa1, 0xb9, 0x59, 0x14, 0x62, 0x9b, 0xaa, 0x2c, 0x96,
	0x57, 0xf8, 0xa4, 0xd7, 0x6b, 0x7a, 0xa5, 0x6f, 0x03, 0x94, 0xfb, 0x7b, 0x32, 0x3c, 0xa6, 0x72,
	0xa3, 0xef, 0x22, 0x64, 0xf7, 0xf7, 0xa4, 0x36, 0x90, 0xbb, 0xd0, 0x47, 0x93, 0xba, 0xae, 0x5e,
	0xd1, 0xe3, 0x50, 0x9c, 0xc9, 0x0b, 0xea, 0x7d, 0xbe, 0xf4, 0xf2, 0xdf, 0xa2, 0x7a, 0xf9, 0x2f,
	0x13, 0x62, 0x8d, 0xa2, 0xce, 0x42, 0xdb, 0xeb, 0xa6, 0xba, 0xbd, 0x9e, 0xc9, 0x22, 0xf7, 0x6e,
	0xde, 0x92, 0x54, 0x7a, 0x7f, 0x32, 0xb7, 0x6c, 0x2c, 0x16, 0x49, 0xfe, 0x3d, 0x32, 0x25, 0x29,
	0x51, 0x89, 0x63, 0xe1, 0x26, 0xbc, 0xc7, 0x12, 0x29, 0x75, 0x29, 0x65, 0x78, 0xab, 0xe8, 0x22,
	0x34, 0x31, 0x5c, 0xf4, 0xc3, 0xcc, 0x7b, 0x3e, 0x03, 0x4c, 0x51, 0xb5, 0x32, 0xd2, 0xd4, 0x73,
	0xa4, 0x59, 0x86, 0xca, 0x13, 0x11, 0xa8, 0xb2, 0xf2, 0x84, 0x73, 0x52, 0x6a, 0x6b, 0xa8, 0x3b,
	0xf3, 0x79, 0x7d, 0xa3, 0x51, 0xba, 0xb7, 0x26, 0xcb, 0x54, 0xae, 0x77, 0x2d, 0x58, 0xa4, 0xf5,
	0x2a, 0x16, 0x84, 0x92, 0xc9, 0x69, 0xc2, 0xf0, 0xb7, 0xc8, 0x7a, 0xa9, 0x14, 0x96, 0xf7, 0x4b,
	0xae, 0x14, 0xfd, 0x92, 0x4d, 0x0f, 0xbf, 0x99, 0x2c, 0x34, 0xcf, 0x45, 0xc7, 0xba, 0x2b, 0x58,
	0x43, 0x6d, 0xe6, 0x89, 0xbb, 0xfc, 0xd7, 0x50, 0x0a, 0xe7, 0x27, 0x64, 0x7c, 0xeb, 0x88, 0xff,
	0x2d, 0x6a, 0x8c, 0x3a, 0x53, 0xca, 0x10, 0xf1, 0x44, 0x88, 0x34, 0x91, 0x52, 0xa8, 0x52, 0xcb,
	0x51, 0x65, 0x26, 0x5b, 0xe3, 0x98, 0xef, 0x56, 0x95, 0xf6, 0xd0, 0x32, 0xa7, 0x84, 0xd6, 0xd2,
	0xaa, 0x0b, 0x6d, 0x68, 0x60, 0xbb, 0xb6, 0xc5, 0x0b, 0x4f, 0x14, 0x71, 0x18, 0xd3, 0xb3, 0xed,
	0x76, 0x7e, 0xa5, 0x02, 0x2b, 0xa9, 0x70, 0xc7, 0x48, 0x62, 0xe5, 0xe2, 0x68, 0x03, 0xe0, 0x61,
	0x2a, 0x84, 0x05, 0x59, 0x15, 0x08, 0x46, 0x8b, 0x71, 0x9f, 0x39, 0x28, 0x80, 0x53, 0x42, 0xa8,
	0x20, 0x8c, 0x10, 0x87, 0x01, 0x45, 0x64, 0x84, 0x38, 0x9e, 0xb0, 0x7f, 0xb5, 0x92, 0xbe, 0x69,
	0x46, 0xed, 0xb8, 0x19, 0x78, 0x3b, 0x71, 0xdf, 0xba, 0x5d, 0x68, 0x9e, 0x88, 0xb9, 0xbd, 0x61,
	0x7a, 0xfe, 0x8b, 0xb0, 0x9c, 0x42, 0x9f, 0x7e, 0x12, 0x20, 0x1b, 0x66, 0x61, 0x17, 0x6a, 0x69,
	0xfd, 0x4b, 0x76, 0xe2, 0xbe, 0xa3, 0xe0, 0xda, 0x01, 0xac, 0x6b, 0x9a, 0x15, 0x5b, 0xef, 0xc3,
	0x99, 0xee, 0x24, 0x7c, 0xda, 0xe3, 0x64, 0x2a, 0xae, 0xa3, 0x2b, 0xc0, 0xfe, 0xa7, 0x0b, 0xb0,
	0x28, 0x83, 0x95, 0xae, 0x42, 0x75, 0x3b, 0xf5, 0xad, 0xdb, 0xf6, 0x94, 0xa0, 0x81, 0xd5, 0x62,
	0xd0, 0xc0, 0x0f, 0xfc, 0xe4, 0x20, 0xe3, 0x3b, 0x4a, 0xc9, 0x08, 0x42, 0xdb, 0x13, 0x11, 0x84,
	0xb6, 0xff, 0xfc, 0x45, 0x10, 0xb2, 0x00, 0x63, 0x03, 0x89, 0x73, 0xda, 0x5c, 0x9c, 0xa0, 0xd5,
	0x2c, 0x4e, 0x50, 0x0b, 0x64, 0x5c, 0x20, 0x3c, 0xd0, 0x37, 0x84, 0x09, 0x5a, 0x9b, 0x12, 0x26,
	0xe8, 0x74, 0x49, 0x98, 0x20, 0x4b, 0x1f, 0x26, 0xe8, 0x8c, 0x21, 0x4c, 0xd0, 0xfa, 0x44, 0x98,
	0x20, 0xcf, 0x77, 0xf1, 0xcd, 0x91, 0xb3, 0x32, 0x4c, 0x90, 0x00, 0x70, 0x2a, 0x2a, 0x21, 0x81,
	0x44, 0x18, 0x21, 0x63, 0x94, 0xa0, 0xf3, 0x85, 0x28, 0x41, 0xd9, 0xa3, 0x84, 0xad, 0x5c, 0x80,
	0x25, 0x7d, 0xf4, 0x20, 0x5e, 0x92, 0x08, 0xc4, 0x30, 0x73, 0xf0, 0xa0, 0x34, 0x30, 0xc3, 0xb6,
	0x0c, 0x20, 0x94, 0xa6, 0xd3, 0xc0, 0x42, 0x97, 0x94, 0xc0, 0x42, 0x1b, 0x00, 0xdb, 0x41, 0xcc,
	0x22, 0xaa, 0x65, 0x83, 0xb8, 0x33, 0x83, 0xf0, 0xef, 0x24, 0xcb, 0xf1, 0xfb, 0x65, 0xfa, 0x9e,
	0x41, 0x32, 0x39, 0x72, 0x45, 0x95, 0x23, 0xbf, 0x90, 0x86, 0xfd, 0xfb, 0x80, 0xed, 0xef, 0x4a,
	0x7a, 0x2b, 0xae, 0xd5, 0x95, 0x09, 0xd7, 0x6a, 0xd4, 0x4e, 0xee, 0x8f, 0x87, 0xe2, 0x26, 0x4b,
	0x9a, 0x46, 0x63, 0x60, 0x37, 0x9d, 0x55, 0xf8, 0xdb, 0xfe, 0x71, 0x61, 0x54, 0x54, 0x2a, 0x71,
	0xfb, 0x4c, 0x5c, 0x5b, 0xe0, 0xf5, 0x3c, 0x25, 0x88, 0x5c, 0x8e, 0x44, 0xd2, 0xfe, 0x67, 0xb4,
	0xc4, 0x8e, 0xc6, 0xf1, 0x01, 0x5f, 0x13, 0x87, 0x71, 0x9f, 0x77, 0x70, 0x77, 0x1c, 0x1f, 0xe4,
	0xe2, 0x80, 0x2a, 0x10, 0x25, 0x2a, 0x70, 0x35, 0x17, 0x15, 0xb8, 0x0d, 0x0d, 0x8e, 0x95, 0x6a,
	0x25, 0x4d, 0x27, 0x4d, 0xd3, 0x34, 0x48, 0x1d, 0xf5, 0xf1, 0x37, 0x9f, 0x06, 0x5c, 0x34, 0xd1,
	0x8d, 0x08, 0x0c, 0x7c, 0x22, 0x19, 0xed, 0xa1, 0xbc, 0x7d, 0xdf, 0x74, 0x32, 0x80, 0x98, 0x60,
	0x4a, 0x44, 0x07, 0x9e, 0xb0, 0xaf, 0x8a, 0x90, 0x4d, 0xe6, 0xd8, 0xba, 0xf6, 0xdf, 0xae, 0xa2,
	0xc9, 0x46, 0x10, 0x7d, 0x8f, 0xb9, 0x51, 0xf7, 0xc0, 0x7c, 0x69, 0x51, 0x77, 0x95, 0x02, 0xb5,
	0xa3, 0x9a, 0xd4, 0x8e, 0x8c, 0x51, 0x56, 0xf8, 0x6a, 0xe8, 0x0f, 0x92, 0xf4, 0x12, 0x9a, 0x48,
	0xe1, 0x2b, 0x6e, 0x7e, 0x40, 0xf1, 0x2d, 0x16, 0xc4, 0x2b, 0x6e, 0x7e, 0x80, 0xdc, 0xa2, 0x3e,
	0xf0, 0xb6, 0x98, 0x7f, 0xe0, 0x2d, 0xbb, 0x3b, 0xd6, 0xc8, 0xdd, 0x1d, 0xcb, 0x2e, 0xb5, 0x35,
	0x0b, 0x17, 0x36, 0x49, 0x57, 0x04, 0x6d, 0xd0, 0xce, 0xa5, 0xd2, 0xd8, 0xe2, 0x96, 0x7a, 0x1f,
	0x42, 0x50, 0x08, 0xd5, 0x5b, 0xc5, 0x15, 0x53, 0xa4, 0xf4, 0xaf, 0x56, 0x5a, 0x37, 0x32, 0x56,
	0xa6, 0xe7, 0x61, 0xcd, 0xeb, 0x98, 0x44, 0xb4, 0xbf, 0x4a, 0xb7, 0x42, 0xa4, 0x8b, 0xb1, 0x38,
	0x44, 0x39, 0xa1, 0x0d, 0xc2, 0x82, 0xf9, 0xd4, 0x9a, 0xdc, 0x74, 0xf0, 0xf7, 0x6c, 0x1a, 0xce,
	0x13, 0xbe, 0xe5, 0x56, 0x34, 0x1c, 0xf2, 0xe2, 0x44, 0xb5, 0x2b, 0xe3, 0xf8, 0x71, 0x2e, 0x2a,
	0xae, 0x50, 0x1f, 0x75, 0x56, 0xf9, 0x99, 0xcc, 0x38, 0x4f, 0x27, 0x76, 0xb0, 0x93, 0x95, 0x7e,
	0x8a, 0x3c, 0xb6, 0x38, 0x4c, 0x2c, 0xdf, 0x66, 0x8a, 0xa6, 0x98, 0xd3, 0xd4, 0xcb, 0xff, 0x52,
	0x15, 0x14, 0xcf, 0x0e, 0xfb, 0xee, 0x91, 0x6e, 0x55, 0xae, 0x57, 0x6a, 0xb5, 0xea, 0xdc, 0x78,
	0xd4, 0x8a, 0xe3, 0x31, 0x4d, 0xb7, 0xc6, 0x39, 0x55, 0x97, 0x73, 0x6a, 0x07, 0x96, 0xd8, 0x21,
	0x0b, 0x92, 0x3b, 0x34, 0x7f, 0x48, 0x35, 0xfc, 0x98, 0x49, 0x5f, 0x91, 0x0d, 0x7f, 0x27, 0xcb,
	0xe2, 0xa8, 0xf9, 0xd1, 0x6b, 0x8a, 0xe3, 0xc4, 0x22, 0x3c, 0x94, 0x48, 0x29, 0x73, 0xa7, 0xa1,
	0xce, 0x1d, 0x0e, 0xa6, 0xb0, 0x30, 0x72, 0x4a, 0xc9, 0x3d, 0xe7, 0x49, 0xa7, 0xd4, 0xff, 0xa8,
	0x42, 0xdb, 0xdc, 0x58, 0xb3, 0x17, 0xf0, 0x97, 0x42, 0x5f, 0x5e, 0x33, 0xc2, 0xdf, 0xd8, 0x06,
	0xe6, 0x1e, 0xa6, 0xaf, 0x83, 0x60, 0x82, 0xf7, 0x8f, 0x7c, 0x4a, 0xe4, 0x35, 0x4e, 0x4a, 0xa1,
	0x63, 0xaf, 0x2b, 0x23, 0x5a, 0xf0, 0x9f, 0x18, 0x1d, 0x26, 0xe0, 0x30, 0x72, 0xb0, 0xa2, 0x04,
	0xaf, 0xe9, 0xb1, 0xdf, 0x95, 0x6e, 0x2d, 0xf8, 0x9b, 0x6e, 0xb4, 0x20, 0x94, 0x34, 0x25, 0x91,
	0xe2, 0x8b, 0xc7, 0x28, 0x0a, 0x87, 0xa1, 0x88, 0xe4, 0xd4, 0x70, 0x64, 0x92, 0x4c, 0x68, 0xf8,
	0x41, 0xa8, 0x47, 0x94, 0x42, 0x5b, 0x6a, 0xd0, 0x0b, 0xa5, 0x7a, 0x84, 0x7e, 0xcf, 0x2d, 0x2e,
	0x6f, 0xf1, 0xee, 0x98, 0x70, 0x7b, 0x94, 0x49, 0x25, 0x14, 0xf0, 0x4a, 0x31, 0x14, 0x30, 0xf3,
	0x7c, 0x72, 0x65, 0x6b, 0x38, 0xf8, 0x9b, 0x6a, 0x1c, 0xb0, 0x84, 0x5c, 0x76, 0xb1, 0x46, 0x9e,
	0xb2, 0x3b, 0xe2, 0x46, 0x57, 0x91, 0xb1, 0xaf, 0xc3, 0x29, 0x57, 0xfc, 0xa6, 0x08, 0xe7, 0x72,
	0x3f, 0x56, 0x04, 0x4f, 0x9b, 0x38, 0x5f, 0xa3, 0x73, 0xd9, 0xed, 0xa1, 0xb8, 0x88, 0xf0, 0x67,
	0x24, 0xab, 0xe4, 0xb1, 0xea, 0x44, 0x3b, 0x5a, 0xb0, 0x38, 0xce, 0x6f, 0x38, 0xc7, 0xb3, 0x6d,
	0x38, 0xbf, 0x53, 0xc5, 0xab, 0x98, 0xb7, 0xdc, 0x40, 0xbd, 0xb0, 0xf0, 0x51, 0x1c, 0x68, 0xd8,
	0xb0, 0xbc, 0xcf, 0x7f, 0x7b, 0x42, 0xb3, 0xa0, 0xb5, 0x33, 0x07, 0x9b, 0x7a, 0xc2, 0x7a, 0x01,
	0x9a, 0xe3, 0xc4, 0x1f, 0xa8, 0x4b, 0x69, 0x83, 0x03, 0x70, 0xc1, 0xcc, 0xf6, 0x3e, 0xb7, 0xb0,
	0x4c, 0xc7, 0xef, 0x1f, 0x88, 0x3b, 0xf2, 0x25, 0x7b, 0x1f, 0x15, 0xd7, 0xd1, 0x15, 0x30, 0x9b,
	0xe5, 0xe3, 0xbe, 0xb8, 0x6a, 0x5a, 0x20, 0xe4, 0x89, 0x0d, 0x01, 0x7f, 0x52, 0x4b, 0x37, 0x9e,
	0xb9, 0xc6, 0x18, 0xef, 0xae, 0x72, 0x45, 0x4f, 0xda, 0x25, 0xd3, 0xbb, 0xab, 0x1c, 0x98, 0x1e,
	0x2d, 0xbf, 0x08, 0x2b, 0xf8, 0x7a, 0x61, 0x8a, 0x54, 0x13, 0x17, 0x5c, 0xb3, 0xf8, 0xbd, 0x31,
	0xbd, 0xdc, 0x84, 0x48, 0x7c, 0x1f, 0x20, 0xfc, 0xb9, 0xe2, 0x34, 0x6e, 0xa5, 0x2c, 0x23, 0x4e,
	0xd0, 0x2f, 0x2c, 0x16, 0xa2, 0x06, 0xcb, 0xd8, 0x13, 0x30, 0x3e, 0x4a, 0x88, 0xd4, 0xf7, 0x7b,
	0xb1, 0x90, 0x3b, 0x0d, 0x0e, 0xd8, 0xf2, 0x7b, 0x59, 0x05, 0x7d, 0x77, 0xc8, 0x62, 0xe9, 0xd8,
	0x89, 0x5f, 0x39, 0xc0, 0xba, 0x0c, 0x4b, 0xf4, 0xc4, 0x22, 0xdd, 0xf7, 0x10, 0xb7, 0x0b, 0xf0,
	0x99, 0x45, 0xba, 0xd0, 0x71, 0x19, 0x96, 0xd8, 0x70, 0x9f, 0x79, 0x9d, 0x81, 0x1f, 0x3c, 0x8e,
	0x85, 0x48, 0x02, 0x04, 0xdd, 0xe3, 0x10, 0x5e, 0x01, 0xde, 0xc2, 0x25, 0x26, 0x11, 0x26, 0x4f,
	0x84, 0x20, 0x97, 0x64, 0x1e, 0x7a, 0xe8, 0xb1, 0x46, 0x32, 0x4a, 0x78, 0xe8, 0xe1, 0x90, 0x5d,
	0x86, 0xa5, 0x91, 0x1f, 0xa4, 0x26, 0x5e, 0xe1, 0xa4, 0x3d, 0xf2, 0x03, 0xa9, 0xb5, 0xbf, 0x06,
	0xa7, 0x39, 0x9b, 0xf4, 0x59, 0x07, 0x7d, 0x51, 0xd1, 0x21, 0x5f, 0xc8, 0xae, 0x53, 0xf4, 0x01,
	0xe3, 0x89, 0x6e, 0x73, 0xb1, 0x27, 0x7b, 0x3b, 0x0a, 0x07, 0x83, 0x58, 0x88, 0x32, 0xec, 0xed,
	0x2e, 0x07, 0xd8, 0xdf, 0x20, 0xf5, 0xfb, 0xce, 0x78, 0x30, 0xe8, 0x4e, 0x3f, 0x4b, 0x2c, 0x39,
	0x9a, 0xce, 0x4f, 0x9c, 0x9a, 0xd9, 0x92, 0x55, 0xae, 0x09, 0xad, 0x3b, 0xec, 0x49, 0xee, 0xb2,
	0x15, 0xba, 0x3b, 0x9e, 0x4c, 0x3d, 0x98, 0xa9, 0xca, 0x3d, 0x71, 0x90, 0x32, 0x59, 0x69, 0x1b,
	0x1a, 0x4c, 0xb8, 0xd3, 0x88, 0xa9, 0x93, 0xa6, 0xa7, 0xcd, 0x9d, 0x6f, 0x55, 0x78, 0xa9, 0x52,
	0xcb, 0x79, 0x18, 0xf6, 0xfb, 0x03, 0x36, 0x93, 0xb3, 0xad, 0xc9, 0x19, 0xa9, 0x05, 0x8b, 0x2c,
	0x70, 0xf7, 0x07, 0xa9, 0xa3, 0xb9, 0x4c, 0x3e, 0x1f, 0x0b, 0xe2, 0x03, 0x68, 0xa9, 0xab, 0x57,
	0xae, 0xc1, 0x27, 0x3a, 0xa4, 0xfe, 0x5d, 0xf2, 0x95, 0x91, 0x82, 0x08, 0x25, 0xce, 0x23, 0x71,
	0xb9, 0x6e, 0x0a, 0x09, 0xf2, 0x1d, 0xaa, 0xea, 0x5c, 0x62, 0xb5, 0xc6, 0x44, 0x71, 0xc1, 0x40,
	0x79, 0x20, 0x29, 0x4d, 0xcf, 0x46, 0x84, 0x47, 0x62, 0x07, 0xab, 0x6f, 0x74, 0xba, 0xbe, 0xa5,
	0x6e, 0x43, 0x22, 0x39, 0x8d, 0x14, 0xff, 0x90, 0xdc, 0x40, 0xa4, 0xf5, 0x92, 0x6f, 0x35, 0x7e,
	0xd4, 0x29, 0xb1, 0x2b, 0x0e, 0xe2, 0xb4, 0x6d, 0x5e, 0x87, 0xfa, 0xa1, 0x2b, 0x8d, 0xdf, 0x0d,
	0x87, 0x12, 0xd3, 0x88, 0xf0, 0x57, 0x2b, 0xb8, 0xc7, 0xd9, 0xcc, 0x84, 0xd3, 0xcd, 0xc0, 0x4b,
	0xaf, 0x44, 0xe2, 0x7d, 0x19, 0x19, 0x14, 0x39, 0xa5, 0x84, 0x4c, 0x1a, 0xe7, 0xf7, 0x06, 0xc0,
	0x83, 0x11, 0xdd, 0xb6, 0x49, 0x69, 0xa0, 0x40, 0x78, 0xbe, 0xed, 0x98, 0xab, 0x28, 0x52, 0x47,
	0xa5, 0x94, 0xfd, 0x81, 0xd8, 0xfc, 0x94, 0xb5, 0xe6, 0x44, 0xbd, 0x1c, 0xca, 0xe8, 0x5e, 0x72,
	0x4f, 0x25, 0x5e, 0x05, 0xa1, 0xf1, 0x94, 0x01, 0xc2, 0x14, 0xc8, 0x74, 0xd1, 0x55, 0x9b, 0xc1,
	0xb9, 0x58, 0xad, 0xf0, 0x44, 0xb3, 0x55, 0x1e, 0x20, 0x88, 0x58, 0x61, 0xb8, 0x0a, 0x9c, 0x58,
	0x6f, 0x08, 0xa5, 0xbd, 0x5e, 0xac, 0x56, 0x72, 0x3f, 0x49, 0xe6, 0x40, 0xd3, 0xfb, 0x2e, 0xa9,
	0xf1, 0xb2, 0xaa, 0x1a, 0x2f, 0x67, 0x22, 0x43, 0x0c, 0x17, 0xd3, 0xa8, 0xa2, 0xba, 0x2a, 0x3f,
	0x05, 0x4b, 0xb8, 0x4d, 0x55, 0xec, 0x5c, 0x4b, 0x37, 0xac, 0x37, 0xc4, 0xf2, 0xea, 0xed, 0xa7,
	0x9b, 0x58, 0x15, 0x6d, 0x5a, 0x2f, 0x07, 0xf2, 0x94, 0xa4, 0x50, 0x25, 0x5a, 0xf0, 0x4c, 0x9d,
	0x94, 0xd6, 0xbe, 0xaa, 0x62, 0xed, 0x9b, 0xa9, 0x8b, 0x11, 0x5c, 0x30, 0x74, 0x11, 0xcb, 0xf8,
	0x48, 0x7a, 0xf8, 0x15, 0xb8, 0x96, 0x3f, 0x07, 0x92, 0x15, 0xa7, 0x67, 0x1e, 0x44, 0xde, 0xf2,
	0x63, 0x91, 0x0f, 0x31, 0xae, 0xbf, 0x0c, 0x2f, 0x17, 0xd8, 0xdb, 0xd4, 0x84, 0x8f, 0xa4, 0xff,
	0x3f, 0x21, 0x14, 0x83, 0xbd, 0x24, 0x8c, 0xd8, 0x83, 0xe4, 0x80, 0x45, 0x5c, 0x9f, 0xda, 0x89,
	0xfb, 0x85, 0x8c, 0x95, 0x62, 0xc6, 0xcf, 0x88, 0xc1, 0xba, 0xe5, 0x26, 0xdd, 0x83, 0x63, 0xe7,
	0x4e, 0xc4, 0x46, 0x72, 0x8b, 0x25, 0xb9, 0x6c, 0x3f, 0x05, 0x2b, 0x6a, 0x5a, 0x9a, 0x64, 0xce,
	0x2b, 0xbd, 0x54, 0xbf, 0x3b, 0x79, 0xec, 0x69, 0x9d, 0xfd, 0x75, 0x32, 0x84, 0x89, 0x38, 0x16,
	0x28, 0x26, 0xe3, 0x9d, 0x84, 0x74, 0xe1, 0x41, 0xaf, 0x93, 0x7b, 0xbd, 0x06, 0x38, 0xe8, 0x51,
	0x1a, 0xe4, 0x92, 0xbe, 0x75, 0xdc, 0x28, 0x12, 0x07, 0x6d, 0x4d, 0x82, 0xdc, 0x8c, 0x22, 0x11,
	0x66, 0x21, 0x11, 0x9f, 0x6b, 0x59, 0xe4, 0x72, 0xfa, 0x3c, 0x93, 0x82, 0xf6, 0xc5, 0x8c, 0x20,
	0xb9, 0xb6, 0xa5, 0x51, 0x67, 0x85, 0xa4, 0xa3, 0xa8, 0xb3, 0x69, 0x30, 0x46, 0xe1, 0x45, 0x46,
	0xc1, 0x18, 0x65, 0x58, 0xfd, 0x4d, 0xc5, 0x89, 0x2c, 0x05, 0xd8, 0x1f, 0x47, 0xad, 0x73, 0xcb,
	0xef, 0xbd, 0x37, 0x66, 0xd1, 0xd1, 0xcd, 0xc0, 0xa3, 0x40, 0xe8, 0xd6, 0x59, 0x58, 0xe8, 0xfb,
	0xa9, 0x81, 0xb6, 0xe9, 0xd4, 0xfb, 0x7e, 0x6f, 0xdb, 0xb3, 0x0f, 0x05, 0x63, 0x4c, 0x66, 0xc8,
	0x3d, 0x8f, 0xd9, 0x50, 0x42, 0x96, 0x19, 0x5e, 0x85, 0x7d, 0x5d, 0x79, 0x13, 0x51, 0x67, 0x5d,
	0xbb, 0xe3, 0x7b, 0xb7, 0xdd, 0xc4, 0x15, 0x0f, 0xb9, 0x3d, 0x81, 0x45, 0x01, 0xb0, 0xd6, 0xa0,
	0xd6, 0x4b, 0x23, 0x4c, 0xf1, 0x9f, 0x3a, 0x8f, 0xd6, 0xf9, 0xe2, 0xc6, 0xb5, 0xe7, 0x0f, 0x58,
	0x27, 0x0d, 0x25, 0x31, 0xef, 0x34, 0x38, 0x60, 0xcf, 0xff, 0x45, 0x35, 0xa6, 0x66, 0x5d, 0x5a,
	0x5a, 0x79, 0xca, 0xde, 0x41, 0x4f, 0x81, 0x2d, 0xbf, 0x47, 0x16, 0xd9, 0x9b, 0x23, 0x9f, 0xac,
	0x66, 0x15, 0x69, 0x35, 0xd3, 0xfb, 0x07, 0x18, 0x82, 0x8e, 0xd9, 0xbf, 0x5d, 0x11, 0xa7, 0xf3,
	0xb9, 0x12, 0x8f, 0x4b, 0xb5, 0x37, 0x53, 0xaa, 0xd5, 0xb4, 0xaf, 0xe8, 0x52, 0xc9, 0x19, 0xe1,
	0x78, 0x86, 0x34, 0xb6, 0x96, 0x2e, 0xc3, 0xae, 0xdb, 0xf7, 0x03, 0x7c, 0xa7, 0xca, 0x41, 0x44,
	0xfb, 0xbf, 0x56, 0x00, 0xb2, 0x52, 0x72, 0x01, 0x01, 0x9a, 0x22, 0x20, 0x00, 0x79, 0x8c, 0x56,
	0xe5, 0x63, 0xc1, 0x86, 0x5b, 0x89, 0x6b, 0x50, 0x1b, 0x47, 0x03, 0xa1, 0x84, 0xf1, 0x9f, 0x7c,
	0x18, 0x92, 0x83, 0xf1, 0x70, 0xbf, 0xc3, 0xe1, 0x64, 0x7c, 0x6c, 0x20, 0xe0, 0x51, 0x34, 0xc0,
	0xd7, 0x12, 0xc2, 0x20, 0x61, 0x41, 0x82, 0x9f, 0xe9, 0x00, 0x02, 0x04, 0x88, 0x23, 0x5c, 0x85,
	0x65, 0x89, 0x80, 0x2d, 0xa2, 0x27, 0x3c, 0x65, 0x26, 0x79, 0x48, 0xf1, 0xd4, 0xf7, 0x92, 0x03,
	0x69, 0x5f, 0xc4, 0x04, 0x1f, 0x91, 0x03, 0xc6, 0xf7, 0xef, 0xc2, 0xbe, 0x28, 0x52, 0xf6, 0x5f,
	0x04, 0xc8, 0x7a, 0x4f, 0xbe, 0x45, 0x09, 0xde, 0xea, 0x1f, 0x07, 0xd2, 0x15, 0x04, 0x10, 0x44,
	0x0e, 0x3e, 0x7a, 0xcb, 0xbb, 0x69, 0xb8, 0xff, 0x37, 0x99, 0xac, 0x1c, 0xd6, 0x65, 0xfe, 0x21,
	0x73, 0x98, 0xb7, 0xeb, 0x76, 0x1f, 0xb3, 0xe2, 0xad, 0xcc, 0x4a, 0xd1, 0x05, 0xd3, 0xf8, 0x40,
	0xf4, 0x79, 0x58, 0xc4, 0xa0, 0x8d, 0x59, 0x20, 0x51, 0x71, 0xb9, 0x30, 0x17, 0xcd, 0x71, 0xbe,
	0x10, 0xcd, 0xf1, 0x3a, 0xac, 0xe1, 0xc7, 0xc9, 0xc7, 0xe1, 0x57, 0x39, 0x5c, 0x79, 0x62, 0xd1,
	0x86, 0x95, 0x88, 0x79, 0x9d, 0x11, 0xb6, 0xb2, 0x93, 0x3a, 0xfe, 0x2e, 0x45, 0xb2, 0xe5, 0xb3,
	0x46, 0xee, 0xbb, 0x2f, 0x8c, 0x64, 0x13, 0x3d, 0x9f, 0xcd, 0x4b, 0x7a, 0x42, 0x3a, 0x5f, 0xc5,
	0xc8, 0xdd, 0x5b, 0x4c, 0x9e, 0xaa, 0x49, 0xbe, 0xaa, 0xa4, 0x7c, 0x65, 0x8f, 0x45, 0x80, 0x20,
	0x05, 0xe9, 0xb8, 0xf3, 0xea, 0x46, 0x76, 0x46, 0x67, 0x12, 0x48, 0xa2, 0xe8, 0xec, 0xf4, 0xee,
	0x4f, 0xaa, 0xb0, 0x28, 0xeb, 0x2b, 0x46, 0xbc, 0x11, 0x8d, 0xac, 0x66, 0xcc, 0x7f, 0x19, 0x96,
	0x3c, 0x3f, 0x1e, 0x0d, 0xdc, 0x23, 0xe4, 0x6f, 0x9a, 0x2a, 0x20, 0x40, 0x9c, 0xbf, 0xe5, 0x4c,
	0x9b, 0x57, 0x66, 0xda, 0x05, 0x68, 0xc6, 0x7e, 0xc2, 0x28, 0x4e, 0x8b, 0x98, 0x31, 0x1c, 0x20,
	0x37, 0x23, 0x34, 0xed, 0x16, 0xd4, 0x69, 0x77, 0x05, 0x96, 0x3c, 0x16, 0x77, 0x23, 0x9f, 0x82,
	0x66, 0x89, 0x59, 0xa2, 0x80, 0xb2, 0xcb, 0x3d, 0x8d, 0x34, 0x4c, 0x42, 0x12, 0x62, 0xdc, 0x7d,
	0xb4, 0xec, 0xf0, 0xd6, 0xd1, 0xeb, 0x21, 0x0d, 0x04, 0xf0, 0xb6, 0xf1, 0x31, 0xc2, 0x8f, 0xd8,
	0x42, 0x7a, 0x3b, 0x80, 0xd0, 0x91, 0xcd, 0x52, 0xab, 0x10, 0xcd, 0x3e, 0xba, 0x41, 0x4d, 0x39,
	0x3e, 0xc0, 0x29, 0x78, 0x15, 0x96, 0x09, 0x41, 0x4c, 0x44, 0x3a, 0xa5, 0xa7, 0x4c, 0xef, 0x22,
	0x08, 0x0f, 0x0d, 0xc6, 0xc9, 0x41, 0x18, 0xa1, 0x31, 0xa7, 0xe9, 0x88, 0x94, 0x7d, 0x9d, 0x16,
	0x28, 0x56, 0x3c, 0x55, 0x9d, 0x64, 0x83, 0x2f, 0xcb, 0xb5, 0x69, 0x02, 0xf7, 0x87, 0xc1, 0x0d,
	0x6f, 0x53, 0x9c, 0x91, 0xf2, 0x17, 0xca, 0xd7, 0xa1, 0x4e, 0xaf, 0x6d, 0x08, 0x19, 0x82, 0x09,
	0xfb, 0x97, 0xe0, 0x85, 0x3b, 0x18, 0xd5, 0x21, 0x7e, 0xc7, 0xf3, 0xf1, 0x49, 0x4a, 0x91, 0x14,
	0xcf, 0x98, 0x69, 0x8b, 0xba, 0x0a, 0xcb, 0xe2, 0x45, 0x44, 0xf5, 0xb1, 0xc2, 0x25, 0x82, 0xed,
	0xce, 0xfe, 0x64, 0xe1, 0x5d, 0xb8, 0x60, 0xaa, 0x9c, 0xef, 0x9e, 0x8e, 0x17, 0x69, 0x2e, 0x82,
	0x73, 0x22, 0x37, 0xf9, 0xbc, 0x53, 0xa2, 0xac, 0x1b, 0x1f, 0xfe, 0x61, 0xc7, 0x77, 0xa1, 0xa5,
	0xad, 0xf3, 0xf8, 0xad, 0xff, 0x7e, 0xf6, 0xae, 0xf1, 0xae, 0x7b, 0x34, 0x64, 0x41, 0x42, 0x61,
	0xf7, 0xb8, 0x0a, 0x6a, 0x0a, 0x05, 0x34, 0x3d, 0xb6, 0x95, 0x72, 0x60, 0x9d, 0x37, 0x55, 0x28,
	0xfc, 0x37, 0x6f, 0x78, 0x8d, 0xa3, 0x6e, 0x7e, 0x8d, 0x63, 0xa1, 0xf8, 0x1a, 0xc7, 0x4c, 0xd2,
	0xf9, 0x6d, 0x38, 0xef, 0xc4, 0x23, 0x6d, 0x0f, 0x37, 0x00, 0xf0, 0x32, 0x58, 0x1c, 0xf7, 0xc6,
	0x03, 0x31, 0x53, 0x14, 0x88, 0x3d, 0xe6, 0x5b, 0x4d, 0x24, 0xce, 0x4d, 0xcf, 0xdb, 0x19, 0x27,
	0x63, 0x19, 0xea, 0x86, 0x8a, 0x30, 0x53, 0xc8, 0x18, 0x88, 0x78, 0xa6, 0x16, 0xff, 0x14, 0x5c,
	0x72, 0x18, 0x35, 0x59, 0x5f, 0xef, 0x45, 0x68, 0xc6, 0xe3, 0x7c, 0xb3, 0x33, 0x80, 0x1d, 0xe1,
	0x1d, 0x1b, 0x91, 0x7b, 0xcf, 0x0f, 0xfa, 0x03, 0x36, 0x63, 0xb3, 0xd3, 0x58, 0x12, 0x55, 0x25,
	0x96, 0xc4, 0x8c, 0x11, 0xc8, 0x37, 0x94, 0x26, 0xeb, 0x2a, 0x9d, 0x42, 0xeb, 0x1b, 0x7f, 0xfd,
	0x3d, 0x58, 0x49, 0xfd, 0x01, 0xb8, 0xbc, 0xb1, 0xb6, 0x60, 0xf1, 0x56, 0x98, 0x6c, 0xba, 0x83,
	0x81, 0x35, 0xa9, 0xc4, 0x39, 0xec, 0x89, 0xf8, 0xd8, 0xbe, 0xa4, 0xf9, 0x88, 0x8f, 0x65, 0xe2,
	0x67, 0x7b, 0xce, 0xfa, 0x3c, 0xac, 0xdc, 0x92, 0x01, 0x65, 0xb0, 0xb8, 0xab, 0x86, 0xe2, 0x32,
	0x94, 0xf6, 0x8b, 0xc6, 0x42, 0x33, 0x24, 0x7b, 0xce, 0x7a, 0x1f, 0x96, 0xf7, 0x58, 0xb2, 0xe5,
	0x0e, 0x19, 0x49, 0xc1, 0x2b, 0xba, 0x92, 0x55, 0x8c, 0xb6, 0xad, 0x2f, 0x58, 0xc5, 0xb1, 0xe7,
	0xac, 0x5d, 0x00, 0xe5, 0x1d, 0xfe, 0x0d, 0x5d, 0xa9, 0xd9, 0xf7, 0xf6, 0x15, 0x7d, 0x99, 0x19,
	0x86, 0x3d, 0x67, 0xbd, 0x0b, 0xcd, 0xec, 0xc9, 0xfe, 0x4b, 0xda, 0x66, 0xca, 0xcf, 0xed, 0xb6,
	0xa9, 0xf3, 0x21, 0xef, 0xf3, 0x3d, 0x7a, 0x74, 0x52, 0xbe, 0xc6, 0x7f, 0x59, 0xdf, 0xe5, 0x14,
	0x61, 0x4a, 0x69, 0xa2, 0x5d, 0xf4, 0x80, 0xbe, 0xb1, 0x5d, 0xf8, 0x79, 0x4a, 0x49, 0x9f, 0xe3,
	0x5a, 0x7c, 0xfa, 0x5c, 0xfd, 0x86, 0xa9, 0x59, 0xf4, 0x7d, 0xb6, 0x3e, 0x4a, 0x0f, 0x44, 0x63,
	0x1f, 0x05, 0xc2, 0x94, 0xd2, 0x7e, 0x01, 0xd6, 0xb5, 0x2f, 0xc7, 0x5f, 0x2f, 0x2b, 0x56, 0xc5,
	0x9c, 0x52, 0xfe, 0x43, 0x38, 0x55, 0x7c, 0xe0, 0xfd, 0x45, 0x53, 0xd1, 0x0a, 0xd2, 0x8c, 0xe3,
	0x2c, 0x1e, 0x67, 0x37, 0x8f, 0x33, 0x21, 0x4c, 0x1d, 0x9d, 0x46, 0xfa, 0x24, 0xf9, 0x45, 0x5d,
	0x51, 0xf2, 0x6b, 0x7b, 0x43, 0x5f, 0x8e, 0xfc, 0x6e, 0xcf, 0x59, 0x77, 0xa1, 0xb9, 0xc5, 0xe4,
	0xb3, 0xcf, 0xda, 0x81, 0xce, 0x1e, 0xe5, 0x6e, 0x5f, 0xd4, 0x17, 0x47, 0x5f, 0xed, 0x39, 0x6b,
	0x1f, 0x2c, 0xcd, 0x63, 0xd2, 0x57, 0x14, 0x43, 0x0b, 0x29, 0x63, 0x05, 0x8c, 0xf6, 0x75, 0x7d,
	0xb9, 0x93, 0x98, 0xf6, 0x9c, 0xf5, 0x08, 0xd6, 0xb6, 0x58, 0x92, 0x7f, 0x25, 0x58, 0x2b, 0x84,
	0x72, 0x28, 0x53, 0x9b, 0xfe, 0x1e, 0xac, 0x6e, 0xd1, 0x83, 0xde, 0xb2, 0x50, 0xed, 0x20, 0x29,
	0x08, 0x53, 0x8b, 0xfc, 0x3c, 0x52, 0xa3, 0xf8, 0x9c, 0xf3, 0x8b, 0x7a, 0x01, 0x94, 0x43, 0x32,
	0x15, 0x4d, 0x0e, 0x0f, 0x34, 0xd3, 0xb3, 0x77, 0x9a, 0x2f, 0x19, 0x7a, 0x2f, 0x88, 0x3b, 0x75,
	0x3e, 0x69, 0x1f, 0x5e, 0xbe, 0xae, 0x6f, 0xe6, 0x24, 0xe6, 0x54, 0x99, 0xd4, 0x48, 0xdf, 0xc0,
	0xd7, 0xf2, 0xaa, 0xfc, 0x3a, 0xb5, 0xcf, 0x0e, 0xcd, 0x21, 0x69, 0x83, 0x7c, 0xd1, 0xc4, 0xab,
	0x0a, 0xd2, 0xd4, 0x32, 0x7f, 0x16, 0x56, 0xf7, 0x3e, 0x9f, 0x7b, 0x04, 0xf7, 0x65, 0x63, 0xb1,
	0xb9, 0xc7, 0x72, 0xa7, 0x96, 0xfc, 0x39, 0x68, 0x66, 0x2f, 0x46, 0x5e, 0x32, 0x4a, 0x10, 0xfe,
	0x79, 0x6a, 0x59, 0xf7, 0x61, 0x49, 0x7d, 0x60, 0x50, 0xcb, 0x98, 0x0a, 0xc2, 0xd4, 0xf2, 0xee,
	0xc0, 0x02, 0xbd, 0x23, 0xa6, 0x57, 0x06, 0xc4, 0x1b, 0x63, 0x26, 0x65, 0x40, 0x7c, 0xa6, 0x55,
	0x62, 0x8b, 0xa5, 0xc1, 0x05, 0xb5, 0x65, 0x89, 0x8f, 0xa6, 0xb2, 0xc4, 0x67, 0x5a, 0xa5, 0x95,
	0xa7, 0xaa, 0xb4, 0x82, 0x28, 0xfb, 0x6e, 0x5a, 0xa5, 0x33, 0x0c, 0x7b, 0xce, 0xda, 0x83, 0x25,
	0xf5, 0x19, 0x27, 0x2d, 0xd5, 0x14, 0x84, 0xf6, 0x55, 0x7d, 0x99, 0x0a, 0x8a, 0x3d, 0x67, 0x7d,
	0x01, 0x56, 0x0b, 0xef, 0x26, 0xe9, 0x94, 0x90, 0xc2, 0xf3, 0x4f, 0xed, 0x6b, 0x06, 0x49, 0x91,
	0xc3, 0x22, 0xed, 0x2a, 0xff, 0x28, 0x91, 0x56, 0xb0, 0xe5, 0x50, 0x4c, 0xda, 0x55, 0x0e, 0x29,
	0x5f, 0x34, 0x45, 0xcc, 0x28, 0x2d, 0x1a, 0x51, 0xa6, 0x15, 0x8d, 0x48, 0xf9, 0xa2, 0x29, 0xb0,
	0x4b, 0x69, 0xd1, 0x88, 0x32, 0xad, 0x68, 0x44, 0xa2, 0x31, 0x54, 0xdf, 0x0b, 0xba, 0x6c, 0x60,
	0x57, 0x89, 0x60, 0x1a, 0x43, 0x05, 0x25, 0x2d, 0x34, 0x7d, 0xdd, 0xc7, 0x54, 0xa8, 0x44, 0x28,
	0x29, 0x54, 0xa2, 0x50, 0xa1, 0xea, 0x3b, 0x34, 0xda, 0x42, 0x15, 0x04, 0x53, 0xa1, 0x0a, 0x8a,
	0x3d, 0x67, 0x75, 0xe0, 0x54, 0xf1, 0x59, 0x4a, 0xad, 0xd8, 0x2b, 0x20, 0xb5, 0x5f, 0xd2, 0x17,
	0x5e, 0x40, 0x43, 0xe9, 0x0c, 0x7b, 0x37, 0x48, 0xae, 0xc5, 0x7d, 0xab, 0xad, 0x15, 0x53, 0xf8,
	0x62, 0xae, 0x49, 0xa6, 0xd0, 0x57, 0x7b, 0xce, 0xba, 0x8d, 0x32, 0x65, 0x37, 0x89, 0xf5, 0xa5,
	0xd0, 0x37, 0x53, 0x29, 0xf4, 0x95, 0xa8, 0xa8, 0xbe, 0x78, 0x73, 0x59, 0xbf, 0x08, 0xa5, 0x08,
	0x26, 0x2a, 0x2a, 0x28, 0x38, 0x67, 0xd7, 0x72, 0x4f, 0xcd, 0xdc, 0x0a, 0x9f, 0xe9, 0x59, 0x34,
	0x87, 0x65, 0x62, 0xd1, 0x1c, 0x12, 0x0a, 0xae, 0x65, 0x54, 0xa0, 0xe4, 0xa3, 0x2c, 0x5a, 0x59,
	0x9f, 0x7e, 0x6e, 0x5f, 0x36, 0x29, 0x0d, 0x02, 0x81, 0xe6, 0x53, 0xfe, 0xe1, 0x92, 0xab, 0x66,
	0x11, 0x23, 0x09, 0xf1, 0x62, 0x99, 0x84, 0x51, 0x49, 0xb1, 0x5a, 0x78, 0xd2, 0xa3, 0x44, 0x7c,
	0xa5, 0xec, 0x54, 0x2a, 0xbe, 0x14, 0x6e, 0xda, 0x83, 0x25, 0xf5, 0xf9, 0x88, 0xcb, 0x26, 0x31,
	0x20, 0xd7, 0xd0, 0xab, 0x66, 0x21, 0x20, 0x43, 0x5a, 0xf3, 0x39, 0x70, 0x7a, 0x8b, 0x25, 0x85,
	0x17, 0x0c, 0xb4, 0xad, 0xce, 0xe3, 0x98, 0x5a, 0x9d, 0xc7, 0xb2, 0xe7, 0xac, 0x00, 0xd6, 0xb5,
	0xaf, 0x24, 0x5c, 0x37, 0xb3, 0x48, 0xa1, 0xa6, 0xd7, 0xca, 0x38, 0x65, 0xa2, 0x3e, 0x52, 0x92,
	0x8b, 0xef, 0x17, 0x68, 0xe7, 0x75, 0x01, 0xc9, 0x34, 0xaf, 0x0b, 0x68, 0x62, 0x2f, 0xad, 0xc6,
	0xe5, 0xd7, 0xef, 0xa5, 0x15, 0x0c, 0xe3, 0x5e, 0x5a, 0xc1, 0xc1, 0x72, 0x57, 0xf2, 0x01, 0xfb,
	0xaf, 0x1a, 0x26, 0x7b, 0x86, 0x62, 0x5a, 0xab, 0xb3, 0x78, 0xfc, 0x38, 0x89, 0x96, 0xe8, 0xd4,
	0x88, 0x34, 0x9c, 0xab, 0x25, 0xc4, 0x20, 0xbc, 0xa9, 0x3a, 0xce, 0xfb, 0x70, 0xaa, 0x78, 0x37,
	0x41, 0x4b, 0xe2, 0x02, 0xd2, 0xd4, 0x72, 0xdf, 0x83, 0x95, 0x54, 0xcb, 0x40, 0x6f, 0x8f, 0xcb,
	0x26, 0x85, 0x51, 0x20, 0x98, 0x54, 0x1f, 0x19, 0xed, 0x7c, 0xce, 0xea, 0xc2, 0x19, 0xaa, 0x3c,
	0x3d, 0xab, 0x1f, 0xee, 0xb3, 0xc8, 0x7a, 0x69, 0x4a, 0xc1, 0xa2, 0xc1, 0x2f, 0x96, 0x16, 0x2f,
	0x02, 0xae, 0xcf, 0x59, 0x1f, 0xc0, 0xa9, 0xbb, 0x7e, 0xf7, 0xf1, 0x9d, 0x28, 0x1c, 0x96, 0xb6,
	0x5c, 0x09, 0xb7, 0x67, 0x9a, 0x9f, 0x0a, 0x0a, 0xb1, 0x5a, 0x2e, 0x96, 0x9d, 0x96, 0xd5, 0x54,
	0x0c, 0x13, 0xab, 0xa9, 0x38, 0x38, 0x4d, 0xd6, 0x26, 0x22, 0xc6, 0x5d, 0x2b, 0x51, 0x2c, 0x52,
	0xac, 0xf6, 0xcb, 0xa5, 0xba, 0x45, 0x8a, 0x37, 0x51, 0x07, 0xa9, 0x5c, 0xd3, 0xea, 0x20, 0xad,
	0x6b, 0x7a, 0x1d, 0x52, 0xf1, 0xca, 0xd7, 0x41, 0xba, 0xd7, 0xb4, 0x3a, 0x48, 0xfd, 0x9a, 0x5e,
	0x87, 0xd4, 0xc0, 0x0a, 0xfd, 0xc0, 0x60, 0x5d, 0x53, 0xfb, 0xc1, 0xb1, 0x66, 0xe9, 0x07, 0xbe,
	0x7c, 0x30, 0x67, 0x3d, 0x81, 0xb3, 0xfa, 0xa8, 0x57, 0xaf, 0x96, 0x2a, 0xc0, 0x2a, 0x6a, 0xfb,
	0x63, 0x53, 0xf4, 0x60, 0x15, 0xd9, 0x9e, 0xb3, 0x7a, 0xd0, 0x32, 0x86, 0xaf, 0x7a, 0x7d, 0x6a,
	0xad, 0x0a, 0xf6, 0x94, 0x3d, 0x6a, 0x00, 0xeb, 0xda, 0xc8, 0x4c, 0xd7, 0xa7, 0xd6, 0x21, 0xcb,
	0x7f, 0x6d, 0x86, 0x8e, 0x65, 0xab, 0xf0, 0x5f, 0xaa, 0x40, 0xbb, 0x24, 0xb6, 0xd1, 0x1b, 0xe6,
	0x85, 0x47, 0x87, 0xdf, 0xfe, 0x44, 0xd9, 0xf2, 0xa3, 0x7d, 0x28, 0x82, 0x77, 0xb9, 0x35, 0x11,
	0x87, 0x46, 0x76, 0xfb, 0x65, 0x93, 0xd6, 0x55, 0xe8, 0xf4, 0x75, 0xb3, 0xf2, 0x35, 0xd1, 0xe5,
	0xc7, 0xb0, 0xae, 0x8d, 0x4d, 0x72, 0xdd, 0xb0, 0x7e, 0x4c, 0x44, 0xb7, 0x69, 0xbf, 0x52, 0x2a,
	0x8c, 0xb2, 0x28, 0x2e, 0xf6, 0x9c, 0x35, 0x84, 0xf6, 0x84, 0xe7, 0x53, 0x76, 0x11, 0xff, 0x35,
	0x43, 0x95, 0x9a, 0x4b, 0xfb, 0x53, 0x24, 0xa0, 0xd8, 0x06, 0xef, 0xc1, 0x92, 0x1a, 0xec, 0x55,
	0x2b, 0x56, 0x15, 0x04, 0x53, 0xa1, 0x0a, 0x8a, 0xaa, 0x04, 0xca, 0x62, 0xaf, 0x4e, 0x65, 0xc6,
	0x72, 0x25, 0x30, 0x2b, 0xfa, 0xab, 0x15, 0xb8, 0x50, 0x76, 0x7b, 0xed, 0xcd, 0x72, 0x02, 0x4d,
	0x64, 0x68, 0xff, 0x98, 0x51, 0xab, 0x37, 0x65, 0x49, 0xd5, 0xa0, 0xe2, 0xa5, 0x9f, 0x17, 0x4b,
	0xd6, 0x24, 0x89, 0x64, 0x52, 0x83, 0x0a, 0x68, 0x24, 0x17, 0x27, 0x6e, 0xdb, 0x68, 0xe5, 0x62,
	0x11, 0xcb, 0x24, 0x17, 0x8b, 0x78, 0xf6, 0x9c, 0xf5, 0x45, 0xb0, 0xb8, 0xb4, 0x2c, 0xdc, 0x1d,
	0xd1, 0x2a, 0xa8, 0x79, 0x1c, 0x93, 0x82, 0x9a, 0xc7, 0xc2, 0x15, 0x76, 0x35, 0xdb, 0x6b, 0x9a,
	0x59, 0x4c, 0xb9, 0x88, 0x60, 0x62, 0x31, 0xa5, 0x8c, 0xb4, 0x5c, 0x35, 0xf4, 0x85, 0xde, 0xe4,
	0x99, 0x21, 0x98, 0xca, 0x55, 0x50, 0x90, 0x75, 0x4f, 0xe5, 0xcb, 0x8d, 0xf5, 0x4a, 0x81, 0x8a,
	0x61, 0x52, 0x0a, 0x54, 0x1c, 0x7b, 0xce, 0x62, 0x70, 0x7a, 0xf2, 0xb6, 0x81, 0x56, 0x51, 0x9a,
	0x40, 0x33, 0x09, 0x90, 0x09, 0x44, 0x94, 0x56, 0x67, 0x74, 0xfe, 0xfc, 0xaf, 0x94, 0x30, 0xa7,
	0x8a, 0xd8, 0x7e, 0xb5, 0x94, 0x41, 0x55, 0xd4, 0xd4, 0x1c, 0xd1, 0x95, 0x6e, 0xc8, 0x97, 0xa7,
	0xcc, 0xbe, 0x12, 0x73, 0x84, 0x44, 0xa1, 0xd5, 0x7a, 0xe2, 0xed, 0x1e, 0x74, 0xfb, 0x78, 0xb5,
	0xa4, 0x0f, 0x79, 0xbf, 0x7d, 0xd3, 0x6a, 0xad, 0x45, 0xa6, 0x55, 0xb4, 0xf8, 0xe0, 0x10, 0xd6,
	0x78, 0xbd, 0xa4, 0xc6, 0x9c, 0x7f, 0xbc, 0x69, 0x15, 0xd5, 0xe1, 0x0a, 0x31, 0x56, 0xe6, 0x87,
	0xfe, 0xa6, 0xa9, 0x5e, 0x43, 0x06, 0x93, 0x18, 0x2b, 0xc9, 0x62, 0xcf, 0x59, 0x4f, 0xe1, 0xbc,
	0xc9, 0x7b, 0xfa, 0x63, 0x26, 0xe3, 0xaa, 0x06, 0xb9, 0xfd, 0x71, 0xb3, 0xb1, 0x55, 0x83, 0x6e,
	0xcf, 0x59, 0x09, 0x9c, 0x33, 0xf8, 0x34, 0xbf, 0x36, 0x5b, 0xbd, 0x1c, 0xb7, 0xfd, 0xfa, 0xac,
	0xd5, 0x72, 0x6c, 0x7b, 0xce, 0xfa, 0xd5, 0x0a, 0x5c, 0x9d, 0xee, 0x55, 0xfc, 0xd6, 0x94, 0x25,
	0x56, 0x9f, 0xad, 0xfd, 0x13, 0xd3, 0x38, 0xdb, 0x90, 0x91, 0xac, 0x04, 0x93, 0xfe, 0xc2, 0x97,
	0xf3, 0x07, 0x4f, 0x13, 0x08, 0x26, 0x91, 0x30, 0x81, 0x88, 0xdc, 0x7d, 0xce, 0xe0, 0x95, 0x7c,
	0x2d, 0x5f, 0x8b, 0x1e, 0xcb, 0x44, 0x68, 0x3d, 0x36, 0xea, 0xbe, 0xa7, 0xc5, 0x76, 0x0f, 0x83,
	0x50, 0x90, 0xef, 0x95, 0x71, 0x4b, 0x98, 0xe1, 0x38, 0xec, 0x89, 0x56, 0x31, 0x9b, 0x40, 0x13,
	0xfb, 0xd9, 0x2e, 0xac, 0xdd, 0xec, 0x76, 0xd9, 0x48, 0xad, 0x66, 0x72, 0x61, 0x2a, 0xa2, 0xf0,
	0x5a, 0x5e, 0x99, 0x01, 0x4b, 0x54, 0xf2, 0x73, 0xb0, 0xb2, 0xc7, 0x02, 0x4f, 0x7c, 0x61, 0x3a,
	0xb3, 0x41, 0xee, 0x3b, 0x2f, 0xfe, 0xda, 0x34, 0x14, 0x51, 0x76, 0x0f, 0x4e, 0xe7, 0x3e, 0xdc,
	0xf1, 0x07, 0x4c, 0x43, 0xa8, 0x09, 0x1c, 0x3d, 0xa1, 0x34, 0x68, 0xa2, 0x9e, 0x90, 0x0e, 0x9e,
	0xd3, 0x8f, 0x7b, 0x2c, 0xc2, 0x98, 0x83, 0x53, 0xca, 0x10, 0x68, 0xbc, 0xb6, 0x8f, 0xcd, 0x88,
	0x99, 0x75, 0xec, 0xb6, 0x1f, 0x77, 0xdd, 0xc8, 0x2b, 0xe5, 0x80, 0x09, 0x1c, 0x7d, 0xc7, 0x34,
	0x68, 0x59, 0xc7, 0xb8, 0xca, 0x9e, 0xb6, 0xa3, 0x6c, 0xf7, 0x33, 0x89, 0xa6, 0xef, 0x98, 0x1e,
	0x53, 0x54, 0xd8, 0x87, 0xb5, 0x3d, 0x96, 0xa4, 0x9f, 0x1f, 0xfa, 0x41, 0x5f, 0xb3, 0xe7, 0xc8,
	0xa1, 0x1c, 0x8d, 0xfc, 0xa0, 0xcf, 0xab, 0x7a, 0x75, 0x26, 0x3c, 0x51, 0xd1, 0x2f, 0x41, 0xeb,
	0x5e, 0xd8, 0x0f, 0xc7, 0xc9, 0x6d, 0x3f, 0xde, 0x74, 0x23, 0xef, 0xe6, 0x60, 0xb0, 0xc7, 0xba,
	0xe3, 0xc8, 0x4f, 0x74, 0xfb, 0x47, 0x13, 0x2a, 0xaf, 0xf6, 0xcd, 0x63, 0x60, 0x67, 0x64, 0xdd,
	0x62, 0x49, 0x0a, 0x16, 0x61, 0x6b, 0x74, 0x66, 0x45, 0x1d, 0x9a, 0x9e, 0xac, 0x7a, 0x4c, 0x51,
	0xe1, 0x3e, 0xac, 0x4d, 0x78, 0xcd, 0x5e, 0x33, 0x1d, 0x36, 0xab, 0x58, 0x26, 0x65, 0xb7, 0x88,
	0x67, 0xcf, 0x59, 0xcf, 0x70, 0xb5, 0x4b, 0x6d, 0x4b, 0x6e, 0x37, 0xf1, 0x0f, 0x51, 0x07, 0x88,
	0x2d, 0x6d, 0x6b, 0x75, 0x98, 0xbc, 0x6b, 0x6f, 0xcc, 0x8e, 0x2c, 0x7a, 0x97, 0xa4, 0xbe, 0x81,
	0x05, 0x47, 0x43, 0xcd, 0x72, 0x67, 0x74, 0x87, 0xd4, 0x48, 0xe1, 0x12, 0xef, 0x45, 0x52, 0x04,
	0x35, 0xde, 0x81, 0x1a, 0x45, 0x50, 0xef, 0xb7, 0xa8, 0x61, 0x57, 0x93, 0xb3, 0x21, 0xb9, 0x75,
	0x70, 0x81, 0xf0, 0x7e, 0xa8, 0x3d, 0x2a, 0x97, 0x9f, 0x78, 0xb1, 0x1b, 0x25, 0x5f, 0xa9, 0xac,
	0x01, 0x49, 0xab, 0x09, 0x37, 0x3d, 0xa3, 0x9b, 0x4c, 0x11, 0x53, 0xb7, 0x88, 0xe8, 0x5d, 0xff,
	0x70, 0x27, 0x81, 0x32, 0x18, 0x17, 0x33, 0x1c, 0xb6, 0xe7, 0xe4, 0x36, 0xf3, 0x65, 0x78, 0xc1,
	0xec, 0xb9, 0xf7, 0x71, 0x53, 0xf9, 0x5a, 0xf4, 0xb6, 0xce, 0xaa, 0x52, 0xe2, 0x18, 0x68, 0xcf,
	0x59, 0x5f, 0x81, 0x76, 0x89, 0x13, 0xde, 0x1b, 0x25, 0xd5, 0x6b, 0xf0, 0xdb, 0x6f, 0x96, 0xd5,
	0xaf, 0xc9, 0x80, 0x82, 0xd2, 0x4a, 0x9d, 0x04, 0xf6, 0x8e, 0x62, 0x51, 0xf1, 0xcb, 0xa5, 0xce,
	0x04, 0x29, 0x9e, 0x56, 0xb9, 0xa1, 0x0a, 0xf3, 0x88, 0xf6, 0x9c, 0xe5, 0x92, 0xfd, 0x50, 0xa8,
	0x57, 0x64, 0x83, 0xbf, 0x36, 0xe5, 0xf4, 0x86, 0x5c, 0x0d, 0x5e, 0xd2, 0x56, 0x52, 0x44, 0xb3,
	0xe7, 0x6e, 0x7c, 0x19, 0x8f, 0x71, 0x0a, 0x9e, 0xd5, 0x7d, 0x1d, 0xd0, 0xe8, 0xd8, 0xa1, 0x44,
	0xdf, 0x32, 0xed, 0x4d, 0xb4, 0x21, 0xb4, 0xec, 0xb9, 0x1b, 0x1f, 0x50, 0x5c, 0x2c, 0xe1, 0x0d,
	0xb9, 0xad, 0xf8, 0x4f, 0x69, 0xb7, 0x5b, 0x4a, 0x48, 0x2d, 0x13, 0x87, 0x92, 0xfb, 0xd4, 0x8d,
	0x3f, 0xae, 0xc1, 0x32, 0x9d, 0x48, 0x88, 0xb2, 0x3f, 0xaf, 0xb8, 0x5e, 0x62, 0x28, 0xa6, 0x19,
	0xce, 0x32, 0x5e, 0x2c, 0x3d, 0xd6, 0x21, 0x24, 0xda, 0xfc, 0x4e, 0x5e, 0x9c, 0xd2, 0xaa, 0x84,
	0x13, 0x68, 0x26, 0x4d, 0x77, 0x02, 0x91, 0x0c, 0xfa, 0xb9, 0x4b, 0x46, 0x57, 0x0c, 0x35, 0xa4,
	0x18, 0xa6, 0xbd, 0xbb, 0x8a, 0x43, 0x1e, 0x1e, 0xca, 0x15, 0x8b, 0x0d, 0xc3, 0x16, 0x41, 0x7c,
	0x37, 0x9d, 0x1a, 0x65, 0x18, 0x82, 0x20, 0x13, 0xec, 0xf3, 0x52, 0x79, 0xc1, 0x02, 0xcd, 0x48,
	0x10, 0x36, 0xc1, 0x3c, 0xb7, 0x96, 0xff, 0xf0, 0x07, 0x1b, 0x95, 0x7f, 0xfd, 0x83, 0x8d, 0xca,
	0xf7, 0x7f, 0xb0, 0x51, 0xd9, 0x5f, 0x18, 0x45, 0x61, 0x12, 0x7e, 0xf2, 0xff, 0x05, 0x00, 0x00,
	0xff, 0xff, 0xa1, 0x9a, 0x78, 0x76, 0xb2, 0xc3, 0x00, 0x00,
}
